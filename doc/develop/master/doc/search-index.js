var N = null;var searchIndex = {};
searchIndex["adler32"]={"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",N,N],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",N,[[["r"]],["result",["u32"]]]],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,[[],["rollingadler32"]]],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,[[["u32"]],["rollingadler32"]]],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,N],[11,"hash","","Returns the current hash.",0,[[["self"]],["u32"]]],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,[[["self"],["usize"],["u8"]]]],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,[[["self"],["u8"]]]],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,N]],"paths":[[3,"RollingAdler32"]]};
searchIndex["alsa_sys"]={"doc":"","items":[[3,"snd_dlsym_link","alsa_sys","",N,N],[12,"next","","",0,N],[12,"dlsym_name","","",0,N],[12,"dlsym_ptr","","",0,N],[3,"snd_devname_t","","",N,N],[12,"name","","",1,N],[12,"comment","","",1,N],[12,"next","","",1,N],[3,"snd_pcm_channel_area_t","","",N,N],[12,"addr","","",2,N],[12,"first","","",2,N],[12,"step","","",2,N],[3,"snd_pcm_sync_id_t","","",N,N],[12,"data","","",3,N],[3,"snd_pcm_chmap_t","","",N,N],[12,"channels","","",4,N],[12,"pos","","",4,N],[3,"snd_pcm_chmap_query_t","","",N,N],[12,"_type","","",5,N],[12,"map","","",5,N],[3,"snd_pcm_scope_ops_t","","",N,N],[12,"enable","","",6,N],[12,"disable","","",6,N],[12,"start","","",6,N],[12,"stop","","",6,N],[12,"update","","",6,N],[12,"reset","","",6,N],[12,"close","","",6,N],[3,"snd_timer_read_t","","",N,N],[12,"resolution","","",7,N],[12,"ticks","","",7,N],[3,"snd_timer_tread_t","","",N,N],[12,"event","","",8,N],[12,"tstamp","","",8,N],[12,"val","","",8,N],[3,"snd_aes_iec958_t","","",N,N],[12,"status","","",9,N],[12,"subcode","","",9,N],[12,"pad","","",9,N],[12,"dig_subframe","","",9,N],[3,"snd_mixer_selem_regopt","","",N,N],[12,"ver","","",10,N],[12,"_abstract","","",10,N],[12,"device","","",10,N],[12,"playback_pcm","","",10,N],[12,"capture_pcm","","",10,N],[3,"snd_seq_addr_t","","",N,N],[12,"client","","",11,N],[12,"port","","",11,N],[3,"snd_seq_connect_t","","",N,N],[12,"sender","","",12,N],[12,"dest","","",12,N],[3,"snd_seq_real_time_t","","",N,N],[12,"tv_sec","","",13,N],[12,"tv_nsec","","",13,N],[3,"snd_seq_timestamp_t","","",N,N],[12,"data","","",14,N],[3,"snd_seq_ev_note_t","","",N,N],[12,"channel","","",15,N],[12,"note","","",15,N],[12,"velocity","","",15,N],[12,"off_velocity","","",15,N],[12,"duration","","",15,N],[3,"snd_seq_ev_ctrl_t","","",N,N],[12,"channel","","",16,N],[12,"unused","","",16,N],[12,"param","","",16,N],[12,"value","","",16,N],[3,"snd_seq_ev_raw8_t","","",N,N],[12,"d","","",17,N],[3,"snd_seq_ev_raw32_t","","",N,N],[12,"d","","",18,N],[3,"snd_seq_ev_ext_t","","",N,N],[12,"len","","",19,N],[12,"ptr","","",19,N],[3,"snd_seq_result_t","","",N,N],[12,"event","","",20,N],[12,"result","","",20,N],[3,"snd_seq_queue_skew_t","","",N,N],[12,"value","","",21,N],[12,"base","","",21,N],[3,"snd_seq_ev_queue_control_t","","",N,N],[12,"queue","","",22,N],[12,"unused","","",22,N],[12,"param","","",22,N],[3,"Union_Unnamed9","","",N,N],[12,"data","","",23,N],[3,"snd_seq_event_t","","",N,N],[12,"_type","","",24,N],[12,"flags","","",24,N],[12,"tag","","",24,N],[12,"queue","","",24,N],[12,"time","","",24,N],[12,"source","","",24,N],[12,"dest","","",24,N],[12,"data","","",24,N],[3,"Union_Unnamed10","","",N,N],[12,"data","","",25,N],[3,"__BindgenBitfieldUnit","","",N,N],[3,"_snd_pcm_audio_tstamp_config","","",N,N],[12,"_bitfield_1","","",26,N],[12,"__bindgen_padding_0","","",26,N],[12,"__bindgen_align","","",26,N],[3,"_snd_pcm_audio_tstamp_report","","",N,N],[12,"_bitfield_1","","",27,N],[12,"accuracy","","",27,N],[4,"snd_async_handler_t","","",N,N],[4,"snd_shm_area","","",N,N],[4,"snd_input_t","","",N,N],[4,"snd_output_t","","",N,N],[4,"snd_config_t","","",N,N],[4,"Struct__snd_config_iterator","","",N,N],[4,"snd_config_update_t","","",N,N],[4,"snd_pcm_info_t","","",N,N],[4,"snd_pcm_hw_params_t","","",N,N],[4,"snd_pcm_sw_params_t","","",N,N],[4,"snd_pcm_status_t","","",N,N],[4,"snd_pcm_access_mask_t","","",N,N],[4,"snd_pcm_format_mask_t","","",N,N],[4,"snd_pcm_subformat_mask_t","","",N,N],[4,"snd_pcm_t","","",N,N],[4,"snd_pcm_scope_t","","",N,N],[4,"snd_pcm_hook_t","","",N,N],[4,"snd_rawmidi_info_t","","",N,N],[4,"snd_rawmidi_params_t","","",N,N],[4,"snd_rawmidi_status_t","","",N,N],[4,"snd_rawmidi_t","","",N,N],[4,"snd_timer_id_t","","",N,N],[4,"snd_timer_ginfo_t","","",N,N],[4,"snd_timer_gparams_t","","",N,N],[4,"snd_timer_gstatus_t","","",N,N],[4,"snd_timer_info_t","","",N,N],[4,"snd_timer_params_t","","",N,N],[4,"snd_timer_status_t","","",N,N],[4,"snd_timer_query_t","","",N,N],[4,"snd_timer_t","","",N,N],[4,"snd_hwdep_info_t","","",N,N],[4,"snd_hwdep_dsp_status_t","","",N,N],[4,"snd_hwdep_dsp_image_t","","",N,N],[4,"snd_hwdep_t","","",N,N],[4,"snd_ctl_card_info_t","","",N,N],[4,"snd_ctl_elem_id_t","","",N,N],[4,"snd_ctl_elem_list_t","","",N,N],[4,"snd_ctl_elem_info_t","","",N,N],[4,"snd_ctl_elem_value_t","","",N,N],[4,"snd_ctl_event_t","","",N,N],[4,"snd_ctl_t","","",N,N],[4,"snd_sctl_t","","",N,N],[4,"snd_hctl_elem_t","","",N,N],[4,"snd_hctl_t","","",N,N],[4,"snd_mixer_t","","",N,N],[4,"snd_mixer_class_t","","",N,N],[4,"snd_mixer_elem_t","","",N,N],[4,"snd_mixer_selem_id_t","","",N,N],[4,"snd_seq_t","","",N,N],[4,"snd_seq_system_info_t","","",N,N],[4,"snd_seq_client_info_t","","",N,N],[4,"snd_seq_client_pool_t","","",N,N],[4,"snd_seq_port_info_t","","",N,N],[4,"snd_seq_port_subscribe_t","","",N,N],[4,"snd_seq_query_subscribe_t","","",N,N],[4,"snd_seq_queue_info_t","","",N,N],[4,"snd_seq_queue_status_t","","",N,N],[4,"snd_seq_queue_tempo_t","","",N,N],[4,"snd_seq_queue_timer_t","","",N,N],[4,"snd_seq_remove_events_t","","",N,N],[4,"snd_midi_event_t","","",N,N],[7,"snd_dlsym_start","","",N,N],[7,"snd_lib_error","","",N,N],[7,"snd_config","","",N,N],[7,"snd_seq_event_types","","",N,N],[5,"snd_asoundlib_version","","",N,N],[5,"snd_dlopen","","",N,N],[5,"snd_dlsym","","",N,N],[5,"snd_dlclose","","",N,N],[5,"snd_async_add_handler","","",N,N],[5,"snd_async_del_handler","","",N,N],[5,"snd_async_handler_get_fd","","",N,N],[5,"snd_async_handler_get_signo","","",N,N],[5,"snd_async_handler_get_callback_private","","",N,N],[5,"snd_shm_area_create","","",N,N],[5,"snd_shm_area_share","","",N,N],[5,"snd_shm_area_destroy","","",N,N],[5,"snd_user_file","","",N,N],[5,"snd_input_stdio_open","","",N,N],[5,"snd_input_stdio_attach","","",N,N],[5,"snd_input_buffer_open","","",N,N],[5,"snd_input_close","","",N,N],[5,"snd_input_scanf","","",N,N],[5,"snd_input_gets","","",N,N],[5,"snd_input_getc","","",N,N],[5,"snd_input_ungetc","","",N,N],[5,"snd_output_stdio_open","","",N,N],[5,"snd_output_stdio_attach","","",N,N],[5,"snd_output_buffer_open","","",N,N],[5,"snd_output_buffer_string","","",N,N],[5,"snd_output_close","","",N,N],[5,"snd_output_printf","","",N,N],[5,"snd_output_puts","","",N,N],[5,"snd_output_putc","","",N,N],[5,"snd_output_flush","","",N,N],[5,"snd_strerror","","",N,N],[5,"snd_lib_error_set_handler","","",N,N],[5,"snd_config_top","","",N,N],[5,"snd_config_load","","",N,N],[5,"snd_config_load_override","","",N,N],[5,"snd_config_save","","",N,N],[5,"snd_config_update","","",N,N],[5,"snd_config_update_r","","",N,N],[5,"snd_config_update_free","","",N,N],[5,"snd_config_update_free_global","","",N,N],[5,"snd_config_search","","",N,N],[5,"snd_config_searchv","","",N,N],[5,"snd_config_search_definition","","",N,N],[5,"snd_config_expand","","",N,N],[5,"snd_config_evaluate","","",N,N],[5,"snd_config_add","","",N,N],[5,"snd_config_delete","","",N,N],[5,"snd_config_delete_compound_members","","",N,N],[5,"snd_config_copy","","",N,N],[5,"snd_config_make","","",N,N],[5,"snd_config_make_integer","","",N,N],[5,"snd_config_make_integer64","","",N,N],[5,"snd_config_make_real","","",N,N],[5,"snd_config_make_string","","",N,N],[5,"snd_config_make_pointer","","",N,N],[5,"snd_config_make_compound","","",N,N],[5,"snd_config_imake_integer","","",N,N],[5,"snd_config_imake_integer64","","",N,N],[5,"snd_config_imake_real","","",N,N],[5,"snd_config_imake_string","","",N,N],[5,"snd_config_imake_pointer","","",N,N],[5,"snd_config_get_type","","",N,N],[5,"snd_config_set_id","","",N,N],[5,"snd_config_set_integer","","",N,N],[5,"snd_config_set_integer64","","",N,N],[5,"snd_config_set_real","","",N,N],[5,"snd_config_set_string","","",N,N],[5,"snd_config_set_ascii","","",N,N],[5,"snd_config_set_pointer","","",N,N],[5,"snd_config_get_id","","",N,N],[5,"snd_config_get_integer","","",N,N],[5,"snd_config_get_integer64","","",N,N],[5,"snd_config_get_real","","",N,N],[5,"snd_config_get_ireal","","",N,N],[5,"snd_config_get_string","","",N,N],[5,"snd_config_get_ascii","","",N,N],[5,"snd_config_get_pointer","","",N,N],[5,"snd_config_test_id","","",N,N],[5,"snd_config_iterator_first","","",N,N],[5,"snd_config_iterator_next","","",N,N],[5,"snd_config_iterator_end","","",N,N],[5,"snd_config_iterator_entry","","",N,N],[5,"snd_config_get_bool_ascii","","",N,N],[5,"snd_config_get_bool","","",N,N],[5,"snd_config_get_ctl_iface_ascii","","",N,N],[5,"snd_config_get_ctl_iface","","",N,N],[5,"snd_names_list","","",N,N],[5,"snd_names_list_free","","",N,N],[5,"snd_pcm_open","","",N,N],[5,"snd_pcm_open_lconf","","",N,N],[5,"snd_pcm_open_fallback","","",N,N],[5,"snd_pcm_close","","",N,N],[5,"snd_pcm_name","","",N,N],[5,"snd_pcm_type","","",N,N],[5,"snd_pcm_stream","","",N,N],[5,"snd_pcm_poll_descriptors_count","","",N,N],[5,"snd_pcm_poll_descriptors","","",N,N],[5,"snd_pcm_poll_descriptors_revents","","",N,N],[5,"snd_pcm_nonblock","","",N,N],[5,"snd_async_add_pcm_handler","","",N,N],[5,"snd_async_handler_get_pcm","","",N,N],[5,"snd_pcm_info","","",N,N],[5,"snd_pcm_hw_params_current","","",N,N],[5,"snd_pcm_hw_params","","",N,N],[5,"snd_pcm_hw_free","","",N,N],[5,"snd_pcm_sw_params_current","","",N,N],[5,"snd_pcm_sw_params","","",N,N],[5,"snd_pcm_prepare","","",N,N],[5,"snd_pcm_reset","","",N,N],[5,"snd_pcm_status","","",N,N],[5,"snd_pcm_start","","",N,N],[5,"snd_pcm_drop","","",N,N],[5,"snd_pcm_drain","","",N,N],[5,"snd_pcm_pause","","",N,N],[5,"snd_pcm_state","","",N,N],[5,"snd_pcm_hwsync","","",N,N],[5,"snd_pcm_delay","","",N,N],[5,"snd_pcm_resume","","",N,N],[5,"snd_pcm_htimestamp","","",N,N],[5,"snd_pcm_avail","","",N,N],[5,"snd_pcm_avail_update","","",N,N],[5,"snd_pcm_avail_delay","","",N,N],[5,"snd_pcm_rewindable","","",N,N],[5,"snd_pcm_rewind","","",N,N],[5,"snd_pcm_forwardable","","",N,N],[5,"snd_pcm_forward","","",N,N],[5,"snd_pcm_writei","","",N,N],[5,"snd_pcm_readi","","",N,N],[5,"snd_pcm_writen","","",N,N],[5,"snd_pcm_readn","","",N,N],[5,"snd_pcm_wait","","",N,N],[5,"snd_pcm_link","","",N,N],[5,"snd_pcm_unlink","","",N,N],[5,"snd_pcm_query_chmaps","","",N,N],[5,"snd_pcm_query_chmaps_from_hw","","",N,N],[5,"snd_pcm_free_chmaps","","",N,N],[5,"snd_pcm_get_chmap","","",N,N],[5,"snd_pcm_set_chmap","","",N,N],[5,"snd_pcm_chmap_type_name","","",N,N],[5,"snd_pcm_chmap_name","","",N,N],[5,"snd_pcm_chmap_long_name","","",N,N],[5,"snd_pcm_chmap_print","","",N,N],[5,"snd_pcm_chmap_from_string","","",N,N],[5,"snd_pcm_chmap_parse_string","","",N,N],[5,"snd_pcm_recover","","",N,N],[5,"snd_pcm_set_params","","",N,N],[5,"snd_pcm_get_params","","",N,N],[5,"snd_pcm_info_sizeof","","",N,N],[5,"snd_pcm_info_malloc","","",N,N],[5,"snd_pcm_info_free","","",N,N],[5,"snd_pcm_info_copy","","",N,N],[5,"snd_pcm_info_get_device","","",N,N],[5,"snd_pcm_info_get_subdevice","","",N,N],[5,"snd_pcm_info_get_stream","","",N,N],[5,"snd_pcm_info_get_card","","",N,N],[5,"snd_pcm_info_get_id","","",N,N],[5,"snd_pcm_info_get_name","","",N,N],[5,"snd_pcm_info_get_subdevice_name","","",N,N],[5,"snd_pcm_info_get_class","","",N,N],[5,"snd_pcm_info_get_subclass","","",N,N],[5,"snd_pcm_info_get_subdevices_count","","",N,N],[5,"snd_pcm_info_get_subdevices_avail","","",N,N],[5,"snd_pcm_info_get_sync","","",N,N],[5,"snd_pcm_info_set_device","","",N,N],[5,"snd_pcm_info_set_subdevice","","",N,N],[5,"snd_pcm_info_set_stream","","",N,N],[5,"snd_pcm_hw_params_any","","",N,N],[5,"snd_pcm_hw_params_can_mmap_sample_resolution","","",N,N],[5,"snd_pcm_hw_params_is_double","","",N,N],[5,"snd_pcm_hw_params_is_batch","","",N,N],[5,"snd_pcm_hw_params_is_block_transfer","","",N,N],[5,"snd_pcm_hw_params_is_monotonic","","",N,N],[5,"snd_pcm_hw_params_can_overrange","","",N,N],[5,"snd_pcm_hw_params_can_pause","","",N,N],[5,"snd_pcm_hw_params_can_resume","","",N,N],[5,"snd_pcm_hw_params_is_half_duplex","","",N,N],[5,"snd_pcm_hw_params_is_joint_duplex","","",N,N],[5,"snd_pcm_hw_params_can_sync_start","","",N,N],[5,"snd_pcm_hw_params_can_disable_period_wakeup","","",N,N],[5,"snd_pcm_hw_params_supports_audio_wallclock_ts","","",N,N],[5,"snd_pcm_hw_params_get_rate_numden","","",N,N],[5,"snd_pcm_hw_params_get_sbits","","",N,N],[5,"snd_pcm_hw_params_get_fifo_size","","",N,N],[5,"snd_pcm_hw_params_sizeof","","",N,N],[5,"snd_pcm_hw_params_malloc","","",N,N],[5,"snd_pcm_hw_params_free","","",N,N],[5,"snd_pcm_hw_params_copy","","",N,N],[5,"snd_pcm_hw_params_get_access","","",N,N],[5,"snd_pcm_hw_params_test_access","","",N,N],[5,"snd_pcm_hw_params_set_access","","",N,N],[5,"snd_pcm_hw_params_set_access_first","","",N,N],[5,"snd_pcm_hw_params_set_access_last","","",N,N],[5,"snd_pcm_hw_params_set_access_mask","","",N,N],[5,"snd_pcm_hw_params_get_access_mask","","",N,N],[5,"snd_pcm_hw_params_get_format","","",N,N],[5,"snd_pcm_hw_params_test_format","","",N,N],[5,"snd_pcm_hw_params_set_format","","",N,N],[5,"snd_pcm_hw_params_set_format_first","","",N,N],[5,"snd_pcm_hw_params_set_format_last","","",N,N],[5,"snd_pcm_hw_params_set_format_mask","","",N,N],[5,"snd_pcm_hw_params_get_format_mask","","",N,N],[5,"snd_pcm_hw_params_get_subformat","","",N,N],[5,"snd_pcm_hw_params_test_subformat","","",N,N],[5,"snd_pcm_hw_params_set_subformat","","",N,N],[5,"snd_pcm_hw_params_set_subformat_first","","",N,N],[5,"snd_pcm_hw_params_set_subformat_last","","",N,N],[5,"snd_pcm_hw_params_set_subformat_mask","","",N,N],[5,"snd_pcm_hw_params_get_subformat_mask","","",N,N],[5,"snd_pcm_hw_params_get_channels","","",N,N],[5,"snd_pcm_hw_params_get_channels_min","","",N,N],[5,"snd_pcm_hw_params_get_channels_max","","",N,N],[5,"snd_pcm_hw_params_test_channels","","",N,N],[5,"snd_pcm_hw_params_set_channels","","",N,N],[5,"snd_pcm_hw_params_set_channels_min","","",N,N],[5,"snd_pcm_hw_params_set_channels_max","","",N,N],[5,"snd_pcm_hw_params_set_channels_minmax","","",N,N],[5,"snd_pcm_hw_params_set_channels_near","","",N,N],[5,"snd_pcm_hw_params_set_channels_first","","",N,N],[5,"snd_pcm_hw_params_set_channels_last","","",N,N],[5,"snd_pcm_hw_params_get_rate","","",N,N],[5,"snd_pcm_hw_params_get_rate_min","","",N,N],[5,"snd_pcm_hw_params_get_rate_max","","",N,N],[5,"snd_pcm_hw_params_test_rate","","",N,N],[5,"snd_pcm_hw_params_set_rate","","",N,N],[5,"snd_pcm_hw_params_set_rate_min","","",N,N],[5,"snd_pcm_hw_params_set_rate_max","","",N,N],[5,"snd_pcm_hw_params_set_rate_minmax","","",N,N],[5,"snd_pcm_hw_params_set_rate_near","","",N,N],[5,"snd_pcm_hw_params_set_rate_first","","",N,N],[5,"snd_pcm_hw_params_set_rate_last","","",N,N],[5,"snd_pcm_hw_params_set_rate_resample","","",N,N],[5,"snd_pcm_hw_params_get_rate_resample","","",N,N],[5,"snd_pcm_hw_params_set_export_buffer","","",N,N],[5,"snd_pcm_hw_params_get_export_buffer","","",N,N],[5,"snd_pcm_hw_params_set_period_wakeup","","",N,N],[5,"snd_pcm_hw_params_get_period_wakeup","","",N,N],[5,"snd_pcm_hw_params_get_period_time","","",N,N],[5,"snd_pcm_hw_params_get_period_time_min","","",N,N],[5,"snd_pcm_hw_params_get_period_time_max","","",N,N],[5,"snd_pcm_hw_params_test_period_time","","",N,N],[5,"snd_pcm_hw_params_set_period_time","","",N,N],[5,"snd_pcm_hw_params_set_period_time_min","","",N,N],[5,"snd_pcm_hw_params_set_period_time_max","","",N,N],[5,"snd_pcm_hw_params_set_period_time_minmax","","",N,N],[5,"snd_pcm_hw_params_set_period_time_near","","",N,N],[5,"snd_pcm_hw_params_set_period_time_first","","",N,N],[5,"snd_pcm_hw_params_set_period_time_last","","",N,N],[5,"snd_pcm_hw_params_get_period_size","","",N,N],[5,"snd_pcm_hw_params_get_period_size_min","","",N,N],[5,"snd_pcm_hw_params_get_period_size_max","","",N,N],[5,"snd_pcm_hw_params_test_period_size","","",N,N],[5,"snd_pcm_hw_params_set_period_size","","",N,N],[5,"snd_pcm_hw_params_set_period_size_min","","",N,N],[5,"snd_pcm_hw_params_set_period_size_max","","",N,N],[5,"snd_pcm_hw_params_set_period_size_minmax","","",N,N],[5,"snd_pcm_hw_params_set_period_size_near","","",N,N],[5,"snd_pcm_hw_params_set_period_size_first","","",N,N],[5,"snd_pcm_hw_params_set_period_size_last","","",N,N],[5,"snd_pcm_hw_params_set_period_size_integer","","",N,N],[5,"snd_pcm_hw_params_get_periods","","",N,N],[5,"snd_pcm_hw_params_get_periods_min","","",N,N],[5,"snd_pcm_hw_params_get_periods_max","","",N,N],[5,"snd_pcm_hw_params_test_periods","","",N,N],[5,"snd_pcm_hw_params_set_periods","","",N,N],[5,"snd_pcm_hw_params_set_periods_min","","",N,N],[5,"snd_pcm_hw_params_set_periods_max","","",N,N],[5,"snd_pcm_hw_params_set_periods_minmax","","",N,N],[5,"snd_pcm_hw_params_set_periods_near","","",N,N],[5,"snd_pcm_hw_params_set_periods_first","","",N,N],[5,"snd_pcm_hw_params_set_periods_last","","",N,N],[5,"snd_pcm_hw_params_set_periods_integer","","",N,N],[5,"snd_pcm_hw_params_get_buffer_time","","",N,N],[5,"snd_pcm_hw_params_get_buffer_time_min","","",N,N],[5,"snd_pcm_hw_params_get_buffer_time_max","","",N,N],[5,"snd_pcm_hw_params_test_buffer_time","","",N,N],[5,"snd_pcm_hw_params_set_buffer_time","","",N,N],[5,"snd_pcm_hw_params_set_buffer_time_min","","",N,N],[5,"snd_pcm_hw_params_set_buffer_time_max","","",N,N],[5,"snd_pcm_hw_params_set_buffer_time_minmax","","",N,N],[5,"snd_pcm_hw_params_set_buffer_time_near","","",N,N],[5,"snd_pcm_hw_params_set_buffer_time_first","","",N,N],[5,"snd_pcm_hw_params_set_buffer_time_last","","",N,N],[5,"snd_pcm_hw_params_get_buffer_size","","",N,N],[5,"snd_pcm_hw_params_get_buffer_size_min","","",N,N],[5,"snd_pcm_hw_params_get_buffer_size_max","","",N,N],[5,"snd_pcm_hw_params_test_buffer_size","","",N,N],[5,"snd_pcm_hw_params_set_buffer_size","","",N,N],[5,"snd_pcm_hw_params_set_buffer_size_min","","",N,N],[5,"snd_pcm_hw_params_set_buffer_size_max","","",N,N],[5,"snd_pcm_hw_params_set_buffer_size_minmax","","",N,N],[5,"snd_pcm_hw_params_set_buffer_size_near","","",N,N],[5,"snd_pcm_hw_params_set_buffer_size_first","","",N,N],[5,"snd_pcm_hw_params_set_buffer_size_last","","",N,N],[5,"snd_pcm_hw_params_get_min_align","","",N,N],[5,"snd_pcm_sw_params_sizeof","","",N,N],[5,"snd_pcm_sw_params_malloc","","",N,N],[5,"snd_pcm_sw_params_free","","",N,N],[5,"snd_pcm_sw_params_copy","","",N,N],[5,"snd_pcm_sw_params_get_boundary","","",N,N],[5,"snd_pcm_sw_params_set_tstamp_mode","","",N,N],[5,"snd_pcm_sw_params_get_tstamp_mode","","",N,N],[5,"snd_pcm_sw_params_set_avail_min","","",N,N],[5,"snd_pcm_sw_params_get_avail_min","","",N,N],[5,"snd_pcm_sw_params_set_period_event","","",N,N],[5,"snd_pcm_sw_params_get_period_event","","",N,N],[5,"snd_pcm_sw_params_set_start_threshold","","",N,N],[5,"snd_pcm_sw_params_get_start_threshold","","",N,N],[5,"snd_pcm_sw_params_set_stop_threshold","","",N,N],[5,"snd_pcm_sw_params_get_stop_threshold","","",N,N],[5,"snd_pcm_sw_params_set_silence_threshold","","",N,N],[5,"snd_pcm_sw_params_get_silence_threshold","","",N,N],[5,"snd_pcm_sw_params_set_silence_size","","",N,N],[5,"snd_pcm_sw_params_get_silence_size","","",N,N],[5,"snd_pcm_access_mask_sizeof","","",N,N],[5,"snd_pcm_access_mask_malloc","","",N,N],[5,"snd_pcm_access_mask_free","","",N,N],[5,"snd_pcm_access_mask_copy","","",N,N],[5,"snd_pcm_access_mask_none","","",N,N],[5,"snd_pcm_access_mask_any","","",N,N],[5,"snd_pcm_access_mask_test","","",N,N],[5,"snd_pcm_access_mask_empty","","",N,N],[5,"snd_pcm_access_mask_set","","",N,N],[5,"snd_pcm_access_mask_reset","","",N,N],[5,"snd_pcm_format_mask_sizeof","","",N,N],[5,"snd_pcm_format_mask_malloc","","",N,N],[5,"snd_pcm_format_mask_free","","",N,N],[5,"snd_pcm_format_mask_copy","","",N,N],[5,"snd_pcm_format_mask_none","","",N,N],[5,"snd_pcm_format_mask_any","","",N,N],[5,"snd_pcm_format_mask_test","","",N,N],[5,"snd_pcm_format_mask_empty","","",N,N],[5,"snd_pcm_format_mask_set","","",N,N],[5,"snd_pcm_format_mask_reset","","",N,N],[5,"snd_pcm_subformat_mask_sizeof","","",N,N],[5,"snd_pcm_subformat_mask_malloc","","",N,N],[5,"snd_pcm_subformat_mask_free","","",N,N],[5,"snd_pcm_subformat_mask_copy","","",N,N],[5,"snd_pcm_subformat_mask_none","","",N,N],[5,"snd_pcm_subformat_mask_any","","",N,N],[5,"snd_pcm_subformat_mask_test","","",N,N],[5,"snd_pcm_subformat_mask_empty","","",N,N],[5,"snd_pcm_subformat_mask_set","","",N,N],[5,"snd_pcm_subformat_mask_reset","","",N,N],[5,"snd_pcm_status_sizeof","","",N,N],[5,"snd_pcm_status_malloc","","",N,N],[5,"snd_pcm_status_free","","",N,N],[5,"snd_pcm_status_copy","","",N,N],[5,"snd_pcm_status_get_state","","",N,N],[5,"snd_pcm_status_get_trigger_tstamp","","",N,N],[5,"snd_pcm_status_get_trigger_htstamp","","",N,N],[5,"snd_pcm_status_get_tstamp","","",N,N],[5,"snd_pcm_status_get_htstamp","","",N,N],[5,"snd_pcm_status_get_audio_htstamp","","",N,N],[5,"snd_pcm_status_get_delay","","",N,N],[5,"snd_pcm_status_get_avail","","",N,N],[5,"snd_pcm_status_get_avail_max","","",N,N],[5,"snd_pcm_status_get_overrange","","",N,N],[5,"snd_pcm_status_set_audio_htstamp_config","","",N,N],[5,"snd_pcm_type_name","","",N,N],[5,"snd_pcm_stream_name","","",N,N],[5,"snd_pcm_access_name","","",N,N],[5,"snd_pcm_format_name","","",N,N],[5,"snd_pcm_format_description","","",N,N],[5,"snd_pcm_subformat_name","","",N,N],[5,"snd_pcm_subformat_description","","",N,N],[5,"snd_pcm_format_value","","",N,N],[5,"snd_pcm_tstamp_mode_name","","",N,N],[5,"snd_pcm_state_name","","",N,N],[5,"snd_pcm_dump","","",N,N],[5,"snd_pcm_dump_hw_setup","","",N,N],[5,"snd_pcm_dump_sw_setup","","",N,N],[5,"snd_pcm_dump_setup","","",N,N],[5,"snd_pcm_hw_params_dump","","",N,N],[5,"snd_pcm_sw_params_dump","","",N,N],[5,"snd_pcm_status_dump","","",N,N],[5,"snd_pcm_mmap_begin","","",N,N],[5,"snd_pcm_mmap_commit","","",N,N],[5,"snd_pcm_mmap_writei","","",N,N],[5,"snd_pcm_mmap_readi","","",N,N],[5,"snd_pcm_mmap_writen","","",N,N],[5,"snd_pcm_mmap_readn","","",N,N],[5,"snd_pcm_format_signed","","",N,N],[5,"snd_pcm_format_unsigned","","",N,N],[5,"snd_pcm_format_linear","","",N,N],[5,"snd_pcm_format_float","","",N,N],[5,"snd_pcm_format_little_endian","","",N,N],[5,"snd_pcm_format_big_endian","","",N,N],[5,"snd_pcm_format_cpu_endian","","",N,N],[5,"snd_pcm_format_width","","",N,N],[5,"snd_pcm_format_physical_width","","",N,N],[5,"snd_pcm_build_linear_format","","",N,N],[5,"snd_pcm_format_size","","",N,N],[5,"snd_pcm_format_silence","","",N,N],[5,"snd_pcm_format_silence_16","","",N,N],[5,"snd_pcm_format_silence_32","","",N,N],[5,"snd_pcm_format_silence_64","","",N,N],[5,"snd_pcm_format_set_silence","","",N,N],[5,"snd_pcm_bytes_to_frames","","",N,N],[5,"snd_pcm_frames_to_bytes","","",N,N],[5,"snd_pcm_bytes_to_samples","","",N,N],[5,"snd_pcm_samples_to_bytes","","",N,N],[5,"snd_pcm_area_silence","","",N,N],[5,"snd_pcm_areas_silence","","",N,N],[5,"snd_pcm_area_copy","","",N,N],[5,"snd_pcm_areas_copy","","",N,N],[5,"snd_pcm_hook_get_pcm","","",N,N],[5,"snd_pcm_hook_get_private","","",N,N],[5,"snd_pcm_hook_set_private","","",N,N],[5,"snd_pcm_hook_add","","",N,N],[5,"snd_pcm_hook_remove","","",N,N],[5,"snd_pcm_meter_get_bufsize","","",N,N],[5,"snd_pcm_meter_get_channels","","",N,N],[5,"snd_pcm_meter_get_rate","","",N,N],[5,"snd_pcm_meter_get_now","","",N,N],[5,"snd_pcm_meter_get_boundary","","",N,N],[5,"snd_pcm_meter_add_scope","","",N,N],[5,"snd_pcm_meter_search_scope","","",N,N],[5,"snd_pcm_scope_malloc","","",N,N],[5,"snd_pcm_scope_set_ops","","",N,N],[5,"snd_pcm_scope_set_name","","",N,N],[5,"snd_pcm_scope_get_name","","",N,N],[5,"snd_pcm_scope_get_callback_private","","",N,N],[5,"snd_pcm_scope_set_callback_private","","",N,N],[5,"snd_pcm_scope_s16_open","","",N,N],[5,"snd_pcm_scope_s16_get_channel_buffer","","",N,N],[5,"snd_spcm_init","","",N,N],[5,"snd_spcm_init_duplex","","",N,N],[5,"snd_spcm_init_get_params","","",N,N],[5,"snd_pcm_start_mode_name","","",N,N],[5,"snd_pcm_xrun_mode_name","","",N,N],[5,"snd_pcm_sw_params_set_start_mode","","",N,N],[5,"snd_pcm_sw_params_get_start_mode","","",N,N],[5,"snd_pcm_sw_params_set_xrun_mode","","",N,N],[5,"snd_pcm_sw_params_get_xrun_mode","","",N,N],[5,"snd_pcm_sw_params_set_xfer_align","","",N,N],[5,"snd_pcm_sw_params_get_xfer_align","","",N,N],[5,"snd_pcm_sw_params_set_sleep_min","","",N,N],[5,"snd_pcm_sw_params_get_sleep_min","","",N,N],[5,"snd_pcm_hw_params_get_tick_time","","",N,N],[5,"snd_pcm_hw_params_get_tick_time_min","","",N,N],[5,"snd_pcm_hw_params_get_tick_time_max","","",N,N],[5,"snd_pcm_hw_params_test_tick_time","","",N,N],[5,"snd_pcm_hw_params_set_tick_time","","",N,N],[5,"snd_pcm_hw_params_set_tick_time_min","","",N,N],[5,"snd_pcm_hw_params_set_tick_time_max","","",N,N],[5,"snd_pcm_hw_params_set_tick_time_minmax","","",N,N],[5,"snd_pcm_hw_params_set_tick_time_near","","",N,N],[5,"snd_pcm_hw_params_set_tick_time_first","","",N,N],[5,"snd_pcm_hw_params_set_tick_time_last","","",N,N],[5,"snd_pcm_hw_params_supports_audio_ts_type","","",N,N],[5,"snd_rawmidi_open","","",N,N],[5,"snd_rawmidi_open_lconf","","",N,N],[5,"snd_rawmidi_close","","",N,N],[5,"snd_rawmidi_poll_descriptors_count","","",N,N],[5,"snd_rawmidi_poll_descriptors","","",N,N],[5,"snd_rawmidi_poll_descriptors_revents","","",N,N],[5,"snd_rawmidi_nonblock","","",N,N],[5,"snd_rawmidi_info_sizeof","","",N,N],[5,"snd_rawmidi_info_malloc","","",N,N],[5,"snd_rawmidi_info_free","","",N,N],[5,"snd_rawmidi_info_copy","","",N,N],[5,"snd_rawmidi_info_get_device","","",N,N],[5,"snd_rawmidi_info_get_subdevice","","",N,N],[5,"snd_rawmidi_info_get_stream","","",N,N],[5,"snd_rawmidi_info_get_card","","",N,N],[5,"snd_rawmidi_info_get_flags","","",N,N],[5,"snd_rawmidi_info_get_id","","",N,N],[5,"snd_rawmidi_info_get_name","","",N,N],[5,"snd_rawmidi_info_get_subdevice_name","","",N,N],[5,"snd_rawmidi_info_get_subdevices_count","","",N,N],[5,"snd_rawmidi_info_get_subdevices_avail","","",N,N],[5,"snd_rawmidi_info_set_device","","",N,N],[5,"snd_rawmidi_info_set_subdevice","","",N,N],[5,"snd_rawmidi_info_set_stream","","",N,N],[5,"snd_rawmidi_info","","",N,N],[5,"snd_rawmidi_params_sizeof","","",N,N],[5,"snd_rawmidi_params_malloc","","",N,N],[5,"snd_rawmidi_params_free","","",N,N],[5,"snd_rawmidi_params_copy","","",N,N],[5,"snd_rawmidi_params_set_buffer_size","","",N,N],[5,"snd_rawmidi_params_get_buffer_size","","",N,N],[5,"snd_rawmidi_params_set_avail_min","","",N,N],[5,"snd_rawmidi_params_get_avail_min","","",N,N],[5,"snd_rawmidi_params_set_no_active_sensing","","",N,N],[5,"snd_rawmidi_params_get_no_active_sensing","","",N,N],[5,"snd_rawmidi_params","","",N,N],[5,"snd_rawmidi_params_current","","",N,N],[5,"snd_rawmidi_status_sizeof","","",N,N],[5,"snd_rawmidi_status_malloc","","",N,N],[5,"snd_rawmidi_status_free","","",N,N],[5,"snd_rawmidi_status_copy","","",N,N],[5,"snd_rawmidi_status_get_tstamp","","",N,N],[5,"snd_rawmidi_status_get_avail","","",N,N],[5,"snd_rawmidi_status_get_xruns","","",N,N],[5,"snd_rawmidi_status","","",N,N],[5,"snd_rawmidi_drain","","",N,N],[5,"snd_rawmidi_drop","","",N,N],[5,"snd_rawmidi_write","","",N,N],[5,"snd_rawmidi_read","","",N,N],[5,"snd_rawmidi_name","","",N,N],[5,"snd_rawmidi_type","","",N,N],[5,"snd_rawmidi_stream","","",N,N],[5,"snd_timer_query_open","","",N,N],[5,"snd_timer_query_open_lconf","","",N,N],[5,"snd_timer_query_close","","",N,N],[5,"snd_timer_query_next_device","","",N,N],[5,"snd_timer_query_info","","",N,N],[5,"snd_timer_query_params","","",N,N],[5,"snd_timer_query_status","","",N,N],[5,"snd_timer_open","","",N,N],[5,"snd_timer_open_lconf","","",N,N],[5,"snd_timer_close","","",N,N],[5,"snd_async_add_timer_handler","","",N,N],[5,"snd_async_handler_get_timer","","",N,N],[5,"snd_timer_poll_descriptors_count","","",N,N],[5,"snd_timer_poll_descriptors","","",N,N],[5,"snd_timer_poll_descriptors_revents","","",N,N],[5,"snd_timer_info","","",N,N],[5,"snd_timer_params","","",N,N],[5,"snd_timer_status","","",N,N],[5,"snd_timer_start","","",N,N],[5,"snd_timer_stop","","",N,N],[5,"snd_timer_continue","","",N,N],[5,"snd_timer_read","","",N,N],[5,"snd_timer_id_sizeof","","",N,N],[5,"snd_timer_id_malloc","","",N,N],[5,"snd_timer_id_free","","",N,N],[5,"snd_timer_id_copy","","",N,N],[5,"snd_timer_id_set_class","","",N,N],[5,"snd_timer_id_get_class","","",N,N],[5,"snd_timer_id_set_sclass","","",N,N],[5,"snd_timer_id_get_sclass","","",N,N],[5,"snd_timer_id_set_card","","",N,N],[5,"snd_timer_id_get_card","","",N,N],[5,"snd_timer_id_set_device","","",N,N],[5,"snd_timer_id_get_device","","",N,N],[5,"snd_timer_id_set_subdevice","","",N,N],[5,"snd_timer_id_get_subdevice","","",N,N],[5,"snd_timer_ginfo_sizeof","","",N,N],[5,"snd_timer_ginfo_malloc","","",N,N],[5,"snd_timer_ginfo_free","","",N,N],[5,"snd_timer_ginfo_copy","","",N,N],[5,"snd_timer_ginfo_set_tid","","",N,N],[5,"snd_timer_ginfo_get_tid","","",N,N],[5,"snd_timer_ginfo_get_flags","","",N,N],[5,"snd_timer_ginfo_get_card","","",N,N],[5,"snd_timer_ginfo_get_id","","",N,N],[5,"snd_timer_ginfo_get_name","","",N,N],[5,"snd_timer_ginfo_get_resolution","","",N,N],[5,"snd_timer_ginfo_get_resolution_min","","",N,N],[5,"snd_timer_ginfo_get_resolution_max","","",N,N],[5,"snd_timer_ginfo_get_clients","","",N,N],[5,"snd_timer_info_sizeof","","",N,N],[5,"snd_timer_info_malloc","","",N,N],[5,"snd_timer_info_free","","",N,N],[5,"snd_timer_info_copy","","",N,N],[5,"snd_timer_info_is_slave","","",N,N],[5,"snd_timer_info_get_card","","",N,N],[5,"snd_timer_info_get_id","","",N,N],[5,"snd_timer_info_get_name","","",N,N],[5,"snd_timer_info_get_resolution","","",N,N],[5,"snd_timer_params_sizeof","","",N,N],[5,"snd_timer_params_malloc","","",N,N],[5,"snd_timer_params_free","","",N,N],[5,"snd_timer_params_copy","","",N,N],[5,"snd_timer_params_set_auto_start","","",N,N],[5,"snd_timer_params_get_auto_start","","",N,N],[5,"snd_timer_params_set_exclusive","","",N,N],[5,"snd_timer_params_get_exclusive","","",N,N],[5,"snd_timer_params_set_early_event","","",N,N],[5,"snd_timer_params_get_early_event","","",N,N],[5,"snd_timer_params_set_ticks","","",N,N],[5,"snd_timer_params_get_ticks","","",N,N],[5,"snd_timer_params_set_queue_size","","",N,N],[5,"snd_timer_params_get_queue_size","","",N,N],[5,"snd_timer_params_set_filter","","",N,N],[5,"snd_timer_params_get_filter","","",N,N],[5,"snd_timer_status_sizeof","","",N,N],[5,"snd_timer_status_malloc","","",N,N],[5,"snd_timer_status_free","","",N,N],[5,"snd_timer_status_copy","","",N,N],[5,"snd_timer_status_get_timestamp","","",N,N],[5,"snd_timer_status_get_resolution","","",N,N],[5,"snd_timer_status_get_lost","","",N,N],[5,"snd_timer_status_get_overrun","","",N,N],[5,"snd_timer_status_get_queue","","",N,N],[5,"snd_timer_info_get_ticks","","",N,N],[5,"snd_hwdep_open","","",N,N],[5,"snd_hwdep_close","","",N,N],[5,"snd_hwdep_poll_descriptors","","",N,N],[5,"snd_hwdep_poll_descriptors_revents","","",N,N],[5,"snd_hwdep_nonblock","","",N,N],[5,"snd_hwdep_info","","",N,N],[5,"snd_hwdep_dsp_status","","",N,N],[5,"snd_hwdep_dsp_load","","",N,N],[5,"snd_hwdep_ioctl","","",N,N],[5,"snd_hwdep_write","","",N,N],[5,"snd_hwdep_read","","",N,N],[5,"snd_hwdep_info_sizeof","","",N,N],[5,"snd_hwdep_info_malloc","","",N,N],[5,"snd_hwdep_info_free","","",N,N],[5,"snd_hwdep_info_copy","","",N,N],[5,"snd_hwdep_info_get_device","","",N,N],[5,"snd_hwdep_info_get_card","","",N,N],[5,"snd_hwdep_info_get_id","","",N,N],[5,"snd_hwdep_info_get_name","","",N,N],[5,"snd_hwdep_info_get_iface","","",N,N],[5,"snd_hwdep_info_set_device","","",N,N],[5,"snd_hwdep_dsp_status_sizeof","","",N,N],[5,"snd_hwdep_dsp_status_malloc","","",N,N],[5,"snd_hwdep_dsp_status_free","","",N,N],[5,"snd_hwdep_dsp_status_copy","","",N,N],[5,"snd_hwdep_dsp_status_get_version","","",N,N],[5,"snd_hwdep_dsp_status_get_id","","",N,N],[5,"snd_hwdep_dsp_status_get_num_dsps","","",N,N],[5,"snd_hwdep_dsp_status_get_dsp_loaded","","",N,N],[5,"snd_hwdep_dsp_status_get_chip_ready","","",N,N],[5,"snd_hwdep_dsp_image_sizeof","","",N,N],[5,"snd_hwdep_dsp_image_malloc","","",N,N],[5,"snd_hwdep_dsp_image_free","","",N,N],[5,"snd_hwdep_dsp_image_copy","","",N,N],[5,"snd_hwdep_dsp_image_get_index","","",N,N],[5,"snd_hwdep_dsp_image_get_name","","",N,N],[5,"snd_hwdep_dsp_image_get_image","","",N,N],[5,"snd_hwdep_dsp_image_get_length","","",N,N],[5,"snd_hwdep_dsp_image_set_index","","",N,N],[5,"snd_hwdep_dsp_image_set_name","","",N,N],[5,"snd_hwdep_dsp_image_set_image","","",N,N],[5,"snd_hwdep_dsp_image_set_length","","",N,N],[5,"snd_card_load","","",N,N],[5,"snd_card_next","","",N,N],[5,"snd_card_get_index","","",N,N],[5,"snd_card_get_name","","",N,N],[5,"snd_card_get_longname","","",N,N],[5,"snd_device_name_hint","","",N,N],[5,"snd_device_name_free_hint","","",N,N],[5,"snd_device_name_get_hint","","",N,N],[5,"snd_ctl_open","","",N,N],[5,"snd_ctl_open_lconf","","",N,N],[5,"snd_ctl_open_fallback","","",N,N],[5,"snd_ctl_close","","",N,N],[5,"snd_ctl_nonblock","","",N,N],[5,"snd_async_add_ctl_handler","","",N,N],[5,"snd_async_handler_get_ctl","","",N,N],[5,"snd_ctl_poll_descriptors_count","","",N,N],[5,"snd_ctl_poll_descriptors","","",N,N],[5,"snd_ctl_poll_descriptors_revents","","",N,N],[5,"snd_ctl_subscribe_events","","",N,N],[5,"snd_ctl_card_info","","",N,N],[5,"snd_ctl_elem_list","","",N,N],[5,"snd_ctl_elem_info","","",N,N],[5,"snd_ctl_elem_read","","",N,N],[5,"snd_ctl_elem_write","","",N,N],[5,"snd_ctl_elem_lock","","",N,N],[5,"snd_ctl_elem_unlock","","",N,N],[5,"snd_ctl_elem_tlv_read","","",N,N],[5,"snd_ctl_elem_tlv_write","","",N,N],[5,"snd_ctl_elem_tlv_command","","",N,N],[5,"snd_ctl_hwdep_next_device","","",N,N],[5,"snd_ctl_hwdep_info","","",N,N],[5,"snd_ctl_pcm_next_device","","",N,N],[5,"snd_ctl_pcm_info","","",N,N],[5,"snd_ctl_pcm_prefer_subdevice","","",N,N],[5,"snd_ctl_rawmidi_next_device","","",N,N],[5,"snd_ctl_rawmidi_info","","",N,N],[5,"snd_ctl_rawmidi_prefer_subdevice","","",N,N],[5,"snd_ctl_set_power_state","","",N,N],[5,"snd_ctl_get_power_state","","",N,N],[5,"snd_ctl_read","","",N,N],[5,"snd_ctl_wait","","",N,N],[5,"snd_ctl_name","","",N,N],[5,"snd_ctl_type","","",N,N],[5,"snd_ctl_elem_type_name","","",N,N],[5,"snd_ctl_elem_iface_name","","",N,N],[5,"snd_ctl_event_type_name","","",N,N],[5,"snd_ctl_event_elem_get_mask","","",N,N],[5,"snd_ctl_event_elem_get_numid","","",N,N],[5,"snd_ctl_event_elem_get_id","","",N,N],[5,"snd_ctl_event_elem_get_interface","","",N,N],[5,"snd_ctl_event_elem_get_device","","",N,N],[5,"snd_ctl_event_elem_get_subdevice","","",N,N],[5,"snd_ctl_event_elem_get_name","","",N,N],[5,"snd_ctl_event_elem_get_index","","",N,N],[5,"snd_ctl_elem_list_alloc_space","","",N,N],[5,"snd_ctl_elem_list_free_space","","",N,N],[5,"snd_ctl_ascii_elem_id_get","","",N,N],[5,"snd_ctl_ascii_elem_id_parse","","",N,N],[5,"snd_ctl_ascii_value_parse","","",N,N],[5,"snd_ctl_elem_id_sizeof","","",N,N],[5,"snd_ctl_elem_id_malloc","","",N,N],[5,"snd_ctl_elem_id_free","","",N,N],[5,"snd_ctl_elem_id_clear","","",N,N],[5,"snd_ctl_elem_id_copy","","",N,N],[5,"snd_ctl_elem_id_get_numid","","",N,N],[5,"snd_ctl_elem_id_get_interface","","",N,N],[5,"snd_ctl_elem_id_get_device","","",N,N],[5,"snd_ctl_elem_id_get_subdevice","","",N,N],[5,"snd_ctl_elem_id_get_name","","",N,N],[5,"snd_ctl_elem_id_get_index","","",N,N],[5,"snd_ctl_elem_id_set_numid","","",N,N],[5,"snd_ctl_elem_id_set_interface","","",N,N],[5,"snd_ctl_elem_id_set_device","","",N,N],[5,"snd_ctl_elem_id_set_subdevice","","",N,N],[5,"snd_ctl_elem_id_set_name","","",N,N],[5,"snd_ctl_elem_id_set_index","","",N,N],[5,"snd_ctl_card_info_sizeof","","",N,N],[5,"snd_ctl_card_info_malloc","","",N,N],[5,"snd_ctl_card_info_free","","",N,N],[5,"snd_ctl_card_info_clear","","",N,N],[5,"snd_ctl_card_info_copy","","",N,N],[5,"snd_ctl_card_info_get_card","","",N,N],[5,"snd_ctl_card_info_get_id","","",N,N],[5,"snd_ctl_card_info_get_driver","","",N,N],[5,"snd_ctl_card_info_get_name","","",N,N],[5,"snd_ctl_card_info_get_longname","","",N,N],[5,"snd_ctl_card_info_get_mixername","","",N,N],[5,"snd_ctl_card_info_get_components","","",N,N],[5,"snd_ctl_event_sizeof","","",N,N],[5,"snd_ctl_event_malloc","","",N,N],[5,"snd_ctl_event_free","","",N,N],[5,"snd_ctl_event_clear","","",N,N],[5,"snd_ctl_event_copy","","",N,N],[5,"snd_ctl_event_get_type","","",N,N],[5,"snd_ctl_elem_list_sizeof","","",N,N],[5,"snd_ctl_elem_list_malloc","","",N,N],[5,"snd_ctl_elem_list_free","","",N,N],[5,"snd_ctl_elem_list_clear","","",N,N],[5,"snd_ctl_elem_list_copy","","",N,N],[5,"snd_ctl_elem_list_set_offset","","",N,N],[5,"snd_ctl_elem_list_get_used","","",N,N],[5,"snd_ctl_elem_list_get_count","","",N,N],[5,"snd_ctl_elem_list_get_id","","",N,N],[5,"snd_ctl_elem_list_get_numid","","",N,N],[5,"snd_ctl_elem_list_get_interface","","",N,N],[5,"snd_ctl_elem_list_get_device","","",N,N],[5,"snd_ctl_elem_list_get_subdevice","","",N,N],[5,"snd_ctl_elem_list_get_name","","",N,N],[5,"snd_ctl_elem_list_get_index","","",N,N],[5,"snd_ctl_elem_info_sizeof","","",N,N],[5,"snd_ctl_elem_info_malloc","","",N,N],[5,"snd_ctl_elem_info_free","","",N,N],[5,"snd_ctl_elem_info_clear","","",N,N],[5,"snd_ctl_elem_info_copy","","",N,N],[5,"snd_ctl_elem_info_get_type","","",N,N],[5,"snd_ctl_elem_info_is_readable","","",N,N],[5,"snd_ctl_elem_info_is_writable","","",N,N],[5,"snd_ctl_elem_info_is_volatile","","",N,N],[5,"snd_ctl_elem_info_is_inactive","","",N,N],[5,"snd_ctl_elem_info_is_locked","","",N,N],[5,"snd_ctl_elem_info_is_tlv_readable","","",N,N],[5,"snd_ctl_elem_info_is_tlv_writable","","",N,N],[5,"snd_ctl_elem_info_is_tlv_commandable","","",N,N],[5,"snd_ctl_elem_info_is_owner","","",N,N],[5,"snd_ctl_elem_info_is_user","","",N,N],[5,"snd_ctl_elem_info_get_owner","","",N,N],[5,"snd_ctl_elem_info_get_count","","",N,N],[5,"snd_ctl_elem_info_get_min","","",N,N],[5,"snd_ctl_elem_info_get_max","","",N,N],[5,"snd_ctl_elem_info_get_step","","",N,N],[5,"snd_ctl_elem_info_get_min64","","",N,N],[5,"snd_ctl_elem_info_get_max64","","",N,N],[5,"snd_ctl_elem_info_get_step64","","",N,N],[5,"snd_ctl_elem_info_get_items","","",N,N],[5,"snd_ctl_elem_info_set_item","","",N,N],[5,"snd_ctl_elem_info_get_item_name","","",N,N],[5,"snd_ctl_elem_info_get_dimensions","","",N,N],[5,"snd_ctl_elem_info_get_dimension","","",N,N],[5,"snd_ctl_elem_info_get_id","","",N,N],[5,"snd_ctl_elem_info_get_numid","","",N,N],[5,"snd_ctl_elem_info_get_interface","","",N,N],[5,"snd_ctl_elem_info_get_device","","",N,N],[5,"snd_ctl_elem_info_get_subdevice","","",N,N],[5,"snd_ctl_elem_info_get_name","","",N,N],[5,"snd_ctl_elem_info_get_index","","",N,N],[5,"snd_ctl_elem_info_set_id","","",N,N],[5,"snd_ctl_elem_info_set_numid","","",N,N],[5,"snd_ctl_elem_info_set_interface","","",N,N],[5,"snd_ctl_elem_info_set_device","","",N,N],[5,"snd_ctl_elem_info_set_subdevice","","",N,N],[5,"snd_ctl_elem_info_set_name","","",N,N],[5,"snd_ctl_elem_info_set_index","","",N,N],[5,"snd_ctl_elem_add_integer","","",N,N],[5,"snd_ctl_elem_add_integer64","","",N,N],[5,"snd_ctl_elem_add_boolean","","",N,N],[5,"snd_ctl_elem_add_enumerated","","",N,N],[5,"snd_ctl_elem_add_iec958","","",N,N],[5,"snd_ctl_elem_remove","","",N,N],[5,"snd_ctl_elem_value_sizeof","","",N,N],[5,"snd_ctl_elem_value_malloc","","",N,N],[5,"snd_ctl_elem_value_free","","",N,N],[5,"snd_ctl_elem_value_clear","","",N,N],[5,"snd_ctl_elem_value_copy","","",N,N],[5,"snd_ctl_elem_value_compare","","",N,N],[5,"snd_ctl_elem_value_get_id","","",N,N],[5,"snd_ctl_elem_value_get_numid","","",N,N],[5,"snd_ctl_elem_value_get_interface","","",N,N],[5,"snd_ctl_elem_value_get_device","","",N,N],[5,"snd_ctl_elem_value_get_subdevice","","",N,N],[5,"snd_ctl_elem_value_get_name","","",N,N],[5,"snd_ctl_elem_value_get_index","","",N,N],[5,"snd_ctl_elem_value_set_id","","",N,N],[5,"snd_ctl_elem_value_set_numid","","",N,N],[5,"snd_ctl_elem_value_set_interface","","",N,N],[5,"snd_ctl_elem_value_set_device","","",N,N],[5,"snd_ctl_elem_value_set_subdevice","","",N,N],[5,"snd_ctl_elem_value_set_name","","",N,N],[5,"snd_ctl_elem_value_set_index","","",N,N],[5,"snd_ctl_elem_value_get_boolean","","",N,N],[5,"snd_ctl_elem_value_get_integer","","",N,N],[5,"snd_ctl_elem_value_get_integer64","","",N,N],[5,"snd_ctl_elem_value_get_enumerated","","",N,N],[5,"snd_ctl_elem_value_get_byte","","",N,N],[5,"snd_ctl_elem_value_set_boolean","","",N,N],[5,"snd_ctl_elem_value_set_integer","","",N,N],[5,"snd_ctl_elem_value_set_integer64","","",N,N],[5,"snd_ctl_elem_value_set_enumerated","","",N,N],[5,"snd_ctl_elem_value_set_byte","","",N,N],[5,"snd_ctl_elem_set_bytes","","",N,N],[5,"snd_ctl_elem_value_get_bytes","","",N,N],[5,"snd_ctl_elem_value_get_iec958","","",N,N],[5,"snd_ctl_elem_value_set_iec958","","",N,N],[5,"snd_tlv_parse_dB_info","","",N,N],[5,"snd_tlv_get_dB_range","","",N,N],[5,"snd_tlv_convert_to_dB","","",N,N],[5,"snd_tlv_convert_from_dB","","",N,N],[5,"snd_ctl_get_dB_range","","",N,N],[5,"snd_ctl_convert_to_dB","","",N,N],[5,"snd_ctl_convert_from_dB","","",N,N],[5,"snd_hctl_compare_fast","","",N,N],[5,"snd_hctl_open","","",N,N],[5,"snd_hctl_open_ctl","","",N,N],[5,"snd_hctl_close","","",N,N],[5,"snd_hctl_nonblock","","",N,N],[5,"snd_hctl_poll_descriptors_count","","",N,N],[5,"snd_hctl_poll_descriptors","","",N,N],[5,"snd_hctl_poll_descriptors_revents","","",N,N],[5,"snd_hctl_get_count","","",N,N],[5,"snd_hctl_set_compare","","",N,N],[5,"snd_hctl_first_elem","","",N,N],[5,"snd_hctl_last_elem","","",N,N],[5,"snd_hctl_find_elem","","",N,N],[5,"snd_hctl_set_callback","","",N,N],[5,"snd_hctl_set_callback_private","","",N,N],[5,"snd_hctl_get_callback_private","","",N,N],[5,"snd_hctl_load","","",N,N],[5,"snd_hctl_free","","",N,N],[5,"snd_hctl_handle_events","","",N,N],[5,"snd_hctl_name","","",N,N],[5,"snd_hctl_wait","","",N,N],[5,"snd_hctl_ctl","","",N,N],[5,"snd_hctl_elem_next","","",N,N],[5,"snd_hctl_elem_prev","","",N,N],[5,"snd_hctl_elem_info","","",N,N],[5,"snd_hctl_elem_read","","",N,N],[5,"snd_hctl_elem_write","","",N,N],[5,"snd_hctl_elem_tlv_read","","",N,N],[5,"snd_hctl_elem_tlv_write","","",N,N],[5,"snd_hctl_elem_tlv_command","","",N,N],[5,"snd_hctl_elem_get_hctl","","",N,N],[5,"snd_hctl_elem_get_id","","",N,N],[5,"snd_hctl_elem_get_numid","","",N,N],[5,"snd_hctl_elem_get_interface","","",N,N],[5,"snd_hctl_elem_get_device","","",N,N],[5,"snd_hctl_elem_get_subdevice","","",N,N],[5,"snd_hctl_elem_get_name","","",N,N],[5,"snd_hctl_elem_get_index","","",N,N],[5,"snd_hctl_elem_set_callback","","",N,N],[5,"snd_hctl_elem_get_callback_private","","",N,N],[5,"snd_hctl_elem_set_callback_private","","",N,N],[5,"snd_sctl_build","","",N,N],[5,"snd_sctl_free","","",N,N],[5,"snd_sctl_install","","",N,N],[5,"snd_sctl_remove","","",N,N],[5,"snd_mixer_open","","",N,N],[5,"snd_mixer_close","","",N,N],[5,"snd_mixer_first_elem","","",N,N],[5,"snd_mixer_last_elem","","",N,N],[5,"snd_mixer_handle_events","","",N,N],[5,"snd_mixer_attach","","",N,N],[5,"snd_mixer_attach_hctl","","",N,N],[5,"snd_mixer_detach","","",N,N],[5,"snd_mixer_detach_hctl","","",N,N],[5,"snd_mixer_get_hctl","","",N,N],[5,"snd_mixer_poll_descriptors_count","","",N,N],[5,"snd_mixer_poll_descriptors","","",N,N],[5,"snd_mixer_poll_descriptors_revents","","",N,N],[5,"snd_mixer_load","","",N,N],[5,"snd_mixer_free","","",N,N],[5,"snd_mixer_wait","","",N,N],[5,"snd_mixer_set_compare","","",N,N],[5,"snd_mixer_set_callback","","",N,N],[5,"snd_mixer_get_callback_private","","",N,N],[5,"snd_mixer_set_callback_private","","",N,N],[5,"snd_mixer_get_count","","",N,N],[5,"snd_mixer_class_unregister","","",N,N],[5,"snd_mixer_elem_next","","",N,N],[5,"snd_mixer_elem_prev","","",N,N],[5,"snd_mixer_elem_set_callback","","",N,N],[5,"snd_mixer_elem_get_callback_private","","",N,N],[5,"snd_mixer_elem_set_callback_private","","",N,N],[5,"snd_mixer_elem_get_type","","",N,N],[5,"snd_mixer_class_register","","",N,N],[5,"snd_mixer_elem_new","","",N,N],[5,"snd_mixer_elem_add","","",N,N],[5,"snd_mixer_elem_remove","","",N,N],[5,"snd_mixer_elem_free","","",N,N],[5,"snd_mixer_elem_info","","",N,N],[5,"snd_mixer_elem_value","","",N,N],[5,"snd_mixer_elem_attach","","",N,N],[5,"snd_mixer_elem_detach","","",N,N],[5,"snd_mixer_elem_empty","","",N,N],[5,"snd_mixer_elem_get_private","","",N,N],[5,"snd_mixer_class_sizeof","","",N,N],[5,"snd_mixer_class_malloc","","",N,N],[5,"snd_mixer_class_free","","",N,N],[5,"snd_mixer_class_copy","","",N,N],[5,"snd_mixer_class_get_mixer","","",N,N],[5,"snd_mixer_class_get_event","","",N,N],[5,"snd_mixer_class_get_private","","",N,N],[5,"snd_mixer_class_get_compare","","",N,N],[5,"snd_mixer_class_set_event","","",N,N],[5,"snd_mixer_class_set_private","","",N,N],[5,"snd_mixer_class_set_private_free","","",N,N],[5,"snd_mixer_class_set_compare","","",N,N],[5,"snd_mixer_selem_channel_name","","",N,N],[5,"snd_mixer_selem_register","","",N,N],[5,"snd_mixer_selem_get_id","","",N,N],[5,"snd_mixer_selem_get_name","","",N,N],[5,"snd_mixer_selem_get_index","","",N,N],[5,"snd_mixer_find_selem","","",N,N],[5,"snd_mixer_selem_is_active","","",N,N],[5,"snd_mixer_selem_is_playback_mono","","",N,N],[5,"snd_mixer_selem_has_playback_channel","","",N,N],[5,"snd_mixer_selem_is_capture_mono","","",N,N],[5,"snd_mixer_selem_has_capture_channel","","",N,N],[5,"snd_mixer_selem_get_capture_group","","",N,N],[5,"snd_mixer_selem_has_common_volume","","",N,N],[5,"snd_mixer_selem_has_playback_volume","","",N,N],[5,"snd_mixer_selem_has_playback_volume_joined","","",N,N],[5,"snd_mixer_selem_has_capture_volume","","",N,N],[5,"snd_mixer_selem_has_capture_volume_joined","","",N,N],[5,"snd_mixer_selem_has_common_switch","","",N,N],[5,"snd_mixer_selem_has_playback_switch","","",N,N],[5,"snd_mixer_selem_has_playback_switch_joined","","",N,N],[5,"snd_mixer_selem_has_capture_switch","","",N,N],[5,"snd_mixer_selem_has_capture_switch_joined","","",N,N],[5,"snd_mixer_selem_has_capture_switch_exclusive","","",N,N],[5,"snd_mixer_selem_ask_playback_vol_dB","","",N,N],[5,"snd_mixer_selem_ask_capture_vol_dB","","",N,N],[5,"snd_mixer_selem_ask_playback_dB_vol","","",N,N],[5,"snd_mixer_selem_ask_capture_dB_vol","","",N,N],[5,"snd_mixer_selem_get_playback_volume","","",N,N],[5,"snd_mixer_selem_get_capture_volume","","",N,N],[5,"snd_mixer_selem_get_playback_dB","","",N,N],[5,"snd_mixer_selem_get_capture_dB","","",N,N],[5,"snd_mixer_selem_get_playback_switch","","",N,N],[5,"snd_mixer_selem_get_capture_switch","","",N,N],[5,"snd_mixer_selem_set_playback_volume","","",N,N],[5,"snd_mixer_selem_set_capture_volume","","",N,N],[5,"snd_mixer_selem_set_playback_dB","","",N,N],[5,"snd_mixer_selem_set_capture_dB","","",N,N],[5,"snd_mixer_selem_set_playback_volume_all","","",N,N],[5,"snd_mixer_selem_set_capture_volume_all","","",N,N],[5,"snd_mixer_selem_set_playback_dB_all","","",N,N],[5,"snd_mixer_selem_set_capture_dB_all","","",N,N],[5,"snd_mixer_selem_set_playback_switch","","",N,N],[5,"snd_mixer_selem_set_capture_switch","","",N,N],[5,"snd_mixer_selem_set_playback_switch_all","","",N,N],[5,"snd_mixer_selem_set_capture_switch_all","","",N,N],[5,"snd_mixer_selem_get_playback_volume_range","","",N,N],[5,"snd_mixer_selem_get_playback_dB_range","","",N,N],[5,"snd_mixer_selem_set_playback_volume_range","","",N,N],[5,"snd_mixer_selem_get_capture_volume_range","","",N,N],[5,"snd_mixer_selem_get_capture_dB_range","","",N,N],[5,"snd_mixer_selem_set_capture_volume_range","","",N,N],[5,"snd_mixer_selem_is_enumerated","","",N,N],[5,"snd_mixer_selem_is_enum_playback","","",N,N],[5,"snd_mixer_selem_is_enum_capture","","",N,N],[5,"snd_mixer_selem_get_enum_items","","",N,N],[5,"snd_mixer_selem_get_enum_item_name","","",N,N],[5,"snd_mixer_selem_get_enum_item","","",N,N],[5,"snd_mixer_selem_set_enum_item","","",N,N],[5,"snd_mixer_selem_id_sizeof","","",N,N],[5,"snd_mixer_selem_id_malloc","","",N,N],[5,"snd_mixer_selem_id_free","","",N,N],[5,"snd_mixer_selem_id_copy","","",N,N],[5,"snd_mixer_selem_id_get_name","","",N,N],[5,"snd_mixer_selem_id_get_index","","",N,N],[5,"snd_mixer_selem_id_set_name","","",N,N],[5,"snd_mixer_selem_id_set_index","","",N,N],[5,"snd_seq_open","","",N,N],[5,"snd_seq_open_lconf","","",N,N],[5,"snd_seq_name","","",N,N],[5,"snd_seq_type","","",N,N],[5,"snd_seq_close","","",N,N],[5,"snd_seq_poll_descriptors_count","","",N,N],[5,"snd_seq_poll_descriptors","","",N,N],[5,"snd_seq_poll_descriptors_revents","","",N,N],[5,"snd_seq_nonblock","","",N,N],[5,"snd_seq_client_id","","",N,N],[5,"snd_seq_get_output_buffer_size","","",N,N],[5,"snd_seq_get_input_buffer_size","","",N,N],[5,"snd_seq_set_output_buffer_size","","",N,N],[5,"snd_seq_set_input_buffer_size","","",N,N],[5,"snd_seq_system_info_sizeof","","",N,N],[5,"snd_seq_system_info_malloc","","",N,N],[5,"snd_seq_system_info_free","","",N,N],[5,"snd_seq_system_info_copy","","",N,N],[5,"snd_seq_system_info_get_queues","","",N,N],[5,"snd_seq_system_info_get_clients","","",N,N],[5,"snd_seq_system_info_get_ports","","",N,N],[5,"snd_seq_system_info_get_channels","","",N,N],[5,"snd_seq_system_info_get_cur_clients","","",N,N],[5,"snd_seq_system_info_get_cur_queues","","",N,N],[5,"snd_seq_system_info","","",N,N],[5,"snd_seq_client_info_sizeof","","",N,N],[5,"snd_seq_client_info_malloc","","",N,N],[5,"snd_seq_client_info_free","","",N,N],[5,"snd_seq_client_info_copy","","",N,N],[5,"snd_seq_client_info_get_client","","",N,N],[5,"snd_seq_client_info_get_type","","",N,N],[5,"snd_seq_client_info_get_name","","",N,N],[5,"snd_seq_client_info_get_broadcast_filter","","",N,N],[5,"snd_seq_client_info_get_error_bounce","","",N,N],[5,"snd_seq_client_info_get_event_filter","","",N,N],[5,"snd_seq_client_info_get_num_ports","","",N,N],[5,"snd_seq_client_info_get_event_lost","","",N,N],[5,"snd_seq_client_info_set_client","","",N,N],[5,"snd_seq_client_info_set_name","","",N,N],[5,"snd_seq_client_info_set_broadcast_filter","","",N,N],[5,"snd_seq_client_info_set_error_bounce","","",N,N],[5,"snd_seq_client_info_set_event_filter","","",N,N],[5,"snd_seq_client_info_event_filter_clear","","",N,N],[5,"snd_seq_client_info_event_filter_add","","",N,N],[5,"snd_seq_client_info_event_filter_del","","",N,N],[5,"snd_seq_client_info_event_filter_check","","",N,N],[5,"snd_seq_get_client_info","","",N,N],[5,"snd_seq_get_any_client_info","","",N,N],[5,"snd_seq_set_client_info","","",N,N],[5,"snd_seq_query_next_client","","",N,N],[5,"snd_seq_client_pool_sizeof","","",N,N],[5,"snd_seq_client_pool_malloc","","",N,N],[5,"snd_seq_client_pool_free","","",N,N],[5,"snd_seq_client_pool_copy","","",N,N],[5,"snd_seq_client_pool_get_client","","",N,N],[5,"snd_seq_client_pool_get_output_pool","","",N,N],[5,"snd_seq_client_pool_get_input_pool","","",N,N],[5,"snd_seq_client_pool_get_output_room","","",N,N],[5,"snd_seq_client_pool_get_output_free","","",N,N],[5,"snd_seq_client_pool_get_input_free","","",N,N],[5,"snd_seq_client_pool_set_output_pool","","",N,N],[5,"snd_seq_client_pool_set_input_pool","","",N,N],[5,"snd_seq_client_pool_set_output_room","","",N,N],[5,"snd_seq_get_client_pool","","",N,N],[5,"snd_seq_set_client_pool","","",N,N],[5,"snd_seq_port_info_sizeof","","",N,N],[5,"snd_seq_port_info_malloc","","",N,N],[5,"snd_seq_port_info_free","","",N,N],[5,"snd_seq_port_info_copy","","",N,N],[5,"snd_seq_port_info_get_client","","",N,N],[5,"snd_seq_port_info_get_port","","",N,N],[5,"snd_seq_port_info_get_addr","","",N,N],[5,"snd_seq_port_info_get_name","","",N,N],[5,"snd_seq_port_info_get_capability","","",N,N],[5,"snd_seq_port_info_get_type","","",N,N],[5,"snd_seq_port_info_get_midi_channels","","",N,N],[5,"snd_seq_port_info_get_midi_voices","","",N,N],[5,"snd_seq_port_info_get_synth_voices","","",N,N],[5,"snd_seq_port_info_get_read_use","","",N,N],[5,"snd_seq_port_info_get_write_use","","",N,N],[5,"snd_seq_port_info_get_port_specified","","",N,N],[5,"snd_seq_port_info_get_timestamping","","",N,N],[5,"snd_seq_port_info_get_timestamp_real","","",N,N],[5,"snd_seq_port_info_get_timestamp_queue","","",N,N],[5,"snd_seq_port_info_set_client","","",N,N],[5,"snd_seq_port_info_set_port","","",N,N],[5,"snd_seq_port_info_set_addr","","",N,N],[5,"snd_seq_port_info_set_name","","",N,N],[5,"snd_seq_port_info_set_capability","","",N,N],[5,"snd_seq_port_info_set_type","","",N,N],[5,"snd_seq_port_info_set_midi_channels","","",N,N],[5,"snd_seq_port_info_set_midi_voices","","",N,N],[5,"snd_seq_port_info_set_synth_voices","","",N,N],[5,"snd_seq_port_info_set_port_specified","","",N,N],[5,"snd_seq_port_info_set_timestamping","","",N,N],[5,"snd_seq_port_info_set_timestamp_real","","",N,N],[5,"snd_seq_port_info_set_timestamp_queue","","",N,N],[5,"snd_seq_create_port","","",N,N],[5,"snd_seq_delete_port","","",N,N],[5,"snd_seq_get_port_info","","",N,N],[5,"snd_seq_get_any_port_info","","",N,N],[5,"snd_seq_set_port_info","","",N,N],[5,"snd_seq_query_next_port","","",N,N],[5,"snd_seq_port_subscribe_sizeof","","",N,N],[5,"snd_seq_port_subscribe_malloc","","",N,N],[5,"snd_seq_port_subscribe_free","","",N,N],[5,"snd_seq_port_subscribe_copy","","",N,N],[5,"snd_seq_port_subscribe_get_sender","","",N,N],[5,"snd_seq_port_subscribe_get_dest","","",N,N],[5,"snd_seq_port_subscribe_get_queue","","",N,N],[5,"snd_seq_port_subscribe_get_exclusive","","",N,N],[5,"snd_seq_port_subscribe_get_time_update","","",N,N],[5,"snd_seq_port_subscribe_get_time_real","","",N,N],[5,"snd_seq_port_subscribe_set_sender","","",N,N],[5,"snd_seq_port_subscribe_set_dest","","",N,N],[5,"snd_seq_port_subscribe_set_queue","","",N,N],[5,"snd_seq_port_subscribe_set_exclusive","","",N,N],[5,"snd_seq_port_subscribe_set_time_update","","",N,N],[5,"snd_seq_port_subscribe_set_time_real","","",N,N],[5,"snd_seq_get_port_subscription","","",N,N],[5,"snd_seq_subscribe_port","","",N,N],[5,"snd_seq_unsubscribe_port","","",N,N],[5,"snd_seq_query_subscribe_sizeof","","",N,N],[5,"snd_seq_query_subscribe_malloc","","",N,N],[5,"snd_seq_query_subscribe_free","","",N,N],[5,"snd_seq_query_subscribe_copy","","",N,N],[5,"snd_seq_query_subscribe_get_client","","",N,N],[5,"snd_seq_query_subscribe_get_port","","",N,N],[5,"snd_seq_query_subscribe_get_root","","",N,N],[5,"snd_seq_query_subscribe_get_type","","",N,N],[5,"snd_seq_query_subscribe_get_index","","",N,N],[5,"snd_seq_query_subscribe_get_num_subs","","",N,N],[5,"snd_seq_query_subscribe_get_addr","","",N,N],[5,"snd_seq_query_subscribe_get_queue","","",N,N],[5,"snd_seq_query_subscribe_get_exclusive","","",N,N],[5,"snd_seq_query_subscribe_get_time_update","","",N,N],[5,"snd_seq_query_subscribe_get_time_real","","",N,N],[5,"snd_seq_query_subscribe_set_client","","",N,N],[5,"snd_seq_query_subscribe_set_port","","",N,N],[5,"snd_seq_query_subscribe_set_root","","",N,N],[5,"snd_seq_query_subscribe_set_type","","",N,N],[5,"snd_seq_query_subscribe_set_index","","",N,N],[5,"snd_seq_query_port_subscribers","","",N,N],[5,"snd_seq_queue_info_sizeof","","",N,N],[5,"snd_seq_queue_info_malloc","","",N,N],[5,"snd_seq_queue_info_free","","",N,N],[5,"snd_seq_queue_info_copy","","",N,N],[5,"snd_seq_queue_info_get_queue","","",N,N],[5,"snd_seq_queue_info_get_name","","",N,N],[5,"snd_seq_queue_info_get_owner","","",N,N],[5,"snd_seq_queue_info_get_locked","","",N,N],[5,"snd_seq_queue_info_get_flags","","",N,N],[5,"snd_seq_queue_info_set_name","","",N,N],[5,"snd_seq_queue_info_set_owner","","",N,N],[5,"snd_seq_queue_info_set_locked","","",N,N],[5,"snd_seq_queue_info_set_flags","","",N,N],[5,"snd_seq_create_queue","","",N,N],[5,"snd_seq_alloc_named_queue","","",N,N],[5,"snd_seq_alloc_queue","","",N,N],[5,"snd_seq_free_queue","","",N,N],[5,"snd_seq_get_queue_info","","",N,N],[5,"snd_seq_set_queue_info","","",N,N],[5,"snd_seq_query_named_queue","","",N,N],[5,"snd_seq_get_queue_usage","","",N,N],[5,"snd_seq_set_queue_usage","","",N,N],[5,"snd_seq_queue_status_sizeof","","",N,N],[5,"snd_seq_queue_status_malloc","","",N,N],[5,"snd_seq_queue_status_free","","",N,N],[5,"snd_seq_queue_status_copy","","",N,N],[5,"snd_seq_queue_status_get_queue","","",N,N],[5,"snd_seq_queue_status_get_events","","",N,N],[5,"snd_seq_queue_status_get_tick_time","","",N,N],[5,"snd_seq_queue_status_get_real_time","","",N,N],[5,"snd_seq_queue_status_get_status","","",N,N],[5,"snd_seq_get_queue_status","","",N,N],[5,"snd_seq_queue_tempo_sizeof","","",N,N],[5,"snd_seq_queue_tempo_malloc","","",N,N],[5,"snd_seq_queue_tempo_free","","",N,N],[5,"snd_seq_queue_tempo_copy","","",N,N],[5,"snd_seq_queue_tempo_get_queue","","",N,N],[5,"snd_seq_queue_tempo_get_tempo","","",N,N],[5,"snd_seq_queue_tempo_get_ppq","","",N,N],[5,"snd_seq_queue_tempo_get_skew","","",N,N],[5,"snd_seq_queue_tempo_get_skew_base","","",N,N],[5,"snd_seq_queue_tempo_set_tempo","","",N,N],[5,"snd_seq_queue_tempo_set_ppq","","",N,N],[5,"snd_seq_queue_tempo_set_skew","","",N,N],[5,"snd_seq_queue_tempo_set_skew_base","","",N,N],[5,"snd_seq_get_queue_tempo","","",N,N],[5,"snd_seq_set_queue_tempo","","",N,N],[5,"snd_seq_queue_timer_sizeof","","",N,N],[5,"snd_seq_queue_timer_malloc","","",N,N],[5,"snd_seq_queue_timer_free","","",N,N],[5,"snd_seq_queue_timer_copy","","",N,N],[5,"snd_seq_queue_timer_get_queue","","",N,N],[5,"snd_seq_queue_timer_get_type","","",N,N],[5,"snd_seq_queue_timer_get_id","","",N,N],[5,"snd_seq_queue_timer_get_resolution","","",N,N],[5,"snd_seq_queue_timer_set_type","","",N,N],[5,"snd_seq_queue_timer_set_id","","",N,N],[5,"snd_seq_queue_timer_set_resolution","","",N,N],[5,"snd_seq_get_queue_timer","","",N,N],[5,"snd_seq_set_queue_timer","","",N,N],[5,"snd_seq_free_event","","",N,N],[5,"snd_seq_event_length","","",N,N],[5,"snd_seq_event_output","","",N,N],[5,"snd_seq_event_output_buffer","","",N,N],[5,"snd_seq_event_output_direct","","",N,N],[5,"snd_seq_event_input","","",N,N],[5,"snd_seq_event_input_pending","","",N,N],[5,"snd_seq_drain_output","","",N,N],[5,"snd_seq_event_output_pending","","",N,N],[5,"snd_seq_extract_output","","",N,N],[5,"snd_seq_drop_output","","",N,N],[5,"snd_seq_drop_output_buffer","","",N,N],[5,"snd_seq_drop_input","","",N,N],[5,"snd_seq_drop_input_buffer","","",N,N],[5,"snd_seq_remove_events_sizeof","","",N,N],[5,"snd_seq_remove_events_malloc","","",N,N],[5,"snd_seq_remove_events_free","","",N,N],[5,"snd_seq_remove_events_copy","","",N,N],[5,"snd_seq_remove_events_get_condition","","",N,N],[5,"snd_seq_remove_events_get_queue","","",N,N],[5,"snd_seq_remove_events_get_time","","",N,N],[5,"snd_seq_remove_events_get_dest","","",N,N],[5,"snd_seq_remove_events_get_channel","","",N,N],[5,"snd_seq_remove_events_get_event_type","","",N,N],[5,"snd_seq_remove_events_get_tag","","",N,N],[5,"snd_seq_remove_events_set_condition","","",N,N],[5,"snd_seq_remove_events_set_queue","","",N,N],[5,"snd_seq_remove_events_set_time","","",N,N],[5,"snd_seq_remove_events_set_dest","","",N,N],[5,"snd_seq_remove_events_set_channel","","",N,N],[5,"snd_seq_remove_events_set_event_type","","",N,N],[5,"snd_seq_remove_events_set_tag","","",N,N],[5,"snd_seq_remove_events","","",N,N],[5,"snd_seq_set_bit","","",N,N],[5,"snd_seq_unset_bit","","",N,N],[5,"snd_seq_change_bit","","",N,N],[5,"snd_seq_get_bit","","",N,N],[5,"snd_seq_control_queue","","",N,N],[5,"snd_seq_create_simple_port","","",N,N],[5,"snd_seq_delete_simple_port","","",N,N],[5,"snd_seq_connect_from","","",N,N],[5,"snd_seq_connect_to","","",N,N],[5,"snd_seq_disconnect_from","","",N,N],[5,"snd_seq_disconnect_to","","",N,N],[5,"snd_seq_set_client_name","","",N,N],[5,"snd_seq_set_client_event_filter","","",N,N],[5,"snd_seq_set_client_pool_output","","",N,N],[5,"snd_seq_set_client_pool_output_room","","",N,N],[5,"snd_seq_set_client_pool_input","","",N,N],[5,"snd_seq_sync_output_queue","","",N,N],[5,"snd_seq_parse_address","","",N,N],[5,"snd_seq_reset_pool_output","","",N,N],[5,"snd_seq_reset_pool_input","","",N,N],[5,"snd_midi_event_new","","",N,N],[5,"snd_midi_event_resize_buffer","","",N,N],[5,"snd_midi_event_free","","",N,N],[5,"snd_midi_event_init","","",N,N],[5,"snd_midi_event_reset_encode","","",N,N],[5,"snd_midi_event_reset_decode","","",N,N],[5,"snd_midi_event_no_status","","",N,N],[5,"snd_midi_event_encode","","",N,N],[5,"snd_midi_event_encode_byte","","",N,N],[5,"snd_midi_event_decode","","",N,N],[6,"snd_async_callback_t","","",N,N],[6,"snd_timestamp_t","","",N,N],[6,"snd_htimestamp_t","","",N,N],[6,"snd_input_type_t","","",N,N],[6,"snd_output_type_t","","",N,N],[6,"snd_lib_error_handler_t","","",N,N],[6,"snd_config_type_t","","",N,N],[6,"snd_config_iterator_t","","",N,N],[6,"snd_pcm_class_t","","",N,N],[6,"snd_pcm_subclass_t","","",N,N],[6,"snd_pcm_stream_t","","",N,N],[6,"snd_pcm_access_t","","",N,N],[6,"snd_pcm_format_t","","",N,N],[6,"snd_pcm_subformat_t","","",N,N],[6,"snd_pcm_state_t","","",N,N],[6,"snd_pcm_start_t","","",N,N],[6,"snd_pcm_xrun_t","","",N,N],[6,"snd_pcm_tstamp_t","","",N,N],[6,"snd_pcm_uframes_t","","",N,N],[6,"snd_pcm_sframes_t","","",N,N],[6,"snd_pcm_type_t","","",N,N],[6,"snd_pcm_chmap_type","","",N,N],[6,"snd_pcm_chmap_position","","",N,N],[6,"snd_pcm_hook_type_t","","",N,N],[6,"snd_pcm_hook_func_t","","",N,N],[6,"snd_spcm_latency_t","","",N,N],[6,"snd_spcm_xrun_type_t","","",N,N],[6,"snd_spcm_duplex_type_t","","",N,N],[6,"snd_rawmidi_stream_t","","",N,N],[6,"snd_rawmidi_type_t","","",N,N],[6,"snd_timer_class_t","","",N,N],[6,"snd_timer_slave_class_t","","",N,N],[6,"snd_timer_event_t","","",N,N],[6,"snd_timer_type_t","","",N,N],[6,"snd_hwdep_iface_t","","",N,N],[6,"snd_hwdep_type_t","","",N,N],[6,"snd_ctl_elem_type_t","","",N,N],[6,"snd_ctl_elem_iface_t","","",N,N],[6,"snd_ctl_event_type_t","","",N,N],[6,"snd_ctl_type_t","","",N,N],[6,"snd_hctl_compare_t","","",N,N],[6,"snd_hctl_callback_t","","",N,N],[6,"snd_hctl_elem_callback_t","","",N,N],[6,"snd_mixer_callback_t","","",N,N],[6,"snd_mixer_elem_callback_t","","",N,N],[6,"snd_mixer_compare_t","","",N,N],[6,"snd_mixer_event_t","","",N,N],[6,"snd_mixer_elem_type_t","","",N,N],[6,"snd_mixer_selem_channel_id_t","","",N,N],[6,"snd_mixer_selem_regopt_abstract","","",N,N],[6,"snd_seq_event_type_t","","",N,N],[6,"snd_seq_tick_time_t","","",N,N],[6,"snd_seq_type_t","","",N,N],[6,"snd_seq_client_type_t","","",N,N],[6,"snd_seq_query_subs_type_t","","",N,N],[6,"snd_seq_queue_timer_type_t","","",N,N],[6,"snd_pcm_audio_tstamp_config_t","","",N,N],[6,"snd_pcm_audio_tstamp_report_t","","",N,N],[7,"SND_PCM_NONBLOCK","","",N,N],[7,"SND_PCM_ASYNC","","",N,N],[7,"SND_MIXER_SABSTRACT_NONE","","",N,N],[7,"SND_MIXER_SABSTRACT_BASIC","","",N,N],[17,"SND_INPUT_STDIO","","",N,N],[17,"SND_INPUT_BUFFER","","",N,N],[17,"SND_OUTPUT_STDIO","","",N,N],[17,"SND_OUTPUT_BUFFER","","",N,N],[17,"SND_CONFIG_TYPE_INTEGER","","",N,N],[17,"SND_CONFIG_TYPE_INTEGER64","","",N,N],[17,"SND_CONFIG_TYPE_REAL","","",N,N],[17,"SND_CONFIG_TYPE_STRING","","",N,N],[17,"SND_CONFIG_TYPE_POINTER","","",N,N],[17,"SND_CONFIG_TYPE_COMPOUND","","",N,N],[17,"SND_PCM_CLASS_GENERIC","","",N,N],[17,"SND_PCM_CLASS_MULTI","","",N,N],[17,"SND_PCM_CLASS_MODEM","","",N,N],[17,"SND_PCM_CLASS_DIGITIZER","","",N,N],[17,"SND_PCM_CLASS_LAST","","",N,N],[17,"SND_PCM_SUBCLASS_GENERIC_MIX","","",N,N],[17,"SND_PCM_SUBCLASS_MULTI_MIX","","",N,N],[17,"SND_PCM_SUBCLASS_LAST","","",N,N],[17,"SND_PCM_STREAM_PLAYBACK","","",N,N],[17,"SND_PCM_STREAM_CAPTURE","","",N,N],[17,"SND_PCM_STREAM_LAST","","",N,N],[17,"SND_PCM_ACCESS_MMAP_INTERLEAVED","","",N,N],[17,"SND_PCM_ACCESS_MMAP_NONINTERLEAVED","","",N,N],[17,"SND_PCM_ACCESS_MMAP_COMPLEX","","",N,N],[17,"SND_PCM_ACCESS_RW_INTERLEAVED","","",N,N],[17,"SND_PCM_ACCESS_RW_NONINTERLEAVED","","",N,N],[17,"SND_PCM_ACCESS_LAST","","",N,N],[17,"SND_PCM_FORMAT_UNKNOWN","","",N,N],[17,"SND_PCM_FORMAT_S8","","",N,N],[17,"SND_PCM_FORMAT_U8","","",N,N],[17,"SND_PCM_FORMAT_S16_LE","","",N,N],[17,"SND_PCM_FORMAT_S16_BE","","",N,N],[17,"SND_PCM_FORMAT_U16_LE","","",N,N],[17,"SND_PCM_FORMAT_U16_BE","","",N,N],[17,"SND_PCM_FORMAT_S24_LE","","",N,N],[17,"SND_PCM_FORMAT_S24_BE","","",N,N],[17,"SND_PCM_FORMAT_U24_LE","","",N,N],[17,"SND_PCM_FORMAT_U24_BE","","",N,N],[17,"SND_PCM_FORMAT_S32_LE","","",N,N],[17,"SND_PCM_FORMAT_S32_BE","","",N,N],[17,"SND_PCM_FORMAT_U32_LE","","",N,N],[17,"SND_PCM_FORMAT_U32_BE","","",N,N],[17,"SND_PCM_FORMAT_FLOAT_LE","","",N,N],[17,"SND_PCM_FORMAT_FLOAT_BE","","",N,N],[17,"SND_PCM_FORMAT_FLOAT64_LE","","",N,N],[17,"SND_PCM_FORMAT_FLOAT64_BE","","",N,N],[17,"SND_PCM_FORMAT_IEC958_SUBFRAME_LE","","",N,N],[17,"SND_PCM_FORMAT_IEC958_SUBFRAME_BE","","",N,N],[17,"SND_PCM_FORMAT_MU_LAW","","",N,N],[17,"SND_PCM_FORMAT_A_LAW","","",N,N],[17,"SND_PCM_FORMAT_IMA_ADPCM","","",N,N],[17,"SND_PCM_FORMAT_MPEG","","",N,N],[17,"SND_PCM_FORMAT_GSM","","",N,N],[17,"SND_PCM_FORMAT_SPECIAL","","",N,N],[17,"SND_PCM_FORMAT_S24_3LE","","",N,N],[17,"SND_PCM_FORMAT_S24_3BE","","",N,N],[17,"SND_PCM_FORMAT_U24_3LE","","",N,N],[17,"SND_PCM_FORMAT_U24_3BE","","",N,N],[17,"SND_PCM_FORMAT_S20_3LE","","",N,N],[17,"SND_PCM_FORMAT_S20_3BE","","",N,N],[17,"SND_PCM_FORMAT_U20_3LE","","",N,N],[17,"SND_PCM_FORMAT_U20_3BE","","",N,N],[17,"SND_PCM_FORMAT_S18_3LE","","",N,N],[17,"SND_PCM_FORMAT_S18_3BE","","",N,N],[17,"SND_PCM_FORMAT_U18_3LE","","",N,N],[17,"SND_PCM_FORMAT_U18_3BE","","",N,N],[17,"SND_PCM_FORMAT_G723_24","","",N,N],[17,"SND_PCM_FORMAT_G723_24_1B","","",N,N],[17,"SND_PCM_FORMAT_G723_40","","",N,N],[17,"SND_PCM_FORMAT_G723_40_1B","","",N,N],[17,"SND_PCM_FORMAT_DSD_U8","","",N,N],[17,"SND_PCM_FORMAT_DSD_U16_LE","","",N,N],[17,"SND_PCM_FORMAT_LAST","","",N,N],[17,"SND_PCM_FORMAT_S16","","",N,N],[17,"SND_PCM_FORMAT_U16","","",N,N],[17,"SND_PCM_FORMAT_S24","","",N,N],[17,"SND_PCM_FORMAT_U24","","",N,N],[17,"SND_PCM_FORMAT_S32","","",N,N],[17,"SND_PCM_FORMAT_U32","","",N,N],[17,"SND_PCM_FORMAT_FLOAT","","",N,N],[17,"SND_PCM_FORMAT_FLOAT64","","",N,N],[17,"SND_PCM_FORMAT_IEC958_SUBFRAME","","",N,N],[17,"SND_PCM_SUBFORMAT_STD","","",N,N],[17,"SND_PCM_SUBFORMAT_LAST","","",N,N],[17,"SND_PCM_STATE_OPEN","","",N,N],[17,"SND_PCM_STATE_SETUP","","",N,N],[17,"SND_PCM_STATE_PREPARED","","",N,N],[17,"SND_PCM_STATE_RUNNING","","",N,N],[17,"SND_PCM_STATE_XRUN","","",N,N],[17,"SND_PCM_STATE_DRAINING","","",N,N],[17,"SND_PCM_STATE_PAUSED","","",N,N],[17,"SND_PCM_STATE_SUSPENDED","","",N,N],[17,"SND_PCM_STATE_DISCONNECTED","","",N,N],[17,"SND_PCM_STATE_LAST","","",N,N],[17,"SND_PCM_START_DATA","","",N,N],[17,"SND_PCM_START_EXPLICIT","","",N,N],[17,"SND_PCM_START_LAST","","",N,N],[17,"SND_PCM_XRUN_NONE","","",N,N],[17,"SND_PCM_XRUN_STOP","","",N,N],[17,"SND_PCM_XRUN_LAST","","",N,N],[17,"SND_PCM_TSTAMP_NONE","","",N,N],[17,"SND_PCM_TSTAMP_ENABLE","","",N,N],[17,"SND_PCM_TSTAMP_MMAP","","",N,N],[17,"SND_PCM_TSTAMP_LAST","","",N,N],[17,"SND_PCM_TYPE_HW","","",N,N],[17,"SND_PCM_TYPE_HOOKS","","",N,N],[17,"SND_PCM_TYPE_MULTI","","",N,N],[17,"SND_PCM_TYPE_FILE","","",N,N],[17,"SND_PCM_TYPE_NULL","","",N,N],[17,"SND_PCM_TYPE_SHM","","",N,N],[17,"SND_PCM_TYPE_INET","","",N,N],[17,"SND_PCM_TYPE_COPY","","",N,N],[17,"SND_PCM_TYPE_LINEAR","","",N,N],[17,"SND_PCM_TYPE_ALAW","","",N,N],[17,"SND_PCM_TYPE_MULAW","","",N,N],[17,"SND_PCM_TYPE_ADPCM","","",N,N],[17,"SND_PCM_TYPE_RATE","","",N,N],[17,"SND_PCM_TYPE_ROUTE","","",N,N],[17,"SND_PCM_TYPE_PLUG","","",N,N],[17,"SND_PCM_TYPE_SHARE","","",N,N],[17,"SND_PCM_TYPE_METER","","",N,N],[17,"SND_PCM_TYPE_MIX","","",N,N],[17,"SND_PCM_TYPE_DROUTE","","",N,N],[17,"SND_PCM_TYPE_LBSERVER","","",N,N],[17,"SND_PCM_TYPE_LINEAR_FLOAT","","",N,N],[17,"SND_PCM_TYPE_LADSPA","","",N,N],[17,"SND_PCM_TYPE_DMIX","","",N,N],[17,"SND_PCM_TYPE_JACK","","",N,N],[17,"SND_PCM_TYPE_DSNOOP","","",N,N],[17,"SND_PCM_TYPE_DSHARE","","",N,N],[17,"SND_PCM_TYPE_IEC958","","",N,N],[17,"SND_PCM_TYPE_SOFTVOL","","",N,N],[17,"SND_PCM_TYPE_IOPLUG","","",N,N],[17,"SND_PCM_TYPE_EXTPLUG","","",N,N],[17,"SND_PCM_TYPE_MMAP_EMUL","","",N,N],[17,"SND_PCM_TYPE_LAST","","",N,N],[17,"SND_CHMAP_TYPE_NONE","","",N,N],[17,"SND_CHMAP_TYPE_FIXED","","",N,N],[17,"SND_CHMAP_TYPE_VAR","","",N,N],[17,"SND_CHMAP_TYPE_PAIRED","","",N,N],[17,"SND_CHMAP_TYPE_LAST","","",N,N],[17,"SND_CHMAP_UNKNOWN","","",N,N],[17,"SND_CHMAP_NA","","",N,N],[17,"SND_CHMAP_MONO","","",N,N],[17,"SND_CHMAP_FL","","",N,N],[17,"SND_CHMAP_FR","","",N,N],[17,"SND_CHMAP_RL","","",N,N],[17,"SND_CHMAP_RR","","",N,N],[17,"SND_CHMAP_FC","","",N,N],[17,"SND_CHMAP_LFE","","",N,N],[17,"SND_CHMAP_SL","","",N,N],[17,"SND_CHMAP_SR","","",N,N],[17,"SND_CHMAP_RC","","",N,N],[17,"SND_CHMAP_FLC","","",N,N],[17,"SND_CHMAP_FRC","","",N,N],[17,"SND_CHMAP_RLC","","",N,N],[17,"SND_CHMAP_RRC","","",N,N],[17,"SND_CHMAP_FLW","","",N,N],[17,"SND_CHMAP_FRW","","",N,N],[17,"SND_CHMAP_FLH","","",N,N],[17,"SND_CHMAP_FCH","","",N,N],[17,"SND_CHMAP_FRH","","",N,N],[17,"SND_CHMAP_TC","","",N,N],[17,"SND_CHMAP_TFL","","",N,N],[17,"SND_CHMAP_TFR","","",N,N],[17,"SND_CHMAP_TFC","","",N,N],[17,"SND_CHMAP_TRL","","",N,N],[17,"SND_CHMAP_TRR","","",N,N],[17,"SND_CHMAP_TRC","","",N,N],[17,"SND_CHMAP_TFLC","","",N,N],[17,"SND_CHMAP_TFRC","","",N,N],[17,"SND_CHMAP_TSL","","",N,N],[17,"SND_CHMAP_TSR","","",N,N],[17,"SND_CHMAP_LLFE","","",N,N],[17,"SND_CHMAP_RLFE","","",N,N],[17,"SND_CHMAP_BC","","",N,N],[17,"SND_CHMAP_BLC","","",N,N],[17,"SND_CHMAP_BRC","","",N,N],[17,"SND_CHMAP_LAST","","",N,N],[17,"SND_PCM_HOOK_TYPE_HW_PARAMS","","",N,N],[17,"SND_PCM_HOOK_TYPE_HW_FREE","","",N,N],[17,"SND_PCM_HOOK_TYPE_CLOSE","","",N,N],[17,"SND_PCM_HOOK_TYPE_LAST","","",N,N],[17,"SND_SPCM_LATENCY_STANDARD","","",N,N],[17,"SND_SPCM_LATENCY_MEDIUM","","",N,N],[17,"SND_SPCM_LATENCY_REALTIME","","",N,N],[17,"SND_SPCM_XRUN_IGNORE","","",N,N],[17,"SND_SPCM_XRUN_STOP","","",N,N],[17,"SND_SPCM_DUPLEX_LIBERAL","","",N,N],[17,"SND_SPCM_DUPLEX_PEDANTIC","","",N,N],[17,"SND_RAWMIDI_STREAM_OUTPUT","","",N,N],[17,"SND_RAWMIDI_STREAM_INPUT","","",N,N],[17,"SND_RAWMIDI_STREAM_LAST","","",N,N],[17,"SND_RAWMIDI_TYPE_HW","","",N,N],[17,"SND_RAWMIDI_TYPE_SHM","","",N,N],[17,"SND_RAWMIDI_TYPE_INET","","",N,N],[17,"SND_RAWMIDI_TYPE_VIRTUAL","","",N,N],[17,"SND_TIMER_CLASS_NONE","","",N,N],[17,"SND_TIMER_CLASS_SLAVE","","",N,N],[17,"SND_TIMER_CLASS_GLOBAL","","",N,N],[17,"SND_TIMER_CLASS_CARD","","",N,N],[17,"SND_TIMER_CLASS_PCM","","",N,N],[17,"SND_TIMER_CLASS_LAST","","",N,N],[17,"SND_TIMER_SCLASS_NONE","","",N,N],[17,"SND_TIMER_SCLASS_APPLICATION","","",N,N],[17,"SND_TIMER_SCLASS_SEQUENCER","","",N,N],[17,"SND_TIMER_SCLASS_OSS_SEQUENCER","","",N,N],[17,"SND_TIMER_SCLASS_LAST","","",N,N],[17,"SND_TIMER_EVENT_RESOLUTION","","",N,N],[17,"SND_TIMER_EVENT_TICK","","",N,N],[17,"SND_TIMER_EVENT_START","","",N,N],[17,"SND_TIMER_EVENT_STOP","","",N,N],[17,"SND_TIMER_EVENT_CONTINUE","","",N,N],[17,"SND_TIMER_EVENT_PAUSE","","",N,N],[17,"SND_TIMER_EVENT_EARLY","","",N,N],[17,"SND_TIMER_EVENT_SUSPEND","","",N,N],[17,"SND_TIMER_EVENT_RESUME","","",N,N],[17,"SND_TIMER_EVENT_MSTART","","",N,N],[17,"SND_TIMER_EVENT_MSTOP","","",N,N],[17,"SND_TIMER_EVENT_MCONTINUE","","",N,N],[17,"SND_TIMER_EVENT_MPAUSE","","",N,N],[17,"SND_TIMER_EVENT_MSUSPEND","","",N,N],[17,"SND_TIMER_EVENT_MRESUME","","",N,N],[17,"SND_TIMER_TYPE_HW","","",N,N],[17,"SND_TIMER_TYPE_SHM","","",N,N],[17,"SND_TIMER_TYPE_INET","","",N,N],[17,"SND_HWDEP_IFACE_OPL2","","",N,N],[17,"SND_HWDEP_IFACE_OPL3","","",N,N],[17,"SND_HWDEP_IFACE_OPL4","","",N,N],[17,"SND_HWDEP_IFACE_SB16CSP","","",N,N],[17,"SND_HWDEP_IFACE_EMU10K1","","",N,N],[17,"SND_HWDEP_IFACE_YSS225","","",N,N],[17,"SND_HWDEP_IFACE_ICS2115","","",N,N],[17,"SND_HWDEP_IFACE_SSCAPE","","",N,N],[17,"SND_HWDEP_IFACE_VX","","",N,N],[17,"SND_HWDEP_IFACE_MIXART","","",N,N],[17,"SND_HWDEP_IFACE_USX2Y","","",N,N],[17,"SND_HWDEP_IFACE_EMUX_WAVETABLE","","",N,N],[17,"SND_HWDEP_IFACE_BLUETOOTH","","",N,N],[17,"SND_HWDEP_IFACE_USX2Y_PCM","","",N,N],[17,"SND_HWDEP_IFACE_PCXHR","","",N,N],[17,"SND_HWDEP_IFACE_SB_RC","","",N,N],[17,"SND_HWDEP_IFACE_LAST","","",N,N],[17,"SND_HWDEP_TYPE_HW","","",N,N],[17,"SND_HWDEP_TYPE_SHM","","",N,N],[17,"SND_HWDEP_TYPE_INET","","",N,N],[17,"SND_CTL_ELEM_TYPE_NONE","","",N,N],[17,"SND_CTL_ELEM_TYPE_BOOLEAN","","",N,N],[17,"SND_CTL_ELEM_TYPE_INTEGER","","",N,N],[17,"SND_CTL_ELEM_TYPE_ENUMERATED","","",N,N],[17,"SND_CTL_ELEM_TYPE_BYTES","","",N,N],[17,"SND_CTL_ELEM_TYPE_IEC958","","",N,N],[17,"SND_CTL_ELEM_TYPE_INTEGER64","","",N,N],[17,"SND_CTL_ELEM_TYPE_LAST","","",N,N],[17,"SND_CTL_ELEM_IFACE_CARD","","",N,N],[17,"SND_CTL_ELEM_IFACE_HWDEP","","",N,N],[17,"SND_CTL_ELEM_IFACE_MIXER","","",N,N],[17,"SND_CTL_ELEM_IFACE_PCM","","",N,N],[17,"SND_CTL_ELEM_IFACE_RAWMIDI","","",N,N],[17,"SND_CTL_ELEM_IFACE_TIMER","","",N,N],[17,"SND_CTL_ELEM_IFACE_SEQUENCER","","",N,N],[17,"SND_CTL_ELEM_IFACE_LAST","","",N,N],[17,"SND_CTL_EVENT_ELEM","","",N,N],[17,"SND_CTL_EVENT_LAST","","",N,N],[17,"SND_CTL_TYPE_HW","","",N,N],[17,"SND_CTL_TYPE_SHM","","",N,N],[17,"SND_CTL_TYPE_INET","","",N,N],[17,"SND_CTL_TYPE_EXT","","",N,N],[17,"SND_MIXER_ELEM_SIMPLE","","",N,N],[17,"SND_MIXER_ELEM_LAST","","",N,N],[17,"SND_MIXER_SCHN_UNKNOWN","","",N,N],[17,"SND_MIXER_SCHN_FRONT_LEFT","","",N,N],[17,"SND_MIXER_SCHN_FRONT_RIGHT","","",N,N],[17,"SND_MIXER_SCHN_REAR_LEFT","","",N,N],[17,"SND_MIXER_SCHN_REAR_RIGHT","","",N,N],[17,"SND_MIXER_SCHN_FRONT_CENTER","","",N,N],[17,"SND_MIXER_SCHN_WOOFER","","",N,N],[17,"SND_MIXER_SCHN_SIDE_LEFT","","",N,N],[17,"SND_MIXER_SCHN_SIDE_RIGHT","","",N,N],[17,"SND_MIXER_SCHN_REAR_CENTER","","",N,N],[17,"SND_MIXER_SCHN_LAST","","",N,N],[17,"SND_MIXER_SCHN_MONO","","",N,N],[17,"SND_SEQ_EVENT_SYSTEM","","",N,N],[17,"SND_SEQ_EVENT_RESULT","","",N,N],[17,"SND_SEQ_EVENT_NOTE","","",N,N],[17,"SND_SEQ_EVENT_NOTEON","","",N,N],[17,"SND_SEQ_EVENT_NOTEOFF","","",N,N],[17,"SND_SEQ_EVENT_KEYPRESS","","",N,N],[17,"SND_SEQ_EVENT_CONTROLLER","","",N,N],[17,"SND_SEQ_EVENT_PGMCHANGE","","",N,N],[17,"SND_SEQ_EVENT_CHANPRESS","","",N,N],[17,"SND_SEQ_EVENT_PITCHBEND","","",N,N],[17,"SND_SEQ_EVENT_CONTROL14","","",N,N],[17,"SND_SEQ_EVENT_NONREGPARAM","","",N,N],[17,"SND_SEQ_EVENT_REGPARAM","","",N,N],[17,"SND_SEQ_EVENT_SONGPOS","","",N,N],[17,"SND_SEQ_EVENT_SONGSEL","","",N,N],[17,"SND_SEQ_EVENT_QFRAME","","",N,N],[17,"SND_SEQ_EVENT_TIMESIGN","","",N,N],[17,"SND_SEQ_EVENT_KEYSIGN","","",N,N],[17,"SND_SEQ_EVENT_START","","",N,N],[17,"SND_SEQ_EVENT_CONTINUE","","",N,N],[17,"SND_SEQ_EVENT_STOP","","",N,N],[17,"SND_SEQ_EVENT_SETPOS_TICK","","",N,N],[17,"SND_SEQ_EVENT_SETPOS_TIME","","",N,N],[17,"SND_SEQ_EVENT_TEMPO","","",N,N],[17,"SND_SEQ_EVENT_CLOCK","","",N,N],[17,"SND_SEQ_EVENT_TICK","","",N,N],[17,"SND_SEQ_EVENT_QUEUE_SKEW","","",N,N],[17,"SND_SEQ_EVENT_SYNC_POS","","",N,N],[17,"SND_SEQ_EVENT_TUNE_REQUEST","","",N,N],[17,"SND_SEQ_EVENT_RESET","","",N,N],[17,"SND_SEQ_EVENT_SENSING","","",N,N],[17,"SND_SEQ_EVENT_ECHO","","",N,N],[17,"SND_SEQ_EVENT_OSS","","",N,N],[17,"SND_SEQ_EVENT_CLIENT_START","","",N,N],[17,"SND_SEQ_EVENT_CLIENT_EXIT","","",N,N],[17,"SND_SEQ_EVENT_CLIENT_CHANGE","","",N,N],[17,"SND_SEQ_EVENT_PORT_START","","",N,N],[17,"SND_SEQ_EVENT_PORT_EXIT","","",N,N],[17,"SND_SEQ_EVENT_PORT_CHANGE","","",N,N],[17,"SND_SEQ_EVENT_PORT_SUBSCRIBED","","",N,N],[17,"SND_SEQ_EVENT_PORT_UNSUBSCRIBED","","",N,N],[17,"SND_SEQ_EVENT_USR0","","",N,N],[17,"SND_SEQ_EVENT_USR1","","",N,N],[17,"SND_SEQ_EVENT_USR2","","",N,N],[17,"SND_SEQ_EVENT_USR3","","",N,N],[17,"SND_SEQ_EVENT_USR4","","",N,N],[17,"SND_SEQ_EVENT_USR5","","",N,N],[17,"SND_SEQ_EVENT_USR6","","",N,N],[17,"SND_SEQ_EVENT_USR7","","",N,N],[17,"SND_SEQ_EVENT_USR8","","",N,N],[17,"SND_SEQ_EVENT_USR9","","",N,N],[17,"SND_SEQ_EVENT_SYSEX","","",N,N],[17,"SND_SEQ_EVENT_BOUNCE","","",N,N],[17,"SND_SEQ_EVENT_USR_VAR0","","",N,N],[17,"SND_SEQ_EVENT_USR_VAR1","","",N,N],[17,"SND_SEQ_EVENT_USR_VAR2","","",N,N],[17,"SND_SEQ_EVENT_USR_VAR3","","",N,N],[17,"SND_SEQ_EVENT_USR_VAR4","","",N,N],[17,"SND_SEQ_EVENT_NONE","","",N,N],[17,"SND_SEQ_TYPE_HW","","",N,N],[17,"SND_SEQ_TYPE_SHM","","",N,N],[17,"SND_SEQ_TYPE_INET","","",N,N],[17,"SND_SEQ_USER_CLIENT","","",N,N],[17,"SND_SEQ_KERNEL_CLIENT","","",N,N],[17,"SND_SEQ_QUERY_SUBS_READ","","",N,N],[17,"SND_SEQ_QUERY_SUBS_WRITE","","",N,N],[17,"SND_SEQ_TIMER_ALSA","","",N,N],[17,"SND_SEQ_TIMER_MIDI_CLOCK","","",N,N],[17,"SND_SEQ_TIMER_MIDI_TICK","","",N,N],[17,"SND_SEQ_EVFLG_RESULT","","",N,N],[17,"SND_SEQ_EVFLG_NOTE","","",N,N],[17,"SND_SEQ_EVFLG_CONTROL","","",N,N],[17,"SND_SEQ_EVFLG_QUEUE","","",N,N],[17,"SND_SEQ_EVFLG_SYSTEM","","",N,N],[17,"SND_SEQ_EVFLG_MESSAGE","","",N,N],[17,"SND_SEQ_EVFLG_CONNECTION","","",N,N],[17,"SND_SEQ_EVFLG_SAMPLE","","",N,N],[17,"SND_SEQ_EVFLG_USERS","","",N,N],[17,"SND_SEQ_EVFLG_INSTR","","",N,N],[17,"SND_SEQ_EVFLG_QUOTE","","",N,N],[17,"SND_SEQ_EVFLG_NONE","","",N,N],[17,"SND_SEQ_EVFLG_RAW","","",N,N],[17,"SND_SEQ_EVFLG_FIXED","","",N,N],[17,"SND_SEQ_EVFLG_VARIABLE","","",N,N],[17,"SND_SEQ_EVFLG_VARUSR","","",N,N],[17,"SND_SEQ_EVFLG_NOTE_ONEARG","","",N,N],[17,"SND_SEQ_EVFLG_NOTE_TWOARG","","",N,N],[17,"SND_SEQ_EVFLG_QUEUE_NOARG","","",N,N],[17,"SND_SEQ_EVFLG_QUEUE_TICK","","",N,N],[17,"SND_SEQ_EVFLG_QUEUE_TIME","","",N,N],[17,"SND_SEQ_EVFLG_QUEUE_VALUE","","",N,N],[11,"id","","",3,N],[11,"id16","","",3,N],[11,"id32","","",3,N],[11,"tick","","",14,N],[11,"time","","",14,N],[11,"value","","",23,N],[11,"time","","",23,N],[11,"position","","",23,N],[11,"skew","","",23,N],[11,"d32","","",23,N],[11,"d8","","",23,N],[11,"note","","",25,N],[11,"control","","",25,N],[11,"raw8","","",25,N],[11,"raw32","","",25,N],[11,"ext","","",25,N],[11,"queue","","",25,N],[11,"time","","",25,N],[11,"addr","","",25,N],[11,"connect","","",25,N],[11,"result","","",25,N],[11,"clone","","",28,[[["self"]],["__bindgenbitfieldunit"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["__bindgenbitfieldunit"]]],[11,"hash","","",28,N],[11,"cmp","","",28,[[["self"],["__bindgenbitfieldunit"]],["ordering"]]],[11,"eq","","",28,[[["self"],["__bindgenbitfieldunit"]],["bool"]]],[11,"ne","","",28,[[["self"],["__bindgenbitfieldunit"]],["bool"]]],[11,"partial_cmp","","",28,[[["self"],["__bindgenbitfieldunit"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["__bindgenbitfieldunit"]],["bool"]]],[11,"le","","",28,[[["self"],["__bindgenbitfieldunit"]],["bool"]]],[11,"gt","","",28,[[["self"],["__bindgenbitfieldunit"]],["bool"]]],[11,"ge","","",28,[[["self"],["__bindgenbitfieldunit"]],["bool"]]],[11,"new","","",28,[[["storage"]],["self"]]],[11,"get_bit","","",28,[[["self"],["usize"]],["bool"]]],[11,"set_bit","","",28,[[["self"],["usize"],["bool"]]]],[11,"get","","",28,[[["self"],["usize"],["u8"]],["u64"]]],[11,"set","","",28,[[["self"],["usize"],["u8"],["u64"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["_snd_pcm_audio_tstamp_config"]]],[11,"type_requested","","",26,[[["self"]],["c_uint"]]],[11,"set_type_requested","","",26,[[["self"],["c_uint"]]]],[11,"report_delay","","",26,[[["self"]],["c_uint"]]],[11,"set_report_delay","","",26,[[["self"],["c_uint"]]]],[11,"new_bitfield_1","","",26,[[["c_uint"],["c_uint"]],["__bindgenbitfieldunit",["u8"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["_snd_pcm_audio_tstamp_report"]]],[11,"valid","","",27,[[["self"]],["c_uint"]]],[11,"set_valid","","",27,[[["self"],["c_uint"]]]],[11,"actual_type","","",27,[[["self"]],["c_uint"]]],[11,"set_actual_type","","",27,[[["self"],["c_uint"]]]],[11,"accuracy_report","","",27,[[["self"]],["c_uint"]]],[11,"set_accuracy_report","","",27,[[["self"],["c_uint"]]]],[11,"new_bitfield_1","","",27,[[["c_uint"],["c_uint"],["c_uint"]],["__bindgenbitfieldunit",["u8"]]]]],"paths":[[3,"snd_dlsym_link"],[3,"snd_devname_t"],[3,"snd_pcm_channel_area_t"],[3,"snd_pcm_sync_id_t"],[3,"snd_pcm_chmap_t"],[3,"snd_pcm_chmap_query_t"],[3,"snd_pcm_scope_ops_t"],[3,"snd_timer_read_t"],[3,"snd_timer_tread_t"],[3,"snd_aes_iec958_t"],[3,"snd_mixer_selem_regopt"],[3,"snd_seq_addr_t"],[3,"snd_seq_connect_t"],[3,"snd_seq_real_time_t"],[3,"snd_seq_timestamp_t"],[3,"snd_seq_ev_note_t"],[3,"snd_seq_ev_ctrl_t"],[3,"snd_seq_ev_raw8_t"],[3,"snd_seq_ev_raw32_t"],[3,"snd_seq_ev_ext_t"],[3,"snd_seq_result_t"],[3,"snd_seq_queue_skew_t"],[3,"snd_seq_ev_queue_control_t"],[3,"Union_Unnamed9"],[3,"snd_seq_event_t"],[3,"Union_Unnamed10"],[3,"_snd_pcm_audio_tstamp_config"],[3,"_snd_pcm_audio_tstamp_report"],[3,"__BindgenBitfieldUnit"]]};
searchIndex["amethyst"]={"doc":"Amethyst is a free and open source game engine written in idiomatic [Rust][rs] for building video games and interactive multimedia applications. The source code is available for download on [GitHub][gh]. See the [online book][bk] for a complete guide to using Amethyst.","items":[[4,"LogLevelFilter","amethyst","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",0,N],[13,"Error","","Corresponds to the `Error` log level.",0,N],[13,"Warn","","Corresponds to the `Warn` log level.",0,N],[13,"Info","","Corresponds to the `Info` log level.",0,N],[13,"Debug","","Corresponds to the `Debug` log level.",0,N],[13,"Trace","","Corresponds to the `Trace` log level.",0,N],[0,"cell","amethyst::shred","Helper module for some internals, most users don't need to interact with it.",N,N],[3,"InvalidBorrow","amethyst::shred::cell","Marker struct for an invalid borrow error",N,N],[3,"Ref","","An immutable reference to data in a `TrustCell`.",N,N],[3,"RefMut","","A mutable reference to data in a `TrustCell`.",N,N],[3,"TrustCell","","A custom cell container that is a `RefCell` with thread-safety.",N,N],[14,"seq","amethyst::shred","The `seq!` macro may be used to easily create a structure which runs things sequentially.",N,N],[14,"par","","The `par!` macro may be used to easily create a structure which runs things in parallel.",N,N],[3,"ResourceId","","The id of a [`Resource`], which is a tuple struct with a type id and an additional resource id (represented with a `usize`).",N,N],[12,"0","","",1,N],[3,"Seq","","Runs two tasks sequentially. These two tasks are called `head` and `tail` in the following documentation.",N,N],[6,"WriteExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Write` or `Option<Write>` is therefore recommended.",N,N],[3,"Par","","Runs two tasks in parallel. These two tasks are called `head` and `tail` in the following documentation.",N,N],[3,"FetchMut","","Allows to fetch a resource in a system mutably.",N,N],[8,"Resource","","A resource defines a set of data which can only be accessed according to Rust's typical borrowing model (one writer xor multiple readers).",N,N],[8,"System","","A `System`, executed with a set of required [`Resource`]s.",N,N],[16,"SystemData","","The resource bundle required to execute this system.",2,N],[10,"run","","Executes the system with the required system data.",2,N],[11,"running_time","","Returns a hint how long the system needs for running. This is used to optimize the way they're executed (might allow more parallelization).",2,[[["self"]],["runningtime"]]],[11,"accessor","","Return the accessor from the [`SystemData`].",2,[[["self"]],["accessorcow"]]],[11,"setup","","Sets up the `Resources` using `Self::SystemData::setup`.",2,N],[8,"RunWithPool","","Similar to `RunNow` except additionally taking in a rayon::ThreadPool for parallelism.",N,N],[10,"setup","","Sets up `Resources` for a later call to `run`.",3,N],[10,"run","","Runs the system/group of systems. Possibly in parallel depending on how the structure is set up.",3,N],[10,"reads","","Accumulates the necessary read/shared resources from the systems in this group.",3,N],[10,"writes","","Accumulates the necessary write/exclusive resources from the systems in this group.",3,N],[3,"MetaTable","","The `MetaTable` which allows to store object-safe trait implementations for resources.",N,N],[3,"DispatcherBuilder","","Builder for the [`Dispatcher`].",N,N],[3,"Write","","Allows to fetch a resource in a system mutably.",N,N],[3,"MetaIterMut","","A mutable iterator for the `MetaTable`.",N,N],[8,"SystemData","","A static system data that can specify its dependencies at statically (at compile-time). Most system data is a `SystemData`, the `DynamicSystemData` type is only needed for very special setups.",N,N],[10,"setup","","Sets up the system data for fetching it from the `Resources`.",4,N],[10,"fetch","","Fetches the system data from `Resources`. Note that this is only specified for one concrete lifetime `'a`, you need to implement the `SystemData` trait for every possible lifetime.",4,[[["resources"]],["self"]]],[10,"reads","","Returns all read dependencies as fetched from `Self::fetch`.",4,[[],["vec",["resourceid"]]]],[10,"writes","","Returns all write dependencies as fetched from `Self::fetch`.",4,[[],["vec",["resourceid"]]]],[8,"RunNow","","Trait for fetching data and running systems. Automatically implemented for systems.",N,N],[10,"run_now","","Runs the system now.",5,N],[10,"setup","","Sets up `Resources` for a later call to `run_now`.",5,N],[3,"Dispatcher","","The dispatcher struct, allowing systems to be executed in parallel.",N,N],[3,"Fetch","","Allows to fetch a resource in a system immutably.",N,N],[6,"ReadExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Read` or `Option<Read>` is therefore recommended.",N,N],[8,"SetupHandler","","A setup handler performing the fetching of `T`.",N,N],[10,"setup","","Sets up `Resources` for fetching `T`.",6,N],[3,"StaticAccessor","","The static accessor that is used for `SystemData`.",N,N],[3,"MetaIter","","An iterator for the `MetaTable`.",N,N],[4,"AccessorCow","","Either an `Accessor` of the system `T` or a reference to it.",N,N],[13,"Ref","","A reference to an accessor.",7,N],[13,"Owned","","An owned accessor.",7,N],[3,"Entry","","An entry to a resource of the `Resources` struct. This is similar to the Entry API found in the standard library.",N,N],[8,"Accessor","","A trait for accessing read/write multiple resources from a system. This can be used to create dynamic systems that don't specify what they fetch at compile-time.",N,N],[10,"try_new","","Tries to create a new instance of this type. This one returns `Some` in case there is a default, otherwise the system needs to override `System::accessor`.",8,[[],["option"]]],[10,"reads","","A list of [`ResourceId`]s the bundle needs read access to in order to build the target resource bundle.",8,[[["self"]],["vec",["resourceid"]]]],[10,"writes","","A list of [`ResourceId`]s the bundle needs write access to in order to build the target resource bundle.",8,[[["self"]],["vec",["resourceid"]]]],[3,"Read","","Allows to fetch a resource in a system immutably.",N,N],[3,"ParSeq","","A dispatcher intended to be used with `Par` and `Seq`  structures.",N,N],[3,"AsyncDispatcher","","Like, `Dispatcher` but works asynchronously.",N,N],[3,"DefaultProvider","","A `SetupHandler` that simply uses the default implementation.",N,N],[3,"Resources","","A resource container, which provides methods to access to the contained resources.",N,N],[4,"RunningTime","","",N,N],[13,"VeryShort","","",9,N],[13,"Short","","",9,N],[13,"Average","","",9,N],[13,"Long","","",9,N],[13,"VeryLong","","",9,N],[8,"DynamicSystemData","","A struct implementing system data indicates that it bundles some resources which are required for the execution.",N,N],[16,"Accessor","","The accessor of the `SystemData`, which specifies the read and write dependencies and does the fetching.",10,N],[10,"setup","","Sets up `Resources` for fetching this system data.",10,N],[10,"fetch","","Creates a new resource bundle by fetching the required resources from the [`Resources`] struct.",10,N],[8,"CastFrom","","Helper trait for the `MetaTable`. This trait is required to be implemented for a trait to be compatible with the meta table.",N,N],[10,"cast","","Casts an immutable `T` reference to a trait object.",11,[[["t"]],["self"]]],[10,"cast_mut","","Casts a mutable `T` reference to a trait object.",11,[[["t"]],["self"]]],[3,"PanicHandler","","A setup handler that simply does nothing and thus will cause a panic on fetching. The panic will provide the type name if the `nightly` feature of shred is enabled.",N,N],[8,"Event","amethyst::shrev","Marker trait for data to use with the EventChannel.",N,N],[3,"EventChannel","","Event channel",N,N],[3,"ReaderId","","The reader id is used by readers to tell the storage where the last read ended.",N,N],[3,"EventIterator","","Iterator over a slice of data in `RingBufferStorage`.",N,N],[0,"common","amethyst::ecs","Common functionality between crates using specs.",N,N],[6,"BoxedFuture","amethyst::ecs::common","A boxed, thread-safe future with `T` as item and `BoxedErr` as error type.",N,N],[3,"DrainErrors","","A draining iterator for `Errors`. This is the return value of `Errors::drain`.",N,N],[3,"Errors","","A resource you can use to store errors that occurred outside of the ECS but were catched inside, therefore should be handled by the user.",N,N],[3,"Merge","","A system which merges `Ready` futures into the persistent storage. Please note that your `World` has to contain a component storage for `F` and `F::Item`.",N,N],[0,"changeset","amethyst::ecs","Provides a changeset that can be collected from an iterator.",N,N],[3,"ChangeSet","amethyst::ecs::changeset","Change set that can be collected from an iterator, and joined on for easy application to components.",N,N],[0,"error","amethyst::ecs","Specs errors",N,N],[3,"BoxedErr","amethyst::ecs::error","A boxed error implementing `Debug`, `Display` and `Error`.",N,N],[12,"0","","",12,N],[4,"Error","","The Specs error type. This is an enum which is able to represent all error types of this library.",N,N],[13,"Custom","","A custom, boxed error.",13,N],[13,"WrongGeneration","","Wrong generation error.",13,N],[3,"WrongGeneration","","Wrong generation error.",N,N],[12,"action","","The action that failed because of the wrong generation.",14,N],[12,"actual_gen","","The actual generation of this id.",14,N],[12,"entity","","The entity that has been passed, containing the id and the invalid generation.",14,N],[4,"NoError","","An error type which cannot be instantiated. Used as a placeholder for associated error types if something cannot fail.",N,N],[0,"join","amethyst::ecs","Joining of components for iteration over entities with specific components.",N,N],[8,"BitAnd","amethyst::ecs::join","`BitAnd` is a helper method to & bitsets together resulting in a tree.",N,N],[16,"Value","","The combined bitsets.",15,N],[10,"and","","Combines `Self` into a single `BitSetLike` through `BitSetAnd`.",15,N],[8,"Join","","The purpose of the `Join` trait is to provide a way to access multiple storages at the same time with the merged bit set.",N,N],[16,"Type","","Type of joined components.",16,N],[16,"Value","","Type of joined storages.",16,N],[16,"Mask","","Type of joined bit mask.",16,N],[11,"join","","Create a joined iterator over the contents.",16,[[["self"]],["joiniter"]]],[11,"maybe","","Returns a `Join`-able structure that yields all indices, returning `None` for all missing elements and `Some(T)` for found elements.",16,[[["self"]],["maybejoin"]]],[10,"open","","Open this join by returning the mask and the storages.",16,N],[10,"get","","Get a joined component value by a given index.",16,N],[11,"is_unconstrained","","If this `Join` typically returns all indices in the mask, then iterating over only it or combined with other joins that are also dangerous will cause the `JoinIter`/`ParJoin` to go through all indices which is usually not what is wanted and will kill performance.",16,[[],["bool"]]],[8,"ParJoin","","The purpose of the `ParJoin` trait is to provide a way to access multiple storages in parallel at the same time with the merged bit set.",N,N],[11,"par_join","","Create a joined parallel iterator over the contents.",17,[[["self"]],["joinpariter"]]],[3,"MaybeJoin","","A `Join`-able structure that yields all indices, returning `None` for all missing elements and `Some(T)` for found elements.",N,N],[12,"0","","",18,N],[3,"JoinIter","","`JoinIter` is an `Iterator` over a group of `Storages`.",N,N],[3,"JoinParIter","","`JoinParIter` is a `ParallelIterator` over a group of `Storages`.",N,N],[0,"prelude","amethyst::ecs","Prelude module",N,N],[3,"EntityBuilder","amethyst::ecs::prelude","The entity builder, allowing to build an entity together with its components.",N,N],[12,"entity","","The (already created) entity for which components will be inserted.",19,N],[12,"world","","A reference to the `World` for component insertions.",19,N],[3,"InsertedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"RemovedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",N,N],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",20,N],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",20,N],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",20,N],[11,"try_for_each","","Executes a fallible `OP` on each item produced by the iterator, in parallel.",20,[[["self"],["op"]],["r"]]],[11,"try_for_each_with","","Executes a fallible `OP` on the given `init` value with each item produced by the iterator, in parallel.",20,[[["self"],["t"],["op"]],["r"]]],[11,"count","","Counts the number of items in this parallel iterator.",20,[[["self"]],["usize"]]],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",20,[[["self"],["f"]],["map"]]],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",20,[[["self"],["t"],["f"]],["mapwith"]]],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",20,[[["self"]],["cloned"]]],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",20,[[["self"],["op"]],["inspect"]]],[11,"update","","Mutates each item of this iterator before yielding it.",20,[[["self"],["f"]],["update"]]],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",20,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",20,[[["self"],["p"]],["filtermap"]]],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",20,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",20,[[["self"]],["flatten"]]],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",20,N],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",20,[[["self"],["op"]],["option"]]],[11,"try_reduce","","Reduces the items in the iterator into one item using a fallible `op`. The `identity` argument is used the same way as in [`reduce()`].",20,N],[11,"try_reduce_with","","Reduces the items in the iterator into one item using a fallible `op`.",20,[[["self"],["op"]],["option"]]],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",20,[[["self"],["id"],["f"]],["fold"]]],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",20,[[["self"],["t"],["f"]],["foldwith"]]],[11,"try_fold","","Perform a fallible parallel fold.",20,[[["self"],["id"],["f"]],["tryfold"]]],[11,"try_fold_with","","Perform a fallible parallel fold with a cloneable `init` value.",20,[[["self"],["t"],["f"]],["tryfoldwith"]]],[11,"sum","","Sums up the items in the iterator.",20,[[["self"]],["s"]]],[11,"product","","Multiplies all the items in the iterator.",20,[[["self"]],["p"]]],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",20,[[["self"]],["option"]]],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",20,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",20,[[["self"],["f"]],["option"]]],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",20,[[["self"]],["option"]]],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",20,[[["self"],["f"]],["option"]]],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",20,[[["self"],["f"]],["option"]]],[11,"chain","","Takes two iterators and creates a new iterator over both.",20,[[["self"],["c"]],["chain"]]],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",20,[[["self"],["p"]],["option"]]],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",20,[[["self"],["p"]],["option"]]],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",20,[[["self"],["p"]],["option"]]],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",20,[[["self"],["p"]],["bool"]]],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",20,[[["self"],["p"]],["bool"]]],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",20,[[["self"]],["whilesome"]]],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",20,[[["self"]],["c"]]],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",20,N],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",20,N],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",20,N],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",20,N],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",20,N],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",20,[[["self"]],["option",["usize"]]]],[6,"WriteStorage","","A storage with read and write access.",N,N],[8,"System","","A `System`, executed with a set of required [`Resource`]s.",N,N],[16,"SystemData","","The resource bundle required to execute this system.",2,N],[10,"run","","Executes the system with the required system data.",2,N],[11,"running_time","","Returns a hint how long the system needs for running. This is used to optimize the way they're executed (might allow more parallelization).",2,[[["self"]],["runningtime"]]],[11,"accessor","","Return the accessor from the [`SystemData`].",2,[[["self"]],["accessorcow"]]],[11,"setup","","Sets up the `Resources` using `Self::SystemData::setup`.",2,N],[3,"World","","The `World` struct contains the component storages and other resources.",N,N],[12,"res","","The resources used for this world.",21,N],[3,"Entity","","`Entity` type, as seen by the user.",N,N],[3,"ReaderId","","The reader id is used by readers to tell the storage where the last read ended.",N,N],[3,"HashMapStorage","","HashMap-based storage. Best suited for rare components.",N,N],[3,"StaticAccessor","","The static accessor that is used for `SystemData`.",N,N],[3,"Read","","Allows to fetch a resource in a system immutably.",N,N],[6,"WriteExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Write` or `Option<Write>` is therefore recommended.",N,N],[6,"Entities","","A wrapper for a read `Entities` resource. Note that this is just `Read<Entities>`, so you can easily use it in your system:",N,N],[6,"ReadStorage","","A storage with read access.",N,N],[3,"AsyncDispatcher","","Like, `Dispatcher` but works asynchronously.",N,N],[3,"VecStorage","","Vector storage. Uses a simple `Vec`. Supposed to have maximum performance for the components mostly present in entities.",N,N],[3,"NullStorage","","A null storage type, used for cases where the component doesn't contain any data and instead works as a simple flag.",N,N],[8,"Tracked","","`UnprotectedStorage`s that track modifications, insertions, and removals of components.",N,N],[10,"channels","","Event channels tracking modified/inserted/removed components.",22,[[["self"]],["trackchannels"]]],[10,"channels_mut","","Mutable event channels tracking modified/inserted/removed components.",22,[[["self"]],["trackchannels"]]],[8,"RunNow","","Trait for fetching data and running systems. Automatically implemented for systems.",N,N],[10,"run_now","","Runs the system now.",5,N],[10,"setup","","Sets up `Resources` for a later call to `run_now`.",5,N],[3,"Write","","Allows to fetch a resource in a system mutably.",N,N],[8,"Component","","Abstract component type. Doesn't have to be Copy or even Clone.",N,N],[16,"Storage","","Associated storage type for this component.",23,N],[3,"ModifiedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"Dispatcher","","The dispatcher struct, allowing systems to be executed in parallel.",N,N],[3,"FlaggedStorage","","Wrapper storage that tracks modifications, insertions, and removals of components  through an `EventChannel`.",N,N],[3,"Storage","","A wrapper around the masked storage and the generations vector. Can be used for safe lookup of components, insertions and removes. This is what `World::read/write` fetches for the user.",N,N],[3,"Resources","","A resource container, which provides methods to access to the contained resources.",N,N],[3,"DispatcherBuilder","","Builder for the [`Dispatcher`].",N,N],[3,"LazyUpdate","","Lazy updates can be used for world updates that need to borrow a lot of resources and as such should better be done at the end. They work lazily in the sense that they are dispatched when calling `world.maintain()`.",N,N],[8,"SystemData","","A static system data that can specify its dependencies at statically (at compile-time). Most system data is a `SystemData`, the `DynamicSystemData` type is only needed for very special setups.",N,N],[10,"setup","","Sets up the system data for fetching it from the `Resources`.",4,N],[10,"fetch","","Fetches the system data from `Resources`. Note that this is only specified for one concrete lifetime `'a`, you need to implement the `SystemData` trait for every possible lifetime.",4,[[["resources"]],["self"]]],[10,"reads","","Returns all read dependencies as fetched from `Self::fetch`.",4,[[],["vec",["resourceid"]]]],[10,"writes","","Returns all write dependencies as fetched from `Self::fetch`.",4,[[],["vec",["resourceid"]]]],[8,"Accessor","","A trait for accessing read/write multiple resources from a system. This can be used to create dynamic systems that don't specify what they fetch at compile-time.",N,N],[10,"try_new","","Tries to create a new instance of this type. This one returns `Some` in case there is a default, otherwise the system needs to override `System::accessor`.",8,[[],["option"]]],[10,"reads","","A list of [`ResourceId`]s the bundle needs read access to in order to build the target resource bundle.",8,[[["self"]],["vec",["resourceid"]]]],[10,"writes","","A list of [`ResourceId`]s the bundle needs write access to in order to build the target resource bundle.",8,[[["self"]],["vec",["resourceid"]]]],[3,"DenseVecStorage","","Dense vector storage. Has a redirection 2-way table between entities and components, allowing to leave no gaps within the data.",N,N],[3,"BitSet","","A `BitSet` is a simple set designed to track which indices are placed into it.",N,N],[8,"Builder","","A common trait for `EntityBuilder` and `LazyBuilder`, allowing either to be used. Entity is definitely alive, but the components may or may not exist before a call to `World::maintain`.",N,N],[10,"with","","Appends a component and associates it with the entity.",24,[[["self"],["c"]],["self"]]],[10,"build","","Finishes the building and returns the entity.",24,[[["self"]],["entity"]]],[6,"ReadExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Read` or `Option<Read>` is therefore recommended.",N,N],[0,"storage","amethyst::ecs","Component storage types, implementations for component joins, etc.",N,N],[3,"AntiStorage","amethyst::ecs::storage","An inverted storage type, only useful to iterate entities that do not have a particular component type.",N,N],[8,"AnyStorage","","A dynamic storage.",N,N],[10,"drop","","Drop components of given entities.",25,N],[8,"DistinctStorage","","This is a marker trait which requires you to uphold the following guarantee:",N,N],[6,"InsertResult","","The status of an `insert()`ion into a storage. If the insertion was successful then the Ok value will contain the component that was replaced (if any).",N,N],[3,"MaskedStorage","","The `UnprotectedStorage` together with the `BitSet` that knows about which elements are stored, and which are not.",N,N],[3,"OccupiedEntry","","An entry to a storage which has a component associated to the entity.",N,N],[3,"VacantEntry","","An entry to a storage which does not have a component associated to the entity.",N,N],[4,"StorageEntry","","Entry to a storage for convenient filling of components or removal based on whether the entity has a component.",N,N],[13,"Occupied","","Entry variant that is returned if the entity does has a component.",26,N],[13,"Vacant","","Entry variant that is returned if the entity does not have a component.",26,N],[8,"TryDefault","","Tries to create a default value, returns an `Err` with the name of the storage and/or component if there's no default.",N,N],[10,"try_default","","Tries to create the default.",27,[[],["result",["string"]]]],[11,"unwrap_default","","Calls `try_default` and panics on an error case.",27,[[],["self"]]],[8,"UnprotectedStorage","","Used by the framework to quickly join components.",N,N],[10,"clean","","Clean the storage given a bitset with bits set for valid indices. Allows us to safely drop the storage.",28,N],[10,"get","","Tries reading the data associated with an `Index`. This is unsafe because the external set used to protect this storage is absent.",28,[[["self"],["u32"]],["t"]]],[10,"get_mut","","Tries mutating the data associated with an `Index`. This is unsafe because the external set used to protect this storage is absent.",28,[[["self"],["u32"]],["t"]]],[10,"insert","","Inserts new data for a given `Index`.",28,N],[10,"remove","","Removes the data associated with an `Index`.",28,[[["self"],["u32"]],["t"]]],[11,"drop","","Drops the data associated with an `Index`.",28,N],[8,"GenericWriteStorage","","Provides generic write access to `WriteStorage`, both as a value and a mutable reference.",N,N],[16,"Component","","The component type of the storage",29,N],[10,"get_mut","","Get mutable access to an `Entity`s component",29,[[["self"],["entity"]],["option"]]],[10,"insert","","Insert a component for an `Entity`",29,N],[10,"remove","","Remove the component for an `Entity`",29,N],[10,"_private","","Private function to seal the trait",29,[[],["seal"]]],[3,"RestrictedStorage","","Similar to a `MaskedStorage` and a `Storage` combined, but restricts usage to only getting and modifying the components. That means nothing that would modify the inner bitset so the iteration cannot be invalidated. For example, no insertion or removal is allowed.",N,N],[4,"MutableParallelRestriction","","Specifies that the `RestrictedStorage` can run in parallel mutably.",N,N],[3,"BTreeStorage","","BTreeMap-based storage.",N,N],[8,"GenericReadStorage","","Provides generic read access to both `ReadStorage` and `WriteStorage`",N,N],[16,"Component","","The component type of the storage",30,N],[10,"get","","Get immutable access to an `Entity`s component",30,[[["self"],["entity"]],["option"]]],[10,"_private","","Private function to seal the trait",30,[[],["seal"]]],[3,"TrackChannels","","All three types of tracked modifications to components.",N,N],[12,"modify","","Modifications event channel.",31,N],[12,"insert","","Insertions event channel.",31,N],[12,"remove","","Removed event channel.",31,N],[4,"ImmutableParallelRestriction","","Specifies that the `RestrictedStorage` can run in parallel immutably.",N,N],[4,"SequentialRestriction","","Specifies that the `RestrictedStorage` cannot run in parallel.",N,N],[0,"world","amethyst::ecs","Entities, resources, components, and general world management.",N,N],[3,"CreateIter","amethyst::ecs::world","An iterator for entity creation. Please note that you have to consume it because iterators are lazy.",N,N],[8,"Bundle","","Trait used to bundle up resources/components for easy registration with `World`.",N,N],[10,"add_to_world","","Add resources/components to `world`.",32,N],[6,"Index","","An index is basically the id of an `Entity`.",N,N],[3,"LazyBuilder","","Like `EntityBuilder`, but inserts the component lazily, meaning on `maintain`. If you need those components to exist immediately, you have to insert them into the storages yourself.",N,N],[12,"entity","","The entity that we're inserting components for.",33,N],[12,"lazy","","The lazy update reference.",33,N],[3,"Generation","","Index generation. When a new entity is placed at an old index, it bumps the `Generation` by 1. This allows to avoid using components from the entities that were deleted.",N,N],[3,"EntitiesRes","","The entities of this ECS. This is a resource, stored in the `World`. If you just want to access it in your system, you can also use the `Entities` type def.",N,N],[3,"EntityResBuilder","","An entity builder from `EntitiesRes`.  Allows building an entity with its components if you have mutable access to the component storages.",N,N],[12,"entity","","The entity being built",34,N],[12,"entities","","The active borrow to `EntitiesRes`, used to delete the entity if the builder is dropped without called `build()`.",34,N],[3,"CreateIterAtomic","","An iterator for entity creation. Please note that you have to consume it because iterators are lazy.",N,N],[0,"cell","amethyst::ecs::shred","Helper module for some internals, most users don't need to interact with it.",N,N],[3,"InvalidBorrow","amethyst::ecs::shred::cell","Marker struct for an invalid borrow error",N,N],[3,"Ref","","An immutable reference to data in a `TrustCell`.",N,N],[3,"RefMut","","A mutable reference to data in a `TrustCell`.",N,N],[3,"TrustCell","","A custom cell container that is a `RefCell` with thread-safety.",N,N],[14,"seq","amethyst::ecs::shred","The `seq!` macro may be used to easily create a structure which runs things sequentially.",N,N],[14,"par","","The `par!` macro may be used to easily create a structure which runs things in parallel.",N,N],[3,"ResourceId","","The id of a [`Resource`], which is a tuple struct with a type id and an additional resource id (represented with a `usize`).",N,N],[12,"0","","",1,N],[3,"Seq","","Runs two tasks sequentially. These two tasks are called `head` and `tail` in the following documentation.",N,N],[3,"Par","","Runs two tasks in parallel. These two tasks are called `head` and `tail` in the following documentation.",N,N],[3,"FetchMut","","Allows to fetch a resource in a system mutably.",N,N],[8,"Resource","","A resource defines a set of data which can only be accessed according to Rust's typical borrowing model (one writer xor multiple readers).",N,N],[8,"RunWithPool","","Similar to `RunNow` except additionally taking in a rayon::ThreadPool for parallelism.",N,N],[10,"setup","","Sets up `Resources` for a later call to `run`.",3,N],[10,"run","","Runs the system/group of systems. Possibly in parallel depending on how the structure is set up.",3,N],[10,"reads","","Accumulates the necessary read/shared resources from the systems in this group.",3,N],[10,"writes","","Accumulates the necessary write/exclusive resources from the systems in this group.",3,N],[3,"MetaTable","","The `MetaTable` which allows to store object-safe trait implementations for resources.",N,N],[3,"MetaIterMut","","A mutable iterator for the `MetaTable`.",N,N],[3,"Fetch","","Allows to fetch a resource in a system immutably.",N,N],[8,"SetupHandler","","A setup handler performing the fetching of `T`.",N,N],[10,"setup","","Sets up `Resources` for fetching `T`.",6,N],[3,"MetaIter","","An iterator for the `MetaTable`.",N,N],[4,"AccessorCow","","Either an `Accessor` of the system `T` or a reference to it.",N,N],[13,"Ref","","A reference to an accessor.",7,N],[13,"Owned","","An owned accessor.",7,N],[3,"Entry","","An entry to a resource of the `Resources` struct. This is similar to the Entry API found in the standard library.",N,N],[3,"ParSeq","","A dispatcher intended to be used with `Par` and `Seq`  structures.",N,N],[3,"DefaultProvider","","A `SetupHandler` that simply uses the default implementation.",N,N],[4,"RunningTime","","",N,N],[13,"VeryShort","","",9,N],[13,"Short","","",9,N],[13,"Average","","",9,N],[13,"Long","","",9,N],[13,"VeryLong","","",9,N],[8,"DynamicSystemData","","A struct implementing system data indicates that it bundles some resources which are required for the execution.",N,N],[16,"Accessor","","The accessor of the `SystemData`, which specifies the read and write dependencies and does the fetching.",10,N],[10,"setup","","Sets up `Resources` for fetching this system data.",10,N],[10,"fetch","","Creates a new resource bundle by fetching the required resources from the [`Resources`] struct.",10,N],[8,"CastFrom","","Helper trait for the `MetaTable`. This trait is required to be implemented for a trait to be compatible with the meta table.",N,N],[10,"cast","","Casts an immutable `T` reference to a trait object.",11,[[["t"]],["self"]]],[10,"cast_mut","","Casts a mutable `T` reference to a trait object.",11,[[["t"]],["self"]]],[3,"PanicHandler","","A setup handler that simply does nothing and thus will cause a panic on fetching. The panic will provide the type name if the `nightly` feature of shred is enabled.",N,N],[3,"Application","amethyst","An Application is the root object of the game engine. It binds the OS event loop, state machines, timers and other core components in a central place.",N,N],[3,"ApplicationBuilder","","`ApplicationBuilder` is an interface that allows for creation of an `Application` using a custom set of configuration. This is the normal way an `Application` object is created.",N,N],[12,"world","","Used by bundles to access the world directly",35,N],[3,"GameData","","Default game data",N,N],[3,"GameDataBuilder","","Builder for default game data",N,N],[3,"LoggerConfig","","Logger configuration object.",N,N],[12,"use_colors","","Whether to use color output when logging to the terminal or not.",36,N],[12,"level_filter","","Sets the overarching level filter for the logger.",36,N],[3,"StateData","","State data encapsulates the data sent to all state functions from the application main loop.",N,N],[12,"world","","Main `World`",37,N],[12,"data","","User defined game data",37,N],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",N,N],[4,"Error","","Common error type.",N,N],[13,"Application","","Application error.",38,N],[13,"StateMachine","","StateMachine error",38,N],[13,"Config","","Asset management error. Configuration error.",38,N],[13,"Core","","Core error.",38,N],[4,"Trans","","Types of state transitions. T is the type of shared data between states. E is the type of custom events handled by StateEvent.",N,N],[13,"None","","Continue as normal.",39,N],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",39,N],[13,"Push","","Pause the active state and push a new state onto the stack.",39,N],[13,"Switch","","Remove the current state on the stack and insert a different one.",39,N],[13,"Quit","","Stop and remove all states and shut down the engine.",39,N],[4,"StateEvent","","The enum holding the different types of event that can be received in a `State` in the handle_event method.",N,N],[13,"Window","","Events sent by the winit window.",40,N],[13,"Ui","","Events sent by the ui system.",40,N],[13,"Custom","","Custom user events. To receive events from there, you need to write `E` instances into EventChannel",40,N],[5,"start_logger","","Starts a basic logger outputting to stdout with color on supported platforms.",N,[[["loggerconfig"]]]],[0,"prelude","","Contains common types that can be glob-imported (`*`) for convenience.",N,N],[8,"Config","amethyst::prelude","Trait implemented by the `config!` macro.",N,N],[10,"load","","Loads a configuration structure from a file. Defaults if the file fails in any way.",41,[[["p"]],["self"]]],[10,"load_no_fallback","","Loads a configuration structure from a file.",41,[[["p"]],["result",["configerror"]]]],[10,"write","","Writes a configuration structure to a file.",41,[[["self"],["p"]],["result",["configerror"]]]],[8,"Builder","","A common trait for `EntityBuilder` and `LazyBuilder`, allowing either to be used. Entity is definitely alive, but the components may or may not exist before a call to `World::maintain`.",N,N],[10,"with","","Appends a component and associates it with the entity.",24,[[["self"],["c"]],["self"]]],[10,"build","","Finishes the building and returns the entity.",24,[[["self"]],["entity"]]],[3,"World","","The `World` struct contains the component storages and other resources.",N,N],[12,"res","","The resources used for this world.",21,N],[8,"WithNamed","","An easy way to name an `Entity` and give it a `Named` `Component`.",N,N],[10,"named","","Adds a name to the entity being built.",42,[[["self"],["s"]],["self"]]],[3,"Application","","An Application is the root object of the game engine. It binds the OS event loop, state machines, timers and other core components in a central place.",N,N],[3,"ApplicationBuilder","","`ApplicationBuilder` is an interface that allows for creation of an `Application` using a custom set of configuration. This is the normal way an `Application` object is created.",N,N],[12,"world","","Used by bundles to access the world directly",35,N],[3,"GameData","","Default game data",N,N],[3,"GameDataBuilder","","Builder for default game data",N,N],[3,"StateData","","State data encapsulates the data sent to all state functions from the application main loop.",N,N],[12,"world","","Main `World`",37,N],[12,"data","","User defined game data",37,N],[4,"Trans","","Types of state transitions. T is the type of shared data between states. E is the type of custom events handled by StateEvent.",N,N],[13,"None","","Continue as normal.",39,N],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",39,N],[13,"Push","","Pause the active state and push a new state onto the stack.",39,N],[13,"Switch","","Remove the current state on the stack and insert a different one.",39,N],[13,"Quit","","Stop and remove all states and shut down the engine.",39,N],[4,"StateEvent","","The enum holding the different types of event that can be received in a `State` in the handle_event method.",N,N],[13,"Window","","Events sent by the winit window.",40,N],[13,"Ui","","Events sent by the ui system.",40,N],[13,"Custom","","Custom user events. To receive events from there, you need to write `E` instances into EventChannel",40,N],[6,"EmptyTrans","","An empty `Trans`. Made to be used with `EmptyState`.",N,N],[6,"SimpleTrans","","A simple default `Trans`. Made to be used with `SimpleState`. By default it contains a `GameData` as its `StateData` and doesn't have a custom event type.",N,N],[8,"DataInit","","Initialise trait for game data",N,N],[10,"build","","Build game data",43,[[["self"],["world"]],["t"]]],[8,"EmptyState","","An empty `State` trait. It contains no `StateData` or custom `StateEvent`.",N,N],[11,"on_start","","Executed when the game state begins.",44,[[["self"],["statedata"]]]],[11,"on_stop","","Executed when the game state exits.",44,[[["self"],["statedata"]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",44,[[["self"],["statedata"]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",44,[[["self"],["statedata"]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",44,[[["self"],["statedata"],["stateevent"]],["emptytrans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",44,[[["self"],["statedata"]],["emptytrans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",44,[[["self"],["statedata"]],["emptytrans"]]],[8,"SimpleState","","A simple `State` trait. It contains `GameData` as its `StateData` and no custom `StateEvent`.",N,N],[11,"on_start","","Executed when the game state begins.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_stop","","Executed when the game state exits.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",45,[[["self"],["statedata",["gamedata"]],["stateevent"]],["simpletrans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",45,[[["self"],["statedata",["gamedata"]]],["simpletrans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",45,[[["self"],["statedata"]],["simpletrans"]]],[8,"State","","A trait which defines game states that can be used by the state machine.",N,N],[11,"on_start","","Executed when the game state begins.",46,[[["self"],["statedata"]]]],[11,"on_stop","","Executed when the game state exits.",46,[[["self"],["statedata"]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",46,[[["self"],["statedata"]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",46,[[["self"],["statedata"]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",46,[[["self"],["statedata"],["stateevent"]],["trans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",46,[[["self"],["statedata"]],["trans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",46,[[["self"],["statedata"]],["trans"]]],[11,"fmt","amethyst","",47,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new Application with the given initial game state. This will create and allocate all the needed resources for the event loop of the game engine. It is a shortcut for convenience if you need more control over how the engine is configured you should be using build instead.",47,[[["p"],["s"],["i"]],["result"]]],[11,"build","","Creates a new ApplicationBuilder with the given initial game state.",47,[[["p"],["s"]],["result",["applicationbuilder"]]]],[11,"run","","Run the gameloop until the game state indicates that the game is no longer running. This is done via the `State` returning `Trans::Quit` or `Trans::Pop` on the last state in from the stack. See full documentation on this in State documentation.",47,[[["self"]]]],[11,"new","","Creates a new ApplicationBuilder instance that wraps the initial_state. This is the more verbose way of initializing your application if you require specific configuration details to be changed away from the default.",35,[[["p"],["s"]],["result"]]],[11,"register","","Registers a component into the entity-component-system. This method takes no options other than the component type which is defined using a 'turbofish'. See the example for what this looks like.",35,[[["self"]],["self"]]],[11,"with_resource","","Adds the supplied ECS resource which can be accessed from game systems.",35,[[["self"],["r"]],["self"]]],[11,"with_source","","Register an asset store with the loader logic of the Application.",35,[[["self"],["i"],["o"]],["self"]]],[11,"with_frame_limit","","Sets the maximum frames per second of this game.",35,[[["self"],["frameratelimitstrategy"],["u32"]],["self"]]],[11,"with_frame_limit_config","","Sets the maximum frames per second of this game, based on the given config.",35,[[["self"],["frameratelimitconfig"]],["self"]]],[11,"with_fixed_step_length","","Sets the duration between fixed updates, defaults to one sixtieth of a second.",35,[[["self"],["duration"]],["self"]]],[11,"ignore_window_close","","Tells the resulting application window to ignore close events if ignore is true. This will make your game window unresponsive to operating system close commands. Use with caution.",35,[[["self"],["bool"]],["self"]]],[11,"build","","Build an `Application` object using the `ApplicationBuilder` as configured.",35,[[["self"],["i"]],["result",["application"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"description","","",38,[[["self"]],["str"]]],[11,"cause","","",38,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["fmtresult"]]],[11,"from","","",38,[[["error"]],["self"]]],[11,"from","","",38,[[["error"]],["self"]]],[11,"from","","",38,[[["configerror"]],["self"]]],[11,"new","","Create new game data",48,[[["dispatcher"]],["self"]]],[11,"update","","Update game data",48,[[["self"],["world"]]]],[11,"default","","",49,[[],["self"]]],[11,"new","","Create new builder",49,[[],["self"]]],[11,"with_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",49,[[["self"]],["self"]]],[11,"with","","Adds a given system.",49,N],[11,"with_thread_local","","Add a given thread-local system.",49,[[["self"],["s"]],["self"]]],[11,"with_bundle","","Add a given ECS bundle to the game loop.",49,[[["self"],["b"]],["result"]]],[11,"with_basic_renderer","","Create a basic renderer with a single given `Pass`, and optional support for the `DrawUi` pass.",49,[[["self"],["a"],["p"],["bool"]],["result"]]],[11,"build","","",49,[[["self"],["world"]],["gamedata"]]],[11,"clone","","",36,[[["self"]],["loggerconfig"]]],[11,"default","","",36,[[],["loggerconfig"]]],[11,"on_start","amethyst::prelude","Executed when the game state begins.",46,[[["self"],["statedata"]]]],[11,"on_stop","","Executed when the game state exits.",46,[[["self"],["statedata"]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",46,[[["self"],["statedata"]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",46,[[["self"],["statedata"]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",46,[[["self"],["statedata"],["stateevent"]],["trans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",46,[[["self"],["statedata"]],["trans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",46,[[["self"],["statedata"]],["trans"]]],[11,"on_start","","Executed when the game state begins.",44,[[["self"],["statedata"]]]],[11,"on_stop","","Executed when the game state exits.",44,[[["self"],["statedata"]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",44,[[["self"],["statedata"]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",44,[[["self"],["statedata"]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",44,[[["self"],["statedata"],["stateevent"]],["emptytrans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",44,[[["self"],["statedata"]],["emptytrans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",44,[[["self"],["statedata"]],["emptytrans"]]],[11,"on_start","","Executed when the game state begins.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_stop","","Executed when the game state exits.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",45,[[["self"],["statedata",["gamedata"]],["stateevent"]],["simpletrans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",45,[[["self"],["statedata",["gamedata"]]],["simpletrans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",45,[[["self"],["statedata"]],["simpletrans"]]],[11,"new","amethyst","Create a new state data",37,[[["world"],["t"]],["self"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new state machine with the given initial state.",50,[[["s"]],["statemachine"]]],[11,"is_running","","Checks whether the state machine is running.",50,[[["self"]],["bool"]]],[11,"start","","Initializes the state machine.",50,[[["self"],["statedata"]],["result",["stateerror"]]]],[11,"handle_event","","Passes a single event to the active state to handle.",50,[[["self"],["statedata"],["stateevent"]]]],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",50,[[["self"],["statedata"]]]],[11,"update","","Updates the currently active state immediately.",50,[[["self"],["statedata"]]]],[6,"Result","","Engine result type.",N,N],[6,"EmptyTrans","","An empty `Trans`. Made to be used with `EmptyState`.",N,N],[6,"SimpleTrans","","A simple default `Trans`. Made to be used with `SimpleState`. By default it contains a `GameData` as its `StateData` and doesn't have a custom event type.",N,N],[8,"DataInit","","Initialise trait for game data",N,N],[10,"build","","Build game data",43,[[["self"],["world"]],["t"]]],[8,"EmptyState","","An empty `State` trait. It contains no `StateData` or custom `StateEvent`.",N,N],[11,"on_start","amethyst::prelude","Executed when the game state begins.",44,[[["self"],["statedata"]]]],[11,"on_stop","","Executed when the game state exits.",44,[[["self"],["statedata"]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",44,[[["self"],["statedata"]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",44,[[["self"],["statedata"]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",44,[[["self"],["statedata"],["stateevent"]],["emptytrans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",44,[[["self"],["statedata"]],["emptytrans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",44,[[["self"],["statedata"]],["emptytrans"]]],[8,"SimpleState","amethyst","A simple `State` trait. It contains `GameData` as its `StateData` and no custom `StateEvent`.",N,N],[11,"on_start","amethyst::prelude","Executed when the game state begins.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_stop","","Executed when the game state exits.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",45,[[["self"],["statedata",["gamedata"]]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",45,[[["self"],["statedata",["gamedata"]],["stateevent"]],["simpletrans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",45,[[["self"],["statedata",["gamedata"]]],["simpletrans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",45,[[["self"],["statedata"]],["simpletrans"]]],[8,"State","amethyst","A trait which defines game states that can be used by the state machine.",N,N],[11,"on_start","amethyst::prelude","Executed when the game state begins.",46,[[["self"],["statedata"]]]],[11,"on_stop","","Executed when the game state exits.",46,[[["self"],["statedata"]]]],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",46,[[["self"],["statedata"]]]],[11,"on_resume","","Executed when the application returns to this game state once again.",46,[[["self"],["statedata"]]]],[11,"handle_event","","Executed on every frame before updating, for use in reacting to events.",46,[[["self"],["statedata"],["stateevent"]],["trans"]]],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",46,[[["self"],["statedata"]],["trans"]]],[11,"update","","Executed on every frame immediately, as fast as the engine will allow (taking into account the frame rate limit).",46,[[["self"],["statedata"]],["trans"]]],[11,"max","amethyst","Returns the most verbose logging level filter.",0,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",0,[[["self"]],["option",["level"]]]],[11,"named","amethyst::ecs::world","",33,[[["self"],["s"]],["lazybuilder"]]],[11,"named","amethyst::ecs::prelude","",19,[[["self"],["s"]],["entitybuilder"]]],[11,"fmt","amethyst::ecs::shred::cell","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::prelude","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::shred::cell","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::shred","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::shred::cell","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","amethyst::ecs::shred","",9,[[["self"]],["runningtime"]]],[11,"clone","","",1,[[["self"]],["resourceid"]]],[11,"clone","amethyst::ecs::shred::cell","",54,[[["self"]],["invalidborrow"]]],[11,"partial_cmp","amethyst::ecs::shred","",1,[[["self"],["resourceid"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["resourceid"]],["bool"]]],[11,"le","","",1,[[["self"],["resourceid"]],["bool"]]],[11,"gt","","",1,[[["self"],["resourceid"]],["bool"]]],[11,"ge","","",1,[[["self"],["resourceid"]],["bool"]]],[11,"partial_cmp","amethyst::ecs::shred::cell","",54,[[["self"],["invalidborrow"]],["option",["ordering"]]]],[11,"description","","",54,[[["self"]],["str"]]],[11,"drop","","",53,N],[11,"drop","","",55,N],[11,"try_new","amethyst::ecs::prelude","",56,[[],["option",["staticaccessor"]]]],[11,"reads","","",56,[[["self"]],["vec",["resourceid"]]]],[11,"writes","","",56,[[["self"]],["vec",["resourceid"]]]],[11,"cmp","amethyst::ecs::shred","",1,[[["self"],["resourceid"]],["ordering"]]],[11,"cmp","amethyst::ecs::shred::cell","",54,[[["self"],["invalidborrow"]],["ordering"]]],[11,"default","amethyst::ecs::prelude","",56,[[],["staticaccessor"]]],[11,"default","amethyst::ecs::shred::cell","",51,[[],["trustcell"]]],[11,"default","amethyst::ecs::prelude","",52,[[],["dispatcherbuilder"]]],[11,"default","","",57,[[],["resources"]]],[11,"default","amethyst::ecs::shred","",58,[[],["metatable"]]],[11,"setup","amethyst::ecs::prelude","",59,N],[11,"fetch","","",59,[[["resources"]],["write"]]],[11,"reads","","",59,[[],["vec",["resourceid"]]]],[11,"writes","","",59,[[],["vec",["resourceid"]]]],[11,"setup","","",60,N],[11,"fetch","","",60,[[["resources"]],["read"]]],[11,"reads","","",60,[[],["vec",["resourceid"]]]],[11,"writes","","",60,[[],["vec",["resourceid"]]]],[11,"deref_mut","amethyst::ecs::shred::cell","",55,[[["self"]],["t"]]],[11,"deref_mut","amethyst::ecs::prelude","",59,[[["self"]],["t"]]],[11,"deref_mut","amethyst::ecs::shred","",61,[[["self"]],["t"]]],[11,"setup","","",62,N],[11,"setup","","",63,N],[11,"hash","amethyst::ecs::shred::cell","",54,N],[11,"hash","amethyst::ecs::shred","",1,N],[11,"deref","amethyst::ecs::shred::cell","",55,[[["self"]],["t"]]],[11,"deref","amethyst::ecs::shred","",61,[[["self"]],["t"]]],[11,"deref","","",64,[[["self"]],["t"]]],[11,"deref","amethyst::ecs::shred::cell","",53,[[["self"]],["t"]]],[11,"deref","amethyst::ecs::shred","",7,N],[11,"deref","amethyst::ecs::prelude","",59,[[["self"]],["t"]]],[11,"deref","","",60,[[["self"]],["t"]]],[11,"run_now","","",65,N],[11,"setup","","",65,N],[11,"run_now","amethyst::ecs::shred","",66,N],[11,"setup","","",66,N],[11,"from","amethyst::ecs::prelude","",59,[[["fetchmut"]],["write"]]],[11,"from","","",60,[[["fetch"]],["read"]]],[11,"fmt","amethyst::ecs::shred::cell","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"setup","amethyst::ecs::shred","",67,N],[11,"run","","",67,N],[11,"reads","","",67,N],[11,"writes","","",67,N],[11,"setup","","",68,N],[11,"run","","",68,N],[11,"reads","","",68,N],[11,"writes","","",68,N],[11,"eq","","",1,[[["self"],["resourceid"]],["bool"]]],[11,"ne","","",1,[[["self"],["resourceid"]],["bool"]]],[11,"eq","amethyst::ecs::shred::cell","",54,[[["self"],["invalidborrow"]],["bool"]]],[11,"next","amethyst::ecs::shred","",69,[[["self"]],["option"]]],[11,"next","","",70,[[["self"]],["option"]]],[11,"fmt","amethyst::ecs::prelude","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::shrev","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","amethyst::ecs::prelude","",71,N],[11,"len","amethyst::shrev","",72,[[["self"]],["usize"]]],[11,"default","","",73,[[],["eventchannel"]]],[11,"next","","",72,[[["self"]],["option"]]],[11,"size_hint","","",72,N],[11,"next","amethyst::ecs::world","",74,[[["self"]],["option",["entity"]]]],[11,"next","amethyst::ecs::join","",75,[[["self"]],["option"]]],[11,"next","amethyst::ecs::world","",76,[[["self"]],["option",["entity"]]]],[11,"next","amethyst::ecs::common","",77,[[["self"]],["option"]]],[11,"fmt","amethyst::ecs::error","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::world","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::prelude","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::common","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::error","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::prelude","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::world","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::prelude","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::common","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","amethyst::ecs::error","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","amethyst::ecs::prelude","",83,[[["self"]],["modifiedflag"]]],[11,"clone","","",80,[[["self"]],["entity"]]],[11,"clone","","",85,[[["self"]],["insertedflag"]]],[11,"clone","","",79,[[["self"]],["removedflag"]]],[11,"clone","amethyst::ecs::world","",78,[[["self"]],["generation"]]],[11,"drive_unindexed","amethyst::ecs::join","",86,N],[11,"drop","amethyst::ecs::storage","",87,N],[11,"description","amethyst::ecs::error","",13,[[["self"]],["str"]]],[11,"cause","","",13,[[["self"]],["option",["error"]]]],[11,"description","","",14,[[["self"]],["str"]]],[11,"description","","",82,[[["self"]],["str"]]],[11,"description","","",12,[[["self"]],["str"]]],[11,"with","amethyst::ecs::prelude","",19,[[["self"],["t"]],["entitybuilder"]]],[11,"build","","Finishes the building and returns the entity. As opposed to `LazyBuilder`, the components are available immediately.",19,[[["self"]],["entity"]]],[11,"with","amethyst::ecs::world","Inserts a component using [`LazyUpdate`].",33,[[["self"],["c"]],["lazybuilder"]]],[11,"build","","Finishes the building and returns the built entity. Please note that no component is associated to this entity until you call [`World::maintain`].",33,[[["self"]],["entity"]]],[11,"cmp","amethyst::ecs::prelude","",80,[[["self"],["entity"]],["ordering"]]],[11,"cmp","amethyst::ecs::world","",78,[[["self"],["generation"]],["ordering"]]],[11,"default","amethyst::ecs::storage","",88,[[],["btreestorage"]]],[11,"default","amethyst::ecs::prelude","",89,[[],["nullstorage"]]],[11,"default","amethyst::ecs::storage","",31,[[],["trackchannels"]]],[11,"default","","",87,[[],["maskedstorage"]]],[11,"default","amethyst::ecs::prelude","",90,[[],["hashmapstorage"]]],[11,"default","amethyst::ecs::common","",91,[[],["merge"]]],[11,"default","amethyst::prelude","",21,[[],["world"]]],[11,"default","amethyst::ecs::prelude","",92,[[],["vecstorage"]]],[11,"default","amethyst::ecs::common","",81,[[],["errors"]]],[11,"default","amethyst::ecs::prelude","",93,[[],["flaggedstorage"]]],[11,"default","amethyst::ecs::changeset","",94,[[],["changeset"]]],[11,"default","amethyst::ecs::prelude","",95,[[],["densevecstorage"]]],[11,"default","","",96,[[],["lazyupdate"]]],[11,"default","amethyst::ecs::world","",84,[[],["entitiesres"]]],[11,"from_iter","amethyst::ecs::changeset","",94,[[["i"]],["changeset"]]],[11,"borrow","amethyst::prelude","",21,[[["self"]],["resources"]]],[11,"run","amethyst::ecs::common","",91,N],[11,"running_time","","",91,[[["self"]],["runningtime"]]],[11,"partial_cmp","amethyst::ecs::world","",78,[[["self"],["generation"]],["option",["ordering"]]]],[11,"lt","","",78,[[["self"],["generation"]],["bool"]]],[11,"le","","",78,[[["self"],["generation"]],["bool"]]],[11,"gt","","",78,[[["self"],["generation"]],["bool"]]],[11,"ge","","",78,[[["self"],["generation"]],["bool"]]],[11,"partial_cmp","amethyst::ecs::prelude","",80,[[["self"],["entity"]],["option",["ordering"]]]],[11,"lt","","",80,[[["self"],["entity"]],["bool"]]],[11,"le","","",80,[[["self"],["entity"]],["bool"]]],[11,"gt","","",80,[[["self"],["entity"]],["bool"]]],[11,"ge","","",80,[[["self"],["entity"]],["bool"]]],[11,"drop","amethyst::ecs::world","",34,N],[11,"drop","amethyst::ecs::storage","",87,N],[11,"drop","amethyst::ecs::prelude","",19,N],[11,"drop","","",96,N],[11,"open","amethyst::ecs::changeset","",94,N],[11,"get","","",94,N],[11,"open","amethyst::ecs::storage","",97,N],[11,"get","","",97,N],[11,"open","amethyst::ecs::join","",18,N],[11,"get","","",18,N],[11,"is_unconstrained","","",18,[[],["bool"]]],[11,"open","amethyst::ecs::prelude","",98,N],[11,"get","","",98,N],[11,"clean","","",90,N],[11,"get","","",90,[[["self"],["u32"]],["t"]]],[11,"get_mut","","",90,[[["self"],["u32"]],["t"]]],[11,"insert","","",90,N],[11,"remove","","",90,[[["self"],["u32"]],["t"]]],[11,"clean","amethyst::ecs::storage","",88,N],[11,"get","","",88,[[["self"],["u32"]],["t"]]],[11,"get_mut","","",88,[[["self"],["u32"]],["t"]]],[11,"insert","","",88,N],[11,"remove","","",88,[[["self"],["u32"]],["t"]]],[11,"clean","amethyst::ecs::prelude","",89,N],[11,"get","","",89,[[["self"],["u32"]],["t"]]],[11,"get_mut","","",89,[[["self"],["u32"]],["t"]]],[11,"insert","","",89,N],[11,"remove","","",89,[[["self"],["u32"]],["t"]]],[11,"clean","","",95,N],[11,"get","","",95,[[["self"],["u32"]],["t"]]],[11,"get_mut","","",95,[[["self"],["u32"]],["t"]]],[11,"insert","","",95,N],[11,"remove","","",95,[[["self"],["u32"]],["t"]]],[11,"clean","","",93,N],[11,"get","","",93,[[["self"],["u32"]],["c"]]],[11,"get_mut","","",93,[[["self"],["u32"]],["c"]]],[11,"insert","","",93,N],[11,"remove","","",93,[[["self"],["u32"]],["c"]]],[11,"clean","","",92,N],[11,"get","","",92,[[["self"],["u32"]],["t"]]],[11,"get_mut","","",92,[[["self"],["u32"]],["t"]]],[11,"insert","","",92,N],[11,"remove","","",92,[[["self"],["u32"]],["t"]]],[11,"hash","","",80,N],[11,"hash","amethyst::ecs::world","",78,N],[11,"deref","amethyst::ecs::prelude","",83,N],[11,"deref","","",79,N],[11,"deref","","",85,N],[11,"channels","","",93,[[["self"]],["trackchannels"]]],[11,"channels_mut","","",93,[[["self"]],["trackchannels"]]],[11,"as_ref","","",83,[[["self"]],["u32"]]],[11,"as_ref","","",79,[[["self"]],["u32"]]],[11,"as_ref","","",85,[[["self"]],["u32"]]],[11,"as_ref","amethyst::ecs::error","",12,[[["self"]],["error"]]],[11,"get","amethyst::ecs::prelude","",99,[[["self"],["entity"]],["option"]]],[11,"_private","","",99,[[],["seal"]]],[11,"get","","",99,[[["self"],["entity"]],["option"]]],[11,"_private","","",99,[[],["seal"]]],[11,"setup","","",99,N],[11,"fetch","","",99,[[["resources"]],["storage",["fetchmut"]]]],[11,"reads","","",99,[[],["vec",["resourceid"]]]],[11,"writes","","",99,[[],["vec",["resourceid"]]]],[11,"setup","","",99,N],[11,"fetch","","",99,[[["resources"]],["storage",["fetch"]]]],[11,"reads","","",99,[[],["vec",["resourceid"]]]],[11,"writes","","",99,[[],["vec",["resourceid"]]]],[11,"cast","amethyst::ecs::storage","",25,[[["t"]],["anystorage"]]],[11,"cast_mut","","",25,[[["t"]],["anystorage"]]],[11,"extend","amethyst::ecs::changeset","",94,N],[11,"from","amethyst::ecs::error","",13,[[["noerror"]],["error"]]],[11,"from","amethyst::ecs::prelude","",83,[[["u32"]],["modifiedflag"]]],[11,"from","amethyst::ecs::error","",13,[[["wronggeneration"]],["error"]]],[11,"from","amethyst::ecs::prelude","",85,[[["u32"]],["insertedflag"]]],[11,"from","","",79,[[["u32"]],["removedflag"]]],[11,"get_mut","","",99,[[["self"],["entity"]],["option"]]],[11,"insert","","",99,N],[11,"remove","","",99,N],[11,"_private","","",99,[[],["seal"]]],[11,"fmt","amethyst::ecs::error","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",82,[[["self"],["noerror"]],["bool"]]],[11,"eq","amethyst::ecs::prelude","",79,[[["self"],["removedflag"]],["bool"]]],[11,"ne","","",79,[[["self"],["removedflag"]],["bool"]]],[11,"eq","amethyst::ecs::error","",14,[[["self"],["wronggeneration"]],["bool"]]],[11,"ne","","",14,[[["self"],["wronggeneration"]],["bool"]]],[11,"eq","amethyst::ecs::prelude","",80,[[["self"],["entity"]],["bool"]]],[11,"ne","","",80,[[["self"],["entity"]],["bool"]]],[11,"eq","amethyst::ecs::world","",78,[[["self"],["generation"]],["bool"]]],[11,"ne","","",78,[[["self"],["generation"]],["bool"]]],[11,"eq","amethyst::ecs::prelude","",83,[[["self"],["modifiedflag"]],["bool"]]],[11,"ne","","",83,[[["self"],["modifiedflag"]],["bool"]]],[11,"eq","","",85,[[["self"],["insertedflag"]],["bool"]]],[11,"ne","","",85,[[["self"],["insertedflag"]],["bool"]]],[11,"bitand","","",98,N],[11,"clone","","",98,[[["self"]],["bitset"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitand_assign","","",98,N],[11,"into_iter","","",98,N],[11,"bitor","","",98,N],[11,"default","","",98,[[],["bitset"]]],[11,"from_iter","","",98,[[["t"]],["bitset"]]],[11,"from_iter","","",98,[[["t"]],["bitset"]]],[11,"bitxor","","",98,N],[11,"remove","","",98,[[["self"],["u32"]],["bool"]]],[11,"extend","","",98,N],[11,"extend","","",98,N],[11,"not","","",98,N],[11,"bitxor_assign","","",98,N],[11,"bitor_assign","","",98,N],[11,"layer3","","",98,[[["self"]],["usize"]]],[11,"layer2","","",98,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",98,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",98,[[["self"],["usize"]],["usize"]]],[11,"contains","","",98,[[["self"],["u32"]],["bool"]]],[11,"clone","amethyst","",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"cmp","","",0,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["levelfilter"]]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"new","amethyst::ecs::shred::cell","Create a new cell, similar to `RefCell::new`",51,[[["t"]],["trustcell"]]],[11,"borrow","","Get an immutable reference to the inner data.",51,[[["self"]],["ref"]]],[11,"try_borrow","","Get an immutable reference to the inner data.",51,[[["self"]],["result",["ref","invalidborrow"]]]],[11,"borrow_mut","","Get a mutable reference to the inner data.",51,[[["self"]],["refmut"]]],[11,"try_borrow_mut","","Get a mutable reference to the inner data.",51,[[["self"]],["result",["refmut","invalidborrow"]]]],[11,"get_mut","","Gets exclusive access to the inner value, bypassing the Cell.",51,[[["self"]],["t"]]],[11,"new","amethyst::ecs::shred","Creates a new resource id from a given type.",1,[[],["resourceid"]]],[11,"new","","Creates a new `Seq` struct, with the tail being a no-op.",68,[[["h"]],["seq",["nil"]]]],[11,"with","","Adds `sys` as the second job and returns a new `Seq` struct with the previous struct as head and a no-op tail.",68,[[["self"],["t"]],["seq",["seq","nil"]]]],[11,"new","","Creates a new `Par` struct, with the tail being a no-op.",67,[[["h"]],["par",["nil"]]]],[11,"with","","Adds `sys` as the second job and returns a new `Par` struct with the previous struct as head and a no-op tail.",67,[[["self"],["t"]],["par",["par","nil"]]]],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",100,[[["box",["resource"]]],["result",["box","box"]]]],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",100,[[["box",["resource"]]],["box"]]],[11,"is","","Returns true if the boxed type is the same as `T`",100,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",100,[[["self"]],["option"]]],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",100,[[["self"]],["t"]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",100,[[["self"]],["option"]]],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",100,[[["self"]],["t"]]],[11,"new","","Creates a new `MetaTable`.",58,[[],["metatable"]]],[11,"register","","Registers a resource `R` that implements the trait `T`. This just needs some instance of type `R` to retrieve the vtable. It doesn't have to be the same object you're calling `get` with later.",58,N],[11,"get","","Tries to convert `res` to a trait object of type `&T`. If `res` doesn't have an implementation for `T` (or it wasn't registered), this will return `None`.",58,[[["self"],["resource"]],["option"]]],[11,"get_mut","","Tries to convert `res` to a trait object of type `&mut T`. If `res` doesn't have an implementation for `T` (or it wasn't registered), this will return `None`.",58,[[["self"],["resource"]],["option"]]],[11,"iter","","Iterates all resources that implement `T` and were registered.",58,[[["self"],["resources"]],["metaiter"]]],[11,"iter_mut","","Iterates all resources that implement `T` and were registered mutably.",58,[[["self"],["resources"]],["metaitermut"]]],[11,"new","amethyst::ecs::prelude","Creates a new `DispatcherBuilder` by using the `Default` implementation.",52,[[],["dispatcherbuilder"]]],[11,"with","","Adds a new system with a given name and a list of dependencies. Please note that the dependency should be added before you add the depending system.",52,N],[11,"add","","Adds a new system with a given name and a list of dependencies. Please note that the dependency should be added before you add the depending system.",52,N],[11,"with_thread_local","","Adds a new thread local system.",52,[[["self"],["t"]],["dispatcherbuilder"]]],[11,"add_thread_local","","Adds a new thread local system.",52,N],[11,"with_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",52,[[["self"]],["dispatcherbuilder"]]],[11,"add_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",52,N],[11,"with_pool","","Attach a rayon thread pool to the builder and use that instead of creating one.",52,[[["self"],["arc",["threadpool"]]],["dispatcherbuilder"]]],[11,"add_pool","","Attach a rayon thread pool to the builder and use that instead of creating one.",52,N],[11,"print_par_seq","","Prints the equivalent system graph that can be easily used to get the graph using the `seq!` and `par!` macros. This is only recommended for advanced users.",52,N],[11,"build","","Builds the `Dispatcher`.",52,[[["self"]],["dispatcher"]]],[11,"build_async","","Builds an async dispatcher.",52,[[["self"],["r"]],["asyncdispatcher"]]],[11,"setup","","Sets up all the systems which means they are gonna add default values for the resources they need.",65,N],[11,"dispatch","","Dispatch all the systems with given resources and context and then run thread local systems.",65,N],[11,"dispatch_par","","Dispatches the systems (except thread local systems) in parallel given the resources to operate on.",65,N],[11,"dispatch_seq","","Dispatches the systems (except thread local systems) sequentially.",65,N],[11,"dispatch_thread_local","","Dispatch only thread local systems sequentially.",65,N],[11,"or_insert","amethyst::ecs::shred","Returns this entry's value, inserts and returns `v` otherwise.",101,[[["self"],["t"]],["fetchmut"]]],[11,"or_insert_with","","Returns this entry's value, inserts and returns the return value of `f` otherwise.",101,[[["self"],["f"]],["fetchmut"]]],[11,"new","","Creates a new `ParSeq` dispatcher. `run` is usually created by using the `par!` / `seq!` macros.",66,[[["t"],["p"]],["parseq"]]],[11,"setup","","Sets up `res` for `dispatch`ing. This will add default values for required resources by calling `System::setup`.",66,N],[11,"dispatch","","Dispatches the systems using `res`. This doesn't call any virtual functions.",66,N],[11,"dispatch","amethyst::ecs::prelude","Dispatches the systems asynchronously. Does not execute thread local systems.",102,N],[11,"wait","","Waits for all the asynchronously dispatched systems to finish and executes thread local systems (if there are any).",102,N],[11,"wait_without_tl","","Waits for all the asynchronously dispatched systems to finish without executing thread local systems.",102,N],[11,"running","","Checks if any of the asynchronously dispatched systems are running.",102,[[["self"]],["bool"]]],[11,"res","","Returns the resources.",102,[[["self"]],["r"]]],[11,"mut_res","","Returns the resources mutable.",102,[[["self"]],["r"]]],[11,"new","","Creates a new, empty resource container.",57,[[],["resources"]]],[11,"insert","","Inserts a resource into this container. If the resource existed before, it will be overwritten.",57,N],[11,"has_value","","Returns true if the specified resource type `R` exists in `self`.",57,[[["self"]],["bool"]]],[11,"has_value_raw","","Returns true if the specified resource type exists in `self`.",57,[[["self"],["resourceid"]],["bool"]]],[11,"entry","","Returns an entry for the resource with type `R`.",57,[[["self"]],["entry"]]],[11,"fetch","","Fetches the resource with the specified type `T` or panics if it doesn't exist.",57,[[["self"]],["fetch"]]],[11,"try_fetch","","Like `fetch`, but returns an `Option` instead of inserting a default value in case the resource does not exist.",57,[[["self"]],["option",["fetch"]]]],[11,"fetch_mut","","Fetches the resource with the specified type `T` mutably.",57,[[["self"]],["fetchmut"]]],[11,"try_fetch_mut","","Like `fetch_mut`, but returns an `Option` instead of inserting a default value in case the resource does not exist.",57,[[["self"]],["option",["fetchmut"]]]],[11,"try_fetch_internal","","Internal function for fetching resources, should only be used if you know what you're doing.",57,[[["self"],["typeid"]],["option",["trustcell"]]]],[11,"get_mut","","Retrieves a resource without fetching, which is cheaper, but only available with `&mut self`.",57,[[["self"]],["option"]]],[11,"get_mut_raw","","Retrieves a resource without fetching, which is cheaper, but only available with `&mut self`.",57,[[["self"],["typeid"]],["option",["resource"]]]],[11,"new","amethyst::shrev","Create a new EventChannel with a default size of 50",73,[[],["eventchannel"]]],[11,"with_capacity","","Create a new EventChannel with the given starting capacity.",73,[[["usize"]],["eventchannel"]]],[11,"register_reader","","Register a reader.",73,[[["self"]],["readerid"]]],[11,"slice_write","","Write a slice of events into storage",73,N],[11,"iter_write","","Write an iterator of events into storage",73,N],[11,"drain_vec_write","","Drain a vector of events into storage.",73,N],[11,"single_write","","Write a single event into storage.",73,N],[11,"read","","Read any events that have been written to storage since the readers last read.",73,[[["self"],["readerid"]],["storageiterator"]]],[11,"new","amethyst::ecs::common","Creates a new instance of `Errors`.",81,[[],["errors"]]],[11,"add","","Add an error to the error collection.",81,N],[11,"execute","","A convenience method which allows nicer error handling.",81,N],[11,"has_error","","Checks if the queue contains at least one error.",81,[[["self"]],["bool"]]],[11,"pop_err","","Removes the first error from the queue.",81,[[["self"]],["option",["boxederr"]]]],[11,"drain","","Returns a draining iterator, removing elements on each call to `Iterator::next`.",81,[[["self"]],["drainerrors"]]],[11,"collect","","Collect all errors into a `Vec`.",81,[[["self"]],["vec",["boxederr"]]]],[11,"print_and_exit","","Prints all errors and exits in case there's been an error. Useful for debugging.",81,N],[11,"new","","Creates a new merge system.",91,[[],["merge"]]],[11,"new","amethyst::ecs::changeset","Create a new change set",94,[[],["changeset"]]],[11,"add","","Add a value to the change set. If the entity already have a value in the change set, the incoming value will be added to that.",94,N],[11,"clear","","Clear the changeset",94,N],[11,"new","amethyst::ecs::error","Creates a new boxed error.",12,[[["t"]],["boxederr"]]],[11,"new","amethyst::ecs::join","Create a new join iterator.",75,[[["j"]],["joiniter"]]],[11,"get","","Allows getting joined values for specific entity.",75,[[["self"],["entity"],["read"]],["option"]]],[11,"get_unchecked","","Allows getting joined values for specific raw index.",75,[[["self"],["u32"]],["option"]]],[11,"new","amethyst::prelude","Creates a new empty `World`.",21,[[],["world"]]],[11,"register","","Registers a new component, adding the component storage.",21,N],[11,"register_with_storage","","Registers a new component with a given storage.",21,N],[11,"system_data","","Gets `SystemData` `T` from the `World`.",21,[[["self"]],["t"]]],[11,"setup","","Sets up system data `T` for fetching afterwards.",21,N],[11,"exec","","Executes `f` once, right now with the specified system data.",21,[[["self"],["f"]],["r"]]],[11,"add_resource","","Adds a resource to the world.",21,N],[11,"read_storage","","Fetches a component's storage for reading.",21,[[["self"]],["storage",["fetch"]]]],[11,"write_storage","","Fetches a component's storage for writing.",21,[[["self"]],["storage",["fetchmut"]]]],[11,"read_resource","","Fetches a resource for reading.",21,[[["self"]],["fetch"]]],[11,"write_resource","","Fetches a resource for writing.",21,[[["self"]],["fetchmut"]]],[11,"entities","","Convenience method for fetching entities.",21,[[["self"]],["read",["entitiesres","defaultprovider"]]]],[11,"create_entity","","Allows building an entity with its components.",21,[[["self"]],["entitybuilder"]]],[11,"create_entity_unchecked","","Allows building an entity with its components.",21,[[["self"]],["entitybuilder"]]],[11,"create_iter","","Returns an iterator for entity creation. This makes it easy to create a whole collection of them.",21,[[["self"]],["createiter"]]],[11,"delete_entity","","Deletes an entity and its components.",21,[[["self"],["entity"]],["result",["wronggeneration"]]]],[11,"delete_entities","","Deletes the specified entities and their components.",21,N],[11,"delete_all","","Deletes all entities and their components.",21,N],[11,"is_alive","","Checks if an entity is alive. Please note that atomically created or deleted entities (the ones created / deleted with the `Entities` struct) are not handled by this method. Therefore, you should have called `maintain()` before using this method.",21,[[["self"],["entity"]],["bool"]]],[11,"maintain","","Merges in the appendix, recording all the dynamically created and deleted entities into the persistent generations vector. Also removes all the abandoned components.",21,N],[11,"add_bundle","","Adds the given bundle of resources/components.",21,N],[11,"id","amethyst::ecs::prelude","Returns the index of the `Entity`.",80,[[["self"]],["u32"]]],[11,"gen","","Returns the `Generation` of the `Entity`.",80,[[["self"]],["generation"]]],[11,"restrict","","Builds an immutable `RestrictedStorage` out of a `Storage`. Allows deferred unchecked access to the entity's component.",99,[[["self"]],["restrictedstorage",["bitset","immutableparallelrestriction"]]]],[11,"restrict_mut","","Builds a mutable `RestrictedStorage` out of a `Storage`. Allows restricted access to the inner components without allowing invalidating the bitset for iteration in `Join`.",99,[[["self"]],["restrictedstorage",["bitset","sequentialrestriction"]]]],[11,"par_restrict_mut","","Builds a mutable, parallel `RestrictedStorage`, does not allow mutably getting other components aside from the current iteration.",99,[[["self"]],["restrictedstorage",["bitset","mutableparallelrestriction"]]]],[11,"channels","","Returns the event channel tracking modified components.",99,[[["self"]],["trackchannels"]]],[11,"modified","","Returns the event channel tracking modified components.",99,[[["self"]],["eventchannel"]]],[11,"inserted","","Returns the event channel tracking inserted components.",99,[[["self"]],["eventchannel"]]],[11,"removed","","Returns the event channel tracking removed components.",99,[[["self"]],["eventchannel"]]],[11,"populate_modified","","Reads events from the modified `EventChannel` and populates a structure using the events.",99,N],[11,"populate_inserted","","Reads events from the inserted `EventChannel` and populates a structure using the events.",99,N],[11,"populate_removed","","Reads events from the removed `EventChannel` and populates a structure using the events.",99,N],[11,"channels_mut","","Returns all of the event channels for this component.",99,[[["self"]],["trackchannels"]]],[11,"modified_mut","","Returns the event channel tracking modified components mutably.",99,[[["self"]],["eventchannel"]]],[11,"inserted_mut","","Returns the event channel tracking inserted components mutably.",99,[[["self"]],["eventchannel"]]],[11,"removed_mut","","Returns the event channel tracking removed components mutably.",99,[[["self"]],["eventchannel"]]],[11,"track_modified","","Starts tracking modified events.",99,[[["self"]],["readerid",["modifiedflag"]]]],[11,"track_inserted","","Starts tracking inserted events.",99,[[["self"]],["readerid",["insertedflag"]]]],[11,"track_removed","","Starts tracking removed events.",99,[[["self"]],["readerid",["removedflag"]]]],[11,"flag_modified","","Flags an index as modified.",99,N],[11,"flag_inserted","","Flags an index as inserted.",99,N],[11,"flag_removed","","Flags an index as removed.",99,N],[11,"new","","Create a new `Storage`",99,[[["fetch",["entitiesres"]],["d"]],["storage"]]],[11,"unprotected_storage","","Gets the wrapped storage.",99,N],[11,"get","","Tries to read the data associated with an `Entity`.",99,[[["self"],["entity"]],["option"]]],[11,"contains","","Returns true if the storage has a component for this entity, and that entity is alive.",99,[[["self"],["entity"]],["bool"]]],[11,"mask","","Returns a reference to the bitset of this storage which allows filtering by the component type without actually getting the component.",99,[[["self"]],["bitset"]]],[11,"unprotected_storage_mut","","Gets mutable access to the wrapped storage.",99,N],[11,"get_mut","","Tries to mutate the data associated with an `Entity`.",99,[[["self"],["entity"]],["option"]]],[11,"entry","","Returns an entry to the component associated to the entity.",99,[[["self"],["entity"]],["result",["storageentry","wronggeneration"]]]],[11,"insert","","Inserts new data for a given `Entity`. Returns the result of the operation as a `InsertResult<T>`",99,[[["self"],["entity"],["t"]],["result",["option","error"]]]],[11,"remove","","Removes the data associated with an `Entity`.",99,[[["self"],["entity"]],["option"]]],[11,"clear","","Clears the contents of the storage.",99,N],[11,"drain","","Creates a draining storage wrapper which can be `.join`ed to get a draining iterator.",99,[[["self"]],["drain"]]],[11,"create_entity","","Creates a new `LazyBuilder` which inserts components using `LazyUpdate`. This means that the components won't be available immediately, but only after a `maintain` on `World` is performed.",96,[[["self"],["entitiesres"]],["lazybuilder"]]],[11,"insert","","Lazily inserts a component for an entity.",96,N],[11,"insert_all","","Lazily inserts components for entities.",96,N],[11,"remove","","Lazily removes a component.",96,N],[11,"exec","","Lazily executes a closure with world access.",96,N],[11,"exec_mut","","Lazily executes a closure with mutable world access.",96,N],[11,"new","","Creates an empty `BitSet`.",98,[[],["bitset"]]],[11,"with_capacity","","Creates an empty `BitSet`, preallocated for up to `max` indices.",98,[[["u32"]],["bitset"]]],[11,"add","","Adds `id` to the `BitSet`. Returns `true` if the value was already in the set.",98,[[["self"],["u32"]],["bool"]]],[11,"remove","","Removes `id` from the set, returns `true` if the value was removed, and `false` if the value was not set to begin with.",98,[[["self"],["u32"]],["bool"]]],[11,"contains","","Returns `true` if `id` is in the set.",98,[[["self"],["u32"]],["bool"]]],[11,"clear","","Completely wipes out the bit set.",98,N],[11,"new","amethyst::ecs::storage","Creates a new `MaskedStorage`. This is called when you register a new component type within the world.",87,N],[11,"clear","","Clear the contents of this storage.",87,N],[11,"remove","","Remove an element by a given index.",87,[[["self"],["u32"]],["option"]]],[11,"drop","","Drop an element by a given index.",87,N],[11,"get","","Get a reference to the component associated with the entity.",103,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the component associated with the entity.",103,[[["self"]],["t"]]],[11,"into_mut","","Converts the `OccupiedEntry` into a mutable reference bounded by the storage's lifetime.",103,[[["self"]],["t"]]],[11,"insert","","Inserts a value into the storage and returns the old one.",103,[[["self"],["t"]],["t"]]],[11,"remove","","Removes the component from the storage and returns it.",103,[[["self"]],["t"]]],[11,"insert","","Inserts a value into the storage.",104,[[["self"],["t"]],["t"]]],[11,"or_insert","","Inserts a component if the entity does not contain a component.",26,[[["self"],["t"]],["t"]]],[11,"or_insert_with","","Inserts a component using a lazily called function that is only called when inserting the component.",26,[[["self"],["f"]],["t"]]],[11,"new","","Creates a new structure that holds all types of component modification events.",31,[[],["trackchannels"]]],[11,"id","amethyst::ecs::world","Returns the id of the generation.",78,[[["self"]],["i32"]]],[11,"is_alive","","Returns `true` if entities of this `Generation` are alive.",78,[[["self"]],["bool"]]],[11,"create","","Creates a new entity atomically. This will be persistent as soon as you call `World::maintain`.",84,[[["self"]],["entity"]]],[11,"create_iter","","Returns an iterator which creates new entities atomically. They will be persistent as soon as you call `World::maintain`.",84,[[["self"]],["createiteratomic"]]],[11,"build_entity","","Similar to the `create` method above this creates an entity atomically, and then returns a builder which can be used to insert components into various storages if available.",84,[[["self"]],["entityresbuilder"]]],[11,"delete","","Deletes an entity atomically. The associated components will be deleted as soon as you call `World::maintain`.",84,[[["self"],["entity"]],["result",["wronggeneration"]]]],[11,"entity","","Returns an entity with a given `id`. There's no guarantee for validity, meaning the entity could be not alive.",84,[[["self"],["u32"]],["entity"]]],[11,"is_alive","","Returns `true` if the specified entity is alive.",84,[[["self"],["entity"]],["bool"]]],[11,"with","","Appends a component and associates it with the entity.",34,[[["self"],["t"],["storage"]],["entityresbuilder"]]],[11,"build","","Finishes the building and returns the entity.",34,[[["self"]],["entity"]]]],"paths":[[4,"LogLevelFilter"],[3,"ResourceId"],[8,"System"],[8,"RunWithPool"],[8,"SystemData"],[8,"RunNow"],[8,"SetupHandler"],[4,"AccessorCow"],[8,"Accessor"],[4,"RunningTime"],[8,"DynamicSystemData"],[8,"CastFrom"],[3,"BoxedErr"],[4,"Error"],[3,"WrongGeneration"],[8,"BitAnd"],[8,"Join"],[8,"ParJoin"],[3,"MaybeJoin"],[3,"EntityBuilder"],[8,"ParallelIterator"],[3,"World"],[8,"Tracked"],[8,"Component"],[8,"Builder"],[8,"AnyStorage"],[4,"StorageEntry"],[8,"TryDefault"],[8,"UnprotectedStorage"],[8,"GenericWriteStorage"],[8,"GenericReadStorage"],[3,"TrackChannels"],[8,"Bundle"],[3,"LazyBuilder"],[3,"EntityResBuilder"],[3,"ApplicationBuilder"],[3,"LoggerConfig"],[3,"StateData"],[4,"Error"],[4,"Trans"],[4,"StateEvent"],[8,"Config"],[8,"WithNamed"],[8,"DataInit"],[8,"EmptyState"],[8,"SimpleState"],[8,"State"],[3,"Application"],[3,"GameData"],[3,"GameDataBuilder"],[3,"StateMachine"],[3,"TrustCell"],[3,"DispatcherBuilder"],[3,"Ref"],[3,"InvalidBorrow"],[3,"RefMut"],[3,"StaticAccessor"],[3,"Resources"],[3,"MetaTable"],[3,"Write"],[3,"Read"],[3,"FetchMut"],[3,"DefaultProvider"],[3,"PanicHandler"],[3,"Fetch"],[3,"Dispatcher"],[3,"ParSeq"],[3,"Par"],[3,"Seq"],[3,"MetaIterMut"],[3,"MetaIter"],[3,"ReaderId"],[3,"EventIterator"],[3,"EventChannel"],[3,"CreateIter"],[3,"JoinIter"],[3,"CreateIterAtomic"],[3,"DrainErrors"],[3,"Generation"],[3,"RemovedFlag"],[3,"Entity"],[3,"Errors"],[4,"NoError"],[3,"ModifiedFlag"],[3,"EntitiesRes"],[3,"InsertedFlag"],[3,"JoinParIter"],[3,"MaskedStorage"],[3,"BTreeStorage"],[3,"NullStorage"],[3,"HashMapStorage"],[3,"Merge"],[3,"VecStorage"],[3,"FlaggedStorage"],[3,"ChangeSet"],[3,"DenseVecStorage"],[3,"LazyUpdate"],[3,"AntiStorage"],[3,"BitSet"],[3,"Storage"],[8,"Resource"],[3,"Entry"],[3,"AsyncDispatcher"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["amethyst_animation"]={"doc":"Provides computer graphics animation functionality.","items":[[4,"InterpolationFunction","amethyst_animation","Supported interpolation functions",N,N],[13,"Linear","","Linear interpolation",0,N],[13,"SphericalLinear","","Spherical linear interpolation",0,N],[13,"QuasiSphericalLinear","","Quasi spherical linear interpolation",0,N],[13,"Step","","Step interpolation",0,N],[13,"CatmullRomSpline","","Catmull-Rom spline interpolation",0,N],[13,"CubicSpline","","Cubic Hermite spline interpolation",0,N],[13,"Function","","Generic function",0,N],[8,"InterpolationPrimitive","","Interpolation primitive, defines basic arithmetic needed for interpolation.",N,N],[10,"add","","",1,[[["self"],["self"]],["self"]]],[10,"sub","","",1,[[["self"],["self"]],["self"]]],[10,"mul","","",1,[[["self"],["f32"]],["self"]]],[10,"dot","","",1,[[["self"],["self"]],["f32"]]],[10,"magnitude2","","",1,[[["self"]],["f32"]]],[11,"magnitude","","",1,[[["self"]],["f32"]]],[11,"normalize","","",1,[[["self"]],["self"]]],[3,"AnimationBundle","","Bundle for a complete animation setup including sampler interpolation and animation control.",N,N],[3,"SamplingBundle","","Bundle for only the sampler interpolation.",N,N],[3,"VertexSkinningBundle","","Bundle for vertex skinning",N,N],[3,"AnimatablePrefab","","`PrefabData` for full animation support",N,N],[12,"animation_set","","Place an `AnimationSet` on the `Entity`",2,N],[12,"hierarchy","","Place an `AnimationHierarchy` on the `Entity`",2,N],[12,"rest_state","","Place a `RestState` on the `Entity`",2,N],[3,"AnimationHierarchyPrefab","","`PrefabData` for loading `AnimationHierarchy`.",N,N],[12,"nodes","","",3,N],[3,"AnimationPrefab","","`PrefabData` for loading a single `Animation`",N,N],[12,"samplers","","All samplers in the `Animation`",4,N],[3,"AnimationSetPrefab","","`PrefabData` for loading `Animation`s as part of an `AnimationSet`.",N,N],[12,"animations","","Pairs of `Id` and `Animation`",5,N],[3,"Animation","","Defines a single animation.",N,N],[12,"nodes","","node index -> sampler handle",6,N],[3,"AnimationControl","","Controls the state of a single running animation on a specific component type",N,N],[12,"animation","","Animation handle",7,N],[12,"id","","Id, a value of zero means this has not been initialised yet (this is done by the control system)",7,N],[12,"end","","What to do when animation ends",7,N],[12,"state","","State of animation",7,N],[12,"command","","Animation command",7,N],[12,"rate_multiplier","","Control the rate of animation, default is 1.0",7,N],[3,"AnimationControlSet","","Contains all currently running animations for an entity.",N,N],[12,"animations","","",8,N],[3,"AnimationHierarchy","","Defines the hierarchy of nodes that a single animation can control. Attached to the root entity that an animation can be defined for. Only required for animations which target more than a single node or entity.",N,N],[12,"nodes","","",9,N],[3,"AnimationSet","","Attaches to an entity that have animations, with links to all animations that can be run on the entity. Is not used directly by the animation systems, provided for convenience.",N,N],[12,"animations","","",10,N],[3,"RestState","","Define the rest state for a component on an entity",N,N],[3,"Sampler","","Sampler defines a single animation for a single channel on a single component",N,N],[12,"input","","Time of key frames",11,N],[12,"output","","Actual output data to interpolate",11,N],[12,"function","","How interpolation should be done",11,N],[3,"SamplerControl","","Control a single active sampler",N,N],[12,"control_id","","Id of the animation control this entry belongs to",12,N],[12,"channel","","Channel",12,N],[12,"blend_weight","","Blend weight",12,N],[12,"sampler","","Sampler",12,N],[12,"state","","State of sampling",12,N],[12,"end","","What to do when sampler ends",12,N],[12,"after","","What the transform should return to after end",12,N],[12,"rate_multiplier","","Control the rate of animation, default is 1.0",12,N],[3,"SamplerControlSet","","Sampler control set, containing a set of sampler controllers for a single component.",N,N],[12,"samplers","","",13,N],[3,"Joint","","Joint, attach to an entity with a `Transform`",N,N],[12,"skins","","",14,N],[3,"JointPrefab","","`PrefabData` for loading `Joint`s",N,N],[12,"skins","","Index of the `Prefab` `Entity` where the `Skin` is placed.",15,N],[3,"Skin","","Skin, attach to the root entity in the mesh hierarchy",N,N],[12,"joints","","Joint entities for the skin",16,N],[12,"meshes","","Mesh entities that use the skin",16,N],[12,"bind_shape_matrix","","Bind shape matrix",16,N],[12,"inverse_bind_matrices","","Bring the mesh into the joints local coordinate system",16,N],[12,"joint_matrices","","Scratch area holding the current joint matrices",16,N],[3,"SkinPrefab","","`PrefabData` for loading `Skin`s",N,N],[12,"joints","","Indices of `Entity`s in the `Prefab` which have `Joint`s belonging to this `Skin`",17,N],[12,"bind_shape_matrix","","The bind shape matrix of the `Skin`",17,N],[12,"meshes","","Indices of the `Entity`s in the `Prefab` which have `Mesh`s using this `Skin`",17,N],[12,"inverse_bind_matrices","","Inverse bind matrices of the `Joint`s",17,N],[3,"SkinnablePrefab","","`PrefabData` for full skinning support",N,N],[12,"skin","","Place `Skin` on the `Entity`",18,N],[12,"joint","","Place `Joint` on the `Entity`",18,N],[12,"joint_transforms","","Place `JointTransforms` on the `Entity`",18,N],[3,"VertexSkinningSystem","","System for performing vertex skinning.",N,N],[3,"AnimationControlSystem","","System for setting up animations, should run before `SamplerInterpolationSystem`.",N,N],[3,"SamplerInterpolationSystem","","System for interpolating active samplers.",N,N],[4,"MaterialChannel","","Channels that are animatable on `Material`",N,N],[13,"AlbedoTexture","","",19,N],[13,"AlbedoOffset","","",19,N],[13,"EmissionTexture","","",19,N],[13,"EmissionOffset","","",19,N],[13,"NormalTexture","","",19,N],[13,"NormalOffset","","",19,N],[13,"MetallicTexture","","",19,N],[13,"MetallicOffset","","",19,N],[13,"RoughnessTexture","","",19,N],[13,"RoughnessOffset","","",19,N],[13,"AmbientOcclusionTexture","","",19,N],[13,"AmbientOcclusionOffset","","",19,N],[13,"CaveatTexture","","",19,N],[13,"CaveatOffset","","",19,N],[4,"MaterialPrimitive","","Sampler primitive for Material animations Note that material can only ever be animated with `Step`, or a panic will occur.",N,N],[13,"Texture","","",20,N],[13,"Offset","","",20,N],[4,"AnimationCommand","","Animation command",N,N],[13,"Start","","Start the animation, or unpause if it's paused",21,N],[13,"Step","","Step the animation forward/backward (move to the next/previous input value in sequence)",21,N],[13,"SetInputValue","","Forcibly set current interpolation point for the animation, value in seconds",21,N],[13,"SetBlendWeights","","Set blend weights",21,N],[13,"Pause","","Pause the animation",21,N],[13,"Abort","","Abort the animation, will cause the control object to be removed from the world",21,N],[13,"Init","","Only initialise the animation without starting it",21,N],[4,"BlendMethod","","Blend method for sampler blending",N,N],[13,"Linear","","",22,N],[4,"ControlState","","State of animation",N,N],[13,"Requested","","Animation was just requested, not started yet",23,N],[13,"Deferred","","Deferred start",23,N],[13,"Running","","Animation is running, contains last animation tick, and accumulated duration",23,N],[13,"Paused","","Animation is paused at the accumulated duration",23,N],[13,"Abort","","Request termination of the animation",23,N],[13,"Done","","Animation is completed",23,N],[4,"DeferStartRelation","","Defer the start of an animation until the relationship has done this",N,N],[13,"Start","","Start animation time duration after relationship started",24,N],[13,"End","","Start animation when relationship ends",24,N],[4,"EndControl","","Control handling of animation/sampler end",N,N],[13,"Loop","","Loop the requested number of iterations, None = loop infinitely",25,N],[13,"Normal","","When duration of sampler/animation is reached, go back to rest state",25,N],[13,"Stay","","When duration of sampler/animation is reached, do nothing: stay at the last sampled state",25,N],[4,"StepDirection","","Used when doing animation stepping (i.e only move forward/backward to discrete input values)",N,N],[13,"Forward","","Take a step forward",26,N],[13,"Backward","","Take a step backward",26,N],[4,"SpriteRenderChannel","","Channels that are animatable on `SpriteRender`",N,N],[13,"SpriteSheet","","",27,N],[13,"SpriteIndex","","",27,N],[4,"SpriteRenderPrimitive","","Sampler primitive for SpriteRender animations Note that sprites can only ever be animated with `Step`, or a panic will occur.",N,N],[13,"SpriteSheet","","",28,N],[13,"SpriteIndex","","",28,N],[4,"TransformChannel","","Channels that can be animated on `Transform`",N,N],[13,"Translation","","",29,N],[13,"Rotation","","",29,N],[13,"Scale","","",29,N],[4,"SamplerPrimitive","","Sampler primitive",N,N],[13,"Scalar","","",30,N],[13,"Vec2","","",30,N],[13,"Vec3","","",30,N],[13,"Vec4","","",30,N],[5,"get_animation_set","","Get the animation set for an entity. If none exists, one will be added. If entity is invalid, (eg. removed before) None will be returned.",N,[[["writestorage"],["entity"]],["option",["animationcontrolset"]]]],[11,"default","","",31,[[],["vertexskinningbundle"]]],[11,"new","","Create a new sampling bundle",31,[[],["self"]]],[11,"with_dep","","Set dependencies for the `VertexSkinningSystem`",31,N],[11,"build","","",31,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"default","","",32,[[],["samplingbundle"]]],[11,"new","","Create a new sampling bundle",32,[[["str"]],["self"]]],[11,"with_dep","","Set dependencies for the `SamplerInterpolationSystem`",32,N],[11,"build","","",32,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"default","","",33,[[],["animationbundle"]]],[11,"new","","Create a new animation bundle",33,[[["str"],["str"]],["self"]]],[11,"with_dep","","Set dependencies for the `AnimationControlSystem`",33,N],[11,"build","","",33,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["materialprimitive"]]],[11,"eq","","",20,[[["self"],["materialprimitive"]],["bool"]]],[11,"ne","","",20,[[["self"],["materialprimitive"]],["bool"]]],[11,"add","","",20,[[["self"],["self"]],["self"]]],[11,"sub","","",20,[[["self"],["self"]],["self"]]],[11,"mul","","",20,[[["self"],["f32"]],["self"]]],[11,"dot","","",20,[[["self"],["self"]],["f32"]]],[11,"magnitude2","","",20,[[["self"]],["f32"]]],[11,"magnitude","","",20,[[["self"]],["f32"]]],[11,"normalize","","",20,[[["self"]],["self"]]],[11,"from","","",20,[[["sprite"]],["self"]]],[11,"from","","",20,[[["sprite"]],["self"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["materialchannel"]]],[11,"hash","","",19,N],[11,"eq","","",19,[[["self"],["materialchannel"]],["bool"]]],[11,"clone","","",4,[[["self"]],["animationprefab"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["self"]]],[11,"load_prefab","","",4,N],[11,"trigger_sub_loading","","",4,N],[11,"clone","","",5,[[["self"]],["animationsetprefab"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["animationsetprefab"]]],[11,"load_prefab","","",5,N],[11,"trigger_sub_loading","","",5,N],[11,"load_prefab","","",34,N],[11,"clone","","",3,[[["self"]],["animationhierarchyprefab"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["animationhierarchyprefab"]]],[11,"load_prefab","","",3,N],[11,"default","","",2,[[],["animatableprefab"]]],[11,"clone","","",2,[[["self"]],["animatableprefab"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"load_prefab","","",2,N],[11,"trigger_sub_loading","","",2,N],[11,"clone","","",22,[[["self"]],["blendmethod"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",22,[[["self"],["blendmethod"]],["option",["ordering"]]]],[11,"eq","","",22,[[["self"],["blendmethod"]],["bool"]]],[11,"hash","","",22,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["sampler"]]],[11,"into","","",11,[[["self"]],["result",["processingstate"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["reststate"]]],[11,"new","","Create new rest state",34,[[["t"]],["self"]]],[11,"state","","Get the rest state",34,[[["self"]],["t"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["animationhierarchy"]]],[11,"new","","Create a new hierarchy",9,[[],["self"]]],[11,"new_single","","Create a new hierarchy containing a single given entity",9,[[["usize"],["entity"]],["self"]]],[11,"new_many","","Create a new hierarchy with the given entity map",9,[[["fnvhashmap",["usize","entity"]]],["self"]]],[11,"rest_state","","Create rest state for the hierarchy. Will copy the values from the base components for each entity in the hierarchy.",9,[[["self"],["f"],["writestorage"]]]],[11,"clone","","",6,[[["self"]],["animation"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create new empty animation",6,[[],["self"]]],[11,"new_single","","Create an animation with a single sampler",6,N],[11,"add","","Add a sampler to the animation",6,N],[11,"with","","Add a sampler to the animation",6,N],[11,"into","","",6,[[["self"]],["result",["processingstate"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["controlstate"]]],[11,"eq","","",23,[[["self"],["controlstate"]],["bool"]]],[11,"ne","","",23,[[["self"],["controlstate"]],["bool"]]],[11,"is_running","","Is the state `Running`",23,[[["self"]],["bool"]]],[11,"is_paused","","Is the state `Paused`",23,[[["self"]],["bool"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["endcontrol"]]],[11,"clone","","",12,[[["self"]],["samplercontrol"]]],[11,"clone","","",13,[[["self"]],["samplercontrolset"]]],[11,"default","","",13,[[],["self"]]],[11,"add_control","","Set channel control",13,[[["self"],["samplercontrol"]]]],[11,"clear","","Clear sampler controls for the given animation",13,[[["self"],["u64"]]]],[11,"is_empty","","Check if set is empty",13,[[["self"]],["bool"]]],[11,"abort","","Abort control set",13,[[["self"],["u64"]]]],[11,"pause","","Pause control set",13,[[["self"],["u64"]]]],[11,"unpause","","Unpause control set",13,[[["self"],["u64"]]]],[11,"set_rate_multiplier","","Update rate multiplier",13,[[["self"],["u64"],["f32"]]]],[11,"set_input","","Forcibly set the input value (point of interpolation)",13,[[["self"],["u64"],["f32"]]]],[11,"check_termination","","Check if a control set can be terminated",13,[[["self"],["u64"]],["bool"]]],[11,"step","","Step animation",13,[[["self"],["u64"],["assetstorage"],["stepdirection"]]]],[11,"set_blend_weight","","Set blend weight for a sampler",13,N],[11,"get_running_duration","","Get the max running duration of the control set",13,[[["self"],["u64"]],["option",["f32"]]]],[11,"clone","","",26,[[["self"]],["stepdirection"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["animationcommand"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["animationcontrol"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","",7,[[["handle",["animation"]],["endcontrol"],["controlstate"],["animationcommand"],["f32"]],["self"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["deferstartrelation"]]],[11,"eq","","",24,[[["self"],["deferstartrelation"]],["bool"]]],[11,"ne","","",24,[[["self"],["deferstartrelation"]],["bool"]]],[11,"clone","","",8,[[["self"]],["animationcontrolset"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"default","","",8,[[],["self"]]],[11,"is_empty","","Is the animation set empty?",8,[[["self"]],["bool"]]],[11,"remove","","Remove animation from set",8,[[["self"],["i"]]]],[11,"start","","Start animation if it exists",8,[[["self"],["i"]]]],[11,"pause","","Pause animation if it exists",8,[[["self"],["i"]]]],[11,"toggle","","Toggle animation if it exists",8,[[["self"],["i"]]]],[11,"set_rate","","Set animation rate",8,[[["self"],["i"],["f32"]]]],[11,"step","","Step animation",8,[[["self"],["i"],["stepdirection"]]]],[11,"set_input","","Set animation input value (point of interpolation)",8,[[["self"],["i"],["f32"]]]],[11,"set_blend_weight","","Set blend weights",8,[[["self"],["i"],["vec"]]]],[11,"abort","","Abort animation",8,[[["self"],["i"]]]],[11,"add_animation","","Add animation with the given id, unless it already exists",8,[[["self"],["i"],["handle"],["endcontrol"],["f32"],["animationcommand"]]]],[11,"add_deferred_animation","","Add deferred animation with the given id, unless it already exists",8,[[["self"],["i"],["handle"],["endcontrol"],["f32"],["animationcommand"],["i"],["deferstartrelation"]]]],[11,"insert","","Insert an animation directly",8,[[["self"],["i"],["animationcontrol"]]]],[11,"has_animation","","Check if there is an animation with the given id in the set",8,[[["self"],["i"]],["bool"]]],[11,"default","","",10,[[],["self"]]],[11,"new","","Create",10,[[],["self"]]],[11,"insert","","Insert an animation in the set",10,[[["self"],["i"],["handle",["animation"]]]]],[11,"get","","Retrieve an animation handle from the set",10,[[["self"],["i"]],["option",["handle"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["joint"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"new","","",16,[[["vec",["entity"]],["bitset"],["vec",["matrix4"]]],["self"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["jointprefab"]]],[11,"default","","",15,[[],["jointprefab"]]],[11,"load_prefab","","",15,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["skinprefab"]]],[11,"load_prefab","","",17,N],[11,"clone","","",18,[[["self"]],["skinnableprefab"]]],[11,"default","","",18,[[],["skinnableprefab"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"load_prefab","","",18,N],[11,"new","","",35,[[],["self"]]],[11,"run","","",35,N],[11,"setup","","",35,[[["self"],["resources"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["spriterenderprimitive"]]],[11,"eq","","",28,[[["self"],["spriterenderprimitive"]],["bool"]]],[11,"ne","","",28,[[["self"],["spriterenderprimitive"]],["bool"]]],[11,"add","","",28,[[["self"],["self"]],["self"]]],[11,"sub","","",28,[[["self"],["self"]],["self"]]],[11,"mul","","",28,[[["self"],["f32"]],["self"]]],[11,"dot","","",28,[[["self"],["self"]],["f32"]]],[11,"magnitude2","","",28,[[["self"]],["f32"]]],[11,"magnitude","","",28,[[["self"]],["f32"]]],[11,"normalize","","",28,[[["self"]],["self"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["spriterenderchannel"]]],[11,"hash","","",27,N],[11,"eq","","",27,[[["self"],["spriterenderchannel"]],["bool"]]],[11,"default","","",36,[[],["animationcontrolsystem"]]],[11,"new","","",36,[[],["self"]]],[11,"run","","",36,N],[11,"setup","","",36,[[["self"],["resources"]]]],[11,"default","","",37,[[],["samplerinterpolationsystem"]]],[11,"new","","",37,[[],["self"]]],[11,"run","","",37,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["transformchannel"]]],[11,"hash","","",29,N],[11,"eq","","",29,[[["self"],["transformchannel"]],["bool"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["samplerprimitive"]]],[11,"from","","",30,N],[11,"from","","",30,N],[11,"from","","",30,N],[11,"add","","",30,[[["self"],["self"]],["self"]]],[11,"sub","","",30,[[["self"],["self"]],["self"]]],[11,"mul","","",30,[[["self"],["f32"]],["self"]]],[11,"dot","","",30,[[["self"],["self"]],["f32"]]],[11,"magnitude2","","",30,[[["self"]],["f32"]]],[11,"magnitude","","",30,[[["self"]],["f32"]]],[11,"normalize","","",30,[[["self"]],["self"]]],[6,"AnimationProcessor","","Asset storage processor for `Animation`",N,N],[6,"SamplerProcessor","","Asset storage processor for `Sampler`",N,N],[8,"AnimationSampling","","Master trait used to define animation sampling on a component",N,N],[16,"Primitive","","The interpolation primitive",38,N],[16,"Channel","","An independent grouping or type of functions that operate on attributes of a component",38,N],[10,"apply_sample","","Apply a sample to a channel",38,N],[10,"current_sample","","Get the current sample for a channel",38,N],[10,"default_primitive","","Get default primitive",38,N],[10,"blend_method","","Get blend config",38,N],[8,"ApplyData","","Extra data to extract from `World`, for use when applying or fetching a sample",N,N],[16,"ApplyData","","The actual data, must implement `SystemData`",39,N],[11,"interpolate","","",0,N],[11,"deserialize","","",0,[[["__d"]],["result",["interpolationfunction"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["interpolationfunction"]]],[11,"eq","","",0,[[["self"],["interpolationfunction"]],["bool"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]]],"paths":[[4,"InterpolationFunction"],[8,"InterpolationPrimitive"],[3,"AnimatablePrefab"],[3,"AnimationHierarchyPrefab"],[3,"AnimationPrefab"],[3,"AnimationSetPrefab"],[3,"Animation"],[3,"AnimationControl"],[3,"AnimationControlSet"],[3,"AnimationHierarchy"],[3,"AnimationSet"],[3,"Sampler"],[3,"SamplerControl"],[3,"SamplerControlSet"],[3,"Joint"],[3,"JointPrefab"],[3,"Skin"],[3,"SkinPrefab"],[3,"SkinnablePrefab"],[4,"MaterialChannel"],[4,"MaterialPrimitive"],[4,"AnimationCommand"],[4,"BlendMethod"],[4,"ControlState"],[4,"DeferStartRelation"],[4,"EndControl"],[4,"StepDirection"],[4,"SpriteRenderChannel"],[4,"SpriteRenderPrimitive"],[4,"TransformChannel"],[4,"SamplerPrimitive"],[3,"VertexSkinningBundle"],[3,"SamplingBundle"],[3,"AnimationBundle"],[3,"RestState"],[3,"VertexSkinningSystem"],[3,"AnimationControlSystem"],[3,"SamplerInterpolationSystem"],[8,"AnimationSampling"],[8,"ApplyData"]]};
searchIndex["amethyst_assets"]={"doc":"amethyst_assets","items":[[4,"PrefabError","amethyst_assets","The Specs error type. This is an enum which is able to represent all error types of this library.",N,N],[13,"Custom","","A custom, boxed error.",0,N],[13,"WrongGeneration","","Wrong generation error.",0,N],[3,"FormatValue","","The `Ok` return value of `Format::import` for a given asset type `A`.",N,N],[12,"data","","The format data.",1,N],[12,"reload","","An optional reload structure",1,N],[3,"Cache","","A simple cache for asset handles of type `A`. This stores `WeakHandle`, so it doesn't keep the assets alive.",N,N],[3,"Error","","The Error type.",N,N],[12,"0","","The kind of the error.",2,N],[3,"RonFormat","","Format for loading from Ron files.",N,N],[3,"Loader","","The asset loader, holding the sources and a reference to the `ThreadPool`.",N,N],[3,"Prefab","","Main `Prefab` structure, containing all data loaded in a single prefab.",N,N],[3,"PrefabLoader","","Helper structure for loading prefabs.",N,N],[3,"PrefabLoaderSystem","","System that load `Prefab`s for `PrefabData` `T`.",N,N],[3,"ProgressCounter","","A progress tracker which is passed to the `Loader` in order to check how many assets are loaded.",N,N],[3,"HotReloadBundle","","This bundle activates hot reload for the `Loader`, adds a `HotReloadStrategy` and the `HotReloadSystem`.",N,N],[3,"HotReloadStrategy","","An ECS resource which allows to configure hot reloading.",N,N],[3,"HotReloadSystem","","System for updating `HotReloadStrategy`.",N,N],[3,"SingleFile","","An implementation of `Reload` which just stores the modification time and the path of the file.",N,N],[3,"Directory","","Directory source.",N,N],[3,"AssetStorage","","An asset storage, storing the actual assets and allocating handles to them.",N,N],[3,"Handle","","A handle to an asset. This is usually what the user deals with, the actual asset (`A`) is stored in an `AssetStorage`.",N,N],[3,"Processor","","A default implementation for an asset processing system which converts data to assets and maintains the asset storage for `A`.",N,N],[3,"WeakHandle","","A weak handle, which is useful if you don't directly need the asset like in caches. This way, the asset can still get dropped (if you want that).",N,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",3,N],[13,"FromUtf8","","Wraps a UTF-8 error",3,N],[13,"Utf8","","Wraps a UTF-8 error",3,N],[13,"Asset","","Returned if an asset with a given name failed to load.",3,N],[13,"Source","","Returned if a source could not retrieve something.",3,N],[13,"Format","","Returned if a format failed to load the asset data.",3,N],[13,"UnusedHandle","","Returned if an asset is loaded and never used.",3,N],[4,"AssetPrefab","","Convenience `PrefabData` for loading assets of type `A` using `Format` `F`.",N,N],[13,"Handle","","From existing handle",4,N],[13,"File","","From file, (name, format, format options)",4,N],[4,"Completion","","Completion status, returned by `ProgressCounter::complete`.",N,N],[13,"Complete","","Loading is complete",5,N],[13,"Failed","","Some asset loads have failed",5,N],[13,"Loading","","Still loading assets",5,N],[4,"ProcessingState","","Returned by processor systems, describes the loading state of the asset.",N,N],[13,"Loading","","Asset is not fully loaded yet, need to wait longer",6,N],[13,"Loaded","","Asset have finished loading, can now be inserted into storage and tracker notified",6,N],[11,"data","","Creates a `FormatValue` from only the data (setting `reload` to `None`).",1,N],[11,"default","","",7,[[],["self"]]],[11,"new","","Creates a new `Cache` and initializes it with the default values.",7,[[],["self"]]],[11,"insert","","Inserts an asset with a given `key` and returns the old value (if any).",7,[[["self"],["k"],["handle"]],["option",["weakhandle"]]]],[11,"get","","Retrieves an asset handle using a given `key`.",7,[[["self"],["k"]],["option",["handle"]]]],[11,"clear_dead","","Deletes all cached handles which are invalid.",7,[[["self"]]]],[11,"clear_all","","Clears all values.",7,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","",2,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",2,N],[11,"with_chain","","",2,[[["e"],["k"]],["self"]]],[11,"kind","","",2,N],[11,"iter","","",2,[[["self"]],["iter"]]],[11,"chain_err","","",2,[[["self"],["f"]],["self"]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",2,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",2,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",2,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",2,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",2,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",2,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",2,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",2,[[["self"]],["str"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["fromutf8error"]],["self"]]],[11,"from","","",2,[[["utf8error"]],["self"]]],[11,"from","","",2,[[["errorkind"]],["self"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["string"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",3,[[["self"]],["str"]]],[11,"from","","",3,[[["str"]],["self"]]],[11,"from","","",3,[[["string"]],["self"]]],[11,"from","","",3,[[["error"]],["self"]]],[11,"default","","",8,[[],["ronformat"]]],[11,"clone","","",8,[[["self"]],["ronformat"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"import","","",8,N],[11,"new","","Creates a new asset loader, initializing the directory store with the given path.",9,[[["p"],["arc",["threadpool"]]],["self"]]],[11,"add_source","","Add a source to the `Loader`, given an id and the source.",9,[[["self"],["i"],["s"]]]],[11,"set_hot_reload","","If set to `true`, this `Loader` will ask formats to generate \"reload instructions\" which allow reloading. Calling `set_hot_reload(true)` does not actually enable hot reloading; this is controlled by the `HotReloadStrategy` resource.",9,[[["self"],["bool"]]]],[11,"load","","Loads an asset with a given format from the default (directory) source. If you want to load from a custom source instead, use `load_from`.",9,N],[11,"load_from","","Loads an asset with a given id and format from a custom source. The actual work is done in a worker thread, thus this method immediately returns a handle.",9,N],[11,"load_from_data","","Load an asset from data and return a handle.",9,N],[11,"default","","",10,[[],["self"]]],[11,"run","","",10,N],[11,"setup","","",10,[[["self"],["resources"]]]],[11,"default","","",11,[[],["prefab"]]],[11,"new","","Create new empty prefab",11,[[],["self"]]],[11,"new_main","","Create a prefab with data for only the main `Entity`",11,[[["t"]],["self"]]],[11,"main","","Set main `Entity` data",11,[[["self"],["option"]]]],[11,"add","","Add a new entity to the prefab, with optional data and parent.",11,[[["self"],["option",["usize"]],["option"]],["usize"]]],[11,"len","","Number of entities in the prefab, including the main entity",11,[[["self"]],["usize"]]],[11,"new_entity","","Create a new entity in the prefab, with no data and no parent",11,[[["self"]],["usize"]]],[11,"entity","","Get mutable access to the `PrefabEntity` with the given index",11,[[["self"],["usize"]],["option",["prefabentity"]]]],[11,"entities","","Get immutable access to all entities in the prefab",11,[[["self"]],[""]]],[11,"data_or_default","","Get mutable access to the data in the `PrefabEntity` with the given index",11,[[["self"],["usize"]],["t"]]],[11,"loading","","Check if sub asset loading have been triggered",11,[[["self"]],["bool"]]],[11,"progress","","Get the `ProgressCounter` for the sub asset loading.",11,[[["self"]],["progresscounter"]]],[11,"trigger_sub_loading","","Trigger sub asset loading for the asset",11,N],[11,"clone","","",4,[[["self"]],["assetprefab"]]],[11,"load_prefab","","",4,N],[11,"setup","","",12,[[["resources"]]]],[11,"fetch","","",12,[[["resources"]],["self"]]],[11,"reads","","",12,[[],["vec",["resourceid"]]]],[11,"writes","","",12,[[],["vec",["resourceid"]]]],[11,"load","","Load prefab from source",12,N],[11,"load_from_data","","Load prefab from explicit data",12,[[["self"],["prefab"],["p"]],["handle",["prefab"]]]],[11,"clone","","",5,[[["self"]],["completion"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["completion"]],["bool"]]],[11,"default","","",13,[[],["progresscounter"]]],[11,"new","","Creates a new `Progress` struct.",13,[[],["self"]]],[11,"errors","","Removes all errors and returns them.",13,[[["self"]],["vec",["asseterrormeta"]]]],[11,"num_assets","","Returns the number of assets this struct is tracking.",13,[[["self"]],["usize"]]],[11,"num_failed","","Returns the number of assets that have failed.",13,[[["self"]],["usize"]]],[11,"num_loading","","Returns the number of assets that are still loading.",13,[[["self"]],["usize"]]],[11,"num_finished","","Returns the number of assets this struct is tracking.",13,[[["self"]],["usize"]]],[11,"complete","","Returns `Completion::Complete` if all tracked assets are finished.",13,[[["self"]],["completion"]]],[11,"is_complete","","Returns `true` if all assets have been imported without error.",13,[[["self"]],["bool"]]],[11,"default","","",14,[[],["hotreloadbundle"]]],[11,"new","","Creates a new bundle.",14,[[["hotreloadstrategy"]],["self"]]],[11,"build","","",14,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"clone","","",15,[[["self"]],["hotreloadstrategy"]]],[11,"every","","Causes hot reloads every `n` seconds.",15,[[["u8"]],["self"]]],[11,"when_triggered","","This allows to use `trigger` for hot reloading.",15,[[],["self"]]],[11,"never","","Never do any hot-reloading.",15,[[],["self"]]],[11,"trigger","","The frame after calling this, all changed assets will be reloaded. Doesn't do anything if the strategy wasn't created with `when_triggered`.",15,[[["self"]]]],[11,"default","","",15,[[],["self"]]],[11,"new","","Create a new reload system",16,[[["hotreloadstrategy"]],["self"]]],[11,"run","","",16,N],[11,"setup","","",16,[[["self"],["resources"]]]],[11,"new","","Creates a new `SingleFile` reload object.",17,N],[11,"clone","","",17,[[["self"]],["self"]]],[11,"needs_reload","","",17,[[["self"]],["bool"]]],[11,"name","","",17,[[["self"]],["string"]]],[11,"format","","",17,[[["self"]],["str"]]],[11,"reload","","",17,[[["box"]],["result",["formatvalue"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new directory storage.",18,[[["p"]],["self"]]],[11,"modified","","",18,[[["self"],["str"]],["result",["u64"]]]],[11,"load","","",18,[[["self"],["str"]],["result",["vec"]]]],[11,"new","","Creates a new asset storage.",19,[[],["self"]]],[11,"clone_asset","","When cloning an asset handle, you'll get another handle, but pointing to the same asset. If you instead want to indeed create a new asset, you can use this method. Note however, that it needs a mutable borrow of `self`, so it can't be used in parallel.",19,[[["self"],["handle"]],["option",["handle"]]]],[11,"get","","Get an asset from a given asset handle.",19,[[["self"],["handle"]],["option"]]],[11,"get_mut","","Get an asset mutably from a given asset handle.",19,[[["self"],["handle"]],["option"]]],[11,"process","","Process finished asset data and maintain the storage.",19,[[["self"],["f"],["u64"],["threadpool"],["option",["hotreloadstrategy"]]]]],[11,"process_custom_drop","","Process finished asset data and maintain the storage. This calls the `drop_fn` closure for assets that were removed from the storage.",19,[[["self"],["f"],["d"],["u64"],["threadpool"],["option",["hotreloadstrategy"]]]]],[11,"default","","",19,[[],["self"]]],[11,"drop","","",19,[[["self"]]]],[11,"new","","Creates a new asset processor for assets of type `A`.",20,[[],["self"]]],[11,"run","","",20,N],[11,"clone","","",21,[[["self"]],["self"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"hash","","",21,[[["self"],["__ha"]]]],[11,"eq","","",21,[[["self"],["self"]],["bool"]]],[11,"id","","Return the 32 bit id of this handle.",21,[[["self"]],["u32"]]],[11,"downgrade","","Downgrades the handle and creates a `WeakHandle`.",21,[[["self"]],["weakhandle"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"upgrade","","Tries to upgrade to a `Handle`.",22,[[["self"]],["option",["handle"]]]],[11,"is_dead","","Returns `true` if the original handle is dead.",22,[[["self"]],["bool"]]],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"Asset","","One of the three core traits of this crate.",N,N],[18,"NAME","","An identifier for this asset used for debugging.",23,N],[16,"Data","","The `Data` type the asset can be created from.",23,N],[16,"HandleStorage","","The ECS storage type to be used. You'll want to use `VecStorage` in most cases.",23,N],[8,"Format","","A format, providing a conversion from bytes to asset data, which is then in turn accepted by `Asset::from_data`. Examples for formats are `Png`, `Obj` and `Wave`.",N,N],[18,"NAME","","A unique identifier for this format.",24,N],[16,"Options","","Options specific to the format, which are passed to `import`. E.g. for textures this would be stuff like mipmap levels and sampler info.",24,N],[10,"import","","Reads the given bytes and produces asset data.",24,N],[8,"SimpleFormat","","This is a simplified version of `Format`, which doesn't give you as much freedom, but in return is simpler to implement. All `SimpleFormat` types automatically implement `Format`. This format assumes that the asset name is the full path and the asset is only contained in one file.",N,N],[18,"NAME","","A unique identifier for this format.",25,N],[16,"Options","","Options specific to the format, which are passed to `import`. E.g. for textures this would be stuff like mipmap levels and sampler info.",25,N],[10,"import","","Produces asset data from given bytes.",25,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",26,[[["self"],["f"]],["result",["error"]]]],[8,"PrefabData","","Trait for loading a prefabs data for a single entity",N,N],[16,"SystemData","","`SystemData` needed to perform the load",27,N],[16,"Result","","The result type returned by the load operation",27,N],[10,"load_prefab","","Load the data for this prefab onto the given `Entity`",27,N],[11,"trigger_sub_loading","","Trigger asset loading for any sub assets.",27,N],[8,"Progress","","The `Progress` trait, allowing to track which assets are imported already.",N,N],[16,"Tracker","","The tracker this progress can create.",28,N],[10,"add_assets","","Add `num` assets to the progress. This should be done whenever a new asset is put in the queue.",28,[[["self"],["usize"]]]],[10,"create_tracker","","Creates a `Tracker`.",28,N],[8,"Tracker","","The `Tracker` trait which will be used by the loader to report back to `Progress`.",N,N],[10,"success","","Called if the asset could be imported.",29,[[["box"]]]],[10,"fail","","Called if the asset couldn't be imported to an error.",29,[[["box"],["u32"],["str"],["string"],["error"]]]],[8,"Reload","","The `Reload` trait provides a method which checks if an asset needs to be reloaded.",N,N],[10,"needs_reload","","Checks if a reload is necessary.",30,[[["self"]],["bool"]]],[10,"name","","Returns the asset name.",30,[[["self"]],["string"]]],[10,"format","","Returns the format name.",30,[[["self"]],["str"]]],[10,"reload","","Reloads the asset.",30,[[["box"]],["result",["formatvalue"]]]],[8,"Source","","A trait for asset sources, which provides methods for loading bytes.",N,N],[10,"modified","","This is called to check if an asset has been modified.",31,[[["self"],["str"]],["result",["u64"]]]],[10,"load","","Loads the bytes given a path.",31,[[["self"],["str"]],["result",["vec"]]]],[11,"load_with_metadata","","Returns both the result of `load` and `modified` as a tuple. There's a default implementation which just calls both methods, but you may be able to provide a more optimized version yourself.",31,[[["self"],["str"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"from","","",0,[[["noerror"]],["error"]]],[11,"from","","",0,[[["wronggeneration"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[18,"NAME","","An identifier for this asset used for debugging.",23,N],[18,"NAME","","A unique identifier for this format.",24,N],[18,"NAME","","A unique identifier for this format.",25,N],[11,"trigger_sub_loading","","Trigger asset loading for any sub assets.",27,N],[11,"load_with_metadata","","Returns both the result of `load` and `modified` as a tuple. There's a default implementation which just calls both methods, but you may be able to provide a more optimized version yourself.",31,[[["self"],["str"]],["result"]]]],"paths":[[4,"PrefabError"],[3,"FormatValue"],[3,"Error"],[4,"ErrorKind"],[4,"AssetPrefab"],[4,"Completion"],[4,"ProcessingState"],[3,"Cache"],[3,"RonFormat"],[3,"Loader"],[3,"PrefabLoaderSystem"],[3,"Prefab"],[3,"PrefabLoader"],[3,"ProgressCounter"],[3,"HotReloadBundle"],[3,"HotReloadStrategy"],[3,"HotReloadSystem"],[3,"SingleFile"],[3,"Directory"],[3,"AssetStorage"],[3,"Processor"],[3,"Handle"],[3,"WeakHandle"],[8,"Asset"],[8,"Format"],[8,"SimpleFormat"],[8,"ResultExt"],[8,"PrefabData"],[8,"Progress"],[8,"Tracker"],[8,"Reload"],[8,"Source"]]};
searchIndex["amethyst_audio"]={"doc":"Loading and playing of audio files.","items":[[3,"AudioBundle","amethyst_audio","Audio bundle",N,N],[3,"AudioEmitter","","An audio source, add this component to anything that emits sound.",N,N],[3,"AudioListener","","An audio listener, add this component to the local player character.",N,N],[12,"output","","Output used by this listener to emit sounds to",0,N],[12,"left_ear","","Position of the left ear relative to the global transform on this entity.",0,N],[12,"right_ear","","Position of the right ear relative to the global transform on this entity.",0,N],[3,"AudioPrefab","","`PrefabData` for loading audio components",N,N],[3,"FlacFormat","","Loads audio from Flac files.",N,N],[3,"Mp3Format","","Loads audio from MP3 files.",N,N],[3,"OggFormat","","Loads audio from Ogg Vorbis files",N,N],[3,"WavFormat","","Loads audio from wav files.",N,N],[3,"AudioSink","","This structure provides a way to programmatically pick and play music.",N,N],[3,"Source","","A loaded audio file",N,N],[12,"bytes","","The bytes of this audio source.",1,N],[3,"AudioSystem","","Syncs 3D transform data with the audio engine to provide 3D audio.",N,N],[3,"DjSystem","","Calls a closure if the `AudioSink` is empty.",N,N],[3,"DecoderError","","An error occurred while decoding the source.",N,N],[4,"AudioFormat","","Aggregate sound format",N,N],[13,"Ogg","","Ogg",2,N],[13,"Wav","","Wav",2,N],[13,"Flac","","Flac",2,N],[13,"Mp3","","Mp3",2,N],[0,"output","","Provides structures and functions used to get audio outputs.",N,N],[3,"Output","amethyst_audio::output","A speaker(s) through which audio can be played.",N,N],[3,"OutputIterator","","An iterator over outputs",N,N],[5,"default_output","","Get the default output, returns none if no outputs are available.",N,[[],["option",["output"]]]],[5,"outputs","","Get a list of outputs available to the system.",N,[[],["outputiterator"]]],[5,"init_output","","Initialize default output",N,[[["resources"]]]],[11,"clone","","",3,[[["self"]],["output"]]],[11,"eq","","",3,[[["self"],["output"]],["bool"]]],[11,"ne","","",3,[[["self"],["output"]],["bool"]]],[11,"name","","Gets the name of the output",3,[[["self"]],["string"]]],[11,"try_play_once","","Play a sound once.  A volume of 1.0 is unchanged, while 0.0 is silent.",3,[[["self"],["source"],["f32"]],["result",["decodererror"]]]],[11,"play_once","","Play a sound once. A volume of 1.0 is unchanged, while 0.0 is silent.",3,[[["self"],["source"],["f32"]]]],[11,"play_n_times","","Play a sound n times. A volume of 1.0 is unchanged, while 0.0 is silent.",3,[[["self"],["source"],["f32"],["u16"]]]],[11,"try_play_n_times","","Play a sound n times. A volume of 1.0 is unchanged, while 0.0 is silent.",3,[[["self"],["source"],["f32"],["u16"]],["result",["decodererror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["fmtresult"]]],[11,"next","","",4,[[["self"]],["option",["output"]]]],[11,"new","amethyst_audio","Create a new DJ bundle",5,[[["f"]],["self"]]],[11,"with_dep","","Set dependencies for the `DjSystem`",5,N],[11,"build","","",5,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"default","","",6,[[],["audioemitter"]]],[11,"new","","Creates a new AudioEmitter component initialized to the given positions. These positions will stay synced with Transform if the Transform component is available on this entity.",6,[[],["audioemitter"]]],[11,"play","","Plays an audio source from this emitter.",6,[[["self"],["source"]],["result",["decodererror"]]]],[11,"set_picker","","An emitter's picker will be called by the AudioSystem whenever the emitter runs out of sounds to play.",6,[[["self"],["box",["fnmut"]]]]],[11,"clear_picker","","Clears the previously set picker.",6,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["audioprefab"]]],[11,"default","","",7,[[],["audioprefab"]]],[11,"load_prefab","","",7,N],[11,"clone","","",8,[[["self"]],["wavformat"]]],[11,"import","","",8,N],[11,"clone","","",9,[[["self"]],["oggformat"]]],[11,"import","","",9,N],[11,"clone","","",10,[[["self"]],["flacformat"]]],[11,"import","","",10,N],[11,"clone","","",11,[[["self"]],["mp3format"]]],[11,"import","","",11,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["audioformat"]]],[11,"import","","",2,N],[11,"new","","Creates a new `AudioSink` using the given audio output.",12,[[["output"]],["audiosink"]]],[11,"append","","Adds a source to the sink's queue of music to play.",12,[[["self"],["source"]],["result",["decodererror"]]]],[11,"empty","","Returns true if the sink has no more music to play.",12,[[["self"]],["bool"]]],[11,"volume","","Retrieves the volume of the sink, between 0.0 and 1.0;",12,[[["self"]],["f32"]]],[11,"set_volume","","Sets the volume of the sink.",12,[[["self"],["f32"]]]],[11,"play","","Resumes playback of a paused sink. Has no effect if this sink was never paused.",12,[[["self"]]]],[11,"pause","","Pauses playback, this can be resumed with `AudioSink::play`",12,[[["self"]]]],[11,"is_paused","","Returns true if the sink is currently paused.",12,[[["self"]],["bool"]]],[11,"stop","","Empties the sink's queue of all music.",12,[[["self"]]]],[11,"clone","","",1,[[["self"]],["source"]]],[11,"as_ref","","",1,N],[11,"default","","",13,[[],["audiosystem"]]],[11,"new","","Produces a new AudioSystem that uses the given listener.",13,[[],["audiosystem"]]],[11,"run","","",13,N],[11,"new","","Creates a new `DjSystem` with the music picker being `f`. The closure takes a parameter, which needs to be a reference to a resource type, e.g. `&MusicLibrary`. This resource will be fetched by the system and passed to the picker.",14,[[["f"]],["self"]]],[11,"run","","",14,N],[11,"setup","","",14,[[["self"],["resources"]]]],[6,"SourceHandle","","A handle to a source asset.",N,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["fmtresult"]]],[11,"description","","",15,[[["self"]],["str"]]],[11,"cause","","",15,[[["self"]],["option",["error"]]]]],"paths":[[3,"AudioListener"],[3,"Source"],[4,"AudioFormat"],[3,"Output"],[3,"OutputIterator"],[3,"AudioBundle"],[3,"AudioEmitter"],[3,"AudioPrefab"],[3,"WavFormat"],[3,"OggFormat"],[3,"FlacFormat"],[3,"Mp3Format"],[3,"AudioSink"],[3,"AudioSystem"],[3,"DjSystem"],[3,"DecoderError"]]};
searchIndex["amethyst_config"]={"doc":"Loads RON files into a structure for easy / statically typed usage.","items":[[4,"ConfigError","amethyst_config","Error related to anything that manages/creates configurations as well as \"workspace\"-related things.",N,N],[13,"File","","Forward to the `std::io::Error` error.",0,N],[13,"Parser","","Errors related to serde's parsing of configuration files.",0,N],[13,"Serializer","","Occurs if a value is ill-formed during serialization (like a poisoned mutex).",0,N],[13,"Extension","","Related to the path of the file.",0,N],[8,"Config","","Trait implemented by the `config!` macro.",N,N],[10,"load","","Loads a configuration structure from a file. Defaults if the file fails in any way.",1,[[["p"]],["self"]]],[10,"load_no_fallback","","Loads a configuration structure from a file.",1,[[["p"]],["result",["configerror"]]]],[10,"write","","Writes a configuration structure to a file.",1,[[["self"],["p"]],["result",["configerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["configerror"]]],[11,"from","","",0,[[["deerror"]],["self"]]],[11,"from","","",0,[[["sererror"]],["self"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]]],"paths":[[4,"ConfigError"],[8,"Config"]]};
searchIndex["amethyst_controls"]={"doc":"Amethyst control crate.","items":[[3,"ArcBallControlBundle","amethyst_controls","The bundle that creates an arc ball movement system. Note: Will not actually create a moving entity. It will only register the needed resources and systems. The generic parameters A and B are the ones used in InputHandler<A,B>. You might want to add \"fly_movement\" and \"free_rotation\" as dependencies of the TransformSystem. Adding this bundle will grab the mouse, hide it and keep it centered.",N,N],[3,"FlyControlBundle","","The bundle that creates a flying movement system. Note: Will not actually create a moving entity. It will only register the needed resources and systems. The generic parameters A and B are the ones used in InputHandler<A,B>. You might want to add \"fly_movement\" and \"free_rotation\" as dependencies of the TransformSystem. Adding this bundle will grab the mouse, hide it and keep it centered.",N,N],[3,"ArcBallControlTag","","To add an arc ball behaviour, add this to a camera which already has the FlyControlTag added.",N,N],[12,"target","","",0,N],[12,"distance","","",0,N],[3,"ControlTagPrefab","","`PrefabData` for loading control tags on an `Entity`",N,N],[12,"arc_ball","","Place `ArcBallControlTag` on the `Entity`",1,N],[3,"FlyControlTag","","Add this to a camera if you want it to be a fly camera. You need to add the FlyControlBundle or the required systems for it to work.",N,N],[3,"HideCursor","","Resource indicating if the mouse should be grabbed and hidden by the CursorHideSystem when the window is focused.",N,N],[12,"hide","","",2,N],[3,"WindowFocus","","Struct which holds information about whether the window is focused. Written to by MouseFocusUpdateSystem",N,N],[12,"is_focused","","",3,N],[3,"ArcBallRotationSystem","","The system that manages the arc ball movement; In essence, the system will allign the camera with its target while keeping the distance to it and while keeping the orientation of the camera. To modify the orientation of the camera in accordance with the mouse input, please use the FreeRotationSystem.",N,N],[3,"CursorHideSystem","","System which hides the cursor when the window is focused. Requires the usage MouseFocusUpdateSystem at the same time.",N,N],[3,"FlyMovementSystem","","The system that manages the fly movement. Generic parameters are the parameters for the InputHandler.",N,N],[3,"FreeRotationSystem","","The system that manages the view rotation. Controlled by the mouse.",N,N],[3,"MouseFocusUpdateSystem","","A system which reads Events and saves if a window has lost focus in a WindowFocus resource",N,N],[11,"new","","",4,[[["option"],["option"],["option"]],["self"]]],[11,"with_sensitivity","","",4,[[["self"],["f32"],["f32"]],["self"]]],[11,"with_speed","","",4,[[["self"],["f32"]],["self"]]],[11,"build","","",4,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"new","","",5,[[],["self"]]],[11,"with_sensitivity","","",5,[[["self"],["f32"],["f32"]],["self"]]],[11,"build","","",5,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"default","","",6,[[],["flycontroltag"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["arcballcontroltag"]]],[11,"default","","",1,[[],["controltagprefab"]]],[11,"clone","","",1,[[["self"]],["controltagprefab"]]],[11,"load_prefab","","",1,N],[11,"default","","",3,[[],["windowfocus"]]],[11,"new","","",3,[[],["windowfocus"]]],[11,"default","","",2,[[],["self"]]],[11,"new","","",7,[[["f32"],["option"],["option"],["option"]],["self"]]],[11,"run","","",7,N],[11,"default","","",8,[[],["arcballrotationsystem"]]],[11,"run","","",8,N],[11,"new","","",9,[[["f32"],["f32"]],["self"]]],[11,"run","","",9,N],[11,"setup","","",9,[[["self"],["resources"]]]],[11,"new","","",10,[[],["mousefocusupdatesystem"]]],[11,"run","","",10,N],[11,"setup","","",10,[[["self"],["resources"]]]],[11,"new","","",11,[[],["cursorhidesystem"]]],[11,"run","","",11,N],[11,"setup","","",11,[[["self"],["resources"]]]]],"paths":[[3,"ArcBallControlTag"],[3,"ControlTagPrefab"],[3,"HideCursor"],[3,"WindowFocus"],[3,"FlyControlBundle"],[3,"ArcBallControlBundle"],[3,"FlyControlTag"],[3,"FlyMovementSystem"],[3,"ArcBallRotationSystem"],[3,"FreeRotationSystem"],[3,"MouseFocusUpdateSystem"],[3,"CursorHideSystem"]]};
searchIndex["amethyst_core"]={"doc":"","items":[[3,"Named","amethyst_core","A component that gives a name to an [`Entity`].",N,N],[12,"name","","",0,N],[3,"Orientation","","This struct contains 3 unit vectors pointing in the given directions.",N,N],[12,"forward","","Forward vector [x, y, z]",1,N],[12,"right","","Right vector [x, y, z]",1,N],[12,"up","","Up vector [x, y, z]",1,N],[4,"Axis2","","A two dimensional axis.",N,N],[13,"X","","The X axis. Often the horizontal (left-right) position.",2,N],[13,"Y","","The Y axis. Often the vertical height.",2,N],[4,"Axis3","","A three dimensional axis.",N,N],[13,"X","","The X axis. Often the horizontal (left-right) position.",3,N],[13,"Y","","The Y axis. Often the vertical height.",3,N],[13,"Z","","The Z axis. Often the depth.",3,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["axis2"]]],[11,"eq","","",2,[[["self"],["axis2"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["axis3"]]],[11,"eq","","",3,[[["self"],["axis3"]],["bool"]]],[0,"bundle","","",N,N],[3,"Error","amethyst_core::bundle","The Error type.",N,N],[12,"0","","The kind of the error.",4,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",5,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",6,[[["self"],["f"]],["result",["error"]]]],[8,"SystemBundle","","A bundle of ECS components, resources and systems.",N,N],[10,"build","","Build and add ECS resources, register components, add systems etc to the Application.",7,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","",4,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",4,N],[11,"with_chain","","",4,[[["e"],["k"]],["self"]]],[11,"kind","","",4,N],[11,"iter","","",4,[[["self"]],["iter"]]],[11,"chain_err","","",4,[[["self"],["f"]],["self"]]],[11,"backtrace","","",4,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",4,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",4,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",4,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",4,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",4,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",4,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",4,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",4,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",4,[[["self"]],["str"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"cause","","",4,[[["self"]],["option",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["errorkind"]],["self"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"from","","",4,[[["string"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",5,[[["self"]],["str"]]],[11,"from","","",5,[[["str"]],["self"]]],[11,"from","","",5,[[["string"]],["self"]]],[11,"from","","",5,[[["error"]],["self"]]],[0,"frame_limiter","amethyst_core","Frame rate limiting.",N,N],[3,"FrameRateLimitConfig","amethyst_core::frame_limiter","Frame limiting configuration loaded from a configuration file.",N,N],[3,"FrameLimiter","","Frame limiter resource.",N,N],[4,"FrameRateLimitStrategy","","Frame rate limiting strategy.",N,N],[13,"Unlimited","","No limit, will do a single yield and then continue with the next frame.",8,N],[13,"Yield","","Yield repeatedly until the frame duration has passed.",8,N],[13,"Sleep","","Sleep repeatedly until the frame duration has passed.",8,N],[13,"SleepAndYield","","Use sleep and yield combined.",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["frameratelimitstrategy"]]],[11,"default","","",8,[[],["self"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["frameratelimitconfig"]]],[11,"default","","",9,[[],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"default","","",10,[[],["self"]]],[11,"new","","Creates a new frame limiter.",10,[[["frameratelimitstrategy"],["u32"]],["self"]]],[11,"set_rate","","Sets the maximum fps and frame rate limiting strategy.",10,[[["self"],["frameratelimitstrategy"],["u32"]]]],[11,"from_config","","Creates a new frame limiter with the given config.",10,[[["frameratelimitconfig"]],["self"]]],[11,"start","","Resets the frame start time to the current instant.",10,[[["self"]]]],[11,"wait","","Blocks the current thread until the allotted frame time has passed.",10,[[["self"]]]],[11,"fmt","amethyst_core","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["named"]]],[11,"new","","Constructs a new `Named` from a string.",0,[[["s"]],["self"]]],[11,"clone","","",1,[[["self"]],["orientation"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["orientation"]],["bool"]]],[11,"ne","","",1,[[["self"],["orientation"]],["bool"]]],[11,"from","","Performs the conversion.",1,[[["matrix3",["f32"]]],["self"]]],[11,"default","","",1,[[],["self"]]],[0,"timing","","Utilities for working with time.",N,N],[3,"Time","amethyst_core::timing","Frame timing values.",N,N],[12,"last_fixed_update","","Time at which `State::fixed_update` was last called.",11,N],[4,"Stopwatch","","A stopwatch which accurately measures elapsed time.",N,N],[13,"Waiting","","Initial state with an elapsed time value of 0 seconds.",12,N],[13,"Started","","Stopwatch has started counting the elapsed time since this `Instant` and accumuluated time from previous start/stop cycles `Duration`.",12,N],[13,"Ended","","Stopwatch has been stopped and reports the elapsed time `Duration`.",12,N],[5,"duration_to_secs","","Converts a Duration to the time in seconds.",N,[[["duration"]],["f32"]]],[5,"duration_to_secs_f64","","Converts a Duration to the time in seconds in an f64.",N,[[["duration"]],["f64"]]],[5,"secs_to_duration","","Converts a time in seconds to a duration",N,[[["f32"]],["duration"]]],[5,"duration_to_nanos","","Converts a Duration to nanoseconds",N,[[["duration"]],["u64"]]],[5,"nanos_to_duration","","Converts nanoseconds to a Duration",N,[[["u64"]],["duration"]]],[11,"clone","","",11,[[["self"]],["time"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["time"]],["bool"]]],[11,"ne","","",11,[[["self"],["time"]],["bool"]]],[11,"delta_seconds","","Gets the time difference between frames in seconds.",11,[[["self"]],["f32"]]],[11,"delta_time","","Gets the time difference between frames.",11,[[["self"]],["duration"]]],[11,"delta_real_seconds","","Gets the time difference between frames in seconds ignoring the time speed multiplier.",11,[[["self"]],["f32"]]],[11,"delta_real_time","","Gets the time difference between frames ignoring the time speed multiplier.",11,[[["self"]],["duration"]]],[11,"fixed_seconds","","Gets the fixed time step in seconds.",11,[[["self"]],["f32"]]],[11,"fixed_time","","Gets the fixed time step.",11,[[["self"]],["duration"]]],[11,"frame_number","","Gets the current frame number.  This increments by 1 every frame.  There is no frame 0.",11,[[["self"]],["u64"]]],[11,"last_fixed_update","","Gets the time at which the last fixed update was called.",11,[[["self"]],["instant"]]],[11,"absolute_time","","Gets the time since the start of the game, taking into account the speed multiplier.",11,[[["self"]],["duration"]]],[11,"absolute_time_seconds","","Gets the time since the start of the game as seconds, taking into account the speed multiplier.",11,[[["self"]],["f64"]]],[11,"absolute_real_time","","Gets the time since the start of the game, ignoring the speed multiplier.",11,[[["self"]],["duration"]]],[11,"absolute_real_time_seconds","","Gets the time since the start of the game as seconds, ignoring the speed multiplier.",11,[[["self"]],["f64"]]],[11,"time_scale","","Gets the current time speed multiplier.",11,[[["self"]],["f32"]]],[11,"set_delta_seconds","","Gets the total number of frames that have been played in this session. Sets both `delta_seconds` and `delta_time` based on the seconds given.",11,[[["self"],["f32"]]]],[11,"set_delta_time","","Sets both `delta_time` and `delta_seconds` based on the duration given.",11,[[["self"],["duration"]]]],[11,"set_fixed_seconds","","Sets both `fixed_seconds` and `fixed_time` based on the seconds given.",11,[[["self"],["f32"]]]],[11,"set_fixed_time","","Sets both `fixed_time` and `fixed_seconds` based on the duration given.",11,[[["self"],["duration"]]]],[11,"increment_frame_number","","Increments the current frame number by 1.",11,[[["self"]]]],[11,"set_time_scale","","Sets the time multiplier that affects how time values are computed, effectively slowing or speeding up your game.",11,[[["self"],["f32"]]]],[11,"finish_fixed_update","","Indicates a fixed update just finished.",11,[[["self"]]]],[11,"default","","",11,[[],["time"]]],[11,"clone","","",12,[[["self"]],["stopwatch"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["stopwatch"]],["bool"]]],[11,"ne","","",12,[[["self"],["stopwatch"]],["bool"]]],[11,"default","","",12,[[],["stopwatch"]]],[11,"new","","Creates a new stopwatch.",12,[[],["stopwatch"]]],[11,"elapsed","","Retrieves the elapsed time.",12,[[["self"]],["duration"]]],[11,"restart","","Stops, resets, and starts the stopwatch again.",12,[[["self"]]]],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been started and stopped before, the new results are compounded onto the existing elapsed time value.",12,[[["self"]]]],[11,"stop","","Stops measuring elapsed time.",12,[[["self"]]]],[11,"reset","","Clears the current elapsed time value.",12,[[["self"]]]],[0,"transform","amethyst_core","`amethyst` transform ecs module",N,N],[0,"bundle","amethyst_core::transform","ECS transform bundle",N,N],[3,"TransformBundle","amethyst_core::transform::bundle","Transform bundle",N,N],[11,"default","","",13,[[],["transformbundle"]]],[11,"new","","Create a new transform bundle",13,[[],["self"]]],[11,"with_dep","","Set dependencies for the `TransformSystem`",13,N],[11,"build","","",13,[[["self"],["dispatcherbuilder"]],["result"]]],[0,"components","amethyst_core::transform","Components for the transform processor.",N,N],[4,"HierarchyEvent","amethyst_core::transform::components","Hierarchy events.",N,N],[13,"Modified","","`Entity` was either inserted or modified in the `Hierarchy`",14,N],[13,"Removed","","`Entity` was removed from the `Hierarchy`. Note that this does not mean the `Parent` component was removed from the component storage, just that the `Entity` will no longer be considered to be a part of the `Hierarchy`.",14,N],[3,"Transform","","Local position, rotation, and scale (from parent if it exists).",N,N],[12,"rotation","","Quaternion [w (scalar), x, y, z]",15,N],[12,"scale","","Scale vector [x, y, z]",15,N],[12,"translation","","Translation/position vector [x, y, z]",15,N],[3,"Parent","","Component for defining a parent entity.",N,N],[12,"entity","","The parent entity",16,N],[3,"GlobalTransform","","Performs a global transformation on the entity (transform from origin).",N,N],[12,"0","","",17,N],[11,"clone","","",15,[[["self"]],["transform"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["transform"]],["bool"]]],[11,"ne","","",15,[[["self"],["transform"]],["bool"]]],[11,"look_at","","Makes the entity point towards `position`.",15,[[["self"],["point3",["f32"]],["vector3",["f32"]]],["self"]]],[11,"matrix","","Returns the local object matrix for the transform.",15,[[["self"]],["matrix4",["f32"]]]],[11,"orientation","","Convert this transform's rotation into an Orientation, guaranteed to be 3 unit orthogonal vectors",15,[[["self"]],["orientation"]]],[11,"move_global","","Move relatively to its current position.",15,[[["self"],["vector3",["f32"]]],["self"]]],[11,"move_local","","Move relatively to its current position and orientation.",15,[[["self"],["vector3",["f32"]]],["self"]]],[11,"move_along_global","","Move a distance along an axis.",15,[[["self"],["vector3",["f32"]],["f32"]],["self"]]],[11,"move_along_local","","Move a distance along an axis.",15,[[["self"],["vector3",["f32"]],["f32"]],["self"]]],[11,"move_forward","","Move forward relative to current position and orientation.",15,[[["self"],["f32"]],["self"]]],[11,"move_backward","","Move backward relative to current position and orientation.",15,[[["self"],["f32"]],["self"]]],[11,"move_right","","Move right relative to current position and orientation.",15,[[["self"],["f32"]],["self"]]],[11,"move_left","","Move left relative to current position and orientation.",15,[[["self"],["f32"]],["self"]]],[11,"move_up","","Move up relative to current position and orientation.",15,[[["self"],["f32"]],["self"]]],[11,"move_down","","Move down relative to current position and orientation.",15,[[["self"],["f32"]],["self"]]],[11,"pitch_global","","Pitch relatively to the world.",15,[[["self"],["deg",["f32"]]],["self"]]],[11,"pitch_local","","Pitch relatively to its own rotation.",15,[[["self"],["deg",["f32"]]],["self"]]],[11,"yaw_global","","Yaw relatively to the world.",15,[[["self"],["deg",["f32"]]],["self"]]],[11,"yaw_local","","Yaw relatively to its own rotation.",15,[[["self"],["deg",["f32"]]],["self"]]],[11,"roll_global","","Roll relatively to the world.",15,[[["self"],["deg",["f32"]]],["self"]]],[11,"roll_local","","Roll relatively to its own rotation.",15,[[["self"],["deg",["f32"]]],["self"]]],[11,"rotate_global","","Rotate relatively to the world",15,[[["self"],["vector3",["f32"]],["a"]],["self"]]],[11,"rotate_local","","Rotate relatively to the current orientation",15,[[["self"],["vector3",["f32"]],["a"]],["self"]]],[11,"set_position","","Set the position.",15,[[["self"],["vector3",["f32"]]],["self"]]],[11,"set_rotation","","Set the rotation using Euler x, y, z.",15,[[["self"],["a"],["a"],["a"]],["self"]]],[11,"view_matrix","","Calculates the inverse of this transform, which we need to render.",15,[[["self"]],["matrix4",["f32"]]]],[11,"default","","The default transform does nothing when used to transform an entity.",15,[[],["self"]]],[11,"from","","",15,[[["vector3",["f32"]]],["self"]]],[11,"one","","",15,[[],["self"]]],[11,"look_at","","",15,[[["point3",["f32"]],["point3",["f32"]],["vector3",["f32"]]],["self"]]],[11,"transform_vector","","",15,[[["self"],["vector3",["f32"]]],["vector3",["f32"]]]],[11,"inverse_transform_vector","","",15,[[["self"],["vector3",["f32"]]],["option",["vector3"]]]],[11,"transform_point","","",15,[[["self"],["point3",["f32"]]],["point3",["f32"]]]],[11,"concat","","",15,[[["self"],["self"]],["self"]]],[11,"inverse_transform","","",15,[[["self"]],["option"]]],[11,"one","","",15,[[],["self"]]],[11,"look_at","","",15,[[["point2",["f32"]],["point2",["f32"]],["vector2",["f32"]]],["self"]]],[11,"transform_vector","","",15,[[["self"],["vector2",["f32"]]],["vector2",["f32"]]]],[11,"inverse_transform_vector","","",15,[[["self"],["vector2",["f32"]]],["option",["vector2"]]]],[11,"transform_point","","",15,[[["self"],["point2",["f32"]]],["point2",["f32"]]]],[11,"concat","","",15,[[["self"],["self"]],["self"]]],[11,"inverse_transform","","",15,[[["self"]],["option"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["parent"]]],[11,"cmp","","",16,[[["self"],["parent"]],["ordering"]]],[11,"eq","","",16,[[["self"],["parent"]],["bool"]]],[11,"ne","","",16,[[["self"],["parent"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["parent"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["parent"]],["bool"]]],[11,"le","","",16,[[["self"],["parent"]],["bool"]]],[11,"gt","","",16,[[["self"],["parent"]],["bool"]]],[11,"ge","","",16,[[["self"],["parent"]],["bool"]]],[11,"parent_entity","","",16,[[["self"]],["entity"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["globaltransform"]]],[11,"is_finite","","Checks whether each `f32` of the `GlobalTransform` is finite (not NaN or inf).",17,[[["self"]],["bool"]]],[11,"default","","",17,[[],["self"]]],[11,"new","","Creates a new `GlobalTransform` in the form of an identity matrix.",17,[[],["self"]]],[11,"from","","",17,N],[11,"into","","",17,N],[11,"as_ref","","",17,N],[11,"borrow","","",17,N],[6,"ParentHierarchy","","",N,N],[0,"systems","amethyst_core::transform","Scene graph system and types",N,N],[3,"TransformSystem","amethyst_core::transform::systems","Handles updating `GlobalTransform` components based on the `Transform` component and parents.",N,N],[11,"new","","Creates a new transform processor.",18,[[],["transformsystem"]]],[11,"run","","",18,N],[11,"setup","","",18,[[["self"],["resources"]]]],[6,"ArcThreadPool","amethyst_core","A rayon thread pool wrapped in an `Arc`. This should be used as resource in `World`.",N,N],[8,"WithNamed","","An easy way to name an `Entity` and give it a `Named` `Component`.",N,N],[10,"named","","Adds a name to the entity being built.",19,[[["self"],["s"]],["self"]]]],"paths":[[3,"Named"],[3,"Orientation"],[4,"Axis2"],[4,"Axis3"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"SystemBundle"],[4,"FrameRateLimitStrategy"],[3,"FrameRateLimitConfig"],[3,"FrameLimiter"],[3,"Time"],[4,"Stopwatch"],[3,"TransformBundle"],[4,"HierarchyEvent"],[3,"Transform"],[3,"Parent"],[3,"GlobalTransform"],[3,"TransformSystem"],[8,"WithNamed"]]};
searchIndex["amethyst_gltf"]={"doc":"","items":[[3,"GltfSceneFormat","amethyst_gltf","Gltf scene format, will load a single scene from a Gltf file.",N,N],[3,"GltfPrefab","","`PrefabData` for loading Gltf files.",N,N],[12,"transform","","`Transform` will almost always be placed, the only exception is for the main `Entity` for certain scenarios (based on the data in the Gltf file)",0,N],[12,"mesh","","`MeshData` is placed on all `Entity`s with graphics primitives",0,N],[12,"mesh_handle","","Mesh handle after sub asset loading is done",0,N],[12,"material","","`MeshData` is placed on all `Entity`s with graphics primitives with material",0,N],[12,"animatable","","Loaded animations, if applicable, will always only be placed on the main `Entity`",0,N],[12,"skinnable","","Skin data is placed on `Entity`s involved in the skin, skeleton or graphical primitives using the skin",0,N],[12,"extent","","Node extent",0,N],[12,"name","","Node name",0,N],[3,"GltfNodeExtent","","",N,N],[12,"start","","",1,N],[12,"end","","",1,N],[3,"GltfSceneOptions","","Options used when loading a GLTF file",N,N],[12,"generate_tex_coords","","Generate texture coordinates if none exist in the Gltf file",2,N],[12,"load_animations","","Load animation data from the Gltf file",2,N],[12,"flip_v_coord","","Flip the v coordinate for all texture coordinates",2,N],[12,"scene_index","","Load the given scene index, if not supplied will either load the default scene (if set), or the first scene (only if there is only one scene, otherwise an `Error` will be returned).",2,N],[11,"clone","","",3,[[["self"]],["gltfsceneformat"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"import","","",3,[[["self"],["string"],["arc",["source"]],["gltfsceneoptions"],["bool"]],["assetresult",["formatvalue"]]]],[6,"GltfSceneLoaderSystem","","Load `GltfSceneAsset`s",N,N],[6,"GltfSceneAsset","","Gltf scene asset as returned by the `GltfSceneFormat`",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["gltfprefab"]]],[11,"default","","",0,[[],["gltfprefab"]]],[11,"move_to","","Move the scene so the center of the bounding box is at the given `target` location.",0,[[["self"],["point3",["f32"]]]]],[11,"scale_to","","Scale the scene to a specific max size",0,[[["self"],["f32"]]]],[11,"clone","","",1,[[["self"]],["gltfnodeextent"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["self"]]],[11,"extend_range","","",1,[[["self"],["range"]]]],[11,"extend","","",1,[[["self"],["gltfnodeextent"]]]],[11,"centroid","","",1,[[["self"]],["point3",["f32"]]]],[11,"distance","","",1,[[["self"]],["vector3",["f32"]]]],[11,"valid","","",1,[[["self"]],["bool"]]],[11,"from","","",1,[[["range"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["gltfsceneoptions"]]],[11,"default","","",2,[[],["gltfsceneoptions"]]],[11,"load_prefab","","",0,N],[11,"trigger_sub_loading","","",0,N]],"paths":[[3,"GltfPrefab"],[3,"GltfNodeExtent"],[3,"GltfSceneOptions"],[3,"GltfSceneFormat"]]};
searchIndex["amethyst_input"]={"doc":"","items":[[3,"Bindings","amethyst_input","Used for saving and loading input settings.",N,N],[3,"InputBundle","","Bundle for adding the `InputHandler`.",N,N],[3,"InputHandler","","This struct holds state information about input devices.",N,N],[12,"bindings","","Maps inputs to actions and axes.",0,N],[3,"InputSystem","","Input system",N,N],[4,"Axis","","Represents any input represented by a float value from -1 to 1. Retrieve the value of this with axis_value.",N,N],[13,"Emulated","","Represents an emulated analogue axis made up of pair of digital inputs, like W and S keyboard buttons or `DPadUp` and `DPadDown` controller buttons.",1,N],[12,"pos","amethyst_input::Axis","Positive button, when pressed down axis value will return 1 if `neg` is not pressed down.",1,N],[12,"neg","","Negative button, when pressed down axis value will return -1 if `pos` is not pressed down.",1,N],[13,"Controller","amethyst_input","Represents an analogue axis of a controller.",1,N],[12,"controller_id","amethyst_input::Axis","A number representing specific controller, assigned and reused in order of connection.",1,N],[12,"axis","","",1,N],[12,"invert","","",1,N],[12,"dead_zone","","Treat input values from -dead_zone to dead_zone as 0, linearly interpolate remaining ranges.",1,N],[4,"Button","amethyst_input","A Button is any kind of digital input that the engine supports.",N,N],[13,"Key","","Virtual Keyboard keys, use this when the letter on the key matters more than the position of the key.",2,N],[13,"ScanCode","","Scan code from keyboard, use this when the position of the key matters more than letter on the key.",2,N],[13,"Mouse","","Mouse buttons",2,N],[13,"Controller","","Controller buttons matching SDL controller model. A tuple of sequential controller_id in order of connection and specific type of used controller button.",2,N],[4,"ControllerAxis","","Controller axes matching SDL controller model",N,N],[13,"LeftX","","",3,N],[13,"LeftY","","",3,N],[13,"RightX","","",3,N],[13,"RightY","","",3,N],[13,"LeftTrigger","","",3,N],[13,"RightTrigger","","",3,N],[4,"ControllerButton","","Controller buttons matching SDL controller model",N,N],[13,"A","","",4,N],[13,"B","","",4,N],[13,"X","","",4,N],[13,"Y","","",4,N],[13,"DPadDown","","",4,N],[13,"DPadLeft","","",4,N],[13,"DPadRight","","",4,N],[13,"DPadUp","","",4,N],[13,"LeftShoulder","","",4,N],[13,"RightShoulder","","",4,N],[13,"LeftStick","","",4,N],[13,"RightStick","","",4,N],[13,"Back","","",4,N],[13,"Start","","",4,N],[13,"Guide","","",4,N],[4,"InputEvent","","Events generated by the input system",N,N],[13,"KeyPressed","","A key was pressed down, sent exactly once per key press.",5,N],[12,"key_code","amethyst_input::InputEvent","",5,N],[12,"scancode","","",5,N],[13,"KeyReleased","amethyst_input","A key was released, sent exactly once per key release.",5,N],[12,"key_code","amethyst_input::InputEvent","",5,N],[12,"scancode","","",5,N],[13,"KeyTyped","amethyst_input","A unicode character was received by the window.  Good for typing.",5,N],[13,"MouseButtonPressed","","A mouse button was pressed down, sent exactly once per press.",5,N],[13,"MouseButtonReleased","","A mouse button was released, sent exactly once per release.",5,N],[13,"ButtonPressed","","A button was pressed.",5,N],[13,"ButtonReleased","","A button was released.",5,N],[13,"CursorMoved","","The mouse pointer moved on screen",5,N],[12,"delta_x","amethyst_input::InputEvent","",5,N],[12,"delta_y","","",5,N],[13,"MouseMoved","amethyst_input","The mouse device moved.  Use this for any use of the mouse that doesn't involve a standard mouse pointer.",5,N],[12,"delta_x","amethyst_input::InputEvent","",5,N],[12,"delta_y","","",5,N],[13,"ControllerAxisMoved","amethyst_input","A controller Axis was moved.",5,N],[12,"which","amethyst_input::InputEvent","",5,N],[12,"axis","","",5,N],[12,"value","","",5,N],[13,"ControllerButtonPressed","amethyst_input","A controller button was pressed.",5,N],[12,"which","amethyst_input::InputEvent","",5,N],[12,"button","","",5,N],[13,"ControllerButtonReleased","amethyst_input","A controller button was released.",5,N],[12,"which","amethyst_input::InputEvent","",5,N],[12,"button","","",5,N],[13,"ControllerConnected","amethyst_input","New controller was connected.",5,N],[12,"which","amethyst_input::InputEvent","",5,N],[13,"ControllerDisconnected","amethyst_input","Controller was disconnected, it's id might be reused later.",5,N],[12,"which","amethyst_input::InputEvent","",5,N],[13,"ActionPressed","amethyst_input","The associated action had one of its keys pressed.",5,N],[13,"ActionReleased","","The associated action had one of its keys released.",5,N],[5,"get_input_axis_simple","","Gets the input axis value from the `InputHandler`. If the name is None, it will return the default value of the axis (0.0).",N,[[["option"],["inputhandler"]],["f32"]]],[5,"get_key","","",N,[[["event"]],["option"]]],[5,"is_close_requested","","",N,[[["event"]],["bool"]]],[5,"is_key_down","","",N,[[["event"],["virtualkeycode"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["axis"]],["bool"]]],[11,"ne","","",1,[[["self"],["axis"]],["bool"]]],[11,"clone","","",1,[[["self"]],["axis"]]],[11,"default","","",6,[[],["self"]]],[11,"clone","","",6,[[["self"]],["bindings"]]],[11,"new","","Creates a new empty Bindings structure",6,[[],["self"]]],[11,"insert_axis","","Assign an axis to an ID value",6,[[["self"],["a"],["axis"]],["option",["axis"]]]],[11,"remove_axis","","Removes an axis, this will return the removed axis if successful.",6,[[["self"],["a"]],["option",["axis"]]]],[11,"axis","","Returns a reference to an axis.",6,[[["self"],["a"]],["option",["axis"]]]],[11,"axes","","Gets a list of all axes",6,[[["self"]],["vec"]]],[11,"insert_action_binding","","Add a button to an action.",6,[[["self"],["a"],["button"]]]],[11,"remove_action_binding","","Removes an action binding that was assigned previously.",6,[[["self"],["t"],["button"]]]],[11,"action_bindings","","Returns an action's bindings.",6,[[["self"],["t"]],["option"]]],[11,"actions","","Gets a list of all action bindings",6,[[["self"]],["vec"]]],[11,"default","","",7,[[],["self"]]],[11,"new","","Create a new input bundle with no bindings",7,[[],["self"]]],[11,"with_bindings","","Use the provided bindings with the `InputHandler`",7,[[["self"],["bindings"]],["self"]]],[11,"with_bindings_from_file","","Load bindings from file",7,[[["self"],["p"]],["stdresult",["configerror"]]]],[11,"build","","",7,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"eq","","",2,[[["self"],["button"]],["bool"]]],[11,"ne","","",2,[[["self"],["button"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["button"]]],[11,"from","","",2,[[["virtualkeycode"]],["self"]]],[11,"from","","",2,[[["mousebutton"]],["self"]]],[11,"eq","","",3,[[["self"],["controlleraxis"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["controlleraxis"]]],[11,"eq","","",4,[[["self"],["controllerbutton"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["controllerbutton"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["inputevent"]]],[11,"default","","",0,[[],["self"]]],[11,"new","","Creates a new input handler.",0,[[],["self"]]],[11,"send_event","","Updates the input handler with a new engine event.",0,[[["self"],["event"],["eventchannel"]]]],[11,"send_controller_event","","Updates the input handler with a new controller event.",0,[[["self"],["controllerevent"],["eventchannel"]]]],[11,"keys_that_are_down","","Returns an iterator over all keys that are down.",0,[[["self"]],[""]]],[11,"key_is_down","","Checks if a key is down.",0,[[["self"],["virtualkeycode"]],["bool"]]],[11,"mouse_buttons_that_are_down","","Returns an iterator over all pressed mouse buttons",0,[[["self"]],[""]]],[11,"mouse_button_is_down","","Checks if a mouse button is down.",0,[[["self"],["mousebutton"]],["bool"]]],[11,"scan_codes_that_are_down","","Returns an iterator over all pressed scan codes",0,[[["self"]],[""]]],[11,"scan_code_is_down","","Checks if the key corresponding to a scan code is down.",0,[[["self"],["u32"]],["bool"]]],[11,"controller_buttons_that_are_down","","Returns an iterator over all pressed controller buttons on all controllers.",0,[[["self"]],[""]]],[11,"controller_button_is_down","","Checks if a controller button is down on specific controller.",0,[[["self"],["u32"],["controllerbutton"]],["bool"]]],[11,"connected_controllers","","List controller ids of all currently connected controllers. IDs are assigned sequentially in the order of connection starting from 0, always taking the lowest next free number.",0,[[["self"]],[""]]],[11,"is_controller_connected","","",0,[[["self"],["u32"]],["bool"]]],[11,"mouse_position","","Gets the current mouse position.",0,[[["self"]],["option"]]],[11,"buttons_that_are_down","","Returns an iterator over all buttons that are down.",0,[[["self"]],[""]]],[11,"button_is_down","","Checks if a button is down.",0,[[["self"],["button"]],["bool"]]],[11,"axis_value","","Returns the value of an axis by the string id, if the id doesn't exist this returns None.",0,[[["self"],["t"]],["option",["f64"]]]],[11,"action_is_down","","Returns true if any of the action keys are down.",0,[[["self"],["t"]],["option",["bool"]]]],[11,"new","","Create a new input system. Needs a reader id for `EventHandler<winit::Event>`.",8,[[["option",["bindings"]]],["self"]]],[11,"run","","",8,N],[11,"setup","","",8,[[["self"],["resources"]]]]],"paths":[[3,"InputHandler"],[4,"Axis"],[4,"Button"],[4,"ControllerAxis"],[4,"ControllerButton"],[4,"InputEvent"],[3,"Bindings"],[3,"InputBundle"],[3,"InputSystem"]]};
searchIndex["amethyst_locale"]={"doc":"amethyst_locale","items":[[3,"LocaleFormat","amethyst_locale","Loads the strings from localisation files.",N,N],[3,"Locale","","A loaded locale.",N,N],[12,"context","","The message context.",0,N],[6,"LocaleHandle","","A handle to a locale.",N,N],[11,"clone","","",1,[[["self"]],["localeformat"]]],[11,"import","","",1,N],[11,"into","","",0,[[["self"]],["result",["processingstate"]]]]],"paths":[[3,"Locale"],[3,"LocaleFormat"]]};
searchIndex["amethyst_renderer"]={"doc":"A data parallel rendering engine developed by the [Amethyst][am] project.","items":[[4,"DeviceEvent","amethyst_renderer","Represents raw hardware events that are not associated with any particular window.",N,N],[13,"Added","","",0,N],[13,"Removed","","",0,N],[13,"MouseMotion","","Change in physical position of a pointing device.",0,N],[12,"delta","amethyst_renderer::DeviceEvent","(x, y) change in position in unspecified units.",0,N],[13,"MouseWheel","amethyst_renderer","Physical scroll event",0,N],[12,"delta","amethyst_renderer::DeviceEvent","",0,N],[13,"Motion","amethyst_renderer","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",0,N],[12,"axis","amethyst_renderer::DeviceEvent","",0,N],[12,"value","","",0,N],[13,"Button","amethyst_renderer","",0,N],[12,"button","amethyst_renderer::DeviceEvent","",0,N],[12,"state","","",0,N],[13,"Key","amethyst_renderer","",0,N],[13,"Text","","",0,N],[12,"codepoint","amethyst_renderer::DeviceEvent","",0,N],[4,"ElementState","amethyst_renderer","Describes the input state of a key.",N,N],[13,"Pressed","","",1,N],[13,"Released","","",1,N],[4,"Event","","Describes a generic event.",N,N],[13,"WindowEvent","","",2,N],[12,"window_id","amethyst_renderer::Event","",2,N],[12,"event","","",2,N],[13,"DeviceEvent","amethyst_renderer","",2,N],[12,"device_id","amethyst_renderer::Event","",2,N],[12,"event","","",2,N],[13,"Awakened","amethyst_renderer","",2,N],[13,"Suspended","","The application has been suspended or resumed.",2,N],[3,"KeyboardInput","","Describes a keyboard input event.",N,N],[12,"scancode","","Identifies the physical key pressed",3,N],[12,"state","","",3,N],[12,"virtual_keycode","","Identifies the semantic meaning of the key",3,N],[12,"modifiers","","Modifier keys active at the time of this input.",3,N],[4,"MouseButton","","Describes a button of a mouse controller.",N,N],[13,"Left","","",4,N],[13,"Right","","",4,N],[13,"Middle","","",4,N],[13,"Other","","",4,N],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",N,N],[13,"Key1","","The '1' key over the letters.",5,N],[13,"Key2","","The '2' key over the letters.",5,N],[13,"Key3","","The '3' key over the letters.",5,N],[13,"Key4","","The '4' key over the letters.",5,N],[13,"Key5","","The '5' key over the letters.",5,N],[13,"Key6","","The '6' key over the letters.",5,N],[13,"Key7","","The '7' key over the letters.",5,N],[13,"Key8","","The '8' key over the letters.",5,N],[13,"Key9","","The '9' key over the letters.",5,N],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",5,N],[13,"A","","",5,N],[13,"B","","",5,N],[13,"C","","",5,N],[13,"D","","",5,N],[13,"E","","",5,N],[13,"F","","",5,N],[13,"G","","",5,N],[13,"H","","",5,N],[13,"I","","",5,N],[13,"J","","",5,N],[13,"K","","",5,N],[13,"L","","",5,N],[13,"M","","",5,N],[13,"N","","",5,N],[13,"O","","",5,N],[13,"P","","",5,N],[13,"Q","","",5,N],[13,"R","","",5,N],[13,"S","","",5,N],[13,"T","","",5,N],[13,"U","","",5,N],[13,"V","","",5,N],[13,"W","","",5,N],[13,"X","","",5,N],[13,"Y","","",5,N],[13,"Z","","",5,N],[13,"Escape","","The Escape key, next to F1.",5,N],[13,"F1","","",5,N],[13,"F2","","",5,N],[13,"F3","","",5,N],[13,"F4","","",5,N],[13,"F5","","",5,N],[13,"F6","","",5,N],[13,"F7","","",5,N],[13,"F8","","",5,N],[13,"F9","","",5,N],[13,"F10","","",5,N],[13,"F11","","",5,N],[13,"F12","","",5,N],[13,"F13","","",5,N],[13,"F14","","",5,N],[13,"F15","","",5,N],[13,"Snapshot","","Print Screen/SysRq.",5,N],[13,"Scroll","","Scroll Lock.",5,N],[13,"Pause","","Pause/Break key, next to Scroll lock.",5,N],[13,"Insert","","`Insert`, next to Backspace.",5,N],[13,"Home","","",5,N],[13,"Delete","","",5,N],[13,"End","","",5,N],[13,"PageDown","","",5,N],[13,"PageUp","","",5,N],[13,"Left","","",5,N],[13,"Up","","",5,N],[13,"Right","","",5,N],[13,"Down","","",5,N],[13,"Back","","The Backspace key, right over Enter.",5,N],[13,"Return","","The Enter key.",5,N],[13,"Space","","The space bar.",5,N],[13,"Compose","","The \"Compose\" key on Linux.",5,N],[13,"Caret","","",5,N],[13,"Numlock","","",5,N],[13,"Numpad0","","",5,N],[13,"Numpad1","","",5,N],[13,"Numpad2","","",5,N],[13,"Numpad3","","",5,N],[13,"Numpad4","","",5,N],[13,"Numpad5","","",5,N],[13,"Numpad6","","",5,N],[13,"Numpad7","","",5,N],[13,"Numpad8","","",5,N],[13,"Numpad9","","",5,N],[13,"AbntC1","","",5,N],[13,"AbntC2","","",5,N],[13,"Add","","",5,N],[13,"Apostrophe","","",5,N],[13,"Apps","","",5,N],[13,"At","","",5,N],[13,"Ax","","",5,N],[13,"Backslash","","",5,N],[13,"Calculator","","",5,N],[13,"Capital","","",5,N],[13,"Colon","","",5,N],[13,"Comma","","",5,N],[13,"Convert","","",5,N],[13,"Decimal","","",5,N],[13,"Divide","","",5,N],[13,"Equals","","",5,N],[13,"Grave","","",5,N],[13,"Kana","","",5,N],[13,"Kanji","","",5,N],[13,"LAlt","","",5,N],[13,"LBracket","","",5,N],[13,"LControl","","",5,N],[13,"LShift","","",5,N],[13,"LWin","","",5,N],[13,"Mail","","",5,N],[13,"MediaSelect","","",5,N],[13,"MediaStop","","",5,N],[13,"Minus","","",5,N],[13,"Multiply","","",5,N],[13,"Mute","","",5,N],[13,"MyComputer","","",5,N],[13,"NavigateForward","","",5,N],[13,"NavigateBackward","","",5,N],[13,"NextTrack","","",5,N],[13,"NoConvert","","",5,N],[13,"NumpadComma","","",5,N],[13,"NumpadEnter","","",5,N],[13,"NumpadEquals","","",5,N],[13,"OEM102","","",5,N],[13,"Period","","",5,N],[13,"PlayPause","","",5,N],[13,"Power","","",5,N],[13,"PrevTrack","","",5,N],[13,"RAlt","","",5,N],[13,"RBracket","","",5,N],[13,"RControl","","",5,N],[13,"RShift","","",5,N],[13,"RWin","","",5,N],[13,"Semicolon","","",5,N],[13,"Slash","","",5,N],[13,"Sleep","","",5,N],[13,"Stop","","",5,N],[13,"Subtract","","",5,N],[13,"Sysrq","","",5,N],[13,"Tab","","",5,N],[13,"Underline","","",5,N],[13,"Unlabeled","","",5,N],[13,"VolumeDown","","",5,N],[13,"VolumeUp","","",5,N],[13,"Wake","","",5,N],[13,"WebBack","","",5,N],[13,"WebFavorites","","",5,N],[13,"WebForward","","",5,N],[13,"WebHome","","",5,N],[13,"WebRefresh","","",5,N],[13,"WebSearch","","",5,N],[13,"WebStop","","",5,N],[13,"Yen","","",5,N],[13,"Copy","","",5,N],[13,"Paste","","",5,N],[13,"Cut","","",5,N],[4,"WindowEvent","","Describes an event from a `Window`.",N,N],[13,"Resized","","The size of the window has changed. Contains the client area's new dimensions.",6,N],[13,"Moved","","The position of the window has changed. Contains the window's new position.",6,N],[13,"CloseRequested","","The window has been requested to close.",6,N],[13,"Destroyed","","The window has been destroyed.",6,N],[13,"DroppedFile","","A file has been dropped into the window.",6,N],[13,"HoveredFile","","A file is being hovered over the window.",6,N],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",6,N],[13,"ReceivedCharacter","","The window received a unicode character.",6,N],[13,"Focused","","The window gained or lost focus.",6,N],[13,"KeyboardInput","","An event from the keyboard has been received.",6,N],[12,"device_id","amethyst_renderer::WindowEvent","",6,N],[12,"input","","",6,N],[13,"CursorMoved","amethyst_renderer","The cursor has moved on the window.",6,N],[12,"device_id","amethyst_renderer::WindowEvent","",6,N],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",6,N],[12,"modifiers","","",6,N],[13,"CursorEntered","amethyst_renderer","The cursor has entered the window.",6,N],[12,"device_id","amethyst_renderer::WindowEvent","",6,N],[13,"CursorLeft","amethyst_renderer","The cursor has left the window.",6,N],[12,"device_id","amethyst_renderer::WindowEvent","",6,N],[13,"MouseWheel","amethyst_renderer","A mouse wheel movement or touchpad scroll occurred.",6,N],[12,"device_id","amethyst_renderer::WindowEvent","",6,N],[12,"delta","","",6,N],[12,"phase","","",6,N],[12,"modifiers","","",6,N],[13,"MouseInput","amethyst_renderer","An mouse button press has been received.",6,N],[12,"device_id","amethyst_renderer::WindowEvent","",6,N],[12,"state","","",6,N],[12,"button","","",6,N],[12,"modifiers","","",6,N],[13,"TouchpadPressure","amethyst_renderer","Touchpad pressure event.",6,N],[12,"device_id","amethyst_renderer::WindowEvent","",6,N],[12,"pressure","","",6,N],[12,"stage","","",6,N],[13,"AxisMotion","amethyst_renderer","Motion on some analog axis. May report data redundant to other, more specific events.",6,N],[12,"device_id","amethyst_renderer::WindowEvent","",6,N],[12,"axis","","",6,N],[12,"value","","",6,N],[13,"Refresh","amethyst_renderer","The window needs to be redrawn.",6,N],[13,"Touch","","Touch event has been received",6,N],[13,"HiDpiFactorChanged","","The DPI factor of the window has changed.",6,N],[3,"Blend","","",N,N],[12,"color","","",7,N],[12,"alpha","","",7,N],[3,"BlendChannel","","",N,N],[12,"equation","","",8,N],[12,"source","","",8,N],[12,"destination","","",8,N],[4,"BlendValue","","",N,N],[13,"SourceColor","","",9,N],[13,"SourceAlpha","","",9,N],[13,"DestColor","","",9,N],[13,"DestAlpha","","",9,N],[13,"ConstColor","","",9,N],[13,"ConstAlpha","","",9,N],[3,"ColorMask","","",N,N],[4,"Equation","","",N,N],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,N],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,N],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,N],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,N],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,N],[4,"Factor","","",N,N],[13,"Zero","","",11,N],[13,"One","","",11,N],[13,"SourceAlphaSaturated","","",11,N],[13,"ZeroPlus","","",11,N],[13,"OneMinus","","",11,N],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",N,N],[17,"REPLACE","","When combining two fragments, choose the source value",N,N],[3,"RenderBundle","","Rendering bundle",N,N],[3,"ActiveCamera","","Active camera resource, used by the renderer to choose which camera to get the view matrix from. If no active camera is found, the first camera will be used as a fallback.",N,N],[12,"entity","","Camera entity",12,N],[3,"ActiveCameraPrefab","","Active camera prefab",N,N],[3,"Camera","","Camera struct.",N,N],[12,"proj","","Graphical projection of the camera.",13,N],[3,"Rgba","","An RGBA color value.",N,N],[12,"0","","",14,N],[12,"1","","",14,N],[12,"2","","",14,N],[12,"3","","",14,N],[3,"DisplayConfig","","Structure for holding the renderer configuration.",N,N],[12,"title","","Name of the application window.",15,N],[12,"fullscreen","","Enables or disables fullscreen mode.",15,N],[12,"dimensions","","Current window dimensions, measured in pixels (px).",15,N],[12,"min_dimensions","","Minimum window dimensions, measured in pixels (px).",15,N],[12,"max_dimensions","","Maximum window dimensions, measured in pixels (px).",15,N],[12,"vsync","","Enables or disables vertical synchronization.",15,N],[12,"multisampling","","Level of MSAA anti-aliasing.",15,N],[12,"visibility","","Sets the visibility of the window.",15,N],[3,"BmpFormat","","Allows loading of BMP files.",N,N],[3,"ComboMeshCreator","","Mesh creator for `VertexBufferCombination`.",N,N],[3,"GraphicsPrefab","","`PrefabData` for loading graphics, ie `Mesh` + `Material`",N,N],[3,"ImageData","","ImageData provided by formats, can be interpreted as a texture.",N,N],[12,"rgba","","The raw image data.",16,N],[3,"JpgFormat","","Allows loading of jpg or jpeg files.",N,N],[3,"MaterialPrefab","","`PrefabData` for loading `Material`s",N,N],[12,"albedo","","Diffuse map.",17,N],[12,"albedo_offset","","Diffuse texture offset",17,N],[12,"albedo_id","","Albedo texture animation index, for addition to `MaterialTextureSet`",17,N],[12,"emission","","Emission map.",17,N],[12,"emission_offset","","Emission texture offset",17,N],[12,"emission_id","","Emission texture animation index, for addition to `MaterialTextureSet`",17,N],[12,"normal","","Normal map.",17,N],[12,"normal_offset","","Normal texture offset",17,N],[12,"normal_id","","Normal texture animation index, for addition to `MaterialTextureSet`",17,N],[12,"metallic","","Metallic map.",17,N],[12,"metallic_offset","","Metallic texture offset",17,N],[12,"metallic_id","","Metallic texture animation index, for addition to `MaterialTextureSet`",17,N],[12,"roughness","","Roughness map.",17,N],[12,"roughness_offset","","Roughness texture offset",17,N],[12,"roughness_id","","Roughness texture animation index, for addition to `MaterialTextureSet`",17,N],[12,"ambient_occlusion","","Ambient occlusion map.",17,N],[12,"ambient_occlusion_offset","","Ambient occlusion texture offset",17,N],[12,"ambient_occlusion_id","","Ambient occlusion texture animation index, for addition to `MaterialTextureSet`",17,N],[12,"caveat","","Caveat map.",17,N],[12,"caveat_offset","","Caveat texture offset",17,N],[12,"caveat_id","","Caveat texture animation index, for addition to `MaterialTextureSet`",17,N],[12,"transparent","","Set material as `Transparent`",17,N],[12,"alpha_cutoff","","Alpha cutoff: the value below which we do not draw the pixel",17,N],[3,"ObjFormat","","Allows loading from Wavefront files see: https://en.wikipedia.org/wiki/Wavefront_.obj_file",N,N],[3,"PngFormat","","Allows loading of PNG files.",N,N],[3,"TextureMetadata","","Texture metadata, used while loading",N,N],[12,"sampler","","Sampler info",18,N],[12,"mip_levels","","Mipmapping",18,N],[12,"size","","Texture size",18,N],[12,"dynamic","","Dynamic texture",18,N],[12,"format","","Surface type",18,N],[12,"channel","","Channel type",18,N],[3,"TgaFormat","","Allows loading of TGA files.",N,N],[3,"DirectionalLight","","A directional light source.",N,N],[12,"color","","Color of the light in RGBA8 format.",19,N],[12,"direction","","Direction that the light is pointing.",19,N],[3,"LightPrefab","","Prefab for lighting",N,N],[3,"PointLight","","A point light source. Uses the `Transform` set of components for positioning, and requires a `GlobalTransform` component to be included in rendering.",N,N],[12,"color","","Color of the light in RGBA8 format.",20,N],[12,"intensity","","Brightness of the light source, in lumens.",20,N],[12,"radius","","Maximum radius of the point light's affected area.",20,N],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",20,N],[3,"SpotLight","","A spot light source.",N,N],[12,"angle","","Opening angle of the light cone in degrees.",21,N],[12,"center","","Location of the light source in three dimensional space.",21,N],[12,"color","","Color of the light in RGBA8 format.",21,N],[12,"direction","","Direction that the light is pointing.",21,N],[12,"intensity","","Brightness of the light source, in lumens.",21,N],[12,"radius","","Maximum radius of the point light's affected area.",21,N],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",21,N],[3,"SunLight","","A realistic disk-shaped sun light source.",N,N],[12,"ang_rad","","The sun's angular radius in degrees.",22,N],[12,"color","","Color of the light in RGBA8 format.",22,N],[12,"direction","","Direction that the light is pointing.",22,N],[12,"intensity","","Brightness of the sun light, in lux.",22,N],[3,"Mesh","","Represents a polygonal mesh.",N,N],[3,"MeshBuilder","","Builds new meshes.",N,N],[3,"VertexBuffer","","Raw buffer with its attributes",N,N],[3,"Material","","Material struct.",N,N],[12,"alpha_cutoff","","Alpha cutoff: the value at which we do not draw the pixel",23,N],[12,"albedo","","Diffuse map.",23,N],[12,"albedo_offset","","Diffuse texture offset",23,N],[12,"emission","","Emission map.",23,N],[12,"emission_offset","","Emission texture offset",23,N],[12,"normal","","Normal map.",23,N],[12,"normal_offset","","Normal texture offset",23,N],[12,"metallic","","Metallic map.",23,N],[12,"metallic_offset","","Metallic texture offset",23,N],[12,"roughness","","Roughness map.",23,N],[12,"roughness_offset","","Roughness texture offset",23,N],[12,"ambient_occlusion","","Ambient occlusion map.",23,N],[12,"ambient_occlusion_offset","","Ambient occlusion texture offset",23,N],[12,"caveat","","Caveat map.",23,N],[12,"caveat_offset","","Caveat texture offset",23,N],[3,"MaterialDefaults","","A resource providing default textures for `Material`. These will be be used by the renderer in case a texture handle points to a texture which is not loaded already. Additionally, you can use it to fill up the fields of `Material` you don't want to specify.",N,N],[12,"0","","",24,N],[3,"MaterialTextureSet","","Textures used by texture animations",N,N],[3,"TextureOffset","","Material reference this part of the texture",N,N],[12,"u","","Start and end offset for U coordinate",25,N],[12,"v","","Start and end offset for V coordinate",25,N],[3,"DrawFlat","","Draw mesh without lighting",N,N],[3,"DrawFlatSeparate","","Draw mesh without lighting",N,N],[3,"DrawPbm","","Draw mesh with physically based lighting",N,N],[3,"DrawPbmSeparate","","Draw mesh with physically based lighting",N,N],[3,"DrawShaded","","Draw mesh with simple lighting technique",N,N],[3,"DrawShadedSeparate","","Draw mesh with simple lighting technique",N,N],[3,"DrawSprite","","Draws sprites on a 2D quad.",N,N],[3,"ColorBuffer","","Target color buffer.",N,N],[12,"as_input","","Shader resource view.",26,N],[12,"as_output","","Target view.",26,N],[3,"Data","","",N,N],[12,"const_bufs","","",27,N],[12,"globals","","",27,N],[12,"out_colors","","",27,N],[12,"out_blends","","",27,N],[12,"out_depth","","",27,N],[12,"samplers","","",27,N],[12,"textures","","",27,N],[12,"vertex_bufs","","",27,N],[3,"DepthBuffer","","Target depth-stencil buffer.",N,N],[12,"as_input","","Shader resource view.",28,N],[12,"as_output","","Target view.",28,N],[3,"Effect","","",N,N],[12,"pso","","",29,N],[12,"data","","",29,N],[3,"EffectBuilder","","",N,N],[3,"Init","","FIXME: Cannot `Deserialize` for some reason.",N,N],[12,"const_bufs","","",30,N],[12,"globals","","",30,N],[12,"out_colors","","",30,N],[12,"out_blends","","",30,N],[12,"out_depth","","",30,N],[12,"samplers","","",30,N],[12,"textures","","",30,N],[12,"vertex_bufs","","",30,N],[3,"Meta","","",N,N],[3,"NewEffect","","",N,N],[12,"factory","","",31,N],[3,"Pipeline","","Defines how the rendering pipeline should be configured.",N,N],[3,"PipelineBuilder","","Constructs a new pipeline with the given render targets and layers.",N,N],[3,"Stage","","A stage in the rendering pipeline.",N,N],[3,"StageBuilder","","Constructs a new rendering stage.",N,N],[3,"Target","","A render target.",N,N],[3,"TargetBuilder","","Builds new render targets.",N,N],[3,"Renderer","","Generic renderer.",N,N],[12,"factory","","The gfx factory used for creation of buffers.",32,N],[3,"AmbientColor","","The ambient color of a scene",N,N],[12,"0","","",33,N],[3,"ScreenDimensions","","World resource that stores screen dimensions.",N,N],[3,"WindowMessages","","This specs resource with id 0 permits sending commands to the renderer internal window.",N,N],[3,"InternalShape","","Internal Shape, used for transformation from `genmesh` to `MeshData`",N,N],[3,"ShapePrefab","","Prefab for generating `Mesh` from basic shapes",N,N],[3,"ShapeUpload","","`SystemData` needed to upload a `Shape` directly to create a `MeshHandle`",N,N],[3,"AnimatedComboMeshCreator","","Mesh creator for `VertexBufferCombination`.",N,N],[12,"combo","","The internal mesh combo data.",34,N],[3,"JointTransforms","","Transform storage for the skin, should be attached to all mesh entities that use a skin",N,N],[12,"skin","","Skin entity",35,N],[12,"matrices","","The current joint matrices",35,N],[3,"JointTransformsPrefab","","Prefab for `JointTransforms`",N,N],[12,"skin","","Index of skin `Entity`",36,N],[12,"size","","Number of joints in the skin",36,N],[3,"Sprite","","Dimensions and texture coordinates of each sprite in a sprite sheet.",N,N],[12,"width","","Pixel width of the sprite",37,N],[12,"height","","Pixel height of the sprite",37,N],[12,"offsets","","Number of pixels to shift the sprite to the left and down relative to the entity",37,N],[12,"tex_coords","","Texture coordinates of the sprite",37,N],[3,"SpriteRender","","Information for rendering a sprite.",N,N],[12,"sprite_sheet","","Handle to the sprite sheet of the sprite",38,N],[12,"sprite_number","","Index of the sprite on the sprite sheet",38,N],[12,"flip_horizontal","","Whether the sprite should be flipped horizontally",38,N],[12,"flip_vertical","","Whether the sprite should be flipped vertically",38,N],[3,"SpriteSheet","","Meta data for a sprite sheet texture.",N,N],[12,"texture_id","","Index into `MaterialTextureSet` of the texture for this sprite sheet.",39,N],[12,"sprites","","A list of sprites in this sprite sheet.",39,N],[3,"SpriteSheetSet","","Sprite sheets used by sprite render animations",N,N],[3,"TextureCoordinates","","Texture coordinates of the sprite",N,N],[12,"left","","Normalized left x coordinate",40,N],[12,"right","","Normalized right x coordinate",40,N],[12,"bottom","","Normalized bottom y coordinate",40,N],[12,"top","","Normalized top y coordinate",40,N],[3,"SpriteVisibility","","Resource for controlling what entities should be rendered, and whether to draw them ordered or not, which is useful for transparent surfaces.",N,N],[12,"visible_unordered","","Visible entities that can be drawn in any order",41,N],[12,"visible_ordered","","Visible entities that need to be drawn in the given order",41,N],[3,"SpriteVisibilitySortingSystem","","Determines what entities to be drawn. Will also sort transparent entities back to front based on position on the Z axis.",N,N],[3,"RenderSystem","","Rendering system.",N,N],[3,"Texture","","Handle to a GPU texture resource.",N,N],[3,"TextureBuilder","","Builds new textures.",N,N],[3,"Transparent","","Transparent mesh component",N,N],[3,"PosColor","","Vertex format with position and RGBA8 color attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",42,N],[12,"color","","RGBA color value of the vertex.",42,N],[3,"PosNormTangTex","","Vertex format with position, normal, and UV texture coordinate attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",43,N],[12,"normal","","Normal vector of the vertex.",43,N],[12,"tangent","","Tangent vector of the vertex.",43,N],[12,"tex_coord","","UV texture coordinates used by the vertex.",43,N],[3,"PosNormTex","","Vertex format with position, normal, and UV texture coordinate attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",44,N],[12,"normal","","Normal vector of the vertex.",44,N],[12,"tex_coord","","UV texture coordinates used by the vertex.",44,N],[3,"PosTex","","Vertex format with position and UV texture coordinate attributes.",N,N],[12,"position","","Position of the vertex in 3D space.",45,N],[12,"tex_coord","","UV texture coordinates used by the vertex.",45,N],[3,"Separate","","Vertex format for attributes in separate buffers",N,N],[12,"0","","",46,N],[3,"Visibility","","Resource for controlling what entities should be rendered, and whether to draw them ordered or not, which is useful for transparent surfaces.",N,N],[12,"visible_unordered","","Visible entities that can be drawn in any order",47,N],[12,"visible_ordered","","Visible entities that need to be drawn in the given order",47,N],[3,"VisibilitySortingSystem","","Determine what entities are visible to the camera, and which are not. Will also sort transparent entities back to front based on distance from camera.",N,N],[4,"CameraPrefab","","Projection prefab",N,N],[13,"Orthographic","","An [orthographic projection][op].",48,N],[13,"Perspective","","A realistic [perspective projection][pp].",48,N],[13,"Matrix","","Projection matrix",48,N],[4,"Projection","","The projection mode of a `Camera`.",N,N],[13,"Orthographic","","An [orthographic projection][op].",49,N],[13,"Perspective","","A realistic [perspective projection][pp].",49,N],[4,"MeshData","","Mesh data for loading",N,N],[13,"PosColor","","Position and color",50,N],[13,"PosTex","","Position and texture coordinates",50,N],[13,"PosNormTex","","Position, normal and texture coordinates",50,N],[13,"PosNormTangTex","","Position, normal, tangent and texture coordinates",50,N],[13,"Creator","","Create a mesh from a given creator",50,N],[4,"TextureData","","Texture data for loading",N,N],[13,"Image","","Image data",51,N],[13,"Rgba","","Color",51,N],[13,"F32","","Float data",51,N],[13,"F64","","Float data",51,N],[13,"U8","","Byte data",51,N],[13,"U16","","Byte data",51,N],[13,"U32","","Byte data",51,N],[13,"U64","","Byte data",51,N],[4,"TextureFormat","","Aggregate texture format",N,N],[13,"Jpg","","Jpeg",52,N],[13,"Png","","Png",52,N],[13,"Bmp","","Bmp",52,N],[13,"Tga","","Tga",52,N],[4,"TexturePrefab","","`PrefabData` for loading `Texture`s.",N,N],[13,"Data","","Texture data",53,N],[13,"File","","Load file with format",53,N],[13,"Handle","","Clone handle only",53,N],[4,"Light","","A light source.",N,N],[13,"Area","","An area light. FIXME: Missing implementation!",54,N],[13,"Directional","","A directional light.",54,N],[13,"Point","","A point light.",54,N],[13,"Spot","","A spot light.",54,N],[13,"Sun","","A sun light.",54,N],[4,"DepthMode","","",N,N],[13,"LessEqualTest","","",55,N],[13,"LessEqualWrite","","",55,N],[4,"Shape","","Shape generators",N,N],[13,"Sphere","","Sphere, number of points around the equator, number of points pole to pole",56,N],[13,"Cone","","Cone, number of subdivisions around the radius, must be > 1",56,N],[13,"Cube","","Cube",56,N],[13,"Cylinder","","Cylinder, number of points across the radius, optional subdivides along the height",56,N],[13,"Torus","","Torus, radius from origin to center of tubular, tubular radius from toridal to surface, number of tube segments >= 3, number of segments around the tube",56,N],[13,"IcoSphere","","Icosahedral sphere, number of subdivisions > 0 if given",56,N],[13,"Plane","","Plane, located in the XY plane, number of subdivisions along x and y axis if given",56,N],[13,"Circle","","Circle, located in the XY plane, number of points around the circle",56,N],[4,"JointIds","","Type for joint ids attribute of vertex",N,N],[4,"JointWeights","","Type for joint weights attribute of vertex",N,N],[4,"Color","","Type for color attribute of vertex",N,N],[4,"Normal","","Type for texture coord attribute of vertex",N,N],[4,"Position","","Type for position attribute of vertex",N,N],[4,"Tangent","","Type for tangent attribute of vertex",N,N],[4,"TexCoord","","Type for texture coord attribute of vertex",N,N],[5,"build_mesh_with_combo","","Build Mesh with vertex buffer combination",N,[[["vertexbuffercombination"],["renderer"]],["result",["mesh"]]]],[5,"create_mesh_asset","","Create mesh",N,[[["meshdata"],["renderer"]],["result",["processingstate"]]]],[5,"create_texture_asset","","Create a texture asset.",N,[[["texturedata"],["renderer"]],["result",["processingstate"]]]],[5,"vertex_data","","Construct new vertex data from raw data and vertex format",N,N],[5,"get_camera","","Returns the main camera and its `GlobalTransform`",N,[[["option",["read"]],["readstorage"],["readstorage"]],["option"]]],[5,"set_vertex_args","","Sets the vertex argument in the constant buffer.",N,[[["effect"],["encoder"],["option"],["globaltransform"]]]],[0,"error","","Renderer error types.",N,N],[4,"Error","amethyst_renderer::error","Common renderer error type.",N,N],[13,"BufferCreation","","Failed to create a buffer.",57,N],[13,"NoSuchTarget","","A render target with the given name does not exist.",57,N],[13,"PassInit","","Failed to initialize a render pass.",57,N],[13,"PipelineCreation","","Failed to create a pipeline state object (PSO).",57,N],[13,"PoolCreation","","Failed to create thread pool.",57,N],[13,"ProgramCreation","","Failed to create and link a shader program.",57,N],[13,"ResViewCreation","","Failed to create a resource view.",57,N],[13,"SpecsError","","Failed to interact with the ECS.",57,N],[13,"TargetCreation","","Failed to create a render target.",57,N],[13,"TextureCreation","","Failed to create a texture resource.",57,N],[13,"WindowDestroyed","","The window handle associated with the renderer has been destroyed.",57,N],[6,"Result","","Renderer result type.",N,N],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"description","","",57,[[["self"]],["str"]]],[11,"cause","","",57,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["fmtresult"]]],[11,"from","","",57,[[["combinederror"]],["error"]]],[11,"from","","",57,[[["pipelinestateerror",["string"]]],["error"]]],[11,"from","","",57,[[["resourceviewerror"]],["error"]]],[11,"from","","",57,[[["creationerror"]],["error"]]],[11,"from","","",57,[[["programerror"]],["error"]]],[11,"from","","",57,[[["creationerror"]],["error"]]],[11,"from","","",57,[[["creationerror"]],["error"]]],[11,"from","","",57,[[["error"]],["error"]]],[0,"mouse","amethyst_renderer","Util functions that change how the mouse moves and looks.",N,N],[5,"hide_cursor","amethyst_renderer::mouse","Hide the cursor, so it's invisible while playing.",N,[[["windowmessages"]]]],[5,"release_cursor","","Set the cursor back to normal/visible.",N,[[["windowmessages"]]]],[5,"grab_cursor","","Grab the cursor to prevent it from going outside the screen.",N,[[["windowmessages"]]]],[5,"set_mouse_cursor","","Sets the mouse cursor icon.",N,[[["windowmessages"],["mousecursor"]]]],[0,"pipe","amethyst_renderer","Renderer pipeline configuration.",N,N],[3,"Data","amethyst_renderer::pipe","",N,N],[12,"const_bufs","","",27,N],[12,"globals","","",27,N],[12,"out_colors","","",27,N],[12,"out_blends","","",27,N],[12,"out_depth","","",27,N],[12,"samplers","","",27,N],[12,"textures","","",27,N],[12,"vertex_bufs","","",27,N],[3,"Effect","","",N,N],[12,"pso","","",29,N],[12,"data","","",29,N],[3,"EffectBuilder","","",N,N],[3,"Init","","FIXME: Cannot `Deserialize` for some reason.",N,N],[12,"const_bufs","","",30,N],[12,"globals","","",30,N],[12,"out_colors","","",30,N],[12,"out_blends","","",30,N],[12,"out_depth","","",30,N],[12,"samplers","","",30,N],[12,"textures","","",30,N],[12,"vertex_bufs","","",30,N],[3,"Meta","","",N,N],[3,"NewEffect","","",N,N],[12,"factory","","",31,N],[3,"Pipeline","","Defines how the rendering pipeline should be configured.",N,N],[3,"PipelineBuilder","","Constructs a new pipeline with the given render targets and layers.",N,N],[3,"Stage","","A stage in the rendering pipeline.",N,N],[3,"StageBuilder","","Constructs a new rendering stage.",N,N],[3,"ColorBuffer","","Target color buffer.",N,N],[12,"as_input","","Shader resource view.",26,N],[12,"as_output","","Target view.",26,N],[3,"DepthBuffer","","Target depth-stencil buffer.",N,N],[12,"as_input","","Shader resource view.",28,N],[12,"as_output","","Target view.",28,N],[3,"Target","","A render target.",N,N],[3,"TargetBuilder","","Builds new render targets.",N,N],[4,"DepthMode","","",N,N],[13,"LessEqualTest","","",55,N],[13,"LessEqualWrite","","",55,N],[0,"pass","","Types for constructing render passes.",N,N],[3,"CompiledPass","amethyst_renderer::pipe::pass","A compiled pass.  These are created and managed by the `Renderer`.  This should not be used directly outside of the renderer.",N,N],[8,"PassData","","Used to fetch data from the game world for rendering in the pass.",N,N],[16,"Data","","The data itself.",58,N],[8,"Pass","","Structures implementing this provide a renderer pass.",N,N],[10,"compile","","The pass is given an opportunity to compile shaders and store them in an `Effect` which is then passed to the pass in `apply`.",59,[[["self"],["neweffect"]],["result",["effect"]]]],[10,"apply","","Called whenever the renderer is ready to apply the pass.  Feed commands into the encoder here.",59,N],[11,"clone","","",60,[[["self"]],["compiledpass"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"apply","","Applies the inner pass.",60,N],[11,"new_target","","Distributes new target data to the pass.",60,[[["self"],["target"]]]],[11,"clone","amethyst_renderer","",61,[[["self"]],["meta"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"default","","",61,[[],["meta"]]],[11,"hash","","",61,N],[11,"eq","","",61,[[["self"],["meta"]],["bool"]]],[11,"ne","","",61,[[["self"],["meta"]],["bool"]]],[11,"clone","","",30,[[["self"]],["init"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"default","","",30,[[],["init"]]],[11,"hash","","",30,N],[11,"eq","","",30,[[["self"],["init"]],["bool"]]],[11,"ne","","",30,[[["self"],["init"]],["bool"]]],[11,"link_to","","",30,[[["self"],["descriptor"],["programinfo"]],["result",["meta","initerror"]]]],[11,"clone","","",27,[[["self"]],["data"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"default","","",27,[[],["data"]]],[11,"eq","","",27,[[["self"],["data"]],["bool"]]],[11,"ne","","",27,[[["self"],["data"]],["bool"]]],[11,"bake_to","","",27,[[["self"],["rawdataset"],["meta"],["manager"],["accessinfo"]]]],[11,"clone","","",55,[[["self"]],["depthmode"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"hash","","",55,N],[11,"eq","","",55,[[["self"],["depthmode"]],["bool"]]],[11,"clone","","",29,[[["self"]],["self"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["self"]],["bool"]]],[11,"update_global","","",29,[[["self"],["n"],["t"]]]],[11,"update_buffer","","FIXME: Update raw buffer without transmute, use `Result` somehow.",29,N],[11,"update_constant_buffer","","FIXME: Update raw buffer without transmute.",29,[[["self"],["n"],["t"],["encoder"]]]],[11,"clear","","",29,[[["self"]]]],[11,"draw","","",29,[[["self"],["slice"],["encoder"]]]],[11,"simple","","",31,[[["self"],["s"],["s"]],["effectbuilder"]]],[11,"geom","","",31,[[["self"],["s"],["s"],["s"]],["effectbuilder"]]],[11,"tess","","",31,[[["self"],["s"],["s"],["s"],["s"]],["effectbuilder"]]],[11,"without_back_face_culling","","Disable back face culling",62,[[["self"]],["self"]]],[11,"with_raw_global","","Adds a global constant to this `Effect`.",62,[[["self"],["str"]],["self"]]],[11,"with_raw_constant_buffer","","Adds a raw uniform constant to this `Effect`.",62,[[["self"],["str"],["usize"],["usize"]],["self"]]],[11,"with_primitive_type","","Set the pipeline primitive type.",62,[[["self"],["primitive"]],["self"]]],[11,"with_output","","Sets the output target of the PSO.",62,[[["self"],["str"],["option",["depthmode"]]],["self"]]],[11,"with_blended_output","","Sets the output target of the PSO.",62,[[["self"],["str"],["colormask"],["blend"],["option",["depthmode"]]],["self"]]],[11,"with_texture","","Adds a texture sampler to this `Effect`.",62,[[["self"],["str"]],["self"]]],[11,"with_raw_vertex_buffer","","Adds a vertex buffer to this `Effect`.",62,[[["self"],["attributes"],["elemstride"],["instancerate"]],["self"]]],[11,"build","","TODO: Support render targets as inputs.",62,[[["self"]],["result",["effect"]]]],[11,"clone","","",63,[[["self"]],["pipeline"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"build","","Builds a new renderer pipeline.",63,[[],["pipelinebuilder",["queue"]]]],[11,"targets","","Returns an immutable reference to all targets and their name strings.",63,[[["self"]],["hashmap"]]],[11,"apply","","",63,N],[11,"new_targets","","",63,[[["self"],["hashmap",["string","target"]]]]],[11,"targets","","Returns an immutable reference to all targets and their name strings.",63,[[["self"]],["hashmap"]]],[11,"clone","","",64,[[["self"]],["pipelinebuilder"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new PipelineBuilder.",64,[[],["self"]]],[11,"default","","",64,[[],["self"]]],[11,"with_stage","","Constructs a new stage in this pipeline.",64,[[["self"],["stagebuilder"]],["pipelinebuilder",["queue"]]]],[11,"with_target","","Constructs a new render target for this pipeline.",64,[[["self"],["targetbuilder"]],["self"]]],[11,"build","","",64,[[["self"],["factory"],["target"],["u16"]],["result",["pipeline"]]]],[11,"clone","","",65,[[["self"]],["stage"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"with_target","","Builds a new `PolyStage` which outputs to the `Target` with the given name.",65,[[["n"]],["stagebuilder",["queue"]]]],[11,"with_backbuffer","","Builds a new `PolyStage` which outputs straight into the backbuffer.",65,[[],["stagebuilder",["queue"]]]],[11,"enable","","Enables the `PolyStage` so it will execute on every frame.",65,[[["self"]]]],[11,"disable","","Disables the `PolyStage`, preventing it from being executed on every frame.",65,[[["self"]]]],[11,"is_enabled","","Returns whether this `PolyStage` is enabled.",65,[[["self"]],["bool"]]],[11,"apply","","",65,N],[11,"new_targets","","",65,[[["self"],["hashmap"]]]],[11,"clone","","",66,[[["self"]],["self"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `StageBuilder` using the given target.",66,[[["t"]],["self"]]],[11,"clear_target","","Clears the stage's target.",66,[[["self"],["c"],["d"]],["self"]]],[11,"enabled","","Sets whether the `PolyStage` is turned on by default.",66,[[["self"],["bool"]],["self"]]],[11,"with_pass","","Appends another `Pass` to the stage.",66,[[["self"],["p"]],["stagebuilder",["queue"]]]],[11,"clone","","",26,[[["self"]],["colorbuffer"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["colorbuffer"]],["bool"]]],[11,"ne","","",26,[[["self"],["colorbuffer"]],["bool"]]],[11,"clone","","",28,[[["self"]],["depthbuffer"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["depthbuffer"]],["bool"]]],[11,"ne","","",28,[[["self"],["depthbuffer"]],["bool"]]],[11,"clone","","",67,[[["self"]],["target"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"eq","","",67,[[["self"],["target"]],["bool"]]],[11,"ne","","",67,[[["self"],["target"]],["bool"]]],[11,"named","","Creates a new TargetBuilder with the given name.",67,[[["n"]],["targetbuilder"]]],[11,"clear_color","","Clears all color buffers to the given value.",67,[[["self"],["encoder"],["v"]]]],[11,"clear_depth_stencil","","Clears the depth stencil buffer to the given value.",67,[[["self"],["encoder"],["v"]]]],[11,"size","","Returns the width and height of the render target, measured in pixels.",67,N],[11,"color_buf","","Returns the color buffer with index `i`.",67,[[["self"],["usize"]],["option",["colorbuffer"]]]],[11,"color_bufs","","Returns an array slice of the render target's color buffers.",67,N],[11,"depth_buf","","Returns the render target's depth-stencil buffer, if it has one.",67,[[["self"]],["option",["depthbuffer"]]]],[11,"resize_main_target","","Creates the OpenGL backend.",67,[[["self"],["glwindow"]]]],[11,"clone","","",68,[[["self"]],["targetbuilder"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"eq","","",68,[[["self"],["targetbuilder"]],["bool"]]],[11,"ne","","",68,[[["self"],["targetbuilder"]],["bool"]]],[11,"new","","Creates a new TargetBuilder.",68,[[["s"]],["self"]]],[11,"with_depth_buf","","Sets whether this render target should have a depth-stencil buffer.",68,[[["self"],["bool"]],["self"]]],[11,"with_num_color_bufs","","Sets how many color buffers the render target will have. This number must be greater than zero or else `build()` will fail.",68,[[["self"],["usize"]],["self"]]],[11,"with_size","","Specifies a custom target size.",68,N],[6,"Targets","amethyst_renderer::pipe","A hash map containing named render targets.",N,N],[8,"PipelineBuild","","",N,N],[16,"Pipeline","","Resuling pipeline",69,N],[10,"build","","Build pipeline",69,[[["self"],["factory"],["target"],["u16"]],["result"]]],[8,"PipelineData","","The data requested from the `specs::World` by the Pipeline.",N,N],[16,"Data","","The data itself",70,N],[8,"PolyPipeline","","Trait used for the pipeline.",N,N],[10,"apply","","Retuns `ParallelIterator` which apply data to all stages",71,N],[10,"new_targets","","Resizes the pipeline targets",71,[[["self"],["hashmap",["string","target"]]]]],[10,"targets","","Returns an immutable reference to all targets and their name strings.",71,[[["self"]],["hashmap"]]],[8,"PolyStages","","",N,N],[10,"apply","","",72,N],[10,"new_targets","","Distributes new targets",72,[[["self"],["hashmap"]]]],[8,"PolyStage","","A stage in the rendering.  Contains multiple passes.",N,N],[10,"apply","","",73,N],[10,"new_targets","","Distributes new targets",73,[[["self"],["hashmap"]]]],[11,"new","amethyst_renderer","Create a new render bundle",74,[[["b"],["option",["displayconfig"]]],["self"]]],[11,"with_visibility_sorting","","Enable transparent mesh sorting, with the given dependencies",74,N],[11,"with_sprite_visibility_sorting","","Enable transparent sprite sorting, with the given dependencies",74,N],[11,"with_sprite_sheet_processor","","Enable the sprite sheet processor",74,[[["self"]],["self"]]],[11,"build","","",74,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"clone","","",49,[[["self"]],["projection"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["projection"]],["bool"]]],[11,"ne","","",49,[[["self"],["projection"]],["bool"]]],[11,"orthographic","","Creates an orthographic projection with the given left, right, top, and bottom plane distances.",49,[[["f32"],["f32"],["f32"],["f32"]],["projection"]]],[11,"perspective","","Creates a perspective projection with the given aspect ratio and field-of-view.",49,[[["f32"],["d"]],["projection"]]],[11,"from","","",13,[[["projection"]],["self"]]],[11,"clone","","",13,[[["self"]],["camera"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["camera"]],["bool"]]],[11,"ne","","",13,[[["self"],["camera"]],["bool"]]],[11,"standard_2d","","Create a normalized camera for 2D.",13,[[],["self"]]],[11,"standard_3d","","Create a standard camera for 3D.",13,[[["f32"],["f32"]],["self"]]],[11,"clone","","",12,[[["self"]],["activecamera"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["activecamera"]],["bool"]]],[11,"ne","","",12,[[["self"],["activecamera"]],["bool"]]],[11,"clone","","",48,[[["self"]],["cameraprefab"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"load_prefab","","",48,N],[11,"load_prefab","","",75,N],[11,"clone","","",14,[[["self"]],["rgba"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["rgba"]],["bool"]]],[11,"ne","","",14,[[["self"],["rgba"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["rgba"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["rgba"]],["bool"]]],[11,"le","","",14,[[["self"],["rgba"]],["bool"]]],[11,"gt","","",14,[[["self"],["rgba"]],["bool"]]],[11,"ge","","",14,[[["self"],["rgba"]],["bool"]]],[11,"black","","Returns a solid black color value.",14,[[],["rgba"]]],[11,"blue","","Returns a solid blue color value.",14,[[],["rgba"]]],[11,"green","","Returns a solid green color value.",14,[[],["rgba"]]],[11,"red","","Returns a solid red color value.",14,[[],["rgba"]]],[11,"transparent","","Returns a transparent color value.",14,[[],["rgba"]]],[11,"white","","Returns a solid white color value.",14,[[],["rgba"]]],[11,"default","","",14,[[],["rgba"]]],[11,"from","","",14,N],[11,"from","","",14,N],[11,"from","","",14,N],[11,"from","","",14,N],[11,"get_format","","",14,N],[11,"convert","","",14,[[["self"]],["uniformvalue"]]],[11,"clone","","",15,[[["self"]],["displayconfig"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["displayconfig"]],["bool"]]],[11,"ne","","",15,[[["self"],["displayconfig"]],["bool"]]],[11,"default","","",15,[[],["self"]]],[11,"to_windowbuilder","","Creates a `winit::WindowBuilder` using the values set in the DisplayConfig",15,[[["self"],["eventsloop"]],["windowbuilder"]]],[11,"from","","",15,[[["windowbuilder"]],["self"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["meshdata"]]],[11,"from","","",50,[[["vec",["poscolor"]]],["self"]]],[11,"from","","",50,[[["vec",["postex"]]],["self"]]],[11,"from","","",50,[[["vec",["posnormtex"]]],["self"]]],[11,"from","","",50,[[["vec",["posnormtangtex"]]],["self"]]],[11,"from","","",50,[[["m"]],["self"]]],[11,"load_prefab","","",50,N],[11,"clone","","",76,[[["self"]],["objformat"]]],[11,"import","","",76,N],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["combomeshcreator"]]],[11,"new","","Create a new combo mesh creator with the given combo",77,[[["vertexbuffercombination"]],["self"]]],[11,"build","","",77,[[["box"],["renderer"]],["result",["mesh"]]]],[11,"vertices","","",77,[[["self"]],["vec"]]],[11,"box_clone","","",77,[[["self"]],["box",["meshcreator"]]]],[11,"from","","",77,[[["vertexbuffercombination"]],["self"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["materialprefab"]]],[11,"default","","",17,[[],["self"]]],[11,"load_prefab","","",17,N],[11,"trigger_sub_loading","","",17,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["texturemetadata"]]],[11,"default","","",18,[[],["self"]]],[11,"with_sampler","","Sampler info",18,[[["self"],["samplerinfo"]],["self"]]],[11,"with_mip_levels","","Mipmapping",18,[[["self"],["u8"]],["self"]]],[11,"with_size","","Texture size",18,[[["self"],["u16"],["u16"]],["self"]]],[11,"with_format","","Surface type",18,[[["self"],["surfacetype"]],["self"]]],[11,"with_channel","","Channel type",18,[[["self"],["channeltype"]],["self"]]],[11,"dynamic","","Texture is dynamic",18,[[["self"],["bool"]],["self"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["texturedata"]]],[11,"from","","",51,N],[11,"from","","",51,N],[11,"color","","Creates texture data from color.",51,N],[11,"load_prefab","","",51,N],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["textureprefab"]]],[11,"load_prefab","","",53,N],[11,"trigger_sub_loading","","",53,N],[11,"clone","","",16,[[["self"]],["imagedata"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["jpgformat"]]],[11,"from_data","","Load Jpg from memory buffer",78,N],[11,"import","","",78,[[["self"],["vec",["u8"]],["texturemetadata"]],["result",["texturedata"]]]],[11,"clone","","",79,[[["self"]],["pngformat"]]],[11,"from_data","","Load Png from memory buffer",79,N],[11,"import","","",79,[[["self"],["vec",["u8"]],["texturemetadata"]],["result",["texturedata"]]]],[11,"clone","","",80,[[["self"]],["bmpformat"]]],[11,"import","","",80,[[["self"],["vec",["u8"]],["texturemetadata"]],["result",["texturedata"]]]],[11,"from_data","","Loads a TGA image from a byte slice.",81,N],[11,"import","","",81,[[["self"],["vec",["u8"]],["texturemetadata"]],["result",["texturedata"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",52,[[["self"]],["textureformat"]]],[11,"import","","",52,[[["self"],["vec",["u8"]],["texturemetadata"]],["result",["texturedata"]]]],[11,"load_prefab","","",82,N],[11,"trigger_sub_loading","","",82,N],[11,"clone","","",54,[[["self"]],["light"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["light"]],["bool"]]],[11,"ne","","",54,[[["self"],["light"]],["bool"]]],[11,"clone","","",19,[[["self"]],["directionallight"]]],[11,"query","","",19,[[["str"]],["option",["element"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["directionallight"]],["bool"]]],[11,"ne","","",19,[[["self"],["directionallight"]],["bool"]]],[11,"default","","",19,[[],["self"]]],[11,"from","","",54,[[["directionallight"]],["self"]]],[11,"clone","","",20,[[["self"]],["pointlight"]]],[11,"query","","",20,[[["str"]],["option",["element"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["pointlight"]],["bool"]]],[11,"ne","","",20,[[["self"],["pointlight"]],["bool"]]],[11,"default","","",20,[[],["self"]]],[11,"from","","",54,[[["pointlight"]],["self"]]],[11,"clone","","",21,[[["self"]],["spotlight"]]],[11,"query","","",21,[[["str"]],["option",["element"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["spotlight"]],["bool"]]],[11,"ne","","",21,[[["self"],["spotlight"]],["bool"]]],[11,"default","","",21,[[],["self"]]],[11,"from","","",54,[[["spotlight"]],["self"]]],[11,"clone","","",22,[[["self"]],["sunlight"]]],[11,"query","","",22,[[["str"]],["option",["element"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["sunlight"]],["bool"]]],[11,"ne","","",22,[[["self"],["sunlight"]],["bool"]]],[11,"default","","",22,[[],["self"]]],[11,"from","","",54,[[["sunlight"]],["self"]]],[11,"load_prefab","","",54,N],[11,"default","","",83,[[],["lightprefab"]]],[11,"clone","","",83,[[["self"]],["lightprefab"]]],[11,"load_prefab","","",83,N],[11,"clone","","",84,[[["self"]],["vertexbuffer"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["mesh"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"build","","Builds a new mesh from the given vertices.",85,[[["d"]],["meshbuilder"]]],[11,"buffer","","Returns the mesh's vertex buffer which matches requested attributes",85,[[["self"],["attributes"]],["option",["rawbuffer"]]]],[11,"slice","","Returns associated `Slice`",85,[[["self"]],["slice"]]],[11,"transform","","Returns the transformation matrix of the mesh.",85,[[["self"]],["matrix4",["f32"]]]],[11,"clone","","",86,[[["self"]],["meshbuilder"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"eq","","",86,[[["self"],["meshbuilder"]],["bool"]]],[11,"ne","","",86,[[["self"],["meshbuilder"]],["bool"]]],[11,"new","","Creates a new `MeshBuilder` with the given vertices.",86,[[["d"]],["self"]]],[11,"with_buffer","","Add another vertices to the `MeshBuilder`",86,[[["self"],["d"]],["meshbuilder"]]],[11,"with_prim_type","","Sets the primitive type of the mesh.",86,[[["self"],["primitive"]],["self"]]],[11,"with_position","","Sets the position of the mesh in 3D space.",86,[[["self"],["p"]],["self"]]],[11,"with_rotation","","Rotates the mesh a certain number of degrees around the given axis.",86,[[["self"],["ax"],["an"]],["self"]]],[11,"with_scale","","Scales the mesh size according to the given value.",86,[[["self"],["f32"]],["self"]]],[11,"with_transform","","Sets the transformation matrix of the mesh.",86,[[["self"],["m"]],["self"]]],[11,"build","","Builds and returns the new mesh.",86,[[["self"],["factory"]],["result",["mesh"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["textureoffset"]]],[11,"eq","","",25,[[["self"],["textureoffset"]],["bool"]]],[11,"ne","","",25,[[["self"],["textureoffset"]],["bool"]]],[11,"default","","",25,[[],["self"]]],[11,"clone","","",23,[[["self"]],["material"]]],[11,"eq","","",23,[[["self"],["material"]],["bool"]]],[11,"ne","","",23,[[["self"],["material"]],["bool"]]],[11,"clone","","",24,[[["self"]],["materialdefaults"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"default","","",87,[[],["materialtextureset"]]],[11,"new","","Create new texture set",87,[[],["self"]]],[11,"handle","","Retrieve the handle for a given index",87,[[["self"],["u64"]],["option",["handle"]]]],[11,"id","","Retrieve the index for a given handle",87,[[["self"],["handle"]],["option",["u64"]]]],[11,"insert","","Insert a texture handle at the given index",87,[[["self"],["u64"],["handle",["texture"]]]]],[11,"remove","","Remove the given index",87,[[["self"],["u64"]]]],[11,"len","","Get number of textures in the set",87,[[["self"]],["usize"]]],[11,"clear","","Remove all texture handles in the set",87,[[["self"]]]],[11,"default","","",88,[[],["self"]]],[11,"clone","","",88,[[["self"]],["drawflat"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"eq","","",88,[[["self"],["drawflat"]],["bool"]]],[11,"ne","","",88,[[["self"],["drawflat"]],["bool"]]],[11,"new","","Create instance of `DrawFlat` pass",88,[[],["self"]]],[11,"with_transparency","","Enable transparency",88,[[["self"],["colormask"],["blend"],["option",["depthmode"]]],["self"]]],[11,"compile","","",88,[[["self"],["neweffect"]],["result",["effect"]]]],[11,"apply","","",88,N],[11,"default","","",89,[[],["self"]]],[11,"clone","","",89,[[["self"]],["drawflatseparate"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"eq","","",89,[[["self"],["drawflatseparate"]],["bool"]]],[11,"ne","","",89,[[["self"],["drawflatseparate"]],["bool"]]],[11,"new","","Create instance of `DrawFlat` pass",89,[[],["self"]]],[11,"with_vertex_skinning","","Enable vertex skinning",89,[[["self"]],["self"]]],[11,"with_transparency","","Enable transparency",89,[[["self"],["colormask"],["blend"],["option",["depthmode"]]],["self"]]],[11,"compile","","",89,[[["self"],["neweffect"]],["result",["effect"]]]],[11,"apply","","",89,N],[11,"default","","",90,[[],["self"]]],[11,"clone","","",90,[[["self"]],["drawpbm"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"eq","","",90,[[["self"],["drawpbm"]],["bool"]]],[11,"ne","","",90,[[["self"],["drawpbm"]],["bool"]]],[11,"new","","Create instance of `DrawPbm` pass",90,[[],["self"]]],[11,"with_transparency","","Enable transparency",90,[[["self"],["colormask"],["blend"],["option",["depthmode"]]],["self"]]],[11,"compile","","",90,[[["self"],["neweffect"]],["result",["effect"]]]],[11,"apply","","",90,N],[11,"default","","",91,[[],["drawpbmseparate"]]],[11,"clone","","",91,[[["self"]],["drawpbmseparate"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"eq","","",91,[[["self"],["drawpbmseparate"]],["bool"]]],[11,"ne","","",91,[[["self"],["drawpbmseparate"]],["bool"]]],[11,"new","","Create instance of `DrawPbm` pass",91,[[],["self"]]],[11,"with_vertex_skinning","","Enable vertex skinning",91,[[["self"]],["self"]]],[11,"with_transparency","","Enable transparency",91,[[["self"],["colormask"],["blend"],["option",["depthmode"]]],["self"]]],[11,"compile","","",91,[[["self"],["neweffect"]],["result",["effect"]]]],[11,"apply","","",91,N],[11,"default","","",92,[[],["self"]]],[11,"clone","","",92,[[["self"]],["drawshaded"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",92,[[["self"],["drawshaded"]],["bool"]]],[11,"ne","","",92,[[["self"],["drawshaded"]],["bool"]]],[11,"new","","Create instance of `DrawShaded` pass",92,[[],["self"]]],[11,"with_transparency","","Enable transparency",92,[[["self"],["colormask"],["blend"],["option",["depthmode"]]],["self"]]],[11,"compile","","",92,[[["self"],["neweffect"]],["result",["effect"]]]],[11,"apply","","",92,N],[11,"default","","",93,[[],["drawshadedseparate"]]],[11,"clone","","",93,[[["self"]],["drawshadedseparate"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"eq","","",93,[[["self"],["drawshadedseparate"]],["bool"]]],[11,"ne","","",93,[[["self"],["drawshadedseparate"]],["bool"]]],[11,"new","","Create instance of `DrawShaded` pass",93,[[],["self"]]],[11,"with_vertex_skinning","","Enable vertex skinning",93,[[["self"]],["self"]]],[11,"with_transparency","","Enable transparency",93,[[["self"],["colormask"],["blend"],["option",["depthmode"]]],["self"]]],[11,"compile","","",93,[[["self"],["neweffect"]],["result",["effect"]]]],[11,"apply","","",93,N],[11,"default","","",94,[[],["self"]]],[11,"clone","","",94,[[["self"]],["drawsprite"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"new","","Create instance of `DrawSprite` pass",94,[[],["self"]]],[11,"with_transparency","","Enable transparency",94,[[["self"],["colormask"],["blend"],["option",["depthmode"]]],["self"]]],[11,"compile","","",94,[[["self"],["neweffect"]],["result",["effect"]]]],[11,"apply","","",94,N],[11,"new","","Creates a `Renderer` with default window settings.",32,[[],["result",["renderer"]]]],[11,"build_with_loop","","Creates a new `RendererBuilder`, equivalent to `RendererBuilder::new()`.",32,[[["eventsloop"]],["rendererbuilder"]]],[11,"build","","Creates a new `RendererBuilder`, equivalent to `RendererBuilder::new()`.",32,[[],["rendererbuilder"]]],[11,"create_mesh","","Builds a new mesh from the given vertices.",32,[[["self"],["meshbuilder"]],["result",["mesh"]]]],[11,"create_texture","","Builds a new texture resource.",32,[[["self"],["texturebuilder"]],["result",["texture"]]]],[11,"create_pipe","","Builds a new renderer pipeline.",32,[[["self"],["b"]],["result"]]],[11,"draw","","Draws a scene with the given pipeline.",32,N],[11,"events_mut","","Retrieve a mutable borrow of the events loop",32,[[["self"]],["eventsloop"]]],[11,"resize","","Resize the targets associated with this renderer and pipeline.",32,N],[11,"window","","Retrieves an immutable borrow of the window.",32,[[["self"]],["winitwindow"]]],[11,"drop","","",32,[[["self"]]]],[11,"clone","","",33,[[["self"]],["ambientcolor"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"default","","",33,[[],["ambientcolor"]]],[11,"as_ref","","",33,[[["self"]],["rgba"]]],[11,"load_prefab","","",33,N],[11,"default","","",95,[[],["windowmessages"]]],[11,"new","","Create a new `WindowMessages`",95,[[],["self"]]],[11,"send_command","","Execute this closure on the `winit::Window` next frame.",95,[[["self"],["f"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new screen dimensions object with the given width and height.",96,[[["u32"],["u32"],["f32"]],["screendimensions"]]],[11,"width","","Returns the current width of the window.",96,[[["self"]],["f32"]]],[11,"height","","Returns the current height of the window.",96,[[["self"]],["f32"]]],[11,"aspect_ratio","","Returns the current aspect ratio of the window.",96,[[["self"]],["f32"]]],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",96,[[["self"]],["f32"]]],[11,"update","","Updates the width and height of the screen and recomputes the aspect ratio.",96,[[["self"],["u32"],["u32"]]]],[11,"clone","","",97,[[["self"]],["shapeprefab"]]],[11,"load_prefab","","",97,N],[11,"trigger_sub_loading","","",97,N],[11,"clone","","",56,[[["self"]],["shape"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"setup","","",98,[[["resources"]]]],[11,"fetch","","",98,[[["resources"]],["self"]]],[11,"reads","","",98,[[],["vec",["resourceid"]]]],[11,"writes","","",98,[[],["vec",["resourceid"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"upload","","Generate `Mesh` for the `Shape`, and convert it into a `MeshHandle`.",56,[[["self"],["option"],["shapeupload"],["p"]],["meshhandle"]]],[11,"generate","","Generate `MeshData` for the `Shape`",56,[[["self"],["option"]],["meshdata"]]],[11,"generate_vertices","","Generate vertices for the `Shape`, in format `V`",56,[[["self"],["option"]],["v"]]],[11,"from","","",77,[[["internalshape"]],["self"]]],[11,"clone","","",100,[[["self"]],["jointweights"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"clone","","",101,[[["self"]],["jointids"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["jointtransforms"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["animatedcombomeshcreator"]]],[11,"new","","Create a new combo mesh creator with the given combo",34,[[["animatedvertexbuffercombination"]],["self"]]],[11,"build","","",34,[[["box"],["renderer"]],["result",["mesh"]]]],[11,"vertices","","",34,[[["self"]],["vec"]]],[11,"box_clone","","",34,[[["self"]],["box",["meshcreator"]]]],[11,"from","","",34,[[["animatedvertexbuffercombination"]],["self"]]],[11,"default","","",36,[[],["jointtransformsprefab"]]],[11,"clone","","",36,[[["self"]],["jointtransformsprefab"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"load_prefab","","",36,N],[11,"clone","","",39,[[["self"]],["spritesheet"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["spritesheet"]],["bool"]]],[11,"ne","","",39,[[["self"],["spritesheet"]],["bool"]]],[11,"clone","","",37,[[["self"]],["sprite"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["sprite"]],["bool"]]],[11,"ne","","",37,[[["self"],["sprite"]],["bool"]]],[11,"clone","","",40,[[["self"]],["texturecoordinates"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["texturecoordinates"]],["bool"]]],[11,"ne","","",40,[[["self"],["texturecoordinates"]],["bool"]]],[11,"from","","",37,N],[11,"from","","",37,N],[11,"from","","",40,N],[11,"from","","",40,N],[11,"clone","","",38,[[["self"]],["spriterender"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["spriterender"]],["bool"]]],[11,"ne","","",38,[[["self"],["spriterender"]],["bool"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"default","","",102,[[],["spritesheetset"]]],[11,"new","","Create new sprite sheet set",102,[[],["self"]]],[11,"handle","","Retrieve the handle for a given index",102,[[["self"],["u64"]],["option",["spritesheethandle"]]]],[11,"id","","Retrieve the index for a given handle",102,[[["self"],["spritesheethandle"]],["option",["u64"]]]],[11,"insert","","Insert a sprite sheet handle at the given index",102,[[["self"],["u64"],["spritesheethandle"]]]],[11,"remove","","Remove the given index",102,[[["self"],["u64"]]]],[11,"len","","Get number of sprite sheets in the set",102,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the set contains any sprite sheets",102,[[["self"]],["bool"]]],[11,"clear","","Remove all sprite sheet handles in the set",102,[[["self"]]]],[11,"default","","",41,[[],["spritevisibility"]]],[11,"default","","",103,[[],["spritevisibilitysortingsystem"]]],[11,"new","","Returns a new sprite visibility sorting system",103,[[],["self"]]],[11,"run","","",103,N],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"build","","Build a new `RenderSystem` from the given pipeline builder and config",104,[[["b"],["option",["displayconfig"]]],["result"]]],[11,"new","","Create a new render system",104,[[["p"],["renderer"]],["self"]]],[11,"run_now","","",104,[[["self"],["resources"]]]],[11,"setup","","",104,[[["self"],["resources"]]]],[11,"clone","","",105,[[["self"]],["texture"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"hash","","",105,N],[11,"eq","","",105,[[["self"],["texture"]],["bool"]]],[11,"ne","","",105,[[["self"],["texture"]],["bool"]]],[11,"from_data","","Builds a new texture with the given raw texture data.",105,[[["d"]],["texturebuilder"]]],[11,"from_color_val","","Builds a new texture with the given raw texture data.",105,[[["c"]],["texturebuilder",["u8"]]]],[11,"sampler","","Returns the sampler for the texture.",105,[[["self"]],["sampler"]]],[11,"view","","Returns the texture's raw shader resource view.",105,[[["self"]],["rawshaderresourceview"]]],[11,"size","","Returns the texture's dimensions `(width, height)`",105,N],[11,"clone","","",106,[[["self"]],["texturebuilder"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"hash","","",106,N],[11,"eq","","",106,[[["self"],["texturebuilder"]],["bool"]]],[11,"ne","","",106,[[["self"],["texturebuilder"]],["bool"]]],[11,"from_color_val","","Creates a new `TextureBuilder` from the given RGBA color value.",106,[[["c"]],["self"]]],[11,"new","","Creates a new `TextureBuilder` with the given raw texture data.",106,[[["d"]],["self"]]],[11,"with_sampler","","Sets the `SamplerInfo` for the texture",106,[[["self"],["samplerinfo"]],["self"]]],[11,"mip_levels","","Sets the number of mipmap levels to generate.",106,[[["self"],["u8"]],["self"]]],[11,"with_size","","Sets the texture width and height in pixels.",106,[[["self"],["u16"],["u16"]],["self"]]],[11,"dynamic","","Sets whether the texture is mutable or not.",106,[[["self"],["bool"]],["self"]]],[11,"with_format","","Sets the texture format",106,[[["self"],["surfacetype"]],["self"]]],[11,"with_channel_type","","Sets the texture channel type",106,[[["self"],["channeltype"]],["self"]]],[11,"build","","Builds and returns the new texture.",106,[[["self"],["factory"]],["result",["texture"]]]],[11,"clone","","",107,[[["self"]],["transparent"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"default","","",107,[[],["transparent"]]],[11,"clone","","",108,[[["self"]],["position"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"clone","","",109,[[["self"]],["color"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"clone","","",110,[[["self"]],["texcoord"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"clone","","",111,[[["self"]],["normal"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",112,[[["self"]],["tangent"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["separate"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["separate"]],["bool"]]],[11,"ne","","",46,[[["self"],["separate"]],["bool"]]],[11,"new","","Create a new Separate vertex attribute",46,N],[11,"clone","","",42,[[["self"]],["poscolor"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["poscolor"]],["bool"]]],[11,"ne","","",42,[[["self"],["poscolor"]],["bool"]]],[11,"clone","","",45,[[["self"]],["postex"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["postex"]],["bool"]]],[11,"ne","","",45,[[["self"],["postex"]],["bool"]]],[11,"clone","","",44,[[["self"]],["posnormtex"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["posnormtex"]],["bool"]]],[11,"ne","","",44,[[["self"],["posnormtex"]],["bool"]]],[11,"clone","","",43,[[["self"]],["posnormtangtex"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["posnormtangtex"]],["bool"]]],[11,"ne","","",43,[[["self"],["posnormtangtex"]],["bool"]]],[11,"default","","",47,[[],["visibility"]]],[11,"new","","Create new sorting system",113,[[],["self"]]],[11,"run","","",113,N],[6,"MeshHandle","","A handle to a mesh.",N,N],[6,"Targets","","A hash map containing named render targets.",N,N],[6,"AnimatedVertexBufferCombination","","Animation vertex combo",N,N],[6,"SpriteSheetHandle","","An asset handle to sprite sheet metadata.",N,N],[6,"TextureHandle","","A handle to a `Texture` asset.",N,N],[6,"Encoder","","Command buffer encoder type.",N,N],[6,"Factory","","Graphics factory type.",N,N],[6,"PipelineState","","Statically-typed pipeline state object (PSO).",N,N],[6,"Resources","","Graphics resource type.",N,N],[6,"AttributeFormat","","Format for vertex attribute",N,N],[6,"Attributes","","Slice of attributes",N,N],[6,"VertexBufferCombination","","Vertex combo",N,N],[8,"MeshCreator","","Trait used by the asset processor to convert any user supplied mesh representation into an actual `Mesh`.",N,N],[10,"build","","Build a mesh given a `Renderer`",114,[[["box"],["renderer"]],["result",["mesh"]]]],[10,"vertices","","Returns the vertices contained in the MeshCreator.",114,[[["self"]],["vec"]]],[10,"box_clone","","Clone a boxed version of this object",114,[[["self"]],["box",["meshcreator"]]]],[8,"PipelineBuild","","",N,N],[16,"Pipeline","","Resuling pipeline",69,N],[10,"build","","Build pipeline",69,[[["self"],["factory"],["target"],["u16"]],["result"]]],[8,"PipelineData","","The data requested from the `specs::World` by the Pipeline.",N,N],[16,"Data","","The data itself",70,N],[8,"PolyPipeline","","Trait used for the pipeline.",N,N],[10,"apply","","Retuns `ParallelIterator` which apply data to all stages",71,N],[10,"new_targets","","Resizes the pipeline targets",71,[[["self"],["hashmap",["string","target"]]]]],[10,"targets","","Returns an immutable reference to all targets and their name strings.",71,[[["self"]],["hashmap"]]],[8,"PolyStage","","A stage in the rendering.  Contains multiple passes.",N,N],[10,"apply","","",73,N],[10,"new_targets","","Distributes new targets",73,[[["self"],["hashmap"]]]],[8,"PolyStages","","",N,N],[10,"apply","","",72,N],[10,"new_targets","","Distributes new targets",72,[[["self"],["hashmap"]]]],[8,"Attribute","","Trait for vertex attributes to implement",N,N],[18,"NAME","","Name of the attribute It is used to bind to the attributes in shaders",115,N],[18,"FORMAT","","Format of the attribute defines arity and type",115,N],[18,"SIZE","","Size of the attribue",115,N],[16,"Repr","","Representation of the attribute usually it is `[f32; N]`",115,N],[8,"Query","","Allows to query specific `Attribute`s of `VertexFormat`",N,N],[18,"QUERIED_ATTRIBUTES","","Attributes from tuple `T`",116,N],[8,"VertexFormat","","Trait implemented by all valid vertex formats.",N,N],[18,"ATTRIBUTES","","List of all attributes formats with name and offset.",117,N],[11,"size","","Returns the size of a single vertex in bytes.",117,[[],["usize"]]],[11,"attribute","","Returns attribute of vertex by type",117,[[],["attributeformat"]]],[8,"With","","Trait implemented by all valid vertex formats for each field",N,N],[18,"FORMAT","","Individual format of the attribute for this vertex format",118,N],[11,"bitand","","Returns the intersection between the two sets of flags.",119,[[["self"],["colormask"]],["colormask"]]],[11,"clone","","",7,[[["self"]],["blend"]]],[11,"clone","","",9,[[["self"]],["blendvalue"]]],[11,"clone","","",8,[[["self"]],["blendchannel"]]],[11,"clone","","",119,[[["self"]],["colormask"]]],[11,"clone","","",11,[[["self"]],["factor"]]],[11,"clone","","",10,[[["self"]],["equation"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",10,[[["self"],["equation"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["blendvalue"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["factor"]],["ordering"]]],[11,"cmp","","",119,[[["self"],["colormask"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["blendchannel"]],["ordering"]]],[11,"sub","","Returns the set difference of the two sets of flags.",119,[[["self"],["colormask"]],["colormask"]]],[11,"from_iter","","",119,[[["t"]],["colormask"]]],[11,"default","","",8,[[],["blendchannel"]]],[11,"default","","",7,[[],["blend"]]],[11,"sub_assign","","Disables all flags enabled in the set.",119,N],[11,"partial_cmp","","",9,[[["self"],["blendvalue"]],["option",["ordering"]]]],[11,"partial_cmp","","",8,[[["self"],["blendchannel"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["blendchannel"]],["bool"]]],[11,"le","","",8,[[["self"],["blendchannel"]],["bool"]]],[11,"gt","","",8,[[["self"],["blendchannel"]],["bool"]]],[11,"ge","","",8,[[["self"],["blendchannel"]],["bool"]]],[11,"partial_cmp","","",119,[[["self"],["colormask"]],["option",["ordering"]]]],[11,"lt","","",119,[[["self"],["colormask"]],["bool"]]],[11,"le","","",119,[[["self"],["colormask"]],["bool"]]],[11,"gt","","",119,[[["self"],["colormask"]],["bool"]]],[11,"ge","","",119,[[["self"],["colormask"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["blend"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["blend"]],["bool"]]],[11,"le","","",7,[[["self"],["blend"]],["bool"]]],[11,"gt","","",7,[[["self"],["blend"]],["bool"]]],[11,"ge","","",7,[[["self"],["blend"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["factor"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["factor"]],["bool"]]],[11,"le","","",11,[[["self"],["factor"]],["bool"]]],[11,"gt","","",11,[[["self"],["factor"]],["bool"]]],[11,"ge","","",11,[[["self"],["factor"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["equation"]],["option",["ordering"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",119,N],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitor","","Returns the union of the two sets of flags.",119,[[["self"],["colormask"]],["colormask"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",8,N],[11,"hash","","",10,N],[11,"hash","","",9,N],[11,"hash","","",11,N],[11,"hash","","",119,N],[11,"hash","","",7,N],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,[[["self"],["colormask"]],["colormask"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","","",119,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",119,[[["__d"]],["result",["colormask"]]]],[11,"deserialize","","",7,[[["__d"]],["result",["blend"]]]],[11,"deserialize","","",10,[[["__d"]],["result",["equation"]]]],[11,"deserialize","","",8,[[["__d"]],["result",["blendchannel"]]]],[11,"deserialize","","",11,[[["__d"]],["result",["factor"]]]],[11,"deserialize","","",9,[[["__d"]],["result",["blendvalue"]]]],[11,"extend","","",119,N],[11,"not","","Returns the complement of this set of flags.",119,[[["self"]],["colormask"]]],[11,"bitxor_assign","","Toggles the set of flags.",119,N],[11,"bitor_assign","","Adds the set of flags.",119,N],[11,"eq","","",119,[[["self"],["colormask"]],["bool"]]],[11,"ne","","",119,[[["self"],["colormask"]],["bool"]]],[11,"eq","","",11,[[["self"],["factor"]],["bool"]]],[11,"ne","","",11,[[["self"],["factor"]],["bool"]]],[11,"eq","","",10,[[["self"],["equation"]],["bool"]]],[11,"eq","","",9,[[["self"],["blendvalue"]],["bool"]]],[11,"eq","","",7,[[["self"],["blend"]],["bool"]]],[11,"ne","","",7,[[["self"],["blend"]],["bool"]]],[11,"eq","","",8,[[["self"],["blendchannel"]],["bool"]]],[11,"ne","","",8,[[["self"],["blendchannel"]],["bool"]]],[11,"clone","","",3,[[["self"]],["keyboardinput"]]],[11,"clone","","",2,[[["self"]],["event"]]],[11,"clone","","",4,[[["self"]],["mousebutton"]]],[11,"clone","","",1,[[["self"]],["elementstate"]]],[11,"clone","","",0,[[["self"]],["deviceevent"]]],[11,"clone","","",5,[[["self"]],["virtualkeycode"]]],[11,"clone","","",6,[[["self"]],["windowevent"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",5,N],[11,"hash","","",1,N],[11,"hash","","",4,N],[11,"eq","","",4,[[["self"],["mousebutton"]],["bool"]]],[11,"ne","","",4,[[["self"],["mousebutton"]],["bool"]]],[11,"eq","","",1,[[["self"],["elementstate"]],["bool"]]],[11,"eq","","",5,[[["self"],["virtualkeycode"]],["bool"]]],[11,"new","","Create a new blend state with a given equation.",7,[[["equation"],["factor"],["factor"]],["blend"]]],[18,"RED","","",119,N],[18,"GREEN","","",119,N],[18,"BLUE","","",119,N],[18,"ALPHA","","",119,N],[11,"empty","","Returns an empty set of flags.",119,[[],["colormask"]]],[11,"all","","Returns the set containing all flags.",119,[[],["colormask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",119,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,[[["u8"]],["option",["colormask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,[[["u8"]],["colormask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",119,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,[[["self"],["colormask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,[[["self"],["colormask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",119,N],[11,"remove","","Removes the specified flags in-place.",119,N],[11,"toggle","","Toggles the specified flags in-place.",119,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,N],[18,"NAME","","Name of the attribute It is used to bind to the attributes in shaders",115,N],[18,"FORMAT","","Format of the attribute defines arity and type",115,N],[18,"SIZE","","Size of the attribue",115,N],[18,"ATTRIBUTES","","List of all attributes formats with name and offset.",117,N],[11,"size","","Returns the size of a single vertex in bytes.",117,[[],["usize"]]],[11,"attribute","","Returns attribute of vertex by type",117,[[],["attributeformat"]]],[18,"FORMAT","","Individual format of the attribute for this vertex format",118,N],[18,"QUERIED_ATTRIBUTES","","Attributes from tuple `T`",116,N]],"paths":[[4,"DeviceEvent"],[4,"ElementState"],[4,"Event"],[3,"KeyboardInput"],[4,"MouseButton"],[4,"VirtualKeyCode"],[4,"WindowEvent"],[3,"Blend"],[3,"BlendChannel"],[4,"BlendValue"],[4,"Equation"],[4,"Factor"],[3,"ActiveCamera"],[3,"Camera"],[3,"Rgba"],[3,"DisplayConfig"],[3,"ImageData"],[3,"MaterialPrefab"],[3,"TextureMetadata"],[3,"DirectionalLight"],[3,"PointLight"],[3,"SpotLight"],[3,"SunLight"],[3,"Material"],[3,"MaterialDefaults"],[3,"TextureOffset"],[3,"ColorBuffer"],[3,"Data"],[3,"DepthBuffer"],[3,"Effect"],[3,"Init"],[3,"NewEffect"],[3,"Renderer"],[3,"AmbientColor"],[3,"AnimatedComboMeshCreator"],[3,"JointTransforms"],[3,"JointTransformsPrefab"],[3,"Sprite"],[3,"SpriteRender"],[3,"SpriteSheet"],[3,"TextureCoordinates"],[3,"SpriteVisibility"],[3,"PosColor"],[3,"PosNormTangTex"],[3,"PosNormTex"],[3,"PosTex"],[3,"Separate"],[3,"Visibility"],[4,"CameraPrefab"],[4,"Projection"],[4,"MeshData"],[4,"TextureData"],[4,"TextureFormat"],[4,"TexturePrefab"],[4,"Light"],[4,"DepthMode"],[4,"Shape"],[4,"Error"],[8,"PassData"],[8,"Pass"],[3,"CompiledPass"],[3,"Meta"],[3,"EffectBuilder"],[3,"Pipeline"],[3,"PipelineBuilder"],[3,"Stage"],[3,"StageBuilder"],[3,"Target"],[3,"TargetBuilder"],[8,"PipelineBuild"],[8,"PipelineData"],[8,"PolyPipeline"],[8,"PolyStages"],[8,"PolyStage"],[3,"RenderBundle"],[3,"ActiveCameraPrefab"],[3,"ObjFormat"],[3,"ComboMeshCreator"],[3,"JpgFormat"],[3,"PngFormat"],[3,"BmpFormat"],[3,"TgaFormat"],[3,"GraphicsPrefab"],[3,"LightPrefab"],[3,"VertexBuffer"],[3,"Mesh"],[3,"MeshBuilder"],[3,"MaterialTextureSet"],[3,"DrawFlat"],[3,"DrawFlatSeparate"],[3,"DrawPbm"],[3,"DrawPbmSeparate"],[3,"DrawShaded"],[3,"DrawShadedSeparate"],[3,"DrawSprite"],[3,"WindowMessages"],[3,"ScreenDimensions"],[3,"ShapePrefab"],[3,"ShapeUpload"],[3,"InternalShape"],[4,"JointWeights"],[4,"JointIds"],[3,"SpriteSheetSet"],[3,"SpriteVisibilitySortingSystem"],[3,"RenderSystem"],[3,"Texture"],[3,"TextureBuilder"],[3,"Transparent"],[4,"Position"],[4,"Color"],[4,"TexCoord"],[4,"Normal"],[4,"Tangent"],[3,"VisibilitySortingSystem"],[8,"MeshCreator"],[8,"Attribute"],[8,"Query"],[8,"VertexFormat"],[8,"With"],[3,"ColorMask"]]};
searchIndex["amethyst_ui"]={"doc":"Provides components and systems to create an in game user interface.","items":[[3,"OnUiActionImage","amethyst_ui","When this component is added to a UI element with a `UiImage` it will change that image based on mouse interaction. Requires `MouseReactive`.",N,N],[3,"OnUiActionSound","","When this component is added to a UI element it will play sounds based on mouse interaction. Requires `MouseReactive`.",N,N],[3,"UiBundle","","UI bundle",N,N],[3,"UiButton","","A clickable button, this must be paired with a `UiImage` and this entity must have a child entity with a `UiText`.",N,N],[3,"UiButtonBuilder","","Convenience structure for building a button",N,N],[3,"UiButtonBuilderResources","","Container for all the resources the builder needs to make a new UiButton.",N,N],[3,"UiButtonSystem","","This system manages button mouse events.  It changes images and text colors, as well as playing audio when necessary.",N,N],[3,"MouseReactive","","A component that tags an entity as reactive to ui events. Will only work if the entity has a UiTransform component attached to it. Without this, the ui element will not generate events.",N,N],[3,"UiEvent","","A ui event instance.",N,N],[12,"event_type","","The type of ui event.",0,N],[12,"target","","The entity on which the event happened.",0,N],[3,"UiMouseSystem","","The system that generates events for `MouseReactive` enabled entities. The generic types A and B represent the A and B generic parameter of the InputHandler<A,B>.",N,N],[3,"UiFocused","","This resource stores the currently focused UI element.",N,N],[12,"entity","","The entity containing the focused UI element.",1,N],[3,"FontAsset","","A loaded set of fonts from a file.",N,N],[12,"0","","",2,N],[3,"TtfFormat","","Loads font files, supports TrueType and some OpenType files.",N,N],[3,"UiImage","","A component with the texture to display in this entity's `UiTransform`",N,N],[12,"texture","","The texture to display",3,N],[3,"UiTransformSystem","","Manages the `Parent` component on entities having `UiTransform` It does almost the same as the `TransformSystem`, but with some differences, like `UiTransform` alignment and stretching.",N,N],[3,"DrawUi","","Draw Ui elements.  UI won't display without this.  It's recommended this be your last pass.",N,N],[3,"UiCreator","","Ui Creator, wrapper around loading and creating a UI directly.",N,N],[3,"UiFormat","","Ui format.",N,N],[3,"UiImageBuilder","","Loadable `UiImage` data",N,N],[12,"image","","Image",4,N],[3,"UiLoader","","Specialised UI loader",N,N],[3,"UiTextBuilder","","Loadable `UiText` data",N,N],[12,"text","","Text to display",5,N],[12,"font_size","","Font size",5,N],[12,"color","","Font color",5,N],[12,"font","","Font",5,N],[12,"password","","Password field ?",5,N],[12,"editable","","Optionally make the text editable",5,N],[3,"UiTransformBuilder","","Loadable `UiTransform` data. By default z is equal to one.",N,N],[3,"ResizeSystem","","This system rearranges UI elements whenever the screen is resized using their `UiResize` component.",N,N],[3,"UiResize","","Whenever the window is resized the function in this component will be called on this entity's UiTransform, along with the new width and height of the window.",N,N],[12,"function","","The core function of this component",6,N],[3,"TextEditing","","If this component is attached to an entity with a UiText then that UiText is editable. This component also controls how that editing works.",N,N],[12,"cursor_position","","The current editing cursor position, specified in terms of glyphs, not characters.",7,N],[12,"max_length","","The maximum graphemes permitted in this string.",7,N],[12,"highlight_vector","","The amount and direction of glyphs highlighted relative to the cursor.",7,N],[12,"selected_text_color","","The color of the text itself when highlighted.",7,N],[12,"selected_background_color","","The text background color when highlighted.",7,N],[12,"use_block_cursor","","If this is true the text will use a block cursor for editing.  Otherwise this uses a standard line cursor.  This is not recommended if your font is not monospace.",7,N],[3,"UiKeyboardSystem","","This system processes the underlying UI data as needed.",N,N],[3,"UiText","","A component used to display text in this entity's UiTransform",N,N],[12,"text","","The string rendered by this.",8,N],[12,"font_size","","The height of a line of text in pixels.",8,N],[12,"color","","The color of the rendered text, using a range of 0.0 to 1.0 per channel.",8,N],[12,"font","","The font used for rendering.",8,N],[12,"password","","If true this will be rendered as dots instead of the text.",8,N],[3,"UiFinder","","Utility `SystemData` for finding UI entities based on `UiTransform` id",N,N],[3,"UiTransform","","The UiTransform represents the transformation of a ui element. Values are in pixel and the position is calculated from the bottom left of the screen to the center of the ui element's area.",N,N],[12,"id","","An identifier. Serves no purpose other than to help you distinguish between UI elements.",9,N],[12,"anchor","","Indicates where the element sits, relative to the parent (or to the screen, if there is no parent)",9,N],[12,"stretch","","If a child ui element needs to fill its parent this can be used to stretch it to the appropriate size.",9,N],[12,"local_x","","X coordinate, 0 is the left edge of the screen. If scale_mode is set to pixel then the width of the screen in pixel is the right edge.  If scale_mode is percent then the right edge is 1.",9,N],[12,"local_y","","Y coordinate, 0 is the bottom edge of the screen. If scale_mode is set to pixel then the height of the screen in pixel is the top edge.  If scale_mode is percent then the top edge is 1.",9,N],[12,"local_z","","Z order, entities with a higher Z order will be rendered on top of entities with a lower Z order.",9,N],[12,"width","","The width of this UI element.",9,N],[12,"height","","The height of this UI element.",9,N],[12,"tab_order","","The UI element tab order.  When the player presses tab the UI focus will shift to the UI element with the next highest tab order, or if another element with the same tab_order as this one exists they are ordered according to Entity creation order.  Shift-tab walks this ordering backwards.",9,N],[12,"scale_mode","","The scale mode indicates if the position is in pixel or is relative (%) (WIP!) to the parent's size.",9,N],[12,"opaque","","Indicates if actions on the ui can go through this element. If set to false, the element will behaves as if it was transparent and will let events go to the next element (for example, the text on a button).",9,N],[4,"UiEventType","","The type of ui event. Click happens if you start and stop clicking on the same ui element.",N,N],[13,"Click","","When an element is clicked normally.",10,N],[13,"ClickStart","","When the element starts being clicked (On left mouse down).",10,N],[13,"ClickStop","","When the element stops being clicked (On left mouse up).",10,N],[13,"HoverStart","","When the cursor gets over an element.",10,N],[13,"HoverStop","","When the cursor stops being over an element.",10,N],[4,"FontFormat","","Wrapper format for all core supported Font formats",N,N],[13,"Ttf","","TTF Format",11,N],[13,"Otf","","OTF Format",11,N],[4,"Anchor","","Indicated where the anchor is, relative to the parent (or to the screen, if there is no parent). Follow a normal english Y,X naming.",N,N],[13,"TopLeft","","Anchors the entity at the top left of the parent.",12,N],[13,"TopMiddle","","Anchors the entity at the top middle of the parent.",12,N],[13,"TopRight","","Anchors the entity at the top right of the parent.",12,N],[13,"MiddleLeft","","Anchors the entity at the middle left of the parent.",12,N],[13,"Middle","","Anchors the entity at the center of the parent.",12,N],[13,"MiddleRight","","Anchors the entity at the middle right of the parent.",12,N],[13,"BottomLeft","","Anchors the entity at the bottom left of the parent.",12,N],[13,"BottomMiddle","","Anchors the entity at the bottom middle of the parent.",12,N],[13,"BottomRight","","Anchors the entity at the bottom right of the parent.",12,N],[4,"ScaleMode","","Indicates if the position and margins should be calculated in pixel or relative to their parent size.",N,N],[13,"Pixel","","Use directly the pixel value.",13,N],[13,"Percent","","Use a proportion (%) of the parent's dimensions (or screen, if there is no parent).",13,N],[4,"Stretch","","Indicates if a component should be stretched.",N,N],[13,"NoStretch","","No stretching occurs",14,N],[13,"X","","Stretches on the X axis.",14,N],[12,"x_margin","amethyst_ui::Stretch","The margin length for the width",14,N],[13,"Y","amethyst_ui","Stretches on the Y axis.",14,N],[12,"y_margin","amethyst_ui::Stretch","The margin length for the height",14,N],[13,"XY","amethyst_ui","Stretches on both axes.",14,N],[12,"x_margin","amethyst_ui::Stretch","The margin length for the width",14,N],[12,"y_margin","","The margin length for the height",14,N],[4,"UiWidget","amethyst_ui","Loadable ui components",N,N],[13,"Container","","Container component",15,N],[12,"transform","amethyst_ui::UiWidget","Spatial information for the container",15,N],[12,"background","","Background image",15,N],[12,"children","","Child widgets",15,N],[13,"Image","amethyst_ui","Image component",15,N],[12,"transform","amethyst_ui::UiWidget","Spatial information",15,N],[12,"image","","Image",15,N],[13,"Text","amethyst_ui","Text component",15,N],[12,"transform","amethyst_ui::UiWidget","Spatial information",15,N],[12,"text","","Text",15,N],[13,"Button","amethyst_ui","Button component",15,N],[12,"transform","amethyst_ui::UiWidget","Spatial information",15,N],[12,"button","","Button",15,N],[11,"new","amethyst_ui","A constructor for this component",16,[[["option",["texturehandle"]],["option",["texturehandle"]],["option",["texturehandle"]]],["self"]]],[11,"new","","A constructor for this component",17,[[["option",["sourcehandle"]],["option",["sourcehandle"]],["option",["sourcehandle"]]],["self"]]],[11,"new","","Create a new UI bundle",18,[[],["self"]]],[11,"build","","",18,[[["self"],["dispatcherbuilder"]],["result"]]],[11,"setup","","",19,[[["resources"]]]],[11,"fetch","","",19,[[["resources"]],["self"]]],[11,"reads","","",19,[[],["vec",["resourceid"]]]],[11,"writes","","",19,[[],["vec",["resourceid"]]]],[11,"default","","",20,[[],["self"]]],[11,"new","","Construct a new UiButtonBuilder. This allows easy use of default values for text and button appearance and allows the user to easily set other UI-related options.",20,[[["n"],["s"]],["uibuttonbuilder"]]],[11,"with_parent","","Add a parent to the button.",20,[[["self"],["entity"]],["self"]]],[11,"with_anchor","","Add an anchor to the button.",20,[[["self"],["anchor"]],["self"]]],[11,"with_stretch","","Stretch the button.",20,[[["self"],["stretch"]],["self"]]],[11,"with_text","","This will set the rendered characters within the button. Use this to just change what characters will appear. If you need to change the font size, color, etc., then you should use `with_uitext` and provide a new `UiText` object.",20,[[["self"],["s"]],["self"]]],[11,"with_image","","Replace the default UiImage with `image`.",20,[[["self"],["texturehandle"]],["self"]]],[11,"with_font","","Use a different font for the button text.",20,[[["self"],["fonthandle"]],["self"]]],[11,"with_position","","Provide an X and Y position for the button.",20,[[["self"],["f32"],["f32"]],["self"]]],[11,"with_layer","","Provide a Z position, i.e UI layer",20,[[["self"],["f32"]],["self"]]],[11,"with_size","","Set button size",20,[[["self"],["f32"],["f32"]],["self"]]],[11,"with_tab_order","","Set button tab order",20,[[["self"],["i32"]],["self"]]],[11,"with_font_size","","Set font size",20,[[["self"],["f32"]],["self"]]],[11,"with_text_color","","Set text color",20,N],[11,"with_hover_text_color","","Text color to use when the mouse is hovering over this button",20,N],[11,"with_press_text_color","","Set text color when the button is pressed",20,N],[11,"with_hover_image","","Button image to use when the mouse is hovering over this button",20,[[["self"],["texturehandle"]],["self"]]],[11,"with_press_image","","Button image to use when this button is pressed",20,[[["self"],["texturehandle"]],["self"]]],[11,"with_hover_sound","","Sound emitted when this button is hovered over",20,[[["self"],["sourcehandle"]],["self"]]],[11,"with_press_sound","","Sound emitted when this button is pressed",20,[[["self"],["sourcehandle"]],["self"]]],[11,"with_release_sound","","Sound emitted when this button is released",20,[[["self"],["sourcehandle"]],["self"]]],[11,"build","","Build this with the `UiButtonBuilderResources`.",20,[[["self"],["uibuttonbuilderresources"]],["entity"]]],[11,"build_from_world","","Create the UiButton based on provided configuration parameters.",20,[[["self"],["world"]],["entity"]]],[11,"default","","",21,[[],["uibuttonsystem"]]],[11,"new","","Creates a new instance of this structure",21,[[],["self"]]],[11,"setup","","",21,[[["self"],["resources"]]]],[11,"run","","",21,N],[11,"new","","A constructor for this component.  It's recommended to use either a prefab or `UiButtonBuilder` rather than this function if possible.",22,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["uieventtype"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["uievent"]]],[11,"new","","Creates a new UiEvent.",0,[[["uieventtype"],["entity"]],["self"]]],[11,"default","","",23,[[],["mousereactive"]]],[11,"clone","","",23,[[["self"]],["mousereactive"]]],[11,"new","","Creates a new UiMouseSystem.",24,[[],["self"]]],[11,"run","","",24,N],[11,"default","","",1,[[],["uifocused"]]],[11,"clone","","",2,[[["self"]],["fontasset"]]],[11,"clone","","",25,[[["self"]],["ttfformat"]]],[11,"import","","",25,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["fontformat"]]],[11,"import","","",11,N],[11,"clone","","",3,[[["self"]],["uiimage"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["scalemode"]]],[11,"eq","","",13,[[["self"],["scalemode"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["anchor"]]],[11,"eq","","",12,[[["self"],["anchor"]],["bool"]]],[11,"norm_offset","","Returns the normalized offset using the `Anchor` setting. The normalized offset is a [-0.5,0.5] value indicating the relative offset multiplier from the parent's position (centered).",12,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["stretch"]]],[11,"default","","",26,[[],["uitransformsystem"]]],[11,"run","","",26,N],[11,"setup","","",26,[[["self"],["resources"]]]],[11,"new","","Create instance of `DrawUi` pass",27,[[],["self"]]],[11,"compile","","",27,[[["self"],["neweffect"]],["result",["effect"]]]],[11,"apply","","",27,N],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["uitransformbuilder"]]],[11,"default","","",28,[[],["self"]]],[11,"with_id","","Set id",28,[[["self"],["s"]],["self"]]],[11,"with_position","","Set position",28,[[["self"],["f32"],["f32"],["f32"]],["self"]]],[11,"with_size","","Set size",28,[[["self"],["f32"],["f32"]],["self"]]],[11,"with_tab_order","","Set tab order",28,[[["self"],["i32"]],["self"]]],[11,"transparent","","Set to event transparent",28,[[["self"]],["self"]]],[11,"reactive","","Add mouse reactive",28,[[["self"]],["self"]]],[11,"with_anchor","","Set anchor",28,[[["self"],["anchor"]],["self"]]],[11,"with_stretch","","Set stretch",28,[[["self"],["stretch"]],["self"]]],[11,"load_prefab","","",28,N],[11,"load_prefab","","",5,N],[11,"trigger_sub_loading","","",5,N],[11,"clone","","",4,[[["self"]],["uiimagebuilder"]]],[11,"load_prefab","","",4,N],[11,"trigger_sub_loading","","",4,N],[11,"clone","","",29,[[["self"]],["uiformat"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"import","","",29,N],[11,"setup","","",30,[[["resources"]]]],[11,"fetch","","",30,[[["resources"]],["self"]]],[11,"reads","","",30,[[],["vec",["resourceid"]]]],[11,"writes","","",30,[[],["vec",["resourceid"]]]],[11,"load","","Load ui from disc",30,[[["self"],["n"],["p"]],["handle",["uiprefab"]]]],[11,"setup","","",31,[[["resources"]]]],[11,"fetch","","",31,[[["resources"]],["self"]]],[11,"reads","","",31,[[],["vec",["resourceid"]]]],[11,"writes","","",31,[[],["vec",["resourceid"]]]],[11,"create","","Create a UI.",31,[[["self"],["n"],["p"]],["entity"]]],[11,"new","","Creates a new component with the given function.",6,[[["f"]],["self"]]],[11,"default","","",32,[[],["resizesystem"]]],[11,"new","","Creates a new ResizeSystem that listens with the given reader Id.",32,[[],["resizesystem"]]],[11,"run","","",32,N],[11,"setup","","",32,[[["self"],["resources"]]]],[11,"clone","","",8,[[["self"]],["uitext"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Initializes a new UiText",8,N],[11,"new","","Create a new TextEditing Component",7,N],[11,"new","","Creates a new instance of this system",33,[[],["self"]]],[11,"run","","",33,N],[11,"setup","","",33,[[["self"],["resources"]]]],[11,"setup","","",34,[[["resources"]]]],[11,"fetch","","",34,[[["resources"]],["self"]]],[11,"reads","","",34,[[],["vec",["resourceid"]]]],[11,"writes","","",34,[[],["vec",["resourceid"]]]],[11,"find","","Find the `UiTransform` entity with the given id",34,[[["self"],["str"]],["option",["entity"]]]],[11,"clone","","",9,[[["self"]],["uitransform"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new UiTransform. By default, it is considered opaque.",9,[[["string"],["anchor"],["f32"],["f32"],["f32"],["f32"],["f32"],["i32"]],["uitransform"]]],[11,"position_inside_local","","Checks if the input position is in the UiTransform rectangle. Uses local coordinates (ignores layouting).",9,[[["self"],["f32"],["f32"]],["bool"]]],[11,"position_inside","","Checks if the input position is in the UiTransform rectangle.",9,[[["self"],["f32"],["f32"]],["bool"]]],[11,"as_percent","","Renders this UI element by evaluating transform as a percentage of the parent size, rather than rendering it with pixel units.",9,[[["self"]],["self"]]],[11,"as_transparent","","Sets the opaque variable to false, allowing ui events to go through this ui element.",9,[[["self"]],["self"]]],[11,"with_stretch","","Adds stretching to this ui element so it can fill its parent.",9,[[["self"],["stretch"]],["self"]]],[11,"pixel_x","","Returns the global x coordinate of this UiTransform as computed by the `UiTransformSystem`.",9,[[["self"]],["f32"]]],[11,"pixel_y","","Returns the global y coordinate of this UiTransform as computed by the `UiTransformSystem`.",9,[[["self"]],["f32"]]],[11,"global_z","","Returns the global z order of this UiTransform as computed by the `UiTransformSystem`.",9,[[["self"]],["f32"]]],[6,"FontHandle","","A handle to font data stored with `amethyst_assets`.",N,N],[6,"OtfFormat","","Identical to TtfFormat.",N,N],[6,"UiLoaderSystem","","Prefab loader system for UI",N,N],[6,"UiPrefab","","Ui prefab",N,N]],"paths":[[3,"UiEvent"],[3,"UiFocused"],[3,"FontAsset"],[3,"UiImage"],[3,"UiImageBuilder"],[3,"UiTextBuilder"],[3,"UiResize"],[3,"TextEditing"],[3,"UiText"],[3,"UiTransform"],[4,"UiEventType"],[4,"FontFormat"],[4,"Anchor"],[4,"ScaleMode"],[4,"Stretch"],[4,"UiWidget"],[3,"OnUiActionImage"],[3,"OnUiActionSound"],[3,"UiBundle"],[3,"UiButtonBuilderResources"],[3,"UiButtonBuilder"],[3,"UiButtonSystem"],[3,"UiButton"],[3,"MouseReactive"],[3,"UiMouseSystem"],[3,"TtfFormat"],[3,"UiTransformSystem"],[3,"DrawUi"],[3,"UiTransformBuilder"],[3,"UiFormat"],[3,"UiLoader"],[3,"UiCreator"],[3,"ResizeSystem"],[3,"UiKeyboardSystem"],[3,"UiFinder"]]};
searchIndex["amethyst_utils"]={"doc":"","items":[[0,"app_root_dir","amethyst_utils","",N,N],[5,"application_root_dir","amethyst_utils::app_root_dir","",N,[[],["string"]]],[0,"circular_buffer","amethyst_utils","CircularBuffer",N,N],[3,"CircularBuffer","amethyst_utils::circular_buffer","A CircularBuffer that drops the oldest element inserted when full.",N,N],[11,"new","","Creates a new CircularBuffer with fixed size",0,[[["usize"]],["circularbuffer"]]],[11,"push","","Add a value to the CircularBuffer Returns the popped value if the buffer is full",0,[[["self"],["a"]],["option"]]],[11,"queue","","Get an immutable reference to the values inside the CircularBuffer",0,[[["self"]],["vecdeque"]]],[0,"fps_counter","amethyst_utils","Util Resources",N,N],[3,"FPSCounter","amethyst_utils::fps_counter","The FPSCounter resource needed by the FPSCounterSystem.",N,N],[3,"FPSCounterSystem","","Add this system to your game to automatically push FPS values to the FPSCounter resource with id 0",N,N],[3,"FPSCounterBundle","","Automatically adds a FPSCounterSystem and a FPSCounter resource with the specified sample size.",N,N],[11,"default","","",1,[[],["self"]]],[11,"new","","Creates a new FPSCounter that calculates the average fps over samplesize values.",1,[[["usize"]],["fpscounter"]]],[11,"push","","Add a new delta time value.",1,[[["self"],["u64"]]]],[11,"frame_fps","","Get the fps of the this frame.",1,[[["self"]],["f32"]]],[11,"sampled_fps","","Get the average fps over the samplesize frames.",1,[[["self"]],["f32"]]],[11,"run","","",2,N],[11,"default","","",3,[[],["fpscounterbundle"]]],[11,"build","","",3,[[["self"],["dispatcherbuilder"]],["result"]]],[0,"ortho_camera","amethyst_utils","",N,N],[3,"CameraNormalOrtho","amethyst_utils::ortho_camera","`Component` attached to the camera's entity that allows automatically adjusting the camera's matrix according to preferences in the \"mode\" field. It tries as much as possible to adjust the camera so that the world's coordinate (0, 0) is at the bottom left and (1, 1) is at the top right of the window. You must add the `CameraNormalOrthoSystem` to your dispatcher for this to take effect.",N,N],[12,"mode","","How the camera's matrix is changed when the window's aspect ratio changes. See `CameraNormalizeMode` for more info.",4,N],[3,"CameraNormalOrthoSystem","","System that automatically changes the camera matrix according to the settings in the `CameraNormalOrtho` attached to the camera entity.",N,N],[4,"CameraNormalizeMode","","Settings that decide how to scale the camera's matrix when the aspect ratio changes.",N,N],[13,"Lossy","","Using an aspect ratio of 1:1, tries to adjust the matrix values of the camera so that the direction opposite to the stretch_direction always have a world size of 1.",5,N],[12,"stretch_direction","amethyst_utils::ortho_camera::CameraNormalizeMode","",5,N],[13,"Contain","amethyst_utils::ortho_camera","Scales the render dynamically to ensure no space is lost in the [0,1] range on any axis. In other words, this ensures that you can always at least see everything between the world coordinates (0, 0) up to (1, 1).",5,N],[11,"default","","",4,[[],["cameranormalortho"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["cameranormalortho"]]],[11,"camera_offsets","","",4,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["cameranormalizemode"]]],[11,"default","","",5,[[],["self"]]],[11,"default","","",6,[[],["cameranormalorthosystem"]]],[11,"run","","",6,N],[0,"removal","amethyst_utils","",N,N],[3,"Removal","amethyst_utils::removal","A marker `Component` used to remove entities and clean up your scene. The generic parameter `I` is the type of id you want to use. Generally an int or an enum.",N,N],[3,"RemovalPrefab","","The prefab allowing to easily add a `Removal` `Component` to an entity.",N,N],[5,"exec_removal","","Removes all entities that have the `Removal<I>` component with the specified removal_id.",N,[[["entitiesres"],["readstorage"],["i"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["removal"]]],[11,"new","","Creates a new `Removal` component with the specified id.",7,[[["i"]],["self"]]],[11,"default","","",8,[[],["removalprefab"]]],[11,"clone","","",8,[[["self"]],["removalprefab"]]],[11,"load_prefab","","",8,N],[0,"scene","amethyst_utils","",N,N],[3,"BasicScenePrefab","amethyst_utils::scene","Basic `Prefab` scene node, meant to be used for fast prototyping, and most likely replaced for more complex scenarios.",N,N],[11,"default","","",9,[[],["self"]]],[11,"load_prefab","","",9,N],[11,"trigger_sub_loading","","",9,N],[0,"tag","amethyst_utils","",N,N],[3,"Tag","amethyst_utils::tag","Tag component that can be used with a custom type to tag entities for processing",N,N],[3,"TagFinder","","Utility lookup for tag components",N,N],[12,"entities","","",10,N],[12,"tags","","",10,N],[11,"clone","","",11,[[["self"]],["tag"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"default","","",11,[[],["self"]]],[11,"load_prefab","","",11,N],[11,"setup","","",10,[[["resources"]]]],[11,"fetch","","",10,[[["resources"]],["self"]]],[11,"reads","","",10,[[],["vec",["resourceid"]]]],[11,"writes","","",10,[[],["vec",["resourceid"]]]],[11,"find","","",10,[[["self"]],["option",["entity"]]]],[0,"time_destroy","amethyst_utils","",N,N],[3,"DestroyAtTime","amethyst_utils::time_destroy","Destroys the entity to which this is attached at the specified time (in seconds).",N,N],[12,"time","","The time at which the entity should be destroyed in seconds. Compared to `Time::absolute_time_seconds`.",12,N],[3,"DestroyInTime","","Destroys the entity to which this is attached after the specified time interval (in seconds).",N,N],[12,"timer","","The amount of time before the entity should be destroyed in seconds. Compared to `Time::absolute_time_seconds`.",13,N],[3,"TimedDestroySystem","","The system in charge of destroying entities with the `DestroyAtTime` or `DestroyInTime` components.",N,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["destroyattime"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["destroyintime"]]],[11,"run","","",14,N]],"paths":[[3,"CircularBuffer"],[3,"FPSCounter"],[3,"FPSCounterSystem"],[3,"FPSCounterBundle"],[3,"CameraNormalOrtho"],[4,"CameraNormalizeMode"],[3,"CameraNormalOrthoSystem"],[3,"Removal"],[3,"RemovalPrefab"],[3,"BasicScenePrefab"],[3,"TagFinder"],[3,"Tag"],[3,"DestroyAtTime"],[3,"DestroyInTime"],[3,"TimedDestroySystem"]]};
searchIndex["ansi_term"]={"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",N,N],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",N,N],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",N,N],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",N,N],[12,"foreground","","The style's foreground colour, if it has one.",0,N],[12,"background","","The style's background colour, if it has one.",0,N],[12,"is_bold","","Whether this style is bold.",0,N],[12,"is_dimmed","","Whether this style is dimmed.",0,N],[12,"is_italic","","Whether this style is italic.",0,N],[12,"is_underline","","Whether this style is underlined.",0,N],[12,"is_blink","","Whether this style is blinking.",0,N],[12,"is_reverse","","Whether this style has reverse colours.",0,N],[12,"is_hidden","","Whether this style is hidden.",0,N],[12,"is_strikethrough","","Whether this style is struckthrough.",0,N],[3,"ANSIGenericString","","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",N,N],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",N,N],[12,"0","","",1,N],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",N,N],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",N,N],[11,"clone","","",3,[[["self"]],["prefix"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["infix"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["suffix"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"prefix","","The prefix for this style.",0,[[["self"]],["prefix"]]],[11,"infix","","The infix between this style and another.",0,[[["self"],["style"]],["infix"]]],[11,"suffix","","The suffix for this style.",0,[[["self"]],["suffix"]]],[11,"prefix","","The prefix for this colour.",2,[[["self"]],["prefix"]]],[11,"infix","","The infix between this colour and another.",2,[[["self"],["colour"]],["infix"]]],[11,"suffix","","The suffix for this colour.",2,[[["self"]],["suffix"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["style"]],["bool"]]],[11,"ne","","",0,[[["self"],["style"]],["bool"]]],[11,"clone","","",0,[[["self"]],["style"]]],[11,"new","","Creates a new Style with no differences.",0,[[],["style"]]],[11,"bold","","Returns a Style with the bold property set.",0,[[["self"]],["style"]]],[11,"dimmed","","Returns a Style with the dimmed property set.",0,[[["self"]],["style"]]],[11,"italic","","Returns a Style with the italic property set.",0,[[["self"]],["style"]]],[11,"underline","","Returns a Style with the underline property set.",0,[[["self"]],["style"]]],[11,"blink","","Returns a Style with the blink property set.",0,[[["self"]],["style"]]],[11,"reverse","","Returns a Style with the reverse property set.",0,[[["self"]],["style"]]],[11,"hidden","","Returns a Style with the hidden property set.",0,[[["self"]],["style"]]],[11,"strikethrough","","Returns a Style with the hidden property set.",0,[[["self"]],["style"]]],[11,"fg","","Returns a Style with the foreground colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"on","","Returns a Style with the background colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,[[["self"]],["bool"]]],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,[[],["style"]]],[11,"eq","","",2,[[["self"],["colour"]],["bool"]]],[11,"ne","","",2,[[["self"],["colour"]],["bool"]]],[11,"clone","","",2,[[["self"]],["colour"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"normal","","Return a Style with the foreground colour set to this colour.",2,[[["self"]],["style"]]],[11,"bold","","Returns a Style with the bold property set.",2,[[["self"]],["style"]]],[11,"dimmed","","Returns a Style with the dimmed property set.",2,[[["self"]],["style"]]],[11,"italic","","Returns a Style with the italic property set.",2,[[["self"]],["style"]]],[11,"underline","","Returns a Style with the underline property set.",2,[[["self"]],["style"]]],[11,"blink","","Returns a Style with the blink property set.",2,[[["self"]],["style"]]],[11,"reverse","","Returns a Style with the reverse property set.",2,[[["self"]],["style"]]],[11,"hidden","","Returns a Style with the hidden property set.",2,[[["self"]],["style"]]],[11,"strikethrough","","Returns a Style with the strikethrough property set.",2,[[["self"]],["style"]]],[11,"on","","Returns a Style with the background colour property set.",2,[[["self"],["colour"]],["style"]]],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,[[["colour"]],["style"]]],[11,"eq","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"ne","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["ansigenericstring"]]],[11,"from","","",6,[[["i"]],["ansigenericstring"]]],[11,"deref","","",6,[[["self"]],["s"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,[[["self"],["i"]],["ansigenericstring"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,[[["self"],["i"]],["ansigenericstring"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",N,N],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",N,N],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",N,N],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",N,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape sequences for the associated Style around the bytes.",8,[[["self"],["w"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal escape sequences for the associated Styles around each set of bytes.",10,[[["self"],["w"]],["result"]]]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["approx"]={"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"AbsDiff","approx","The requisite parameters for testing for approximate equality using a absolute difference based comparison.",N,N],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,N],[3,"Relative","","The requisite parameters for testing for approximate equality using a relative based comparison.",N,N],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,N],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",1,N],[3,"Ulps","","The requisite parameters for testing for approximate equality using an ULPs based comparison.",N,N],[12,"epsilon","","The tolerance to use when testing values that are close together.",2,N],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",2,N],[8,"AbsDiffEq","","Equality that is defined using the absolute difference of two numbers.",N,N],[16,"Epsilon","","Used for specifying relative comparisons.",3,N],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",3,N],[10,"abs_diff_eq","","A test for equality that uses the absolute difference to compute the approximate equality of two numbers.",3,N],[11,"abs_diff_ne","","The inverse of `ApproxEq::abs_diff_eq`.",3,N],[8,"RelativeEq","","Equality comparisons between two numbers using both the absolute difference and relative based comparisons.",N,N],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",4,N],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",4,N],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",4,N],[8,"UlpsEq","","Equality comparisons between two numbers using both the absolute difference and ULPs (Units in Last Place) based comparisons.",N,N],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",5,[[],["u32"]]],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",5,N],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",5,N],[11,"default","","",0,[[],["absdiff"]]],[11,"epsilon","","Replace the epsilon value with the one specified.",0,N],[11,"eq","","Peform the equality comparison",0,[[["self"],["t"],["t"]],["bool"]]],[11,"ne","","Peform the inequality comparison",0,[[["self"],["t"],["t"]],["bool"]]],[11,"default","","",1,[[],["relative"]]],[11,"epsilon","","Replace the epsilon value with the one specified.",1,N],[11,"max_relative","","Replace the maximum relative value with the one specified.",1,N],[11,"eq","","Peform the equality comparison",1,[[["self"],["t"],["t"]],["bool"]]],[11,"ne","","Peform the inequality comparison",1,[[["self"],["t"],["t"]],["bool"]]],[11,"default","","",2,[[],["ulps"]]],[11,"epsilon","","Replace the epsilon value with the one specified.",2,N],[11,"max_ulps","","Replace the max ulps value with the one specified.",2,[[["self"],["u32"]],["ulps"]]],[11,"eq","","Peform the equality comparison",2,[[["self"],["t"],["t"]],["bool"]]],[11,"ne","","Peform the inequality comparison",2,[[["self"],["t"],["t"]],["bool"]]],[14,"abs_diff_eq","","Approximate equality of using the absolute difference.",N,N],[14,"abs_diff_ne","","Approximate inequality of using the absolute difference.",N,N],[14,"relative_eq","","Approximate equality using both the absolute difference and relative based comparisons.",N,N],[14,"relative_ne","","Approximate inequality using both the absolute difference and relative based comparisons.",N,N],[14,"ulps_eq","","Approximate equality using both the absolute difference and ULPs (Units in Last Place).",N,N],[14,"ulps_ne","","Approximate inequality using both the absolute difference and ULPs (Units in Last Place).",N,N],[14,"assert_abs_diff_eq","","An assertion that delegates to `abs_diff_eq!`, and panics with a helpful error on failure.",N,N],[14,"assert_abs_diff_ne","","An assertion that delegates to `abs_diff_ne!`, and panics with a helpful error on failure.",N,N],[14,"assert_relative_eq","","An assertion that delegates to `relative_eq!`, and panics with a helpful error on failure.",N,N],[14,"assert_relative_ne","","An assertion that delegates to `relative_ne!`, and panics with a helpful error on failure.",N,N],[14,"assert_ulps_eq","","An assertion that delegates to `ulps_eq!`, and panics with a helpful error on failure.",N,N],[14,"assert_ulps_ne","","An assertion that delegates to `ulps_ne!`, and panics with a helpful error on failure.",N,N],[11,"abs_diff_ne","","The inverse of `ApproxEq::abs_diff_eq`.",3,N],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",4,N],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",5,N]],"paths":[[3,"AbsDiff"],[3,"Relative"],[3,"Ulps"],[8,"AbsDiffEq"],[8,"RelativeEq"],[8,"UlpsEq"]]};
searchIndex["arrayvec"]={"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",N,N],[3,"CapacityError","","Error value indicating insufficient capacity",N,N],[3,"ArrayVec","","A vector with a fixed capacity.",N,N],[3,"IntoIter","","By-value iterator for `ArrayVec`.",N,N],[3,"Drain","","A draining iterator for `ArrayVec`.",N,N],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],["result",["capacityerror"]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],["result",["utf8error"]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],["result",["capacityerror"]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],["result",["capacityerror"]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],["option",["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["self"],["str"]],["result"]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["str"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["str"]],["bool"]]],[11,"le","","",0,[[["self"],["str"]],["bool"]]],[11,"gt","","",0,[[["self"],["str"]],["bool"]]],[11,"ge","","",0,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"cmp","","",1,[[["self"],["capacityerror"]],["ordering"]]],[11,"eq","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["capacityerror"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"le","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"gt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ge","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[["self"]],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,[[["self"]],["capacityerror"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Array","","Trait for fixed size arrays.",N,N],[16,"Item","","The array’s element type",2,N],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,N],[11,"try_push","","Push `element` to the end of the vector.",4,N],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,N],[11,"insert","","Insert `element` at position `index`.",4,N],[11,"try_insert","","Insert `element` at position `index`.",4,N],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,N],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,N],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,[[["self"],["r"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,[[["self"]],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,[[["self"]]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,N],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"from","","",4,[[["a"]],["self"]]],[11,"into_iter","","",4,[[["self"]],["intoiter"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"drop","","",6,[[["self"]]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"partial_cmp","","",4,[[["self"],["arrayvec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["arrayvec"]],["ordering"]]],[11,"write","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["atom"]={"doc":"","items":[[3,"Atom","atom","An Atom wraps an AtomicPtr, it allows for safe mutation of an atomic into common Rust Types.",N,N],[3,"AtomSetOnce","","This is a restricted version of the Atom. It allows for only `set_if_none` to be called.",N,N],[8,"IntoRawPtr","","Convert from into a raw pointer",N,N],[10,"into_raw","","",0,N],[8,"FromRawPtr","","Convert from a raw ptr into a pointer",N,N],[10,"from_raw","","",1,N],[8,"GetNextMut","","This is a utility Trait that fetches the next ptr from an object.",N,N],[16,"NextPtr","","",2,N],[10,"get_next","","",2,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"empty","","Create a empty Atom",3,[[],["atom"]]],[11,"new","","Create a new Atomic from Pointer P",3,[[["p"]],["atom"]]],[11,"swap","","Swap a new value into the Atom, This will try multiple times until it succeeds. The old value will be returned.",3,[[["self"],["p"]],["option"]]],[11,"take","","Take the value of the Atom replacing it with null pointer Returning the contents. If the contents was a `null` pointer the result will be `None`.",3,[[["self"]],["option"]]],[11,"set_if_none","","This will do a `CAS` setting the value only if it is NULL this will return `None` if the value was written, otherwise a `Some(v)` will be returned, where the value was the same value that you passed into this function",3,[[["self"],["p"]],["option"]]],[11,"replace_and_set_next","","Take the current content, write it into P then do a CAS to extent this Atom with the previous contents. This can be used to create a LIFO",3,[[["self"],["p"]],["bool"]]],[11,"is_none","","Check to see if an atom is None",3,[[["self"]],["bool"]]],[11,"drop","","",3,[[["self"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"empty","","Create an empty `AtomSetOnce`",4,[[],["atomsetonce"]]],[11,"new","","Create a new `AtomSetOnce` from Pointer P",4,[[["p"]],["atomsetonce"]]],[11,"set_if_none","","This will do a `CAS` setting the value only if it is NULL this will return `OK(())` if the value was written, otherwise a `Err(P)` will be returned, where the value was the same value that you passed into this function",4,[[["self"],["p"]],["option"]]],[11,"into_atom","","Convert an `AtomSetOnce` into an `Atom`",4,[[["self"]],["atom"]]],[11,"atom","","Allow access to the atom if exclusive access is granted",4,[[["self"]],["atom"]]],[11,"is_none","","Check to see if an atom is None",4,[[["self"]],["bool"]]],[11,"get","","If the Atom is set, get the value",4,[[["self"]],["option"]]],[11,"get_mut","","If the Atom is set, get the value",4,[[["self"]],["option"]]],[11,"dup","","Duplicate the inner pointer if it is set",4,[[["self"]],["option"]]]],"paths":[[8,"IntoRawPtr"],[8,"FromRawPtr"],[8,"GetNextMut"],[3,"Atom"],[3,"AtomSetOnce"]]};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["backtrace"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"]={"doc":"","items":[[4,"backtrace_state","backtrace_sys","",N,N],[5,"backtrace_create_state","","",N,N],[5,"backtrace_syminfo","","",N,N],[5,"backtrace_pcinfo","","",N,N],[6,"backtrace_syminfo_callback","","",N,N],[6,"backtrace_full_callback","","",N,N],[6,"backtrace_error_callback","","",N,N]],"paths":[]};
searchIndex["base64"]={"doc":"","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",N,N],[4,"CharacterSet","","Available encoding character sets",N,N],[13,"Standard","","The standard character set (uses `+` and `/`)",0,N],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",0,N],[4,"LineEnding","","",N,N],[13,"LF","","",1,N],[13,"CRLF","","",1,N],[4,"LineWrap","","",N,N],[13,"NoWrap","","",2,N],[13,"Wrap","","",2,N],[4,"DecodeError","","",N,N],[13,"InvalidByte","","",3,N],[13,"InvalidLength","","",3,N],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",N,[[["t"]],["string"]]],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",N,[[["t"]],["result",["vec","decodeerror"]]]],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",N,[[["t"],["config"]],["string"]]],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied buffer to avoid allocations.",N,[[["t"],["config"],["string"]]]],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",N,[[["t"],["config"]],["result",["vec","decodeerror"]]]],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",N,[[["t"],["config"],["vec"]],["result",["decodeerror"]]]],[7,"STANDARD","","",N,N],[7,"MIME","","",N,N],[7,"URL_SAFE","","",N,N],[7,"URL_SAFE_NO_PAD","","",N,N],[11,"clone","","",0,[[["self"]],["characterset"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["lineending"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["linewrap"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["config"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","",4,[[["characterset"],["bool"],["bool"],["linewrap"]],["config"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["decodeerror"]],["bool"]]],[11,"ne","","",3,[[["self"],["decodeerror"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]]],"paths":[[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DecodeError"],[3,"Config"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["cgmath"]={"doc":"A low-dimensional linear algebra library, targeted at computer graphics.","items":[[8,"ApproxEq","cgmath","Equality comparisons based on floating point tolerances.",N,N],[16,"Epsilon","","Used for specifying relative comparisons.",0,N],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",0,N],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",0,N],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",0,[[],["u32"]]],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",0,N],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",0,N],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",0,N],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",0,N],[3,"Relative","","The requisite parameters for testing for approximate equality.",N,N],[12,"lhs","","The left-hand side of the approximate equality comparison.",1,N],[12,"rhs","","The right-hand side of the approximate equality comparison.",1,N],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,N],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",1,N],[3,"Ulps","","The requisite parameters for testing for approximate equality.",N,N],[12,"lhs","","The left-hand side of the approximate equality comparison.",2,N],[12,"rhs","","The right-hand side of the approximate equality comparison.",2,N],[12,"epsilon","","The tolerance to use when testing values that are close together.",2,N],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",2,N],[14,"assert_ulps_ne","","",N,N],[14,"assert_ulps_eq","","",N,N],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",N,N],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",N,N],[14,"assert_relative_ne","","",N,N],[14,"assert_relative_eq","","",N,N],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",N,N],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",N,N],[8,"Bounded","","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",3,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",3,[[],["self"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",5,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",5,[[["self"]],["bool"]]],[3,"Matrix2","","A 2 x 2, column major matrix",N,N],[12,"x","","The first column of the matrix.",6,N],[12,"y","","The second column of the matrix.",6,N],[3,"Matrix3","","A 3 x 3, column major matrix",N,N],[12,"x","","The first column of the matrix.",7,N],[12,"y","","The second column of the matrix.",7,N],[12,"z","","The third column of the matrix.",7,N],[3,"Matrix4","","A 4 x 4, column major matrix",N,N],[12,"x","","The first column of the matrix.",8,N],[12,"y","","The second column of the matrix.",8,N],[12,"z","","The third column of the matrix.",8,N],[12,"w","","The fourth column of the matrix.",8,N],[3,"Quaternion","","A quaternion in scalar/vector form.",N,N],[12,"s","","The scalar part of the quaternion.",9,N],[12,"v","","The vector part of the quaternion.",9,N],[3,"Vector1","","A 1-dimensional vector.",N,N],[12,"x","","The x component of the vector.",10,N],[3,"Vector2","","A 2-dimensional vector.",N,N],[12,"x","","The x component of the vector.",11,N],[12,"y","","The y component of the vector.",11,N],[3,"Vector3","","A 3-dimensional vector.",N,N],[12,"x","","The x component of the vector.",12,N],[12,"y","","The y component of the vector.",12,N],[12,"z","","The z component of the vector.",12,N],[3,"Vector4","","A 4-dimensional vector.",N,N],[12,"x","","The x component of the vector.",13,N],[12,"y","","The y component of the vector.",13,N],[12,"z","","The z component of the vector.",13,N],[12,"w","","The w component of the vector.",13,N],[3,"Deg","","An angle, in degrees.",N,N],[12,"0","","",14,N],[3,"Rad","","An angle, in radians.",N,N],[12,"0","","",15,N],[3,"Euler","","A set of [Euler angles] representing a rotation in three-dimensional space.",N,N],[12,"x","","The angle to apply around the x axis. Also known at the pitch.",16,N],[12,"y","","The angle to apply around the y axis. Also known at the yaw.",16,N],[12,"z","","The angle to apply around the z axis. Also known at the roll.",16,N],[3,"Point1","","A point in 1-dimensional space.",N,N],[12,"x","","",17,N],[3,"Point2","","A point in 2-dimensional space.",N,N],[12,"x","","",18,N],[12,"y","","",18,N],[3,"Point3","","A point in 3-dimensional space.",N,N],[12,"x","","",19,N],[12,"y","","",19,N],[12,"z","","",19,N],[3,"Basis2","","A two-dimensional rotation matrix.",N,N],[3,"Basis3","","A three-dimensional rotation matrix.",N,N],[3,"Decomposed","","A generic transformation consisting of a rotation, displacement vector and scale amount.",N,N],[12,"scale","","",20,N],[12,"rot","","",20,N],[12,"disp","","",20,N],[3,"PerspectiveFov","","A perspective projection based on a vertical field-of-view angle.",N,N],[12,"fovy","","",21,N],[12,"aspect","","",21,N],[12,"near","","",21,N],[12,"far","","",21,N],[3,"Perspective","","A perspective projection with arbitrary left/right/bottom/top distances",N,N],[12,"left","","",22,N],[12,"right","","",22,N],[12,"bottom","","",22,N],[12,"top","","",22,N],[12,"near","","",22,N],[12,"far","","",22,N],[3,"Ortho","","An orthographic projection with arbitrary left/right/bottom/top distances",N,N],[12,"left","","",23,N],[12,"right","","",23,N],[12,"bottom","","",23,N],[12,"top","","",23,N],[12,"near","","",23,N],[12,"far","","",23,N],[5,"dot","","Dot product of two vectors.",N,N],[5,"vec1","","The short constructor.",N,[[["s"]],["vector1"]]],[5,"vec2","","The short constructor.",N,[[["s"],["s"]],["vector2"]]],[5,"vec3","","The short constructor.",N,[[["s"],["s"],["s"]],["vector3"]]],[5,"vec4","","The short constructor.",N,[[["s"],["s"],["s"],["s"]],["vector4"]]],[5,"perspective","","Create a perspective projection matrix.",N,[[["a"],["s"],["s"],["s"]],["matrix4"]]],[5,"frustum","","Create a perspective matrix from a view frustum.",N,[[["s"],["s"],["s"],["s"],["s"],["s"]],["matrix4"]]],[5,"ortho","","Create an orthographic projection matrix.",N,[[["s"],["s"],["s"],["s"],["s"],["s"]],["matrix4"]]],[0,"conv","","Constrained conversion functions for assisting in situations where type inference is difficult.",N,N],[5,"array2","cgmath::conv","Force a conversion into a 2-element array.",N,N],[5,"array3","","Force a conversion into a 3-element array.",N,N],[5,"array4","","Force a conversion into a 4-element array.",N,N],[5,"array2x2","","Force a conversion into a 2x2-element array.",N,N],[5,"array3x3","","Force a conversion into a 3x3-element array.",N,N],[5,"array4x4","","Force a conversion into a 4x4-element array.",N,N],[0,"prelude","cgmath","This module contains the most common traits used in `cgmath`. By glob-importing this module, you can avoid the need to import each trait individually, while still being selective about what types you import.",N,N],[8,"Bounded","cgmath::prelude","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",3,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",3,[[],["self"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",5,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",5,[[["self"]],["bool"]]],[8,"Array","","An array containing elements of type `Element`",N,N],[16,"Element","","",24,N],[10,"len","","Get the number of elements in the array type",24,[[],["usize"]]],[10,"from_value","","Construct a vector from a single value, replicating it.",24,N],[11,"as_ptr","","Get the pointer to the first element of the array.",24,N],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",24,N],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",24,[[["self"],["usize"],["usize"]]]],[10,"sum","","The sum of the elements of the array.",24,N],[10,"product","","The product of the elements of the array.",24,N],[8,"ElementWise","","Element-wise arithmetic operations. These are supplied for pragmatic reasons, but will usually fall outside of traditional algebraic properties.",N,N],[10,"add_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"sub_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"mul_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"div_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"rem_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"add_assign_element_wise","","",25,[[["self"],["rhs"]]]],[10,"sub_assign_element_wise","","",25,[[["self"],["rhs"]]]],[10,"mul_assign_element_wise","","",25,[[["self"],["rhs"]]]],[10,"div_assign_element_wise","","",25,[[["self"],["rhs"]]]],[10,"rem_assign_element_wise","","",25,[[["self"],["rhs"]]]],[8,"VectorSpace","","Vectors that can be added together and multiplied by scalars.",N,N],[16,"Scalar","","The associated scalar.",26,N],[8,"MetricSpace","","A type with a distance function between values.",N,N],[16,"Metric","","The metric to be returned by the `distance` function.",27,N],[10,"distance2","","Returns the squared distance.",27,N],[11,"distance","","The distance between two values.",27,N],[8,"InnerSpace","","Vectors that also have a dot (or inner) product.",N,N],[10,"dot","","Vector dot (or inner) product.",28,N],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",28,[[["self"],["self"]],["bool"]]],[11,"magnitude2","","Returns the squared magnitude.",28,N],[11,"magnitude","","The distance from the tail to the tip of the vector.",28,N],[11,"angle","","Returns the angle between two vectors in radians.",28,[[["self"],["self"]],["rad"]]],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",28,[[["self"]],["self"]]],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",28,N],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",28,N],[11,"project_on","","Returns the vector projection of the current inner space projected onto the supplied argument.",28,[[["self"],["self"]],["self"]]],[8,"EuclideanSpace","","Points in a Euclidean space with an associated space of displacement vectors.",N,N],[16,"Scalar","","The associated scalar over which the space is defined.",29,N],[16,"Diff","","The associated space of displacement vectors.",29,N],[10,"origin","","The point at the origin of the Euclidean space.",29,[[],["self"]]],[10,"from_vec","","Convert a displacement vector to a point.",29,N],[10,"to_vec","","Convert a point to a displacement vector.",29,N],[11,"midpoint","","Returns the middle point between two other points.",29,[[["self"],["self"]],["self"]]],[11,"centroid","","Returns the average position of all points in the slice.",29,N],[10,"dot","","This is a weird one, but its useful for plane calculations.",29,N],[8,"Matrix","","A column-major matrix of arbitrary dimensions.",N,N],[16,"Row","","The row vector of the matrix.",30,N],[16,"Column","","The column vector of the matrix.",30,N],[16,"Transpose","","The result of transposing the matrix",30,N],[11,"as_ptr","","Get the pointer to the first element of the array.",30,N],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",30,N],[11,"replace_col","","Replace a column in the array.",30,N],[10,"row","","Get a row from this matrix by-value.",30,N],[10,"swap_rows","","Swap two rows of this array.",30,[[["self"],["usize"],["usize"]]]],[10,"swap_columns","","Swap two columns of this array.",30,[[["self"],["usize"],["usize"]]]],[10,"swap_elements","","Swap the values at index `a` and `b`",30,N],[10,"transpose","","Transpose this matrix, returning a new matrix.",30,N],[8,"SquareMatrix","","A column-major major matrix where the rows and column vectors are of the same dimensions.",N,N],[16,"ColumnRow","","The row/column vector of the matrix.",31,N],[10,"from_value","","Create a new diagonal matrix using the supplied value.",31,N],[10,"from_diagonal","","Create a matrix from a non-uniform scale",31,N],[11,"identity","","The [identity matrix]. Multiplying this matrix with another should have no effect.",31,[[],["self"]]],[10,"transpose_self","","Transpose this matrix in-place.",31,[[["self"]]]],[10,"determinant","","Take the determinant of this matrix.",31,N],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",31,N],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",31,N],[10,"invert","","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is the identity matrix. Returns `None` if this matrix is not invertible (has a determinant of zero).",31,[[["self"]],["option"]]],[11,"is_invertible","","Test if this matrix is invertible.",31,[[["self"]],["bool"]]],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",31,[[["self"]],["bool"]]],[10,"is_diagonal","","Test if this is a diagonal matrix. That is, every element outside of the diagonal is 0.",31,[[["self"]],["bool"]]],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its transpose.",31,[[["self"]],["bool"]]],[8,"Angle","","Angles and their associated trigonometric functions.",N,N],[16,"Unitless","","",32,N],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",32,[[["self"]],["self"]]],[11,"opposite","","Return the angle rotated by half a turn.",32,[[["self"]],["self"]]],[11,"bisect","","Returns the interior bisector of the two angles.",32,[[["self"],["self"]],["self"]]],[10,"full_turn","","A full rotation.",32,[[],["self"]]],[11,"turn_div_2","","Half of a full rotation.",32,[[],["self"]]],[11,"turn_div_3","","A third of a full rotation.",32,[[],["self"]]],[11,"turn_div_4","","A quarter of a full rotation.",32,[[],["self"]]],[11,"turn_div_6","","A sixth of a full rotation.",32,[[],["self"]]],[10,"sin","","Compute the sine of the angle, returning a unitless ratio.",32,N],[10,"cos","","Compute the cosine of the angle, returning a unitless ratio.",32,N],[10,"tan","","Compute the tangent of the angle, returning a unitless ratio.",32,N],[10,"sin_cos","","Compute the sine and cosine of the angle, returning the result as a pair.",32,N],[11,"csc","","Compute the cosecant of the angle.",32,N],[11,"cot","","Compute the cotangent of the angle.",32,N],[11,"sec","","Compute the secant of the angle.",32,N],[10,"asin","","Compute the arcsine of the ratio, returning the resulting angle.",32,N],[10,"acos","","Compute the arccosine of the ratio, returning the resulting angle.",32,N],[10,"atan","","Compute the arctangent of the ratio, returning the resulting angle.",32,N],[10,"atan2","","",32,N],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that creates a circular motion, and preserves at least one point in the space.",N,N],[10,"look_at","","Create a rotation to a given direction with an 'up' vector.",33,N],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'. Both given vectors are assumed to have unit length.",33,N],[10,"rotate_vector","","Rotate a vector using this rotation.",33,N],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its representation as a vector.",33,[[["self"],["p"]],["p"]]],[10,"invert","","Create a new rotation which \"un-does\" this rotation. That is, `r * r.invert()` is the identity.",33,[[["self"]],["self"]]],[8,"Rotation2","","A two-dimensional rotation.",N,N],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both from_axis_angle() and from_euler() for 2D space.",34,[[["a"]],["self"]]],[8,"Rotation3","","A three-dimensional rotation.",N,N],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",35,[[["vector3"],["a"]],["self"]]],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",35,[[["a"]],["self"]]],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",35,[[["a"]],["self"]]],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",35,[[["a"]],["self"]]],[8,"Transform","","A trait representing an affine transformation that can be applied to points or vectors. An affine transformation is one which",N,N],[10,"one","","Create an identity transformation. That is, a transformation which does nothing.",36,[[],["self"]]],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from `eye`, using `up` for orientation.",36,N],[10,"transform_vector","","Transform a vector using this transform.",36,N],[11,"inverse_transform_vector","","Inverse transform a vector using this transform",36,N],[10,"transform_point","","Transform a point using this transform.",36,[[["self"],["p"]],["p"]]],[10,"concat","","Combine this transform with another, yielding a new transformation which has the effects of both.",36,[[["self"],["self"]],["self"]]],[10,"inverse_transform","","Create a transform that \"un-does\" this one.",36,[[["self"]],["option"]]],[11,"concat_self","","Combine this transform with another, in-place.",36,[[["self"],["self"]]]],[8,"Transform2","","",N,N],[8,"Transform3","","",N,N],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[11,"as_ptr","","Get the pointer to the first element of the array.",24,N],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",24,N],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",24,[[["self"],["usize"],["usize"]]]],[11,"distance","","The distance between two values.",27,N],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",28,[[["self"],["self"]],["bool"]]],[11,"magnitude2","","Returns the squared magnitude.",28,N],[11,"magnitude","","The distance from the tail to the tip of the vector.",28,N],[11,"angle","","Returns the angle between two vectors in radians.",28,[[["self"],["self"]],["rad"]]],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",28,[[["self"]],["self"]]],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",28,N],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",28,N],[11,"project_on","","Returns the vector projection of the current inner space projected onto the supplied argument.",28,[[["self"],["self"]],["self"]]],[11,"midpoint","","Returns the middle point between two other points.",29,[[["self"],["self"]],["self"]]],[11,"centroid","","Returns the average position of all points in the slice.",29,N],[11,"as_ptr","","Get the pointer to the first element of the array.",30,N],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",30,N],[11,"replace_col","","Replace a column in the array.",30,N],[11,"identity","","The [identity matrix]. Multiplying this matrix with another should have no effect.",31,[[],["self"]]],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",31,N],[11,"is_invertible","","Test if this matrix is invertible.",31,[[["self"]],["bool"]]],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",31,[[["self"]],["bool"]]],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",32,[[["self"]],["self"]]],[11,"opposite","","Return the angle rotated by half a turn.",32,[[["self"]],["self"]]],[11,"bisect","","Returns the interior bisector of the two angles.",32,[[["self"],["self"]],["self"]]],[11,"turn_div_2","","Half of a full rotation.",32,[[],["self"]]],[11,"turn_div_3","","A third of a full rotation.",32,[[],["self"]]],[11,"turn_div_4","","A quarter of a full rotation.",32,[[],["self"]]],[11,"turn_div_6","","A sixth of a full rotation.",32,[[],["self"]]],[11,"csc","","Compute the cosecant of the angle.",32,N],[11,"cot","","Compute the cotangent of the angle.",32,N],[11,"sec","","Compute the secant of the angle.",32,N],[11,"clone","cgmath","",6,[[["self"]],["matrix2"]]],[11,"eq","","",6,[[["self"],["matrix2"]],["bool"]]],[11,"ne","","",6,[[["self"],["matrix2"]],["bool"]]],[11,"clone","","",7,[[["self"]],["matrix3"]]],[11,"eq","","",7,[[["self"],["matrix3"]],["bool"]]],[11,"ne","","",7,[[["self"],["matrix3"]],["bool"]]],[11,"clone","","",8,[[["self"]],["matrix4"]]],[11,"eq","","",8,[[["self"],["matrix4"]],["bool"]]],[11,"ne","","",8,[[["self"],["matrix4"]],["bool"]]],[11,"new","","Create a new matrix, providing values for each index.",6,[[["s"],["s"],["s"],["s"]],["matrix2"]]],[11,"from_cols","","Create a new matrix, providing columns.",6,[[["vector2"],["vector2"]],["matrix2"]]],[11,"look_at","","Create a transformation matrix that will cause a vector to point at `dir`, using `up` for orientation.",6,[[["vector2"],["vector2"]],["matrix2"]]],[11,"from_angle","","",6,[[["a"]],["matrix2"]]],[11,"new","","Create a new matrix, providing values for each index.",7,[[["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"]],["matrix3"]]],[11,"from_cols","","Create a new matrix, providing columns.",7,[[["vector3"],["vector3"],["vector3"]],["matrix3"]]],[11,"look_at","","Create a rotation matrix that will cause a vector to point at `dir`, using `up` for orientation.",7,[[["vector3"],["vector3"]],["matrix3"]]],[11,"from_angle_x","","Create a rotation matrix from a rotation around the `x` axis (pitch).",7,[[["a"]],["matrix3"]]],[11,"from_angle_y","","Create a rotation matrix from a rotation around the `y` axis (yaw).",7,[[["a"]],["matrix3"]]],[11,"from_angle_z","","Create a rotation matrix from a rotation around the `z` axis (roll).",7,[[["a"]],["matrix3"]]],[11,"from_axis_angle","","Create a rotation matrix from an angle around an arbitrary axis.",7,[[["vector3"],["a"]],["matrix3"]]],[11,"new","","Create a new matrix, providing values for each index.",8,[[["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"],["s"]],["matrix4"]]],[11,"from_cols","","Create a new matrix, providing columns.",8,[[["vector4"],["vector4"],["vector4"],["vector4"]],["matrix4"]]],[11,"from_translation","","Create a homogeneous transformation matrix from a translation vector.",8,[[["vector3"]],["matrix4"]]],[11,"from_scale","","Create a homogeneous transformation matrix from a scale value.",8,[[["s"]],["matrix4"]]],[11,"from_nonuniform_scale","","Create a homogeneous transformation matrix from a set of scale values.",8,[[["s"],["s"],["s"]],["matrix4"]]],[11,"look_at_dir","","Create a homogeneous transformation matrix that will cause a vector to point at `dir`, using `up` for orientation.",8,[[["point3"],["vector3"],["vector3"]],["matrix4"]]],[11,"look_at","","Create a homogeneous transformation matrix that will cause a vector to point at `center`, using `up` for orientation.",8,[[["point3"],["point3"],["vector3"]],["matrix4"]]],[11,"from_angle_x","","Create a homogeneous transformation matrix from a rotation around the `x` axis (pitch).",8,[[["a"]],["matrix4"]]],[11,"from_angle_y","","Create a homogeneous transformation matrix from a rotation around the `y` axis (yaw).",8,[[["a"]],["matrix4"]]],[11,"from_angle_z","","Create a homogeneous transformation matrix from a rotation around the `z` axis (roll).",8,[[["a"]],["matrix4"]]],[11,"from_axis_angle","","Create a homogeneous transformation matrix from an angle around an arbitrary axis.",8,[[["vector3"],["a"]],["matrix4"]]],[11,"zero","","",6,[[],["matrix2"]]],[11,"is_zero","","",6,[[["self"]],["bool"]]],[11,"zero","","",7,[[],["matrix3"]]],[11,"is_zero","","",7,[[["self"]],["bool"]]],[11,"zero","","",8,[[],["matrix4"]]],[11,"is_zero","","",8,[[["self"]],["bool"]]],[11,"one","","",6,[[],["matrix2"]]],[11,"one","","",7,[[],["matrix3"]]],[11,"one","","",8,[[],["matrix4"]]],[11,"row","","",6,[[["self"],["usize"]],["vector2"]]],[11,"swap_rows","","",6,[[["self"],["usize"],["usize"]]]],[11,"swap_columns","","",6,[[["self"],["usize"],["usize"]]]],[11,"swap_elements","","",6,N],[11,"transpose","","",6,[[["self"]],["matrix2"]]],[11,"from_value","","",6,[[["s"]],["matrix2"]]],[11,"from_diagonal","","",6,[[["vector2"]],["matrix2"]]],[11,"transpose_self","","",6,[[["self"]]]],[11,"determinant","","",6,[[["self"]],["s"]]],[11,"diagonal","","",6,[[["self"]],["vector2"]]],[11,"invert","","",6,[[["self"]],["option",["matrix2"]]]],[11,"is_diagonal","","",6,[[["self"]],["bool"]]],[11,"is_symmetric","","",6,[[["self"]],["bool"]]],[11,"row","","",7,[[["self"],["usize"]],["vector3"]]],[11,"swap_rows","","",7,[[["self"],["usize"],["usize"]]]],[11,"swap_columns","","",7,[[["self"],["usize"],["usize"]]]],[11,"swap_elements","","",7,N],[11,"transpose","","",7,[[["self"]],["matrix3"]]],[11,"from_value","","",7,[[["s"]],["matrix3"]]],[11,"from_diagonal","","",7,[[["vector3"]],["matrix3"]]],[11,"transpose_self","","",7,[[["self"]]]],[11,"determinant","","",7,[[["self"]],["s"]]],[11,"diagonal","","",7,[[["self"]],["vector3"]]],[11,"invert","","",7,[[["self"]],["option",["matrix3"]]]],[11,"is_diagonal","","",7,[[["self"]],["bool"]]],[11,"is_symmetric","","",7,[[["self"]],["bool"]]],[11,"row","","",8,[[["self"],["usize"]],["vector4"]]],[11,"swap_rows","","",8,[[["self"],["usize"],["usize"]]]],[11,"swap_columns","","",8,[[["self"],["usize"],["usize"]]]],[11,"swap_elements","","",8,N],[11,"transpose","","",8,[[["self"]],["matrix4"]]],[11,"from_value","","",8,[[["s"]],["matrix4"]]],[11,"from_diagonal","","",8,[[["vector4"]],["matrix4"]]],[11,"transpose_self","","",8,[[["self"]]]],[11,"determinant","","",8,[[["self"]],["s"]]],[11,"diagonal","","",8,[[["self"]],["vector4"]]],[11,"invert","","",8,[[["self"]],["option",["matrix4"]]]],[11,"is_diagonal","","",8,[[["self"]],["bool"]]],[11,"is_symmetric","","",8,[[["self"]],["bool"]]],[11,"default_epsilon","","",6,N],[11,"default_max_relative","","",6,N],[11,"default_max_ulps","","",6,[[],["u32"]]],[11,"relative_eq","","",6,N],[11,"ulps_eq","","",6,N],[11,"default_epsilon","","",7,N],[11,"default_max_relative","","",7,N],[11,"default_max_ulps","","",7,[[],["u32"]]],[11,"relative_eq","","",7,N],[11,"ulps_eq","","",7,N],[11,"default_epsilon","","",8,N],[11,"default_max_relative","","",8,N],[11,"default_max_ulps","","",8,[[],["u32"]]],[11,"relative_eq","","",8,N],[11,"ulps_eq","","",8,N],[11,"one","","",7,[[],["matrix3"]]],[11,"look_at","","",7,[[["point2"],["point2"],["vector2"]],["matrix3"]]],[11,"transform_vector","","",7,[[["self"],["vector2"]],["vector2"]]],[11,"transform_point","","",7,[[["self"],["point2"]],["point2"]]],[11,"concat","","",7,[[["self"],["matrix3"]],["matrix3"]]],[11,"inverse_transform","","",7,[[["self"]],["option",["matrix3"]]]],[11,"one","","",7,[[],["matrix3"]]],[11,"look_at","","",7,[[["point3"],["point3"],["vector3"]],["matrix3"]]],[11,"transform_vector","","",7,[[["self"],["vector3"]],["vector3"]]],[11,"transform_point","","",7,[[["self"],["point3"]],["point3"]]],[11,"concat","","",7,[[["self"],["matrix3"]],["matrix3"]]],[11,"inverse_transform","","",7,[[["self"]],["option",["matrix3"]]]],[11,"one","","",8,[[],["matrix4"]]],[11,"look_at","","",8,[[["point3"],["point3"],["vector3"]],["matrix4"]]],[11,"transform_vector","","",8,[[["self"],["vector3"]],["vector3"]]],[11,"transform_point","","",8,[[["self"],["point3"]],["point3"]]],[11,"concat","","",8,[[["self"],["matrix4"]],["matrix4"]]],[11,"inverse_transform","","",8,[[["self"]],["option",["matrix4"]]]],[11,"neg","","",6,[[["self"]],["matrix2"]]],[11,"mul","","",6,[[["self"],["s"]],["matrix2"]]],[11,"div","","",6,[[["self"],["s"]],["matrix2"]]],[11,"rem","","",6,[[["self"],["s"]],["matrix2"]]],[11,"mul_assign","","",6,[[["self"],["s"]]]],[11,"div_assign","","",6,[[["self"],["s"]]]],[11,"rem_assign","","",6,[[["self"],["s"]]]],[11,"add","","",6,[[["self"],["matrix2"]],["matrix2"]]],[11,"add","","",6,[[["self"],["matrix2"]],["matrix2"]]],[11,"sub","","",6,[[["self"],["matrix2"]],["matrix2"]]],[11,"sub","","",6,[[["self"],["matrix2"]],["matrix2"]]],[11,"add_assign","","",6,[[["self"],["matrix2"]]]],[11,"sub_assign","","",6,[[["self"],["matrix2"]]]],[11,"sum","","",6,[[["i"]],["matrix2"]]],[11,"sum","","",6,[[["i"]],["matrix2"]]],[11,"product","","",6,[[["i"]],["matrix2"]]],[11,"product","","",6,[[["i"]],["matrix2"]]],[11,"cast","","Component-wise casting to another type",6,[[["self"]],["option",["matrix2"]]]],[11,"neg","","",7,[[["self"]],["matrix3"]]],[11,"mul","","",7,[[["self"],["s"]],["matrix3"]]],[11,"div","","",7,[[["self"],["s"]],["matrix3"]]],[11,"rem","","",7,[[["self"],["s"]],["matrix3"]]],[11,"mul_assign","","",7,[[["self"],["s"]]]],[11,"div_assign","","",7,[[["self"],["s"]]]],[11,"rem_assign","","",7,[[["self"],["s"]]]],[11,"add","","",7,[[["self"],["matrix3"]],["matrix3"]]],[11,"add","","",7,[[["self"],["matrix3"]],["matrix3"]]],[11,"sub","","",7,[[["self"],["matrix3"]],["matrix3"]]],[11,"sub","","",7,[[["self"],["matrix3"]],["matrix3"]]],[11,"add_assign","","",7,[[["self"],["matrix3"]]]],[11,"sub_assign","","",7,[[["self"],["matrix3"]]]],[11,"sum","","",7,[[["i"]],["matrix3"]]],[11,"sum","","",7,[[["i"]],["matrix3"]]],[11,"product","","",7,[[["i"]],["matrix3"]]],[11,"product","","",7,[[["i"]],["matrix3"]]],[11,"cast","","Component-wise casting to another type",7,[[["self"]],["option",["matrix3"]]]],[11,"neg","","",8,[[["self"]],["matrix4"]]],[11,"mul","","",8,[[["self"],["s"]],["matrix4"]]],[11,"div","","",8,[[["self"],["s"]],["matrix4"]]],[11,"rem","","",8,[[["self"],["s"]],["matrix4"]]],[11,"mul_assign","","",8,[[["self"],["s"]]]],[11,"div_assign","","",8,[[["self"],["s"]]]],[11,"rem_assign","","",8,[[["self"],["s"]]]],[11,"add","","",8,[[["self"],["matrix4"]],["matrix4"]]],[11,"add","","",8,[[["self"],["matrix4"]],["matrix4"]]],[11,"sub","","",8,[[["self"],["matrix4"]],["matrix4"]]],[11,"sub","","",8,[[["self"],["matrix4"]],["matrix4"]]],[11,"add_assign","","",8,[[["self"],["matrix4"]]]],[11,"sub_assign","","",8,[[["self"],["matrix4"]]]],[11,"sum","","",8,[[["i"]],["matrix4"]]],[11,"sum","","",8,[[["i"]],["matrix4"]]],[11,"product","","",8,[[["i"]],["matrix4"]]],[11,"product","","",8,[[["i"]],["matrix4"]]],[11,"cast","","Component-wise casting to another type",8,[[["self"]],["option",["matrix4"]]]],[11,"mul","","",6,[[["self"],["vector2"]],["vector2"]]],[11,"mul","","",6,[[["self"],["vector2"]],["vector2"]]],[11,"mul","","",7,[[["self"],["vector3"]],["vector3"]]],[11,"mul","","",7,[[["self"],["vector3"]],["vector3"]]],[11,"mul","","",8,[[["self"],["vector4"]],["vector4"]]],[11,"mul","","",8,[[["self"],["vector4"]],["vector4"]]],[11,"mul","","",6,[[["self"],["matrix2"]],["matrix2"]]],[11,"mul","","",6,[[["self"],["matrix2"]],["matrix2"]]],[11,"mul","","",7,[[["self"],["matrix3"]],["matrix3"]]],[11,"mul","","",7,[[["self"],["matrix3"]],["matrix3"]]],[11,"mul","","",8,[[["self"],["matrix4"]],["matrix4"]]],[11,"mul","","",8,[[["self"],["matrix4"]],["matrix4"]]],[11,"index","","",6,[[["self"],["usize"]],["vector2"]]],[11,"index_mut","","",6,[[["self"],["usize"]],["vector2"]]],[11,"index","","",7,[[["self"],["usize"]],["vector3"]]],[11,"index_mut","","",7,[[["self"],["usize"]],["vector3"]]],[11,"index","","",8,[[["self"],["usize"]],["vector4"]]],[11,"index_mut","","",8,[[["self"],["usize"]],["vector4"]]],[11,"from","","",7,[[["euler"]],["matrix3"]]],[11,"from","","",8,[[["euler"]],["matrix4"]]],[11,"into","","",6,N],[11,"as_ref","","",6,N],[11,"as_mut","","",6,N],[11,"from","","",6,N],[11,"as_ref","","",6,N],[11,"as_mut","","",6,N],[11,"into","","",7,N],[11,"as_ref","","",7,N],[11,"as_mut","","",7,N],[11,"from","","",7,N],[11,"as_ref","","",7,N],[11,"as_mut","","",7,N],[11,"into","","",8,N],[11,"as_ref","","",8,N],[11,"as_mut","","",8,N],[11,"from","","",8,N],[11,"as_ref","","",8,N],[11,"as_mut","","",8,N],[11,"into","","",6,[[["self"]],["columnmatrix2"]]],[11,"from","","",6,[[["columnmatrix2"]],["self"]]],[11,"into","","",7,[[["self"]],["columnmatrix3"]]],[11,"from","","",7,[[["columnmatrix3"]],["self"]]],[11,"into","","",8,[[["self"]],["columnmatrix4"]]],[11,"from","","",8,[[["columnmatrix4"]],["self"]]],[11,"from","","Clone the elements of a 2-dimensional matrix into the top-left corner of a 3-dimensional identity matrix.",7,[[["matrix2"]],["matrix3"]]],[11,"from","","Clone the elements of a 2-dimensional matrix into the top-left corner of a 4-dimensional identity matrix.",8,[[["matrix2"]],["matrix4"]]],[11,"from","","Clone the elements of a 3-dimensional matrix into the top-left corner of a 4-dimensional identity matrix.",8,[[["matrix3"]],["matrix4"]]],[11,"from","","Convert the matrix to a quaternion",9,[[["matrix3"]],["quaternion"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"rand","","",6,[[["r"]],["matrix2"]]],[11,"rand","","",7,[[["r"]],["matrix3"]]],[11,"rand","","",8,[[["r"]],["matrix4"]]],[11,"clone","","",9,[[["self"]],["quaternion"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["quaternion"]],["bool"]]],[11,"ne","","",9,[[["self"],["quaternion"]],["bool"]]],[11,"new","","Construct a new quaternion from one scalar component and three imaginary components.",9,[[["s"],["s"],["s"],["s"]],["quaternion"]]],[11,"from_sv","","Construct a new quaternion from a scalar and a vector.",9,[[["s"],["vector3"]],["quaternion"]]],[11,"from_arc","","Construct a new quaternion as a closest arc between two vectors",9,[[["vector3"],["vector3"],["option",["vector3"]]],["quaternion"]]],[11,"conjugate","","The conjugate of the quaternion.",9,[[["self"]],["quaternion"]]],[11,"nlerp","","Do a normalized linear interpolation with `other`, by `amount`.",9,[[["self"],["quaternion"],["s"]],["quaternion"]]],[11,"slerp","","Spherical Linear Interpolation",9,[[["self"],["quaternion"],["s"]],["quaternion"]]],[11,"zero","","",9,[[],["quaternion"]]],[11,"is_zero","","",9,[[["self"]],["bool"]]],[11,"one","","",9,[[],["quaternion"]]],[11,"sum","","",9,[[["i"]],["quaternion"]]],[11,"sum","","",9,[[["i"]],["quaternion"]]],[11,"product","","",9,[[["i"]],["quaternion"]]],[11,"product","","",9,[[["i"]],["quaternion"]]],[11,"distance2","","",9,[[["self"],["self"]],["s"]]],[11,"cast","","Component-wise casting to another type.",9,[[["self"]],["option",["quaternion"]]]],[11,"dot","","",9,[[["self"],["quaternion"]],["s"]]],[11,"from","","",9,[[["euler"]],["quaternion"]]],[11,"neg","","",9,[[["self"]],["quaternion"]]],[11,"mul","","",9,[[["self"],["s"]],["quaternion"]]],[11,"mul_assign","","",9,[[["self"],["s"]]]],[11,"div","","",9,[[["self"],["s"]],["quaternion"]]],[11,"div_assign","","",9,[[["self"],["s"]]]],[11,"rem","","",9,[[["self"],["s"]],["quaternion"]]],[11,"rem_assign","","",9,[[["self"],["s"]]]],[11,"mul","","",9,[[["self"],["vector3"]],["vector3"]]],[11,"mul","","",9,[[["self"],["vector3"]],["vector3"]]],[11,"add","","",9,[[["self"],["quaternion"]],["quaternion"]]],[11,"add","","",9,[[["self"],["quaternion"]],["quaternion"]]],[11,"add_assign","","",9,[[["self"],["quaternion"]]]],[11,"sub","","",9,[[["self"],["quaternion"]],["quaternion"]]],[11,"sub","","",9,[[["self"],["quaternion"]],["quaternion"]]],[11,"sub_assign","","",9,[[["self"],["quaternion"]]]],[11,"mul","","",9,[[["self"],["quaternion"]],["quaternion"]]],[11,"mul","","",9,[[["self"],["quaternion"]],["quaternion"]]],[11,"default_epsilon","","",9,N],[11,"default_max_relative","","",9,N],[11,"default_max_ulps","","",9,[[],["u32"]]],[11,"relative_eq","","",9,N],[11,"ulps_eq","","",9,N],[11,"from","","Convert the quaternion to a 3 x 3 rotation matrix.",7,[[["quaternion"]],["matrix3"]]],[11,"from","","Convert the quaternion to a 4 x 4 rotation matrix.",8,[[["quaternion"]],["matrix4"]]],[11,"from","","",37,[[["quaternion"]],["basis3"]]],[11,"look_at","","",9,[[["vector3"],["vector3"]],["quaternion"]]],[11,"between_vectors","","",9,[[["vector3"],["vector3"]],["quaternion"]]],[11,"rotate_vector","","",9,[[["self"],["vector3"]],["vector3"]]],[11,"invert","","",9,[[["self"]],["quaternion"]]],[11,"from_axis_angle","","",9,[[["vector3"],["a"]],["quaternion"]]],[11,"into","","",9,N],[11,"as_ref","","",9,N],[11,"as_mut","","",9,N],[11,"from","","",9,N],[11,"into","","",9,N],[11,"as_ref","","",9,N],[11,"as_mut","","",9,N],[11,"from","","",9,N],[11,"index","","",9,[[["self"],["usize"]],["s"]]],[11,"index_mut","","",9,[[["self"],["usize"]],["s"]]],[11,"index","","",9,N],[11,"index_mut","","",9,N],[11,"index","","",9,N],[11,"index_mut","","",9,N],[11,"index","","",9,N],[11,"index_mut","","",9,N],[11,"index","","",9,N],[11,"index_mut","","",9,N],[11,"rand","","",9,[[["r"]],["quaternion"]]],[11,"from","","",9,[[["quaternion"]],["self"]]],[11,"into","","",9,[[["self"]],["quaternion"]]],[11,"eq","","",10,[[["self"],["vector1"]],["bool"]]],[11,"ne","","",10,[[["self"],["vector1"]],["bool"]]],[11,"clone","","",10,[[["self"]],["vector1"]]],[11,"hash","","",10,N],[11,"eq","","",11,[[["self"],["vector2"]],["bool"]]],[11,"ne","","",11,[[["self"],["vector2"]],["bool"]]],[11,"clone","","",11,[[["self"]],["vector2"]]],[11,"hash","","",11,N],[11,"eq","","",12,[[["self"],["vector3"]],["bool"]]],[11,"ne","","",12,[[["self"],["vector3"]],["bool"]]],[11,"clone","","",12,[[["self"]],["vector3"]]],[11,"hash","","",12,N],[11,"eq","","",13,[[["self"],["vector4"]],["bool"]]],[11,"ne","","",13,[[["self"],["vector4"]],["bool"]]],[11,"clone","","",13,[[["self"]],["vector4"]]],[11,"hash","","",13,N],[11,"new","","Construct a new vector, using the provided values.",10,[[["s"]],["vector1"]]],[11,"map","","Perform the given operation on each field in the vector, returning a new point constructed from the operations.",10,[[["self"],["f"]],["vector1"]]],[11,"cast","","Component-wise casting to another type.",10,[[["self"]],["option",["vector1"]]]],[11,"distance2","","",10,[[["self"],["self"]],["s"]]],[11,"len","","",10,[[],["usize"]]],[11,"from_value","","",10,[[["s"]],["vector1"]]],[11,"sum","","",10,[[["self"]],["s"]]],[11,"product","","",10,[[["self"]],["s"]]],[11,"zero","","",10,[[],["vector1"]]],[11,"is_zero","","",10,[[["self"]],["bool"]]],[11,"sum","","",10,[[["i"]],["vector1"]]],[11,"sum","","",10,[[["i"]],["vector1"]]],[11,"neg","","",10,[[["self"]],["vector1"]]],[11,"default_epsilon","","",10,N],[11,"default_max_relative","","",10,N],[11,"default_max_ulps","","",10,[[],["u32"]]],[11,"relative_eq","","",10,N],[11,"ulps_eq","","",10,N],[11,"rand","","",10,[[["r"]],["vector1"]]],[11,"min_value","","",10,[[],["vector1"]]],[11,"max_value","","",10,[[],["vector1"]]],[11,"add","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"add","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"add_assign","","",10,[[["self"],["vector1"]]]],[11,"sub","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"sub","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"sub_assign","","",10,[[["self"],["vector1"]]]],[11,"mul","","",10,[[["self"],["s"]],["vector1"]]],[11,"mul_assign","","",10,[[["self"],["s"]]]],[11,"div","","",10,[[["self"],["s"]],["vector1"]]],[11,"div_assign","","",10,[[["self"],["s"]]]],[11,"rem","","",10,[[["self"],["s"]],["vector1"]]],[11,"rem_assign","","",10,[[["self"],["s"]]]],[11,"add_element_wise","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"sub_element_wise","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"mul_element_wise","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"div_element_wise","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"rem_element_wise","","",10,[[["self"],["vector1"]],["vector1"]]],[11,"add_assign_element_wise","","",10,[[["self"],["vector1"]]]],[11,"sub_assign_element_wise","","",10,[[["self"],["vector1"]]]],[11,"mul_assign_element_wise","","",10,[[["self"],["vector1"]]]],[11,"div_assign_element_wise","","",10,[[["self"],["vector1"]]]],[11,"rem_assign_element_wise","","",10,[[["self"],["vector1"]]]],[11,"add_element_wise","","",10,[[["self"],["s"]],["vector1"]]],[11,"sub_element_wise","","",10,[[["self"],["s"]],["vector1"]]],[11,"mul_element_wise","","",10,[[["self"],["s"]],["vector1"]]],[11,"div_element_wise","","",10,[[["self"],["s"]],["vector1"]]],[11,"rem_element_wise","","",10,[[["self"],["s"]],["vector1"]]],[11,"add_assign_element_wise","","",10,[[["self"],["s"]]]],[11,"sub_assign_element_wise","","",10,[[["self"],["s"]]]],[11,"mul_assign_element_wise","","",10,[[["self"],["s"]]]],[11,"div_assign_element_wise","","",10,[[["self"],["s"]]]],[11,"rem_assign_element_wise","","",10,[[["self"],["s"]]]],[11,"index","","",10,[[["self"],["usize"]],["s"]]],[11,"index_mut","","",10,[[["self"],["usize"]],["s"]]],[11,"index","","",10,N],[11,"index_mut","","",10,N],[11,"index","","",10,N],[11,"index_mut","","",10,N],[11,"index","","",10,N],[11,"index_mut","","",10,N],[11,"index","","",10,N],[11,"index_mut","","",10,N],[11,"new","","Construct a new vector, using the provided values.",11,[[["s"],["s"]],["vector2"]]],[11,"map","","Perform the given operation on each field in the vector, returning a new point constructed from the operations.",11,[[["self"],["f"]],["vector2"]]],[11,"cast","","Component-wise casting to another type.",11,[[["self"]],["option",["vector2"]]]],[11,"distance2","","",11,[[["self"],["self"]],["s"]]],[11,"len","","",11,[[],["usize"]]],[11,"from_value","","",11,[[["s"]],["vector2"]]],[11,"sum","","",11,[[["self"]],["s"]]],[11,"product","","",11,[[["self"]],["s"]]],[11,"zero","","",11,[[],["vector2"]]],[11,"is_zero","","",11,[[["self"]],["bool"]]],[11,"sum","","",11,[[["i"]],["vector2"]]],[11,"sum","","",11,[[["i"]],["vector2"]]],[11,"neg","","",11,[[["self"]],["vector2"]]],[11,"default_epsilon","","",11,N],[11,"default_max_relative","","",11,N],[11,"default_max_ulps","","",11,[[],["u32"]]],[11,"relative_eq","","",11,N],[11,"ulps_eq","","",11,N],[11,"rand","","",11,[[["r"]],["vector2"]]],[11,"min_value","","",11,[[],["vector2"]]],[11,"max_value","","",11,[[],["vector2"]]],[11,"add","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"add","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"add_assign","","",11,[[["self"],["vector2"]]]],[11,"sub","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"sub","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"sub_assign","","",11,[[["self"],["vector2"]]]],[11,"mul","","",11,[[["self"],["s"]],["vector2"]]],[11,"mul_assign","","",11,[[["self"],["s"]]]],[11,"div","","",11,[[["self"],["s"]],["vector2"]]],[11,"div_assign","","",11,[[["self"],["s"]]]],[11,"rem","","",11,[[["self"],["s"]],["vector2"]]],[11,"rem_assign","","",11,[[["self"],["s"]]]],[11,"add_element_wise","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"sub_element_wise","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"mul_element_wise","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"div_element_wise","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"rem_element_wise","","",11,[[["self"],["vector2"]],["vector2"]]],[11,"add_assign_element_wise","","",11,[[["self"],["vector2"]]]],[11,"sub_assign_element_wise","","",11,[[["self"],["vector2"]]]],[11,"mul_assign_element_wise","","",11,[[["self"],["vector2"]]]],[11,"div_assign_element_wise","","",11,[[["self"],["vector2"]]]],[11,"rem_assign_element_wise","","",11,[[["self"],["vector2"]]]],[11,"add_element_wise","","",11,[[["self"],["s"]],["vector2"]]],[11,"sub_element_wise","","",11,[[["self"],["s"]],["vector2"]]],[11,"mul_element_wise","","",11,[[["self"],["s"]],["vector2"]]],[11,"div_element_wise","","",11,[[["self"],["s"]],["vector2"]]],[11,"rem_element_wise","","",11,[[["self"],["s"]],["vector2"]]],[11,"add_assign_element_wise","","",11,[[["self"],["s"]]]],[11,"sub_assign_element_wise","","",11,[[["self"],["s"]]]],[11,"mul_assign_element_wise","","",11,[[["self"],["s"]]]],[11,"div_assign_element_wise","","",11,[[["self"],["s"]]]],[11,"rem_assign_element_wise","","",11,[[["self"],["s"]]]],[11,"index","","",11,[[["self"],["usize"]],["s"]]],[11,"index_mut","","",11,[[["self"],["usize"]],["s"]]],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"index","","",11,N],[11,"index_mut","","",11,N],[11,"new","","Construct a new vector, using the provided values.",12,[[["s"],["s"],["s"]],["vector3"]]],[11,"map","","Perform the given operation on each field in the vector, returning a new point constructed from the operations.",12,[[["self"],["f"]],["vector3"]]],[11,"cast","","Component-wise casting to another type.",12,[[["self"]],["option",["vector3"]]]],[11,"distance2","","",12,[[["self"],["self"]],["s"]]],[11,"len","","",12,[[],["usize"]]],[11,"from_value","","",12,[[["s"]],["vector3"]]],[11,"sum","","",12,[[["self"]],["s"]]],[11,"product","","",12,[[["self"]],["s"]]],[11,"zero","","",12,[[],["vector3"]]],[11,"is_zero","","",12,[[["self"]],["bool"]]],[11,"sum","","",12,[[["i"]],["vector3"]]],[11,"sum","","",12,[[["i"]],["vector3"]]],[11,"neg","","",12,[[["self"]],["vector3"]]],[11,"default_epsilon","","",12,N],[11,"default_max_relative","","",12,N],[11,"default_max_ulps","","",12,[[],["u32"]]],[11,"relative_eq","","",12,N],[11,"ulps_eq","","",12,N],[11,"rand","","",12,[[["r"]],["vector3"]]],[11,"min_value","","",12,[[],["vector3"]]],[11,"max_value","","",12,[[],["vector3"]]],[11,"add","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"add","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"add_assign","","",12,[[["self"],["vector3"]]]],[11,"sub","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"sub","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"sub_assign","","",12,[[["self"],["vector3"]]]],[11,"mul","","",12,[[["self"],["s"]],["vector3"]]],[11,"mul_assign","","",12,[[["self"],["s"]]]],[11,"div","","",12,[[["self"],["s"]],["vector3"]]],[11,"div_assign","","",12,[[["self"],["s"]]]],[11,"rem","","",12,[[["self"],["s"]],["vector3"]]],[11,"rem_assign","","",12,[[["self"],["s"]]]],[11,"add_element_wise","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"sub_element_wise","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"mul_element_wise","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"div_element_wise","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"rem_element_wise","","",12,[[["self"],["vector3"]],["vector3"]]],[11,"add_assign_element_wise","","",12,[[["self"],["vector3"]]]],[11,"sub_assign_element_wise","","",12,[[["self"],["vector3"]]]],[11,"mul_assign_element_wise","","",12,[[["self"],["vector3"]]]],[11,"div_assign_element_wise","","",12,[[["self"],["vector3"]]]],[11,"rem_assign_element_wise","","",12,[[["self"],["vector3"]]]],[11,"add_element_wise","","",12,[[["self"],["s"]],["vector3"]]],[11,"sub_element_wise","","",12,[[["self"],["s"]],["vector3"]]],[11,"mul_element_wise","","",12,[[["self"],["s"]],["vector3"]]],[11,"div_element_wise","","",12,[[["self"],["s"]],["vector3"]]],[11,"rem_element_wise","","",12,[[["self"],["s"]],["vector3"]]],[11,"add_assign_element_wise","","",12,[[["self"],["s"]]]],[11,"sub_assign_element_wise","","",12,[[["self"],["s"]]]],[11,"mul_assign_element_wise","","",12,[[["self"],["s"]]]],[11,"div_assign_element_wise","","",12,[[["self"],["s"]]]],[11,"rem_assign_element_wise","","",12,[[["self"],["s"]]]],[11,"index","","",12,[[["self"],["usize"]],["s"]]],[11,"index_mut","","",12,[[["self"],["usize"]],["s"]]],[11,"index","","",12,N],[11,"index_mut","","",12,N],[11,"index","","",12,N],[11,"index_mut","","",12,N],[11,"index","","",12,N],[11,"index_mut","","",12,N],[11,"index","","",12,N],[11,"index_mut","","",12,N],[11,"new","","Construct a new vector, using the provided values.",13,[[["s"],["s"],["s"],["s"]],["vector4"]]],[11,"map","","Perform the given operation on each field in the vector, returning a new point constructed from the operations.",13,[[["self"],["f"]],["vector4"]]],[11,"cast","","Component-wise casting to another type.",13,[[["self"]],["option",["vector4"]]]],[11,"distance2","","",13,[[["self"],["self"]],["s"]]],[11,"len","","",13,[[],["usize"]]],[11,"from_value","","",13,[[["s"]],["vector4"]]],[11,"sum","","",13,[[["self"]],["s"]]],[11,"product","","",13,[[["self"]],["s"]]],[11,"zero","","",13,[[],["vector4"]]],[11,"is_zero","","",13,[[["self"]],["bool"]]],[11,"sum","","",13,[[["i"]],["vector4"]]],[11,"sum","","",13,[[["i"]],["vector4"]]],[11,"neg","","",13,[[["self"]],["vector4"]]],[11,"default_epsilon","","",13,N],[11,"default_max_relative","","",13,N],[11,"default_max_ulps","","",13,[[],["u32"]]],[11,"relative_eq","","",13,N],[11,"ulps_eq","","",13,N],[11,"rand","","",13,[[["r"]],["vector4"]]],[11,"min_value","","",13,[[],["vector4"]]],[11,"max_value","","",13,[[],["vector4"]]],[11,"add","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"add","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"add_assign","","",13,[[["self"],["vector4"]]]],[11,"sub","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"sub","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"sub_assign","","",13,[[["self"],["vector4"]]]],[11,"mul","","",13,[[["self"],["s"]],["vector4"]]],[11,"mul_assign","","",13,[[["self"],["s"]]]],[11,"div","","",13,[[["self"],["s"]],["vector4"]]],[11,"div_assign","","",13,[[["self"],["s"]]]],[11,"rem","","",13,[[["self"],["s"]],["vector4"]]],[11,"rem_assign","","",13,[[["self"],["s"]]]],[11,"add_element_wise","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"sub_element_wise","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"mul_element_wise","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"div_element_wise","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"rem_element_wise","","",13,[[["self"],["vector4"]],["vector4"]]],[11,"add_assign_element_wise","","",13,[[["self"],["vector4"]]]],[11,"sub_assign_element_wise","","",13,[[["self"],["vector4"]]]],[11,"mul_assign_element_wise","","",13,[[["self"],["vector4"]]]],[11,"div_assign_element_wise","","",13,[[["self"],["vector4"]]]],[11,"rem_assign_element_wise","","",13,[[["self"],["vector4"]]]],[11,"add_element_wise","","",13,[[["self"],["s"]],["vector4"]]],[11,"sub_element_wise","","",13,[[["self"],["s"]],["vector4"]]],[11,"mul_element_wise","","",13,[[["self"],["s"]],["vector4"]]],[11,"div_element_wise","","",13,[[["self"],["s"]],["vector4"]]],[11,"rem_element_wise","","",13,[[["self"],["s"]],["vector4"]]],[11,"add_assign_element_wise","","",13,[[["self"],["s"]]]],[11,"sub_assign_element_wise","","",13,[[["self"],["s"]]]],[11,"mul_assign_element_wise","","",13,[[["self"],["s"]]]],[11,"div_assign_element_wise","","",13,[[["self"],["s"]]]],[11,"rem_assign_element_wise","","",13,[[["self"],["s"]]]],[11,"index","","",13,[[["self"],["usize"]],["s"]]],[11,"index_mut","","",13,[[["self"],["usize"]],["s"]]],[11,"index","","",13,N],[11,"index_mut","","",13,N],[11,"index","","",13,N],[11,"index_mut","","",13,N],[11,"index","","",13,N],[11,"index_mut","","",13,N],[11,"index","","",13,N],[11,"index_mut","","",13,N],[11,"into","","",10,N],[11,"as_ref","","",10,N],[11,"as_mut","","",10,N],[11,"from","","",10,N],[11,"into","","",11,N],[11,"as_ref","","",11,N],[11,"as_mut","","",11,N],[11,"from","","",11,N],[11,"into","","",12,N],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[11,"from","","",12,N],[11,"into","","",13,N],[11,"as_ref","","",13,N],[11,"as_mut","","",13,N],[11,"from","","",13,N],[11,"into","","",10,N],[11,"as_ref","","",10,N],[11,"as_mut","","",10,N],[11,"from","","",10,N],[11,"into","","",11,N],[11,"as_ref","","",11,N],[11,"as_mut","","",11,N],[11,"from","","",11,N],[11,"into","","",12,N],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[11,"from","","",12,N],[11,"into","","",13,N],[11,"as_ref","","",13,N],[11,"as_mut","","",13,N],[11,"from","","",13,N],[11,"unit_x","","A unit vector in the `x` direction.",10,[[],["vector1"]]],[11,"unit_x","","A unit vector in the `x` direction.",11,[[],["vector2"]]],[11,"unit_y","","A unit vector in the `y` direction.",11,[[],["vector2"]]],[11,"perp_dot","","The perpendicular dot product of the vector and `other`.",11,[[["self"],["vector2"]],["s"]]],[11,"extend","","Create a `Vector3`, using the `x` and `y` values from this vector, and the provided `z`.",11,[[["self"],["s"]],["vector3"]]],[11,"unit_x","","A unit vector in the `x` direction.",12,[[],["vector3"]]],[11,"unit_y","","A unit vector in the `y` direction.",12,[[],["vector3"]]],[11,"unit_z","","A unit vector in the `z` direction.",12,[[],["vector3"]]],[11,"cross","","Returns the cross product of the vector and `other`.",12,[[["self"],["vector3"]],["vector3"]]],[11,"extend","","Create a `Vector4`, using the `x`, `y` and `z` values from this vector, and the provided `w`.",12,[[["self"],["s"]],["vector4"]]],[11,"truncate","","Create a `Vector2`, dropping the `z` value.",12,[[["self"]],["vector2"]]],[11,"unit_x","","A unit vector in the `x` direction.",13,[[],["vector4"]]],[11,"unit_y","","A unit vector in the `y` direction.",13,[[],["vector4"]]],[11,"unit_z","","A unit vector in the `z` direction.",13,[[],["vector4"]]],[11,"unit_w","","A unit vector in the `w` direction.",13,[[],["vector4"]]],[11,"truncate","","Create a `Vector3`, dropping the `w` value.",13,[[["self"]],["vector3"]]],[11,"truncate_n","","Create a `Vector3`, dropping the nth element.",13,[[["self"],["isize"]],["vector3"]]],[11,"dot","","",10,[[["self"],["vector1"]],["s"]]],[11,"dot","","",11,[[["self"],["vector2"]],["s"]]],[11,"angle","","",11,[[["self"],["vector2"]],["rad"]]],[11,"dot","","",12,[[["self"],["vector3"]],["s"]]],[11,"angle","","",12,[[["self"],["vector3"]],["rad"]]],[11,"dot","","",13,[[["self"],["vector4"]],["s"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"into","","",11,[[["self"]],["vector2"]]],[11,"from","","",11,[[["vector2"]],["self"]]],[11,"into","","",12,[[["self"]],["vector3"]]],[11,"from","","",12,[[["vector3"]],["self"]]],[11,"into","","",13,[[["self"]],["vector4"]]],[11,"from","","",13,[[["vector4"]],["self"]]],[11,"clone","","",15,[[["self"]],["rad"]]],[11,"eq","","",15,[[["self"],["rad"]],["bool"]]],[11,"ne","","",15,[[["self"],["rad"]],["bool"]]],[11,"partial_cmp","","",15,[[["self"],["rad"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["rad"]],["bool"]]],[11,"le","","",15,[[["self"],["rad"]],["bool"]]],[11,"gt","","",15,[[["self"],["rad"]],["bool"]]],[11,"ge","","",15,[[["self"],["rad"]],["bool"]]],[11,"clone","","",14,[[["self"]],["deg"]]],[11,"eq","","",14,[[["self"],["deg"]],["bool"]]],[11,"ne","","",14,[[["self"],["deg"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["deg"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["deg"]],["bool"]]],[11,"le","","",14,[[["self"],["deg"]],["bool"]]],[11,"gt","","",14,[[["self"],["deg"]],["bool"]]],[11,"ge","","",14,[[["self"],["deg"]],["bool"]]],[11,"from","","",14,[[["rad"]],["deg"]]],[11,"from","","",15,[[["deg"]],["rad"]]],[11,"zero","","",15,[[],["rad"]]],[11,"is_zero","","",15,[[["self"]],["bool"]]],[11,"sum","","",15,[[["i"]],["rad"]]],[11,"sum","","",15,[[["i"]],["rad"]]],[11,"full_turn","","",15,[[],["rad"]]],[11,"sin","","",15,[[["self"]],["s"]]],[11,"cos","","",15,[[["self"]],["s"]]],[11,"tan","","",15,[[["self"]],["s"]]],[11,"sin_cos","","",15,N],[11,"asin","","",15,[[["s"]],["rad"]]],[11,"acos","","",15,[[["s"]],["rad"]]],[11,"atan","","",15,[[["s"]],["rad"]]],[11,"atan2","","",15,[[["s"],["s"]],["rad"]]],[11,"neg","","",15,[[["self"]],["rad"]]],[11,"min_value","","",15,[[],["rad"]]],[11,"max_value","","",15,[[],["rad"]]],[11,"add","","",15,[[["self"],["rad"]],["rad"]]],[11,"add","","",15,[[["self"],["rad"]],["rad"]]],[11,"sub","","",15,[[["self"],["rad"]],["rad"]]],[11,"sub","","",15,[[["self"],["rad"]],["rad"]]],[11,"div","","",15,[[["self"],["rad"]],["s"]]],[11,"div","","",15,[[["self"],["rad"]],["s"]]],[11,"rem","","",15,[[["self"],["rad"]],["rad"]]],[11,"rem","","",15,[[["self"],["rad"]],["rad"]]],[11,"add_assign","","",15,[[["self"],["rad"]]]],[11,"sub_assign","","",15,[[["self"],["rad"]]]],[11,"rem_assign","","",15,[[["self"],["rad"]]]],[11,"mul","","",15,[[["self"],["s"]],["rad"]]],[11,"div","","",15,[[["self"],["s"]],["rad"]]],[11,"mul_assign","","",15,[[["self"],["s"]]]],[11,"div_assign","","",15,[[["self"],["s"]]]],[11,"default_epsilon","","",15,N],[11,"default_max_relative","","",15,N],[11,"default_max_ulps","","",15,[[],["u32"]]],[11,"relative_eq","","",15,N],[11,"ulps_eq","","",15,N],[11,"rand","","",15,[[["r"]],["rad"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"zero","","",14,[[],["deg"]]],[11,"is_zero","","",14,[[["self"]],["bool"]]],[11,"sum","","",14,[[["i"]],["deg"]]],[11,"sum","","",14,[[["i"]],["deg"]]],[11,"full_turn","","",14,[[],["deg"]]],[11,"sin","","",14,[[["self"]],["s"]]],[11,"cos","","",14,[[["self"]],["s"]]],[11,"tan","","",14,[[["self"]],["s"]]],[11,"sin_cos","","",14,N],[11,"asin","","",14,[[["s"]],["deg"]]],[11,"acos","","",14,[[["s"]],["deg"]]],[11,"atan","","",14,[[["s"]],["deg"]]],[11,"atan2","","",14,[[["s"],["s"]],["deg"]]],[11,"neg","","",14,[[["self"]],["deg"]]],[11,"min_value","","",14,[[],["deg"]]],[11,"max_value","","",14,[[],["deg"]]],[11,"add","","",14,[[["self"],["deg"]],["deg"]]],[11,"add","","",14,[[["self"],["deg"]],["deg"]]],[11,"sub","","",14,[[["self"],["deg"]],["deg"]]],[11,"sub","","",14,[[["self"],["deg"]],["deg"]]],[11,"div","","",14,[[["self"],["deg"]],["s"]]],[11,"div","","",14,[[["self"],["deg"]],["s"]]],[11,"rem","","",14,[[["self"],["deg"]],["deg"]]],[11,"rem","","",14,[[["self"],["deg"]],["deg"]]],[11,"add_assign","","",14,[[["self"],["deg"]]]],[11,"sub_assign","","",14,[[["self"],["deg"]]]],[11,"rem_assign","","",14,[[["self"],["deg"]]]],[11,"mul","","",14,[[["self"],["s"]],["deg"]]],[11,"div","","",14,[[["self"],["s"]],["deg"]]],[11,"mul_assign","","",14,[[["self"],["s"]]]],[11,"div_assign","","",14,[[["self"],["s"]]]],[11,"default_epsilon","","",14,N],[11,"default_max_relative","","",14,N],[11,"default_max_ulps","","",14,[[],["u32"]]],[11,"relative_eq","","",14,N],[11,"ulps_eq","","",14,N],[11,"rand","","",14,[[["r"]],["deg"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["euler"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["euler"]],["bool"]]],[11,"ne","","",16,[[["self"],["euler"]],["bool"]]],[11,"new","","Construct a set of euler angles.",16,[[["a"],["a"],["a"]],["euler"]]],[11,"from","","",16,[[["quaternion"]],["euler",["rad"]]]],[11,"default_epsilon","","",16,N],[11,"default_max_relative","","",16,N],[11,"default_max_ulps","","",16,[[],["u32"]]],[11,"relative_eq","","",16,N],[11,"ulps_eq","","",16,N],[11,"rand","","",16,[[["r"]],["euler"]]],[11,"from","","",16,[[["eulerangles",["intraxyz"]]],["self"]]],[11,"into","","",16,[[["self"]],["eulerangles",["intraxyz"]]]],[11,"eq","","",17,[[["self"],["point1"]],["bool"]]],[11,"ne","","",17,[[["self"],["point1"]],["bool"]]],[11,"clone","","",17,[[["self"]],["point1"]]],[11,"hash","","",17,N],[11,"eq","","",18,[[["self"],["point2"]],["bool"]]],[11,"ne","","",18,[[["self"],["point2"]],["bool"]]],[11,"clone","","",18,[[["self"]],["point2"]]],[11,"hash","","",18,N],[11,"eq","","",19,[[["self"],["point3"]],["bool"]]],[11,"ne","","",19,[[["self"],["point3"]],["bool"]]],[11,"clone","","",19,[[["self"]],["point3"]]],[11,"hash","","",19,N],[11,"from_homogeneous","","",19,[[["vector4"]],["point3"]]],[11,"to_homogeneous","","",19,[[["self"]],["vector4"]]],[11,"new","","Construct a new point, using the provided values.",17,[[["s"]],["point1"]]],[11,"map","","Perform the given operation on each field in the point, returning a new point constructed from the operations.",17,[[["self"],["f"]],["point1"]]],[11,"len","","",17,[[],["usize"]]],[11,"from_value","","",17,[[["s"]],["point1"]]],[11,"sum","","",17,[[["self"]],["s"]]],[11,"product","","",17,[[["self"]],["s"]]],[11,"cast","","Component-wise casting to another type",17,[[["self"]],["option",["point1"]]]],[11,"distance2","","",17,[[["self"],["self"]],["s"]]],[11,"origin","","",17,[[],["point1"]]],[11,"from_vec","","",17,[[["vector1"]],["point1"]]],[11,"to_vec","","",17,[[["self"]],["vector1"]]],[11,"dot","","",17,[[["self"],["vector1"]],["s"]]],[11,"default_epsilon","","",17,N],[11,"default_max_relative","","",17,N],[11,"default_max_ulps","","",17,[[],["u32"]]],[11,"relative_eq","","",17,N],[11,"ulps_eq","","",17,N],[11,"min_value","","",17,[[],["point1"]]],[11,"max_value","","",17,[[],["point1"]]],[11,"add","","",17,[[["self"],["vector1"]],["point1"]]],[11,"add","","",17,[[["self"],["vector1"]],["point1"]]],[11,"sub","","",17,[[["self"],["vector1"]],["point1"]]],[11,"sub","","",17,[[["self"],["vector1"]],["point1"]]],[11,"add_assign","","",17,[[["self"],["vector1"]]]],[11,"sub_assign","","",17,[[["self"],["vector1"]]]],[11,"sub","","",17,[[["self"],["point1"]],["vector1"]]],[11,"sub","","",17,[[["self"],["point1"]],["vector1"]]],[11,"mul","","",17,[[["self"],["s"]],["point1"]]],[11,"div","","",17,[[["self"],["s"]],["point1"]]],[11,"rem","","",17,[[["self"],["s"]],["point1"]]],[11,"mul_assign","","",17,[[["self"],["s"]]]],[11,"div_assign","","",17,[[["self"],["s"]]]],[11,"rem_assign","","",17,[[["self"],["s"]]]],[11,"add_element_wise","","",17,[[["self"],["point1"]],["point1"]]],[11,"sub_element_wise","","",17,[[["self"],["point1"]],["point1"]]],[11,"mul_element_wise","","",17,[[["self"],["point1"]],["point1"]]],[11,"div_element_wise","","",17,[[["self"],["point1"]],["point1"]]],[11,"rem_element_wise","","",17,[[["self"],["point1"]],["point1"]]],[11,"add_assign_element_wise","","",17,[[["self"],["point1"]]]],[11,"sub_assign_element_wise","","",17,[[["self"],["point1"]]]],[11,"mul_assign_element_wise","","",17,[[["self"],["point1"]]]],[11,"div_assign_element_wise","","",17,[[["self"],["point1"]]]],[11,"rem_assign_element_wise","","",17,[[["self"],["point1"]]]],[11,"add_element_wise","","",17,[[["self"],["s"]],["point1"]]],[11,"sub_element_wise","","",17,[[["self"],["s"]],["point1"]]],[11,"mul_element_wise","","",17,[[["self"],["s"]],["point1"]]],[11,"div_element_wise","","",17,[[["self"],["s"]],["point1"]]],[11,"rem_element_wise","","",17,[[["self"],["s"]],["point1"]]],[11,"add_assign_element_wise","","",17,[[["self"],["s"]]]],[11,"sub_assign_element_wise","","",17,[[["self"],["s"]]]],[11,"mul_assign_element_wise","","",17,[[["self"],["s"]]]],[11,"div_assign_element_wise","","",17,[[["self"],["s"]]]],[11,"rem_assign_element_wise","","",17,[[["self"],["s"]]]],[11,"index","","",17,[[["self"],["usize"]],["s"]]],[11,"index_mut","","",17,[[["self"],["usize"]],["s"]]],[11,"index","","",17,N],[11,"index_mut","","",17,N],[11,"index","","",17,N],[11,"index_mut","","",17,N],[11,"index","","",17,N],[11,"index_mut","","",17,N],[11,"index","","",17,N],[11,"index_mut","","",17,N],[11,"new","","Construct a new point, using the provided values.",18,[[["s"],["s"]],["point2"]]],[11,"map","","Perform the given operation on each field in the point, returning a new point constructed from the operations.",18,[[["self"],["f"]],["point2"]]],[11,"len","","",18,[[],["usize"]]],[11,"from_value","","",18,[[["s"]],["point2"]]],[11,"sum","","",18,[[["self"]],["s"]]],[11,"product","","",18,[[["self"]],["s"]]],[11,"cast","","Component-wise casting to another type",18,[[["self"]],["option",["point2"]]]],[11,"distance2","","",18,[[["self"],["self"]],["s"]]],[11,"origin","","",18,[[],["point2"]]],[11,"from_vec","","",18,[[["vector2"]],["point2"]]],[11,"to_vec","","",18,[[["self"]],["vector2"]]],[11,"dot","","",18,[[["self"],["vector2"]],["s"]]],[11,"default_epsilon","","",18,N],[11,"default_max_relative","","",18,N],[11,"default_max_ulps","","",18,[[],["u32"]]],[11,"relative_eq","","",18,N],[11,"ulps_eq","","",18,N],[11,"min_value","","",18,[[],["point2"]]],[11,"max_value","","",18,[[],["point2"]]],[11,"add","","",18,[[["self"],["vector2"]],["point2"]]],[11,"add","","",18,[[["self"],["vector2"]],["point2"]]],[11,"sub","","",18,[[["self"],["vector2"]],["point2"]]],[11,"sub","","",18,[[["self"],["vector2"]],["point2"]]],[11,"add_assign","","",18,[[["self"],["vector2"]]]],[11,"sub_assign","","",18,[[["self"],["vector2"]]]],[11,"sub","","",18,[[["self"],["point2"]],["vector2"]]],[11,"sub","","",18,[[["self"],["point2"]],["vector2"]]],[11,"mul","","",18,[[["self"],["s"]],["point2"]]],[11,"div","","",18,[[["self"],["s"]],["point2"]]],[11,"rem","","",18,[[["self"],["s"]],["point2"]]],[11,"mul_assign","","",18,[[["self"],["s"]]]],[11,"div_assign","","",18,[[["self"],["s"]]]],[11,"rem_assign","","",18,[[["self"],["s"]]]],[11,"add_element_wise","","",18,[[["self"],["point2"]],["point2"]]],[11,"sub_element_wise","","",18,[[["self"],["point2"]],["point2"]]],[11,"mul_element_wise","","",18,[[["self"],["point2"]],["point2"]]],[11,"div_element_wise","","",18,[[["self"],["point2"]],["point2"]]],[11,"rem_element_wise","","",18,[[["self"],["point2"]],["point2"]]],[11,"add_assign_element_wise","","",18,[[["self"],["point2"]]]],[11,"sub_assign_element_wise","","",18,[[["self"],["point2"]]]],[11,"mul_assign_element_wise","","",18,[[["self"],["point2"]]]],[11,"div_assign_element_wise","","",18,[[["self"],["point2"]]]],[11,"rem_assign_element_wise","","",18,[[["self"],["point2"]]]],[11,"add_element_wise","","",18,[[["self"],["s"]],["point2"]]],[11,"sub_element_wise","","",18,[[["self"],["s"]],["point2"]]],[11,"mul_element_wise","","",18,[[["self"],["s"]],["point2"]]],[11,"div_element_wise","","",18,[[["self"],["s"]],["point2"]]],[11,"rem_element_wise","","",18,[[["self"],["s"]],["point2"]]],[11,"add_assign_element_wise","","",18,[[["self"],["s"]]]],[11,"sub_assign_element_wise","","",18,[[["self"],["s"]]]],[11,"mul_assign_element_wise","","",18,[[["self"],["s"]]]],[11,"div_assign_element_wise","","",18,[[["self"],["s"]]]],[11,"rem_assign_element_wise","","",18,[[["self"],["s"]]]],[11,"index","","",18,[[["self"],["usize"]],["s"]]],[11,"index_mut","","",18,[[["self"],["usize"]],["s"]]],[11,"index","","",18,N],[11,"index_mut","","",18,N],[11,"index","","",18,N],[11,"index_mut","","",18,N],[11,"index","","",18,N],[11,"index_mut","","",18,N],[11,"index","","",18,N],[11,"index_mut","","",18,N],[11,"new","","Construct a new point, using the provided values.",19,[[["s"],["s"],["s"]],["point3"]]],[11,"map","","Perform the given operation on each field in the point, returning a new point constructed from the operations.",19,[[["self"],["f"]],["point3"]]],[11,"len","","",19,[[],["usize"]]],[11,"from_value","","",19,[[["s"]],["point3"]]],[11,"sum","","",19,[[["self"]],["s"]]],[11,"product","","",19,[[["self"]],["s"]]],[11,"cast","","Component-wise casting to another type",19,[[["self"]],["option",["point3"]]]],[11,"distance2","","",19,[[["self"],["self"]],["s"]]],[11,"origin","","",19,[[],["point3"]]],[11,"from_vec","","",19,[[["vector3"]],["point3"]]],[11,"to_vec","","",19,[[["self"]],["vector3"]]],[11,"dot","","",19,[[["self"],["vector3"]],["s"]]],[11,"default_epsilon","","",19,N],[11,"default_max_relative","","",19,N],[11,"default_max_ulps","","",19,[[],["u32"]]],[11,"relative_eq","","",19,N],[11,"ulps_eq","","",19,N],[11,"min_value","","",19,[[],["point3"]]],[11,"max_value","","",19,[[],["point3"]]],[11,"add","","",19,[[["self"],["vector3"]],["point3"]]],[11,"add","","",19,[[["self"],["vector3"]],["point3"]]],[11,"sub","","",19,[[["self"],["vector3"]],["point3"]]],[11,"sub","","",19,[[["self"],["vector3"]],["point3"]]],[11,"add_assign","","",19,[[["self"],["vector3"]]]],[11,"sub_assign","","",19,[[["self"],["vector3"]]]],[11,"sub","","",19,[[["self"],["point3"]],["vector3"]]],[11,"sub","","",19,[[["self"],["point3"]],["vector3"]]],[11,"mul","","",19,[[["self"],["s"]],["point3"]]],[11,"div","","",19,[[["self"],["s"]],["point3"]]],[11,"rem","","",19,[[["self"],["s"]],["point3"]]],[11,"mul_assign","","",19,[[["self"],["s"]]]],[11,"div_assign","","",19,[[["self"],["s"]]]],[11,"rem_assign","","",19,[[["self"],["s"]]]],[11,"add_element_wise","","",19,[[["self"],["point3"]],["point3"]]],[11,"sub_element_wise","","",19,[[["self"],["point3"]],["point3"]]],[11,"mul_element_wise","","",19,[[["self"],["point3"]],["point3"]]],[11,"div_element_wise","","",19,[[["self"],["point3"]],["point3"]]],[11,"rem_element_wise","","",19,[[["self"],["point3"]],["point3"]]],[11,"add_assign_element_wise","","",19,[[["self"],["point3"]]]],[11,"sub_assign_element_wise","","",19,[[["self"],["point3"]]]],[11,"mul_assign_element_wise","","",19,[[["self"],["point3"]]]],[11,"div_assign_element_wise","","",19,[[["self"],["point3"]]]],[11,"rem_assign_element_wise","","",19,[[["self"],["point3"]]]],[11,"add_element_wise","","",19,[[["self"],["s"]],["point3"]]],[11,"sub_element_wise","","",19,[[["self"],["s"]],["point3"]]],[11,"mul_element_wise","","",19,[[["self"],["s"]],["point3"]]],[11,"div_element_wise","","",19,[[["self"],["s"]],["point3"]]],[11,"rem_element_wise","","",19,[[["self"],["s"]],["point3"]]],[11,"add_assign_element_wise","","",19,[[["self"],["s"]]]],[11,"sub_assign_element_wise","","",19,[[["self"],["s"]]]],[11,"mul_assign_element_wise","","",19,[[["self"],["s"]]]],[11,"div_assign_element_wise","","",19,[[["self"],["s"]]]],[11,"rem_assign_element_wise","","",19,[[["self"],["s"]]]],[11,"index","","",19,[[["self"],["usize"]],["s"]]],[11,"index_mut","","",19,[[["self"],["usize"]],["s"]]],[11,"index","","",19,N],[11,"index_mut","","",19,N],[11,"index","","",19,N],[11,"index_mut","","",19,N],[11,"index","","",19,N],[11,"index_mut","","",19,N],[11,"index","","",19,N],[11,"index_mut","","",19,N],[11,"into","","",17,N],[11,"as_ref","","",17,N],[11,"as_mut","","",17,N],[11,"from","","",17,N],[11,"into","","",18,N],[11,"as_ref","","",18,N],[11,"as_mut","","",18,N],[11,"from","","",18,N],[11,"into","","",19,N],[11,"as_ref","","",19,N],[11,"as_mut","","",19,N],[11,"from","","",19,N],[11,"into","","",17,N],[11,"as_ref","","",17,N],[11,"as_mut","","",17,N],[11,"from","","",17,N],[11,"into","","",18,N],[11,"as_ref","","",18,N],[11,"as_mut","","",18,N],[11,"from","","",18,N],[11,"into","","",19,N],[11,"as_ref","","",19,N],[11,"as_mut","","",19,N],[11,"from","","",19,N],[11,"into","","",18,[[["self"]],["point2"]]],[11,"from","","",18,[[["point2"]],["self"]]],[11,"into","","",19,[[["self"]],["point3"]]],[11,"from","","",19,[[["point3"]],["self"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"rotate_point","cgmath::prelude","Rotate a point using this rotation, by converting it to its representation as a vector.",33,[[["self"],["p"]],["p"]]],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",35,[[["a"]],["self"]]],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",35,[[["a"]],["self"]]],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",35,[[["a"]],["self"]]],[11,"eq","cgmath","",38,[[["self"],["basis2"]],["bool"]]],[11,"ne","","",38,[[["self"],["basis2"]],["bool"]]],[11,"clone","","",38,[[["self"]],["basis2"]]],[11,"as_ref","","",38,[[["self"]],["matrix2"]]],[11,"from","","",6,[[["basis2"]],["matrix2"]]],[11,"product","","",38,[[["i"]],["basis2"]]],[11,"product","","",38,[[["i"]],["basis2"]]],[11,"look_at","","",38,[[["vector2"],["vector2"]],["basis2"]]],[11,"between_vectors","","",38,[[["vector2"],["vector2"]],["basis2"]]],[11,"rotate_vector","","",38,[[["self"],["vector2"]],["vector2"]]],[11,"invert","","",38,[[["self"]],["basis2"]]],[11,"one","","",38,[[],["basis2"]]],[11,"mul","","",38,[[["self"],["basis2"]],["basis2"]]],[11,"mul","","",38,[[["self"],["basis2"]],["basis2"]]],[11,"default_epsilon","","",38,N],[11,"default_max_relative","","",38,N],[11,"default_max_ulps","","",38,[[],["u32"]]],[11,"relative_eq","","",38,N],[11,"ulps_eq","","",38,N],[11,"from_angle","","",38,[[["a"]],["basis2"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["basis3"]],["bool"]]],[11,"ne","","",37,[[["self"],["basis3"]],["bool"]]],[11,"clone","","",37,[[["self"]],["basis3"]]],[11,"from_quaternion","","Create a new rotation matrix from a quaternion.",37,[[["quaternion"]],["basis3"]]],[11,"as_ref","","",37,[[["self"]],["matrix3"]]],[11,"from","","",7,[[["basis3"]],["matrix3"]]],[11,"from","","",9,[[["basis3"]],["quaternion"]]],[11,"product","","",37,[[["i"]],["basis3"]]],[11,"product","","",37,[[["i"]],["basis3"]]],[11,"look_at","","",37,[[["vector3"],["vector3"]],["basis3"]]],[11,"between_vectors","","",37,[[["vector3"],["vector3"]],["basis3"]]],[11,"rotate_vector","","",37,[[["self"],["vector3"]],["vector3"]]],[11,"invert","","",37,[[["self"]],["basis3"]]],[11,"one","","",37,[[],["basis3"]]],[11,"mul","","",37,[[["self"],["basis3"]],["basis3"]]],[11,"mul","","",37,[[["self"],["basis3"]],["basis3"]]],[11,"default_epsilon","","",37,N],[11,"default_max_relative","","",37,N],[11,"default_max_ulps","","",37,[[],["u32"]]],[11,"relative_eq","","",37,N],[11,"ulps_eq","","",37,N],[11,"from_axis_angle","","",37,[[["vector3"],["a"]],["basis3"]]],[11,"from_angle_x","","",37,[[["a"]],["basis3"]]],[11,"from_angle_y","","",37,[[["a"]],["basis3"]]],[11,"from_angle_z","","",37,[[["a"]],["basis3"]]],[11,"from","","Create a three-dimensional rotation matrix from a set of euler angles.",37,[[["euler"]],["basis3"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",20,[[["self"],["s"]],["result"]]],[11,"deserialize","","",20,[[["d"]],["result",["decomposed"]]]],[11,"inverse_transform_vector","cgmath::prelude","Inverse transform a vector using this transform",36,N],[11,"concat_self","","Combine this transform with another, in-place.",36,[[["self"],["self"]]]],[11,"clone","cgmath","",20,[[["self"]],["decomposed"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"one","","",20,[[],["decomposed"]]],[11,"look_at","","",20,N],[11,"transform_vector","","",20,N],[11,"inverse_transform_vector","","",20,N],[11,"transform_point","","",20,[[["self"],["p"]],["p"]]],[11,"concat","","",20,[[["self"],["decomposed"]],["decomposed"]]],[11,"inverse_transform","","",20,[[["self"]],["option",["decomposed"]]]],[11,"from","","",7,[[["decomposed",["vector2"]]],["matrix3"]]],[11,"from","","",8,[[["decomposed",["vector3"]]],["matrix4"]]],[11,"default_epsilon","","",20,[[],["e"]]],[11,"default_max_relative","","",20,[[],["e"]]],[11,"default_max_ulps","","",20,[[],["u32"]]],[11,"relative_eq","","",20,[[["self"],["self"],["e"],["e"]],["bool"]]],[11,"ulps_eq","","",20,[[["self"],["self"],["e"],["u32"]],["bool"]]],[11,"clone","","",21,[[["self"]],["perspectivefov"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["perspectivefov"]],["bool"]]],[11,"ne","","",21,[[["self"],["perspectivefov"]],["bool"]]],[11,"to_perspective","","",21,[[["self"]],["perspective"]]],[11,"from","","",8,[[["perspectivefov"]],["matrix4"]]],[11,"clone","","",22,[[["self"]],["perspective"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["perspective"]],["bool"]]],[11,"ne","","",22,[[["self"],["perspective"]],["bool"]]],[11,"from","","",8,[[["perspective"]],["matrix4"]]],[11,"clone","","",23,[[["self"]],["ortho"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["ortho"]],["bool"]]],[11,"ne","","",23,[[["self"],["ortho"]],["bool"]]],[11,"from","","",8,[[["ortho"]],["matrix4"]]],[8,"BaseNum","","Base numeric types with partial ordering",N,N],[8,"BaseFloat","","Base floating point types",N,N],[8,"Array","","An array containing elements of type `Element`",N,N],[16,"Element","","",24,N],[10,"len","","Get the number of elements in the array type",24,[[],["usize"]]],[10,"from_value","","Construct a vector from a single value, replicating it.",24,N],[11,"as_ptr","cgmath::prelude","Get the pointer to the first element of the array.",24,N],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",24,N],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",24,[[["self"],["usize"],["usize"]]]],[10,"sum","cgmath","The sum of the elements of the array.",24,N],[10,"product","","The product of the elements of the array.",24,N],[8,"ElementWise","","Element-wise arithmetic operations. These are supplied for pragmatic reasons, but will usually fall outside of traditional algebraic properties.",N,N],[10,"add_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"sub_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"mul_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"div_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"rem_element_wise","","",25,[[["self"],["rhs"]],["self"]]],[10,"add_assign_element_wise","","",25,[[["self"],["rhs"]]]],[10,"sub_assign_element_wise","","",25,[[["self"],["rhs"]]]],[10,"mul_assign_element_wise","","",25,[[["self"],["rhs"]]]],[10,"div_assign_element_wise","","",25,[[["self"],["rhs"]]]],[10,"rem_assign_element_wise","","",25,[[["self"],["rhs"]]]],[8,"VectorSpace","","Vectors that can be added together and multiplied by scalars.",N,N],[16,"Scalar","","The associated scalar.",26,N],[8,"MetricSpace","","A type with a distance function between values.",N,N],[16,"Metric","","The metric to be returned by the `distance` function.",27,N],[10,"distance2","","Returns the squared distance.",27,N],[11,"distance","cgmath::prelude","The distance between two values.",27,N],[8,"InnerSpace","cgmath","Vectors that also have a dot (or inner) product.",N,N],[10,"dot","","Vector dot (or inner) product.",28,N],[11,"is_perpendicular","cgmath::prelude","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",28,[[["self"],["self"]],["bool"]]],[11,"magnitude2","","Returns the squared magnitude.",28,N],[11,"magnitude","","The distance from the tail to the tip of the vector.",28,N],[11,"angle","","Returns the angle between two vectors in radians.",28,[[["self"],["self"]],["rad"]]],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",28,[[["self"]],["self"]]],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",28,N],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",28,N],[11,"project_on","","Returns the vector projection of the current inner space projected onto the supplied argument.",28,[[["self"],["self"]],["self"]]],[8,"EuclideanSpace","cgmath","Points in a Euclidean space with an associated space of displacement vectors.",N,N],[16,"Scalar","","The associated scalar over which the space is defined.",29,N],[16,"Diff","","The associated space of displacement vectors.",29,N],[10,"origin","","The point at the origin of the Euclidean space.",29,[[],["self"]]],[10,"from_vec","","Convert a displacement vector to a point.",29,N],[10,"to_vec","","Convert a point to a displacement vector.",29,N],[11,"midpoint","cgmath::prelude","Returns the middle point between two other points.",29,[[["self"],["self"]],["self"]]],[11,"centroid","","Returns the average position of all points in the slice.",29,N],[10,"dot","cgmath","This is a weird one, but its useful for plane calculations.",29,N],[8,"Matrix","","A column-major matrix of arbitrary dimensions.",N,N],[16,"Row","","The row vector of the matrix.",30,N],[16,"Column","","The column vector of the matrix.",30,N],[16,"Transpose","","The result of transposing the matrix",30,N],[11,"as_ptr","cgmath::prelude","Get the pointer to the first element of the array.",30,N],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",30,N],[11,"replace_col","","Replace a column in the array.",30,N],[10,"row","cgmath","Get a row from this matrix by-value.",30,N],[10,"swap_rows","","Swap two rows of this array.",30,[[["self"],["usize"],["usize"]]]],[10,"swap_columns","","Swap two columns of this array.",30,[[["self"],["usize"],["usize"]]]],[10,"swap_elements","","Swap the values at index `a` and `b`",30,N],[10,"transpose","","Transpose this matrix, returning a new matrix.",30,N],[8,"SquareMatrix","","A column-major major matrix where the rows and column vectors are of the same dimensions.",N,N],[16,"ColumnRow","","The row/column vector of the matrix.",31,N],[10,"from_value","","Create a new diagonal matrix using the supplied value.",31,N],[10,"from_diagonal","","Create a matrix from a non-uniform scale",31,N],[11,"identity","cgmath::prelude","The [identity matrix]. Multiplying this matrix with another should have no effect.",31,[[],["self"]]],[10,"transpose_self","cgmath","Transpose this matrix in-place.",31,[[["self"]]]],[10,"determinant","","Take the determinant of this matrix.",31,N],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",31,N],[11,"trace","cgmath::prelude","Return the trace of this matrix. That is, the sum of the diagonal.",31,N],[10,"invert","cgmath","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is the identity matrix. Returns `None` if this matrix is not invertible (has a determinant of zero).",31,[[["self"]],["option"]]],[11,"is_invertible","cgmath::prelude","Test if this matrix is invertible.",31,[[["self"]],["bool"]]],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",31,[[["self"]],["bool"]]],[10,"is_diagonal","cgmath","Test if this is a diagonal matrix. That is, every element outside of the diagonal is 0.",31,[[["self"]],["bool"]]],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its transpose.",31,[[["self"]],["bool"]]],[8,"Angle","","Angles and their associated trigonometric functions.",N,N],[16,"Unitless","","",32,N],[11,"normalize","cgmath::prelude","Return the angle, normalized to the range `[0, full_turn)`.",32,[[["self"]],["self"]]],[11,"opposite","","Return the angle rotated by half a turn.",32,[[["self"]],["self"]]],[11,"bisect","","Returns the interior bisector of the two angles.",32,[[["self"],["self"]],["self"]]],[10,"full_turn","cgmath","A full rotation.",32,[[],["self"]]],[11,"turn_div_2","cgmath::prelude","Half of a full rotation.",32,[[],["self"]]],[11,"turn_div_3","","A third of a full rotation.",32,[[],["self"]]],[11,"turn_div_4","","A quarter of a full rotation.",32,[[],["self"]]],[11,"turn_div_6","","A sixth of a full rotation.",32,[[],["self"]]],[10,"sin","cgmath","Compute the sine of the angle, returning a unitless ratio.",32,N],[10,"cos","","Compute the cosine of the angle, returning a unitless ratio.",32,N],[10,"tan","","Compute the tangent of the angle, returning a unitless ratio.",32,N],[10,"sin_cos","","Compute the sine and cosine of the angle, returning the result as a pair.",32,N],[11,"csc","cgmath::prelude","Compute the cosecant of the angle.",32,N],[11,"cot","","Compute the cotangent of the angle.",32,N],[11,"sec","","Compute the secant of the angle.",32,N],[10,"asin","cgmath","Compute the arcsine of the ratio, returning the resulting angle.",32,N],[10,"acos","","Compute the arccosine of the ratio, returning the resulting angle.",32,N],[10,"atan","","Compute the arctangent of the ratio, returning the resulting angle.",32,N],[10,"atan2","","",32,N],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that creates a circular motion, and preserves at least one point in the space.",N,N],[10,"look_at","","Create a rotation to a given direction with an 'up' vector.",33,N],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'. Both given vectors are assumed to have unit length.",33,N],[10,"rotate_vector","","Rotate a vector using this rotation.",33,N],[11,"rotate_point","cgmath::prelude","Rotate a point using this rotation, by converting it to its representation as a vector.",33,[[["self"],["p"]],["p"]]],[10,"invert","cgmath","Create a new rotation which \"un-does\" this rotation. That is, `r * r.invert()` is the identity.",33,[[["self"]],["self"]]],[8,"Rotation2","","A two-dimensional rotation.",N,N],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both from_axis_angle() and from_euler() for 2D space.",34,[[["a"]],["self"]]],[8,"Rotation3","","A three-dimensional rotation.",N,N],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",35,[[["vector3"],["a"]],["self"]]],[11,"from_angle_x","cgmath::prelude","Create a rotation from an angle around the `x` axis (pitch).",35,[[["a"]],["self"]]],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",35,[[["a"]],["self"]]],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",35,[[["a"]],["self"]]],[8,"Transform","cgmath","A trait representing an affine transformation that can be applied to points or vectors. An affine transformation is one which",N,N],[10,"one","","Create an identity transformation. That is, a transformation which does nothing.",36,[[],["self"]]],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from `eye`, using `up` for orientation.",36,N],[10,"transform_vector","","Transform a vector using this transform.",36,N],[11,"inverse_transform_vector","cgmath::prelude","Inverse transform a vector using this transform",36,N],[10,"transform_point","cgmath","Transform a point using this transform.",36,[[["self"],["p"]],["p"]]],[10,"concat","","Combine this transform with another, yielding a new transformation which has the effects of both.",36,[[["self"],["self"]],["self"]]],[10,"inverse_transform","","Create a transform that \"un-does\" this one.",36,[[["self"]],["option"]]],[11,"concat_self","cgmath::prelude","Combine this transform with another, in-place.",36,[[["self"],["self"]]]],[8,"Transform2","cgmath","",N,N],[8,"Transform3","","",N,N],[11,"new","","The beginning of a chained equality expression, using a relative based comparison.",1,[[["t"],["t"]],["relative"]]],[11,"epsilon","","Replace the epsilon value with the one specified.",1,N],[11,"max_relative","","Replace the maximum relative value with the one specified.",1,N],[11,"eq","","Peform the equality comparison",1,[[["self"]],["bool"]]],[11,"ne","","Peform the inequality comparison",1,[[["self"]],["bool"]]],[11,"new","","The beginning of a chained equality expression, using an ULPs based comparison.",2,[[["t"],["t"]],["ulps"]]],[11,"epsilon","","Replace the epsilon value with the one specified.",2,N],[11,"max_ulps","","Replace the max ulps value with the one specified.",2,[[["self"],["u32"]],["ulps"]]],[11,"eq","","Peform the equality comparison",2,[[["self"]],["bool"]]],[11,"ne","","Peform the inequality comparison",2,[[["self"]],["bool"]]]],"paths":[[8,"ApproxEq"],[3,"Relative"],[3,"Ulps"],[8,"Bounded"],[8,"One"],[8,"Zero"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Quaternion"],[3,"Vector1"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Deg"],[3,"Rad"],[3,"Euler"],[3,"Point1"],[3,"Point2"],[3,"Point3"],[3,"Decomposed"],[3,"PerspectiveFov"],[3,"Perspective"],[3,"Ortho"],[8,"Array"],[8,"ElementWise"],[8,"VectorSpace"],[8,"MetricSpace"],[8,"InnerSpace"],[8,"EuclideanSpace"],[8,"Matrix"],[8,"SquareMatrix"],[8,"Angle"],[8,"Rotation"],[8,"Rotation2"],[8,"Rotation3"],[8,"Transform"],[3,"Basis3"],[3,"Basis2"]]};
searchIndex["claxon"]={"doc":"Claxon, a FLAC decoding library.","items":[[3,"FlacReader","claxon","A FLAC decoder that can decode the stream from the underlying reader.",N,N],[3,"FlacSamples","","An iterator that yields samples read from a `FlacReader`.",N,N],[4,"Error","","An error that prevents succesful decoding of the FLAC stream.",N,N],[13,"IoError","","Not a decoding error, but a problem with the underlying IO.",0,N],[13,"FormatError","","An ill-formed FLAC stream was encountered.",0,N],[13,"TooWide","","The audio stream has more bits per sample than the provided sample buffer to decode into.",0,N],[13,"Unsupported","","A currently unsupported feature of the FLAC format was encountered.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"from","","",0,[[["error"]],["error"]]],[0,"frame","","The `frame` module deals with the frames that make up a FLAC stream.",N,N],[3,"Block","claxon::frame","A block of raw audio samples.",N,N],[3,"StereoSamples","","An iterator over the stereo sample pairs in a block.",N,N],[3,"FrameReader","","Reads frames from a stream and exposes decoded blocks as an iterator.",N,N],[6,"FrameResult","","Either a `Block` or an `Error`.",N,N],[11,"empty","","Returns a block with 0 channels and 0 samples.",1,[[],["block"]]],[11,"time","","Returns the sample number of the first sample in the block.",1,[[["self"]],["u64"]]],[11,"len","","Returns the total number of samples in this block.",1,[[["self"]],["u32"]]],[11,"duration","","Returns the number of inter-channel samples in the block.",1,[[["self"]],["u32"]]],[11,"channels","","Returns the number of channels in the block.",1,[[["self"]],["u32"]]],[11,"channel","","Returns the (zero-based) `ch`-th channel as a slice.",1,N],[11,"sample","","Returns a sample in this block.",1,[[["self"],["u32"],["u32"]],["i32"]]],[11,"into_buffer","","Returns the underlying buffer that stores the samples in this block.",1,[[["self"]],["vec",["i32"]]]],[11,"stereo_samples","","Returns an iterator that produces left and right channel samples.",1,[[["self"]],["stereosamples"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"new","","Creates a new frame reader that will yield at least one element.",3,[[["r"]],["framereader"]]],[11,"read_next_or_eof","","Decodes the next frame or returns an error if the data was invalid.",3,[[["self"],["vec",["i32"]]],["frameresult"]]],[0,"subframe","claxon","The `subframe` module deals with subframes that make up a frame of the FLAC stream.",N,N],[5,"extend_sign_u32","claxon::subframe","Given a signed two's complement integer in the `bits` least significant bits of `val`, extends the sign bit to a valid 32-bit signed integer.",N,[[["u32"],["u32"]],["i32"]]],[5,"decode","","Decodes a subframe into the provided block-size buffer.",N,N],[0,"metadata","claxon","The `metadata` module deals with metadata at the beginning of a FLAC stream.",N,N],[3,"StreamInfo","claxon::metadata","The streaminfo metadata block, with important information about the stream.",N,N],[12,"min_block_size","","The minimum block size (in samples) used in the stream.",4,N],[12,"max_block_size","","The maximum block size (in samples) used in the stream.",4,N],[12,"min_frame_size","","The minimum frame size (in bytes) used in the stream.",4,N],[12,"max_frame_size","","The maximum frame size (in bytes) used in the stream.",4,N],[12,"sample_rate","","The sample rate in Hz.",4,N],[12,"channels","","The number of channels.",4,N],[12,"bits_per_sample","","The number of bits per sample.",4,N],[12,"samples","","The total number of inter-channel samples in the stream.",4,N],[12,"md5sum","","MD5 signature of the unencoded audio data.",4,N],[3,"SeekPoint","","A seek point in the seek table.",N,N],[12,"sample","","Sample number of the first sample in the target frame, or 2^64 - 1 for a placeholder.",5,N],[12,"offset","","Offset in bytes from the first byte of the first frame header to the first byte of the target frame's header.",5,N],[12,"samples","","Number of samples in the target frame.",5,N],[3,"SeekTable","","A seek table to aid seeking in the stream.",N,N],[3,"MetadataBlockReader","","Reads metadata blocks from a stream and exposes them as an iterator.",N,N],[4,"MetadataBlock","","A metadata about the flac stream.",N,N],[13,"StreamInfo","","A stream info block.",6,N],[13,"Padding","","A padding block (with no meaningful data).",6,N],[12,"length","claxon::metadata::MetadataBlock","The number of padding bytes.",6,N],[13,"Application","claxon::metadata","An application block with application-specific data.",6,N],[12,"id","claxon::metadata::MetadataBlock","The registered application ID.",6,N],[12,"data","","The contents of the application block.",6,N],[13,"SeekTable","claxon::metadata","A seek table block.",6,N],[13,"VorbisComment","","A Vorbis comment block, also known as FLAC tags.",6,N],[13,"CueSheet","","A CUE sheet block.",6,N],[13,"Picture","","A picture block.",6,N],[13,"Reserved","","A block with a reserved block type, not supported by this library.",6,N],[6,"MetadataBlockResult","","Either a `MetadataBlock` or an `Error`.",N,N],[11,"clone","","",4,[[["self"]],["streaminfo"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["seekpoint"]]],[11,"new","","Creates a metadata block reader that will yield at least one element.",7,[[["r"]],["metadatablockreader"]]],[11,"next","","",7,[[["self"]],["option",["metadatablockresult"]]]],[11,"size_hint","","",7,N],[6,"Result","claxon","A type for results generated by Claxon where the error type is hard-wired.",N,N],[11,"new","","Attempts to create a reader that reads the FLAC format.",8,[[["r"]],["result",["flacreader"]]]],[11,"streaminfo","","Returns the streaminfo metadata.",8,[[["self"]],["streaminfo"]]],[11,"blocks","","Returns an iterator that decodes a single frame on every iteration. TODO: It is not an iterator.",8,[[["self"]],["framereader",["bufferedreader"]]]],[11,"samples","","Returns an iterator over all samples.",8,[[["self"]],["flacsamples",["bufferedreader"]]]],[11,"into_inner","","Destroys the FLAC reader and returns the underlying reader.",8,[[["self"]],["r"]]],[11,"open","","Attempts to create a reader that reads from the specified file.",8,[[["p"]],["result",["flacreader"]]]],[11,"next","","",9,[[["self"]],["option",["result"]]]]],"paths":[[4,"Error"],[3,"Block"],[3,"StereoSamples"],[3,"FrameReader"],[3,"StreamInfo"],[3,"SeekPoint"],[4,"MetadataBlock"],[3,"MetadataBlockReader"],[3,"FlacReader"],[3,"FlacSamples"]]};
searchIndex["clipboard"]={"doc":"","items":[[0,"x11_clipboard","clipboard","",N,N],[3,"Primary","clipboard::x11_clipboard","",N,N],[3,"Clipboard","","",N,N],[3,"X11ClipboardContext","","",N,N],[8,"Selection","","",N,N],[10,"atom","","",0,[[["atoms"]],["atom"]]],[11,"atom","","",1,[[["atoms"]],["atom"]]],[11,"atom","","",2,[[["atoms"]],["atom"]]],[11,"new","","",3,[[],["result",["x11clipboardcontext","box"]]]],[11,"get_contents","","",3,[[["self"]],["result",["string","box"]]]],[11,"set_contents","","",3,[[["self"],["string"]],["result",["box"]]]],[0,"nop_clipboard","clipboard","",N,N],[3,"NopClipboardContext","clipboard::nop_clipboard","",N,N],[11,"new","","",4,[[],["result",["nopclipboardcontext","box"]]]],[11,"get_contents","","",4,[[["self"]],["result",["string","box"]]]],[11,"set_contents","","",4,[[["self"],["string"]],["result",["box"]]]],[6,"ClipboardContext","clipboard","",N,N],[8,"ClipboardProvider","","Trait for clipboard access",N,N],[10,"new","","Create a context with which to access the clipboard",5,[[],["result",["box"]]]],[10,"get_contents","","Method to get the clipboard contents as a String",5,[[["self"]],["result",["string","box"]]]],[10,"set_contents","","Method to set the clipboard contents as a String",5,[[["self"],["string"]],["result",["box"]]]]],"paths":[[8,"Selection"],[3,"Primary"],[3,"Clipboard"],[3,"X11ClipboardContext"],[3,"NopClipboardContext"],[8,"ClipboardProvider"]]};
searchIndex["color_quant"]={"doc":"Color quantization library This library provides a color quantizer based on the NEUQUANT quantization algorithm by Anthony Dekker. ### Usage `let data = vec![0; 40]; let nq = color_quant::NeuQuant::new(10, 256, &data); let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect(); let color_map = nq.color_map_rgba();`","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",N,N],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,N],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,N],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,N],[11,"index_of","","Finds the best-matching index in the color map.",0,N],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample. ",0,[[["self"]],["vec",["u8"]]]],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample. ",0,[[["self"]],["vec",["u8"]]]]],"paths":[[3,"NeuQuant"]]};
searchIndex["colored"]={"doc":"Coloring terminal so simple, you already know how to do it !","items":[[3,"ColoredString","colored","A string that may have color and/or style applied to it.",N,N],[4,"Color","","The 8 standard colors.",N,N],[13,"Black","","",0,N],[13,"Red","","",0,N],[13,"Green","","",0,N],[13,"Yellow","","",0,N],[13,"Blue","","",0,N],[13,"Magenta","","",0,N],[13,"Cyan","","",0,N],[13,"White","","",0,N],[13,"BrightBlack","","",0,N],[13,"BrightRed","","",0,N],[13,"BrightGreen","","",0,N],[13,"BrightYellow","","",0,N],[13,"BrightBlue","","",0,N],[13,"BrightMagenta","","",0,N],[13,"BrightCyan","","",0,N],[13,"BrightWhite","","",0,N],[11,"clone","","",0,[[["self"]],["color"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["color"]],["bool"]]],[11,"to_fg_str","","",0,[[["self"]],["str"]]],[11,"to_bg_str","","",0,[[["self"]],["str"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from_str","","",0,[[["str"]],["result"]]],[0,"control","","A couple of functions to enable and disable coloring.",N,N],[3,"ShouldColorize","colored::control","",N,N],[3,"SHOULD_COLORIZE","","",N,N],[5,"set_override","","Use this to force colored to ignore the environment and always/never colorize See example/control.rs",N,[[["bool"]]]],[5,"unset_override","","Remove the manual override and let the environment decide if it's ok to colorize See example/control.rs",N,[[]]],[11,"deref","","",1,[[["self"]],["shouldcolorize"]]],[11,"initialize","","",1,[[["self"]]]],[11,"default","","",2,[[],["shouldcolorize"]]],[11,"from_env","","",2,[[],["self"]]],[11,"should_colorize","","",2,[[["self"]],["bool"]]],[11,"set_override","","",2,[[["self"],["bool"]]]],[11,"unset_override","","",2,[[["self"]]]],[8,"Colorize","colored","The trait that enables something to be given color.",N,N],[10,"black","","",3,[[["self"]],["coloredstring"]]],[10,"red","","",3,[[["self"]],["coloredstring"]]],[10,"green","","",3,[[["self"]],["coloredstring"]]],[10,"yellow","","",3,[[["self"]],["coloredstring"]]],[10,"blue","","",3,[[["self"]],["coloredstring"]]],[10,"magenta","","",3,[[["self"]],["coloredstring"]]],[10,"purple","","",3,[[["self"]],["coloredstring"]]],[10,"cyan","","",3,[[["self"]],["coloredstring"]]],[10,"white","","",3,[[["self"]],["coloredstring"]]],[10,"bright_black","","",3,[[["self"]],["coloredstring"]]],[10,"bright_red","","",3,[[["self"]],["coloredstring"]]],[10,"bright_green","","",3,[[["self"]],["coloredstring"]]],[10,"bright_yellow","","",3,[[["self"]],["coloredstring"]]],[10,"bright_blue","","",3,[[["self"]],["coloredstring"]]],[10,"bright_magenta","","",3,[[["self"]],["coloredstring"]]],[10,"bright_purple","","",3,[[["self"]],["coloredstring"]]],[10,"bright_cyan","","",3,[[["self"]],["coloredstring"]]],[10,"bright_white","","",3,[[["self"]],["coloredstring"]]],[10,"color","","",3,[[["self"],["s"]],["coloredstring"]]],[10,"on_black","","",3,[[["self"]],["coloredstring"]]],[10,"on_red","","",3,[[["self"]],["coloredstring"]]],[10,"on_green","","",3,[[["self"]],["coloredstring"]]],[10,"on_yellow","","",3,[[["self"]],["coloredstring"]]],[10,"on_blue","","",3,[[["self"]],["coloredstring"]]],[10,"on_magenta","","",3,[[["self"]],["coloredstring"]]],[10,"on_purple","","",3,[[["self"]],["coloredstring"]]],[10,"on_cyan","","",3,[[["self"]],["coloredstring"]]],[10,"on_white","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_black","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_red","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_green","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_yellow","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_blue","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_magenta","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_purple","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_cyan","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_white","","",3,[[["self"]],["coloredstring"]]],[10,"on_color","","",3,[[["self"],["s"]],["coloredstring"]]],[10,"clear","","",3,[[["self"]],["coloredstring"]]],[10,"normal","","",3,[[["self"]],["coloredstring"]]],[10,"bold","","",3,[[["self"]],["coloredstring"]]],[10,"dimmed","","",3,[[["self"]],["coloredstring"]]],[10,"italic","","",3,[[["self"]],["coloredstring"]]],[10,"underline","","",3,[[["self"]],["coloredstring"]]],[10,"blink","","",3,[[["self"]],["coloredstring"]]],[10,"reverse","","Historical name of `Colorize::reversed`. May be removed in a future version. Please use `Colorize::reversed` instead",3,[[["self"]],["coloredstring"]]],[10,"reversed","","This should be preferred to `Colorize::reverse`.",3,[[["self"]],["coloredstring"]]],[10,"hidden","","",3,[[["self"]],["coloredstring"]]],[10,"strikethrough","","",3,[[["self"]],["coloredstring"]]],[11,"clone","","",4,[[["self"]],["coloredstring"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["coloredstring"]],["bool"]]],[11,"ne","","",4,[[["self"],["coloredstring"]],["bool"]]],[11,"is_plain","","",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"deref","","",4,[[["self"]],["str"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"black","","",4,[[["self"]],["coloredstring"]]],[11,"red","","",4,[[["self"]],["coloredstring"]]],[11,"green","","",4,[[["self"]],["coloredstring"]]],[11,"yellow","","",4,[[["self"]],["coloredstring"]]],[11,"blue","","",4,[[["self"]],["coloredstring"]]],[11,"magenta","","",4,[[["self"]],["coloredstring"]]],[11,"purple","","",4,[[["self"]],["coloredstring"]]],[11,"cyan","","",4,[[["self"]],["coloredstring"]]],[11,"white","","",4,[[["self"]],["coloredstring"]]],[11,"bright_black","","",4,[[["self"]],["coloredstring"]]],[11,"bright_red","","",4,[[["self"]],["coloredstring"]]],[11,"bright_green","","",4,[[["self"]],["coloredstring"]]],[11,"bright_yellow","","",4,[[["self"]],["coloredstring"]]],[11,"bright_blue","","",4,[[["self"]],["coloredstring"]]],[11,"bright_magenta","","",4,[[["self"]],["coloredstring"]]],[11,"bright_purple","","",4,[[["self"]],["coloredstring"]]],[11,"bright_cyan","","",4,[[["self"]],["coloredstring"]]],[11,"bright_white","","",4,[[["self"]],["coloredstring"]]],[11,"color","","",4,[[["self"],["s"]],["coloredstring"]]],[11,"on_black","","",4,[[["self"]],["coloredstring"]]],[11,"on_red","","",4,[[["self"]],["coloredstring"]]],[11,"on_green","","",4,[[["self"]],["coloredstring"]]],[11,"on_yellow","","",4,[[["self"]],["coloredstring"]]],[11,"on_blue","","",4,[[["self"]],["coloredstring"]]],[11,"on_magenta","","",4,[[["self"]],["coloredstring"]]],[11,"on_purple","","",4,[[["self"]],["coloredstring"]]],[11,"on_cyan","","",4,[[["self"]],["coloredstring"]]],[11,"on_white","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_black","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_red","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_green","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_yellow","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_blue","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_magenta","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_purple","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_cyan","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_white","","",4,[[["self"]],["coloredstring"]]],[11,"on_color","","",4,[[["self"],["s"]],["coloredstring"]]],[11,"clear","","",4,[[["self"]],["coloredstring"]]],[11,"normal","","",4,[[["self"]],["coloredstring"]]],[11,"bold","","",4,[[["self"]],["coloredstring"]]],[11,"dimmed","","",4,[[["self"]],["coloredstring"]]],[11,"italic","","",4,[[["self"]],["coloredstring"]]],[11,"underline","","",4,[[["self"]],["coloredstring"]]],[11,"blink","","",4,[[["self"]],["coloredstring"]]],[11,"reverse","","",4,[[["self"]],["coloredstring"]]],[11,"reversed","","",4,[[["self"]],["coloredstring"]]],[11,"hidden","","",4,[[["self"]],["coloredstring"]]],[11,"strikethrough","","",4,[[["self"]],["coloredstring"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Color"],[3,"SHOULD_COLORIZE"],[3,"ShouldColorize"],[8,"Colorize"],[3,"ColoredString"]]};
searchIndex["cpal"]={"doc":"How to use cpal","items":[[3,"Device","cpal","An opaque type that identifies a device that is capable of either audio input or output.",N,N],[3,"EventLoop","","Collection of voices managed together.",N,N],[3,"StreamId","","Identifier of a stream within the `EventLoop`.",N,N],[3,"SampleRate","","The number of samples processed per second for a single channel of audio.",N,N],[12,"0","","",0,N],[3,"Format","","The format of an input or output audio stream.",N,N],[12,"channels","","",1,N],[12,"sample_rate","","",1,N],[12,"data_type","","",1,N],[3,"SupportedFormat","","Describes a range of supported stream formats.",N,N],[12,"channels","","",2,N],[12,"min_sample_rate","","Minimum value for the samples rate of the supported formats.",2,N],[12,"max_sample_rate","","Maximum value for the samples rate of the supported formats.",2,N],[12,"data_type","","Type of data expected by the device.",2,N],[3,"InputBuffer","","Represents a buffer containing audio data that may be read.",N,N],[3,"OutputBuffer","","Represents a buffer that must be filled with audio data.",N,N],[3,"Devices","","An iterator yielding all `Device`s currently available to the system.",N,N],[3,"SupportedInputFormats","","An iterator that produces a list of input stream formats supported by the device.",N,N],[3,"SupportedOutputFormats","","An iterator that produces a list of output stream formats supported by the device.",N,N],[4,"SampleFormat","","Format that each sample has.",N,N],[13,"I16","","The value 0 corresponds to 0.",3,N],[13,"U16","","The value 0 corresponds to 32768.",3,N],[13,"F32","","The boundaries are (-1.0, 1.0).",3,N],[4,"StreamData","","Stream data passed to the `EventLoop::run` callback.",N,N],[13,"Input","","",4,N],[12,"buffer","cpal::StreamData","",4,N],[13,"Output","cpal","",4,N],[12,"buffer","cpal::StreamData","",4,N],[4,"UnknownTypeInputBuffer","cpal","This is the struct that is provided to you by cpal when you want to read samples from a buffer.",N,N],[13,"U16","","Samples whose format is `u16`.",5,N],[13,"I16","","Samples whose format is `i16`.",5,N],[13,"F32","","Samples whose format is `f32`.",5,N],[4,"UnknownTypeOutputBuffer","","This is the struct that is provided to you by cpal when you want to write samples to a buffer.",N,N],[13,"U16","","Samples whose format is `u16`.",6,N],[13,"I16","","Samples whose format is `i16`.",6,N],[13,"F32","","Samples whose format is `f32`.",6,N],[4,"FormatsEnumerationError","","Error that can happen when enumerating the list of supported formats.",N,N],[13,"DeviceNotAvailable","","The device no longer exists. This can happen if the device is disconnected while the program is running.",7,N],[4,"DefaultFormatError","","May occur when attempting to request the default input or output stream format from a `Device`.",N,N],[13,"DeviceNotAvailable","","The device no longer exists. This can happen if the device is disconnected while the program is running.",8,N],[13,"StreamTypeNotSupported","","Returned if e.g. the default input format was requested on an output-only audio device.",8,N],[4,"CreationError","","Error that can happen when creating a `Voice`.",N,N],[13,"DeviceNotAvailable","","The device no longer exists. This can happen if the device is disconnected while the program is running.",9,N],[13,"FormatNotSupported","","The required format is not supported.",9,N],[5,"devices","","An iterator yielding all `Device`s currently available to the system.",N,[[],["devices"]]],[5,"input_devices","","An iterator yielding all `Device`s currently available to the system that support one or more input stream formats.",N,[[],["inputdevices"]]],[5,"output_devices","","An iterator yielding all `Device`s currently available to the system that support one or more output stream formats.",N,[[],["outputdevices"]]],[5,"default_input_device","","The default input audio device on the system.",N,[[],["option",["device"]]]],[5,"default_output_device","","The default output audio device on the system.",N,[[],["option",["device"]]]],[11,"clone","","",3,[[["self"]],["sampleformat"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["sampleformat"]],["bool"]]],[11,"sample_size","","Returns the size in bytes of a sample of this format.",3,[[["self"]],["usize"]]],[11,"get_sample_size","","Deprecated. Use `sample_size` instead.",3,[[["self"]],["usize"]]],[6,"ChannelCount","","Number of channels.",N,N],[6,"InputDevices","","A `Devices` yielding only input devices.",N,N],[6,"OutputDevices","","A `Devices` yielding only output devices.",N,N],[8,"Sample","","Trait for containers that contain PCM data.",N,N],[10,"get_format","","Returns the `SampleFormat` corresponding to this data type.",10,[[],["sampleformat"]]],[10,"to_f32","","Turns the sample into its equivalent as a floating-point.",10,[[["self"]],["f32"]]],[10,"to_i16","","Converts this sample into a standard i16 sample.",10,[[["self"]],["i16"]]],[10,"to_u16","","Converts this sample into a standard u16 sample.",10,[[["self"]],["u16"]]],[10,"from","","Converts any sample type to this one by calling `to_i16`, `to_u16` or `to_f32`.",10,[[["s"]],["self"]]],[11,"clone","","",11,[[["self"]],["device"]]],[11,"eq","","",11,[[["self"],["device"]],["bool"]]],[11,"ne","","",11,[[["self"],["device"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["streamid"]]],[11,"eq","","",12,[[["self"],["streamid"]],["bool"]]],[11,"ne","","",12,[[["self"],["streamid"]],["bool"]]],[11,"hash","","",12,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["samplerate"]]],[11,"eq","","",0,[[["self"],["samplerate"]],["bool"]]],[11,"ne","","",0,[[["self"],["samplerate"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["samplerate"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["samplerate"]],["bool"]]],[11,"le","","",0,[[["self"],["samplerate"]],["bool"]]],[11,"gt","","",0,[[["self"],["samplerate"]],["bool"]]],[11,"ge","","",0,[[["self"],["samplerate"]],["bool"]]],[11,"cmp","","",0,[[["self"],["samplerate"]],["ordering"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["format"]]],[11,"eq","","",1,[[["self"],["format"]],["bool"]]],[11,"ne","","",1,[[["self"],["format"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["supportedformat"]]],[11,"eq","","",2,[[["self"],["supportedformat"]],["bool"]]],[11,"ne","","",2,[[["self"],["supportedformat"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"name","","The human-readable name of the device.",11,[[["self"]],["string"]]],[11,"supported_input_formats","","An iterator yielding formats that are supported by the backend.",11,[[["self"]],["result",["supportedinputformats","formatsenumerationerror"]]]],[11,"supported_output_formats","","An iterator yielding output stream formats that are supported by the device.",11,[[["self"]],["result",["supportedoutputformats","formatsenumerationerror"]]]],[11,"default_input_format","","The default input stream format for the device.",11,[[["self"]],["result",["format","defaultformaterror"]]]],[11,"default_output_format","","The default output stream format for the device.",11,[[["self"]],["result",["format","defaultformaterror"]]]],[11,"new","","Initializes a new events loop.",13,[[],["eventloop"]]],[11,"build_input_stream","","Creates a new input stream that will run from the given device and with the given format.",13,[[["self"],["device"],["format"]],["result",["streamid","creationerror"]]]],[11,"build_output_stream","","Creates a new output stream that will play on the given device and with the given format.",13,[[["self"],["device"],["format"]],["result",["streamid","creationerror"]]]],[11,"play_stream","","Instructs the audio device that it should start playing the stream with the given ID.",13,[[["self"],["streamid"]]]],[11,"pause_stream","","Instructs the audio device that it should stop playing the stream with the given ID.",13,[[["self"],["streamid"]]]],[11,"destroy_stream","","Destroys an existing stream.",13,[[["self"],["streamid"]]]],[11,"run","","Takes control of the current thread and begins the stream processing.",13,N],[11,"with_max_sample_rate","","Turns this `SupportedFormat` into a `Format` corresponding to the maximum samples rate.",2,[[["self"]],["format"]]],[11,"cmp_default_heuristics","","A comparison function which compares two `SupportedFormat`s in terms of their priority of use as a default stream format.",2,[[["self"],["self"]],["ordering"]]],[11,"deref","","",14,N],[11,"drop","","",14,[[["self"]]]],[11,"deref","","",15,N],[11,"deref_mut","","",15,N],[11,"drop","","",15,[[["self"]]]],[11,"len","","Returns the length of the buffer in number of samples.",5,[[["self"]],["usize"]]],[11,"len","","Returns the length of the buffer in number of samples.",6,[[["self"]],["usize"]]],[11,"from","","",2,[[["format"]],["supportedformat"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"next","","",17,[[["self"]],["option",["supportedformat"]]]],[11,"size_hint","","",17,N],[11,"next","","",18,[[["self"]],["option",["supportedformat"]]]],[11,"size_hint","","",18,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",8,[[["self"]],["str"]]]],"paths":[[3,"SampleRate"],[3,"Format"],[3,"SupportedFormat"],[4,"SampleFormat"],[4,"StreamData"],[4,"UnknownTypeInputBuffer"],[4,"UnknownTypeOutputBuffer"],[4,"FormatsEnumerationError"],[4,"DefaultFormatError"],[4,"CreationError"],[8,"Sample"],[3,"Device"],[3,"StreamId"],[3,"EventLoop"],[3,"InputBuffer"],[3,"OutputBuffer"],[3,"Devices"],[3,"SupportedInputFormats"],[3,"SupportedOutputFormats"]]};
searchIndex["crossbeam"]={"doc":"Crossbeam supports concurrent programming, especially focusing on memory management, synchronization, and non-blocking data structures.","items":[[0,"thread","crossbeam","",N,N],[5,"spawn_unchecked","crossbeam::thread","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unchecked","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle","error"]]]],[3,"Scope","","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"scope","crossbeam","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[0,"atomic","","Additional utilities for atomics.",N,N],[8,"AtomicConsume","crossbeam::atomic","Trait which allows reading from an atomic type with \"consume\" ordering.",N,N],[16,"Val","","Type returned by `load_consume`.",0,N],[10,"load_consume","","Loads a value from the atomic using a \"consume\" memory ordering.",0,N],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",N,N],[0,"utils","crossbeam","Utilities for concurrent programming.",N,N],[3,"CachePadded","crossbeam::utils","Pads `T` to the length of a cache line.",N,N],[0,"epoch","crossbeam","Epoch-based memory reclamation.",N,N],[5,"pin","crossbeam::epoch","Pins the current thread.",N,[[],["guard"]]],[3,"Shared","","A pointer to an object protected by the epoch GC.",N,N],[5,"default_handle","","Returns the default handle associated with the current thread.",N,[[],["handle"]]],[3,"Collector","","An epoch-based garbage collector.",N,N],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",N,N],[12,"current","","The value in the atomic pointer at the time of the failed operation.",1,N],[12,"new","","The new value, which the operation failed to store.",1,N],[8,"Pointer","","A trait for either `Owned` or `Shared` pointers.",N,N],[10,"into_usize","","Returns the machine representation of the pointer.",2,[[["self"]],["usize"]]],[10,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",2,[[["usize"]],["self"]]],[3,"Owned","","An owned heap-allocated object.",N,N],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",N,[[],["guard"]]],[3,"Guard","","A guard that keeps the current thread pinned.",N,N],[5,"default_collector","","Returns the default handle associated with the current thread.",N,[[],["collector"]]],[5,"is_pinned","","Returns `true` if the current thread is pinned.",N,[[],["bool"]]],[3,"Handle","","A handle to a garbage collector.",N,N],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",N,N],[10,"success","","The ordering of the operation when it succeeds.",3,[[["self"]],["ordering"]]],[10,"failure","","The ordering of the operation when it fails.",3,[[["self"]],["ordering"]]],[3,"Atomic","","An atomic pointer that can be safely shared between threads.",N,N],[0,"channel","crossbeam","Multi-producer multi-consumer channels for message passing.",N,N],[14,"select","crossbeam::channel","Waits on a set of channel operations.",N,N],[0,"deque","crossbeam","A concurrent work-stealing deque.",N,N],[5,"fifo","crossbeam::deque","Creates a work-stealing deque with the first-in first-out strategy.",N,N],[5,"lifo","","Creates a work-stealing deque with the last-in first-out strategy.",N,N],[3,"Worker","","The worker side of a deque.",N,N],[3,"Stealer","","The stealer side of a deque.",N,N],[0,"queue","crossbeam","Concurrent queues.",N,N],[3,"MsQueue","crossbeam::queue","A Michael-Scott lock-free queue, with support for blocking `pop`s.",N,N],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",N,N],[0,"stack","crossbeam","Concurrent stacks.",N,N],[3,"TreiberStack","crossbeam::stack","Treiber's lock-free stack.",N,N],[11,"defer","crossbeam::thread","Schedule code to be executed when exiting the scope.",4,N],[11,"spawn","","Create a scoped thread.",4,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",4,[[["self"]],["scopedthreadbuilder"]]],[11,"clone","crossbeam::utils","",5,[[["self"]],["cachepadded"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","crossbeam::thread","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",4,N],[11,"default","crossbeam::utils","",5,[[],["cachepadded"]]],[11,"deref_mut","","",5,[[["self"]],["t"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["cachepadded"]]],[11,"clone","crossbeam::deque","",7,[[["self"]],["stealer"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"borrow_mut","crossbeam::epoch","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["box"]],["atomic"]]],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",10,[[["shared"]],["atomic"]]],[11,"from","","Returns a new atomic pointer pointing to `raw`.",10,N],[11,"from","","",9,[[["t"]],["owned"]]],[11,"from","","Returns a new pointer pointing to `raw`.",11,N],[11,"from","","Returns a new atomic pointer pointing to `owned`.",10,[[["owned"]],["atomic"]]],[11,"from","","Returns a new owned pointer pointing to `b`.",9,[[["box"]],["owned"]]],[11,"from","","",10,[[["t"]],["atomic"]]],[11,"as_ref","","",9,[[["self"]],["t"]]],[11,"deref","","",9,[[["self"]],["t"]]],[11,"as_mut","","",9,[[["self"]],["t"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"default","","",11,[[],["shared"]]],[11,"default","","",10,[[],["atomic"]]],[11,"deref_mut","","",9,[[["self"]],["t"]]],[11,"cmp","","",11,[[["self"],["shared"]],["ordering"]]],[11,"drop","","",9,N],[11,"drop","","",12,N],[11,"drop","","",13,N],[11,"into_usize","","",9,[[["self"]],["usize"]]],[11,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",9,[[["usize"]],["owned"]]],[11,"into_usize","","",11,[[["self"]],["usize"]]],[11,"from_usize","","",11,[[["usize"]],["shared"]]],[11,"partial_cmp","","",11,[[["self"],["shared"]],["option",["ordering"]]]],[11,"clone","","Returns a copy of the atomic value.",10,[[["self"]],["atomic"]]],[11,"clone","","",11,[[["self"]],["shared"]]],[11,"clone","","",12,[[["self"]],["guard"]]],[11,"clone","","Creates another reference to the same garbage collector.",14,[[["self"]],["collector"]]],[11,"clone","","",9,[[["self"]],["owned"]]],[11,"clone","","",13,[[["self"]],["handle"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",11,[[["self"],["shared"]],["bool"]]],[11,"eq","","Checks if both handles point to the same collector.",14,[[["self"],["collector"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"join","crossbeam::thread","Join the scoped thread, returning the result it produced.",6,[[["self"]],["result",["box"]]]],[11,"thread","","Get the underlying thread handle.",6,[[["self"]],["thread"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",15,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",15,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",15,[[["self"],["f"]],["result",["scopedjoinhandle","error"]]]],[11,"fmt","crossbeam::atomic","",16,[[["self"],["formatter"]],["result"]]],[11,"drop","","",16,[[["self"]]]],[11,"new","","Creates a new `ArcCell`.",16,[[["arc"]],["arccell"]]],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",16,[[["self"],["arc"]],["arc"]]],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",16,[[["self"]],["arc"]]],[11,"default","","",16,[[],["self"]]],[11,"from","","",16,[[["arc"]],["self"]]],[11,"from","","",16,[[["t"]],["self"]]],[11,"fmt","crossbeam::queue","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty queue.",17,[[],["msqueue"]]],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",17,[[["self"],["t"]]]],[11,"is_empty","","Check if this queue is empty.",17,[[["self"]],["bool"]]],[11,"try_pop","","Attempt to dequeue from the front.",17,[[["self"]],["option"]]],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",17,[[["self"]],["t"]]],[11,"drop","","",17,[[["self"]]]],[11,"default","","",17,[[],["self"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty queue.",18,[[],["segqueue"]]],[11,"push","","Add `t` to the back of the queue.",18,[[["self"],["t"]]]],[11,"is_empty","","Judge if the queue is empty.",18,[[["self"]],["bool"]]],[11,"try_pop","","Attempt to dequeue from the front.",18,[[["self"]],["option"]]],[11,"drop","","",18,[[["self"]]]],[11,"default","","",18,[[],["self"]]],[11,"fmt","crossbeam::stack","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty stack.",19,[[],["treiberstack"]]],[11,"push","","Push `t` on top of the stack.",19,[[["self"],["t"]]]],[11,"try_pop","","Attempt to pop the top element of the stack.",19,[[["self"]],["option"]]],[11,"is_empty","","Check if this queue is empty.",19,[[["self"]],["bool"]]],[11,"drop","","",19,[[["self"]]]],[11,"default","","",19,[[],["self"]]],[11,"new","crossbeam::utils","Pads a value to the length of a cache line.",5,[[["t"]],["cachepadded"]]],[11,"null","crossbeam::epoch","Returns a new null pointer.",11,[[],["shared"]]],[11,"is_null","","Returns `true` if the pointer is null.",11,[[["self"]],["bool"]]],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",11,N],[11,"deref","","Dereferences the pointer.",11,[[["self"]],["t"]]],[11,"as_ref","","Converts the pointer to a reference.",11,[[["self"]],["option"]]],[11,"into_owned","","Takes ownership of the pointee.",11,[[["self"]],["owned"]]],[11,"tag","","Returns the tag stored within the pointer.",11,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",11,[[["self"],["usize"]],["shared"]]],[11,"new","","Creates a new collector.",14,[[],["collector"]]],[11,"register","","Registers a new handle for the collector.",14,[[["self"]],["handle"]]],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",9,[[["t"]],["owned"]]],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",9,N],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",9,[[["self"],["guard"]],["shared"]]],[11,"into_box","","Converts the owned pointer into a `Box`.",9,[[["self"]],["box"]]],[11,"tag","","Returns the tag stored within the pointer.",9,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",9,[[["self"],["usize"]],["owned"]]],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",12,N],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",12,N],[11,"repin","","Unpins and then immediately re-pins the thread.",12,N],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",12,[[["self"],["f"]],["r"]]],[11,"collector","","Returns the `Collector` associated with this guard.",12,[[["self"]],["option",["collector"]]]],[11,"pin","","Pins the handle.",13,[[["self"]],["guard"]]],[11,"is_pinned","","Returns `true` if the handle is pinned.",13,[[["self"]],["bool"]]],[11,"collector","","Returns the `Collector` associated with this handle.",13,[[["self"]],["collector"]]],[11,"null","","Returns a new null atomic pointer.",10,[[],["atomic"]]],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",10,[[["t"]],["atomic"]]],[11,"load","","Loads a `Shared` from the atomic pointer.",10,[[["self"],["ordering"],["guard"]],["shared"]]],[11,"load_consume","","Loads a `Shared` from the atomic pointer using a \"consume\" memory ordering.",10,[[["self"],["guard"]],["shared"]]],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",10,N],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",10,[[["self"],["p"],["ordering"],["guard"]],["shared"]]],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",10,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",10,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"fetch_and","","Bitwise \"and\" with the current tag.",10,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_or","","Bitwise \"or\" with the current tag.",10,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",10,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"is_empty","crossbeam::deque","Returns `true` if the deque is empty.",8,[[["self"]],["bool"]]],[11,"push","","Pushes an element into the back of the deque.",8,N],[11,"pop","","Pops an element from the deque.",8,[[["self"]],["option"]]],[11,"is_empty","","Returns `true` if the deque is empty.",7,[[["self"]],["bool"]]],[11,"steal","","Steals an element from the front of the deque.",7,[[["self"]],["option"]]]],"paths":[[8,"AtomicConsume"],[3,"CompareAndSetError"],[8,"Pointer"],[8,"CompareAndSetOrdering"],[3,"Scope"],[3,"CachePadded"],[3,"ScopedJoinHandle"],[3,"Stealer"],[3,"Worker"],[3,"Owned"],[3,"Atomic"],[3,"Shared"],[3,"Guard"],[3,"Handle"],[3,"Collector"],[3,"ScopedThreadBuilder"],[3,"ArcCell"],[3,"MsQueue"],[3,"SegQueue"],[3,"TreiberStack"]]};
searchIndex["crossbeam_channel"]={"doc":"Multi-producer multi-consumer channels for message passing.","items":[[3,"Receiver","crossbeam_channel","The receiving side of a channel.",N,N],[3,"Sender","","The sending side of a channel.",N,N],[3,"Select","","Waits on a set of channel operations.",N,N],[5,"bounded","","Creates a channel of bounded capacity.",N,N],[5,"unbounded","","Creates a channel of unbounded capacity.",N,N],[5,"after","","Creates a receiver that delivers a message after a certain duration of time.",N,[[["duration"]],["receiver",["instant"]]]],[5,"tick","","Creates a receiver that delivers messages periodically.",N,[[["duration"]],["receiver",["instant"]]]],[11,"new","","Creates a new `Select`.",0,[[],["select"]]],[11,"recv","","Adds a receive case.",0,[[["self"],["receiver"],["c"]],["select"]]],[11,"send","","Adds a send case.",0,[[["self"],["sender"],["m"],["c"]],["select"]]],[11,"default","","Adds a default case.",0,[[["self"],["c"]],["select"]]],[11,"wait","","Starts selection and waits until it completes.",0,[[["self"]],["r"]]],[11,"send","","Sends a message into the channel, blocking the current thread if the channel is full.",1,[[["self"],["t"]]]],[11,"is_empty","","Returns `true` if the channel is empty.",1,[[["self"]],["bool"]]],[11,"is_full","","Returns `true` if the channel is full.",1,[[["self"]],["bool"]]],[11,"len","","Returns the number of messages in the channel.",1,[[["self"]],["usize"]]],[11,"capacity","","If the channel is bounded, returns its capacity.",1,[[["self"]],["option",["usize"]]]],[11,"drop","","",1,[[["self"]]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"eq","","",1,[[["self"],["sender"]],["bool"]]],[11,"eq","","",1,[[["self"],["receiver"]],["bool"]]],[11,"recv","","Blocks the current thread until a message is received or the channel is closed.",2,[[["self"]],["option"]]],[11,"try_recv","","Attempts to receive a message from the channel without blocking.",2,[[["self"]],["option"]]],[11,"is_empty","","Returns `true` if the channel is empty.",2,[[["self"]],["bool"]]],[11,"is_full","","Returns `true` if the channel is full.",2,[[["self"]],["bool"]]],[11,"len","","Returns the number of messages in the channel.",2,[[["self"]],["usize"]]],[11,"capacity","","If the channel is bounded, returns its capacity.",2,[[["self"]],["option",["usize"]]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"eq","","",2,[[["self"],["receiver"]],["bool"]]],[11,"eq","","",2,[[["self"],["sender"]],["bool"]]],[11,"next","","",2,[[["self"]],["option"]]],[14,"select","","Waits on a set of channel operations.",N,N]],"paths":[[3,"Select"],[3,"Sender"],[3,"Receiver"]]};
searchIndex["crossbeam_deque"]={"doc":"A concurrent work-stealing deque.","items":[[3,"Worker","crossbeam_deque","The worker side of a deque.",N,N],[3,"Stealer","","The stealer side of a deque.",N,N],[4,"Pop","","Possible outcomes of a pop operation.",N,N],[13,"Empty","","The deque was empty at the time of popping.",0,N],[13,"Data","","Some data has been successfully popped.",0,N],[13,"Retry","","Lost the race for popping data to another concurrent steal operation. Try again.",0,N],[4,"Steal","","Possible outcomes of a steal operation.",N,N],[13,"Empty","","The deque was empty at the time of stealing.",1,N],[13,"Data","","Some data has been successfully stolen.",1,N],[13,"Retry","","Lost the race for stealing data to another concurrent steal or pop operation. Try again.",1,N],[5,"fifo","","Creates a work-stealing deque with the first-in first-out strategy.",N,N],[5,"lifo","","Creates a work-stealing deque with the last-in first-out strategy.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["pop"]],["bool"]]],[11,"ne","","",0,[[["self"],["pop"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["pop"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["pop"]],["bool"]]],[11,"le","","",0,[[["self"],["pop"]],["bool"]]],[11,"gt","","",0,[[["self"],["pop"]],["bool"]]],[11,"ge","","",0,[[["self"],["pop"]],["bool"]]],[11,"cmp","","",0,[[["self"],["pop"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["pop"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["steal"]],["bool"]]],[11,"ne","","",1,[[["self"],["steal"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["steal"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["steal"]],["bool"]]],[11,"le","","",1,[[["self"],["steal"]],["bool"]]],[11,"gt","","",1,[[["self"],["steal"]],["bool"]]],[11,"ge","","",1,[[["self"],["steal"]],["bool"]]],[11,"cmp","","",1,[[["self"],["steal"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["steal"]]],[11,"is_empty","","Returns `true` if the deque is empty.",2,[[["self"]],["bool"]]],[11,"push","","Pushes an element into the back of the deque.",2,[[["self"],["t"]]]],[11,"pop","","Pops an element from the deque.",2,[[["self"]],["pop"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"is_empty","","Returns `true` if the deque is empty.",3,[[["self"]],["bool"]]],[11,"steal","","Steals an element from the front of the deque.",3,[[["self"]],["steal"]]],[11,"steal_many","","Steals elements from the front of the deque.",3,[[["self"],["worker"]],["steal"]]],[11,"clone","","",3,[[["self"]],["stealer"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Pop"],[4,"Steal"],[3,"Worker"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"]={"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",N,N],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",N,N],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,N],[12,"new","","The new value, which the operation failed to store.",0,N],[3,"Owned","","An owned heap-allocated object.",N,N],[3,"Shared","","A pointer to an object protected by the epoch GC.",N,N],[3,"Guard","","A guard that keeps the current thread pinned.",N,N],[3,"Collector","","An epoch-based garbage collector.",N,N],[3,"Handle","","A handle to a garbage collector.",N,N],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",N,[[],["guard"]]],[5,"default_collector","","Returns the default handle associated with the current thread.",N,[[],["collector"]]],[5,"default_handle","","Returns the default handle associated with the current thread.",N,[[],["handle"]]],[5,"is_pinned","","Returns `true` if the current thread is pinned.",N,[[],["bool"]]],[5,"pin","","Pins the current thread.",N,[[],["guard"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"null","","Returns a new null atomic pointer.",1,[[],["atomic"]]],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,[[["t"]],["atomic"]]],[11,"load","","Loads a `Shared` from the atomic pointer.",1,[[["self"],["ordering"],["guard"]],["shared"]]],[11,"load_consume","","Loads a `Shared` from the atomic pointer using a \"consume\" memory ordering.",1,[[["self"],["guard"]],["shared"]]],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,[[["self"],["p"],["ordering"]]]],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,[[["self"],["p"],["ordering"],["guard"]],["shared"]]],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","Returns a copy of the atomic value.",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,[[["owned"]],["self"]]],[11,"from","","",1,[[["box"]],["self"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,[[["shared"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,N],[11,"into_usize","","",2,[[["self"]],["usize"]]],[11,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",2,[[["usize"]],["self"]]],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,[[["t"]],["owned"]]],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,N],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,[[["self"],["guard"]],["shared"]]],[11,"into_box","","Converts the owned pointer into a `Box`.",2,[[["self"]],["box"]]],[11,"tag","","Returns the tag stored within the pointer.",2,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,[[["self"],["usize"]],["owned"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["self"]]],[11,"from","","Returns a new owned pointer pointing to `b`.",2,[[["box"]],["self"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"as_ref","","",2,[[["self"]],["t"]]],[11,"as_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"into_usize","","",3,[[["self"]],["usize"]]],[11,"from_usize","","",3,[[["usize"]],["self"]]],[11,"null","","Returns a new null pointer.",3,[[],["shared"]]],[11,"is_null","","Returns `true` if the pointer is null.",3,[[["self"]],["bool"]]],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,N],[11,"deref","","Dereferences the pointer.",3,[[["self"]],["t"]]],[11,"as_ref","","Converts the pointer to a reference.",3,[[["self"]],["option"]]],[11,"into_owned","","Takes ownership of the pointee.",3,[[["self"]],["owned"]]],[11,"tag","","Returns the tag stored within the pointer.",3,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,[[["self"],["usize"]],["shared"]]],[11,"from","","Returns a new pointer pointing to `raw`.",3,N],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["self"]]],[11,"new","","Creates a new collector.",4,[[],["self"]]],[11,"register","","Registers a new handle for the collector.",4,[[["self"]],["handle"]]],[11,"clone","","Creates another reference to the same garbage collector.",4,[[["self"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","Checks if both handles point to the same collector.",4,[[["self"],["collector"]],["bool"]]],[11,"pin","","Pins the handle.",5,[[["self"]],["guard"]]],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,[[["self"]],["bool"]]],[11,"collector","","Returns the `Collector` associated with this handle.",5,[[["self"]],["collector"]]],[11,"drop","","",5,[[["self"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,[[["self"],["f"]]]],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,[[["self"]]]],[11,"repin","","Unpins and then immediately re-pins the thread.",6,[[["self"]]]],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,[[["self"],["f"]],["r"]]],[11,"collector","","Returns the `Collector` associated with this guard.",6,[[["self"]],["option",["collector"]]]],[11,"drop","","",6,[[["self"]]]],[11,"clone","","",6,[[["self"]],["guard"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",N,N],[10,"success","","The ordering of the operation when it succeeds.",7,[[["self"]],["ordering"]]],[10,"failure","","The ordering of the operation when it fails.",7,[[["self"]],["ordering"]]],[8,"Pointer","","A trait for either `Owned` or `Shared` pointers.",N,N],[10,"into_usize","","Returns the machine representation of the pointer.",8,[[["self"]],["usize"]]],[10,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",8,[[["usize"]],["self"]]]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]};
searchIndex["crossbeam_utils"]={"doc":"","items":[[0,"cache_padded","crossbeam_utils","",N,N],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",N,N],[11,"drop","","",0,[[["self"]]]],[11,"new","","Pads a value to the length of a cache line.",0,[[["t"]],["cachepadded"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"default","","",0,[[],["self"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["self"]]],[0,"atomic_option","crossbeam_utils","",N,N],[3,"AtomicOption","crossbeam_utils::atomic_option","",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"new","","",1,[[],["self"]]],[11,"swap_box","","",1,[[["self"],["box"],["ordering"]],["option",["box"]]]],[11,"swap","","",1,[[["self"],["t"],["ordering"]],["option"]]],[11,"take","","",1,[[["self"],["ordering"]],["option"]]],[11,"default","","",1,[[],["self"]]],[0,"scoped","crossbeam_utils","",N,N],[3,"Scope","crossbeam_utils::scoped","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",2,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",2,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,[[["self"]],["scopedthreadbuilder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",4,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,[[["self"],["f"]],["result",["scopedjoinhandle"]]]],[11,"join","","Join the scoped thread, returning the result it produced.",3,[[["self"]],["t"]]],[11,"thread","","Get the underlying thread handle.",3,[[["self"]],["thread"]]],[11,"drop","","",2,[[["self"]]]]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["deflate"]={"doc":"An implementation an encoder using DEFLATE compression algorightm in pure rust.","items":[[3,"CompressionOptions","deflate","A struct describing the options for a compressor or compression function.",N,N],[12,"max_hash_checks","","The maximum number of checks to make in the hash table for matches.",0,N],[12,"lazy_if_less_than","","Only lazy match if we have a length less than this value.",0,N],[12,"matching_type","","Whether to use lazy or greedy matching.",0,N],[12,"special","","Force fixed/stored blocks (Not implemented yet). * Default value: `SpecialOptions::Normal`",0,N],[4,"SpecialOptions","","Enum allowing some special options (not implemented yet)!",N,N],[13,"Normal","","Compress normally.",1,N],[13,"_ForceFixed","","Force fixed huffman tables. (Unimplemented!).",1,N],[13,"_ForceStored","","Force stored (uncompressed) blocks only. (Unimplemented!).",1,N],[4,"Compression","","An enum describing the level of compression to be used by the encoder",N,N],[13,"Fast","","Fast minimal compression (`CompressionOptions::fast()`).",2,N],[13,"Default","","Default level (`CompressionOptions::default()`).",2,N],[13,"Best","","Higher compression level (`CompressionOptions::high()`).",2,N],[4,"MatchingType","","An enum describing whether we use lazy or greedy matching.",N,N],[13,"Greedy","","Use greedy matching: the matching algorithm simply uses a match right away if found.",3,N],[13,"Lazy","","Use lazy matching: after finding a match, the next input byte is checked, to see if there is a better match starting at that byte.",3,N],[5,"deflate_bytes_conf","","Compress the given slice of bytes with DEFLATE compression.",N,N],[5,"deflate_bytes","","Compress the given slice of bytes with DEFLATE compression using the default compression level.",N,N],[5,"deflate_bytes_zlib_conf","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.",N,N],[5,"deflate_bytes_zlib","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer, using the default compression level.",N,N],[11,"clone","","",2,[[["self"]],["compression"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["compression"]],["bool"]]],[11,"cmp","","",2,[[["self"],["compression"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["compression"]],["option",["ordering"]]]],[11,"hash","","",2,N],[11,"default","","",2,[[],["compression"]]],[11,"clone","","",1,[[["self"]],["specialoptions"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["specialoptions"]],["bool"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["specialoptions"]]],[11,"clone","","",0,[[["self"]],["compressionoptions"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["compressionoptions"]],["bool"]]],[11,"ne","","",0,[[["self"],["compressionoptions"]],["bool"]]],[11,"hash","","",0,N],[11,"high","","Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.",0,[[],["compressionoptions"]]],[11,"fast","","Returns  a fast set of compression settings",0,[[],["compressionoptions"]]],[11,"huffman_only","","Returns a set of compression settings that makes the compressor only compress using huffman coding. (Ignoring any length/distance matching)",0,[[],["compressionoptions"]]],[11,"rle","","Returns a set of compression settings that makes the compressor compress only using run-length encoding (i.e only looking for matches one byte back).",0,[[],["compressionoptions"]]],[11,"default","","Returns the options describing the default compression level.",0,[[],["compressionoptions"]]],[11,"from","","",0,[[["compression"]],["compressionoptions"]]],[11,"clone","","",3,[[["self"]],["matchingtype"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["matchingtype"]],["bool"]]],[11,"cmp","","",3,[[["self"],["matchingtype"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["matchingtype"]],["option",["ordering"]]]],[11,"hash","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[0,"write","","Encoders implementing a `Write` interface.",N,N],[3,"DeflateEncoder","deflate::write","A DEFLATE encoder/compressor.",N,N],[3,"ZlibEncoder","","A Zlib encoder/compressor.",N,N],[11,"new","","Creates a new encoder using the provided compression options.",4,[[["w"],["o"]],["deflateencoder"]]],[11,"finish","","Encode all pending data to the contained writer, consume this `DeflateEncoder`, and return the contained writer if writing succeeds.",4,[[["self"]],["result"]]],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",4,[[["self"],["w"]],["result"]]],[11,"write","","",4,N],[11,"flush","","Flush the encoder.",4,[[["self"]],["result"]]],[11,"drop","","When the encoder is dropped, output the rest of the data.",4,[[["self"]]]],[11,"new","","Create a new `ZlibEncoder` using the provided compression options.",5,[[["w"],["o"]],["zlibencoder"]]],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",5,[[["self"]],["result"]]],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",5,[[["self"],["w"]],["result"]]],[11,"checksum","","Return the adler32 checksum of the currently consumed data.",5,[[["self"]],["u32"]]],[11,"write","","",5,N],[11,"flush","","Flush the encoder.",5,[[["self"]],["result"]]],[11,"drop","","When the encoder is dropped, output the rest of the data.",5,[[["self"]]]]],"paths":[[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"Compression"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]};
searchIndex["derivative"]={"doc":"","items":[[5,"derivative","derivative","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["dlib"]={"doc":"","items":[[3,"Library","dlib","A loaded dynamic library.",N,N],[3,"Symbol","","Symbol from a library.",N,N],[4,"DlError","","",N,N],[13,"NotFound","","",0,N],[13,"MissingSymbol","","",0,N],[14,"ffi_dispatch","","",N,N],[14,"ffi_dispatch_static","","",N,N],[14,"link_external_library","","",N,N],[14,"dlopen_external_library","","",N,N],[14,"external_library","","",N,N],[11,"new","","Find and load a dynamic library.",1,[[["p"]],["result",["library","error"]]]],[11,"get","","Get a pointer to function or static variable by symbol name.",1,N],[11,"clone","","",2,[[["self"]],["symbol"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"from","","",1,[[["library"]],["library"]]],[11,"into_raw","","Extract the wrapped `os::platform::Symbol`.",2,[[["self"]],["symbol"]]],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",2,[[["symbol"],["l"]],["symbol"]]],[11,"lift_option","","Lift Option out of the symbol.",2,[[["self"]],["option",["symbol"]]]]],"paths":[[4,"DlError"],[3,"Library"],[3,"Symbol"]]};
searchIndex["downcast_rs"]={"doc":"Rust enums are great for types where all variations are known beforehand. But in the case where you want to implement a container of user-defined types, an open-ended type like a trait object is needed. In some cases, it is useful to cast the trait object back into its original concrete type to access additional functionality and performant inlined implementations.","items":[[8,"Downcast","downcast_rs","Supports conversion to `Any`. Traits to be extended by `impl_downcast!` must extend `Downcast`.",N,N],[10,"into_any","","Convert `Box<Trait>` (where `Trait: Downcast`) to `Box<Any>`. `Box<Any>` can then be further `downcast` into `Box<ConcreteType>` where `ConcreteType` implements `Trait`.",0,[[["box"]],["box",["any"]]]],[10,"as_any","","Convert `&Trait` (where `Trait: Downcast`) to `&Any`. This is needed since Rust cannot generate `&Any`'s vtable from `&Trait`'s.",0,[[["self"]],["any"]]],[10,"as_any_mut","","Convert `&mut Trait` (where `Trait: Downcast`) to `&Any`. This is needed since Rust cannot generate `&mut Any`'s vtable from `&mut Trait`'s.",0,[[["self"]],["any"]]],[14,"impl_downcast","","Adds downcasting support to traits that extend `downcast::Downcast` by defining forwarding methods to the corresponding implementations on `std::any::Any` in the standard library.",N,N]],"paths":[[8,"Downcast"]]};
searchIndex["draw_state"]={"doc":"Graphics state blocks for gfx-rs","items":[[0,"preset","draw_state","State presets",N,N],[0,"blend","draw_state::preset","Blending preset modes.",N,N],[17,"REPLACE","draw_state::preset::blend","When combining two fragments, choose the source value",N,N],[17,"ADD","","When combining two fragments, add their values together, saturating at 1.0",N,N],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",N,N],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",N,N],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",N,N],[0,"depth","draw_state::preset","Depth presets for depth tests.",N,N],[17,"PASS_TEST","draw_state::preset::depth","When rendering a fragment, draw regardless of depth buffer state. Rendering will not update the depth buffer.",N,N],[17,"PASS_WRITE","","When rendering a fragment, draw regardless of depth buffer state. Rendering will update the depth buffer.",N,N],[17,"LESS_EQUAL_TEST","","\"<=\" comparison with read-only depth",N,N],[17,"LESS_EQUAL_WRITE","","When rendering a fragment, only draw when the fragment's output depth is less than or equal to the current depth buffer value. Rendering will update the depth buffer with the new depth value.",N,N],[0,"state","draw_state","Fixed-function hardware state.",N,N],[3,"Offset","draw_state::state","How to offset vertices in screen space, if at all.",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[3,"MultiSample","","Multi-sampling rasterization mode",N,N],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",N,N],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",1,N],[12,"cull_face","","Which face should be culled.",1,N],[12,"method","","How to rasterize this primitive.",1,N],[12,"offset","","Any polygon offset to apply.",1,N],[12,"samples","","Multi-sampling mode.",1,N],[3,"StencilSide","","Complete stencil state for a given side of a face.",N,N],[12,"fun","","Comparison function to use to determine if the stencil test passes.",2,N],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",2,N],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",2,N],[12,"op_fail","","What operation to do if the stencil test fails.",2,N],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",2,N],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",2,N],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",N,N],[12,"front","","",3,N],[12,"back","","",3,N],[3,"Depth","","Depth test state.",N,N],[12,"fun","","Comparison function to use.",4,N],[12,"write","","Specify whether to write to the depth buffer or not.",4,N],[3,"BlendChannel","","",N,N],[12,"equation","","",5,N],[12,"source","","",5,N],[12,"destination","","",5,N],[3,"Blend","","",N,N],[12,"color","","",6,N],[12,"alpha","","",6,N],[3,"ColorMask","","",N,N],[3,"Color","","The state of an active color render target",N,N],[12,"mask","","Color mask to use.",7,N],[12,"blend","","Optional blending.",7,N],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",N,N],[12,"stencil","","Stencil front and back values.",8,N],[12,"blend","","Constant blend color.",8,N],[4,"FrontFace","","The front face winding order of a set of vertices.",N,N],[13,"Clockwise","","Clockwise winding order.",9,N],[13,"CounterClockwise","","Counter-clockwise winding order.",9,N],[4,"CullFace","","Which face, if any, to cull.",N,N],[13,"Nothing","","",10,N],[13,"Front","","",10,N],[13,"Back","","",10,N],[4,"RasterMethod","","How to rasterize a primitive.",N,N],[13,"Point","","Rasterize as a point.",11,N],[13,"Line","","Rasterize as a line with the given width.",11,N],[13,"Fill","","Rasterize as a face.",11,N],[4,"Comparison","","A pixel-wise comparison function.",N,N],[13,"Never","","`false`",12,N],[13,"Less","","`x < y`",12,N],[13,"LessEqual","","`x <= y`",12,N],[13,"Equal","","`x == y`",12,N],[13,"GreaterEqual","","`x >= y`",12,N],[13,"Greater","","`x > y`",12,N],[13,"NotEqual","","`x != y`",12,N],[13,"Always","","`true`",12,N],[4,"StencilOp","","Stencil mask operation.",N,N],[13,"Keep","","Keep the current value in the stencil buffer (no change).",13,N],[13,"Zero","","Set the value in the stencil buffer to zero.",13,N],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",13,N],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",13,N],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",13,N],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",13,N],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",13,N],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",13,N],[4,"Equation","","",N,N],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",14,N],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",14,N],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",14,N],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",14,N],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",14,N],[4,"BlendValue","","",N,N],[13,"SourceColor","","",15,N],[13,"SourceAlpha","","",15,N],[13,"DestColor","","",15,N],[13,"DestAlpha","","",15,N],[13,"ConstColor","","",15,N],[13,"ConstAlpha","","",15,N],[4,"Factor","","",N,N],[13,"Zero","","",16,N],[13,"One","","",16,N],[13,"SourceAlphaSaturated","","",16,N],[13,"ZeroPlus","","",16,N],[13,"OneMinus","","",16,N],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",N,N],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",N,N],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",N,N],[11,"clone","","",9,[[["self"]],["frontface"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"hash","","",9,N],[11,"cmp","","",9,[[["self"],["frontface"]],["ordering"]]],[11,"eq","","",9,[[["self"],["frontface"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["frontface"]],["option",["ordering"]]]],[11,"clone","","",0,[[["self"]],["offset"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["offset"]],["bool"]]],[11,"ne","","",0,[[["self"],["offset"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["offset"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["offset"]],["bool"]]],[11,"le","","",0,[[["self"],["offset"]],["bool"]]],[11,"gt","","",0,[[["self"],["offset"]],["bool"]]],[11,"ge","","",0,[[["self"],["offset"]],["bool"]]],[11,"clone","","",10,[[["self"]],["cullface"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"hash","","",10,N],[11,"cmp","","",10,[[["self"],["cullface"]],["ordering"]]],[11,"eq","","",10,[[["self"],["cullface"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["cullface"]],["option",["ordering"]]]],[11,"clone","","",11,[[["self"]],["rastermethod"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["rastermethod"]],["bool"]]],[11,"ne","","",11,[[["self"],["rastermethod"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["rastermethod"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["rastermethod"]],["bool"]]],[11,"le","","",11,[[["self"],["rastermethod"]],["bool"]]],[11,"gt","","",11,[[["self"],["rastermethod"]],["bool"]]],[11,"ge","","",11,[[["self"],["rastermethod"]],["bool"]]],[11,"clone","","",17,[[["self"]],["multisample"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"hash","","",17,N],[11,"cmp","","",17,[[["self"],["multisample"]],["ordering"]]],[11,"eq","","",17,[[["self"],["multisample"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["multisample"]],["option",["ordering"]]]],[11,"clone","","",1,[[["self"]],["rasterizer"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"eq","","",1,[[["self"],["rasterizer"]],["bool"]]],[11,"ne","","",1,[[["self"],["rasterizer"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["rasterizer"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["rasterizer"]],["bool"]]],[11,"le","","",1,[[["self"],["rasterizer"]],["bool"]]],[11,"gt","","",1,[[["self"],["rasterizer"]],["bool"]]],[11,"ge","","",1,[[["self"],["rasterizer"]],["bool"]]],[11,"new_fill","","Create a new filling rasterizer.",1,[[],["self"]]],[11,"with_cull_back","","Add back face culling.",1,[[["self"]],["self"]]],[11,"with_offset","","Add polygon offset.",1,[[["self"],["f32"],["offsetunits"]],["self"]]],[11,"clone","","",12,[[["self"]],["comparison"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"hash","","",12,N],[11,"cmp","","",12,[[["self"],["comparison"]],["ordering"]]],[11,"eq","","",12,[[["self"],["comparison"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["comparison"]],["option",["ordering"]]]],[11,"clone","","",13,[[["self"]],["stencilop"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"hash","","",13,N],[11,"cmp","","",13,[[["self"],["stencilop"]],["ordering"]]],[11,"eq","","",13,[[["self"],["stencilop"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["stencilop"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["stencilside"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"cmp","","",2,[[["self"],["stencilside"]],["ordering"]]],[11,"eq","","",2,[[["self"],["stencilside"]],["bool"]]],[11,"ne","","",2,[[["self"],["stencilside"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["stencilside"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["stencilside"]],["bool"]]],[11,"le","","",2,[[["self"],["stencilside"]],["bool"]]],[11,"gt","","",2,[[["self"],["stencilside"]],["bool"]]],[11,"ge","","",2,[[["self"],["stencilside"]],["bool"]]],[11,"default","","",2,[[],["self"]]],[11,"clone","","",3,[[["self"]],["stencil"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["stencil"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["stencil"]],["ordering"]]],[11,"eq","","",3,[[["self"],["stencil"]],["bool"]]],[11,"ne","","",3,[[["self"],["stencil"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["stencil"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["stencil"]],["bool"]]],[11,"le","","",3,[[["self"],["stencil"]],["bool"]]],[11,"gt","","",3,[[["self"],["stencil"]],["bool"]]],[11,"ge","","",3,[[["self"],["stencil"]],["bool"]]],[11,"new","","Create a new stencil state with a given function.",3,N],[11,"clone","","",4,[[["self"]],["depth"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["depth"]],["ordering"]]],[11,"eq","","",4,[[["self"],["depth"]],["bool"]]],[11,"ne","","",4,[[["self"],["depth"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["depth"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["depth"]],["bool"]]],[11,"le","","",4,[[["self"],["depth"]],["bool"]]],[11,"gt","","",4,[[["self"],["depth"]],["bool"]]],[11,"ge","","",4,[[["self"],["depth"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"clone","","",14,[[["self"]],["equation"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"hash","","",14,N],[11,"cmp","","",14,[[["self"],["equation"]],["ordering"]]],[11,"eq","","",14,[[["self"],["equation"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["equation"]],["option",["ordering"]]]],[11,"clone","","",15,[[["self"]],["blendvalue"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"hash","","",15,N],[11,"cmp","","",15,[[["self"],["blendvalue"]],["ordering"]]],[11,"eq","","",15,[[["self"],["blendvalue"]],["bool"]]],[11,"partial_cmp","","",15,[[["self"],["blendvalue"]],["option",["ordering"]]]],[11,"clone","","",16,[[["self"]],["factor"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"hash","","",16,N],[11,"cmp","","",16,[[["self"],["factor"]],["ordering"]]],[11,"eq","","",16,[[["self"],["factor"]],["bool"]]],[11,"ne","","",16,[[["self"],["factor"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["factor"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["factor"]],["bool"]]],[11,"le","","",16,[[["self"],["factor"]],["bool"]]],[11,"gt","","",16,[[["self"],["factor"]],["bool"]]],[11,"ge","","",16,[[["self"],["factor"]],["bool"]]],[11,"clone","","",5,[[["self"]],["blendchannel"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"hash","","",5,N],[11,"cmp","","",5,[[["self"],["blendchannel"]],["ordering"]]],[11,"eq","","",5,[[["self"],["blendchannel"]],["bool"]]],[11,"ne","","",5,[[["self"],["blendchannel"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["blendchannel"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["blendchannel"]],["bool"]]],[11,"le","","",5,[[["self"],["blendchannel"]],["bool"]]],[11,"gt","","",5,[[["self"],["blendchannel"]],["bool"]]],[11,"ge","","",5,[[["self"],["blendchannel"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"clone","","",6,[[["self"]],["blend"]]],[11,"default","","",6,[[],["blend"]]],[11,"hash","","",6,N],[11,"eq","","",6,[[["self"],["blend"]],["bool"]]],[11,"ne","","",6,[[["self"],["blend"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["blend"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["blend"]],["bool"]]],[11,"le","","",6,[[["self"],["blend"]],["bool"]]],[11,"gt","","",6,[[["self"],["blend"]],["bool"]]],[11,"ge","","",6,[[["self"],["blend"]],["bool"]]],[11,"new","","Create a new blend state with a given equation.",6,[[["equation"],["factor"],["factor"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["colormask"]],["bool"]]],[11,"ne","","",18,[[["self"],["colormask"]],["bool"]]],[11,"clone","","",18,[[["self"]],["colormask"]]],[11,"partial_cmp","","",18,[[["self"],["colormask"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["colormask"]],["bool"]]],[11,"le","","",18,[[["self"],["colormask"]],["bool"]]],[11,"gt","","",18,[[["self"],["colormask"]],["bool"]]],[11,"ge","","",18,[[["self"],["colormask"]],["bool"]]],[11,"cmp","","",18,[[["self"],["colormask"]],["ordering"]]],[11,"hash","","",18,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[18,"RED","","",18,N],[18,"GREEN","","",18,N],[18,"BLUE","","",18,N],[18,"ALPHA","","",18,N],[11,"empty","","Returns an empty set of flags.",18,[[],["colormask"]]],[11,"all","","Returns the set containing all flags.",18,[[],["colormask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",18,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,[[["u8"]],["option",["colormask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,[[["u8"]],["colormask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",18,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,[[["self"],["colormask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,[[["self"],["colormask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",18,[[["self"],["colormask"]]]],[11,"remove","","Removes the specified flags in-place.",18,[[["self"],["colormask"]]]],[11,"toggle","","Toggles the specified flags in-place.",18,[[["self"],["colormask"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",18,[[["self"],["colormask"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",18,[[["self"],["colormask"]],["colormask"]]],[11,"bitor_assign","","Adds the set of flags.",18,[[["self"],["colormask"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,[[["self"],["colormask"]],["colormask"]]],[11,"bitxor_assign","","Toggles the set of flags.",18,[[["self"],["colormask"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",18,[[["self"],["colormask"]],["colormask"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",18,[[["self"],["colormask"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",18,[[["self"],["colormask"]],["colormask"]]],[11,"sub_assign","","Disables all flags enabled in the set.",18,[[["self"],["colormask"]]]],[11,"not","","Returns the complement of this set of flags.",18,[[["self"]],["colormask"]]],[11,"extend","","",18,[[["self"],["t"]]]],[11,"from_iter","","",18,[[["t"]],["colormask"]]],[11,"clone","","",7,[[["self"]],["color"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"hash","","",7,N],[11,"eq","","",7,[[["self"],["color"]],["bool"]]],[11,"ne","","",7,[[["self"],["color"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["color"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["color"]],["bool"]]],[11,"le","","",7,[[["self"],["color"]],["bool"]]],[11,"gt","","",7,[[["self"],["color"]],["bool"]]],[11,"ge","","",7,[[["self"],["color"]],["bool"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",8,[[["self"]],["refvalues"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["refvalues"]],["bool"]]],[11,"ne","","",8,[[["self"],["refvalues"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["refvalues"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["refvalues"]],["bool"]]],[11,"le","","",8,[[["self"],["refvalues"]],["bool"]]],[11,"gt","","",8,[[["self"],["refvalues"]],["bool"]]],[11,"ge","","",8,[[["self"],["refvalues"]],["bool"]]],[11,"default","","",8,[[],["self"]]],[0,"target","draw_state","Render target specification.",N,N],[3,"Rect","draw_state::target","A screen space rectangle",N,N],[12,"x","","",19,N],[12,"y","","",19,N],[12,"w","","",19,N],[12,"h","","",19,N],[3,"Mirror","","Mirroring flags, used for blitting",N,N],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",N,N],[6,"Level","","Mipmap level to select in a texture.",N,N],[6,"Depth","","A single depth value from a depth buffer.",N,N],[6,"Stencil","","A single value from a stencil stencstencil buffer.",N,N],[6,"ColorValue","","A color with floating-point components.",N,N],[11,"clone","","",19,[[["self"]],["rect"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"hash","","",19,N],[11,"eq","","",19,[[["self"],["rect"]],["bool"]]],[11,"ne","","",19,[[["self"],["rect"]],["bool"]]],[11,"partial_cmp","","",19,[[["self"],["rect"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["rect"]],["bool"]]],[11,"le","","",19,[[["self"],["rect"]],["bool"]]],[11,"gt","","",19,[[["self"],["rect"]],["bool"]]],[11,"ge","","",19,[[["self"],["rect"]],["bool"]]],[11,"eq","","",20,[[["self"],["mirror"]],["bool"]]],[11,"ne","","",20,[[["self"],["mirror"]],["bool"]]],[11,"clone","","",20,[[["self"]],["mirror"]]],[11,"partial_cmp","","",20,[[["self"],["mirror"]],["option",["ordering"]]]],[11,"lt","","",20,[[["self"],["mirror"]],["bool"]]],[11,"le","","",20,[[["self"],["mirror"]],["bool"]]],[11,"gt","","",20,[[["self"],["mirror"]],["bool"]]],[11,"ge","","",20,[[["self"],["mirror"]],["bool"]]],[11,"cmp","","",20,[[["self"],["mirror"]],["ordering"]]],[11,"hash","","",20,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[18,"X","","",20,N],[18,"Y","","",20,N],[11,"empty","","Returns an empty set of flags.",20,[[],["mirror"]]],[11,"all","","Returns the set containing all flags.",20,[[],["mirror"]]],[11,"bits","","Returns the raw value of the flags currently stored.",20,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,[[["u8"]],["option",["mirror"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,[[["u8"]],["mirror"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",20,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,[[["self"],["mirror"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,[[["self"],["mirror"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",20,[[["self"],["mirror"]]]],[11,"remove","","Removes the specified flags in-place.",20,[[["self"],["mirror"]]]],[11,"toggle","","Toggles the specified flags in-place.",20,[[["self"],["mirror"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",20,[[["self"],["mirror"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",20,[[["self"],["mirror"]],["mirror"]]],[11,"bitor_assign","","Adds the set of flags.",20,[[["self"],["mirror"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,[[["self"],["mirror"]],["mirror"]]],[11,"bitxor_assign","","Toggles the set of flags.",20,[[["self"],["mirror"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",20,[[["self"],["mirror"]],["mirror"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",20,[[["self"],["mirror"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",20,[[["self"],["mirror"]],["mirror"]]],[11,"sub_assign","","Disables all flags enabled in the set.",20,[[["self"],["mirror"]]]],[11,"not","","Returns the complement of this set of flags.",20,[[["self"]],["mirror"]]],[11,"extend","","",20,[[["self"],["t"]]]],[11,"from_iter","","",20,[[["t"]],["mirror"]]]],"paths":[[3,"Offset"],[3,"Rasterizer"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[4,"FrontFace"],[4,"CullFace"],[4,"RasterMethod"],[4,"Comparison"],[4,"StencilOp"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"MultiSample"],[3,"ColorMask"],[3,"Rect"],[3,"Mirror"]]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N]],"paths":[[4,"Either"]]};
searchIndex["error_chain"]={"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",N,N],[3,"Iter","","Iterator over the error chain using the `Error::cause()` method.",N,N],[3,"DisplayChain","","A struct which formats an error for output.",N,N],[0,"example_generated","","These modules show an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",N,N],[3,"Error","error_chain::example_generated","The Error type.",N,N],[12,"0","","The kind of the error.",0,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",1,N],[13,"Inner","","Link to another `ErrorChain`.",1,N],[13,"Io","","Link to a `std::error::Error` type.",1,N],[13,"Custom","","A custom error kind.",1,N],[0,"inner","","Another code generated by the macro.",N,N],[3,"Error","error_chain::example_generated::inner","The Error type.",N,N],[12,"0","","The kind of the error.",2,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",3,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",4,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","",2,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",2,N],[11,"with_chain","","",2,[[["e"],["k"]],["self"]]],[11,"kind","","",2,N],[11,"iter","","",2,[[["self"]],["iter"]]],[11,"chain_err","","",2,[[["self"],["f"]],["self"]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",2,[[["error"]],["option",["arc"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",2,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",2,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",2,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",2,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",2,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",2,[[["self"],["f"]],["error"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["errorkind"]],["self"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["string"]],["self"]]],[11,"deref","","",2,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",3,[[["self"]],["str"]]],[11,"from","","",3,[[["str"]],["self"]]],[11,"from","","",3,[[["string"]],["self"]]],[11,"from","","",3,[[["error"]],["self"]]],[6,"Result","error_chain::example_generated","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",5,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",0,N],[11,"with_chain","","",0,[[["e"],["k"]],["self"]]],[11,"kind","","",0,N],[11,"iter","","",0,[[["self"]],["iter"]]],[11,"chain_err","","",0,[[["self"],["f"]],["self"]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",0,[[["error"]],["option",["arc"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",0,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",0,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",0,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",0,[[["self"],["f"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["errorkind"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"deref","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",1,[[["self"]],["str"]]],[11,"from","","",1,[[["errorkind"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[8,"ExitCode","error_chain","Represents a value that can be used as the exit status of the process. See `quick_main!`.",N,N],[10,"code","","Returns the value to use as the exit status.",6,[[["self"]],["i32"]]],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",N,N],[16,"ErrorKind","","Associated kind type.",7,N],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",7,N],[10,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",7,[[["e"],["k"]],["self"]]],[10,"kind","","Returns the kind of the error.",7,N],[10,"iter","","Iterates over the error chain.",7,[[["self"]],["iter"]]],[10,"backtrace","","Returns the backtrace associated with this error.",7,[[["self"]],["option",["backtrace"]]]],[11,"display_chain","","Returns an object which implements `Display` for printing the full context of this error.",7,[[["self"]],["displaychain"]]],[10,"chain_err","","Extends the error chain with a new entry.",7,[[["self"],["f"]],["self"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new iterator over the error chain using `Error::cause()`.",8,[[["option",["error"]]],["iter"]]],[11,"next","","",8,[[["self"]],["option",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[14,"error_chain","","Macro for generating error types and traits. See crate level documentation for details.",N,N],[14,"quick_main","","Convenient wrapper to be able to use `?` and such in the main. You can use it with a separated function:",N,N],[14,"bail","","Exits a function early with an error",N,N],[14,"ensure","","Exits a function early with an error if the condition is not satisfied",N,N],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",10,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",10,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",10,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",10,N],[11,"clone","","",10,[[["self"]],["backtrace"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",10,[[],["backtrace"]]],[11,"from","","",10,[[["vec",["backtraceframe"]]],["backtrace"]]],[11,"into","","",10,[[["self"]],["vec",["backtraceframe"]]]]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ResultExt"],[8,"ExitCode"],[8,"ChainedError"],[3,"Iter"],[3,"DisplayChain"],[3,"Backtrace"]]};
searchIndex["fern"]={"doc":"Efficient, configurable logging in Rust.","items":[[3,"Dispatch","fern","The base dispatch logger.",N,N],[3,"Output","","Configuration for a logger output.",N,N],[3,"Panic","","Logger which will panic whenever anything is logged. The panic will be exactly the message of the log.",N,N],[3,"FormatCallback","","Callback struct for use within a formatter closure",N,N],[4,"InitError","","Convenience error combining possible errors which could occur while initializing logging.",N,N],[13,"Io","","IO error.",0,N],[13,"SetLoggerError","","The log crate's global logger was already initialized when trying to initialize a logger.",0,N],[5,"log_file","","Convenience method for opening a log file with common options.",N,[[["p"]],["result",["file"]]]],[11,"new","","Creates a dispatch, which will initially do nothing.",1,[[],["self"]]],[11,"format","","Sets the formatter of this dispatch. The closure should accept a callback, a message and a log record, and write the resulting format to the writer.",1,[[["self"],["f"]],["self"]]],[11,"chain","","Adds a child to this dispatch.",1,[[["self"],["t"]],["self"]]],[11,"level","","Sets the overarching level filter for this logger. All messages not already filtered by something set by [`Dispatch::level_for`] will be affected.",1,[[["self"],["levelfilter"]],["self"]]],[11,"level_for","","Sets a per-target log level filter. Default target for log messages is `crate_name::module_name` or `crate_name` for logs in the crate root. Targets can also be set with `info!(target: \"target-name\", ...)`.",1,[[["self"],["t"],["levelfilter"]],["self"]]],[11,"filter","","Adds a custom filter which can reject messages passing through this logger.",1,[[["self"],["f"]],["self"]]],[11,"into_shared","","Builds this dispatch and stores it in a clonable structure containing an [`Arc`].",1,[[["self"]],["shareddispatch"]]],[11,"into_log","","Builds this logger into a `Box<log::Log>` and calculates the minimum log level needed to have any effect.",1,N],[11,"apply","","Builds this logger and instantiates it as the global [`log`] logger.",1,[[["self"]],["result",["setloggererror"]]]],[11,"from","","Creates an output logger forwarding all messages to the dispatch.",2,[[["dispatch"]],["self"]]],[11,"from","","Creates an output logger forwarding all messages to the custom logger.",2,[[["box",["log"]]],["self"]]],[11,"from","","Creates an output logger forwarding all messages to the custom logger.",2,[[["log"]],["self"]]],[11,"from","","Creates an output logger which writes all messages to the file with `\\n` as the separator.",2,[[["file"]],["self"]]],[11,"from","","Creates an output logger which writes all messages to the writer with `\\n` as the separator.",2,[[["box",["write"]]],["self"]]],[11,"from","","Creates an output logger which writes all messages to stdout with the given handle and `\\n` as the separator.",2,[[["stdout"]],["self"]]],[11,"from","","Creates an output logger which writes all messages to stderr with the given handle and `\\n` as the separator.",2,[[["stderr"]],["self"]]],[11,"from","","Creates an output logger which writes all messages to the given mpsc::Sender with  '\\n' as the separator.",2,[[["sender",["string"]]],["self"]]],[11,"from","","Creates an output logger which will panic with message text for all messages.",2,[[["panic"]],["self"]]],[11,"file","","Returns a file logger using a custom separator.",2,[[["file"],["t"]],["self"]]],[11,"writer","","Returns a logger using arbitrary write object and custom separator.",2,[[["box",["write"]],["t"]],["self"]]],[11,"stdout","","Returns an stdout logger using a custom separator.",2,[[["t"]],["self"]]],[11,"stderr","","Returns an stderr logger using a custom separator.",2,[[["t"]],["self"]]],[11,"sender","","Returns a mpsc::Sender logger using a custom separator.",2,[[["sender",["string"]],["t"]],["self"]]],[11,"call","","Returns a logger which simply calls the given function with each message.",2,[[["f"]],["self"]]],[11,"default","","Returns a logger configuration that does nothing with log records.",1,[[],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["initerror"]]],[11,"from","","",0,[[["setloggererror"]],["initerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"finish","","Complete the formatting call that this FormatCallback was created for.",3,[[["self"],["arguments"]]]],[0,"colors","","Support for ANSI terminal colors via the colored crate.",N,N],[4,"Color","fern::colors","The 8 standard colors.",N,N],[13,"Black","","",4,N],[13,"Red","","",4,N],[13,"Green","","",4,N],[13,"Yellow","","",4,N],[13,"Blue","","",4,N],[13,"Magenta","","",4,N],[13,"Cyan","","",4,N],[13,"White","","",4,N],[13,"BrightBlack","","",4,N],[13,"BrightRed","","",4,N],[13,"BrightGreen","","",4,N],[13,"BrightYellow","","",4,N],[13,"BrightBlue","","",4,N],[13,"BrightMagenta","","",4,N],[13,"BrightCyan","","",4,N],[13,"BrightWhite","","",4,N],[3,"WithFgColor","","Opaque structure which represents some text data and a color to display it with.",N,N],[3,"ColoredLevelConfig","","Configuration specifying colors a log level can be colored as.",N,N],[12,"error","","The color to color logs with the [`Error`] level.",5,N],[12,"warn","","The color to color logs with the [`Warn`] level.",5,N],[12,"info","","The color to color logs with the [`Info`] level.",5,N],[12,"debug","","The color to color logs with the [`Debug`] level.",5,N],[12,"trace","","The color to color logs with the [`Trace`] level.",5,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["coloredlevelconfig"]]],[11,"new","","Creates a new ColoredLevelConfig with the default colors.",5,[[],["self"]]],[11,"error","","Overrides the [`Error`] level color with the given color.",5,[[["self"],["color"]],["self"]]],[11,"warn","","Overrides the [`Warn`] level color with the given color.",5,[[["self"],["color"]],["self"]]],[11,"info","","Overrides the [`Info`] level color with the given color.",5,[[["self"],["color"]],["self"]]],[11,"debug","","Overrides the [`Debug`] level color with the given color.",5,[[["self"],["color"]],["self"]]],[11,"trace","","Overrides the [`Trace`] level color with the given color.",5,[[["self"],["color"]],["self"]]],[11,"color","","Colors the given log level with the color in this configuration corresponding to it's level.",5,[[["self"],["level"]],["withfgcolor",["level"]]]],[11,"get_color","","Retrieves the color that a log level should be colored as.",5,[[["self"],["level"]],["color"]]],[11,"default","","Retrieves the default configuration. This has:",5,[[],["self"]]],[0,"meta","fern","Fern supports logging most things by default, except for one kind of struct: structs which make log calls to the global logger from within their `Display` or `Debug` implementations.",N,N],[6,"Formatter","","A type alias for a log formatter.",N,N],[6,"Filter","","A type alias for a log filter. Returning true means the record should succeed - false means it should fail.",N,N],[11,"to_fg_str","fern::colors","",4,[[["self"]],["str"]]],[11,"to_bg_str","","",4,[[["self"]],["str"]]],[11,"clone","","",4,[[["self"]],["color"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","",4,[[["str"]],["result",["color"]]]],[11,"from","","",4,[[["str"]],["color"]]],[11,"from","","",4,[[["string"]],["color"]]],[11,"eq","","",4,[[["self"],["color"]],["bool"]]]],"paths":[[4,"InitError"],[3,"Dispatch"],[3,"Output"],[3,"FormatCallback"],[4,"Color"],[3,"ColoredLevelConfig"],[3,"WithFgColor"]]};
searchIndex["fluent"]={"doc":"Fluent is a localization system designed to improve how software is translated.","items":[[0,"syntax","fluent","AST, parser and serializer operations",N,N],[0,"errors","fluent::syntax","",N,N],[3,"ParserError","fluent::syntax::errors","",N,N],[12,"info","","",0,N],[12,"kind","","",0,N],[3,"ErrorInfo","","",N,N],[12,"slice","","",1,N],[12,"line","","",1,N],[12,"col","","",1,N],[12,"pos","","",1,N],[4,"ErrorKind","","",N,N],[13,"Generic","","",2,N],[13,"ExpectedEntry","","",2,N],[13,"ExpectedToken","","",2,N],[12,"token","fluent::syntax::errors::ErrorKind","",2,N],[13,"ExpectedCharRange","fluent::syntax::errors","",2,N],[12,"range","fluent::syntax::errors::ErrorKind","",2,N],[13,"ExpectedMessageField","fluent::syntax::errors","",2,N],[12,"entry_id","fluent::syntax::errors::ErrorKind","",2,N],[13,"ExpectedTermField","fluent::syntax::errors","",2,N],[12,"entry_id","fluent::syntax::errors::ErrorKind","",2,N],[13,"ForbiddenWhitespace","fluent::syntax::errors","",2,N],[13,"ForbiddenCallee","","",2,N],[13,"ForbiddenKey","","",2,N],[13,"MissingDefaultVariant","","",2,N],[13,"MissingVariants","","",2,N],[13,"MissingValue","","",2,N],[13,"MissingVariantKey","","",2,N],[13,"MissingLiteral","","",2,N],[13,"MultipleDefaultVariants","","",2,N],[13,"MessageReferenceAsSelector","","",2,N],[13,"VariantAsSelector","","",2,N],[13,"MessageAttributeAsSelector","","",2,N],[13,"TermAttributeAsSelector","","",2,N],[13,"UnterminatedStringExpression","","",2,N],[5,"get_error_desc","","",N,N],[5,"get_error_lines","","",N,[[["str"],["usize"],["usize"]],["string"]]],[5,"get_error_slice","","",N,[[["str"],["usize"],["usize"]],["str"]]],[5,"get_error_info","","",N,[[["str"],["usize"],["usize"],["usize"]],["option",["errorinfo"]]]],[0,"display","","",N,N],[3,"Label","fluent::syntax::errors::display","",N,N],[12,"start_pos","","",3,N],[12,"end_pos","","",3,N],[12,"kind","","",3,N],[12,"text","","",3,N],[4,"Item","","",N,N],[13,"Error","","",4,N],[13,"Warning","","",4,N],[4,"LabelKind","","",N,N],[13,"Primary","","",5,N],[13,"Secondary","","",5,N],[5,"annotate_slice","","",N,[[["errorinfo"],["option",["string"]],["item"]],["string"]]],[11,"fmt","fluent::syntax::errors","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["errorinfo"]],["bool"]]],[11,"ne","","",1,[[["self"],["errorinfo"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",2,[[["self"],["errorkind"]],["bool"]]],[0,"ast","fluent::syntax","",N,N],[3,"Resource","fluent::syntax::ast","",N,N],[12,"body","","",6,N],[3,"Message","","",N,N],[12,"id","","",7,N],[12,"value","","",7,N],[12,"attributes","","",7,N],[12,"comment","","",7,N],[3,"Term","","",N,N],[12,"id","","",8,N],[12,"value","","",8,N],[12,"attributes","","",8,N],[12,"comment","","",8,N],[3,"Pattern","","",N,N],[12,"elements","","",9,N],[3,"Attribute","","",N,N],[12,"id","","",10,N],[12,"value","","",10,N],[3,"Variant","","",N,N],[12,"key","","",11,N],[12,"value","","",11,N],[12,"default","","",11,N],[3,"Identifier","","",N,N],[12,"name","","",12,N],[3,"Number","","",N,N],[12,"value","","",13,N],[3,"VariantName","","",N,N],[12,"name","","",14,N],[3,"Function","","",N,N],[12,"name","","",15,N],[4,"Entry","","",N,N],[13,"Message","","",16,N],[13,"Term","","",16,N],[13,"Comment","","",16,N],[13,"Junk","","",16,N],[12,"content","fluent::syntax::ast::Entry","",16,N],[4,"PatternElement","fluent::syntax::ast","",N,N],[13,"TextElement","","",17,N],[13,"Placeable","","",17,N],[4,"Expression","","",N,N],[13,"StringExpression","","",18,N],[12,"value","fluent::syntax::ast::Expression","",18,N],[13,"NumberExpression","fluent::syntax::ast","",18,N],[12,"value","fluent::syntax::ast::Expression","",18,N],[13,"MessageReference","fluent::syntax::ast","",18,N],[12,"id","fluent::syntax::ast::Expression","",18,N],[13,"ExternalArgument","fluent::syntax::ast","",18,N],[12,"id","fluent::syntax::ast::Expression","",18,N],[13,"SelectExpression","fluent::syntax::ast","",18,N],[12,"expression","fluent::syntax::ast::Expression","",18,N],[12,"variants","","",18,N],[13,"AttributeExpression","fluent::syntax::ast","",18,N],[12,"id","fluent::syntax::ast::Expression","",18,N],[12,"name","","",18,N],[13,"VariantExpression","fluent::syntax::ast","",18,N],[12,"id","fluent::syntax::ast::Expression","",18,N],[12,"key","","",18,N],[13,"CallExpression","fluent::syntax::ast","",18,N],[12,"callee","fluent::syntax::ast::Expression","",18,N],[12,"args","","",18,N],[4,"VarKey","fluent::syntax::ast","",N,N],[13,"VariantName","","",19,N],[13,"Number","","",19,N],[4,"Argument","","",N,N],[13,"Expression","","",20,N],[13,"NamedArgument","","",20,N],[12,"name","fluent::syntax::ast::Argument","",20,N],[12,"val","","",20,N],[4,"ArgValue","fluent::syntax::ast","",N,N],[13,"Number","","",21,N],[13,"String","","",21,N],[4,"Comment","","",N,N],[13,"Comment","","",22,N],[12,"content","fluent::syntax::ast::Comment","",22,N],[13,"GroupComment","fluent::syntax::ast","",22,N],[12,"content","fluent::syntax::ast::Comment","",22,N],[13,"ResourceComment","fluent::syntax::ast","",22,N],[12,"content","fluent::syntax::ast::Comment","",22,N],[11,"fmt","fluent::syntax::ast","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["resource"]],["bool"]]],[11,"ne","","",6,[[["self"],["resource"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["entry"]],["bool"]]],[11,"ne","","",16,[[["self"],["entry"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["message"]],["bool"]]],[11,"ne","","",7,[[["self"],["message"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["term"]],["bool"]]],[11,"ne","","",8,[[["self"],["term"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["pattern"]],["bool"]]],[11,"ne","","",9,[[["self"],["pattern"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["patternelement"]],["bool"]]],[11,"ne","","",17,[[["self"],["patternelement"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["expression"]],["bool"]]],[11,"ne","","",18,[[["self"],["expression"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["attribute"]],["bool"]]],[11,"ne","","",10,[[["self"],["attribute"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["variant"]],["bool"]]],[11,"ne","","",11,[[["self"],["variant"]],["bool"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["varkey"]],["bool"]]],[11,"ne","","",19,[[["self"],["varkey"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["argument"]],["bool"]]],[11,"ne","","",20,[[["self"],["argument"]],["bool"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["argvalue"]],["bool"]]],[11,"ne","","",21,[[["self"],["argvalue"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["identifier"]],["bool"]]],[11,"ne","","",12,[[["self"],["identifier"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["number"]],["bool"]]],[11,"ne","","",13,[[["self"],["number"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["variantname"]],["bool"]]],[11,"ne","","",14,[[["self"],["variantname"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["comment"]],["bool"]]],[11,"ne","","",22,[[["self"],["comment"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["function"]],["bool"]]],[11,"ne","","",15,[[["self"],["function"]],["bool"]]],[0,"parser","fluent::syntax","",N,N],[3,"ParserError","fluent::syntax::parser","",N,N],[12,"info","","",0,N],[12,"kind","","",0,N],[4,"ErrorKind","","",N,N],[13,"Generic","","",2,N],[13,"ExpectedEntry","","",2,N],[13,"ExpectedToken","","",2,N],[12,"token","fluent::syntax::parser::ErrorKind","",2,N],[13,"ExpectedCharRange","fluent::syntax::parser","",2,N],[12,"range","fluent::syntax::parser::ErrorKind","",2,N],[13,"ExpectedMessageField","fluent::syntax::parser","",2,N],[12,"entry_id","fluent::syntax::parser::ErrorKind","",2,N],[13,"ExpectedTermField","fluent::syntax::parser","",2,N],[12,"entry_id","fluent::syntax::parser::ErrorKind","",2,N],[13,"ForbiddenWhitespace","fluent::syntax::parser","",2,N],[13,"ForbiddenCallee","","",2,N],[13,"ForbiddenKey","","",2,N],[13,"MissingDefaultVariant","","",2,N],[13,"MissingVariants","","",2,N],[13,"MissingValue","","",2,N],[13,"MissingVariantKey","","",2,N],[13,"MissingLiteral","","",2,N],[13,"MultipleDefaultVariants","","",2,N],[13,"MessageReferenceAsSelector","","",2,N],[13,"VariantAsSelector","","",2,N],[13,"MessageAttributeAsSelector","","",2,N],[13,"TermAttributeAsSelector","","",2,N],[13,"UnterminatedStringExpression","","",2,N],[5,"parse","","",N,[[["str"]],["result",["resource"]]]],[6,"Result","","",N,N],[0,"stream","fluent::syntax","",N,N],[3,"ParserStream","fluent::syntax::stream","",N,N],[12,"buf","","",23,N],[12,"ch","","",23,N],[11,"clone","","",23,[[["self"]],["parserstream"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","",23,[[["i"]],["parserstream"]]],[11,"current","","",23,[[["self"]],["option",["char"]]]],[11,"current_is","","",23,[[["self"],["char"]],["bool"]]],[11,"current_peek","","",23,[[["self"]],["option",["char"]]]],[11,"current_peek_is","","",23,[[["self"],["char"]],["bool"]]],[11,"peek","","",23,[[["self"]],["option",["char"]]]],[11,"get_index","","",23,[[["self"]],["usize"]]],[11,"get_peek_index","","",23,[[["self"]],["usize"]]],[11,"peek_char_is","","",23,[[["self"],["char"]],["bool"]]],[11,"reset_peek","","",23,[[["self"],["option",["usize"]]]]],[11,"skip_to_peek","","",23,[[["self"]]]],[11,"next","","",23,[[["self"]],["option",["char"]]]],[0,"ftlstream","fluent::syntax","",N,N],[8,"FTLParserStream","fluent::syntax::ftlstream","",N,N],[10,"skip_inline_ws","","",24,[[["self"]]]],[10,"peek_inline_ws","","",24,[[["self"]]]],[10,"skip_blank_lines","","",24,[[["self"]]]],[10,"peek_blank_lines","","",24,[[["self"]]]],[10,"skip_indent","","",24,[[["self"]]]],[10,"expect_char","","",24,[[["self"],["char"]],["result"]]],[10,"expect_indent","","",24,[[["self"]],["result"]]],[10,"take_char_if","","",24,[[["self"],["char"]],["bool"]]],[10,"take_char","","",24,[[["self"],["f"]],["option",["char"]]]],[10,"is_char_id_start","","",24,[[["self"],["option",["char"]]],["bool"]]],[10,"is_entry_id_start","","",24,[[["self"]],["bool"]]],[10,"is_number_start","","",24,[[["self"]],["bool"]]],[10,"is_char_pattern_continuation","","",24,[[["self"],["option",["char"]]],["bool"]]],[10,"is_peek_pattern_start","","",24,[[["self"]],["bool"]]],[10,"is_peek_next_line_zero_four_style_comment","","",24,[[["self"]],["bool"]]],[10,"is_peek_next_line_comment","","",24,[[["self"],["i8"]],["bool"]]],[10,"is_peek_next_line_variant_start","","",24,[[["self"]],["bool"]]],[10,"is_peek_next_line_attribute_start","","",24,[[["self"]],["bool"]]],[10,"is_peek_next_line_pattern_start","","",24,[[["self"]],["bool"]]],[10,"skip_to_next_entry_start","","",24,[[["self"]]]],[10,"take_id_start","","",24,[[["self"],["bool"]],["result",["char"]]]],[10,"take_id_char","","",24,[[["self"]],["option",["char"]]]],[10,"take_variant_name_char","","",24,[[["self"]],["option",["char"]]]],[10,"take_digit","","",24,[[["self"]],["option",["char"]]]],[11,"skip_inline_ws","fluent::syntax::stream","",23,[[["self"]]]],[11,"peek_inline_ws","","",23,[[["self"]]]],[11,"skip_blank_lines","","",23,[[["self"]]]],[11,"peek_blank_lines","","",23,[[["self"]]]],[11,"skip_indent","","",23,[[["self"]]]],[11,"expect_char","","",23,[[["self"],["char"]],["result"]]],[11,"expect_indent","","",23,[[["self"]],["result"]]],[11,"take_char_if","","",23,[[["self"],["char"]],["bool"]]],[11,"take_char","","",23,[[["self"],["f"]],["option",["char"]]]],[11,"is_char_id_start","","",23,[[["self"],["option",["char"]]],["bool"]]],[11,"is_entry_id_start","","",23,[[["self"]],["bool"]]],[11,"is_number_start","","",23,[[["self"]],["bool"]]],[11,"is_char_pattern_continuation","","",23,[[["self"],["option",["char"]]],["bool"]]],[11,"is_peek_pattern_start","","",23,[[["self"]],["bool"]]],[11,"is_peek_next_line_zero_four_style_comment","","",23,[[["self"]],["bool"]]],[11,"is_peek_next_line_comment","","",23,[[["self"],["i8"]],["bool"]]],[11,"is_peek_next_line_variant_start","","",23,[[["self"]],["bool"]]],[11,"is_peek_next_line_attribute_start","","",23,[[["self"]],["bool"]]],[11,"is_peek_next_line_pattern_start","","",23,[[["self"]],["bool"]]],[11,"skip_to_next_entry_start","","",23,[[["self"]]]],[11,"take_id_start","","",23,[[["self"],["bool"]],["result",["char"]]]],[11,"take_id_char","","",23,[[["self"]],["option",["char"]]]],[11,"take_variant_name_char","","",23,[[["self"]],["option",["char"]]]],[11,"take_digit","","",23,[[["self"]],["option",["char"]]]],[0,"context","fluent","`MessageContext` is a collection of localization messages in Fluent.",N,N],[3,"MessageContext","fluent::context","`MessageContext` is a collection of localization messages which are meant to be used together in a single view, widget or any other UI abstraction.",N,N],[12,"locales","","",25,N],[11,"new","","",25,N],[11,"has_message","","",25,[[["self"],["str"]],["bool"]]],[11,"get_message","","",25,[[["self"],["str"]],["option",["message"]]]],[11,"get_term","","",25,[[["self"],["str"]],["option",["term"]]]],[11,"add_messages","","",25,[[["self"],["str"]]]],[11,"format","","",25,[[["self"],["t"],["option",["hashmap"]]],["option",["string"]]]],[0,"resolve","fluent","The `ResolveValue` trait resolves Fluent AST nodes to [`FluentValues`].",N,N],[3,"Env","fluent::resolve","State for a single `ResolveValue::to_value` call.",N,N],[12,"ctx","","The current `MessageContext` instance.",26,N],[12,"args","","The current arguments passed by the developer.",26,N],[8,"ResolveValue","","Converts an AST node to a `FluentValue`.",N,N],[10,"to_value","","",27,[[["self"],["env"]],["option",["fluentvalue"]]]],[11,"to_value","fluent::syntax::ast","",7,[[["self"],["env"]],["option",["fluentvalue"]]]],[11,"to_value","","",8,[[["self"],["env"]],["option",["fluentvalue"]]]],[11,"to_value","","",10,[[["self"],["env"]],["option",["fluentvalue"]]]],[11,"to_value","","",9,[[["self"],["env"]],["option",["fluentvalue"]]]],[11,"to_value","","",17,[[["self"],["env"]],["option",["fluentvalue"]]]],[11,"to_value","","",13,[[["self"],["env"]],["option",["fluentvalue"]]]],[11,"to_value","","",14,[[["self"],["env"]],["option",["fluentvalue"]]]],[11,"to_value","","",18,[[["self"],["env"]],["option",["fluentvalue"]]]],[0,"types","fluent","The `FluentValue` enum represents values which can be formatted to a String.",N,N],[4,"FluentValue","fluent::types","Value types which can be formatted to a String.",N,N],[13,"String","","Fluent String type.",28,N],[13,"Number","","Fluent Number type.",28,N],[11,"clone","","",28,[[["self"]],["fluentvalue"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["fluentvalue"]],["bool"]]],[11,"ne","","",28,[[["self"],["fluentvalue"]],["bool"]]],[11,"format","","",28,[[["self"],["messagecontext"]],["string"]]],[11,"matches","","",28,[[["self"],["messagecontext"],["fluentvalue"]],["bool"]]],[11,"from","","",28,[[["string"]],["self"]]],[11,"from","","",28,[[["str"]],["self"]]],[11,"from","","",28,[[["f32"]],["self"]]],[11,"from","","",28,[[["i8"]],["self"]]],[0,"intl","fluent","",N,N],[3,"PluralRules","fluent::intl","",N,N],[12,"locale","","",29,N],[11,"new","","",29,N],[11,"select","","",29,[[["self"],["f32"]],["str"]]]],"paths":[[3,"ParserError"],[3,"ErrorInfo"],[4,"ErrorKind"],[3,"Label"],[4,"Item"],[4,"LabelKind"],[3,"Resource"],[3,"Message"],[3,"Term"],[3,"Pattern"],[3,"Attribute"],[3,"Variant"],[3,"Identifier"],[3,"Number"],[3,"VariantName"],[3,"Function"],[4,"Entry"],[4,"PatternElement"],[4,"Expression"],[4,"VarKey"],[4,"Argument"],[4,"ArgValue"],[4,"Comment"],[3,"ParserStream"],[8,"FTLParserStream"],[3,"MessageContext"],[3,"Env"],[8,"ResolveValue"],[4,"FluentValue"],[3,"PluralRules"]]};
searchIndex["fluent_locale"]={"doc":"fluent-locale is an API for operating on locales and language tags. It's part of Project Fluent, a localization framework designed to unleash the expressive power of the natural language.","items":[[0,"accepted_languages","fluent_locale","This function parses Accept-Language string into a list of language tags that can be later passed to language negotiation functions.",N,N],[5,"parse","fluent_locale::accepted_languages","",N,[[["str"]],["vec",["str"]]]],[0,"locale","fluent_locale","",N,N],[3,"Locale","fluent_locale::locale","A Locale object.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["locale"]]],[11,"eq","","",0,[[["self"],["locale"]],["bool"]]],[11,"ne","","",0,[[["self"],["locale"]],["bool"]]],[11,"clone","","",0,[[["self"]],["locale"]]],[11,"new","","",0,[[["str"],["option",["btreemap"]]],["result",["locale","error"]]]],[11,"set_language","","",0,[[["self"],["str"]],["result",["error"]]]],[11,"get_language","","",0,[[["self"]],["str"]]],[11,"set_script","","",0,[[["self"],["str"]],["result",["error"]]]],[11,"get_script","","",0,[[["self"]],["str"]]],[11,"set_region","","",0,[[["self"],["str"]],["result",["error"]]]],[11,"get_region","","",0,[[["self"]],["str"]]],[11,"add_variant","","",0,[[["self"],["string"]]]],[11,"remove_variant","","",0,[[["self"],["string"]]]],[11,"get_variants","","",0,[[["self"]],["vec",["string"]]]],[11,"clear_variants","","",0,[[["self"]]]],[11,"has_privateuse","","",0,[[["self"]],["bool"]]],[11,"get_extensions","","",0,[[["self"]],["btreemap",["string","btreemap"]]]],[11,"add_extension","","",0,[[["self"],["string"],["string"],["string"]]]],[11,"matches","","",0,[[["self"],["locale"],["bool"],["bool"]],["bool"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"negotiate","fluent_locale","Language Negotiation is a process in which locales from different sources are filtered and sorted in an effort to produce the best possible selection of them.",N,N],[4,"NegotiationStrategy","fluent_locale::negotiate","",N,N],[13,"Filtering","","",1,N],[13,"Matching","","",1,N],[13,"Lookup","","",1,N],[5,"negotiate_languages","","",N,N],[11,"eq","","",1,[[["self"],["negotiationstrategy"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Locale"],[4,"NegotiationStrategy"]]};
searchIndex["fnv"]={"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",N,N],[6,"FnvBuildHasher","","A builder for default FNV hashers.",N,N],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",N,N],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",N,N],[11,"default","","",0,[[],["fnvhasher"]]],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,[[["u64"]],["fnvhasher"]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"write","","",0,N]],"paths":[[3,"FnvHasher"]]};
searchIndex["futures"]={"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",0,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,N],[11,"clone","","",0,[[["self"]],["async"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["async"]],["bool"]]],[11,"ne","","",0,[[["self"],["async"]],["bool"]]],[11,"map","","Change the success value of this `Async` with the closure provided",0,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",0,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["async"]]],[11,"clone","","",1,[[["self"]],["asyncsink"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,[[["self"]],["bool"]]],[0,"future","","Futures",N,N],[3,"Empty","futures::future","A future which is never resolved.",N,N],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",2,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",3,N],[13,"B","","Second branch of the type",3,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["futureresult"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"from","","",8,[[["result"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"poll","","",11,[[["self"]],["poll"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"poll","","",12,[[["self"]],["poll",["option"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",13,[[["self"]],["bool"]]],[11,"poll","","",13,[[["self"]],["poll"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"poll","","",14,[[["self"]],["poll",["option"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"poll","","",15,[[["self"]],["poll"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"poll","","",16,[[["self"]],["poll"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"poll","","",17,[[["self"]],["poll"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"poll","","",18,[[["self"]],["poll"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"poll","","",19,[[["self"]],["poll"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"poll","","",20,[[["self"]],["poll"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"poll","","",21,[[["self"]],["poll"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"poll","","",22,[[["self"]],["poll"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"poll","","",23,[[["self"]],["poll"]]],[11,"poll","","",24,[[["self"]],["poll"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"poll","","",25,[[["self"]],["poll"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"poll","","",26,[[["self"]],["poll"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"poll","","",27,[[["self"]],["poll"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"poll","","",28,[[["self"]],["poll"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"poll","","",29,[[["self"]],["poll"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"poll","","",30,[[["self"]],["poll"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"poll","","",31,[[["self"]],["poll"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,[[["self"]],["option",["result"]]]],[11,"poll","","",32,[[["self"]],["poll"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"drop","","",32,[[["self"]]]],[11,"clone","","",33,[[["self"]],["shareditem"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"deref","","",33,[[["self"]],["t"]]],[11,"clone","","",34,[[["self"]],["sharederror"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"deref","","",34,[[["self"]],["e"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"description","","",34,[[["self"]],["str"]]],[11,"cause","","",34,[[["self"]],["option",["error"]]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,[[["self"]],["poll"]]],[11,"wait","","Block the current thread until this future is resolved.",35,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",35,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",35,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",35,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",35,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",35,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",36,N],[16,"Item","","The item that the future may resolve with.",36,N],[16,"Error","","The error that the future may resolve with.",36,N],[10,"into_future","","Consumes this object and produces a future.",36,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",37,N],[16,"Error","","Possible errors during conversion.",37,N],[10,"future_from","","Consume the given value, beginning the conversion.",37,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,[[["self"],["f"]],["result",["executeerror"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["executeerrorkind"]]],[11,"eq","","",4,[[["self"],["executeerrorkind"]],["bool"]]],[11,"new","","Create a new `ExecuteError`",39,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",39,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,[[["self"]],["f"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[0,"stream","futures","Asynchronous streams",N,N],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",40,N],[12,"1","","",40,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",41,N],[13,"Second","","An item from the second stream",41,N],[13,"Both","","Items from both streams",41,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"poll","","",42,[[["self"]],["poll",["option"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"poll","","",43,[[["self"]],["poll",["option"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"poll","","",44,[[["self"]],["poll",["option"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"poll","","",45,[[["self"]],["poll",["option"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,[[["self"]],["s"]]],[11,"start_send","","",46,N],[11,"poll_complete","","",46,[[["self"]],["poll"]]],[11,"close","","",46,[[["self"]],["poll"]]],[11,"poll","","",46,[[["self"]],["poll",["option"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"poll","","",47,[[["self"]],["poll",["option"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",48,[[["self"]],["poll"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",49,[[["self"]],["poll"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"poll","","",50,[[["self"]],["poll",["option"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,[[["self"]],["s"]]],[11,"start_send","","",51,N],[11,"poll_complete","","",51,[[["self"]],["poll"]]],[11,"close","","",51,[[["self"]],["poll"]]],[11,"poll","","",51,[[["self"]],["poll",["option"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,[[["self"]],["s"]]],[11,"start_send","","",52,N],[11,"poll_complete","","",52,[[["self"]],["poll"]]],[11,"close","","",52,[[["self"]],["poll"]]],[11,"poll","","",52,[[["self"]],["poll",["option"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,[[["self"]],["s"]]],[11,"start_send","","",53,N],[11,"poll_complete","","",53,[[["self"]],["poll"]]],[11,"close","","",53,[[["self"]],["poll"]]],[11,"poll","","",53,[[["self"]],["poll",["option"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"poll","","",54,[[["self"]],["poll"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"poll","","",55,[[["self"]],["poll"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,[[["self"]],["s"]]],[11,"poll","","",56,[[["self"]],["poll",["option"]]]],[11,"start_send","","",56,N],[11,"poll_complete","","",56,[[["self"]],["poll"]]],[11,"close","","",56,[[["self"]],["poll"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",57,N],[11,"poll_complete","","",57,[[["self"]],["poll"]]],[11,"close","","",57,[[["self"]],["poll"]]],[11,"poll","","",57,[[["self"]],["poll",["option"]]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,[[["self"]],["s"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,[[["self"]],["option"]]],[11,"poll","","",58,[[["self"]],["poll"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,[[["self"]],["s"]]],[11,"start_send","","",59,N],[11,"poll_complete","","",59,[[["self"]],["poll"]]],[11,"close","","",59,[[["self"]],["poll"]]],[11,"poll","","",59,[[["self"]],["poll",["option"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,[[["self"]],["s"]]],[11,"start_send","","",60,N],[11,"poll_complete","","",60,[[["self"]],["poll"]]],[11,"close","","",60,[[["self"]],["poll"]]],[11,"poll","","",60,[[["self"]],["poll",["option"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,[[["self"]],["s"]]],[11,"start_send","","",61,N],[11,"poll_complete","","",61,[[["self"]],["poll"]]],[11,"close","","",61,[[["self"]],["poll"]]],[11,"poll","","",61,[[["self"]],["poll",["option"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,[[["self"]],["s"]]],[11,"start_send","","",62,N],[11,"poll_complete","","",62,[[["self"]],["poll"]]],[11,"close","","",62,[[["self"]],["poll"]]],[11,"poll","","",62,[[["self"]],["poll",["option"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"poll","","",63,[[["self"]],["poll",["option"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"poll","","",64,[[["self"]],["poll",["option"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",65,N],[11,"poll_complete","","",65,[[["self"]],["poll"]]],[11,"close","","",65,[[["self"]],["poll"]]],[11,"poll","","",65,[[["self"]],["poll",["option"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",66,N],[11,"poll_complete","","",66,[[["self"]],["poll"]]],[11,"close","","",66,[[["self"]],["poll"]]],[11,"poll","","",66,[[["self"]],["poll",["option"]]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,[[["self"]],["poll",["option"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"poll","","",67,[[["self"]],["poll",["option"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"poll","","",68,[[["self"]],["poll",["option"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,[[["self"]],["s"]]],[11,"start_send","","",69,N],[11,"poll_complete","","",69,[[["self"]],["poll"]]],[11,"close","","",69,[[["self"]],["poll"]]],[11,"poll","","",69,[[["self"]],["poll",["option"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,[[["self"]],["s"]]],[11,"start_send","","",70,N],[11,"poll_complete","","",70,[[["self"]],["poll"]]],[11,"close","","",70,[[["self"]],["poll"]]],[11,"poll","","",70,[[["self"]],["poll",["option"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,[[["self"]],["s"]]],[11,"start_send","","",71,N],[11,"poll_complete","","",71,[[["self"]],["poll"]]],[11,"close","","",71,[[["self"]],["poll"]]],[11,"poll","","",71,[[["self"]],["poll",["option"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,[[["self"]],["s"]]],[11,"start_send","","",72,N],[11,"poll_complete","","",72,[[["self"]],["poll"]]],[11,"close","","",72,[[["self"]],["poll"]]],[11,"poll","","",72,[[["self"]],["poll",["option"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",73,N],[11,"poll_complete","","",73,[[["self"]],["poll"]]],[11,"close","","",73,[[["self"]],["poll"]]],[11,"poll","","",73,[[["self"]],["poll",["option"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"poll","","",74,[[["self"]],["poll",["option"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"poll","","",75,[[["self"]],["poll",["option"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"poll","","",76,[[["self"]],["poll"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,[[["self"]],["s"]]],[11,"start_send","","",77,N],[11,"poll_complete","","",77,[[["self"]],["poll"]]],[11,"close","","",77,[[["self"]],["poll"]]],[11,"poll","","",77,[[["self"]],["poll",["option"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,[[["self"]],["s"]]],[11,"poll","","",78,[[["self"]],["poll",["option"]]]],[11,"start_send","","",78,N],[11,"poll_complete","","",78,[[["self"]],["poll"]]],[11,"close","","",78,[[["self"]],["poll"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"poll","","",79,[[["self"]],["poll",["option"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",80,N],[11,"poll_complete","","",80,[[["self"]],["poll"]]],[11,"close","","",80,[[["self"]],["poll"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,[[["self"]],["s"]]],[11,"poll","","",80,[[["self"]],["poll",["option"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"poll","","",81,[[["self"]],["poll",["vec"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,[[["self"]],["s"]]],[11,"next","","",82,[[["self"]],["option"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"poll","","",83,[[["self"]],["poll",["option"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["poll"]]],[11,"close","","",84,[[["self"]],["poll"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"description","","",40,[[["self"]],["str"]]],[0,"futures_unordered","","An unbounded set of futures.",N,N],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",85,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",85,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",85,[[["self"],["t"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,[[["self"]],["itermut"]]],[11,"poll","","",85,[[["self"]],["poll",["option"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"drop","","",85,[[["self"]]]],[11,"from_iter","","",85,[[["t"]],["self"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"next","","",86,[[["self"]],["option"]]],[11,"size_hint","","",86,N],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",87,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",87,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",87,[[["self"],["t"]]]],[11,"poll","","",87,[[["self"]],["poll",["option"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",87,[[["t"]],["self"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",88,N],[16,"Error","","The type of error this stream may generate.",88,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,[[["self"]],["poll",["option"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",88,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",88,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",88,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",88,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspecterr"]]],[0,"sink","futures","Asynchronous sinks",N,N],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",N,N],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[11,"clone","","",89,[[["self"]],["with"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"poll","","",89,[[["self"]],["poll",["option"]]]],[11,"get_ref","","Get a shared reference to the inner sink.",89,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,[[["self"]],["s"]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["poll"]]],[11,"close","","",89,[[["self"]],["poll"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",90,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,[[["self"]],["s"]]],[11,"poll","","",90,[[["self"]],["poll",["option"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["poll"]]],[11,"close","","",90,[[["self"]],["poll"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",91,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",91,[[["self"]],["s"]]],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,[[["self"]],["s"]]],[11,"poll","","",91,[[["self"]],["poll"]]],[11,"clone","","",92,[[["self"]],["sinkfromerr"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",92,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,[[["self"]],["s"]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["poll"]]],[11,"close","","",92,[[["self"]],["poll"]]],[11,"poll","","",92,[[["self"]],["poll",["option"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",93,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",93,[[["self"]],["s"]]],[11,"poll","","",93,[[["self"]],["poll"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"poll","","",94,[[["self"]],["poll"]]],[11,"clone","","",95,[[["self"]],["sinkmaperr"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",95,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,[[["self"]],["s"]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["poll"]]],[11,"close","","",95,[[["self"]],["poll"]]],[11,"poll","","",95,[[["self"]],["poll",["option"]]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,N],[11,"fmt","","",96,[[["self"],["formatter"]],["fmtresult"]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["poll"]]],[11,"close","","",96,[[["self"]],["poll"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",97,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",97,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,[[["self"]],["s"]]],[11,"poll","","",97,[[["self"]],["poll",["option"]]]],[11,"start_send","","",97,N],[11,"poll_complete","","",97,[[["self"]],["poll"]]],[11,"close","","",97,[[["self"]],["poll"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,N],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,[[["self"]],["result"]]],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,[[["self"]],["result"]]],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",N,N],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",99,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,N],[10,"start_send","","Begin the process of sending a value to the sink.",99,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,[[["self"]],["poll"]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,[[["self"]],["poll"]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",99,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",99,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",99,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",99,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,[[["self"],["s"]],["sendall"]]],[0,"task","futures","Tasks used to drive a future computation",N,N],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[5,"init","","Initialize the `futures` task system.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",100,[[["self"],["usize"]]]],[0,"executor","futures","Executors",N,N],[3,"Spawn","futures::executor","Representation of a spawned future/stream.",N,N],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",N,N],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",N,[[["t"],["usize"],["f"]],["r"]]],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",101,[[["self"],["usize"]]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",101,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",101,[[["self"],["usize"]]]],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",N,N],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",102,[[["self"]],["notifyhandle"]]],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",102,[[["self"]]]],[0,"sync","futures","Future-aware synchronization",N,N],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",N,N],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",N,N],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",N,N],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",N,N],[0,"oneshot","","A one-shot, futures-aware channel",N,N],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",104,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",104,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",104,[[["self"]],["bool"]]],[11,"drop","","",104,[[["self"]]]],[11,"clone","","",105,[[["self"]],["canceled"]]],[11,"eq","","",105,[[["self"],["canceled"]],["bool"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"description","","",105,[[["self"]],["str"]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",103,[[["self"]]]],[11,"poll","","",103,[[["self"]],["poll",["canceled"]]]],[11,"drop","","",103,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",106,[[["self"]]]],[11,"poll","","",106,[[["self"]],["poll"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"drop","","",106,[[["self"]]]],[11,"poll","","",107,[[["self"]],["poll"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"drop","","",107,[[["self"]]]],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",N,N],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",N,N],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"TrySendError","","Error type returned from `try_send`",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",N,N],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",112,[[["self"]],["senderror"]]],[11,"eq","","",112,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",112,[[["self"],["senderror"]],["bool"]]],[11,"clone","","",113,[[["self"]],["trysenderror"]]],[11,"eq","","",113,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",113,[[["self"],["trysenderror"]],["bool"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"description","","",112,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",112,[[["self"]],["t"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"description","","",113,[[["self"]],["str"]]],[11,"is_full","","Returns true if this error is a result of the channel being full",113,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",113,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",113,[[["self"]],["t"]]],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",108,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",108,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",108,[[["self"]],["bool"]]],[11,"start_send","","",108,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",108,[[["self"]],["poll",["senderror"]]]],[11,"close","","",108,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",109,[[["self"]],["bool"]]],[11,"unbounded_send","","Sends the provided message along this channel.",109,[[["self"],["t"]],["result",["senderror"]]]],[11,"start_send","","",109,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",109,[[["self"]],["poll",["senderror"]]]],[11,"close","","",109,[[["self"]],["poll",["senderror"]]]],[11,"clone","","",109,[[["self"]],["unboundedsender"]]],[11,"clone","","",108,[[["self"]],["sender"]]],[11,"drop","","",108,[[["self"]]]],[11,"close","","Closes the receiving half",110,[[["self"]]]],[11,"poll","","",110,[[["self"]],["poll",["option"]]]],[11,"drop","","",110,[[["self"]]]],[11,"close","","Closes the receiving half",111,[[["self"]]]],[11,"poll","","",111,[[["self"]],["poll",["option"]]]],[11,"poll","","",114,[[["self"]],["poll",["option"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"poll","","",115,[[["self"]],["poll"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync","",116,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `BiLock` protecting the provided data.",116,N],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",116,[[["self"]],["async",["bilockguard"]]]],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",116,[[["self"]],["bilockacquire"]]],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",116,[[["self"],["self"]],["result",["reuniteerror"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"deref","","",117,[[["self"]],["t"]]],[11,"deref_mut","","",117,[[["self"]],["t"]]],[11,"drop","","",117,[[["self"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"poll","","",118,[[["self"]],["poll",["bilockacquired"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",119,[[["self"]],["bilock"]]],[11,"deref","","",119,[[["self"]],["t"]]],[11,"deref_mut","","",119,[[["self"]],["t"]]],[11,"drop","","",119,[[["self"]]]],[0,"unsync","futures","Future-aware single-threaded synchronization",N,N],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",N,N],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",N,N],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"clone","","",120,[[["self"]],["self"]]],[11,"start_send","","",120,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",120,[[["self"]],["poll",["senderror"]]]],[11,"close","","",120,[[["self"]],["poll",["senderror"]]]],[11,"drop","","",120,[[["self"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",121,[[["self"]]]],[11,"poll","","",121,[[["self"]],["poll",["option"]]]],[11,"drop","","",121,[[["self"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["self"]]],[11,"start_send","","",122,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",122,[[["self"]],["poll",["senderror"]]]],[11,"close","","",122,[[["self"]],["poll",["senderror"]]]],[11,"unbounded_send","","Sends the provided message along this channel.",122,[[["self"],["t"]],["result",["senderror"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",123,[[["self"]]]],[11,"poll","","",123,[[["self"]],["poll",["option"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"description","","",124,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",124,[[["self"]],["t"]]],[11,"poll","","",125,[[["self"]],["poll",["option"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"poll","","",126,[[["self"]],["poll"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",N,N],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",127,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",127,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",127,[[["self"]],["bool"]]],[11,"drop","","",127,[[["self"]]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",128,[[["self"]]]],[11,"poll","","",128,[[["self"]],["poll"]]],[11,"drop","","",128,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",129,[[["self"]]]],[11,"poll","","",129,[[["self"]],["poll"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"poll","","",130,[[["self"]],["poll"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",N,N],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",N,N],[14,"task_local","","A macro to create a `static` of type `LocalKey`",N,N],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",131,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",131,[[["self"]]]],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",131,[[["self"],["task"]]]],[11,"notify","","Notifies the task that last called `register`.",131,[[["self"]]]],[11,"default","","",131,[[],["self"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",132,[[["self"],["f"]],["r"]]],[11,"wait_future","futures::executor","Waits for the internal future to complete, blocking this thread's execution until it does.",133,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",133,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",133,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",133,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",133,[[["self"]],["result"]]],[11,"clone","futures::task","",134,[[["self"]],["unparkevent"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",134,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"from","futures::executor","",135,[[["arc"]],["notifyhandle"]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",101,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",101,[[["self"],["usize"]]]],[11,"clone","futures::task","",136,[[["self"]],["task"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",136,[[["self"]]]],[11,"is_current","","Returns `true` when called from within the context of the task.",136,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",136,[[["self"]],["bool"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",133,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",133,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",133,[[["self"]],["t"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",133,[[["self"],["n"],["usize"]],["poll",["option"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",133,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructs a new `NotifyHandle` directly.",135,N],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",135,[[["self"],["usize"]]]],[11,"clone","","",135,[[["self"]],["self"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"drop","","",135,[[["self"]]]],[11,"from","","",135,[[["t"]],["notifyhandle"]]]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["fxhash"]={"doc":"Fx Hash","items":[[3,"FxHasher","fxhash","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.",N,N],[3,"FxHasher64","","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.",N,N],[3,"FxHasher32","","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.",N,N],[5,"hash64","","A convenience function for when you need a quick 64-bit hash.",N,[[["t"]],["u64"]]],[5,"hash32","","A convenience function for when you need a quick 32-bit hash.",N,[[["t"]],["u32"]]],[5,"hash","","A convenience function for when you need a quick usize hash.",N,[[["t"]],["usize"]]],[6,"FxBuildHasher","","A builder for default Fx hashers.",N,N],[6,"FxHashMap","","A `HashMap` using a default Fx hasher.",N,N],[6,"FxHashSet","","A `HashSet` using a default Fx hasher.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["fxhasher"]]],[11,"default","","",0,[[],["fxhasher"]]],[11,"write","","",0,N],[11,"write_u8","","",0,[[["self"],["u8"]]]],[11,"write_u16","","",0,[[["self"],["u16"]]]],[11,"write_u32","","",0,[[["self"],["u32"]]]],[11,"write_u64","","",0,[[["self"],["u64"]]]],[11,"write_usize","","",0,[[["self"],["usize"]]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["fxhasher64"]]],[11,"default","","",1,[[],["fxhasher64"]]],[11,"write","","",1,N],[11,"write_u8","","",1,[[["self"],["u8"]]]],[11,"write_u16","","",1,[[["self"],["u16"]]]],[11,"write_u32","","",1,[[["self"],["u32"]]]],[11,"write_u64","","",1,[[["self"],["u64"]]]],[11,"write_usize","","",1,[[["self"],["usize"]]]],[11,"finish","","",1,[[["self"]],["u64"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["fxhasher32"]]],[11,"default","","",2,[[],["fxhasher32"]]],[11,"write","","",2,N],[11,"write_u8","","",2,[[["self"],["u8"]]]],[11,"write_u16","","",2,[[["self"],["u16"]]]],[11,"write_u32","","",2,[[["self"],["u32"]]]],[11,"write_u64","","",2,[[["self"],["u64"]]]],[11,"write_usize","","",2,[[["self"],["usize"]]]],[11,"finish","","",2,[[["self"]],["u64"]]]],"paths":[[3,"FxHasher"],[3,"FxHasher64"],[3,"FxHasher32"]]};
searchIndex["genmesh"]={"doc":"`Genmesh`'s is a library that offers ways to generate and manipulate vertex streams.","items":[[3,"Line","genmesh","Represents a line",N,N],[12,"x","","the first point",0,N],[12,"y","","The second point",0,N],[3,"Quad","","A polygon with 4 points. Maps to `GL_QUADS`",N,N],[12,"x","","the first point of a quad",1,N],[12,"y","","the second point of a quad",1,N],[12,"z","","the third point of a quad",1,N],[12,"w","","the fourth point of a quad",1,N],[3,"Triangle","","A polygon with 3 points. Maps to `GL_TRIANGLE`",N,N],[12,"x","","the first point of a triangle",2,N],[12,"y","","the second point of a triangle",2,N],[12,"z","","the third point of a triangle",2,N],[3,"VerticesIterator","","an iterator that breaks a polygon down into its individual verticies.",N,N],[3,"TriangulateIterator","","Used to iterator of polygons into a iterator of triangles",N,N],[3,"LruIndexer","","An `LruIndexer` is useful for creating indexed steam from a stream of vertices. Each vertex that is index is only compared against the vetices contained in the cache. If a vertex is not found the LruIndexer will `emit` a new vertex and return the index of that new vertex.",N,N],[3,"Neighbors","","Neighbors search accelerating structure.",N,N],[12,"vertices","","Mesh vertices.",3,N],[12,"polygons","","Mesh polygons.",3,N],[3,"Vertex","","Common vertex type.",N,N],[12,"pos","","Vertex position",4,N],[12,"normal","","Vertex normal",4,N],[4,"Polygon","","This is All-the-types container. This exists since some generators produce both `Triangles` and `Quads`.",N,N],[13,"PolyTri","","A wraped triangle",5,N],[13,"PolyQuad","","A wraped quad",5,N],[11,"new","","create a new `LruIndexer`, the window size is limited by the `size` parameter it is recommended to keep this small since lookup is done in N time",6,[[["usize"],["f"]],["lruindexer"]]],[11,"index","","",6,[[["self"],["t"]],["usize"]]],[11,"new","","Build a Neighbors search based on the supplied vertices and supplied triangle list.",3,[[["vec"],["vec",["triangle"]]],["self"]]],[11,"split","","return the vector and triangle list used to create the Neighbors",3,N],[11,"vertex_neighbors","","looks up the index of every polygon that contains vertex t, this can be used to calculate new faces",3,[[["self"],["usize"]],["option"]]],[11,"polygon_neighbors","","looks up the index of every polygon that is a neighbor of polygon at index i. This can be used to prep data for a Geometry shader (eg trinagle_adjacency)",3,[[["self"],["usize"]],["option",["hashset"]]]],[11,"normal_for_face","","Calculate the normal for face. This is a `flat` shading",3,[[["self"],["usize"],["f"]],["normal"]]],[11,"normal_for_vertex","","Calculate the normal for an vertex based on the average of it's Neighbors this is a `smooth` shading",3,[[["self"],["usize"],["f"]],["normal"]]],[11,"clone","","",1,[[["self"]],["quad"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["quad"]],["bool"]]],[11,"ne","","",1,[[["self"],["quad"]],["bool"]]],[11,"new","","create a new `Quad` with supplied vertices",1,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"clone","","",2,[[["self"]],["triangle"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["triangle"]],["bool"]]],[11,"ne","","",2,[[["self"],["triangle"]],["bool"]]],[11,"new","","create a new `Triangle` with supplied vertcies",2,[[["t"],["t"],["t"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["polygon"]]],[11,"eq","","",5,[[["self"],["polygon"]],["bool"]]],[11,"ne","","",5,[[["self"],["polygon"]],["bool"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"map_vertex","","",0,[[["self"],["f"]],["line"]]],[11,"map_vertex","","",2,[[["self"],["f"]],["triangle"]]],[11,"map_vertex","","",1,[[["self"],["f"]],["quad"]]],[11,"map_vertex","","",5,[[["self"],["f"]],["polygon"]]],[11,"clone","","",0,[[["self"]],["line"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["line"]],["bool"]]],[11,"ne","","",0,[[["self"],["line"]],["bool"]]],[11,"hash","","",0,N],[11,"new","","Create a new line using point x and y",0,[[["t"],["t"]],["self"]]],[11,"emit_lines","","",2,[[["self"],["e"]]]],[11,"emit_lines","","",1,[[["self"],["e"]]]],[11,"emit_lines","","",5,[[["self"],["e"]]]],[11,"emit_triangles","","",1,[[["self"],["f"]]]],[11,"emit_triangles","","",2,[[["self"],["f"]]]],[11,"emit_triangles","","",5,[[["self"],["f"]]]],[11,"size_hint","","",8,N],[11,"next","","",8,[[["self"]],["option"]]],[0,"generators","","A collection of utilties that can be used to build meshes programmatically.",N,N],[3,"Circle","genmesh::generators","Represents a circle in the XY plane with radius of 1, centered at (0, 0, 0)",N,N],[3,"Cone","","The `Cone` mesh will create a mesh that is from 1 to -1 The bottom will be a circle around [0, 0, -1] with a radius of 1, all coords on the bottom will follow the plan equation `-z-1=0` The tip of the cone will always be at coord [0, 0, 1]",N,N],[3,"Cube","","A perfect cube, centered at (0, 0, 0) with each face starting at 1/-1 away from the origin",N,N],[3,"Cylinder","","Represents a cylinder with radius of 1, height of 2, and centered at (0, 0, 0) pointing up (to 0, 0, 1).",N,N],[3,"IndexedPolygonIterator","","An iterator that yields the indices of the mesh",N,N],[3,"SharedVertexIterator","","An iterator that yields the shared vertices of the mesh",N,N],[3,"IcoSphere","","Icosahedral sphere with radius 1, centered at (0., 0., 0.)",N,N],[3,"Plane","","Represents a 2D plane with origin of (0, 0), from 1 to -1",N,N],[3,"SphereUv","","Represents a sphere with radius of 1, centered at (0, 0, 0)",N,N],[3,"Torus","","",N,N],[8,"IndexedPolygon","","The `IndexedPolygon` trait is used with the `SharedVertex` trait in order to build a mesh. `IndexedPolygon` calculates each polygon face required to build an implementors mesh. each face is always returned in indexed form that points to the correct vertice supplied by the `SharedVertex` trait.",N,N],[10,"indexed_polygon","","return a polygon with indices to the shared vertex",9,[[["self"],["usize"]],["v"]]],[10,"indexed_polygon_count","","return the number of polygons that are needed to represent this mesh",9,[[["self"]],["usize"]]],[11,"indexed_polygon_iter","","create a iterator that will return a polygon for each face in the source mesh",9,[[["self"]],["indexedpolygoniterator"]]],[8,"SharedVertex","","The `SharedVertex` trait is meant to be used with the `IndexedPolygon` trait. This trait is meant as a way to calculate the shared vertices that are required to build the implementors mesh.",N,N],[10,"shared_vertex","","return the shared vertex at offset `i`",10,[[["self"],["usize"]],["v"]]],[10,"shared_vertex_count","","return the number of shared vertices required to represent the mesh",10,[[["self"]],["usize"]]],[11,"shared_vertex_iter","","create an iterator that returns each shared vertex that is required to build the mesh.",10,[[["self"]],["sharedvertexiterator"]]],[6,"Position","genmesh","Common vertex position type.",N,N],[6,"Normal","","Common vertex normal type.",N,N],[8,"EmitLines","","Convert a Polygon into it's fragments",N,N],[16,"Vertex","","The Vertex defines the corners of a Polygon",11,N],[10,"emit_lines","","convert a polygon into lines, each line is emitted via calling of the callback of `emit` This allow for a variable amount of lines to be returned",11,[[["self"],["e"]]]],[8,"Lines","","Creates an LinesIterator from another Iterator",N,N],[16,"Vertex","","The type of each point in the lines",12,N],[10,"lines","","Convert the iterator into a LinesIterator",12,[[["self"]],["linesiterator"]]],[8,"MapToVertices","","This acts very similar to a vertex shader. It gives a way to manipulate and modify the vertices in a polygon. This is useful if you need to scale the mesh using a matrix multiply, or just for modifying the type of each vertex.",N,N],[16,"Output","","`Output` should be a a container of the same shape of the type It's internal values should reflect any transformation the map did.",13,N],[10,"vertex","","from a iterator of polygons, produces a iterator of polygons. Each vertex in the process is modified with the suppled function.",13,[[["self"],["f"]],["maptoverticesiter"]]],[8,"MapVertex","","equivalent of `map` but per-vertex",N,N],[16,"Output","","`Output` should be a a container of the same shape of the type It's internal values should reflect any transformation the map did.",14,N],[10,"map_vertex","","map a function to each vertex in polygon creating a new polygon",14,N],[8,"Vertices","","Supplies a way to convert an iterator of polygons to an iterator of vertices. Useful for when you need to write the vertices into a graphics pipeline.",N,N],[10,"vertices","","Convert a polygon iterator to a vertices iterator.",15,[[["self"]],["verticesiterator"]]],[8,"EmitTriangles","","provides a way to convert a polygon down to triangles",N,N],[16,"Vertex","","The content of each point in the face",16,N],[10,"emit_triangles","","convert a polygon to one or more triangles, each triangle is returned by calling `emit`",16,[[["self"],["f"]]]],[8,"Triangulate","","`Triangluate` is a easy to to convert any Polygon stream to a stream of triangles. This is useful since Quads and other geometry are not supported by modern graphics pipelines like OpenGL.",N,N],[10,"triangulate","","convert a stream of Polygons to a stream of triangles",17,[[["self"]],["triangulateiterator"]]],[8,"Indexer","","A trait defining how to defined an Indexer. An indexer is a object that collects verticies and emits indexes for the vertex. The intent is that an Indexer can find redundent vertexes and deduplicate them by returning aliased indexes.",N,N],[10,"index","","convert a vertex into an index.",18,[[["self"],["t"]],["usize"]]],[11,"clone","","",4,[[["self"]],["vertex"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["vertex"]],["bool"]]],[11,"ne","","",4,[[["self"],["vertex"]],["bool"]]],[11,"shared_vertex_iter","genmesh::generators","create an iterator that returns each shared vertex that is required to build the mesh.",10,[[["self"]],["sharedvertexiterator"]]],[11,"indexed_polygon_iter","","create a iterator that will return a polygon for each face in the source mesh",9,[[["self"]],["indexedpolygoniterator"]]],[11,"size_hint","","",19,N],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"next","","",20,[[["self"]],["option"]]],[11,"clone","","",21,[[["self"]],["circle"]]],[11,"new","","Create a new sphere. `u` is the number of points around the circle, must be > 3",21,[[["usize"]],["self"]]],[11,"size_hint","","",21,N],[11,"next","","",21,[[["self"]],["option"]]],[11,"shared_vertex","","",21,[[["self"],["usize"]],["vertex"]]],[11,"shared_vertex_count","","",21,[[["self"]],["usize"]]],[11,"indexed_polygon","","",21,[[["self"],["usize"]],["polygon",["usize"]]]],[11,"indexed_polygon_count","","",21,[[["self"]],["usize"]]],[11,"new","","Creates a new `Cone` `u` is the number of subdivisions around the radius of the cone it must be greater then 1.",22,[[["usize"]],["self"]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"shared_vertex","","",22,[[["self"],["usize"]],["vertex"]]],[11,"shared_vertex_count","","",22,[[["self"]],["usize"]]],[11,"indexed_polygon","","",22,[[["self"],["usize"]],["triangle",["usize"]]]],[11,"indexed_polygon_count","","",22,[[["self"]],["usize"]]],[11,"clone","","",23,[[["self"]],["cube"]]],[11,"new","","create a new cube generator",23,[[],["self"]]],[11,"next","","",23,[[["self"]],["option",["quad"]]]],[11,"size_hint","","",23,N],[11,"shared_vertex","","",23,[[["self"],["usize"]],["vertex"]]],[11,"shared_vertex_count","","",23,[[["self"]],["usize"]]],[11,"indexed_polygon","","",23,[[["self"],["usize"]],["quad",["usize"]]]],[11,"indexed_polygon_count","","",23,[[["self"]],["usize"]]],[11,"clone","","",24,[[["self"]],["cylinder"]]],[11,"new","","Create a new cylinder. `u` is the number of points across the radius.",24,[[["usize"]],["self"]]],[11,"subdivide","","Create a new subdivided cylinder. `u` is the number of points across the radius. `h` is the number of segments across the height.",24,[[["usize"],["usize"]],["self"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"shared_vertex","","",24,[[["self"],["usize"]],["vertex"]]],[11,"shared_vertex_count","","",24,[[["self"]],["usize"]]],[11,"indexed_polygon","","",24,[[["self"],["usize"]],["polygon",["usize"]]]],[11,"indexed_polygon_count","","",24,[[["self"]],["usize"]]],[11,"clone","","",25,[[["self"]],["icosphere"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a unit sphere with 20 faces and 12 vertices.",25,[[],["self"]]],[11,"subdivide","","Create a unit sphere with subdivision, resulting in 20 * 4^N faces, where N is the number of subdivisions.",25,[[["usize"]],["self"]]],[11,"size_hint","","",25,N],[11,"next","","",25,[[["self"]],["option"]]],[11,"shared_vertex_count","","",25,[[["self"]],["usize"]]],[11,"shared_vertex","","",25,[[["self"],["usize"]],["vertex"]]],[11,"indexed_polygon_count","","",25,[[["self"]],["usize"]]],[11,"indexed_polygon","","",25,[[["self"],["usize"]],["triangle",["usize"]]]],[11,"clone","","",26,[[["self"]],["plane"]]],[11,"new","","create a new cube generator",26,[[],["plane"]]],[11,"subdivide","","create a subdivided plane. This can be used to build a grid of points. `x` is the number of subdivisions in the x axis `y` is the number of subdivisions in the y axis",26,[[["usize"],["usize"]],["plane"]]],[11,"next","","",26,[[["self"]],["option",["quad"]]]],[11,"size_hint","","",26,N],[11,"shared_vertex","","",26,[[["self"],["usize"]],["vertex"]]],[11,"shared_vertex_count","","",26,[[["self"]],["usize"]]],[11,"indexed_polygon","","",26,[[["self"],["usize"]],["quad",["usize"]]]],[11,"indexed_polygon_count","","",26,[[["self"]],["usize"]]],[11,"clone","","",27,[[["self"]],["sphereuv"]]],[11,"new","","Create a new sphere. `u` is the number of points across the equator of the sphere. `v` is the number of points from pole to pole.",27,[[["usize"],["usize"]],["self"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"shared_vertex","","",27,[[["self"],["usize"]],["vertex"]]],[11,"shared_vertex_count","","",27,[[["self"]],["usize"]]],[11,"indexed_polygon","","",27,[[["self"],["usize"]],["polygon",["usize"]]]],[11,"indexed_polygon_count","","",27,[[["self"]],["usize"]]],[11,"clone","","",28,[[["self"]],["torus"]]],[11,"new","","Create a new Torus Generator. `radius` is the radius from the center [0, 0, 0] to the center          of the the tubular radius `tubular_radius` is the radius to the surface from the toridal `tubular_segments` the number of segments that wrap around the tube, must be at least 3 `radial_segments` the number of tube segments requested to generate, must be at least 3",28,[[["f32"],["f32"],["usize"],["usize"]],["self"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"shared_vertex","","",28,[[["self"],["usize"]],["vertex"]]],[11,"shared_vertex_count","","",28,[[["self"]],["usize"]]],[11,"indexed_polygon","","",28,[[["self"],["usize"]],["quad",["usize"]]]],[11,"indexed_polygon_count","","",28,[[["self"]],["usize"]]]],"paths":[[3,"Line"],[3,"Quad"],[3,"Triangle"],[3,"Neighbors"],[3,"Vertex"],[4,"Polygon"],[3,"LruIndexer"],[3,"VerticesIterator"],[3,"TriangulateIterator"],[8,"IndexedPolygon"],[8,"SharedVertex"],[8,"EmitLines"],[8,"Lines"],[8,"MapToVertices"],[8,"MapVertex"],[8,"Vertices"],[8,"EmitTriangles"],[8,"Triangulate"],[8,"Indexer"],[3,"SharedVertexIterator"],[3,"IndexedPolygonIterator"],[3,"Circle"],[3,"Cone"],[3,"Cube"],[3,"Cylinder"],[3,"IcoSphere"],[3,"Plane"],[3,"SphereUv"],[3,"Torus"]]};
searchIndex["getopts"]={"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",N,N],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",N,N],[12,"free","","Free string fragments",0,N],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",N,N],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,N],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,N],[4,"HasArg","","Describes whether an option has an argument.",N,N],[13,"Yes","","The option requires an argument.",2,N],[13,"No","","The option takes no argument.",2,N],[13,"Maybe","","The option argument is optional.",2,N],[4,"Occur","","Describes how often an option may occur.",N,N],[13,"Req","","The option occurs once.",3,N],[13,"Optional","","The option occurs at most once.",3,N],[13,"Multi","","The option occurs zero or more times.",3,N],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",N,N],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,N],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,N],[13,"OptionMissing","","A required option is not present.",4,N],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,N],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,N],[6,"Result","","The result of parsing a command line with a set of options.",N,N],[11,"new","","Create a blank set of options.",5,[[],["options"]]],[11,"parsing_style","","Set the parsing style.",5,[[["self"],["parsingstyle"]],["options"]]],[11,"long_only","","Set or clear \"long options only\" mode.",5,[[["self"],["bool"]],["options"]]],[11,"opt","","Create a generic option group, stating all parameters explicitly.",5,[[["self"],["str"],["str"],["str"],["str"],["hasarg"],["occur"]],["options"]]],[11,"optflag","","Create a long option that is optional and does not take an argument.",5,[[["self"],["str"],["str"],["str"]],["options"]]],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",5,[[["self"],["str"],["str"],["str"]],["options"]]],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5,[[["self"],["str"],["str"],["str"],["str"]],["options"]]],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",5,[[["self"],["str"],["str"],["str"],["str"]],["options"]]],[11,"optopt","","Create a long option that is optional and takes an argument.",5,[[["self"],["str"],["str"],["str"],["str"]],["options"]]],[11,"reqopt","","Create a long option that is required and takes an argument.",5,[[["self"],["str"],["str"],["str"],["str"]],["options"]]],[11,"parse","","Parse command line arguments according to the provided options.",5,[[["self"],["c"]],["result"]]],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5,[[["self"],["str"]],["string"]]],[11,"usage","","Derive a formatted message from a set of options.",5,[[["self"],["str"]],["string"]]],[11,"usage_with_format","","Derive a custom formatted message from a set of options. The formatted options provided to a closure as an iterator.",5,[[["self"],["f"]],["string"]]],[11,"clone","","",1,[[["self"]],["parsingstyle"]]],[11,"eq","","",1,[[["self"],["parsingstyle"]],["bool"]]],[11,"clone","","",2,[[["self"]],["hasarg"]]],[11,"eq","","",2,[[["self"],["hasarg"]],["bool"]]],[11,"clone","","",3,[[["self"]],["occur"]]],[11,"eq","","",3,[[["self"],["occur"]],["bool"]]],[11,"clone","","",0,[[["self"]],["matches"]]],[11,"eq","","",0,[[["self"],["matches"]],["bool"]]],[11,"ne","","",0,[[["self"],["matches"]],["bool"]]],[11,"clone","","",4,[[["self"]],["fail"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["fail"]],["bool"]]],[11,"ne","","",4,[[["self"],["fail"]],["bool"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"opt_defined","","Returns true if an option was defined",0,[[["self"],["str"]],["bool"]]],[11,"opt_present","","Returns true if an option was matched.",0,[[["self"],["str"]],["bool"]]],[11,"opt_count","","Returns the number of times an option was matched.",0,[[["self"],["str"]],["usize"]]],[11,"opts_present","","Returns true if any of several options were matched.",0,N],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,N],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,[[["self"],["str"]],["vec",["string"]]]],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,[[["self"],["str"]],["option",["string"]]]],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,[[["self"],["str"],["str"]],["option",["string"]]]],[11,"opt_get","","Returns some matching value or `None`.",0,[[["self"],["str"]],["result",["option"]]]],[11,"opt_get_default","","Returns a matching value or default.",0,[[["self"],["str"],["t"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
searchIndex["gfx"]={"doc":"gfx","items":[[0,"preset","gfx","State presets",N,N],[0,"blend","gfx::preset","Blending preset modes.",N,N],[17,"REPLACE","gfx::preset::blend","When combining two fragments, choose the source value",N,N],[17,"ADD","","When combining two fragments, add their values together, saturating at 1.0",N,N],[17,"MULTIPLY","","When combining two fragments, multiply their values together.",N,N],[17,"ALPHA","","When combining two fragments, add the value of the source times its alpha channel with the value of the destination multiplied by the inverse of the source alpha channel. Has the usual transparency effect: mixes the two colors using a fraction of each one specified by the alpha of the source.",N,N],[17,"INVERT","","When combining two fragments, subtract the destination color from a constant color using the source color as weight. Has an invert effect with the constant color as base and source color controlling displacement from the base color. A white source color and a white value results in plain invert. The output alpha is same as destination alpha.",N,N],[0,"depth","gfx::preset","Depth presets for depth tests.",N,N],[17,"PASS_TEST","gfx::preset::depth","When rendering a fragment, draw regardless of depth buffer state. Rendering will not update the depth buffer.",N,N],[17,"PASS_WRITE","","When rendering a fragment, draw regardless of depth buffer state. Rendering will update the depth buffer.",N,N],[17,"LESS_EQUAL_TEST","","\"<=\" comparison with read-only depth",N,N],[17,"LESS_EQUAL_WRITE","","When rendering a fragment, only draw when the fragment's output depth is less than or equal to the current depth buffer value. Rendering will update the depth buffer with the new depth value.",N,N],[0,"state","gfx","Fixed-function hardware state.",N,N],[4,"FrontFace","gfx::state","The front face winding order of a set of vertices.",N,N],[13,"Clockwise","","Clockwise winding order.",0,N],[13,"CounterClockwise","","Counter-clockwise winding order.",0,N],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",N,N],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",N,N],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",N,N],[3,"Offset","","How to offset vertices in screen space, if at all.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[4,"CullFace","","Which face, if any, to cull.",N,N],[13,"Nothing","","",2,N],[13,"Front","","",2,N],[13,"Back","","",2,N],[4,"RasterMethod","","How to rasterize a primitive.",N,N],[13,"Point","","Rasterize as a point.",3,N],[13,"Line","","Rasterize as a line with the given width.",3,N],[13,"Fill","","Rasterize as a face.",3,N],[3,"MultiSample","","Multi-sampling rasterization mode",N,N],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",N,N],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,N],[12,"cull_face","","Which face should be culled.",4,N],[12,"method","","How to rasterize this primitive.",4,N],[12,"offset","","Any polygon offset to apply.",4,N],[12,"samples","","Multi-sampling mode.",4,N],[4,"Comparison","","A pixel-wise comparison function.",N,N],[13,"Never","","`false`",5,N],[13,"Less","","`x < y`",5,N],[13,"LessEqual","","`x <= y`",5,N],[13,"Equal","","`x == y`",5,N],[13,"GreaterEqual","","`x >= y`",5,N],[13,"Greater","","`x > y`",5,N],[13,"NotEqual","","`x != y`",5,N],[13,"Always","","`true`",5,N],[4,"StencilOp","","Stencil mask operation.",N,N],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,N],[13,"Zero","","Set the value in the stencil buffer to zero.",6,N],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,N],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,N],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,N],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,N],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,N],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,N],[3,"StencilSide","","Complete stencil state for a given side of a face.",N,N],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,N],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,N],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,N],[12,"op_fail","","What operation to do if the stencil test fails.",7,N],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,N],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,N],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",N,N],[12,"front","","",8,N],[12,"back","","",8,N],[3,"Depth","","Depth test state.",N,N],[12,"fun","","Comparison function to use.",9,N],[12,"write","","Specify whether to write to the depth buffer or not.",9,N],[4,"Equation","","",N,N],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,N],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,N],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,N],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,N],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,N],[4,"BlendValue","","",N,N],[13,"SourceColor","","",11,N],[13,"SourceAlpha","","",11,N],[13,"DestColor","","",11,N],[13,"DestAlpha","","",11,N],[13,"ConstColor","","",11,N],[13,"ConstAlpha","","",11,N],[4,"Factor","","",N,N],[13,"Zero","","",12,N],[13,"One","","",12,N],[13,"SourceAlphaSaturated","","",12,N],[13,"ZeroPlus","","",12,N],[13,"OneMinus","","",12,N],[3,"BlendChannel","","",N,N],[12,"equation","","",13,N],[12,"source","","",13,N],[12,"destination","","",13,N],[3,"Blend","","",N,N],[12,"color","","",14,N],[12,"alpha","","",14,N],[3,"ColorMask","","",N,N],[3,"Color","","The state of an active color render target",N,N],[12,"mask","","Color mask to use.",15,N],[12,"blend","","Optional blending.",15,N],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",N,N],[12,"stencil","","Stencil front and back values.",16,N],[12,"blend","","Constant blend color.",16,N],[6,"Layer","gfx","A depth value, specifying which plane to select out of a 3D texture.",N,N],[6,"Level","","Mipmap level to select in a texture.",N,N],[6,"Depth","","A single depth value from a depth buffer.",N,N],[6,"Stencil","","A single value from a stencil stencstencil buffer.",N,N],[3,"Rect","","A screen space rectangle",N,N],[12,"x","","",17,N],[12,"y","","",17,N],[12,"w","","",17,N],[12,"h","","",17,N],[6,"ColorValue","","A color with floating-point components.",N,N],[3,"Mirror","","Mirroring flags, used for blitting",N,N],[8,"Device","","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",N,N],[16,"Resources","","Associated `Resources` type.",18,N],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",18,N],[10,"get_capabilities","","Returns the capabilities of this `Device`.",18,[[["self"]],["capabilities"]]],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",18,N],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",18,N],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",18,N],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",18,N],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",18,N],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",N,N],[13,"PointList","","Each vertex represents a single point.",19,N],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",19,N],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",19,N],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",19,N],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",19,N],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",19,N],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",19,N],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",19,N],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",19,N],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",19,N],[8,"Resources","","Different types of a specific API.",N,N],[16,"Buffer","","",20,N],[16,"Shader","","",20,N],[16,"Program","","",20,N],[16,"PipelineStateObject","","",20,N],[16,"Texture","","",20,N],[16,"ShaderResourceView","","",20,N],[16,"UnorderedAccessView","","",20,N],[16,"RenderTargetView","","",20,N],[16,"DepthStencilView","","",20,N],[16,"Sampler","","",20,N],[16,"Fence","","",20,N],[16,"Mapping","","",20,N],[4,"SubmissionError","","",N,N],[13,"AccessOverlap","","",21,N],[6,"SubmissionResult","","",N,N],[6,"VertexCount","","Draw vertex count.",N,N],[6,"InstanceCount","","Draw number of instances",N,N],[4,"ShaderSet","","A complete set of shaders to link a program.",N,N],[13,"Simple","","Simple program: Vs-Ps",22,N],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",22,N],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",22,N],[3,"VertexShader","","",N,N],[3,"HullShader","","",N,N],[3,"DomainShader","","",N,N],[3,"GeometryShader","","",N,N],[3,"PixelShader","","",N,N],[0,"buffer","","Memory buffers",N,N],[3,"Raw","gfx::buffer","Untyped buffer",N,N],[4,"Role","","Role of the memory buffer.",N,N],[13,"Vertex","","Generic vertex buffer",23,N],[13,"Index","","Index buffer",23,N],[13,"Constant","","Constant buffer",23,N],[13,"Staging","","Staging buffer",23,N],[3,"Info","","An information block that is immutable and associated to each buffer.",N,N],[12,"role","","Role",24,N],[12,"usage","","Usage hint",24,N],[12,"bind","","Bind flags",24,N],[12,"size","","Size in bytes",24,N],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",24,N],[4,"CreationError","","Error creating a buffer.",N,N],[13,"UnsupportedBind","","Some of the bind flags are not supported.",25,N],[13,"Other","","Unknown other error.",25,N],[13,"UnsupportedUsage","","Usage mode is not supported",25,N],[0,"format","gfx","Universal format specification. Applicable to textures, views, and vertex buffers.",N,N],[4,"ChannelType","gfx::format","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",N,N],[13,"Int","","",26,N],[13,"Uint","","",26,N],[13,"Inorm","","",26,N],[13,"Unorm","","",26,N],[13,"Float","","",26,N],[13,"Srgb","","",26,N],[4,"Int","","",N,N],[4,"Uint","","",N,N],[4,"Inorm","","",N,N],[4,"Unorm","","",N,N],[4,"Float","","",N,N],[4,"Srgb","","",N,N],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",N,N],[13,"R4_G4","","",27,N],[13,"R4_G4_B4_A4","","",27,N],[13,"R5_G5_B5_A1","","",27,N],[13,"R5_G6_B5","","",27,N],[13,"R8","","",27,N],[13,"R8_G8","","",27,N],[13,"R8_G8_B8_A8","","",27,N],[13,"R10_G10_B10_A2","","",27,N],[13,"R11_G11_B10","","",27,N],[13,"R16","","",27,N],[13,"R16_G16","","",27,N],[13,"R16_G16_B16","","",27,N],[13,"R16_G16_B16_A16","","",27,N],[13,"R32","","",27,N],[13,"R32_G32","","",27,N],[13,"R32_G32_B32","","",27,N],[13,"R32_G32_B32_A32","","",27,N],[13,"B8_G8_R8_A8","","",27,N],[13,"D16","","",27,N],[13,"D24","","",27,N],[13,"D24_S8","","",27,N],[13,"D32","","",27,N],[4,"R4_G4","","",N,N],[4,"R4_G4_B4_A4","","",N,N],[4,"R5_G5_B5_A1","","",N,N],[4,"R5_G6_B5","","",N,N],[4,"R8","","",N,N],[4,"R8_G8","","",N,N],[4,"R8_G8_B8_A8","","",N,N],[4,"R10_G10_B10_A2","","",N,N],[4,"R11_G11_B10","","",N,N],[4,"R16","","",N,N],[4,"R16_G16","","",N,N],[4,"R16_G16_B16","","",N,N],[4,"R16_G16_B16_A16","","",N,N],[4,"R32","","",N,N],[4,"R32_G32","","",N,N],[4,"R32_G32_B32","","",N,N],[4,"R32_G32_B32_A32","","",N,N],[4,"B8_G8_R8_A8","","",N,N],[4,"D16","","",N,N],[4,"D24","","",N,N],[4,"D24_S8","","",N,N],[4,"D32","","",N,N],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",N,N],[13,"Zero","","",28,N],[13,"One","","",28,N],[13,"X","","",28,N],[13,"Y","","",28,N],[13,"Z","","",28,N],[13,"W","","",28,N],[3,"Swizzle","","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",N,N],[12,"0","","",29,N],[12,"1","","",29,N],[12,"2","","",29,N],[12,"3","","",29,N],[3,"Format","","Complete run-time surface format.",N,N],[12,"0","","",30,N],[12,"1","","",30,N],[8,"SurfaceTyped","","Compile-time surface type trait.",N,N],[16,"DataType","","The corresponding data type to be passed from CPU.",31,N],[10,"get_surface_type","","Return the run-time value of the type.",31,[[],["surfacetype"]]],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",N,N],[8,"TextureSurface","","An ability of a surface type to be used for textures.",N,N],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",N,N],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",N,N],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",N,N],[8,"ChannelTyped","","Compile-time channel type trait.",N,N],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",32,N],[10,"get_channel_type","","Return the run-time value of the type.",32,[[],["channeltype"]]],[8,"TextureChannel","","An ability of a channel type to be used for textures.",N,N],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",N,N],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",N,N],[8,"Formatted","","Compile-time full format trait.",N,N],[16,"Surface","","Associated surface type.",33,N],[16,"Channel","","Associated channel type.",33,N],[16,"View","","Shader view type of this format.",33,N],[11,"get_format","","Return the run-time value of the type.",33,[[],["format"]]],[8,"BufferFormat","","Ability to be used for vertex buffers.",N,N],[8,"DepthFormat","","Ability to be used for depth targets.",N,N],[8,"StencilFormat","","Ability to be used for vertex buffers.",N,N],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",N,N],[8,"TextureFormat","","Ability to be used for textures.",N,N],[8,"RenderFormat","","Ability to be used for render targets.",N,N],[8,"BlendFormat","","Ability to be used for blended render targets.",N,N],[3,"U8Norm","","",N,N],[12,"0","","",34,N],[3,"I8Norm","","",N,N],[12,"0","","",35,N],[3,"U16Norm","","",N,N],[12,"0","","",36,N],[3,"I16Norm","","",N,N],[12,"0","","",37,N],[3,"F16","","",N,N],[12,"0","","",38,N],[6,"Vec1","","Abstracted 1-element container for macro internal use",N,N],[6,"Vec2","","Abstracted 2-element container for macro internal use",N,N],[6,"Vec3","","Abstracted 3-element container for macro internal use",N,N],[6,"Vec4","","Abstracted 4-element container for macro internal use",N,N],[6,"Rgba8","","Standard 8bits RGBA format.",N,N],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",N,N],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",N,N],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",N,N],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",N,N],[6,"Bgra8","","Standard 8bits BGRA format.",N,N],[6,"Depth","","Standard 24-bit depth format.",N,N],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",N,N],[6,"Depth32F","","Standard 32-bit floating-point depth format.",N,N],[0,"handle","gfx","Resource handles",N,N],[3,"RawBuffer","gfx::handle","Untyped buffer handle",N,N],[3,"Buffer","","Type-safe buffer handle",N,N],[3,"Shader","","Shader Handle",N,N],[3,"Program","","Program Handle",N,N],[3,"RawPipelineState","","Raw Pipeline State Handle",N,N],[3,"RawTexture","","Raw texture handle",N,N],[3,"Texture","","Typed texture object",N,N],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",N,N],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",N,N],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",N,N],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",N,N],[3,"RawRenderTargetView","","Raw RTV",N,N],[3,"RawDepthStencilView","","Raw DSV",N,N],[3,"RenderTargetView","","Typed RTV",N,N],[3,"DepthStencilView","","Typed DSV",N,N],[3,"Sampler","","Sampler Handle",N,N],[3,"Fence","","Fence Handle",N,N],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",N,N],[0,"mapping","gfx","Memory mapping",N,N],[4,"Error","gfx::mapping","Error accessing a mapping.",N,N],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",39,N],[13,"AccessOverlap","","The requested mapping access overlaps with another.",39,N],[3,"Reader","","Mapping reader",N,N],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",N,N],[0,"memory","gfx","Types to describe the properties of memory allocated for gfx resources.",N,N],[4,"Usage","gfx::memory","How this memory will be used regarding GPU-CPU data flow.",N,N],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",40,N],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",40,N],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",40,N],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",40,N],[3,"Access","","Flags providing information about the type of memory access to a resource.",N,N],[3,"Bind","","Flags providing information about the usage of a resource.",N,N],[8,"Pod","","A trait for plain-old-data types.",N,N],[5,"cast_slice","","Cast a slice from one POD type to another.",N,N],[0,"texture","gfx","Texture creation and modification.",N,N],[17,"MAX_LEVEL","gfx::texture","Maximum accessible mipmap level of a texture.",N,N],[3,"Raw","","Untyped texture",N,N],[4,"CreationError","","Pure texture object creation error.",N,N],[13,"Format","","Failed to map a given format to the device.",41,N],[13,"Kind","","The kind doesn't support a particular operation.",41,N],[13,"Samples","","Failed to map a given multisampled kind to the device.",41,N],[13,"Size","","Unsupported size in one of the dimensions.",41,N],[13,"Data","","The given data has a different size than the target texture slice.",41,N],[13,"Usage","","The mentioned usage mode is not supported",41,N],[13,"Mipmap","","The requested mipmap creation parameter is unsupported.",41,N],[13,"Level","","The requested mipmap level count does not match the provided data.",41,N],[4,"LayerError","","An error associated with selected texture layer.",N,N],[13,"NotExpected","","The source texture kind doesn't support array slices.",42,N],[13,"OutOfBounds","","Selected layer is outside of the provided range.",42,N],[6,"Size","","Dimension size",N,N],[6,"Bits","","Number of bits per component",N,N],[6,"NumSamples","","Number of MSAA samples",N,N],[6,"NumFragments","","Number of EQAA fragments",N,N],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",N,N],[4,"AaMode","","Describes the configuration of samples inside each texel.",N,N],[13,"Single","","No additional sample information",43,N],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",43,N],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",43,N],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",N,N],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",44,N],[13,"Mipmap","","Add simple mipmapping.",44,N],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",44,N],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",44,N],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",44,N],[4,"CubeFace","","The face of a cube texture to do an operation on.",N,N],[13,"PosX","","",45,N],[13,"NegX","","",45,N],[13,"PosY","","",45,N],[13,"NegY","","",45,N],[13,"PosZ","","",45,N],[13,"NegZ","","",45,N],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",N,N],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",N,N],[13,"D1","","A single row of texels.",46,N],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",46,N],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",46,N],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",46,N],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",46,N],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",46,N],[13,"CubeArray","","An array of Cube textures.",46,N],[4,"Mipmap","","The marker for the texture initializer to generate extra space for the mipmap generation.",N,N],[13,"Provided","","The mipmap data is provided as a part of bitmap data.",47,N],[13,"Allocated","","The mipmap data is not provided, but the memory for it should be allocated for the later generation/",47,N],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",N,N],[12,"xoffset","","",48,N],[12,"yoffset","","",48,N],[12,"zoffset","","",48,N],[12,"width","","",48,N],[12,"height","","",48,N],[12,"depth","","",48,N],[12,"format","","Format of each texel.",48,N],[12,"mipmap","","Which mipmap to select.",48,N],[6,"RawImageInfo","","New raw image info based on the universal format spec.",N,N],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",N,N],[3,"TextureCopyRegion","","A texture region defined for copy operations",N,N],[12,"texture","","Raw texture",49,N],[12,"kind","","Texture kind",49,N],[12,"cube_face","","Optional cube face",49,N],[12,"info","","Dimensions, offsets, and format",49,N],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",N,N],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",50,N],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",50,N],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",50,N],[13,"Border","","Use border color.",50,N],[3,"Lod","","A wrapper for the LOD level of a texture.",N,N],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",N,N],[12,"0","","",51,N],[3,"SamplerInfo","","Specifies how to sample from a texture.",N,N],[12,"filter","","Filter method to use.",52,N],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",52,N],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",52,N],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",52,N],[12,"comparison","","Comparison mode, used primary for a shadow map.",52,N],[12,"border","","Border color is used when one of the wrap modes is set to border.",52,N],[3,"Info","","Texture storage descriptor.",N,N],[12,"kind","","",53,N],[12,"levels","","",53,N],[12,"format","","",53,N],[12,"bind","","",53,N],[12,"usage","","",53,N],[3,"ResourceDesc","","Texture resource view descriptor.",N,N],[12,"channel","","",54,N],[12,"layer","","",54,N],[12,"min","","",54,N],[12,"max","","",54,N],[12,"swizzle","","",54,N],[3,"RenderDesc","","Texture render view descriptor.",N,N],[12,"channel","","",55,N],[12,"level","","",55,N],[12,"layer","","",55,N],[3,"DepthStencilFlags","","Depth-stencil read-only flags",N,N],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",N,N],[12,"level","","",56,N],[12,"layer","","",56,N],[12,"flags","","",56,N],[6,"Layer","","A depth value, specifying which plane to select out of a 3D texture.",N,N],[6,"Level","","Mipmap level to select in a texture.",N,N],[8,"Factory","gfx","Overview",N,N],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",57,[[["self"]],["capabilities"]]],[10,"create_buffer_raw","","",57,[[["self"],["info"]],["result",["rawbuffer","creationerror"]]]],[10,"create_buffer_immutable_raw","","",57,N],[11,"create_buffer_immutable","","",57,N],[11,"create_buffer","","",57,[[["self"],["usize"],["role"],["usage"],["bind"]],["result",["buffer","creationerror"]]]],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",57,[[["self"],["program"],["descriptor"]],["result",["rawpipelinestate","creationerror"]]]],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",57,[[["self"],["shaderset"]],["result",["program","createprogramerror"]]]],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",57,N],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",57,N],[11,"create_shader_hull","","Compiles a `HullShader` from source.",57,N],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",57,N],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",57,N],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",57,N],[10,"create_sampler","","",57,[[["self"],["samplerinfo"]],["sampler"]]],[10,"read_mapping","","Acquire a mapping Reader",57,[[["self"],["buffer"]],["result",["reader","error"]]]],[10,"write_mapping","","Acquire a mapping Writer",57,[[["self"],["buffer"]],["result",["writer","error"]]]],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",57,[[["self"],["info"],["option",["channeltype"]],["option"]],["result",["rawtexture","creationerror"]]]],[10,"view_buffer_as_shader_resource_raw","","",57,[[["self"],["rawbuffer"],["format"]],["result",["rawshaderresourceview","resourceviewerror"]]]],[10,"view_buffer_as_unordered_access_raw","","",57,[[["self"],["rawbuffer"]],["result",["rawunorderedaccessview","resourceviewerror"]]]],[10,"view_texture_as_shader_resource_raw","","",57,[[["self"],["rawtexture"],["resourcedesc"]],["result",["rawshaderresourceview","resourceviewerror"]]]],[10,"view_texture_as_unordered_access_raw","","",57,[[["self"],["rawtexture"]],["result",["rawunorderedaccessview","resourceviewerror"]]]],[10,"view_texture_as_render_target_raw","","",57,[[["self"],["rawtexture"],["renderdesc"]],["result",["rawrendertargetview","targetviewerror"]]]],[10,"view_texture_as_depth_stencil_raw","","",57,[[["self"],["rawtexture"],["depthstencildesc"]],["result",["rawdepthstencilview","targetviewerror"]]]],[11,"create_texture","","",57,[[["self"],["kind"],["u8"],["bind"],["usage"],["option",["channeltype"]]],["result",["texture","creationerror"]]]],[11,"view_buffer_as_shader_resource","","",57,[[["self"],["buffer"]],["result",["shaderresourceview","resourceviewerror"]]]],[11,"view_buffer_as_unordered_access","","",57,[[["self"],["buffer"]],["result",["unorderedaccessview","resourceviewerror"]]]],[11,"view_texture_as_shader_resource","","",57,N],[11,"view_texture_as_unordered_access","","",57,[[["self"],["texture"]],["result",["unorderedaccessview","resourceviewerror"]]]],[11,"view_texture_as_render_target","","",57,[[["self"],["texture"],["u8"],["option",["u16"]]],["result",["rendertargetview","targetviewerror"]]]],[11,"view_texture_as_depth_stencil","","",57,[[["self"],["texture"],["u8"],["option",["u16"]],["depthstencilflags"]],["result",["depthstencilview","targetviewerror"]]]],[11,"view_texture_as_depth_stencil_trivial","","",57,[[["self"],["texture"]],["result",["depthstencilview","targetviewerror"]]]],[11,"create_texture_immutable_u8","","",57,N],[11,"create_texture_immutable","","",57,N],[11,"create_render_target","","",57,[[["self"],["u16"],["u16"]],["result",["combinederror"]]]],[11,"create_depth_stencil","","",57,[[["self"],["u16"],["u16"]],["result",["combinederror"]]]],[11,"create_depth_stencil_view_only","","",57,[[["self"],["u16"],["u16"]],["result",["depthstencilview","combinederror"]]]],[4,"ResourceViewError","","Error creating either a ShaderResourceView, or UnorderedAccessView.",N,N],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",58,N],[13,"Channel","","Selected channel type is not supported for this texture.",58,N],[13,"Layer","","Selected layer can not be viewed for this texture.",58,N],[13,"Unsupported","","The backend was refused for some reason.",58,N],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",N,N],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",59,N],[13,"Level","","Selected mip level doesn't exist.",59,N],[13,"Layer","","Selected array layer doesn't exist.",59,N],[13,"Channel","","Selected channel type is not supported for this texture.",59,N],[13,"Unsupported","","The backend was refused for some reason.",59,N],[13,"NotDetached","","The RTV cannot be changed due to the references to it existing.",59,N],[4,"CombinedError","","An error from creating textures with views at the same time.",N,N],[13,"Texture","","Failed to create the raw texture.",60,N],[13,"Resource","","Failed to create SRV or UAV.",60,N],[13,"Target","","Failed to create RTV or DSV.",60,N],[8,"CommandBuffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",N,N],[10,"reset","","Reset the command buffer contents, retain the allocated storage",61,N],[10,"bind_pipeline_state","","Bind a pipeline state object",61,N],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",61,N],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",61,N],[10,"bind_global_constant","","Bind a global constant",61,N],[10,"bind_resource_views","","Bind a complete set of shader resource views",61,N],[10,"bind_unordered_views","","Bind a complete set of unordered access views",61,N],[10,"bind_samplers","","Bind a complete set of samplers",61,N],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",61,N],[10,"bind_index","","Bind an index buffer",61,N],[10,"set_scissor","","Set scissor rectangle",61,N],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",61,N],[10,"copy_buffer","","Copy part of a buffer to another",61,N],[10,"copy_buffer_to_texture","","Copy part of a buffer to a texture",61,N],[10,"copy_texture_to_buffer","","Copy part of a texture to a buffer",61,N],[10,"copy_texture_to_texture","","Copy part of one texture into another",61,N],[10,"update_buffer","","Update a vertex/index/uniform buffer",61,N],[10,"update_texture","","Update a texture",61,N],[10,"generate_mipmap","","",61,N],[10,"clear_color","","Clear color target",61,N],[10,"clear_depth_stencil","","",61,N],[10,"call_draw","","Draw a primitive",61,N],[10,"call_draw_indexed","","Draw a primitive with index buffer",61,N],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",N,N],[3,"ProgramInfo","","Metadata about a program.",N,N],[12,"vertex_attributes","","Attributes in the program",62,N],[12,"globals","","Global constants in the program",62,N],[12,"constant_buffers","","Constant buffers in the program",62,N],[12,"textures","","Textures in the program",62,N],[12,"unordereds","","Unordered access resources in the program",62,N],[12,"samplers","","Samplers in the program",62,N],[12,"outputs","","Output targets in the program",62,N],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",62,N],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",62,N],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",N,N],[13,"I32","","",63,N],[13,"F32","","",63,N],[13,"I32Vector2","","",63,N],[13,"I32Vector3","","",63,N],[13,"I32Vector4","","",63,N],[13,"F32Vector2","","",63,N],[13,"F32Vector3","","",63,N],[13,"F32Vector4","","",63,N],[13,"F32Matrix2","","",63,N],[13,"F32Matrix3","","",63,N],[13,"F32Matrix4","","",63,N],[3,"Encoder","","Graphics Command Encoder",N,N],[3,"Slice","","A `Slice` dictates in which and in what order vertices get processed. It is required for processing a PSO.",N,N],[12,"start","","The start index of the index-buffer. Processing will start at this location in the index-buffer.",64,N],[12,"end","","The end index in the index-buffer. Processing will stop at this location (exclusive) in the index buffer.",64,N],[12,"base_vertex","","This is the index of the first vertex in the `VertexBuffer`. This value will be added to every index in the index-buffer, effectively moving the start of the `VertexBuffer` to this base-vertex.",64,N],[12,"instances","","Instancing configuration.",64,N],[12,"buffer","","Represents the type of index-buffer used.",64,N],[4,"CopyError","","An error occuring in memory copies.",N,N],[13,"OutOfSrcBounds","","",65,N],[12,"size","gfx::CopyError","",65,N],[12,"copy_end","","",65,N],[13,"OutOfDstBounds","gfx","",65,N],[12,"size","gfx::CopyError","",65,N],[12,"copy_end","","",65,N],[13,"Overlap","gfx","",65,N],[12,"src_offset","gfx::CopyError","",65,N],[12,"dst_offset","","",65,N],[12,"size","","",65,N],[13,"NoSrcBindFlag","gfx","",65,N],[13,"NoDstBindFlag","","",65,N],[4,"UpdateError","","An error occuring in buffer/texture updates.",N,N],[13,"OutOfBounds","","",66,N],[12,"target","gfx::UpdateError","",66,N],[12,"source","","",66,N],[13,"UnitCountMismatch","gfx","",66,N],[12,"target","gfx::UpdateError","",66,N],[12,"slice","","",66,N],[13,"InvalidUsage","gfx","",66,N],[4,"PipelineStateError","","Error creating a PipelineState",N,N],[13,"Program","","Shader program failed to link.",67,N],[13,"DescriptorInit","","Unable to create PSO descriptor due to mismatched formats.",67,N],[13,"DeviceCreate","","Device failed to create the handle give the descriptor.",67,N],[4,"IndexBuffer","","Type of index-buffer used in a Slice.",N,N],[13,"Auto","","Represents a hypothetical index-buffer from 0 to infinity. In other words, all vertices get processed in order.",68,N],[13,"Index16","","An index-buffer with unsigned 16 bit indices.",68,N],[13,"Index32","","An index-buffer with unsigned 32 bit indices.",68,N],[0,"traits","","public re-exported traits",N,N],[8,"Device","gfx::traits","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",N,N],[16,"Resources","","Associated `Resources` type.",18,N],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",18,N],[10,"get_capabilities","","Returns the capabilities of this `Device`.",18,[[["self"]],["capabilities"]]],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",18,N],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",18,N],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",18,N],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",18,N],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",18,N],[8,"Factory","","Overview",N,N],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",57,[[["self"]],["capabilities"]]],[10,"create_buffer_raw","","",57,[[["self"],["info"]],["result",["rawbuffer","creationerror"]]]],[10,"create_buffer_immutable_raw","","",57,N],[11,"create_buffer_immutable","","",57,N],[11,"create_buffer","","",57,[[["self"],["usize"],["role"],["usage"],["bind"]],["result",["buffer","creationerror"]]]],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",57,[[["self"],["program"],["descriptor"]],["result",["rawpipelinestate","creationerror"]]]],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",57,[[["self"],["shaderset"]],["result",["program","createprogramerror"]]]],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",57,N],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",57,N],[11,"create_shader_hull","","Compiles a `HullShader` from source.",57,N],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",57,N],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",57,N],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",57,N],[10,"create_sampler","","",57,[[["self"],["samplerinfo"]],["sampler"]]],[10,"read_mapping","","Acquire a mapping Reader",57,[[["self"],["buffer"]],["result",["reader","error"]]]],[10,"write_mapping","","Acquire a mapping Writer",57,[[["self"],["buffer"]],["result",["writer","error"]]]],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",57,[[["self"],["info"],["option",["channeltype"]],["option"]],["result",["rawtexture","creationerror"]]]],[10,"view_buffer_as_shader_resource_raw","","",57,[[["self"],["rawbuffer"],["format"]],["result",["rawshaderresourceview","resourceviewerror"]]]],[10,"view_buffer_as_unordered_access_raw","","",57,[[["self"],["rawbuffer"]],["result",["rawunorderedaccessview","resourceviewerror"]]]],[10,"view_texture_as_shader_resource_raw","","",57,[[["self"],["rawtexture"],["resourcedesc"]],["result",["rawshaderresourceview","resourceviewerror"]]]],[10,"view_texture_as_unordered_access_raw","","",57,[[["self"],["rawtexture"]],["result",["rawunorderedaccessview","resourceviewerror"]]]],[10,"view_texture_as_render_target_raw","","",57,[[["self"],["rawtexture"],["renderdesc"]],["result",["rawrendertargetview","targetviewerror"]]]],[10,"view_texture_as_depth_stencil_raw","","",57,[[["self"],["rawtexture"],["depthstencildesc"]],["result",["rawdepthstencilview","targetviewerror"]]]],[11,"create_texture","","",57,[[["self"],["kind"],["u8"],["bind"],["usage"],["option",["channeltype"]]],["result",["texture","creationerror"]]]],[11,"view_buffer_as_shader_resource","","",57,[[["self"],["buffer"]],["result",["shaderresourceview","resourceviewerror"]]]],[11,"view_buffer_as_unordered_access","","",57,[[["self"],["buffer"]],["result",["unorderedaccessview","resourceviewerror"]]]],[11,"view_texture_as_shader_resource","","",57,N],[11,"view_texture_as_unordered_access","","",57,[[["self"],["texture"]],["result",["unorderedaccessview","resourceviewerror"]]]],[11,"view_texture_as_render_target","","",57,[[["self"],["texture"],["u8"],["option",["u16"]]],["result",["rendertargetview","targetviewerror"]]]],[11,"view_texture_as_depth_stencil","","",57,[[["self"],["texture"],["u8"],["option",["u16"]],["depthstencilflags"]],["result",["depthstencilview","targetviewerror"]]]],[11,"view_texture_as_depth_stencil_trivial","","",57,[[["self"],["texture"]],["result",["depthstencilview","targetviewerror"]]]],[11,"create_texture_immutable_u8","","",57,N],[11,"create_texture_immutable","","",57,N],[11,"create_render_target","","",57,[[["self"],["u16"],["u16"]],["result",["combinederror"]]]],[11,"create_depth_stencil","","",57,[[["self"],["u16"],["u16"]],["result",["combinederror"]]]],[11,"create_depth_stencil_view_only","","",57,[[["self"],["u16"],["u16"]],["result",["depthstencilview","combinederror"]]]],[8,"Pod","","A trait for plain-old-data types.",N,N],[8,"FactoryExt","","This trait is responsible for creating and managing graphics resources, much like the `Factory` trait in the `gfx` crate. Every `Factory` automatically implements `FactoryExt`.",N,N],[11,"create_vertex_buffer","","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",69,N],[11,"create_index_buffer","","Creates an immutable index buffer from the supplied vertices.",69,[[["self"],["t"]],["indexbuffer"]]],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",69,N],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",69,[[["self"],["usize"]],["buffer"]]],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",69,[[["self"],["usize"]],["result",["buffer","creationerror"]]]],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",69,[[["self"],["usize"]],["result",["buffer","creationerror"]]]],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",69,N],[11,"create_shader_set_geometry","","Creates a `ShaderSet` from the supplied vertex, geometry, and pixel shader source code. Mainly used for testing.",69,N],[11,"create_shader_set_tessellation","","Creates a `ShaderSet` from the supplied vertex, hull, domain, and pixel shader source code. Mainly used for testing.",69,N],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",69,N],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.",69,[[["self"],["shaderset"],["primitive"],["rasterizer"],["i"]],["result",["pipelinestate","pipelinestateerror"]]]],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",69,[[["self"],["program"],["primitive"],["rasterizer"],["i"]],["result",["pipelinestate","pipelinestateerror"]]]],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",69,N],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",69,[[["self"]],["sampler"]]],[11,"clone","gfx","",65,[[["self"]],["copyerror"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["copyerror"]],["bool"]]],[11,"ne","","",65,[[["self"],["copyerror"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"description","","",65,[[["self"]],["str"]]],[11,"clone","","",66,[[["self"]],["updateerror"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["updateerror"]],["bool"]]],[11,"ne","","",66,[[["self"],["updateerror"]],["bool"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"description","","",66,[[["self"]],["str"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"from","","",70,[[["c"]],["encoder"]]],[11,"flush","","Submits the commands in this `Encoder`'s internal `CommandBuffer` to the GPU, so they can be executed.",70,[[["self"],["d"]]]],[11,"flush_no_reset","","Like `flush` but keeps the encoded commands.",70,[[["self"],["d"]],["submissionresult"]]],[11,"fenced_flush_no_reset","","Like `flush_no_reset` but places a fence.",70,[[["self"],["d"],["option",["fence"]]],["submissionresult",["fence"]]]],[11,"reset","","Resets the encoded commands.",70,[[["self"]]]],[11,"copy_buffer","","Copy part of a buffer to another",70,[[["self"],["buffer"],["buffer"],["usize"],["usize"],["usize"]],["copybufferresult"]]],[11,"copy_buffer_to_texture_raw","","Copy part of a buffer to a texture",70,[[["self"],["rawbuffer"],["usize"],["rawtexture"],["option",["cubeface"]],["rawimageinfo"]],["copybuffertextureresult"]]],[11,"copy_texture_to_buffer_raw","","Copy part of a texture to a buffer",70,[[["self"],["rawtexture"],["option",["cubeface"]],["rawimageinfo"],["rawbuffer"],["usize"]],["copytexturebufferresult"]]],[11,"copy_texture_to_texture_raw","","Copy part of a texture to another texture",70,[[["self"],["rawtexture"],["option",["cubeface"]],["rawimageinfo"],["rawtexture"],["option",["cubeface"]],["rawimageinfo"]],["result",["copyerror"]]]],[11,"update_buffer","","Update a buffer with a slice of data.",70,N],[11,"update_constant_buffer","","Update a buffer with a single structure.",70,[[["self"],["buffer"],["t"]]]],[11,"update_texture","","Update the contents of a texture.",70,N],[11,"clear","","Clears the supplied `RenderTargetView` to the supplied `ClearColor`.",70,N],[11,"clear_depth","","Clear a depth view with a specified value.",70,[[["self"],["depthstencilview"],["depth"]]]],[11,"clear_stencil","","Clear a stencil view with a specified value.",70,[[["self"],["depthstencilview"],["stencil"]]]],[11,"draw","","Draws a `slice::Slice` using a pipeline state object, and its matching `Data` structure.",70,[[["self"],["slice"],["pipelinestate"],["d"]]]],[11,"generate_mipmap","","Generate a mipmap chain for the given resource view.",70,[[["self"],["shaderresourceview"]]]],[11,"generate_mipmap_raw","","Untyped version of mipmap generation.",70,[[["self"],["rawshaderresourceview"]]]],[11,"create_vertex_buffer","gfx::traits","Creates an immutable vertex buffer from the supplied vertices. A `Slice` will have to manually be constructed.",69,N],[11,"create_index_buffer","","Creates an immutable index buffer from the supplied vertices.",69,[[["self"],["t"]],["indexbuffer"]]],[11,"create_vertex_buffer_with_slice","","Creates an immutable vertex buffer from the supplied vertices, together with a `Slice` from the supplied indices.",69,N],[11,"create_constant_buffer","","Creates a constant buffer for `num` identical elements of type `T`.",69,[[["self"],["usize"]],["buffer"]]],[11,"create_upload_buffer","","Creates an upload buffer for `num` elements of type `T`.",69,[[["self"],["usize"]],["result",["buffer","creationerror"]]]],[11,"create_download_buffer","","Creates a download buffer for `num` elements of type `T`.",69,[[["self"],["usize"]],["result",["buffer","creationerror"]]]],[11,"create_shader_set","","Creates a `ShaderSet` from the supplied vertex and pixel shader source code.",69,N],[11,"create_shader_set_geometry","","Creates a `ShaderSet` from the supplied vertex, geometry, and pixel shader source code. Mainly used for testing.",69,N],[11,"create_shader_set_tessellation","","Creates a `ShaderSet` from the supplied vertex, hull, domain, and pixel shader source code. Mainly used for testing.",69,N],[11,"link_program","","Creates a basic shader `Program` from the supplied vertex and pixel shader source code.",69,N],[11,"create_pipeline_state","","Similar to `create_pipeline_from_program(..)`, but takes a `ShaderSet` as opposed to a shader `Program`.",69,[[["self"],["shaderset"],["primitive"],["rasterizer"],["i"]],["result",["pipelinestate","pipelinestateerror"]]]],[11,"create_pipeline_from_program","","Creates a strongly typed `PipelineState` from its `Init` structure, a shader `Program`, a primitive type and a `Rasterizer`.",69,[[["self"],["program"],["primitive"],["rasterizer"],["i"]],["result",["pipelinestate","pipelinestateerror"]]]],[11,"create_pipeline_simple","","Creates a strongly typed `PipelineState` from its `Init` structure. Automatically creates a shader `Program` from a vertex and pixel shader source, as well as a `Rasterizer` capable of rendering triangle faces without culling.",69,N],[11,"create_sampler_linear","","Create a linear sampler with clamping to border.",69,[[["self"]],["sampler"]]],[11,"clone","gfx","",67,[[["self"]],["pipelinestateerror"]]],[11,"eq","","",67,[[["self"],["pipelinestateerror"]],["bool"]]],[11,"ne","","",67,[[["self"],["pipelinestateerror"]],["bool"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"from","","",67,[[["pipelinestateerror",["str"]]],["pipelinestateerror",["string"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"description","","",67,[[["self"]],["str"]]],[11,"cause","","",67,[[["self"]],["option",["error"]]]],[11,"from","","",67,[[["programerror"]],["self"]]],[11,"from","","",67,[[["initerror"]],["self"]]],[11,"from","","",67,[[["creationerror"]],["self"]]],[11,"clone","","",64,[[["self"]],["slice"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"hash","","",64,N],[11,"eq","","",64,[[["self"],["slice"]],["bool"]]],[11,"ne","","",64,[[["self"],["slice"]],["bool"]]],[11,"new_match_vertex_buffer","","Creates a new `Slice` to match the supplied vertex buffer, from start to end, in order.",64,[[["buffer"]],["self"]]],[11,"get_prim_count","","Calculates the number of primitives of the specified type in this `Slice`.",64,[[["self"],["primitive"]],["u32"]]],[11,"split_at","","Divides one slice into two at an index.",64,N],[11,"clone","","",68,[[["self"]],["indexbuffer"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"hash","","",68,N],[11,"eq","","",68,[[["self"],["indexbuffer"]],["bool"]]],[11,"ne","","",68,[[["self"],["indexbuffer"]],["bool"]]],[11,"default","","",68,[[],["self"]]],[11,"into_index_buffer","","",68,[[["self"],["f"]],["indexbuffer"]]],[11,"into_index_buffer","gfx::handle","",71,[[["self"],["f"]],["indexbuffer"]]],[11,"into_index_buffer","","",71,[[["self"],["f"]],["indexbuffer"]]],[0,"pso","gfx","A typed high-level graphics pipeline interface.",N,N],[3,"Descriptor","gfx::pso","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",N,N],[12,"primitive","","Type of the primitive",72,N],[12,"rasterizer","","Rasterizer setup",72,N],[12,"scissor","","Enable scissor test",72,N],[12,"vertex_buffers","","Vertex buffers",72,N],[12,"attributes","","Vertex attributes",72,N],[12,"constant_buffers","","Constant buffers",72,N],[12,"resource_views","","Shader resource views",72,N],[12,"unordered_views","","Unordered access views",72,N],[12,"samplers","","Samplers",72,N],[12,"color_targets","","Render target views (RTV)",72,N],[12,"depth_stencil","","Depth stencil view (DSV)",72,N],[3,"AccessInfo","","Informations about what is accessed by a bunch of commands.",N,N],[3,"RawDataSet","","A complete set of raw data that needs to be specified at run-time whenever we draw something with a PSO. This is what \"data\" struct gets transformed into when we call `encoder.draw(...)` with it. It doesn't have any typing information, since PSO knows what format and layout to expect from each resource.",N,N],[12,"vertex_buffers","","",73,N],[12,"constant_buffers","","",73,N],[12,"global_constants","","",73,N],[12,"resource_views","","",73,N],[12,"unordered_views","","",73,N],[12,"samplers","","",73,N],[12,"pixel_targets","","",73,N],[12,"ref_values","","",73,N],[12,"scissor","","",73,N],[3,"PipelineState","","A strongly typed Pipleline State Object. See the module documentation for more information.",N,N],[4,"ElementError","","Error matching an element inside the constant buffer.",N,N],[13,"NotFound","","Element not found.",74,N],[13,"Offset","","Element offset mismatch.",74,N],[12,"name","gfx::pso::ElementError","Element name.",74,N],[12,"shader_offset","","Element byte offset in the shader-side constant buffer.",74,N],[12,"code_offset","","Element byte offset in the code-side constant buffer.",74,N],[13,"Format","gfx::pso","Element format mismatch.",74,N],[12,"name","gfx::pso::ElementError","Element name.",74,N],[12,"shader_format","","Element format in the shader-side constant buffer.",74,N],[12,"code_format","","Element format in the code-side constant buffer.",74,N],[4,"InitError","gfx::pso","Failure to initilize the link between the shader and the data.",N,N],[13,"VertexImport","","Vertex attribute mismatch.",75,N],[13,"ConstantBuffer","","Constant buffer mismatch.",75,N],[13,"GlobalConstant","","Global constant mismatch.",75,N],[13,"ResourceView","","Shader resource view mismatch.",75,N],[13,"UnorderedView","","Unordered access view mismatch.",75,N],[13,"Sampler","","Sampler mismatch.",75,N],[13,"PixelExport","","Pixel target mismatch.",75,N],[0,"buffer","","Buffer components for a PSO.",N,N],[6,"BufferIndex","gfx::pso::buffer","Index of a vertex buffer.",N,N],[3,"Element","","A struct element descriptor.",N,N],[12,"format","","Element format",76,N],[12,"offset","","Offset from the beginning of the container, in bytes",76,N],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",N,N],[6,"ElemStride","","Offset between attribute values, in bytes",N,N],[6,"InstanceRate","","The number of instances between each subsequent attribute value",N,N],[3,"VertexBufferCommon","","Service struct to simplify the implementations of `VertexBuffer` and `InstanceBuffer`.",N,N],[3,"RawVertexBuffer","","Raw vertex/instance buffer component. Can be used when the formats of vertex attributes are not known at compile time.",N,N],[3,"ConstantBuffer","","Constant buffer component.",N,N],[3,"RawConstantBuffer","","Raw constant buffer component.",N,N],[3,"Global","","Global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed into any constant buffer.",N,N],[3,"RawGlobal","","Raw global (uniform) constant component. Describes a free-standing value passed into the shader, which is not enclosed in any constant buffer.",N,N],[4,"NonInstanced","","Helper phantom type for per-vertex attributes.",N,N],[4,"Instanced","","Helper phantom type for per-instance attributes.",N,N],[6,"VertexBuffer","","Vertex buffer component. Advanced per vertex.",N,N],[6,"InstanceBuffer","","Instance buffer component. Same as the vertex buffer but advances per instance.",N,N],[8,"Structure","","A trait to be implemented by any struct having the layout described in the graphics API, like a vertex buffer.",N,N],[10,"query","","Get the layout of an element by name.",77,[[["str"]],["option",["element"]]]],[8,"ToInstanceRate","","Helper trait for `VertexBufferCommon` to support variable instance rate.",N,N],[16,"Init","","The associated init type for PSO component.",78,N],[10,"get_rate","","Get an actual instance rate value from the init.",78,N],[11,"clone","","",79,[[["self"]],["self"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"hash","","",79,[[["self"],["__hti"]]]],[11,"eq","","",79,[[["self"],["self"]],["bool"]]],[11,"get_rate","","",80,N],[11,"get_rate","","",81,N],[11,"get_rate","","",82,N],[11,"clone","","",83,[[["self"]],["rawvertexbuffer"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"hash","","",83,N],[11,"eq","","",83,[[["self"],["rawvertexbuffer"]],["bool"]]],[11,"ne","","",83,[[["self"],["rawvertexbuffer"]],["bool"]]],[11,"clone","","",84,[[["self"]],["self"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"hash","","",84,[[["self"],["__ht"]]]],[11,"eq","","",84,[[["self"],["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["rawconstantbuffer"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"hash","","",85,N],[11,"eq","","",85,[[["self"],["rawconstantbuffer"]],["bool"]]],[11,"ne","","",85,[[["self"],["rawconstantbuffer"]],["bool"]]],[11,"clone","","",86,[[["self"]],["self"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"hash","","",86,[[["self"],["__ht"]]]],[11,"eq","","",86,[[["self"],["self"]],["bool"]]],[11,"clone","","",87,[[["self"]],["rawglobal"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"hash","","",87,N],[11,"eq","","",87,[[["self"],["rawglobal"]],["bool"]]],[11,"ne","","",87,[[["self"],["rawglobal"]],["bool"]]],[11,"new","","",79,[[],["self"]]],[11,"is_active","","",79,[[["self"]],["bool"]]],[11,"link_vertex_buffer","","",79,N],[11,"link_input","","",79,N],[11,"bind_to","","",79,N],[11,"new","","",83,[[],["self"]]],[11,"is_active","","",83,[[["self"]],["bool"]]],[11,"link_vertex_buffer","","",83,N],[11,"link_input","","",83,N],[11,"bind_to","","",83,N],[11,"new","","",84,[[],["self"]]],[11,"is_active","","",84,[[["self"]],["bool"]]],[11,"link_constant_buffer","","",84,N],[11,"bind_to","","",84,N],[11,"new","","",85,[[],["self"]]],[11,"is_active","","",85,[[["self"]],["bool"]]],[11,"link_constant_buffer","","",85,N],[11,"bind_to","","",85,N],[11,"new","","",86,[[],["self"]]],[11,"is_active","","",86,[[["self"]],["bool"]]],[11,"link_global_constant","","",86,N],[11,"bind_to","","",86,N],[11,"new","","",87,[[],["self"]]],[11,"is_active","","",87,[[["self"]],["bool"]]],[11,"link_global_constant","","",87,N],[11,"bind_to","","",87,N],[0,"resource","gfx::pso","Resource components for a PSO.",N,N],[3,"ShaderResource","gfx::pso::resource","Shader resource component (SRV). Typically is a view into some texture, but can also be a buffer.",N,N],[3,"RawShaderResource","","Raw (untyped) shader resource (SRV).",N,N],[3,"UnorderedAccess","","Unordered access component (UAV). A writable resource (texture/buffer) with no defined access order across simultaneously executing shaders. Supported on DX10 and higher.",N,N],[3,"Sampler","","Sampler component.",N,N],[3,"TextureSampler","","A convenience type for a texture paired with a sampler. It only makes sense for DX9 class hardware, where every texture by default is bundled with a sampler, hence they are represented by the same name. In DX10 and higher samplers are totally separated from the textures.",N,N],[11,"clone","","",88,[[["self"]],["self"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"hash","","",88,[[["self"],["__ht"]]]],[11,"eq","","",88,[[["self"],["self"]],["bool"]]],[11,"clone","","",89,[[["self"]],["rawshaderresource"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"hash","","",89,N],[11,"eq","","",89,[[["self"],["rawshaderresource"]],["bool"]]],[11,"ne","","",89,[[["self"],["rawshaderresource"]],["bool"]]],[11,"clone","","",90,[[["self"]],["self"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"hash","","",90,[[["self"],["__ht"]]]],[11,"eq","","",90,[[["self"],["self"]],["bool"]]],[11,"clone","","",91,[[["self"]],["sampler"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"hash","","",91,N],[11,"eq","","",91,[[["self"],["sampler"]],["bool"]]],[11,"ne","","",91,[[["self"],["sampler"]],["bool"]]],[11,"clone","","",92,[[["self"]],["self"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"hash","","",92,[[["self"],["__ht"]]]],[11,"eq","","",92,[[["self"],["self"]],["bool"]]],[11,"new","","",88,[[],["self"]]],[11,"is_active","","",88,[[["self"]],["bool"]]],[11,"link_resource_view","","",88,N],[11,"bind_to","","",88,N],[11,"new","","",89,[[],["self"]]],[11,"is_active","","",89,[[["self"]],["bool"]]],[11,"link_resource_view","","",89,N],[11,"bind_to","","",89,N],[11,"new","","",90,[[],["self"]]],[11,"is_active","","",90,[[["self"]],["bool"]]],[11,"link_unordered_view","","",90,N],[11,"bind_to","","",90,N],[11,"new","","",91,[[],["self"]]],[11,"is_active","","",91,[[["self"]],["bool"]]],[11,"link_sampler","","",91,N],[11,"bind_to","","",91,N],[11,"new","","",92,[[],["self"]]],[11,"is_active","","",92,[[["self"]],["bool"]]],[11,"link_resource_view","","",92,N],[11,"link_sampler","","",92,N],[11,"bind_to","","",92,N],[0,"target","gfx::pso","Render target components for a PSO.",N,N],[3,"RenderTarget","gfx::pso::target","Render target component. Typically points to a color-formatted texture.",N,N],[3,"BlendTarget","","Render target component with active blending mode.",N,N],[3,"RawRenderTarget","","Raw (untyped) render target component with optional blending.",N,N],[3,"DepthTarget","","Depth target component.",N,N],[3,"StencilTarget","","Stencil target component.",N,N],[3,"DepthStencilTarget","","Depth + stencil target component.",N,N],[3,"Scissor","","Scissor component. Sets up the scissor test for rendering.",N,N],[3,"BlendRef","","Blend reference component. Sets up the reference color for blending.",N,N],[11,"clone","","",93,[[["self"]],["self"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"hash","","",93,[[["self"],["__ht"]]]],[11,"eq","","",93,[[["self"],["self"]],["bool"]]],[11,"clone","","",94,[[["self"]],["self"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"hash","","",94,[[["self"],["__ht"]]]],[11,"eq","","",94,[[["self"],["self"]],["bool"]]],[11,"clone","","",95,[[["self"]],["rawrendertarget"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"hash","","",95,N],[11,"eq","","",95,[[["self"],["rawrendertarget"]],["bool"]]],[11,"ne","","",95,[[["self"],["rawrendertarget"]],["bool"]]],[11,"clone","","",96,[[["self"]],["self"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"hash","","",96,[[["self"],["__ht"]]]],[11,"eq","","",96,[[["self"],["self"]],["bool"]]],[11,"clone","","",97,[[["self"]],["self"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"hash","","",97,[[["self"],["__ht"]]]],[11,"eq","","",97,[[["self"],["self"]],["bool"]]],[11,"clone","","",98,[[["self"]],["self"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"hash","","",98,[[["self"],["__ht"]]]],[11,"eq","","",98,[[["self"],["self"]],["bool"]]],[11,"clone","","",99,[[["self"]],["scissor"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"hash","","",99,N],[11,"eq","","",99,[[["self"],["scissor"]],["bool"]]],[11,"ne","","",99,[[["self"],["scissor"]],["bool"]]],[11,"clone","","",100,[[["self"]],["blendref"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"hash","","",100,N],[11,"eq","","",100,[[["self"],["blendref"]],["bool"]]],[11,"new","","",93,[[],["self"]]],[11,"is_active","","",93,[[["self"]],["bool"]]],[11,"link_output","","",93,N],[11,"bind_to","","",93,N],[11,"new","","",94,[[],["self"]]],[11,"is_active","","",94,[[["self"]],["bool"]]],[11,"link_output","","",94,N],[11,"bind_to","","",94,N],[11,"new","","",95,[[],["self"]]],[11,"is_active","","",95,[[["self"]],["bool"]]],[11,"link_output","","",95,N],[11,"bind_to","","",95,N],[11,"new","","",96,[[],["self"]]],[11,"is_active","","",96,[[["self"]],["bool"]]],[11,"link_depth_stencil","","",96,N],[11,"bind_to","","",96,N],[11,"new","","",97,[[],["self"]]],[11,"is_active","","",97,[[["self"]],["bool"]]],[11,"link_depth_stencil","","",97,N],[11,"bind_to","","",97,N],[11,"new","","",98,[[],["self"]]],[11,"is_active","","",98,[[["self"]],["bool"]]],[11,"link_depth_stencil","","",98,N],[11,"bind_to","","",98,N],[11,"new","","",99,[[],["self"]]],[11,"is_active","","",99,[[["self"]],["bool"]]],[11,"link_scissor","","",99,[[["self"]],["bool"]]],[11,"bind_to","","",99,N],[11,"new","","",100,[[],["self"]]],[11,"is_active","","",100,[[["self"]],["bool"]]],[11,"bind_to","","",100,N],[0,"bundle","gfx::pso","Combine slice data with pipeline state.",N,N],[3,"Bundle","gfx::pso::bundle","Slice-PSO bundle.",N,N],[12,"slice","","Slice",101,N],[12,"pso","","Pipeline state",101,N],[12,"data","","Pipeline data",101,N],[11,"new","","Create new Bundle",101,[[["slice"],["pipelinestate"],["data"]],["self"]]],[11,"encode","","Draw bundle using encoder.",101,[[["self"],["encoder"]]]],[8,"PipelineInit","gfx::pso","A service trait implemented by the \"init\" structure of PSO.",N,N],[16,"Meta","","The associated \"meta\" struct.",102,N],[10,"link_to","","Attempt to map a PSO descriptor to a give shader program, represented by `ProgramInfo`. Returns an instance of the \"meta\" struct upon successful mapping.",102,[[["self"],["descriptor"],["programinfo"]],["result",["initerror"]]]],[8,"PipelineData","","a service trait implemented the \"data\" structure of PSO.",N,N],[16,"Meta","","The associated \"meta\" struct.",103,N],[10,"bake_to","","Dump all the contained data into the raw data set, given the mapping (\"meta\"), and a handle manager.",103,N],[8,"DataLink","","The \"link\" logic portion of a PSO component. Defines the input data for the component.",N,N],[16,"Init","","The assotiated \"init\" type - a member of the PSO \"init\" struct.",104,N],[10,"new","","Create a new empty data link.",104,[[],["self"]]],[10,"is_active","","Check if this link is actually used by the shader.",104,[[["self"]],["bool"]]],[11,"link_vertex_buffer","","Attempt to link with a vertex buffer containing multiple attributes.",104,N],[11,"link_input","","Attempt to link with a vertex attribute.",104,N],[11,"link_constant_buffer","","Attempt to link with a constant buffer.",104,N],[11,"link_global_constant","","Attempt to link with a global constant.",104,N],[11,"link_output","","Attempt to link with an output render target (RTV).",104,N],[11,"link_depth_stencil","","Attempt to link with a depth-stencil target (DSV).",104,N],[11,"link_resource_view","","Attempt to link with a shader resource (SRV).",104,N],[11,"link_unordered_view","","Attempt to link with an unordered access (UAV).",104,N],[11,"link_sampler","","Attempt to link with a sampler.",104,N],[11,"link_scissor","","Attempt to enable scissor test.",104,[[["self"]],["bool"]]],[8,"DataBind","","The \"bind\" logic portion of the PSO component. Defines how the user data translates into the raw data set.",N,N],[16,"Data","","The associated \"data\" type - a member of the PSO \"data\" struct.",105,N],[10,"bind_to","","Dump the given data into the raw data set.",105,N],[11,"clone","","",73,[[["self"]],["rawdataset"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"eq","","",73,[[["self"],["rawdataset"]],["bool"]]],[11,"ne","","",73,[[["self"],["rawdataset"]],["bool"]]],[11,"new","","Create an empty data set.",73,[[],["rawdataset"]]],[11,"clear","","Clear all contained data.",73,[[["self"]]]],[11,"clone","","",74,[[["self"]],["elementerror"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"eq","","",74,[[["self"],["elementerror"]],["bool"]]],[11,"ne","","",74,[[["self"],["elementerror"]],["bool"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"description","","",74,[[["self"]],["str"]]],[11,"from","","",74,[[["elementerror",["str"]]],["elementerror",["string"]]]],[11,"clone","","",75,[[["self"]],["initerror"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"eq","","",75,[[["self"],["initerror"]],["bool"]]],[11,"ne","","",75,[[["self"],["initerror"]],["bool"]]],[11,"from","","",75,[[["initerror",["str"]]],["initerror",["string"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"description","","",75,[[["self"]],["str"]]],[11,"cause","","",75,[[["self"]],["option",["error"]]]],[11,"clone","","",106,[[["self"]],["pipelinestate"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"hash","","",106,N],[11,"eq","","",106,[[["self"],["pipelinestate"]],["bool"]]],[11,"ne","","",106,[[["self"],["pipelinestate"]],["bool"]]],[11,"new","","Create a new PSO from a raw handle and the \"meta\" instance.",106,[[["rawpipelinestate"],["primitive"],["m"]],["pipelinestate"]]],[11,"get_handle","","Get a raw handle reference.",106,[[["self"]],["rawpipelinestate"]]],[11,"get_meta","","Get a \"meta\" struct reference. Can be used by the user to check what resources are actually used and what not.",106,[[["self"]],["m"]]],[0,"shade","gfx","Shaders Shader parameter handling.",N,N],[0,"core","gfx::shade","Shader handling.",N,N],[6,"Dimension","gfx::shade::core","Number of components in a container type (vectors/matrices)",N,N],[4,"IsArray","","Whether the sampler samples an array texture.",N,N],[13,"Array","","",107,N],[13,"NoArray","","",107,N],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",N,N],[13,"Compare","","",108,N],[13,"NoCompare","","",108,N],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",N,N],[13,"MultiSample","","",109,N],[13,"NoMultiSample","","",109,N],[4,"IsRect","","Whether the sampler samples a rectangle texture.",N,N],[13,"Rect","","",110,N],[13,"NoRect","","",110,N],[4,"MatrixFormat","","Whether the matrix is column or row major.",N,N],[13,"ColumnMajor","","",111,N],[13,"RowMajor","","",111,N],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",N,N],[13,"Buffer","","Sample from a buffer.",112,N],[13,"D1","","Sample from a 1D texture",112,N],[13,"D2","","Sample from a 2D texture",112,N],[13,"D3","","Sample from a 3D texture",112,N],[13,"Cube","","Sample from a cubemap.",112,N],[3,"SamplerType","","A type of the sampler variable.",N,N],[12,"0","","",113,N],[12,"1","","",113,N],[4,"BaseType","","Base type of this shader parameter.",N,N],[13,"I32","","",114,N],[13,"U32","","",114,N],[13,"F32","","",114,N],[13,"F64","","",114,N],[13,"Bool","","",114,N],[4,"ContainerType","","Number of components this parameter represents.",N,N],[13,"Single","","Scalar value",115,N],[13,"Vector","","A vector with `Dimension` components.",115,N],[13,"Matrix","","A matrix.",115,N],[4,"Stage","","Which program stage this shader represents.",N,N],[13,"Vertex","","",116,N],[13,"Hull","","",116,N],[13,"Domain","","",116,N],[13,"Geometry","","",116,N],[13,"Pixel","","",116,N],[17,"STAGES","","A constant static array of all shader stages.",N,N],[6,"Location","","Location of a parameter in the program.",N,N],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",N,N],[13,"I32","","",63,N],[13,"F32","","",63,N],[13,"I32Vector2","","",63,N],[13,"I32Vector3","","",63,N],[13,"I32Vector4","","",63,N],[13,"F32Vector2","","",63,N],[13,"F32Vector3","","",63,N],[13,"F32Vector4","","",63,N],[13,"F32Matrix2","","",63,N],[13,"F32Matrix3","","",63,N],[13,"F32Matrix4","","",63,N],[6,"ConstFormat","","Format of a shader constant.",N,N],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",N,N],[10,"get_base_type","","",117,[[],["basetype"]]],[8,"Formatted","","A trait that statically links simple data types to constant formats.",N,N],[10,"get_format","","Get the associated constant format.",118,N],[3,"Usage","","Parameter usage flags.",N,N],[3,"AttributeVar","","Vertex information that a shader takes as input.",N,N],[12,"name","","Name of this attribute.",119,N],[12,"slot","","Slot of the vertex attribute.",119,N],[12,"base_type","","Type that this attribute is composed of.",119,N],[12,"container","","\"Scalarness\" of this attribute.",119,N],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",N,N],[12,"name","","Name of this constant.",120,N],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",120,N],[12,"count","","Number of elements this constant represents.",120,N],[12,"base_type","","Type that this constant is composed of",120,N],[12,"container","","\"Scalarness\" of this constant.",120,N],[3,"ConstantBufferVar","","A constant buffer.",N,N],[12,"name","","Name of this constant buffer.",121,N],[12,"slot","","Slot of the constant buffer.",121,N],[12,"size","","Size (in bytes) of this buffer's data.",121,N],[12,"usage","","What program stage this buffer is used in.",121,N],[12,"elements","","List of individual elements in this buffer.",121,N],[3,"TextureVar","","Texture shader parameter.",N,N],[12,"name","","Name of this texture variable.",122,N],[12,"slot","","Slot of this texture variable.",122,N],[12,"base_type","","Base type for the texture.",122,N],[12,"ty","","Type of this texture.",122,N],[12,"usage","","What program stage this texture is used in.",122,N],[3,"UnorderedVar","","Unordered access shader parameter.",N,N],[12,"name","","Name of this unordered variable.",123,N],[12,"slot","","Slot of this unordered variable.",123,N],[12,"usage","","What program stage this UAV is used in.",123,N],[3,"SamplerVar","","Sampler shader parameter.",N,N],[12,"name","","Name of this sampler variable.",124,N],[12,"slot","","Slot of this sampler variable.",124,N],[12,"ty","","Type of this sampler.",124,N],[12,"usage","","What program stage this texture is used in.",124,N],[3,"OutputVar","","Target output variable.",N,N],[12,"name","","Name of this output variable.",125,N],[12,"slot","","Output color target index.",125,N],[12,"base_type","","Type of the output component.",125,N],[12,"container","","\"Scalarness\" of this output.",125,N],[3,"ProgramInfo","","Metadata about a program.",N,N],[12,"vertex_attributes","","Attributes in the program",62,N],[12,"globals","","Global constants in the program",62,N],[12,"constant_buffers","","Constant buffers in the program",62,N],[12,"textures","","Textures in the program",62,N],[12,"unordereds","","Unordered access resources in the program",62,N],[12,"samplers","","Samplers in the program",62,N],[12,"outputs","","Output targets in the program",62,N],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",62,N],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",62,N],[3,"Program","","A program",N,N],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",N,N],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",126,N],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",126,N],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",126,N],[4,"CreateShaderError","","An error type for creating shaders.",N,N],[13,"ModelNotSupported","","The device does not support the requested shader model.",127,N],[13,"StageNotSupported","","The device does not support the shader stage.",127,N],[13,"CompilationFailed","","The shader failed to compile.",127,N],[3,"CreateProgramError","","An error type for creating programs.",N,N],[6,"ConstFormat","gfx::shade","Format of a shader constant.",N,N],[8,"Formatted","","A trait that statically links simple data types to constant formats.",N,N],[10,"get_format","","Get the associated constant format.",118,N],[3,"Usage","","Parameter usage flags.",N,N],[4,"ProgramError","","Program linking error",N,N],[13,"Vertex","","Unable to compile the vertex shader",128,N],[13,"Hull","","Unable to compile the hull shader",128,N],[13,"Domain","","Unable to compile the domain shader",128,N],[13,"Geometry","","Unable to compile the geometry shader",128,N],[13,"Pixel","","Unable to compile the pixel shader",128,N],[13,"Link","","Unable to link",128,N],[8,"ToUniform","","",N,N],[10,"convert","","",129,[[["self"]],["uniformvalue"]]],[11,"clone","","",128,[[["self"]],["programerror"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"eq","","",128,[[["self"],["programerror"]],["bool"]]],[11,"ne","","",128,[[["self"],["programerror"]],["bool"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"description","","",128,[[["self"]],["str"]]],[11,"cause","","",128,[[["self"]],["option",["error"]]]],[0,"macros","gfx","Convenience macros Various helper macros.",N,N],[6,"CopyBufferResult","","Result type returned when copying a buffer into another buffer.",N,N],[6,"CopyBufferTextureResult","","Result type returned when copying buffer data into a texture.",N,N],[6,"CopyTextureBufferResult","","Result type returned when copying texture data into a buffer.",N,N],[8,"IntoIndexBuffer","","A helper trait to create `IndexBuffers` from different kinds of data.",N,N],[10,"into_index_buffer","","Turns self into an `IndexBuffer`.",130,[[["self"],["f"]],["indexbuffer"]]],[14,"gfx_pipeline_inner","","",N,N],[14,"gfx_pipeline_base","","",N,N],[14,"gfx_pipeline","","",N,N],[14,"gfx_impl_struct","","",N,N],[14,"gfx_impl_struct_meta","","",N,N],[14,"gfx_vertex_struct","","",N,N],[14,"gfx_vertex_struct_meta","","",N,N],[14,"gfx_constant_struct","","",N,N],[14,"gfx_constant_struct_meta","","",N,N],[14,"gfx_format","","",N,N],[14,"gfx_defines","","Defines vertex, constant and pipeline formats in one block.",N,N],[11,"bitand","","Returns the intersection between the two sets of flags.",131,[[["self"],["mirror"]],["mirror"]]],[11,"bitand","gfx::state","Returns the intersection between the two sets of flags.",132,[[["self"],["colormask"]],["colormask"]]],[11,"clone","","",14,[[["self"]],["blend"]]],[11,"clone","","",4,[[["self"]],["rasterizer"]]],[11,"clone","","",16,[[["self"]],["refvalues"]]],[11,"clone","","",11,[[["self"]],["blendvalue"]]],[11,"clone","","",1,[[["self"]],["offset"]]],[11,"clone","","",13,[[["self"]],["blendchannel"]]],[11,"clone","","",5,[[["self"]],["comparison"]]],[11,"clone","","",132,[[["self"]],["colormask"]]],[11,"clone","","",2,[[["self"]],["cullface"]]],[11,"clone","","",12,[[["self"]],["factor"]]],[11,"clone","","",0,[[["self"]],["frontface"]]],[11,"clone","gfx","",131,[[["self"]],["mirror"]]],[11,"clone","","",17,[[["self"]],["rect"]]],[11,"clone","gfx::state","",7,[[["self"]],["stencilside"]]],[11,"clone","","",133,[[["self"]],["multisample"]]],[11,"clone","","",15,[[["self"]],["color"]]],[11,"clone","","",8,[[["self"]],["stencil"]]],[11,"clone","","",10,[[["self"]],["equation"]]],[11,"clone","","",6,[[["self"]],["stencilop"]]],[11,"clone","","",9,[[["self"]],["depth"]]],[11,"clone","","",3,[[["self"]],["rastermethod"]]],[11,"fmt","gfx","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::state","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::state","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","gfx::state","",10,[[["self"],["equation"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["depth"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["cullface"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["comparison"]],["ordering"]]],[11,"cmp","","",133,[[["self"],["multisample"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["stencilside"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["stencilop"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["blendvalue"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["factor"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["frontface"]],["ordering"]]],[11,"cmp","","",132,[[["self"],["colormask"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["blendchannel"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["stencil"]],["ordering"]]],[11,"cmp","gfx","",131,[[["self"],["mirror"]],["ordering"]]],[11,"sub","","Returns the set difference of the two sets of flags.",131,[[["self"],["mirror"]],["mirror"]]],[11,"sub","gfx::state","Returns the set difference of the two sets of flags.",132,[[["self"],["colormask"]],["colormask"]]],[11,"from_iter","","",132,[[["t"]],["colormask"]]],[11,"from_iter","gfx","",131,[[["t"]],["mirror"]]],[11,"default","gfx::state","",9,[[],["depth"]]],[11,"default","","",13,[[],["blendchannel"]]],[11,"default","","",7,[[],["stencilside"]]],[11,"default","","",16,[[],["refvalues"]]],[11,"default","","",15,[[],["color"]]],[11,"default","","",8,[[],["stencil"]]],[11,"default","","",14,[[],["blend"]]],[11,"sub_assign","gfx","Disables all flags enabled in the set.",131,N],[11,"sub_assign","gfx::state","Disables all flags enabled in the set.",132,N],[11,"partial_cmp","","",7,[[["self"],["stencilside"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"le","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"gt","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"ge","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["blendvalue"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["blendchannel"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"le","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"gt","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"ge","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["refvalues"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"le","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"gt","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"ge","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"partial_cmp","","",132,[[["self"],["colormask"]],["option",["ordering"]]]],[11,"lt","","",132,[[["self"],["colormask"]],["bool"]]],[11,"le","","",132,[[["self"],["colormask"]],["bool"]]],[11,"gt","","",132,[[["self"],["colormask"]],["bool"]]],[11,"ge","","",132,[[["self"],["colormask"]],["bool"]]],[11,"partial_cmp","","",133,[[["self"],["multisample"]],["option",["ordering"]]]],[11,"partial_cmp","","",14,[[["self"],["blend"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["blend"]],["bool"]]],[11,"le","","",14,[[["self"],["blend"]],["bool"]]],[11,"gt","","",14,[[["self"],["blend"]],["bool"]]],[11,"ge","","",14,[[["self"],["blend"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["comparison"]],["option",["ordering"]]]],[11,"partial_cmp","","",8,[[["self"],["stencil"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["stencil"]],["bool"]]],[11,"le","","",8,[[["self"],["stencil"]],["bool"]]],[11,"gt","","",8,[[["self"],["stencil"]],["bool"]]],[11,"ge","","",8,[[["self"],["stencil"]],["bool"]]],[11,"partial_cmp","gfx","",131,[[["self"],["mirror"]],["option",["ordering"]]]],[11,"lt","","",131,[[["self"],["mirror"]],["bool"]]],[11,"le","","",131,[[["self"],["mirror"]],["bool"]]],[11,"gt","","",131,[[["self"],["mirror"]],["bool"]]],[11,"ge","","",131,[[["self"],["mirror"]],["bool"]]],[11,"partial_cmp","gfx::state","",3,[[["self"],["rastermethod"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"le","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"gt","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"ge","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["factor"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["factor"]],["bool"]]],[11,"le","","",12,[[["self"],["factor"]],["bool"]]],[11,"gt","","",12,[[["self"],["factor"]],["bool"]]],[11,"ge","","",12,[[["self"],["factor"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["stencilop"]],["option",["ordering"]]]],[11,"partial_cmp","","",4,[[["self"],["rasterizer"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"le","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"gt","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"ge","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["offset"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["offset"]],["bool"]]],[11,"le","","",1,[[["self"],["offset"]],["bool"]]],[11,"gt","","",1,[[["self"],["offset"]],["bool"]]],[11,"ge","","",1,[[["self"],["offset"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["depth"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["depth"]],["bool"]]],[11,"le","","",9,[[["self"],["depth"]],["bool"]]],[11,"gt","","",9,[[["self"],["depth"]],["bool"]]],[11,"ge","","",9,[[["self"],["depth"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["frontface"]],["option",["ordering"]]]],[11,"partial_cmp","","",15,[[["self"],["color"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["color"]],["bool"]]],[11,"le","","",15,[[["self"],["color"]],["bool"]]],[11,"gt","","",15,[[["self"],["color"]],["bool"]]],[11,"ge","","",15,[[["self"],["color"]],["bool"]]],[11,"partial_cmp","gfx","",17,[[["self"],["rect"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["rect"]],["bool"]]],[11,"le","","",17,[[["self"],["rect"]],["bool"]]],[11,"gt","","",17,[[["self"],["rect"]],["bool"]]],[11,"ge","","",17,[[["self"],["rect"]],["bool"]]],[11,"partial_cmp","gfx::state","",2,[[["self"],["cullface"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["equation"]],["option",["ordering"]]]],[11,"bitand_assign","gfx","Disables all flags disabled in the set.",131,N],[11,"bitand_assign","gfx::state","Disables all flags disabled in the set.",132,N],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitor","gfx::state","Returns the union of the two sets of flags.",132,[[["self"],["colormask"]],["colormask"]]],[11,"bitor","gfx","Returns the union of the two sets of flags.",131,[[["self"],["mirror"]],["mirror"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::state","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",13,N],[11,"hash","","",10,N],[11,"hash","","",1,N],[11,"hash","gfx","",17,N],[11,"hash","gfx::state","",9,N],[11,"hash","","",5,N],[11,"hash","gfx","",131,N],[11,"hash","gfx::state","",0,N],[11,"hash","","",7,N],[11,"hash","","",8,N],[11,"hash","","",6,N],[11,"hash","","",3,N],[11,"hash","","",2,N],[11,"hash","","",11,N],[11,"hash","","",12,N],[11,"hash","","",15,N],[11,"hash","","",133,N],[11,"hash","","",4,N],[11,"hash","","",132,N],[11,"hash","","",14,N],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",132,[[["self"],["colormask"]],["colormask"]]],[11,"bitxor","gfx","Returns the left flags, but with all the right flags toggled.",131,[[["self"],["mirror"]],["mirror"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::state","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx","",131,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::state","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx","",17,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::state","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",133,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","","",132,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",132,[[["__d"]],["result",["colormask"]]]],[11,"deserialize","","",1,[[["__d"]],["result",["offset"]]]],[11,"deserialize","","",16,[[["__d"]],["result",["refvalues"]]]],[11,"deserialize","","",7,[[["__d"]],["result",["stencilside"]]]],[11,"deserialize","","",9,[[["__d"]],["result",["depth"]]]],[11,"deserialize","","",15,[[["__d"]],["result",["color"]]]],[11,"deserialize","","",133,[[["__d"]],["result",["multisample"]]]],[11,"deserialize","","",3,[[["__d"]],["result",["rastermethod"]]]],[11,"deserialize","","",2,[[["__d"]],["result",["cullface"]]]],[11,"deserialize","","",8,[[["__d"]],["result",["stencil"]]]],[11,"deserialize","","",5,[[["__d"]],["result",["comparison"]]]],[11,"deserialize","","",14,[[["__d"]],["result",["blend"]]]],[11,"deserialize","","",4,[[["__d"]],["result",["rasterizer"]]]],[11,"deserialize","","",10,[[["__d"]],["result",["equation"]]]],[11,"deserialize","","",13,[[["__d"]],["result",["blendchannel"]]]],[11,"deserialize","","",6,[[["__d"]],["result",["stencilop"]]]],[11,"deserialize","","",12,[[["__d"]],["result",["factor"]]]],[11,"deserialize","","",0,[[["__d"]],["result",["frontface"]]]],[11,"deserialize","gfx","",131,[[["__d"]],["result",["mirror"]]]],[11,"deserialize","gfx::state","",11,[[["__d"]],["result",["blendvalue"]]]],[11,"deserialize","gfx","",17,[[["__d"]],["result",["rect"]]]],[11,"extend","gfx::state","",132,N],[11,"extend","gfx","",131,N],[11,"not","gfx::state","Returns the complement of this set of flags.",132,[[["self"]],["colormask"]]],[11,"not","gfx","Returns the complement of this set of flags.",131,[[["self"]],["mirror"]]],[11,"bitxor_assign","","Toggles the set of flags.",131,N],[11,"bitxor_assign","gfx::state","Toggles the set of flags.",132,N],[11,"bitor_assign","gfx","Adds the set of flags.",131,N],[11,"bitor_assign","gfx::state","Adds the set of flags.",132,N],[11,"eq","","",1,[[["self"],["offset"]],["bool"]]],[11,"ne","","",1,[[["self"],["offset"]],["bool"]]],[11,"eq","","",132,[[["self"],["colormask"]],["bool"]]],[11,"ne","","",132,[[["self"],["colormask"]],["bool"]]],[11,"eq","","",8,[[["self"],["stencil"]],["bool"]]],[11,"ne","","",8,[[["self"],["stencil"]],["bool"]]],[11,"eq","","",5,[[["self"],["comparison"]],["bool"]]],[11,"eq","","",9,[[["self"],["depth"]],["bool"]]],[11,"ne","","",9,[[["self"],["depth"]],["bool"]]],[11,"eq","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"ne","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"eq","","",12,[[["self"],["factor"]],["bool"]]],[11,"ne","","",12,[[["self"],["factor"]],["bool"]]],[11,"eq","","",133,[[["self"],["multisample"]],["bool"]]],[11,"eq","","",10,[[["self"],["equation"]],["bool"]]],[11,"eq","","",6,[[["self"],["stencilop"]],["bool"]]],[11,"eq","","",15,[[["self"],["color"]],["bool"]]],[11,"ne","","",15,[[["self"],["color"]],["bool"]]],[11,"eq","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"ne","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"eq","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"ne","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"eq","","",2,[[["self"],["cullface"]],["bool"]]],[11,"eq","","",11,[[["self"],["blendvalue"]],["bool"]]],[11,"eq","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"ne","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"eq","","",0,[[["self"],["frontface"]],["bool"]]],[11,"eq","","",14,[[["self"],["blend"]],["bool"]]],[11,"ne","","",14,[[["self"],["blend"]],["bool"]]],[11,"eq","gfx","",131,[[["self"],["mirror"]],["bool"]]],[11,"ne","","",131,[[["self"],["mirror"]],["bool"]]],[11,"eq","","",17,[[["self"],["rect"]],["bool"]]],[11,"ne","","",17,[[["self"],["rect"]],["bool"]]],[11,"eq","gfx::state","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"ne","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"bitand","gfx::memory","Returns the intersection between the two sets of flags.",134,[[["self"],["access"]],["access"]]],[11,"bitand","gfx::texture","Returns the intersection between the two sets of flags.",135,[[["self"],["depthstencilflags"]],["depthstencilflags"]]],[11,"bitand","gfx::shade","Returns the intersection between the two sets of flags.",136,[[["self"],["usage"]],["usage"]]],[11,"bitand","gfx::memory","Returns the intersection between the two sets of flags.",137,[[["self"],["bind"]],["bind"]]],[11,"fmt","gfx::shade","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","gfx","",21,[[["self"]],["str"]]],[11,"description","gfx::shade::core","",138,[[["self"]],["str"]]],[11,"description","gfx::mapping","",39,[[["self"]],["str"]]],[11,"description","gfx::texture","",41,[[["self"]],["str"]]],[11,"description","","",42,[[["self"]],["str"]]],[11,"description","gfx::shade::core","",127,[[["self"]],["str"]]],[11,"description","gfx","",60,[[["self"]],["str"]]],[11,"cause","","",60,[[["self"]],["option",["error"]]]],[11,"description","","",58,[[["self"]],["str"]]],[11,"cause","","",58,[[["self"]],["option",["error"]]]],[11,"description","gfx::shade::core","",126,[[["self"]],["str"]]],[11,"description","gfx","",59,[[["self"]],["str"]]],[11,"cause","","",59,[[["self"]],["option",["error"]]]],[11,"description","gfx::buffer","",25,[[["self"]],["str"]]],[11,"deref_mut","gfx::mapping","",139,N],[11,"get_channel_type","gfx::format","",140,[[],["channeltype"]]],[11,"get_channel_type","","",141,[[],["channeltype"]]],[11,"get_channel_type","","",142,[[],["channeltype"]]],[11,"get_channel_type","","",143,[[],["channeltype"]]],[11,"get_channel_type","","",144,[[],["channeltype"]]],[11,"get_channel_type","","",145,[[],["channeltype"]]],[11,"bitor","gfx::texture","Returns the union of the two sets of flags.",135,[[["self"],["depthstencilflags"]],["depthstencilflags"]]],[11,"bitor","gfx::memory","Returns the union of the two sets of flags.",137,[[["self"],["bind"]],["bind"]]],[11,"bitor","","Returns the union of the two sets of flags.",134,[[["self"],["access"]],["access"]]],[11,"bitor","gfx::shade","Returns the union of the two sets of flags.",136,[[["self"],["usage"]],["usage"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","gfx","",19,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::buffer","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",123,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",54,[[["self"],["__s"]],["result"]]],[11,"serialize","","",46,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",146,[[["self"],["__s"]],["result"]]],[11,"serialize","","",147,[[["self"],["__s"]],["result"]]],[11,"serialize","","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","","",148,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",125,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",47,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",143,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",43,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",109,[[["self"],["__s"]],["result"]]],[11,"serialize","","",110,[[["self"],["__s"]],["result"]]],[11,"serialize","","",120,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",149,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade","",136,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::memory","",137,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",56,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",150,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",113,[[["self"],["__s"]],["result"]]],[11,"serialize","","",111,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",151,[[["self"],["__s"]],["result"]]],[11,"serialize","","",28,[[["self"],["__s"]],["result"]]],[11,"serialize","","",145,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",152,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",140,[[["self"],["__s"]],["result"]]],[11,"serialize","","",153,[[["self"],["__s"]],["result"]]],[11,"serialize","","",30,[[["self"],["__s"]],["result"]]],[11,"serialize","","",154,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::memory","",134,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",62,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",155,[[["self"],["__s"]],["result"]]],[11,"serialize","","",156,[[["self"],["__s"]],["result"]]],[11,"serialize","","",141,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",49,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",29,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",107,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::memory","",40,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",45,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",157,[[["self"],["__s"]],["result"]]],[11,"serialize","","",144,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",119,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",158,[[["self"],["__s"]],["result"]]],[11,"serialize","","",38,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",124,[[["self"],["__s"]],["result"]]],[11,"serialize","","",122,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::pso::buffer","",76,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",115,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",159,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",50,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",160,[[["self"],["__s"]],["result"]]],[11,"serialize","","",35,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",63,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",161,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",116,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",27,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",52,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx","",21,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",108,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",162,[[["self"],["__s"]],["result"]]],[11,"serialize","","",36,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::buffer","",24,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",114,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",163,[[["self"],["__s"]],["result"]]],[11,"serialize","","",164,[[["self"],["__s"]],["result"]]],[11,"serialize","","",34,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",135,[[["self"],["__s"]],["result"]]],[11,"serialize","","",55,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",37,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",53,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",121,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",165,[[["self"],["__s"]],["result"]]],[11,"serialize","","",166,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::pso","",72,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",142,[[["self"],["__s"]],["result"]]],[11,"serialize","","",167,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",48,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::shade::core","",112,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::texture","",44,[[["self"],["__s"]],["result"]]],[11,"serialize","","",51,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx::format","",168,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",146,[[["__d"]],["result",["b8_g8_r8_a8"]]]],[11,"deserialize","","",150,[[["__d"]],["result",["r16"]]]],[11,"deserialize","gfx::shade::core","",122,[[["__d"]],["result",["texturevar"]]]],[11,"deserialize","gfx::format","",27,[[["__d"]],["result",["surfacetype"]]]],[11,"deserialize","gfx::texture","",47,[[["__d"]],["result",["mipmap"]]]],[11,"deserialize","gfx::format","",28,[[["__d"]],["result",["channelsource"]]]],[11,"deserialize","","",38,[[["__d"]],["result",["f16"]]]],[11,"deserialize","","",164,[[["__d"]],["result",["r4_g4"]]]],[11,"deserialize","gfx::buffer","",24,[[["__d"]],["result",["info"]]]],[11,"deserialize","gfx::shade::core","",108,[[["__d"]],["result",["iscomparison"]]]],[11,"deserialize","","",63,[[["__d"]],["result",["uniformvalue"]]]],[11,"deserialize","gfx::memory","",137,[[["__d"]],["result",["bind"]]]],[11,"deserialize","gfx::shade::core","",111,[[["__d"]],["result",["matrixformat"]]]],[11,"deserialize","gfx::format","",158,[[["__d"]],["result",["r10_g10_b10_a2"]]]],[11,"deserialize","","",167,[[["__d"]],["result",["r16_g16_b16_a16"]]]],[11,"deserialize","gfx::shade::core","",125,[[["__d"]],["result",["outputvar"]]]],[11,"deserialize","gfx::texture","",53,[[["__d"]],["result",["info"]]]],[11,"deserialize","gfx::format","",163,[[["__d"]],["result",["r8"]]]],[11,"deserialize","gfx","",19,[[["__d"]],["result",["primitive"]]]],[11,"deserialize","gfx::texture","",56,[[["__d"]],["result",["depthstencildesc"]]]],[11,"deserialize","gfx::shade::core","",110,[[["__d"]],["result",["isrect"]]]],[11,"deserialize","","",123,[[["__d"]],["result",["unorderedvar"]]]],[11,"deserialize","gfx::format","",141,[[["__d"]],["result",["srgb"]]]],[11,"deserialize","","",162,[[["__d"]],["result",["r32"]]]],[11,"deserialize","gfx::shade::core","",62,[[["__d"]],["result",["programinfo"]]]],[11,"deserialize","","",124,[[["__d"]],["result",["samplervar"]]]],[11,"deserialize","gfx::texture","",43,[[["__d"]],["result",["aamode"]]]],[11,"deserialize","gfx::format","",145,[[["__d"]],["result",["inorm"]]]],[11,"deserialize","gfx::texture","",152,[[["__d"]],["result",["lod"]]]],[11,"deserialize","gfx::format","",140,[[["__d"]],["result",["uint"]]]],[11,"deserialize","","",34,[[["__d"]],["result",["u8norm"]]]],[11,"deserialize","","",144,[[["__d"]],["result",["int"]]]],[11,"deserialize","gfx::texture","",55,[[["__d"]],["result",["renderdesc"]]]],[11,"deserialize","gfx::format","",153,[[["__d"]],["result",["r32_g32_b32"]]]],[11,"deserialize","gfx::shade::core","",119,[[["__d"]],["result",["attributevar"]]]],[11,"deserialize","gfx::format","",156,[[["__d"]],["result",["r32_g32_b32_a32"]]]],[11,"deserialize","","",148,[[["__d"]],["result",["r16_g16_b16"]]]],[11,"deserialize","","",26,[[["__d"]],["result",["channeltype"]]]],[11,"deserialize","gfx::texture","",52,[[["__d"]],["result",["samplerinfo"]]]],[11,"deserialize","gfx::format","",36,[[["__d"]],["result",["u16norm"]]]],[11,"deserialize","gfx::memory","",40,[[["__d"]],["result",["usage"]]]],[11,"deserialize","","",134,[[["__d"]],["result",["access"]]]],[11,"deserialize","gfx::format","",159,[[["__d"]],["result",["r11_g11_b10"]]]],[11,"deserialize","gfx::shade::core","",121,[[["__d"]],["result",["constantbuffervar"]]]],[11,"deserialize","gfx","",21,[[["__d"]],["result",["submissionerror"]]]],[11,"deserialize","gfx::texture","",51,[[["__d"]],["result",["packedcolor"]]]],[11,"deserialize","gfx::shade::core","",115,[[["__d"]],["result",["containertype"]]]],[11,"deserialize","gfx::pso::buffer","",76,[[["__d"]],["result",["element"]]]],[11,"deserialize","gfx::texture","",45,[[["__d"]],["result",["cubeface"]]]],[11,"deserialize","gfx::format","",154,[[["__d"]],["result",["r8_g8_b8_a8"]]]],[11,"deserialize","","",168,[[["__d"]],["result",["d24"]]]],[11,"deserialize","gfx::buffer","",23,[[["__d"]],["result",["role"]]]],[11,"deserialize","gfx::shade::core","",113,[[["__d"]],["result",["samplertype"]]]],[11,"deserialize","gfx::format","",151,[[["__d"]],["result",["r4_g4_b4_a4"]]]],[11,"deserialize","","",149,[[["__d"]],["result",["d32"]]]],[11,"deserialize","","",157,[[["__d"]],["result",["r5_g6_b5"]]]],[11,"deserialize","","",143,[[["__d"]],["result",["unorm"]]]],[11,"deserialize","","",35,[[["__d"]],["result",["i8norm"]]]],[11,"deserialize","gfx::texture","",54,[[["__d"]],["result",["resourcedesc"]]]],[11,"deserialize","gfx::pso","",72,[[["__d"]],["result",["descriptor"]]]],[11,"deserialize","gfx::format","",37,[[["__d"]],["result",["i16norm"]]]],[11,"deserialize","gfx::texture","",46,[[["__d"]],["result",["kind"]]]],[11,"deserialize","gfx::shade::core","",109,[[["__d"]],["result",["ismultisample"]]]],[11,"deserialize","gfx::format","",29,[[["__d"]],["result",["swizzle"]]]],[11,"deserialize","","",142,[[["__d"]],["result",["float"]]]],[11,"deserialize","gfx::shade::core","",116,[[["__d"]],["result",["stage"]]]],[11,"deserialize","","",107,[[["__d"]],["result",["isarray"]]]],[11,"deserialize","gfx::format","",160,[[["__d"]],["result",["r5_g5_b5_a1"]]]],[11,"deserialize","","",165,[[["__d"]],["result",["d16"]]]],[11,"deserialize","","",147,[[["__d"]],["result",["r16_g16"]]]],[11,"deserialize","gfx::texture","",49,[[["__d"]],["result",["texturecopyregion"]]]],[11,"deserialize","","",48,[[["__d"]],["result",["imageinfocommon"]]]],[11,"deserialize","gfx::shade","",136,[[["__d"]],["result",["usage"]]]],[11,"deserialize","gfx::shade::core","",114,[[["__d"]],["result",["basetype"]]]],[11,"deserialize","gfx::format","",166,[[["__d"]],["result",["d24_s8"]]]],[11,"deserialize","gfx::texture","",44,[[["__d"]],["result",["filtermethod"]]]],[11,"deserialize","gfx::format","",30,[[["__d"]],["result",["format"]]]],[11,"deserialize","gfx::texture","",135,[[["__d"]],["result",["depthstencilflags"]]]],[11,"deserialize","gfx::format","",161,[[["__d"]],["result",["r32_g32"]]]],[11,"deserialize","gfx::shade::core","",120,[[["__d"]],["result",["constvar"]]]],[11,"deserialize","gfx::format","",155,[[["__d"]],["result",["r8_g8"]]]],[11,"deserialize","gfx::texture","",50,[[["__d"]],["result",["wrapmode"]]]],[11,"deserialize","gfx::shade::core","",112,[[["__d"]],["result",["texturetype"]]]],[11,"deref","gfx::mapping","",139,N],[11,"new","gfx::pso","Creates empty access informations",169,[[],["accessinfo"]]],[11,"clear","","Clear access informations",169,N],[11,"buffer_read","","Register a buffer read access",169,N],[11,"buffer_write","","Register a buffer write access",169,N],[11,"mapped_reads","","Returns the mapped buffers that The GPU will read from",169,[[["self"]],["iter",["rawbuffer"]]]],[11,"mapped_writes","","Returns the mapped buffers that The GPU will write to",169,[[["self"]],["iter",["rawbuffer"]]]],[11,"has_mapped_reads","","Is there any mapped buffer reads ?",169,[[["self"]],["bool"]]],[11,"has_mapped_writes","","Is there any mapped buffer writes ?",169,[[["self"]],["bool"]]],[11,"take_accesses","","Takes all the accesses necessary for submission",169,[[["self"]],["result",["accessguard","submissionerror"]]]],[11,"get_info","gfx::texture","Get texture descriptor",170,[[["self"]],["info"]]],[11,"deref","gfx::handle","",171,N],[11,"get_info","gfx::buffer","Get buffer info",172,[[["self"]],["info"]]],[11,"is_mapped","","Is this buffer mapped ?",172,[[["self"]],["bool"]]],[11,"deref","gfx::handle","",173,N],[11,"deref","gfx::mapping","",174,N],[11,"get_info","gfx::shade::core","Get program info",175,[[["self"]],["programinfo"]]],[11,"deref","gfx::handle","",176,N],[11,"fmt","gfx::texture","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"extend","","",134,N],[11,"extend","","",137,N],[11,"extend","gfx::texture","",135,N],[11,"extend","gfx::shade","",136,N],[11,"bitxor_assign","","Toggles the set of flags.",136,N],[11,"bitxor_assign","gfx::texture","Toggles the set of flags.",135,N],[11,"bitxor_assign","gfx::memory","Toggles the set of flags.",134,N],[11,"bitxor_assign","","Toggles the set of flags.",137,N],[11,"bitor_assign","","Adds the set of flags.",134,N],[11,"bitor_assign","gfx::texture","Adds the set of flags.",135,N],[11,"bitor_assign","gfx::shade","Adds the set of flags.",136,N],[11,"bitor_assign","gfx::memory","Adds the set of flags.",137,N],[11,"fmt","gfx::shade::core","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::mapping","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::buffer","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","gfx::handle","",177,[[["self"]],["depthstencilview"]]],[11,"clone","gfx","",60,[[["self"]],["combinederror"]]],[11,"clone","gfx::shade::core","",108,[[["self"]],["iscomparison"]]],[11,"clone","gfx::format","",162,[[["self"]],["r32"]]],[11,"clone","gfx::shade::core","",138,[[["self"]],["createprogramerror"]]],[11,"clone","","",119,[[["self"]],["attributevar"]]],[11,"clone","","",122,[[["self"]],["texturevar"]]],[11,"clone","gfx::handle","",178,[[["self"]],["rendertargetview"]]],[11,"clone","gfx::pso","",72,[[["self"]],["descriptor"]]],[11,"clone","gfx::shade::core","",63,[[["self"]],["uniformvalue"]]],[11,"clone","gfx::format","",153,[[["self"]],["r32_g32_b32"]]],[11,"clone","","",29,[[["self"]],["swizzle"]]],[11,"clone","gfx::shade::core","",110,[[["self"]],["isrect"]]],[11,"clone","gfx","",58,[[["self"]],["resourceviewerror"]]],[11,"clone","gfx::shade::core","",116,[[["self"]],["stage"]]],[11,"clone","gfx::handle","",179,[[["self"]],["sampler"]]],[11,"clone","gfx::buffer","",24,[[["self"]],["info"]]],[11,"clone","gfx::format","",159,[[["self"]],["r11_g11_b10"]]],[11,"clone","","",26,[[["self"]],["channeltype"]]],[11,"clone","","",28,[[["self"]],["channelsource"]]],[11,"clone","","",148,[[["self"]],["r16_g16_b16"]]],[11,"clone","gfx::handle","",180,[[["self"]],["rawshaderresourceview"]]],[11,"clone","","",181,[[["self"]],["shader"]]],[11,"clone","gfx::texture","",47,[[["self"]],["mipmap"]]],[11,"clone","gfx::handle","",182,[[["self"]],["rawunorderedaccessview"]]],[11,"clone","gfx::shade::core","",114,[[["self"]],["basetype"]]],[11,"clone","gfx::texture","",43,[[["self"]],["aamode"]]],[11,"clone","gfx","",183,[[["self"]],["pixelshader"]]],[11,"clone","gfx::format","",144,[[["self"]],["int"]]],[11,"clone","gfx::memory","",134,[[["self"]],["access"]]],[11,"clone","gfx::texture","",53,[[["self"]],["info"]]],[11,"clone","","",42,[[["self"]],["layererror"]]],[11,"clone","","",135,[[["self"]],["depthstencilflags"]]],[11,"clone","gfx::handle","",71,[[["self"]],["buffer"]]],[11,"clone","gfx::buffer","",23,[[["self"]],["role"]]],[11,"clone","gfx","",22,[[["self"]],["shaderset"]]],[11,"clone","gfx::format","",160,[[["self"]],["r5_g5_b5_a1"]]],[11,"clone","","",155,[[["self"]],["r8_g8"]]],[11,"clone","","",140,[[["self"]],["uint"]]],[11,"clone","gfx::shade::core","",113,[[["self"]],["samplertype"]]],[11,"clone","gfx::texture","",152,[[["self"]],["lod"]]],[11,"clone","gfx::shade::core","",123,[[["self"]],["unorderedvar"]]],[11,"clone","gfx::format","",168,[[["self"]],["d24"]]],[11,"clone","gfx::shade::core","",62,[[["self"]],["programinfo"]]],[11,"clone","gfx::format","",151,[[["self"]],["r4_g4_b4_a4"]]],[11,"clone","gfx::handle","",184,[[["self"]],["rawpipelinestate"]]],[11,"clone","gfx::pso::buffer","",76,[[["self"]],["element"]]],[11,"clone","gfx::texture","",50,[[["self"]],["wrapmode"]]],[11,"clone","gfx::format","",156,[[["self"]],["r32_g32_b32_a32"]]],[11,"clone","gfx::texture","",52,[[["self"]],["samplerinfo"]]],[11,"clone","gfx::handle","",185,[[["self"]],["fence"]]],[11,"clone","gfx::format","",141,[[["self"]],["srgb"]]],[11,"clone","gfx","",186,[[["self"]],["geometryshader"]]],[11,"clone","","",59,[[["self"]],["targetviewerror"]]],[11,"clone","gfx::texture","",41,[[["self"]],["creationerror"]]],[11,"clone","gfx::format","",167,[[["self"]],["r16_g16_b16_a16"]]],[11,"clone","","",36,[[["self"]],["u16norm"]]],[11,"clone","gfx::shade::core","",111,[[["self"]],["matrixformat"]]],[11,"clone","gfx::mapping","",39,[[["self"]],["error"]]],[11,"clone","gfx::memory","",137,[[["self"]],["bind"]]],[11,"clone","gfx::format","",158,[[["self"]],["r10_g10_b10_a2"]]],[11,"clone","gfx::texture","",44,[[["self"]],["filtermethod"]]],[11,"clone","gfx","",21,[[["self"]],["submissionerror"]]],[11,"clone","gfx::buffer","",25,[[["self"]],["creationerror"]]],[11,"clone","gfx","",187,[[["self"]],["vertexshader"]]],[11,"clone","gfx::format","",35,[[["self"]],["i8norm"]]],[11,"clone","gfx::handle","",173,[[["self"]],["rawbuffer"]]],[11,"clone","gfx::format","",149,[[["self"]],["d32"]]],[11,"clone","","",146,[[["self"]],["b8_g8_r8_a8"]]],[11,"clone","","",145,[[["self"]],["inorm"]]],[11,"clone","gfx::texture","",46,[[["self"]],["kind"]]],[11,"clone","gfx::handle","",188,[[["self"]],["shaderresourceview"]]],[11,"clone","gfx::format","",38,[[["self"]],["f16"]]],[11,"clone","","",30,[[["self"]],["format"]]],[11,"clone","","",143,[[["self"]],["unorm"]]],[11,"clone","gfx::shade::core","",115,[[["self"]],["containertype"]]],[11,"clone","gfx::texture","",48,[[["self"]],["imageinfocommon"]]],[11,"clone","gfx::handle","",189,[[["self"]],["rawrendertargetview"]]],[11,"clone","gfx::format","",164,[[["self"]],["r4_g4"]]],[11,"clone","gfx::texture","",49,[[["self"]],["texturecopyregion"]]],[11,"clone","gfx::handle","",190,[[["self"]],["rawdepthstencilview"]]],[11,"clone","gfx::format","",27,[[["self"]],["surfacetype"]]],[11,"clone","gfx::handle","",176,[[["self"]],["program"]]],[11,"clone","gfx::format","",166,[[["self"]],["d24_s8"]]],[11,"clone","gfx","",191,[[["self"]],["domainshader"]]],[11,"clone","gfx::format","",142,[[["self"]],["float"]]],[11,"clone","gfx::shade::core","",126,[[["self"]],["compatibilityerror"]]],[11,"clone","","",109,[[["self"]],["ismultisample"]]],[11,"clone","gfx::format","",163,[[["self"]],["r8"]]],[11,"clone","gfx::handle","",192,[[["self"]],["unorderedaccessview"]]],[11,"clone","gfx::shade::core","",125,[[["self"]],["outputvar"]]],[11,"clone","gfx::texture","",54,[[["self"]],["resourcedesc"]]],[11,"clone","","",56,[[["self"]],["depthstencildesc"]]],[11,"clone","gfx::format","",154,[[["self"]],["r8_g8_b8_a8"]]],[11,"clone","gfx::handle","",171,[[["self"]],["rawtexture"]]],[11,"clone","gfx::format","",34,[[["self"]],["u8norm"]]],[11,"clone","gfx","",193,[[["self"]],["hullshader"]]],[11,"clone","gfx::shade::core","",107,[[["self"]],["isarray"]]],[11,"clone","","",120,[[["self"]],["constvar"]]],[11,"clone","gfx::shade","",136,[[["self"]],["usage"]]],[11,"clone","gfx::shade::core","",127,[[["self"]],["createshadererror"]]],[11,"clone","gfx::texture","",45,[[["self"]],["cubeface"]]],[11,"clone","","",55,[[["self"]],["renderdesc"]]],[11,"clone","gfx::format","",161,[[["self"]],["r32_g32"]]],[11,"clone","gfx::texture","",51,[[["self"]],["packedcolor"]]],[11,"clone","gfx::handle","",194,[[["self"]],["texture"]]],[11,"clone","gfx","",19,[[["self"]],["primitive"]]],[11,"clone","gfx::format","",37,[[["self"]],["i16norm"]]],[11,"clone","","",165,[[["self"]],["d16"]]],[11,"clone","gfx::shade::core","",121,[[["self"]],["constantbuffervar"]]],[11,"clone","gfx::pso","",169,[[["self"]],["accessinfo"]]],[11,"clone","gfx::memory","",40,[[["self"]],["usage"]]],[11,"clone","gfx::shade::core","",112,[[["self"]],["texturetype"]]],[11,"clone","gfx::format","",157,[[["self"]],["r5_g6_b5"]]],[11,"clone","","",150,[[["self"]],["r16"]]],[11,"clone","gfx::shade::core","",124,[[["self"]],["samplervar"]]],[11,"clone","gfx::format","",147,[[["self"]],["r16_g16"]]],[11,"get_surface_type","","",155,[[],["surfacetype"]]],[11,"get_surface_type","","",160,[[],["surfacetype"]]],[11,"get_surface_type","","",165,[[],["surfacetype"]]],[11,"get_surface_type","","",168,[[],["surfacetype"]]],[11,"get_surface_type","","",147,[[],["surfacetype"]]],[11,"get_surface_type","","",167,[[],["surfacetype"]]],[11,"get_surface_type","","",153,[[],["surfacetype"]]],[11,"get_surface_type","","",163,[[],["surfacetype"]]],[11,"get_surface_type","","",148,[[],["surfacetype"]]],[11,"get_surface_type","","",156,[[],["surfacetype"]]],[11,"get_surface_type","","",154,[[],["surfacetype"]]],[11,"get_surface_type","","",158,[[],["surfacetype"]]],[11,"get_surface_type","","",159,[[],["surfacetype"]]],[11,"get_surface_type","","",164,[[],["surfacetype"]]],[11,"get_surface_type","","",150,[[],["surfacetype"]]],[11,"get_surface_type","","",157,[[],["surfacetype"]]],[11,"get_surface_type","","",151,[[],["surfacetype"]]],[11,"get_surface_type","","",161,[[],["surfacetype"]]],[11,"get_surface_type","","",149,[[],["surfacetype"]]],[11,"get_surface_type","","",162,[[],["surfacetype"]]],[11,"get_surface_type","","",166,[[],["surfacetype"]]],[11,"get_surface_type","","",146,[[],["surfacetype"]]],[11,"fmt","gfx::shade::core","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::buffer","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::buffer","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::pso","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::buffer","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::mapping","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::pso","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::buffer","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::mapping","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::mapping","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::texture","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::pso::buffer","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::handle","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade::core","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::format","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",168,[[["self"],["d24"]],["ordering"]]],[11,"cmp","gfx::texture","",56,[[["self"],["depthstencildesc"]],["ordering"]]],[11,"cmp","","",50,[[["self"],["wrapmode"]],["ordering"]]],[11,"cmp","gfx::format","",35,[[["self"],["i8norm"]],["ordering"]]],[11,"cmp","gfx::texture","",47,[[["self"],["mipmap"]],["ordering"]]],[11,"cmp","gfx::format","",147,[[["self"],["r16_g16"]],["ordering"]]],[11,"cmp","","",145,[[["self"],["inorm"]],["ordering"]]],[11,"cmp","","",140,[[["self"],["uint"]],["ordering"]]],[11,"cmp","","",36,[[["self"],["u16norm"]],["ordering"]]],[11,"cmp","gfx::texture","",48,[[["self"],["imageinfocommon"]],["ordering"]]],[11,"cmp","gfx::format","",37,[[["self"],["i16norm"]],["ordering"]]],[11,"cmp","","",167,[[["self"],["r16_g16_b16_a16"]],["ordering"]]],[11,"cmp","","",156,[[["self"],["r32_g32_b32_a32"]],["ordering"]]],[11,"cmp","","",159,[[["self"],["r11_g11_b10"]],["ordering"]]],[11,"cmp","gfx::texture","",135,[[["self"],["depthstencilflags"]],["ordering"]]],[11,"cmp","gfx::format","",38,[[["self"],["f16"]],["ordering"]]],[11,"cmp","","",142,[[["self"],["float"]],["ordering"]]],[11,"cmp","","",158,[[["self"],["r10_g10_b10_a2"]],["ordering"]]],[11,"cmp","gfx::texture","",53,[[["self"],["info"]],["ordering"]]],[11,"cmp","gfx::format","",161,[[["self"],["r32_g32"]],["ordering"]]],[11,"cmp","gfx::texture","",44,[[["self"],["filtermethod"]],["ordering"]]],[11,"cmp","gfx::format","",150,[[["self"],["r16"]],["ordering"]]],[11,"cmp","gfx::texture","",54,[[["self"],["resourcedesc"]],["ordering"]]],[11,"cmp","gfx::format","",141,[[["self"],["srgb"]],["ordering"]]],[11,"cmp","","",153,[[["self"],["r32_g32_b32"]],["ordering"]]],[11,"cmp","","",146,[[["self"],["b8_g8_r8_a8"]],["ordering"]]],[11,"cmp","gfx::texture","",43,[[["self"],["aamode"]],["ordering"]]],[11,"cmp","gfx::format","",163,[[["self"],["r8"]],["ordering"]]],[11,"cmp","gfx::texture","",45,[[["self"],["cubeface"]],["ordering"]]],[11,"cmp","gfx::format","",165,[[["self"],["d16"]],["ordering"]]],[11,"cmp","gfx::shade","",136,[[["self"],["usage"]],["ordering"]]],[11,"cmp","gfx::format","",144,[[["self"],["int"]],["ordering"]]],[11,"cmp","","",157,[[["self"],["r5_g6_b5"]],["ordering"]]],[11,"cmp","","",162,[[["self"],["r32"]],["ordering"]]],[11,"cmp","","",155,[[["self"],["r8_g8"]],["ordering"]]],[11,"cmp","gfx::memory","",40,[[["self"],["usage"]],["ordering"]]],[11,"cmp","gfx::format","",148,[[["self"],["r16_g16_b16"]],["ordering"]]],[11,"cmp","gfx::texture","",46,[[["self"],["kind"]],["ordering"]]],[11,"cmp","gfx::format","",149,[[["self"],["d32"]],["ordering"]]],[11,"cmp","","",160,[[["self"],["r5_g5_b5_a1"]],["ordering"]]],[11,"cmp","","",27,[[["self"],["surfacetype"]],["ordering"]]],[11,"cmp","","",29,[[["self"],["swizzle"]],["ordering"]]],[11,"cmp","","",164,[[["self"],["r4_g4"]],["ordering"]]],[11,"cmp","","",30,[[["self"],["format"]],["ordering"]]],[11,"cmp","gfx::texture","",49,[[["self"],["texturecopyregion"]],["ordering"]]],[11,"cmp","","",55,[[["self"],["renderdesc"]],["ordering"]]],[11,"cmp","gfx::memory","",137,[[["self"],["bind"]],["ordering"]]],[11,"cmp","gfx::format","",143,[[["self"],["unorm"]],["ordering"]]],[11,"cmp","","",154,[[["self"],["r8_g8_b8_a8"]],["ordering"]]],[11,"cmp","gfx::memory","",134,[[["self"],["access"]],["ordering"]]],[11,"cmp","gfx::format","",166,[[["self"],["d24_s8"]],["ordering"]]],[11,"cmp","","",26,[[["self"],["channeltype"]],["ordering"]]],[11,"cmp","","",34,[[["self"],["u8norm"]],["ordering"]]],[11,"cmp","","",28,[[["self"],["channelsource"]],["ordering"]]],[11,"cmp","","",151,[[["self"],["r4_g4_b4_a4"]],["ordering"]]],[11,"sub","gfx::texture","Returns the set difference of the two sets of flags.",135,[[["self"],["depthstencilflags"]],["depthstencilflags"]]],[11,"sub","gfx::memory","Returns the set difference of the two sets of flags.",137,[[["self"],["bind"]],["bind"]]],[11,"sub","gfx::shade","Returns the set difference of the two sets of flags.",136,[[["self"],["usage"]],["usage"]]],[11,"sub","gfx::memory","Returns the set difference of the two sets of flags.",134,[[["self"],["access"]],["access"]]],[11,"from_iter","","",134,[[["t"]],["access"]]],[11,"from_iter","","",137,[[["t"]],["bind"]]],[11,"from_iter","gfx::shade","",136,[[["t"]],["usage"]]],[11,"from_iter","gfx::texture","",135,[[["t"]],["depthstencilflags"]]],[11,"sub_assign","gfx::memory","Disables all flags enabled in the set.",134,N],[11,"sub_assign","gfx::shade","Disables all flags enabled in the set.",136,N],[11,"sub_assign","gfx::texture","Disables all flags enabled in the set.",135,N],[11,"sub_assign","gfx::memory","Disables all flags enabled in the set.",137,N],[11,"partial_cmp","","",40,[[["self"],["usage"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::format","",162,[[["self"],["r32"]],["option",["ordering"]]]],[11,"partial_cmp","","",153,[[["self"],["r32_g32_b32"]],["option",["ordering"]]]],[11,"partial_cmp","","",151,[[["self"],["r4_g4_b4_a4"]],["option",["ordering"]]]],[11,"partial_cmp","","",28,[[["self"],["channelsource"]],["option",["ordering"]]]],[11,"partial_cmp","","",144,[[["self"],["int"]],["option",["ordering"]]]],[11,"partial_cmp","","",145,[[["self"],["inorm"]],["option",["ordering"]]]],[11,"partial_cmp","","",159,[[["self"],["r11_g11_b10"]],["option",["ordering"]]]],[11,"partial_cmp","","",141,[[["self"],["srgb"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::texture","",55,[[["self"],["renderdesc"]],["option",["ordering"]]]],[11,"lt","","",55,[[["self"],["renderdesc"]],["bool"]]],[11,"le","","",55,[[["self"],["renderdesc"]],["bool"]]],[11,"gt","","",55,[[["self"],["renderdesc"]],["bool"]]],[11,"ge","","",55,[[["self"],["renderdesc"]],["bool"]]],[11,"partial_cmp","","",47,[[["self"],["mipmap"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::format","",148,[[["self"],["r16_g16_b16"]],["option",["ordering"]]]],[11,"partial_cmp","","",163,[[["self"],["r8"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::texture","",45,[[["self"],["cubeface"]],["option",["ordering"]]]],[11,"partial_cmp","","",44,[[["self"],["filtermethod"]],["option",["ordering"]]]],[11,"lt","","",44,[[["self"],["filtermethod"]],["bool"]]],[11,"le","","",44,[[["self"],["filtermethod"]],["bool"]]],[11,"gt","","",44,[[["self"],["filtermethod"]],["bool"]]],[11,"ge","","",44,[[["self"],["filtermethod"]],["bool"]]],[11,"partial_cmp","gfx::shade::core","",63,[[["self"],["uniformvalue"]],["option",["ordering"]]]],[11,"lt","","",63,[[["self"],["uniformvalue"]],["bool"]]],[11,"le","","",63,[[["self"],["uniformvalue"]],["bool"]]],[11,"gt","","",63,[[["self"],["uniformvalue"]],["bool"]]],[11,"ge","","",63,[[["self"],["uniformvalue"]],["bool"]]],[11,"partial_cmp","gfx::memory","",134,[[["self"],["access"]],["option",["ordering"]]]],[11,"lt","","",134,[[["self"],["access"]],["bool"]]],[11,"le","","",134,[[["self"],["access"]],["bool"]]],[11,"gt","","",134,[[["self"],["access"]],["bool"]]],[11,"ge","","",134,[[["self"],["access"]],["bool"]]],[11,"partial_cmp","gfx::texture","",48,[[["self"],["imageinfocommon"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["imageinfocommon"]],["bool"]]],[11,"le","","",48,[[["self"],["imageinfocommon"]],["bool"]]],[11,"gt","","",48,[[["self"],["imageinfocommon"]],["bool"]]],[11,"ge","","",48,[[["self"],["imageinfocommon"]],["bool"]]],[11,"partial_cmp","","",43,[[["self"],["aamode"]],["option",["ordering"]]]],[11,"lt","","",43,[[["self"],["aamode"]],["bool"]]],[11,"le","","",43,[[["self"],["aamode"]],["bool"]]],[11,"gt","","",43,[[["self"],["aamode"]],["bool"]]],[11,"ge","","",43,[[["self"],["aamode"]],["bool"]]],[11,"partial_cmp","gfx::format","",37,[[["self"],["i16norm"]],["option",["ordering"]]]],[11,"lt","","",37,[[["self"],["i16norm"]],["bool"]]],[11,"le","","",37,[[["self"],["i16norm"]],["bool"]]],[11,"gt","","",37,[[["self"],["i16norm"]],["bool"]]],[11,"ge","","",37,[[["self"],["i16norm"]],["bool"]]],[11,"partial_cmp","gfx::texture","",52,[[["self"],["samplerinfo"]],["option",["ordering"]]]],[11,"lt","","",52,[[["self"],["samplerinfo"]],["bool"]]],[11,"le","","",52,[[["self"],["samplerinfo"]],["bool"]]],[11,"gt","","",52,[[["self"],["samplerinfo"]],["bool"]]],[11,"ge","","",52,[[["self"],["samplerinfo"]],["bool"]]],[11,"partial_cmp","gfx::format","",158,[[["self"],["r10_g10_b10_a2"]],["option",["ordering"]]]],[11,"partial_cmp","","",29,[[["self"],["swizzle"]],["option",["ordering"]]]],[11,"lt","","",29,[[["self"],["swizzle"]],["bool"]]],[11,"le","","",29,[[["self"],["swizzle"]],["bool"]]],[11,"gt","","",29,[[["self"],["swizzle"]],["bool"]]],[11,"ge","","",29,[[["self"],["swizzle"]],["bool"]]],[11,"partial_cmp","","",38,[[["self"],["f16"]],["option",["ordering"]]]],[11,"lt","","",38,[[["self"],["f16"]],["bool"]]],[11,"le","","",38,[[["self"],["f16"]],["bool"]]],[11,"gt","","",38,[[["self"],["f16"]],["bool"]]],[11,"ge","","",38,[[["self"],["f16"]],["bool"]]],[11,"partial_cmp","gfx::texture","",54,[[["self"],["resourcedesc"]],["option",["ordering"]]]],[11,"lt","","",54,[[["self"],["resourcedesc"]],["bool"]]],[11,"le","","",54,[[["self"],["resourcedesc"]],["bool"]]],[11,"gt","","",54,[[["self"],["resourcedesc"]],["bool"]]],[11,"ge","","",54,[[["self"],["resourcedesc"]],["bool"]]],[11,"partial_cmp","gfx::format","",142,[[["self"],["float"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::shade","",136,[[["self"],["usage"]],["option",["ordering"]]]],[11,"lt","","",136,[[["self"],["usage"]],["bool"]]],[11,"le","","",136,[[["self"],["usage"]],["bool"]]],[11,"gt","","",136,[[["self"],["usage"]],["bool"]]],[11,"ge","","",136,[[["self"],["usage"]],["bool"]]],[11,"partial_cmp","gfx::format","",165,[[["self"],["d16"]],["option",["ordering"]]]],[11,"partial_cmp","","",30,[[["self"],["format"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["format"]],["bool"]]],[11,"le","","",30,[[["self"],["format"]],["bool"]]],[11,"gt","","",30,[[["self"],["format"]],["bool"]]],[11,"ge","","",30,[[["self"],["format"]],["bool"]]],[11,"partial_cmp","gfx::memory","",137,[[["self"],["bind"]],["option",["ordering"]]]],[11,"lt","","",137,[[["self"],["bind"]],["bool"]]],[11,"le","","",137,[[["self"],["bind"]],["bool"]]],[11,"gt","","",137,[[["self"],["bind"]],["bool"]]],[11,"ge","","",137,[[["self"],["bind"]],["bool"]]],[11,"partial_cmp","gfx::format","",140,[[["self"],["uint"]],["option",["ordering"]]]],[11,"partial_cmp","","",166,[[["self"],["d24_s8"]],["option",["ordering"]]]],[11,"partial_cmp","","",157,[[["self"],["r5_g6_b5"]],["option",["ordering"]]]],[11,"partial_cmp","","",27,[[["self"],["surfacetype"]],["option",["ordering"]]]],[11,"partial_cmp","","",146,[[["self"],["b8_g8_r8_a8"]],["option",["ordering"]]]],[11,"partial_cmp","","",160,[[["self"],["r5_g5_b5_a1"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::texture","",53,[[["self"],["info"]],["option",["ordering"]]]],[11,"lt","","",53,[[["self"],["info"]],["bool"]]],[11,"le","","",53,[[["self"],["info"]],["bool"]]],[11,"gt","","",53,[[["self"],["info"]],["bool"]]],[11,"ge","","",53,[[["self"],["info"]],["bool"]]],[11,"partial_cmp","gfx::format","",143,[[["self"],["unorm"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::texture","",135,[[["self"],["depthstencilflags"]],["option",["ordering"]]]],[11,"lt","","",135,[[["self"],["depthstencilflags"]],["bool"]]],[11,"le","","",135,[[["self"],["depthstencilflags"]],["bool"]]],[11,"gt","","",135,[[["self"],["depthstencilflags"]],["bool"]]],[11,"ge","","",135,[[["self"],["depthstencilflags"]],["bool"]]],[11,"partial_cmp","","",56,[[["self"],["depthstencildesc"]],["option",["ordering"]]]],[11,"lt","","",56,[[["self"],["depthstencildesc"]],["bool"]]],[11,"le","","",56,[[["self"],["depthstencildesc"]],["bool"]]],[11,"gt","","",56,[[["self"],["depthstencildesc"]],["bool"]]],[11,"ge","","",56,[[["self"],["depthstencildesc"]],["bool"]]],[11,"partial_cmp","gfx::format","",35,[[["self"],["i8norm"]],["option",["ordering"]]]],[11,"lt","","",35,[[["self"],["i8norm"]],["bool"]]],[11,"le","","",35,[[["self"],["i8norm"]],["bool"]]],[11,"gt","","",35,[[["self"],["i8norm"]],["bool"]]],[11,"ge","","",35,[[["self"],["i8norm"]],["bool"]]],[11,"partial_cmp","","",154,[[["self"],["r8_g8_b8_a8"]],["option",["ordering"]]]],[11,"partial_cmp","","",161,[[["self"],["r32_g32"]],["option",["ordering"]]]],[11,"partial_cmp","","",155,[[["self"],["r8_g8"]],["option",["ordering"]]]],[11,"partial_cmp","","",36,[[["self"],["u16norm"]],["option",["ordering"]]]],[11,"lt","","",36,[[["self"],["u16norm"]],["bool"]]],[11,"le","","",36,[[["self"],["u16norm"]],["bool"]]],[11,"gt","","",36,[[["self"],["u16norm"]],["bool"]]],[11,"ge","","",36,[[["self"],["u16norm"]],["bool"]]],[11,"partial_cmp","","",168,[[["self"],["d24"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::texture","",50,[[["self"],["wrapmode"]],["option",["ordering"]]]],[11,"partial_cmp","","",49,[[["self"],["texturecopyregion"]],["option",["ordering"]]]],[11,"lt","","",49,[[["self"],["texturecopyregion"]],["bool"]]],[11,"le","","",49,[[["self"],["texturecopyregion"]],["bool"]]],[11,"gt","","",49,[[["self"],["texturecopyregion"]],["bool"]]],[11,"ge","","",49,[[["self"],["texturecopyregion"]],["bool"]]],[11,"partial_cmp","","",46,[[["self"],["kind"]],["option",["ordering"]]]],[11,"lt","","",46,[[["self"],["kind"]],["bool"]]],[11,"le","","",46,[[["self"],["kind"]],["bool"]]],[11,"gt","","",46,[[["self"],["kind"]],["bool"]]],[11,"ge","","",46,[[["self"],["kind"]],["bool"]]],[11,"partial_cmp","gfx::format","",164,[[["self"],["r4_g4"]],["option",["ordering"]]]],[11,"partial_cmp","","",34,[[["self"],["u8norm"]],["option",["ordering"]]]],[11,"lt","","",34,[[["self"],["u8norm"]],["bool"]]],[11,"le","","",34,[[["self"],["u8norm"]],["bool"]]],[11,"gt","","",34,[[["self"],["u8norm"]],["bool"]]],[11,"ge","","",34,[[["self"],["u8norm"]],["bool"]]],[11,"partial_cmp","","",149,[[["self"],["d32"]],["option",["ordering"]]]],[11,"partial_cmp","","",147,[[["self"],["r16_g16"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::texture","",51,[[["self"],["packedcolor"]],["option",["ordering"]]]],[11,"lt","","",51,[[["self"],["packedcolor"]],["bool"]]],[11,"le","","",51,[[["self"],["packedcolor"]],["bool"]]],[11,"gt","","",51,[[["self"],["packedcolor"]],["bool"]]],[11,"ge","","",51,[[["self"],["packedcolor"]],["bool"]]],[11,"partial_cmp","gfx::format","",156,[[["self"],["r32_g32_b32_a32"]],["option",["ordering"]]]],[11,"partial_cmp","","",26,[[["self"],["channeltype"]],["option",["ordering"]]]],[11,"partial_cmp","gfx::texture","",152,[[["self"],["lod"]],["option",["ordering"]]]],[11,"lt","","",152,[[["self"],["lod"]],["bool"]]],[11,"le","","",152,[[["self"],["lod"]],["bool"]]],[11,"gt","","",152,[[["self"],["lod"]],["bool"]]],[11,"ge","","",152,[[["self"],["lod"]],["bool"]]],[11,"partial_cmp","gfx::format","",150,[[["self"],["r16"]],["option",["ordering"]]]],[11,"partial_cmp","","",167,[[["self"],["r16_g16_b16_a16"]],["option",["ordering"]]]],[11,"bitand_assign","gfx::shade","Disables all flags disabled in the set.",136,N],[11,"bitand_assign","gfx::texture","Disables all flags disabled in the set.",135,N],[11,"bitand_assign","gfx::memory","Disables all flags disabled in the set.",134,N],[11,"bitand_assign","","Disables all flags disabled in the set.",137,N],[11,"fmt","gfx::texture","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::shade","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx::memory","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","gfx::shade::core","",113,N],[11,"hash","","",175,N],[11,"hash","gfx::texture","",54,N],[11,"hash","gfx","",193,N],[11,"hash","gfx::format","",146,N],[11,"hash","gfx::texture","",51,N],[11,"hash","gfx::format","",141,N],[11,"hash","","",160,N],[11,"hash","gfx::texture","",49,N],[11,"hash","gfx","",22,N],[11,"hash","gfx::format","",26,N],[11,"hash","gfx::texture","",135,N],[11,"hash","","",55,N],[11,"hash","gfx::format","",164,N],[11,"hash","gfx::texture","",47,N],[11,"hash","gfx::handle","",185,N],[11,"hash","","",177,N],[11,"hash","gfx::format","",154,N],[11,"hash","gfx::handle","",178,N],[11,"hash","gfx::format","",157,N],[11,"hash","gfx::texture","",152,N],[11,"hash","gfx::format","",149,N],[11,"hash","","",158,N],[11,"hash","gfx::handle","",189,N],[11,"hash","gfx::texture","",43,N],[11,"hash","gfx::format","",162,N],[11,"hash","","",147,N],[11,"hash","gfx::texture","",42,N],[11,"hash","gfx::format","",161,N],[11,"hash","gfx::buffer","",24,N],[11,"hash","gfx::handle","",181,N],[11,"hash","gfx::pso","",72,N],[11,"hash","gfx::handle","",71,N],[11,"hash","gfx::shade::core","",109,N],[11,"hash","gfx::handle","",176,N],[11,"hash","gfx","",191,N],[11,"hash","gfx::shade::core","",116,N],[11,"hash","gfx::format","",38,N],[11,"hash","gfx::shade::core","",121,N],[11,"hash","gfx","",187,N],[11,"hash","gfx::mapping","",39,N],[11,"hash","gfx::format","",144,N],[11,"hash","gfx::shade::core","",108,N],[11,"hash","gfx::format","",142,N],[11,"hash","gfx","",183,N],[11,"hash","","",19,N],[11,"hash","gfx::shade::core","",112,N],[11,"hash","","",120,N],[11,"hash","gfx::handle","",179,N],[11,"hash","gfx::format","",155,N],[11,"hash","gfx::texture","",53,N],[11,"hash","gfx::format","",156,N],[11,"hash","gfx::handle","",194,N],[11,"hash","gfx::shade::core","",114,N],[11,"hash","gfx::format","",140,N],[11,"hash","gfx::texture","",46,N],[11,"hash","","",45,N],[11,"hash","gfx::shade::core","",62,N],[11,"hash","gfx::buffer","",25,N],[11,"hash","gfx::format","",29,N],[11,"hash","gfx::shade::core","",125,N],[11,"hash","gfx::handle","",188,N],[11,"hash","gfx::format","",165,N],[11,"hash","gfx::shade::core","",111,N],[11,"hash","","",110,N],[11,"hash","gfx::format","",143,N],[11,"hash","gfx::handle","",182,N],[11,"hash","gfx::format","",30,N],[11,"hash","gfx::shade::core","",122,N],[11,"hash","gfx::format","",27,N],[11,"hash","","",153,N],[11,"hash","gfx::shade::core","",119,N],[11,"hash","gfx::handle","",180,N],[11,"hash","gfx::format","",34,N],[11,"hash","","",166,N],[11,"hash","","",36,N],[11,"hash","gfx","",186,N],[11,"hash","gfx::texture","",50,N],[11,"hash","gfx::shade::core","",124,N],[11,"hash","gfx::texture","",48,N],[11,"hash","gfx::handle","",171,N],[11,"hash","gfx::texture","",56,N],[11,"hash","gfx::shade::core","",115,N],[11,"hash","","",123,N],[11,"hash","gfx::format","",167,N],[11,"hash","gfx::buffer","",23,N],[11,"hash","gfx::format","",148,N],[11,"hash","gfx::memory","",137,N],[11,"hash","gfx::handle","",173,N],[11,"hash","gfx::texture","",170,N],[11,"hash","gfx::format","",151,N],[11,"hash","gfx::shade","",136,N],[11,"hash","gfx::shade::core","",107,N],[11,"hash","gfx::format","",150,N],[11,"hash","gfx::handle","",190,N],[11,"hash","","",184,N],[11,"hash","gfx::format","",163,N],[11,"hash","","",37,N],[11,"hash","gfx::buffer","",172,N],[11,"hash","gfx::texture","",44,N],[11,"hash","gfx::format","",168,N],[11,"hash","gfx::memory","",40,N],[11,"hash","gfx::format","",28,N],[11,"hash","gfx::memory","",134,N],[11,"hash","gfx::format","",145,N],[11,"hash","","",159,N],[11,"hash","","",35,N],[11,"hash","gfx::handle","",192,N],[11,"hash","gfx::texture","",52,N],[11,"hash","gfx::pso::buffer","",76,N],[11,"bitxor","gfx::shade","Returns the left flags, but with all the right flags toggled.",136,[[["self"],["usage"]],["usage"]]],[11,"bitxor","gfx::memory","Returns the left flags, but with all the right flags toggled.",134,[[["self"],["access"]],["access"]]],[11,"bitxor","gfx::texture","Returns the left flags, but with all the right flags toggled.",135,[[["self"],["depthstencilflags"]],["depthstencilflags"]]],[11,"bitxor","gfx::memory","Returns the left flags, but with all the right flags toggled.",137,[[["self"],["bind"]],["bind"]]],[11,"from","gfx::texture","",51,N],[11,"from","gfx::shade::core","",138,[[["s"]],["createprogramerror"]]],[11,"from","gfx","",60,[[["resourceviewerror"]],["combinederror"]]],[11,"from","","",60,[[["creationerror"]],["combinederror"]]],[11,"from","gfx::format","",37,[[["i16"]],["i16norm"]]],[11,"from","gfx::texture","",56,[[["renderdesc"]],["depthstencildesc"]]],[11,"from","gfx","",60,[[["targetviewerror"]],["combinederror"]]],[11,"from","gfx::texture","",43,[[["u8"]],["aamode"]]],[11,"from","gfx::format","",38,[[["u16"]],["f16"]]],[11,"from","","",35,[[["i8"]],["i8norm"]]],[11,"from","","",34,[[["u8"]],["u8norm"]]],[11,"from","gfx::texture","",152,[[["f32"]],["lod"]]],[11,"from","gfx::format","",36,[[["u16"]],["u16norm"]]],[11,"from","gfx::shade","",136,[[["stage"]],["usage"]]],[11,"not","","Returns the complement of this set of flags.",136,[[["self"]],["usage"]]],[11,"not","gfx::texture","Returns the complement of this set of flags.",135,[[["self"]],["depthstencilflags"]]],[11,"not","gfx::memory","Returns the complement of this set of flags.",137,[[["self"]],["bind"]]],[11,"not","","Returns the complement of this set of flags.",134,[[["self"]],["access"]]],[11,"into","gfx::texture","",152,[[["self"]],["f32"]]],[11,"into","","",51,N],[11,"eq","gfx::shade::core","",116,[[["self"],["stage"]],["bool"]]],[11,"eq","gfx::format","",143,[[["self"],["unorm"]],["bool"]]],[11,"eq","gfx::texture","",52,[[["self"],["samplerinfo"]],["bool"]]],[11,"ne","","",52,[[["self"],["samplerinfo"]],["bool"]]],[11,"eq","gfx::format","",29,[[["self"],["swizzle"]],["bool"]]],[11,"ne","","",29,[[["self"],["swizzle"]],["bool"]]],[11,"eq","gfx::texture","",45,[[["self"],["cubeface"]],["bool"]]],[11,"eq","gfx","",186,[[["self"],["geometryshader"]],["bool"]]],[11,"ne","","",186,[[["self"],["geometryshader"]],["bool"]]],[11,"eq","gfx::shade::core","",112,[[["self"],["texturetype"]],["bool"]]],[11,"ne","","",112,[[["self"],["texturetype"]],["bool"]]],[11,"eq","gfx::buffer","",172,[[["self"],["raw"]],["bool"]]],[11,"eq","gfx::format","",146,[[["self"],["b8_g8_r8_a8"]],["bool"]]],[11,"eq","gfx::texture","",41,[[["self"],["creationerror"]],["bool"]]],[11,"ne","","",41,[[["self"],["creationerror"]],["bool"]]],[11,"eq","gfx::shade::core","",124,[[["self"],["samplervar"]],["bool"]]],[11,"ne","","",124,[[["self"],["samplervar"]],["bool"]]],[11,"eq","gfx","",21,[[["self"],["submissionerror"]],["bool"]]],[11,"eq","gfx::format","",34,[[["self"],["u8norm"]],["bool"]]],[11,"ne","","",34,[[["self"],["u8norm"]],["bool"]]],[11,"eq","","",141,[[["self"],["srgb"]],["bool"]]],[11,"eq","gfx::texture","",46,[[["self"],["kind"]],["bool"]]],[11,"ne","","",46,[[["self"],["kind"]],["bool"]]],[11,"eq","gfx::format","",163,[[["self"],["r8"]],["bool"]]],[11,"eq","gfx::shade::core","",62,[[["self"],["programinfo"]],["bool"]]],[11,"ne","","",62,[[["self"],["programinfo"]],["bool"]]],[11,"eq","gfx::format","",27,[[["self"],["surfacetype"]],["bool"]]],[11,"eq","gfx::handle","",178,[[["self"],["rendertargetview"]],["bool"]]],[11,"eq","gfx::memory","",40,[[["self"],["usage"]],["bool"]]],[11,"eq","gfx::format","",35,[[["self"],["i8norm"]],["bool"]]],[11,"ne","","",35,[[["self"],["i8norm"]],["bool"]]],[11,"eq","gfx","",187,[[["self"],["vertexshader"]],["bool"]]],[11,"ne","","",187,[[["self"],["vertexshader"]],["bool"]]],[11,"eq","gfx::texture","",56,[[["self"],["depthstencildesc"]],["bool"]]],[11,"ne","","",56,[[["self"],["depthstencildesc"]],["bool"]]],[11,"eq","gfx::format","",148,[[["self"],["r16_g16_b16"]],["bool"]]],[11,"eq","","",37,[[["self"],["i16norm"]],["bool"]]],[11,"ne","","",37,[[["self"],["i16norm"]],["bool"]]],[11,"eq","gfx::texture","",47,[[["self"],["mipmap"]],["bool"]]],[11,"eq","gfx","",191,[[["self"],["domainshader"]],["bool"]]],[11,"ne","","",191,[[["self"],["domainshader"]],["bool"]]],[11,"eq","gfx::format","",145,[[["self"],["inorm"]],["bool"]]],[11,"eq","","",164,[[["self"],["r4_g4"]],["bool"]]],[11,"eq","gfx::shade::core","",108,[[["self"],["iscomparison"]],["bool"]]],[11,"eq","gfx::pso::buffer","",76,[[["self"],["element"]],["bool"]]],[11,"ne","","",76,[[["self"],["element"]],["bool"]]],[11,"eq","gfx::shade::core","",114,[[["self"],["basetype"]],["bool"]]],[11,"eq","gfx::format","",30,[[["self"],["format"]],["bool"]]],[11,"ne","","",30,[[["self"],["format"]],["bool"]]],[11,"eq","gfx::handle","",171,[[["self"],["rawtexture"]],["bool"]]],[11,"ne","","",171,[[["self"],["rawtexture"]],["bool"]]],[11,"eq","gfx::shade::core","",115,[[["self"],["containertype"]],["bool"]]],[11,"ne","","",115,[[["self"],["containertype"]],["bool"]]],[11,"eq","","",107,[[["self"],["isarray"]],["bool"]]],[11,"eq","gfx::memory","",137,[[["self"],["bind"]],["bool"]]],[11,"ne","","",137,[[["self"],["bind"]],["bool"]]],[11,"eq","gfx::format","",142,[[["self"],["float"]],["bool"]]],[11,"eq","","",156,[[["self"],["r32_g32_b32_a32"]],["bool"]]],[11,"eq","gfx::handle","",189,[[["self"],["rawrendertargetview"]],["bool"]]],[11,"ne","","",189,[[["self"],["rawrendertargetview"]],["bool"]]],[11,"eq","","",185,[[["self"],["fence"]],["bool"]]],[11,"ne","","",185,[[["self"],["fence"]],["bool"]]],[11,"eq","gfx::format","",155,[[["self"],["r8_g8"]],["bool"]]],[11,"eq","","",157,[[["self"],["r5_g6_b5"]],["bool"]]],[11,"eq","gfx::shade::core","",111,[[["self"],["matrixformat"]],["bool"]]],[11,"eq","gfx::format","",158,[[["self"],["r10_g10_b10_a2"]],["bool"]]],[11,"eq","gfx::texture","",51,[[["self"],["packedcolor"]],["bool"]]],[11,"ne","","",51,[[["self"],["packedcolor"]],["bool"]]],[11,"eq","gfx::buffer","",23,[[["self"],["role"]],["bool"]]],[11,"eq","gfx::shade::core","",175,[[["self"],["program"]],["bool"]]],[11,"eq","gfx::texture","",48,[[["self"],["imageinfocommon"]],["bool"]]],[11,"ne","","",48,[[["self"],["imageinfocommon"]],["bool"]]],[11,"eq","gfx::format","",149,[[["self"],["d32"]],["bool"]]],[11,"eq","gfx::texture","",135,[[["self"],["depthstencilflags"]],["bool"]]],[11,"ne","","",135,[[["self"],["depthstencilflags"]],["bool"]]],[11,"eq","gfx::buffer","",24,[[["self"],["info"]],["bool"]]],[11,"ne","","",24,[[["self"],["info"]],["bool"]]],[11,"eq","gfx","",59,[[["self"],["targetviewerror"]],["bool"]]],[11,"ne","","",59,[[["self"],["targetviewerror"]],["bool"]]],[11,"eq","gfx::format","",147,[[["self"],["r16_g16"]],["bool"]]],[11,"eq","gfx::shade::core","",126,[[["self"],["compatibilityerror"]],["bool"]]],[11,"eq","gfx","",193,[[["self"],["hullshader"]],["bool"]]],[11,"ne","","",193,[[["self"],["hullshader"]],["bool"]]],[11,"eq","gfx::shade::core","",121,[[["self"],["constantbuffervar"]],["bool"]]],[11,"ne","","",121,[[["self"],["constantbuffervar"]],["bool"]]],[11,"eq","gfx::format","",36,[[["self"],["u16norm"]],["bool"]]],[11,"ne","","",36,[[["self"],["u16norm"]],["bool"]]],[11,"eq","","",144,[[["self"],["int"]],["bool"]]],[11,"eq","","",168,[[["self"],["d24"]],["bool"]]],[11,"eq","","",151,[[["self"],["r4_g4_b4_a4"]],["bool"]]],[11,"eq","gfx::handle","",192,[[["self"],["unorderedaccessview"]],["bool"]]],[11,"eq","gfx::pso","",72,[[["self"],["descriptor"]],["bool"]]],[11,"ne","","",72,[[["self"],["descriptor"]],["bool"]]],[11,"eq","gfx::shade::core","",127,[[["self"],["createshadererror"]],["bool"]]],[11,"ne","","",127,[[["self"],["createshadererror"]],["bool"]]],[11,"eq","gfx::format","",162,[[["self"],["r32"]],["bool"]]],[11,"eq","","",153,[[["self"],["r32_g32_b32"]],["bool"]]],[11,"eq","gfx","",60,[[["self"],["combinederror"]],["bool"]]],[11,"ne","","",60,[[["self"],["combinederror"]],["bool"]]],[11,"eq","gfx::format","",140,[[["self"],["uint"]],["bool"]]],[11,"eq","gfx::memory","",134,[[["self"],["access"]],["bool"]]],[11,"ne","","",134,[[["self"],["access"]],["bool"]]],[11,"eq","gfx::shade::core","",113,[[["self"],["samplertype"]],["bool"]]],[11,"ne","","",113,[[["self"],["samplertype"]],["bool"]]],[11,"eq","","",109,[[["self"],["ismultisample"]],["bool"]]],[11,"eq","","",119,[[["self"],["attributevar"]],["bool"]]],[11,"ne","","",119,[[["self"],["attributevar"]],["bool"]]],[11,"eq","gfx::handle","",194,[[["self"],["texture"]],["bool"]]],[11,"eq","gfx::format","",161,[[["self"],["r32_g32"]],["bool"]]],[11,"eq","gfx::texture","",43,[[["self"],["aamode"]],["bool"]]],[11,"ne","","",43,[[["self"],["aamode"]],["bool"]]],[11,"eq","gfx::handle","",181,[[["self"],["shader"]],["bool"]]],[11,"ne","","",181,[[["self"],["shader"]],["bool"]]],[11,"eq","gfx::shade::core","",63,[[["self"],["uniformvalue"]],["bool"]]],[11,"ne","","",63,[[["self"],["uniformvalue"]],["bool"]]],[11,"eq","gfx::format","",38,[[["self"],["f16"]],["bool"]]],[11,"ne","","",38,[[["self"],["f16"]],["bool"]]],[11,"eq","gfx::handle","",176,[[["self"],["program"]],["bool"]]],[11,"ne","","",176,[[["self"],["program"]],["bool"]]],[11,"eq","gfx::pso","",169,[[["self"],["accessinfo"]],["bool"]]],[11,"ne","","",169,[[["self"],["accessinfo"]],["bool"]]],[11,"eq","gfx::texture","",55,[[["self"],["renderdesc"]],["bool"]]],[11,"ne","","",55,[[["self"],["renderdesc"]],["bool"]]],[11,"eq","","",50,[[["self"],["wrapmode"]],["bool"]]],[11,"eq","gfx::format","",159,[[["self"],["r11_g11_b10"]],["bool"]]],[11,"eq","gfx::handle","",182,[[["self"],["rawunorderedaccessview"]],["bool"]]],[11,"ne","","",182,[[["self"],["rawunorderedaccessview"]],["bool"]]],[11,"eq","","",173,[[["self"],["rawbuffer"]],["bool"]]],[11,"ne","","",173,[[["self"],["rawbuffer"]],["bool"]]],[11,"eq","gfx::shade::core","",123,[[["self"],["unorderedvar"]],["bool"]]],[11,"ne","","",123,[[["self"],["unorderedvar"]],["bool"]]],[11,"eq","","",125,[[["self"],["outputvar"]],["bool"]]],[11,"ne","","",125,[[["self"],["outputvar"]],["bool"]]],[11,"eq","gfx::texture","",42,[[["self"],["layererror"]],["bool"]]],[11,"ne","","",42,[[["self"],["layererror"]],["bool"]]],[11,"eq","","",49,[[["self"],["texturecopyregion"]],["bool"]]],[11,"ne","","",49,[[["self"],["texturecopyregion"]],["bool"]]],[11,"eq","gfx","",183,[[["self"],["pixelshader"]],["bool"]]],[11,"ne","","",183,[[["self"],["pixelshader"]],["bool"]]],[11,"eq","gfx::shade::core","",110,[[["self"],["isrect"]],["bool"]]],[11,"eq","","",122,[[["self"],["texturevar"]],["bool"]]],[11,"ne","","",122,[[["self"],["texturevar"]],["bool"]]],[11,"eq","gfx::handle","",190,[[["self"],["rawdepthstencilview"]],["bool"]]],[11,"ne","","",190,[[["self"],["rawdepthstencilview"]],["bool"]]],[11,"eq","gfx::shade::core","",120,[[["self"],["constvar"]],["bool"]]],[11,"ne","","",120,[[["self"],["constvar"]],["bool"]]],[11,"eq","gfx::shade","",136,[[["self"],["usage"]],["bool"]]],[11,"ne","","",136,[[["self"],["usage"]],["bool"]]],[11,"eq","gfx","",58,[[["self"],["resourceviewerror"]],["bool"]]],[11,"ne","","",58,[[["self"],["resourceviewerror"]],["bool"]]],[11,"eq","gfx::shade::core","",138,[[["self"],["createprogramerror"]],["bool"]]],[11,"ne","","",138,[[["self"],["createprogramerror"]],["bool"]]],[11,"eq","gfx::texture","",53,[[["self"],["info"]],["bool"]]],[11,"ne","","",53,[[["self"],["info"]],["bool"]]],[11,"eq","gfx::handle","",71,[[["self"],["buffer"]],["bool"]]],[11,"eq","gfx::texture","",44,[[["self"],["filtermethod"]],["bool"]]],[11,"ne","","",44,[[["self"],["filtermethod"]],["bool"]]],[11,"eq","gfx","",22,[[["self"],["shaderset"]],["bool"]]],[11,"ne","","",22,[[["self"],["shaderset"]],["bool"]]],[11,"eq","gfx::handle","",188,[[["self"],["shaderresourceview"]],["bool"]]],[11,"eq","","",177,[[["self"],["depthstencilview"]],["bool"]]],[11,"eq","gfx::texture","",54,[[["self"],["resourcedesc"]],["bool"]]],[11,"ne","","",54,[[["self"],["resourcedesc"]],["bool"]]],[11,"eq","gfx","",19,[[["self"],["primitive"]],["bool"]]],[11,"ne","","",19,[[["self"],["primitive"]],["bool"]]],[11,"eq","gfx::texture","",152,[[["self"],["lod"]],["bool"]]],[11,"ne","","",152,[[["self"],["lod"]],["bool"]]],[11,"eq","gfx::handle","",179,[[["self"],["sampler"]],["bool"]]],[11,"ne","","",179,[[["self"],["sampler"]],["bool"]]],[11,"eq","gfx::format","",150,[[["self"],["r16"]],["bool"]]],[11,"eq","","",26,[[["self"],["channeltype"]],["bool"]]],[11,"eq","gfx::handle","",184,[[["self"],["rawpipelinestate"]],["bool"]]],[11,"ne","","",184,[[["self"],["rawpipelinestate"]],["bool"]]],[11,"eq","gfx::texture","",170,[[["self"],["raw"]],["bool"]]],[11,"eq","gfx::handle","",180,[[["self"],["rawshaderresourceview"]],["bool"]]],[11,"ne","","",180,[[["self"],["rawshaderresourceview"]],["bool"]]],[11,"eq","gfx::format","",154,[[["self"],["r8_g8_b8_a8"]],["bool"]]],[11,"eq","","",167,[[["self"],["r16_g16_b16_a16"]],["bool"]]],[11,"eq","gfx::buffer","",25,[[["self"],["creationerror"]],["bool"]]],[11,"ne","","",25,[[["self"],["creationerror"]],["bool"]]],[11,"eq","gfx::format","",166,[[["self"],["d24_s8"]],["bool"]]],[11,"eq","","",28,[[["self"],["channelsource"]],["bool"]]],[11,"eq","","",160,[[["self"],["r5_g5_b5_a1"]],["bool"]]],[11,"eq","gfx::mapping","",39,[[["self"],["error"]],["bool"]]],[11,"ne","","",39,[[["self"],["error"]],["bool"]]],[11,"eq","gfx::format","",165,[[["self"],["d16"]],["bool"]]],[11,"new_fill","gfx::state","Create a new filling rasterizer.",4,[[],["rasterizer"]]],[11,"with_cull_back","","Add back face culling.",4,[[["self"]],["rasterizer"]]],[11,"with_offset","","Add polygon offset.",4,[[["self"],["f32"],["i32"]],["rasterizer"]]],[11,"new","","Create a new stencil state with a given function.",8,N],[11,"new","","Create a new blend state with a given equation.",14,[[["equation"],["factor"],["factor"]],["blend"]]],[18,"RED","","",132,N],[18,"GREEN","","",132,N],[18,"BLUE","","",132,N],[18,"ALPHA","","",132,N],[11,"empty","","Returns an empty set of flags.",132,[[],["colormask"]]],[11,"all","","Returns the set containing all flags.",132,[[],["colormask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",132,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",132,[[["u8"]],["option",["colormask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",132,[[["u8"]],["colormask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",132,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,[[["self"],["colormask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,[[["self"],["colormask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",132,N],[11,"remove","","Removes the specified flags in-place.",132,N],[11,"toggle","","Toggles the specified flags in-place.",132,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",132,N],[18,"X","gfx","",131,N],[18,"Y","","",131,N],[11,"empty","","Returns an empty set of flags.",131,[[],["mirror"]]],[11,"all","","Returns the set containing all flags.",131,[[],["mirror"]]],[11,"bits","","Returns the raw value of the flags currently stored.",131,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",131,[[["u8"]],["option",["mirror"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",131,[[["u8"]],["mirror"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",131,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",131,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",131,[[["self"],["mirror"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",131,[[["self"],["mirror"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",131,N],[11,"remove","","Removes the specified flags in-place.",131,N],[11,"toggle","","Toggles the specified flags in-place.",131,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",131,N],[11,"get_usage","","Return the aggregated stage usage for the set.",22,[[["self"]],["usage"]]],[11,"reference","","",187,N],[11,"reference","","",193,N],[11,"reference","","",191,N],[11,"reference","","",186,N],[11,"reference","","",183,N],[11,"get_total_bits","gfx::format","Return the total number of bits for this format.",27,[[["self"]],["u8"]]],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",27,[[["self"]],["u8"]]],[11,"new","","Create a new swizzle where each channel is unmapped.",29,[[],["swizzle"]]],[11,"cast2","","Convert a 2-element slice.",34,N],[11,"cast3","","Convert a 3-element slice.",34,N],[11,"cast4","","Convert a 4-element slice.",34,N],[11,"cast_slice","","Convert a generic slice by transmutation.",34,N],[11,"cast2","","Convert a 2-element slice.",35,N],[11,"cast3","","Convert a 3-element slice.",35,N],[11,"cast4","","Convert a 4-element slice.",35,N],[11,"cast_slice","","Convert a generic slice by transmutation.",35,N],[11,"cast2","","Convert a 2-element slice.",36,N],[11,"cast3","","Convert a 3-element slice.",36,N],[11,"cast4","","Convert a 4-element slice.",36,N],[11,"cast_slice","","Convert a generic slice by transmutation.",36,N],[11,"cast2","","Convert a 2-element slice.",37,N],[11,"cast3","","Convert a 3-element slice.",37,N],[11,"cast4","","Convert a 4-element slice.",37,N],[11,"cast_slice","","Convert a generic slice by transmutation.",37,N],[11,"cast2","","Convert a 2-element slice.",38,N],[11,"cast3","","Convert a 3-element slice.",38,N],[11,"cast4","","Convert a 4-element slice.",38,N],[11,"cast_slice","","Convert a generic slice by transmutation.",38,N],[11,"get_info","gfx::handle","Get the associated information about the buffer",71,[[["self"]],["info"]]],[11,"len","","Get the number of elements in the buffer.",71,[[["self"]],["usize"]]],[11,"get_info","","Get texture descriptor",194,[[["self"]],["info"]]],[11,"get_dimensions","","Get target dimensions",189,N],[11,"get_texture","","Get the associated texture",189,[[["self"]],["rawtexture"]]],[11,"get_dimensions","","Get target dimensions",190,N],[11,"get_texture","","Get the associated texture",190,[[["self"]],["rawtexture"]]],[11,"get_dimensions","","Get target dimensions",178,N],[11,"get_dimensions","","Get target dimensions",177,N],[11,"get_info","","Get sampler info",179,[[["self"]],["samplerinfo"]]],[11,"new","","Create a new handle manager",195,[[],["manager"]]],[11,"clear","","Clear all references",195,N],[11,"extend","","Extend with all references of another handle manager",195,N],[11,"count","","Count the total number of referenced resources",195,[[["self"]],["usize"]]],[11,"ref_buffer","","Reference a buffer",195,N],[11,"ref_shader","","Reference a shader",195,N],[11,"ref_program","","Reference a program",195,N],[11,"ref_pso","","Reference a pipeline state object",195,N],[11,"ref_texture","","Reference a texture",195,N],[11,"ref_srv","","Reference a shader resource view",195,N],[11,"ref_uav","","Reference an unordered access view",195,N],[11,"ref_rtv","","Reference an RTV",195,N],[11,"ref_dsv","","Reference a DSV",195,N],[11,"ref_sampler","","Reference a sampler",195,N],[11,"ref_fence","","Reference a fence",195,N],[18,"READ","gfx::memory","Read access",134,N],[18,"WRITE","","Write access",134,N],[18,"RW","","Full access",134,N],[11,"empty","","Returns an empty set of flags.",134,[[],["access"]]],[11,"all","","Returns the set containing all flags.",134,[[],["access"]]],[11,"bits","","Returns the raw value of the flags currently stored.",134,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",134,[[["u8"]],["option",["access"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",134,[[["u8"]],["access"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",134,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",134,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",134,[[["self"],["access"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",134,[[["self"],["access"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",134,N],[11,"remove","","Removes the specified flags in-place.",134,N],[11,"toggle","","Toggles the specified flags in-place.",134,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",134,N],[11,"is_mutable","","Is this memory bound to be mutated ?",137,[[["self"]],["bool"]]],[18,"RENDER_TARGET","","Can be rendered into.",137,N],[18,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",137,N],[18,"SHADER_RESOURCE","","Can be bound to the shader for reading.",137,N],[18,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",137,N],[18,"TRANSFER_SRC","","Can be transfered from.",137,N],[18,"TRANSFER_DST","","Can be transfered into.",137,N],[11,"empty","","Returns an empty set of flags.",137,[[],["bind"]]],[11,"all","","Returns the set containing all flags.",137,[[],["bind"]]],[11,"bits","","Returns the raw value of the flags currently stored.",137,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",137,[[["u8"]],["option",["bind"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",137,[[["u8"]],["bind"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",137,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",137,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",137,[[["self"],["bind"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",137,[[["self"],["bind"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",137,N],[11,"remove","","Removes the specified flags in-place.",137,N],[11,"toggle","","Toggles the specified flags in-place.",137,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",137,N],[11,"get_num_fragments","gfx::texture","Return the number of actual data fragments stored per texel.",43,[[["self"]],["u8"]]],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",43,[[["self"]],["bool"]]],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",46,N],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",46,N],[11,"get_num_levels","","Count the number of mipmap levels.",46,[[["self"]],["u8"]]],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",46,[[["self"]],["option",["u16"]]]],[11,"is_cube","","Check if it's one of the cube kinds.",46,[[["self"]],["bool"]]],[11,"get_texel_count","","Get the total number of texels.",48,[[["self"]],["usize"]]],[11,"convert","","Convert into a differently typed format.",48,[[["self"],["t"]],["imageinfocommon"]]],[11,"is_inside","","Check if it fits inside given dimensions.",48,N],[11,"get_byte_count","","Get the total number of bytes.",48,[[["self"]],["usize"]]],[11,"with_texture","","Change the texture",49,[[["self"],["u"]],["texturecopyregion"]]],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",52,[[["filtermethod"],["wrapmode"]],["samplerinfo"]]],[11,"to_image_info","","Get image info for a given mip.",53,[[["self"],["u8"]],["imageinfocommon"]]],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",53,[[["self"],["channeltype"],["u8"]],["imageinfocommon",["format"]]]],[18,"RO_DEPTH","","Depth is read-only in the view.",135,N],[18,"RO_STENCIL","","Stencil is read-only in the view.",135,N],[18,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",135,N],[11,"empty","","Returns an empty set of flags.",135,[[],["depthstencilflags"]]],[11,"all","","Returns the set containing all flags.",135,[[],["depthstencilflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",135,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",135,[[["u8"]],["option",["depthstencilflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",135,[[["u8"]],["depthstencilflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",135,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,[[["self"],["depthstencilflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,[[["self"],["depthstencilflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",135,N],[11,"remove","","Removes the specified flags in-place.",135,N],[11,"toggle","","Toggles the specified flags in-place.",135,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",135,N],[11,"new","gfx::pso","Create a new empty PSO descriptor.",72,[[["primitive"],["rasterizer"]],["descriptor"]]],[11,"can_sample","gfx::shade::core","Check if this texture can be used with a sampler.",112,[[["self"]],["bool"]]],[18,"VERTEX","gfx::shade","Used by the vertex shader",136,N],[18,"GEOMETRY","","Used by the geometry shader",136,N],[18,"PIXEL","","Used by the pixel shader",136,N],[18,"HULL","","Used by the hull shader",136,N],[18,"DOMAIN","","Used by the pixel shader",136,N],[11,"empty","","Returns an empty set of flags.",136,[[],["usage"]]],[11,"all","","Returns the set containing all flags.",136,[[],["usage"]]],[11,"bits","","Returns the raw value of the flags currently stored.",136,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",136,[[["u8"]],["option",["usage"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",136,[[["u8"]],["usage"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",136,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",136,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",136,[[["self"],["usage"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",136,[[["self"],["usage"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",136,N],[11,"remove","","Removes the specified flags in-place.",136,N],[11,"toggle","","Toggles the specified flags in-place.",136,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",136,N],[11,"is_compatible","gfx::shade::core","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",120,[[["self"],["uniformvalue"]],["result",["compatibilityerror"]]]]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[8,"Device"],[4,"Primitive"],[8,"Resources"],[4,"SubmissionError"],[4,"ShaderSet"],[4,"Role"],[3,"Info"],[4,"CreationError"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[3,"Swizzle"],[3,"Format"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"Error"],[4,"Usage"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"Mipmap"],[3,"ImageInfoCommon"],[3,"TextureCopyRegion"],[4,"WrapMode"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[8,"Factory"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"CommandBuffer"],[3,"ProgramInfo"],[4,"UniformValue"],[3,"Slice"],[4,"CopyError"],[4,"UpdateError"],[4,"PipelineStateError"],[4,"IndexBuffer"],[8,"FactoryExt"],[3,"Encoder"],[3,"Buffer"],[3,"Descriptor"],[3,"RawDataSet"],[4,"ElementError"],[4,"InitError"],[3,"Element"],[8,"Structure"],[8,"ToInstanceRate"],[3,"VertexBufferCommon"],[6,"InstanceRate"],[4,"Instanced"],[4,"NonInstanced"],[3,"RawVertexBuffer"],[3,"ConstantBuffer"],[3,"RawConstantBuffer"],[3,"Global"],[3,"RawGlobal"],[3,"ShaderResource"],[3,"RawShaderResource"],[3,"UnorderedAccess"],[3,"Sampler"],[3,"TextureSampler"],[3,"RenderTarget"],[3,"BlendTarget"],[3,"RawRenderTarget"],[3,"DepthTarget"],[3,"StencilTarget"],[3,"DepthStencilTarget"],[3,"Scissor"],[3,"BlendRef"],[3,"Bundle"],[8,"PipelineInit"],[8,"PipelineData"],[8,"DataLink"],[8,"DataBind"],[3,"PipelineState"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[3,"SamplerType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[8,"BaseTyped"],[8,"Formatted"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[4,"CompatibilityError"],[4,"CreateShaderError"],[4,"ProgramError"],[8,"ToUniform"],[8,"IntoIndexBuffer"],[3,"Mirror"],[3,"ColorMask"],[3,"MultiSample"],[3,"Access"],[3,"DepthStencilFlags"],[3,"Usage"],[3,"Bind"],[3,"CreateProgramError"],[3,"Writer"],[4,"Uint"],[4,"Srgb"],[4,"Float"],[4,"Unorm"],[4,"Int"],[4,"Inorm"],[4,"B8_G8_R8_A8"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"D32"],[4,"R16"],[4,"R4_G4_B4_A4"],[3,"Lod"],[4,"R32_G32_B32"],[4,"R8_G8_B8_A8"],[4,"R8_G8"],[4,"R32_G32_B32_A32"],[4,"R5_G6_B5"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R5_G5_B5_A1"],[4,"R32_G32"],[4,"R32"],[4,"R8"],[4,"R4_G4"],[4,"D16"],[4,"D24_S8"],[4,"R16_G16_B16_A16"],[4,"D24"],[3,"AccessInfo"],[3,"Raw"],[3,"RawTexture"],[3,"Raw"],[3,"RawBuffer"],[3,"Reader"],[3,"Program"],[3,"Program"],[3,"DepthStencilView"],[3,"RenderTargetView"],[3,"Sampler"],[3,"RawShaderResourceView"],[3,"Shader"],[3,"RawUnorderedAccessView"],[3,"PixelShader"],[3,"RawPipelineState"],[3,"Fence"],[3,"GeometryShader"],[3,"VertexShader"],[3,"ShaderResourceView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"DomainShader"],[3,"UnorderedAccessView"],[3,"HullShader"],[3,"Texture"],[3,"Manager"]]};
searchIndex["gfx_core"]={"doc":"Low-level graphics abstraction for Rust. Mostly operates on data, not types. Designed for use by libraries and higher-level abstractions only.","items":[[0,"state","gfx_core","Fixed-function hardware state.",N,N],[4,"FrontFace","gfx_core::state","The front face winding order of a set of vertices.",N,N],[13,"Clockwise","","Clockwise winding order.",0,N],[13,"CounterClockwise","","Counter-clockwise winding order.",0,N],[6,"LineWidth","","Width of a line. Could be f32 if not for Hash deriving issues.",N,N],[6,"OffsetSlope","","Slope depth offset factor Could be f32 if not for Hash deriving issues.",N,N],[6,"OffsetUnits","","Number of units to offset, where the unit is the minimal difference in the depth value dictated by the precision of the depth buffer.",N,N],[3,"Offset","","How to offset vertices in screen space, if at all.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[4,"CullFace","","Which face, if any, to cull.",N,N],[13,"Nothing","","",2,N],[13,"Front","","",2,N],[13,"Back","","",2,N],[4,"RasterMethod","","How to rasterize a primitive.",N,N],[13,"Point","","Rasterize as a point.",3,N],[13,"Line","","Rasterize as a line with the given width.",3,N],[13,"Fill","","Rasterize as a face.",3,N],[3,"MultiSample","","Multi-sampling rasterization mode",N,N],[3,"Rasterizer","","Primitive rasterization state. Note that GL allows different raster method to be used for front and back, while this abstraction does not.",N,N],[12,"front_face","","Which vertex winding is considered to be the front face for culling.",4,N],[12,"cull_face","","Which face should be culled.",4,N],[12,"method","","How to rasterize this primitive.",4,N],[12,"offset","","Any polygon offset to apply.",4,N],[12,"samples","","Multi-sampling mode.",4,N],[4,"Comparison","","A pixel-wise comparison function.",N,N],[13,"Never","","`false`",5,N],[13,"Less","","`x < y`",5,N],[13,"LessEqual","","`x <= y`",5,N],[13,"Equal","","`x == y`",5,N],[13,"GreaterEqual","","`x >= y`",5,N],[13,"Greater","","`x > y`",5,N],[13,"NotEqual","","`x != y`",5,N],[13,"Always","","`true`",5,N],[4,"StencilOp","","Stencil mask operation.",N,N],[13,"Keep","","Keep the current value in the stencil buffer (no change).",6,N],[13,"Zero","","Set the value in the stencil buffer to zero.",6,N],[13,"Replace","","Set the stencil buffer value to `value` from `StencilSide`",6,N],[13,"IncrementClamp","","Increment the stencil buffer value, clamping to its maximum value.",6,N],[13,"IncrementWrap","","Increment the stencil buffer value, wrapping around to 0 on overflow.",6,N],[13,"DecrementClamp","","Decrement the stencil buffer value, clamping to its minimum value.",6,N],[13,"DecrementWrap","","Decrement the stencil buffer value, wrapping around to the maximum value on overflow.",6,N],[13,"Invert","","Bitwise invert the current value in the stencil buffer.",6,N],[3,"StencilSide","","Complete stencil state for a given side of a face.",N,N],[12,"fun","","Comparison function to use to determine if the stencil test passes.",7,N],[12,"mask_read","","A mask that is ANDd with both the stencil buffer value and the reference value when they are read before doing the stencil test.",7,N],[12,"mask_write","","A mask that is ANDd with the stencil value before writing to the stencil buffer.",7,N],[12,"op_fail","","What operation to do if the stencil test fails.",7,N],[12,"op_depth_fail","","What operation to do if the stenil test passes but the depth test fails.",7,N],[12,"op_pass","","What operation to do if both the depth and stencil test pass.",7,N],[3,"Stencil","","Complete stencil state, specifying how to handle the front and back side of a face.",N,N],[12,"front","","",8,N],[12,"back","","",8,N],[3,"Depth","","Depth test state.",N,N],[12,"fun","","Comparison function to use.",9,N],[12,"write","","Specify whether to write to the depth buffer or not.",9,N],[4,"Equation","","",N,N],[13,"Add","","Adds source and destination. Source and destination are multiplied by blending parameters before addition.",10,N],[13,"Sub","","Subtracts destination from source. Source and destination are multiplied by blending parameters before subtraction.",10,N],[13,"RevSub","","Subtracts source from destination. Source and destination are multiplied by blending parameters before subtraction.",10,N],[13,"Min","","Component-wise minimum value of source and destination. Blending parameters are ignored.",10,N],[13,"Max","","Component-wise maximum value of source and destination. Blending parameters are ignored.",10,N],[4,"BlendValue","","",N,N],[13,"SourceColor","","",11,N],[13,"SourceAlpha","","",11,N],[13,"DestColor","","",11,N],[13,"DestAlpha","","",11,N],[13,"ConstColor","","",11,N],[13,"ConstAlpha","","",11,N],[4,"Factor","","",N,N],[13,"Zero","","",12,N],[13,"One","","",12,N],[13,"SourceAlphaSaturated","","",12,N],[13,"ZeroPlus","","",12,N],[13,"OneMinus","","",12,N],[3,"BlendChannel","","",N,N],[12,"equation","","",13,N],[12,"source","","",13,N],[12,"destination","","",13,N],[3,"Blend","","",N,N],[12,"color","","",14,N],[12,"alpha","","",14,N],[3,"ColorMask","","",N,N],[3,"Color","","The state of an active color render target",N,N],[12,"mask","","Color mask to use.",15,N],[12,"blend","","Optional blending.",15,N],[3,"RefValues","","The complete set of the rasterizer reference values. Switching these doesn't roll the hardware context.",N,N],[12,"stencil","","Stencil front and back values.",16,N],[12,"blend","","Constant blend color.",16,N],[0,"target","gfx_core","Render target specification.",N,N],[6,"Layer","gfx_core::target","A depth value, specifying which plane to select out of a 3D texture.",N,N],[6,"Level","","Mipmap level to select in a texture.",N,N],[6,"Depth","","A single depth value from a depth buffer.",N,N],[6,"Stencil","","A single value from a stencil stencstencil buffer.",N,N],[3,"Rect","","A screen space rectangle",N,N],[12,"x","","",17,N],[12,"y","","",17,N],[12,"w","","",17,N],[12,"h","","",17,N],[6,"ColorValue","","A color with floating-point components.",N,N],[3,"Mirror","","Mirroring flags, used for blitting",N,N],[3,"VertexShader","gfx_core","",N,N],[3,"HullShader","","",N,N],[3,"DomainShader","","",N,N],[3,"GeometryShader","","",N,N],[3,"PixelShader","","",N,N],[3,"Capabilities","","Features that the device supports.",N,N],[12,"max_vertex_count","","",18,N],[12,"max_index_count","","",18,N],[12,"max_texture_size","","",18,N],[12,"max_patch_size","","",18,N],[12,"instance_base_supported","","",18,N],[12,"instance_call_supported","","",18,N],[12,"instance_rate_supported","","",18,N],[12,"vertex_base_supported","","",18,N],[12,"srgb_color_supported","","",18,N],[12,"constant_buffer_supported","","",18,N],[12,"unordered_access_view_supported","","",18,N],[12,"separate_blending_slots_supported","","",18,N],[12,"copy_buffer_supported","","",18,N],[3,"AdapterInfo","","Information about a backend adapater.",N,N],[12,"name","","Adapter name",19,N],[12,"vendor","","Vendor PCI id of the adapter",19,N],[12,"device","","PCI id of the adapter",19,N],[12,"software_rendering","","The device is based on a software rasterizer",19,N],[3,"Frame","","Handle to a backbuffer of the swapchain.",N,N],[4,"ShaderSet","","A complete set of shaders to link a program.",N,N],[13,"Simple","","Simple program: Vs-Ps",20,N],[13,"Geometry","","Geometry shader programs: Vs-Gs-Ps",20,N],[13,"Tessellated","","Tessellated TODO: Tessellated, TessellatedGeometry, TransformFeedback",20,N],[4,"Primitive","","Describes what geometric primitives are created from vertex data.",N,N],[13,"PointList","","Each vertex represents a single point.",21,N],[13,"LineList","","Each pair of vertices represent a single line segment. For example, with `[a, b, c, d, e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.",21,N],[13,"LineStrip","","Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line line, and `b` and `c` form a line.",21,N],[13,"TriangleList","","Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`, `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.",21,N],[13,"TriangleStrip","","Every three consecutive vertices represent a single triangle. For example, with `[a, b, c, d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.",21,N],[13,"LineListAdjacency","","Each quadtruplet of vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d]`, `b` and `c` form a line, and `a` and `d` are the adjacent vertices.",21,N],[13,"LineStripAdjacency","","Every four consecutive vertices represent a single line segment with adjacency information. For example, with `[a, b, c, d, e]`, `[a, b, c, d]` form a line segment with adjacency, and `[b, c, d, e]` form a line segment with adjacency.",21,N],[13,"TriangleListAdjacency","","Each sextuplet of vertices represent a single traingle with adjacency information. For example, with `[a, b, c, d, e, f]`, `a`, `c`, and `e` form a traingle, and `b`, `d`, and `f` are the adjacent vertices, where `b` is adjacent to the edge formed by `a` and `c`, `d` is adjacent to the edge `c` and `e`, and `f` is adjacent to the edge `e` and `a`.",21,N],[13,"TriangleStripAdjacency","","Every even-numbered vertex (every other starting from the first) represents an additional vertex for the triangle strip, while odd-numbered vertices (every other starting from the second) represent adjacent vertices. For example, with `[a, b, c, d, e, f, g, h]`, `[a, c, e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`, and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent to the second.",21,N],[13,"PatchList","","Patch list, used with shaders capable of producing primitives on their own (tessellation)",21,N],[4,"IndexType","","A type of each index value in the slice's index buffer",N,N],[13,"U16","","",22,N],[13,"U32","","",22,N],[4,"SubmissionError","","",N,N],[13,"AccessOverlap","","",23,N],[0,"buffer","","Memory buffers",N,N],[3,"Raw","gfx_core::buffer","Untyped buffer",N,N],[3,"Info","","An information block that is immutable and associated to each buffer.",N,N],[12,"role","","Role",24,N],[12,"usage","","Usage hint",24,N],[12,"bind","","Bind flags",24,N],[12,"size","","Size in bytes",24,N],[12,"stride","","Stride of a single element, in bytes. Only used for structured buffers that you use via shader resource / unordered access views.",24,N],[4,"Role","","Role of the memory buffer.",N,N],[13,"Vertex","","Generic vertex buffer",25,N],[13,"Index","","Index buffer",25,N],[13,"Constant","","Constant buffer",25,N],[13,"Staging","","Staging buffer",25,N],[4,"CreationError","","Error creating a buffer.",N,N],[13,"UnsupportedBind","","Some of the bind flags are not supported.",26,N],[13,"Other","","Unknown other error.",26,N],[13,"UnsupportedUsage","","Usage mode is not supported",26,N],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"get_info","","Get buffer info",27,[[["self"]],["info"]]],[11,"is_mapped","","Is this buffer mapped ?",27,[[["self"]],["bool"]]],[11,"eq","","",27,[[["self"],["self"]],["bool"]]],[11,"hash","","",27,[[["self"],["h"]]]],[11,"clone","","",25,[[["self"]],["role"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"hash","","",25,N],[11,"eq","","",25,[[["self"],["role"]],["bool"]]],[11,"clone","","",24,[[["self"]],["info"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"hash","","",24,N],[11,"eq","","",24,[[["self"],["info"]],["bool"]]],[11,"ne","","",24,[[["self"],["info"]],["bool"]]],[11,"clone","","",26,[[["self"]],["creationerror"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"hash","","",26,N],[11,"eq","","",26,[[["self"],["creationerror"]],["bool"]]],[11,"ne","","",26,[[["self"],["creationerror"]],["bool"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"description","","",26,[[["self"]],["str"]]],[0,"command","gfx_core","Command Buffer device interface",N,N],[3,"AccessInfo","gfx_core::command","Informations about what is accessed by a bunch of commands.",N,N],[3,"AccessGuard","","",N,N],[3,"AccessGuardBuffers","","",N,N],[3,"AccessGuardBuffersChain","","",N,N],[4,"ClearColor","","A universal clear color supporting integet formats as well as the standard floating-point.",N,N],[13,"Float","","Standard floating-point vec4 color",28,N],[13,"Int","","Integer vector to clear ivec4 targets.",28,N],[13,"Uint","","Unsigned int vector to clear uvec4 targets.",28,N],[6,"InstanceParams","","Optional instance parameters: (instance count, buffer offset)",N,N],[6,"AccessInfoBuffers","","",N,N],[8,"Buffer","","An interface of the abstract command buffer. It collects commands in an efficient API-specific manner, to be ready for execution on the device.",N,N],[10,"reset","","Reset the command buffer contents, retain the allocated storage",29,[[["self"]]]],[10,"bind_pipeline_state","","Bind a pipeline state object",29,N],[10,"bind_vertex_buffers","","Bind a complete set of vertex buffers",29,[[["self"],["vertexbufferset"]]]],[10,"bind_constant_buffers","","Bind a complete set of constant buffers",29,N],[10,"bind_global_constant","","Bind a global constant",29,[[["self"],["location"],["uniformvalue"]]]],[10,"bind_resource_views","","Bind a complete set of shader resource views",29,N],[10,"bind_unordered_views","","Bind a complete set of unordered access views",29,N],[10,"bind_samplers","","Bind a complete set of samplers",29,N],[10,"bind_pixel_targets","","Bind a complete set of pixel targets, including multiple colors views and an optional depth/stencil view.",29,[[["self"],["pixeltargetset"]]]],[10,"bind_index","","Bind an index buffer",29,N],[10,"set_scissor","","Set scissor rectangle",29,[[["self"],["rect"]]]],[10,"set_ref_values","","Set reference values for the blending and stencil front/back",29,[[["self"],["refvalues"]]]],[10,"copy_buffer","","Copy part of a buffer to another",29,N],[10,"copy_buffer_to_texture","","Copy part of a buffer to a texture",29,N],[10,"copy_texture_to_buffer","","Copy part of a texture to a buffer",29,N],[10,"copy_texture_to_texture","","Copy part of one texture into another",29,[[["self"],["texturecopyregion"],["texturecopyregion"]]]],[10,"update_buffer","","Update a vertex/index/uniform buffer",29,N],[10,"update_texture","","Update a texture",29,N],[10,"generate_mipmap","","",29,N],[10,"clear_color","","Clear color target",29,N],[10,"clear_depth_stencil","","",29,N],[10,"call_draw","","Draw a primitive",29,[[["self"],["vertexcount"],["vertexcount"],["option",["instanceparams"]]]]],[10,"call_draw_indexed","","Draw a primitive with index buffer",29,[[["self"],["vertexcount"],["vertexcount"],["vertexcount"],["option",["instanceparams"]]]]],[11,"clone","","",28,[[["self"]],["clearcolor"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["clearcolor"]],["bool"]]],[11,"ne","","",28,[[["self"],["clearcolor"]],["bool"]]],[11,"partial_cmp","","",28,[[["self"],["clearcolor"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["clearcolor"]],["bool"]]],[11,"le","","",28,[[["self"],["clearcolor"]],["bool"]]],[11,"gt","","",28,[[["self"],["clearcolor"]],["bool"]]],[11,"ge","","",28,[[["self"],["clearcolor"]],["bool"]]],[11,"from","","",28,N],[11,"from","","",28,N],[11,"from","","",28,N],[11,"from","","",28,N],[11,"from","","",28,N],[11,"from","","",28,N],[11,"from","","",28,N],[11,"from","","",28,N],[11,"from","","",28,N],[11,"from","","",28,[[["f32"]],["clearcolor"]]],[11,"from","","",28,[[["i32"]],["clearcolor"]]],[11,"from","","",28,[[["u32"]],["clearcolor"]]],[11,"clone","","",30,[[["self"]],["accessinfo"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["accessinfo"]],["bool"]]],[11,"ne","","",30,[[["self"],["accessinfo"]],["bool"]]],[11,"new","","Creates empty access informations",30,[[],["self"]]],[11,"clear","","Clear access informations",30,[[["self"]]]],[11,"buffer_read","","Register a buffer read access",30,[[["self"],["rawbuffer"]]]],[11,"buffer_write","","Register a buffer write access",30,[[["self"],["rawbuffer"]]]],[11,"mapped_reads","","Returns the mapped buffers that The GPU will read from",30,[[["self"]],["accessinfobuffers"]]],[11,"mapped_writes","","Returns the mapped buffers that The GPU will write to",30,[[["self"]],["accessinfobuffers"]]],[11,"has_mapped_reads","","Is there any mapped buffer reads ?",30,[[["self"]],["bool"]]],[11,"has_mapped_writes","","Is there any mapped buffer writes ?",30,[[["self"]],["bool"]]],[11,"take_accesses","","Takes all the accesses necessary for submission",30,[[["self"]],["submissionresult",["accessguard"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"access_mapped_reads","","Returns the mapped buffers that The GPU will read from, with exclusive acces to their mapping",31,[[["self"]],["accessguardbuffers"]]],[11,"access_mapped_writes","","Returns the mapped buffers that The GPU will write to, with exclusive acces to their mapping",31,[[["self"]],["accessguardbuffers"]]],[11,"access_mapped","","",31,[[["self"]],["accessguardbufferschain"]]],[11,"deref","","",31,N],[11,"drop","","",31,[[["self"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"next","","",33,[[["self"]],["option"]]],[0,"dummy","gfx_core","Dummy backend implementation to test the code for compile errors outside of the graphics development environment.",N,N],[3,"DummyDevice","gfx_core::dummy","Dummy device which does minimal work, just to allow testing gfx-rs apps for compilation.",N,N],[3,"DummyFence","","Dummy fence that does nothing.",N,N],[3,"DummyMapping","","Dummy mapping which will crash on use.",N,N],[3,"DummyCommandBuffer","","Dummy command buffer, which ignores all the calls.",N,N],[4,"DummyResources","","Dummy resources phantom type",N,N],[11,"clone","","",34,[[["self"]],["dummyresources"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"hash","","",34,N],[11,"eq","","",34,[[["self"],["dummyresources"]],["bool"]]],[11,"clone","","",35,[[["self"]],["dummyfence"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"hash","","",35,N],[11,"eq","","",35,[[["self"],["dummyfence"]],["bool"]]],[11,"clone","","",36,[[["self"]],["dummymapping"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"hash","","",36,N],[11,"eq","","",36,[[["self"],["dummymapping"]],["bool"]]],[11,"new","","Create a new dummy device",37,[[],["dummydevice"]]],[11,"reset","","",38,[[["self"]]]],[11,"bind_pipeline_state","","",38,N],[11,"bind_vertex_buffers","","",38,[[["self"],["vertexbufferset",["dummyresources"]]]]],[11,"bind_constant_buffers","","",38,N],[11,"bind_global_constant","","",38,[[["self"],["location"],["uniformvalue"]]]],[11,"bind_resource_views","","",38,N],[11,"bind_unordered_views","","",38,N],[11,"bind_samplers","","",38,N],[11,"bind_pixel_targets","","",38,[[["self"],["pixeltargetset",["dummyresources"]]]]],[11,"bind_index","","",38,N],[11,"set_scissor","","",38,[[["self"],["rect"]]]],[11,"set_ref_values","","",38,[[["self"],["refvalues"]]]],[11,"copy_buffer","","",38,N],[11,"copy_buffer_to_texture","","",38,N],[11,"copy_texture_to_buffer","","",38,N],[11,"copy_texture_to_texture","","",38,[[["self"],["texturecopyregion"],["texturecopyregion"]]]],[11,"update_buffer","","",38,N],[11,"update_texture","","",38,N],[11,"generate_mipmap","","",38,N],[11,"clear_color","","",38,N],[11,"clear_depth_stencil","","",38,N],[11,"call_draw","","",38,[[["self"],["vertexcount"],["vertexcount"],["option",["instanceparams"]]]]],[11,"call_draw_indexed","","",38,[[["self"],["vertexcount"],["vertexcount"],["vertexcount"],["option",["instanceparams"]]]]],[11,"get_capabilities","","",37,[[["self"]],["capabilities"]]],[11,"pin_submitted_resources","","",37,[[["self"],["manager"]]]],[11,"submit","","",37,[[["self"],["dummycommandbuffer"],["accessinfo"]],["submissionresult"]]],[11,"fenced_submit","","",37,N],[11,"wait_fence","","",37,[[["self"],["fence"]]]],[11,"cleanup","","",37,[[["self"]]]],[0,"factory","gfx_core","Resource factory",N,N],[4,"ResourceViewError","gfx_core::factory","Error creating either a ShaderResourceView, or UnorderedAccessView.",N,N],[13,"NoBindFlag","","The corresponding bind flag is not present in the texture.",39,N],[13,"Channel","","Selected channel type is not supported for this texture.",39,N],[13,"Layer","","Selected layer can not be viewed for this texture.",39,N],[13,"Unsupported","","The backend was refused for some reason.",39,N],[4,"TargetViewError","","Error creating either a RenderTargetView, or DepthStencilView.",N,N],[13,"NoBindFlag","","The `RENDER_TARGET`/`DEPTH_STENCIL` flag is not present in the texture.",40,N],[13,"Level","","Selected mip level doesn't exist.",40,N],[13,"Layer","","Selected array layer doesn't exist.",40,N],[13,"Channel","","Selected channel type is not supported for this texture.",40,N],[13,"Unsupported","","The backend was refused for some reason.",40,N],[13,"NotDetached","","The RTV cannot be changed due to the references to it existing.",40,N],[4,"CombinedError","","An error from creating textures with views at the same time.",N,N],[13,"Texture","","Failed to create the raw texture.",41,N],[13,"Resource","","Failed to create SRV or UAV.",41,N],[13,"Target","","Failed to create RTV or DSV.",41,N],[8,"Factory","","Overview",N,N],[10,"get_capabilities","","Returns the capabilities of this `Factory`. This usually depends on the graphics API being used.",42,[[["self"]],["capabilities"]]],[10,"create_buffer_raw","","",42,[[["self"],["info"]],["result",["rawbuffer","creationerror"]]]],[10,"create_buffer_immutable_raw","","",42,N],[11,"create_buffer_immutable","","",42,N],[11,"create_buffer","","",42,[[["self"],["usize"],["role"],["usage"],["bind"]],["result",["buffer","creationerror"]]]],[10,"create_pipeline_state_raw","","Creates a new `RawPipelineState`. To create a safely typed `PipelineState`, see the `FactoryExt` trait and `pso` module, both in the `gfx` crate.",42,[[["self"],["program"],["descriptor"]],["result",["rawpipelinestate","creationerror"]]]],[10,"create_program","","Creates a new shader `Program` for the supplied `ShaderSet`.",42,[[["self"],["shaderset"]],["result",["program","createprogramerror"]]]],[10,"create_shader","","Compiles a shader source into a `Shader` object that can be used to create a shader `Program`.",42,N],[11,"create_shader_vertex","","Compiles a `VertexShader` from source.",42,N],[11,"create_shader_hull","","Compiles a `HullShader` from source.",42,N],[11,"create_shader_domain","","Compiles a `VertexShader` from source.",42,N],[11,"create_shader_geometry","","Compiles a `GeometryShader` from source.",42,N],[11,"create_shader_pixel","","Compiles a `PixelShader` from source. This is the same as what some APIs call a fragment shader.",42,N],[10,"create_sampler","","",42,[[["self"],["samplerinfo"]],["sampler"]]],[10,"read_mapping","","Acquire a mapping Reader",42,[[["self"],["buffer"]],["result",["reader","error"]]]],[10,"write_mapping","","Acquire a mapping Writer",42,[[["self"],["buffer"]],["result",["writer","error"]]]],[10,"create_texture_raw","","Create a new empty raw texture with no data. The channel type parameter is a hint, required to assist backends that have no concept of typeless formats (OpenGL). The initial data, if given, has to be provided for all mip levels and slices: Slice0.Mip0, Slice0.Mip1, ..., Slice1.Mip0, ...",42,[[["self"],["info"],["option",["channeltype"]],["option"]],["result",["rawtexture","creationerror"]]]],[10,"view_buffer_as_shader_resource_raw","","",42,[[["self"],["rawbuffer"],["format"]],["result",["rawshaderresourceview","resourceviewerror"]]]],[10,"view_buffer_as_unordered_access_raw","","",42,[[["self"],["rawbuffer"]],["result",["rawunorderedaccessview","resourceviewerror"]]]],[10,"view_texture_as_shader_resource_raw","","",42,[[["self"],["rawtexture"],["resourcedesc"]],["result",["rawshaderresourceview","resourceviewerror"]]]],[10,"view_texture_as_unordered_access_raw","","",42,[[["self"],["rawtexture"]],["result",["rawunorderedaccessview","resourceviewerror"]]]],[10,"view_texture_as_render_target_raw","","",42,[[["self"],["rawtexture"],["renderdesc"]],["result",["rawrendertargetview","targetviewerror"]]]],[10,"view_texture_as_depth_stencil_raw","","",42,[[["self"],["rawtexture"],["depthstencildesc"]],["result",["rawdepthstencilview","targetviewerror"]]]],[11,"create_texture","","",42,[[["self"],["kind"],["level"],["bind"],["usage"],["option",["channeltype"]]],["result",["texture","creationerror"]]]],[11,"view_buffer_as_shader_resource","","",42,[[["self"],["buffer"]],["result",["shaderresourceview","resourceviewerror"]]]],[11,"view_buffer_as_unordered_access","","",42,[[["self"],["buffer"]],["result",["unorderedaccessview","resourceviewerror"]]]],[11,"view_texture_as_shader_resource","","",42,N],[11,"view_texture_as_unordered_access","","",42,[[["self"],["texture"]],["result",["unorderedaccessview","resourceviewerror"]]]],[11,"view_texture_as_render_target","","",42,[[["self"],["texture"],["level"],["option",["layer"]]],["result",["rendertargetview","targetviewerror"]]]],[11,"view_texture_as_depth_stencil","","",42,[[["self"],["texture"],["level"],["option",["layer"]],["depthstencilflags"]],["result",["depthstencilview","targetviewerror"]]]],[11,"view_texture_as_depth_stencil_trivial","","",42,[[["self"],["texture"]],["result",["depthstencilview","targetviewerror"]]]],[11,"create_texture_immutable_u8","","",42,N],[11,"create_texture_immutable","","",42,N],[11,"create_render_target","","",42,[[["self"],["size"],["size"]],["result",["combinederror"]]]],[11,"create_depth_stencil","","",42,[[["self"],["size"],["size"]],["result",["combinederror"]]]],[11,"create_depth_stencil_view_only","","",42,[[["self"],["size"],["size"]],["result",["depthstencilview","combinederror"]]]],[11,"clone","","",39,[[["self"]],["resourceviewerror"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["resourceviewerror"]],["bool"]]],[11,"ne","","",39,[[["self"],["resourceviewerror"]],["bool"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"description","","",39,[[["self"]],["str"]]],[11,"cause","","",39,[[["self"]],["option",["error"]]]],[11,"clone","","",40,[[["self"]],["targetviewerror"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["targetviewerror"]],["bool"]]],[11,"ne","","",40,[[["self"],["targetviewerror"]],["bool"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"description","","",40,[[["self"]],["str"]]],[11,"cause","","",40,[[["self"]],["option",["error"]]]],[11,"clone","","",41,[[["self"]],["combinederror"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["combinederror"]],["bool"]]],[11,"ne","","",41,[[["self"],["combinederror"]],["bool"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"description","","",41,[[["self"]],["str"]]],[11,"cause","","",41,[[["self"]],["option",["error"]]]],[11,"from","","",41,[[["creationerror"]],["combinederror"]]],[11,"from","","",41,[[["resourceviewerror"]],["combinederror"]]],[11,"from","","",41,[[["targetviewerror"]],["combinederror"]]],[0,"format","gfx_core","Universal format specification. Applicable to textures, views, and vertex buffers.",N,N],[3,"Swizzle","gfx_core::format","Channel swizzle configuration for the resource views. Note: It's not currently mirrored at compile-time, thus providing less safety and convenience.",N,N],[12,"0","","",43,N],[12,"1","","",43,N],[12,"2","","",43,N],[12,"3","","",43,N],[3,"Format","","Complete run-time surface format.",N,N],[12,"0","","",44,N],[12,"1","","",44,N],[3,"U8Norm","","",N,N],[12,"0","","",45,N],[3,"I8Norm","","",N,N],[12,"0","","",46,N],[3,"U16Norm","","",N,N],[12,"0","","",47,N],[3,"I16Norm","","",N,N],[12,"0","","",48,N],[3,"F16","","",N,N],[12,"0","","",49,N],[4,"ChannelType","","Type of a surface channel. This is how we interpret the storage allocated with `SurfaceType`.",N,N],[13,"Int","","",50,N],[13,"Uint","","",50,N],[13,"Inorm","","",50,N],[13,"Unorm","","",50,N],[13,"Float","","",50,N],[13,"Srgb","","",50,N],[4,"Int","","",N,N],[4,"Uint","","",N,N],[4,"Inorm","","",N,N],[4,"Unorm","","",N,N],[4,"Float","","",N,N],[4,"Srgb","","",N,N],[4,"SurfaceType","","Type of the allocated texture surface. It is supposed to only carry information about the number of bits per each channel. The actual types are up to the views to decide and interpret. The actual components are up to the swizzle to define.",N,N],[13,"R4_G4","","",51,N],[13,"R4_G4_B4_A4","","",51,N],[13,"R5_G5_B5_A1","","",51,N],[13,"R5_G6_B5","","",51,N],[13,"R8","","",51,N],[13,"R8_G8","","",51,N],[13,"R8_G8_B8_A8","","",51,N],[13,"R10_G10_B10_A2","","",51,N],[13,"R11_G11_B10","","",51,N],[13,"R16","","",51,N],[13,"R16_G16","","",51,N],[13,"R16_G16_B16","","",51,N],[13,"R16_G16_B16_A16","","",51,N],[13,"R32","","",51,N],[13,"R32_G32","","",51,N],[13,"R32_G32_B32","","",51,N],[13,"R32_G32_B32_A32","","",51,N],[13,"B8_G8_R8_A8","","",51,N],[13,"D16","","",51,N],[13,"D24","","",51,N],[13,"D24_S8","","",51,N],[13,"D32","","",51,N],[4,"R4_G4","","",N,N],[4,"R4_G4_B4_A4","","",N,N],[4,"R5_G5_B5_A1","","",N,N],[4,"R5_G6_B5","","",N,N],[4,"R8","","",N,N],[4,"R8_G8","","",N,N],[4,"R8_G8_B8_A8","","",N,N],[4,"R10_G10_B10_A2","","",N,N],[4,"R11_G11_B10","","",N,N],[4,"R16","","",N,N],[4,"R16_G16","","",N,N],[4,"R16_G16_B16","","",N,N],[4,"R16_G16_B16_A16","","",N,N],[4,"R32","","",N,N],[4,"R32_G32","","",N,N],[4,"R32_G32_B32","","",N,N],[4,"R32_G32_B32_A32","","",N,N],[4,"B8_G8_R8_A8","","",N,N],[4,"D16","","",N,N],[4,"D24","","",N,N],[4,"D24_S8","","",N,N],[4,"D32","","",N,N],[4,"ChannelSource","","Source channel in a swizzle configuration. Some may redirect onto different physical channels, some may be hardcoded to 0 or 1.",N,N],[13,"Zero","","",52,N],[13,"One","","",52,N],[13,"X","","",52,N],[13,"Y","","",52,N],[13,"Z","","",52,N],[13,"W","","",52,N],[6,"Vec1","","Abstracted 1-element container for macro internal use",N,N],[6,"Vec2","","Abstracted 2-element container for macro internal use",N,N],[6,"Vec3","","Abstracted 3-element container for macro internal use",N,N],[6,"Vec4","","Abstracted 4-element container for macro internal use",N,N],[6,"Rgba8","","Standard 8bits RGBA format.",N,N],[6,"Srgba8","","Standard 8bit gamma transforming RGB format.",N,N],[6,"Rgb10a2F","","Standard HDR floating-point format with 10 bits for RGB components and 2 bits for the alpha.",N,N],[6,"Rgba16F","","Standard 16-bit floating-point RGBA format.",N,N],[6,"Rgba32F","","Standard 32-bit floating-point RGBA format.",N,N],[6,"Bgra8","","Standard 8bits BGRA format.",N,N],[6,"Depth","","Standard 24-bit depth format.",N,N],[6,"DepthStencil","","Standard 24-bit depth format with 8-bit stencil.",N,N],[6,"Depth32F","","Standard 32-bit floating-point depth format.",N,N],[8,"SurfaceTyped","","Compile-time surface type trait.",N,N],[16,"DataType","","The corresponding data type to be passed from CPU.",53,N],[10,"get_surface_type","","Return the run-time value of the type.",53,[[],["surfacetype"]]],[8,"BufferSurface","","An ability of a surface type to be used for vertex buffers.",N,N],[8,"TextureSurface","","An ability of a surface type to be used for textures.",N,N],[8,"RenderSurface","","An ability of a surface type to be used for render targets.",N,N],[8,"DepthSurface","","An ability of a surface type to be used for depth targets.",N,N],[8,"StencilSurface","","An ability of a surface type to be used for stencil targets.",N,N],[8,"ChannelTyped","","Compile-time channel type trait.",N,N],[16,"ShaderType","","Shader-visible type that corresponds to this channel. For example, normalized integers are visible as floats.",54,N],[10,"get_channel_type","","Return the run-time value of the type.",54,[[],["channeltype"]]],[8,"TextureChannel","","An ability of a channel type to be used for textures.",N,N],[8,"RenderChannel","","An ability of a channel type to be used for render targets.",N,N],[8,"BlendChannel","","An ability of a channel type to be used for blended render targets.",N,N],[8,"Formatted","","Compile-time full format trait.",N,N],[16,"Surface","","Associated surface type.",55,N],[16,"Channel","","Associated channel type.",55,N],[16,"View","","Shader view type of this format.",55,N],[11,"get_format","","Return the run-time value of the type.",55,[[],["format"]]],[8,"BufferFormat","","Ability to be used for vertex buffers.",N,N],[8,"DepthFormat","","Ability to be used for depth targets.",N,N],[8,"StencilFormat","","Ability to be used for vertex buffers.",N,N],[8,"DepthStencilFormat","","Ability to be used for depth+stencil targets.",N,N],[8,"TextureFormat","","Ability to be used for textures.",N,N],[8,"RenderFormat","","Ability to be used for render targets.",N,N],[8,"BlendFormat","","Ability to be used for blended render targets.",N,N],[11,"clone","","",50,[[["self"]],["channeltype"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"hash","","",50,N],[11,"cmp","","",50,[[["self"],["channeltype"]],["ordering"]]],[11,"eq","","",50,[[["self"],["channeltype"]],["bool"]]],[11,"partial_cmp","","",50,[[["self"],["channeltype"]],["option",["ordering"]]]],[11,"clone","","",56,[[["self"]],["int"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"hash","","",56,N],[11,"cmp","","",56,[[["self"],["int"]],["ordering"]]],[11,"eq","","",56,[[["self"],["int"]],["bool"]]],[11,"partial_cmp","","",56,[[["self"],["int"]],["option",["ordering"]]]],[11,"get_channel_type","","",56,[[],["channeltype"]]],[11,"clone","","",57,[[["self"]],["uint"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"hash","","",57,N],[11,"cmp","","",57,[[["self"],["uint"]],["ordering"]]],[11,"eq","","",57,[[["self"],["uint"]],["bool"]]],[11,"partial_cmp","","",57,[[["self"],["uint"]],["option",["ordering"]]]],[11,"get_channel_type","","",57,[[],["channeltype"]]],[11,"clone","","",58,[[["self"]],["inorm"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"hash","","",58,N],[11,"cmp","","",58,[[["self"],["inorm"]],["ordering"]]],[11,"eq","","",58,[[["self"],["inorm"]],["bool"]]],[11,"partial_cmp","","",58,[[["self"],["inorm"]],["option",["ordering"]]]],[11,"get_channel_type","","",58,[[],["channeltype"]]],[11,"clone","","",59,[[["self"]],["unorm"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"hash","","",59,N],[11,"cmp","","",59,[[["self"],["unorm"]],["ordering"]]],[11,"eq","","",59,[[["self"],["unorm"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["unorm"]],["option",["ordering"]]]],[11,"get_channel_type","","",59,[[],["channeltype"]]],[11,"clone","","",60,[[["self"]],["float"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"hash","","",60,N],[11,"cmp","","",60,[[["self"],["float"]],["ordering"]]],[11,"eq","","",60,[[["self"],["float"]],["bool"]]],[11,"partial_cmp","","",60,[[["self"],["float"]],["option",["ordering"]]]],[11,"get_channel_type","","",60,[[],["channeltype"]]],[11,"clone","","",61,[[["self"]],["srgb"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"hash","","",61,N],[11,"cmp","","",61,[[["self"],["srgb"]],["ordering"]]],[11,"eq","","",61,[[["self"],["srgb"]],["bool"]]],[11,"partial_cmp","","",61,[[["self"],["srgb"]],["option",["ordering"]]]],[11,"get_channel_type","","",61,[[],["channeltype"]]],[11,"clone","","",51,[[["self"]],["surfacetype"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"hash","","",51,N],[11,"cmp","","",51,[[["self"],["surfacetype"]],["ordering"]]],[11,"eq","","",51,[[["self"],["surfacetype"]],["bool"]]],[11,"partial_cmp","","",51,[[["self"],["surfacetype"]],["option",["ordering"]]]],[11,"get_total_bits","","Return the total number of bits for this format.",51,[[["self"]],["u8"]]],[11,"get_alpha_stencil_bits","","Return the number of bits allocated for alpha and stencil.",51,[[["self"]],["u8"]]],[11,"clone","","",62,[[["self"]],["r4_g4"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"hash","","",62,N],[11,"cmp","","",62,[[["self"],["r4_g4"]],["ordering"]]],[11,"eq","","",62,[[["self"],["r4_g4"]],["bool"]]],[11,"partial_cmp","","",62,[[["self"],["r4_g4"]],["option",["ordering"]]]],[11,"get_surface_type","","",62,[[],["surfacetype"]]],[11,"clone","","",63,[[["self"]],["r4_g4_b4_a4"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"hash","","",63,N],[11,"cmp","","",63,[[["self"],["r4_g4_b4_a4"]],["ordering"]]],[11,"eq","","",63,[[["self"],["r4_g4_b4_a4"]],["bool"]]],[11,"partial_cmp","","",63,[[["self"],["r4_g4_b4_a4"]],["option",["ordering"]]]],[11,"get_surface_type","","",63,[[],["surfacetype"]]],[11,"clone","","",64,[[["self"]],["r5_g5_b5_a1"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"hash","","",64,N],[11,"cmp","","",64,[[["self"],["r5_g5_b5_a1"]],["ordering"]]],[11,"eq","","",64,[[["self"],["r5_g5_b5_a1"]],["bool"]]],[11,"partial_cmp","","",64,[[["self"],["r5_g5_b5_a1"]],["option",["ordering"]]]],[11,"get_surface_type","","",64,[[],["surfacetype"]]],[11,"clone","","",65,[[["self"]],["r5_g6_b5"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"hash","","",65,N],[11,"cmp","","",65,[[["self"],["r5_g6_b5"]],["ordering"]]],[11,"eq","","",65,[[["self"],["r5_g6_b5"]],["bool"]]],[11,"partial_cmp","","",65,[[["self"],["r5_g6_b5"]],["option",["ordering"]]]],[11,"get_surface_type","","",65,[[],["surfacetype"]]],[11,"clone","","",66,[[["self"]],["r8"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"hash","","",66,N],[11,"cmp","","",66,[[["self"],["r8"]],["ordering"]]],[11,"eq","","",66,[[["self"],["r8"]],["bool"]]],[11,"partial_cmp","","",66,[[["self"],["r8"]],["option",["ordering"]]]],[11,"get_surface_type","","",66,[[],["surfacetype"]]],[11,"clone","","",67,[[["self"]],["r8_g8"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"hash","","",67,N],[11,"cmp","","",67,[[["self"],["r8_g8"]],["ordering"]]],[11,"eq","","",67,[[["self"],["r8_g8"]],["bool"]]],[11,"partial_cmp","","",67,[[["self"],["r8_g8"]],["option",["ordering"]]]],[11,"get_surface_type","","",67,[[],["surfacetype"]]],[11,"clone","","",68,[[["self"]],["r8_g8_b8_a8"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"hash","","",68,N],[11,"cmp","","",68,[[["self"],["r8_g8_b8_a8"]],["ordering"]]],[11,"eq","","",68,[[["self"],["r8_g8_b8_a8"]],["bool"]]],[11,"partial_cmp","","",68,[[["self"],["r8_g8_b8_a8"]],["option",["ordering"]]]],[11,"get_surface_type","","",68,[[],["surfacetype"]]],[11,"clone","","",69,[[["self"]],["r10_g10_b10_a2"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"hash","","",69,N],[11,"cmp","","",69,[[["self"],["r10_g10_b10_a2"]],["ordering"]]],[11,"eq","","",69,[[["self"],["r10_g10_b10_a2"]],["bool"]]],[11,"partial_cmp","","",69,[[["self"],["r10_g10_b10_a2"]],["option",["ordering"]]]],[11,"get_surface_type","","",69,[[],["surfacetype"]]],[11,"clone","","",70,[[["self"]],["r11_g11_b10"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"hash","","",70,N],[11,"cmp","","",70,[[["self"],["r11_g11_b10"]],["ordering"]]],[11,"eq","","",70,[[["self"],["r11_g11_b10"]],["bool"]]],[11,"partial_cmp","","",70,[[["self"],["r11_g11_b10"]],["option",["ordering"]]]],[11,"get_surface_type","","",70,[[],["surfacetype"]]],[11,"clone","","",71,[[["self"]],["r16"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"hash","","",71,N],[11,"cmp","","",71,[[["self"],["r16"]],["ordering"]]],[11,"eq","","",71,[[["self"],["r16"]],["bool"]]],[11,"partial_cmp","","",71,[[["self"],["r16"]],["option",["ordering"]]]],[11,"get_surface_type","","",71,[[],["surfacetype"]]],[11,"clone","","",72,[[["self"]],["r16_g16"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"hash","","",72,N],[11,"cmp","","",72,[[["self"],["r16_g16"]],["ordering"]]],[11,"eq","","",72,[[["self"],["r16_g16"]],["bool"]]],[11,"partial_cmp","","",72,[[["self"],["r16_g16"]],["option",["ordering"]]]],[11,"get_surface_type","","",72,[[],["surfacetype"]]],[11,"clone","","",73,[[["self"]],["r16_g16_b16"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"hash","","",73,N],[11,"cmp","","",73,[[["self"],["r16_g16_b16"]],["ordering"]]],[11,"eq","","",73,[[["self"],["r16_g16_b16"]],["bool"]]],[11,"partial_cmp","","",73,[[["self"],["r16_g16_b16"]],["option",["ordering"]]]],[11,"get_surface_type","","",73,[[],["surfacetype"]]],[11,"clone","","",74,[[["self"]],["r16_g16_b16_a16"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"hash","","",74,N],[11,"cmp","","",74,[[["self"],["r16_g16_b16_a16"]],["ordering"]]],[11,"eq","","",74,[[["self"],["r16_g16_b16_a16"]],["bool"]]],[11,"partial_cmp","","",74,[[["self"],["r16_g16_b16_a16"]],["option",["ordering"]]]],[11,"get_surface_type","","",74,[[],["surfacetype"]]],[11,"clone","","",75,[[["self"]],["r32"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"hash","","",75,N],[11,"cmp","","",75,[[["self"],["r32"]],["ordering"]]],[11,"eq","","",75,[[["self"],["r32"]],["bool"]]],[11,"partial_cmp","","",75,[[["self"],["r32"]],["option",["ordering"]]]],[11,"get_surface_type","","",75,[[],["surfacetype"]]],[11,"clone","","",76,[[["self"]],["r32_g32"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"hash","","",76,N],[11,"cmp","","",76,[[["self"],["r32_g32"]],["ordering"]]],[11,"eq","","",76,[[["self"],["r32_g32"]],["bool"]]],[11,"partial_cmp","","",76,[[["self"],["r32_g32"]],["option",["ordering"]]]],[11,"get_surface_type","","",76,[[],["surfacetype"]]],[11,"clone","","",77,[[["self"]],["r32_g32_b32"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"hash","","",77,N],[11,"cmp","","",77,[[["self"],["r32_g32_b32"]],["ordering"]]],[11,"eq","","",77,[[["self"],["r32_g32_b32"]],["bool"]]],[11,"partial_cmp","","",77,[[["self"],["r32_g32_b32"]],["option",["ordering"]]]],[11,"get_surface_type","","",77,[[],["surfacetype"]]],[11,"clone","","",78,[[["self"]],["r32_g32_b32_a32"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"hash","","",78,N],[11,"cmp","","",78,[[["self"],["r32_g32_b32_a32"]],["ordering"]]],[11,"eq","","",78,[[["self"],["r32_g32_b32_a32"]],["bool"]]],[11,"partial_cmp","","",78,[[["self"],["r32_g32_b32_a32"]],["option",["ordering"]]]],[11,"get_surface_type","","",78,[[],["surfacetype"]]],[11,"clone","","",79,[[["self"]],["b8_g8_r8_a8"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"hash","","",79,N],[11,"cmp","","",79,[[["self"],["b8_g8_r8_a8"]],["ordering"]]],[11,"eq","","",79,[[["self"],["b8_g8_r8_a8"]],["bool"]]],[11,"partial_cmp","","",79,[[["self"],["b8_g8_r8_a8"]],["option",["ordering"]]]],[11,"get_surface_type","","",79,[[],["surfacetype"]]],[11,"clone","","",80,[[["self"]],["d16"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"hash","","",80,N],[11,"cmp","","",80,[[["self"],["d16"]],["ordering"]]],[11,"eq","","",80,[[["self"],["d16"]],["bool"]]],[11,"partial_cmp","","",80,[[["self"],["d16"]],["option",["ordering"]]]],[11,"get_surface_type","","",80,[[],["surfacetype"]]],[11,"clone","","",81,[[["self"]],["d24"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"hash","","",81,N],[11,"cmp","","",81,[[["self"],["d24"]],["ordering"]]],[11,"eq","","",81,[[["self"],["d24"]],["bool"]]],[11,"partial_cmp","","",81,[[["self"],["d24"]],["option",["ordering"]]]],[11,"get_surface_type","","",81,[[],["surfacetype"]]],[11,"clone","","",82,[[["self"]],["d24_s8"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"hash","","",82,N],[11,"cmp","","",82,[[["self"],["d24_s8"]],["ordering"]]],[11,"eq","","",82,[[["self"],["d24_s8"]],["bool"]]],[11,"partial_cmp","","",82,[[["self"],["d24_s8"]],["option",["ordering"]]]],[11,"get_surface_type","","",82,[[],["surfacetype"]]],[11,"clone","","",83,[[["self"]],["d32"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"hash","","",83,N],[11,"cmp","","",83,[[["self"],["d32"]],["ordering"]]],[11,"eq","","",83,[[["self"],["d32"]],["bool"]]],[11,"partial_cmp","","",83,[[["self"],["d32"]],["option",["ordering"]]]],[11,"get_surface_type","","",83,[[],["surfacetype"]]],[11,"clone","","",52,[[["self"]],["channelsource"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"hash","","",52,N],[11,"cmp","","",52,[[["self"],["channelsource"]],["ordering"]]],[11,"eq","","",52,[[["self"],["channelsource"]],["bool"]]],[11,"partial_cmp","","",52,[[["self"],["channelsource"]],["option",["ordering"]]]],[11,"clone","","",43,[[["self"]],["swizzle"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"hash","","",43,N],[11,"cmp","","",43,[[["self"],["swizzle"]],["ordering"]]],[11,"eq","","",43,[[["self"],["swizzle"]],["bool"]]],[11,"ne","","",43,[[["self"],["swizzle"]],["bool"]]],[11,"partial_cmp","","",43,[[["self"],["swizzle"]],["option",["ordering"]]]],[11,"lt","","",43,[[["self"],["swizzle"]],["bool"]]],[11,"le","","",43,[[["self"],["swizzle"]],["bool"]]],[11,"gt","","",43,[[["self"],["swizzle"]],["bool"]]],[11,"ge","","",43,[[["self"],["swizzle"]],["bool"]]],[11,"new","","Create a new swizzle where each channel is unmapped.",43,[[],["swizzle"]]],[11,"clone","","",44,[[["self"]],["format"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"hash","","",44,N],[11,"cmp","","",44,[[["self"],["format"]],["ordering"]]],[11,"eq","","",44,[[["self"],["format"]],["bool"]]],[11,"ne","","",44,[[["self"],["format"]],["bool"]]],[11,"partial_cmp","","",44,[[["self"],["format"]],["option",["ordering"]]]],[11,"lt","","",44,[[["self"],["format"]],["bool"]]],[11,"le","","",44,[[["self"],["format"]],["bool"]]],[11,"gt","","",44,[[["self"],["format"]],["bool"]]],[11,"ge","","",44,[[["self"],["format"]],["bool"]]],[11,"clone","","",45,[[["self"]],["u8norm"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"hash","","",45,N],[11,"cmp","","",45,[[["self"],["u8norm"]],["ordering"]]],[11,"eq","","",45,[[["self"],["u8norm"]],["bool"]]],[11,"ne","","",45,[[["self"],["u8norm"]],["bool"]]],[11,"partial_cmp","","",45,[[["self"],["u8norm"]],["option",["ordering"]]]],[11,"lt","","",45,[[["self"],["u8norm"]],["bool"]]],[11,"le","","",45,[[["self"],["u8norm"]],["bool"]]],[11,"gt","","",45,[[["self"],["u8norm"]],["bool"]]],[11,"ge","","",45,[[["self"],["u8norm"]],["bool"]]],[11,"from","","",45,[[["u8"]],["u8norm"]]],[11,"cast2","","Convert a 2-element slice.",45,N],[11,"cast3","","Convert a 3-element slice.",45,N],[11,"cast4","","Convert a 4-element slice.",45,N],[11,"cast_slice","","Convert a generic slice by transmutation.",45,N],[11,"clone","","",46,[[["self"]],["i8norm"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"hash","","",46,N],[11,"cmp","","",46,[[["self"],["i8norm"]],["ordering"]]],[11,"eq","","",46,[[["self"],["i8norm"]],["bool"]]],[11,"ne","","",46,[[["self"],["i8norm"]],["bool"]]],[11,"partial_cmp","","",46,[[["self"],["i8norm"]],["option",["ordering"]]]],[11,"lt","","",46,[[["self"],["i8norm"]],["bool"]]],[11,"le","","",46,[[["self"],["i8norm"]],["bool"]]],[11,"gt","","",46,[[["self"],["i8norm"]],["bool"]]],[11,"ge","","",46,[[["self"],["i8norm"]],["bool"]]],[11,"from","","",46,[[["i8"]],["i8norm"]]],[11,"cast2","","Convert a 2-element slice.",46,N],[11,"cast3","","Convert a 3-element slice.",46,N],[11,"cast4","","Convert a 4-element slice.",46,N],[11,"cast_slice","","Convert a generic slice by transmutation.",46,N],[11,"clone","","",47,[[["self"]],["u16norm"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"hash","","",47,N],[11,"cmp","","",47,[[["self"],["u16norm"]],["ordering"]]],[11,"eq","","",47,[[["self"],["u16norm"]],["bool"]]],[11,"ne","","",47,[[["self"],["u16norm"]],["bool"]]],[11,"partial_cmp","","",47,[[["self"],["u16norm"]],["option",["ordering"]]]],[11,"lt","","",47,[[["self"],["u16norm"]],["bool"]]],[11,"le","","",47,[[["self"],["u16norm"]],["bool"]]],[11,"gt","","",47,[[["self"],["u16norm"]],["bool"]]],[11,"ge","","",47,[[["self"],["u16norm"]],["bool"]]],[11,"from","","",47,[[["u16"]],["u16norm"]]],[11,"cast2","","Convert a 2-element slice.",47,N],[11,"cast3","","Convert a 3-element slice.",47,N],[11,"cast4","","Convert a 4-element slice.",47,N],[11,"cast_slice","","Convert a generic slice by transmutation.",47,N],[11,"clone","","",48,[[["self"]],["i16norm"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"hash","","",48,N],[11,"cmp","","",48,[[["self"],["i16norm"]],["ordering"]]],[11,"eq","","",48,[[["self"],["i16norm"]],["bool"]]],[11,"ne","","",48,[[["self"],["i16norm"]],["bool"]]],[11,"partial_cmp","","",48,[[["self"],["i16norm"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["i16norm"]],["bool"]]],[11,"le","","",48,[[["self"],["i16norm"]],["bool"]]],[11,"gt","","",48,[[["self"],["i16norm"]],["bool"]]],[11,"ge","","",48,[[["self"],["i16norm"]],["bool"]]],[11,"from","","",48,[[["i16"]],["i16norm"]]],[11,"cast2","","Convert a 2-element slice.",48,N],[11,"cast3","","Convert a 3-element slice.",48,N],[11,"cast4","","Convert a 4-element slice.",48,N],[11,"cast_slice","","Convert a generic slice by transmutation.",48,N],[11,"clone","","",49,[[["self"]],["f16"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"hash","","",49,N],[11,"cmp","","",49,[[["self"],["f16"]],["ordering"]]],[11,"eq","","",49,[[["self"],["f16"]],["bool"]]],[11,"ne","","",49,[[["self"],["f16"]],["bool"]]],[11,"partial_cmp","","",49,[[["self"],["f16"]],["option",["ordering"]]]],[11,"lt","","",49,[[["self"],["f16"]],["bool"]]],[11,"le","","",49,[[["self"],["f16"]],["bool"]]],[11,"gt","","",49,[[["self"],["f16"]],["bool"]]],[11,"ge","","",49,[[["self"],["f16"]],["bool"]]],[11,"from","","",49,[[["u16"]],["f16"]]],[11,"cast2","","Convert a 2-element slice.",49,N],[11,"cast3","","Convert a 3-element slice.",49,N],[11,"cast4","","Convert a 4-element slice.",49,N],[11,"cast_slice","","Convert a generic slice by transmutation.",49,N],[0,"handle","gfx_core","Resource handles",N,N],[3,"RawBuffer","gfx_core::handle","Untyped buffer handle",N,N],[3,"Buffer","","Type-safe buffer handle",N,N],[3,"Shader","","Shader Handle",N,N],[3,"Program","","Program Handle",N,N],[3,"RawPipelineState","","Raw Pipeline State Handle",N,N],[3,"RawTexture","","Raw texture handle",N,N],[3,"Texture","","Typed texture object",N,N],[3,"RawShaderResourceView","","Raw Shader Resource View Handle",N,N],[3,"ShaderResourceView","","Type-safe Shader Resource View Handle",N,N],[3,"RawUnorderedAccessView","","Raw Unordered Access View Handle",N,N],[3,"UnorderedAccessView","","Type-safe Unordered Access View Handle",N,N],[3,"RawRenderTargetView","","Raw RTV",N,N],[3,"RawDepthStencilView","","Raw DSV",N,N],[3,"RenderTargetView","","Typed RTV",N,N],[3,"DepthStencilView","","Typed DSV",N,N],[3,"Sampler","","Sampler Handle",N,N],[3,"Fence","","Fence Handle",N,N],[3,"Manager","","Stores reference-counted resources used in a command buffer. Seals actual resource names behind the interface, automatically referencing them both by the Factory on resource creation and the Renderer during CommandBuffer population.",N,N],[11,"clone","","",84,[[["self"]],["rawbuffer"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"hash","","",84,N],[11,"eq","","",84,[[["self"],["rawbuffer"]],["bool"]]],[11,"ne","","",84,[[["self"],["rawbuffer"]],["bool"]]],[11,"deref","","",84,N],[11,"clone","","",85,[[["self"]],["self"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"hash","","",85,[[["self"],["__hrt"]]]],[11,"eq","","",85,[[["self"],["self"]],["bool"]]],[11,"get_info","","Get the associated information about the buffer",85,[[["self"]],["info"]]],[11,"len","","Get the number of elements in the buffer.",85,[[["self"]],["usize"]]],[11,"clone","","",86,[[["self"]],["shader"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"hash","","",86,N],[11,"eq","","",86,[[["self"],["shader"]],["bool"]]],[11,"ne","","",86,[[["self"],["shader"]],["bool"]]],[11,"clone","","",87,[[["self"]],["program"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"hash","","",87,N],[11,"eq","","",87,[[["self"],["program"]],["bool"]]],[11,"ne","","",87,[[["self"],["program"]],["bool"]]],[11,"deref","","",87,N],[11,"clone","","",88,[[["self"]],["rawpipelinestate"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"hash","","",88,N],[11,"eq","","",88,[[["self"],["rawpipelinestate"]],["bool"]]],[11,"ne","","",88,[[["self"],["rawpipelinestate"]],["bool"]]],[11,"clone","","",89,[[["self"]],["rawtexture"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"hash","","",89,N],[11,"eq","","",89,[[["self"],["rawtexture"]],["bool"]]],[11,"ne","","",89,[[["self"],["rawtexture"]],["bool"]]],[11,"deref","","",89,N],[11,"clone","","",90,[[["self"]],["self"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"hash","","",90,[[["self"],["__hrs"]]]],[11,"eq","","",90,[[["self"],["self"]],["bool"]]],[11,"get_info","","Get texture descriptor",90,[[["self"]],["info"]]],[11,"clone","","",91,[[["self"]],["rawshaderresourceview"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"hash","","",91,N],[11,"eq","","",91,[[["self"],["rawshaderresourceview"]],["bool"]]],[11,"ne","","",91,[[["self"],["rawshaderresourceview"]],["bool"]]],[11,"clone","","",92,[[["self"]],["self"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"hash","","",92,[[["self"],["__hrt"]]]],[11,"eq","","",92,[[["self"],["self"]],["bool"]]],[11,"clone","","",93,[[["self"]],["rawunorderedaccessview"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"hash","","",93,N],[11,"eq","","",93,[[["self"],["rawunorderedaccessview"]],["bool"]]],[11,"ne","","",93,[[["self"],["rawunorderedaccessview"]],["bool"]]],[11,"clone","","",94,[[["self"]],["self"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"hash","","",94,[[["self"],["__hrt"]]]],[11,"eq","","",94,[[["self"],["self"]],["bool"]]],[11,"clone","","",95,[[["self"]],["rawrendertargetview"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"hash","","",95,N],[11,"eq","","",95,[[["self"],["rawrendertargetview"]],["bool"]]],[11,"ne","","",95,[[["self"],["rawrendertargetview"]],["bool"]]],[11,"get_dimensions","","Get target dimensions",95,[[["self"]],["dimensions"]]],[11,"get_texture","","Get the associated texture",95,[[["self"]],["rawtexture"]]],[11,"clone","","",96,[[["self"]],["rawdepthstencilview"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"hash","","",96,N],[11,"eq","","",96,[[["self"],["rawdepthstencilview"]],["bool"]]],[11,"ne","","",96,[[["self"],["rawdepthstencilview"]],["bool"]]],[11,"get_dimensions","","Get target dimensions",96,[[["self"]],["dimensions"]]],[11,"get_texture","","Get the associated texture",96,[[["self"]],["rawtexture"]]],[11,"clone","","",97,[[["self"]],["self"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"hash","","",97,[[["self"],["__hrt"]]]],[11,"eq","","",97,[[["self"],["self"]],["bool"]]],[11,"get_dimensions","","Get target dimensions",97,[[["self"]],["dimensions"]]],[11,"clone","","",98,[[["self"]],["self"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"hash","","",98,[[["self"],["__hrt"]]]],[11,"eq","","",98,[[["self"],["self"]],["bool"]]],[11,"get_dimensions","","Get target dimensions",98,[[["self"]],["dimensions"]]],[11,"clone","","",99,[[["self"]],["sampler"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"hash","","",99,N],[11,"eq","","",99,[[["self"],["sampler"]],["bool"]]],[11,"ne","","",99,[[["self"],["sampler"]],["bool"]]],[11,"get_info","","Get sampler info",99,[[["self"]],["samplerinfo"]]],[11,"clone","","",100,[[["self"]],["fence"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"hash","","",100,N],[11,"eq","","",100,[[["self"],["fence"]],["bool"]]],[11,"ne","","",100,[[["self"],["fence"]],["bool"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new handle manager",101,[[],["manager"]]],[11,"clear","","Clear all references",101,[[["self"]]]],[11,"extend","","Extend with all references of another handle manager",101,[[["self"],["manager"]]]],[11,"count","","Count the total number of referenced resources",101,[[["self"]],["usize"]]],[11,"ref_buffer","","Reference a buffer",101,N],[11,"ref_shader","","Reference a shader",101,N],[11,"ref_program","","Reference a program",101,N],[11,"ref_pso","","Reference a pipeline state object",101,N],[11,"ref_texture","","Reference a texture",101,N],[11,"ref_srv","","Reference a shader resource view",101,N],[11,"ref_uav","","Reference an unordered access view",101,N],[11,"ref_rtv","","Reference an RTV",101,N],[11,"ref_dsv","","Reference a DSV",101,N],[11,"ref_sampler","","Reference a sampler",101,N],[11,"ref_fence","","Reference a fence",101,N],[0,"mapping","gfx_core","Memory mapping",N,N],[3,"Reader","gfx_core::mapping","Mapping reader",N,N],[3,"Writer","","Mapping writer. Currently is not possible to make write-only slice so while it is technically possible to read from Writer, it will lead to an undefined behavior. Please do not read from it.",N,N],[4,"Error","","Error accessing a mapping.",N,N],[13,"InvalidAccess","","The requested mapping access did not match the expected usage.",102,N],[13,"AccessOverlap","","The requested mapping access overlaps with another.",102,N],[11,"clone","","",102,[[["self"]],["error"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"hash","","",102,N],[11,"eq","","",102,[[["self"],["error"]],["bool"]]],[11,"ne","","",102,[[["self"],["error"]],["bool"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"description","","",102,[[["self"]],["str"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"deref","","",103,N],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"deref","","",104,N],[11,"deref_mut","","",104,N],[0,"memory","gfx_core","Types to describe the properties of memory allocated for gfx resources.",N,N],[3,"Access","gfx_core::memory","Flags providing information about the type of memory access to a resource.",N,N],[3,"Bind","","Flags providing information about the usage of a resource.",N,N],[4,"Usage","","How this memory will be used regarding GPU-CPU data flow.",N,N],[13,"Data","","Full speed GPU access. Optimal for render targets and resourced memory.",105,N],[13,"Dynamic","","CPU to GPU data flow with update commands. Used for dynamic buffer data, typically constant buffers.",105,N],[13,"Upload","","CPU to GPU data flow with mapping. Used for staging for upload to GPU.",105,N],[13,"Download","","GPU to CPU data flow with mapping. Used for staging for download from GPU.",105,N],[5,"cast_slice","","Cast a slice from one POD type to another.",N,N],[8,"Pod","","A trait for plain-old-data types.",N,N],[11,"clone","","",105,[[["self"]],["usage"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"hash","","",105,N],[11,"cmp","","",105,[[["self"],["usage"]],["ordering"]]],[11,"eq","","",105,[[["self"],["usage"]],["bool"]]],[11,"partial_cmp","","",105,[[["self"],["usage"]],["option",["ordering"]]]],[11,"eq","","",106,[[["self"],["access"]],["bool"]]],[11,"ne","","",106,[[["self"],["access"]],["bool"]]],[11,"clone","","",106,[[["self"]],["access"]]],[11,"partial_cmp","","",106,[[["self"],["access"]],["option",["ordering"]]]],[11,"lt","","",106,[[["self"],["access"]],["bool"]]],[11,"le","","",106,[[["self"],["access"]],["bool"]]],[11,"gt","","",106,[[["self"],["access"]],["bool"]]],[11,"ge","","",106,[[["self"],["access"]],["bool"]]],[11,"cmp","","",106,[[["self"],["access"]],["ordering"]]],[11,"hash","","",106,N],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[18,"READ","","Read access",106,N],[18,"WRITE","","Write access",106,N],[18,"RW","","Full access",106,N],[11,"empty","","Returns an empty set of flags.",106,[[],["access"]]],[11,"all","","Returns the set containing all flags.",106,[[],["access"]]],[11,"bits","","Returns the raw value of the flags currently stored.",106,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",106,[[["u8"]],["option",["access"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",106,[[["u8"]],["access"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",106,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",106,[[["self"],["access"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",106,[[["self"],["access"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",106,[[["self"],["access"]]]],[11,"remove","","Removes the specified flags in-place.",106,[[["self"],["access"]]]],[11,"toggle","","Toggles the specified flags in-place.",106,[[["self"],["access"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",106,[[["self"],["access"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",106,[[["self"],["access"]],["access"]]],[11,"bitor_assign","","Adds the set of flags.",106,[[["self"],["access"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",106,[[["self"],["access"]],["access"]]],[11,"bitxor_assign","","Toggles the set of flags.",106,[[["self"],["access"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",106,[[["self"],["access"]],["access"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",106,[[["self"],["access"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",106,[[["self"],["access"]],["access"]]],[11,"sub_assign","","Disables all flags enabled in the set.",106,[[["self"],["access"]]]],[11,"not","","Returns the complement of this set of flags.",106,[[["self"]],["access"]]],[11,"extend","","",106,[[["self"],["t"]]]],[11,"from_iter","","",106,[[["t"]],["access"]]],[11,"eq","","",107,[[["self"],["bind"]],["bool"]]],[11,"ne","","",107,[[["self"],["bind"]],["bool"]]],[11,"clone","","",107,[[["self"]],["bind"]]],[11,"partial_cmp","","",107,[[["self"],["bind"]],["option",["ordering"]]]],[11,"lt","","",107,[[["self"],["bind"]],["bool"]]],[11,"le","","",107,[[["self"],["bind"]],["bool"]]],[11,"gt","","",107,[[["self"],["bind"]],["bool"]]],[11,"ge","","",107,[[["self"],["bind"]],["bool"]]],[11,"cmp","","",107,[[["self"],["bind"]],["ordering"]]],[11,"hash","","",107,N],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[18,"RENDER_TARGET","","Can be rendered into.",107,N],[18,"DEPTH_STENCIL","","Can serve as a depth/stencil target.",107,N],[18,"SHADER_RESOURCE","","Can be bound to the shader for reading.",107,N],[18,"UNORDERED_ACCESS","","Can be bound to the shader for writing.",107,N],[18,"TRANSFER_SRC","","Can be transfered from.",107,N],[18,"TRANSFER_DST","","Can be transfered into.",107,N],[11,"empty","","Returns an empty set of flags.",107,[[],["bind"]]],[11,"all","","Returns the set containing all flags.",107,[[],["bind"]]],[11,"bits","","Returns the raw value of the flags currently stored.",107,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,[[["u8"]],["option",["bind"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,[[["u8"]],["bind"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",107,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,[[["self"],["bind"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,[[["self"],["bind"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",107,[[["self"],["bind"]]]],[11,"remove","","Removes the specified flags in-place.",107,[[["self"],["bind"]]]],[11,"toggle","","Toggles the specified flags in-place.",107,[[["self"],["bind"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",107,[[["self"],["bind"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",107,[[["self"],["bind"]],["bind"]]],[11,"bitor_assign","","Adds the set of flags.",107,[[["self"],["bind"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,[[["self"],["bind"]],["bind"]]],[11,"bitxor_assign","","Toggles the set of flags.",107,[[["self"],["bind"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",107,[[["self"],["bind"]],["bind"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",107,[[["self"],["bind"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",107,[[["self"],["bind"]],["bind"]]],[11,"sub_assign","","Disables all flags enabled in the set.",107,[[["self"],["bind"]]]],[11,"not","","Returns the complement of this set of flags.",107,[[["self"]],["bind"]]],[11,"extend","","",107,[[["self"],["t"]]]],[11,"from_iter","","",107,[[["t"]],["bind"]]],[11,"is_mutable","","Is this memory bound to be mutated ?",107,[[["self"]],["bool"]]],[0,"pso","gfx_core","Raw Pipeline State Objects",N,N],[3,"CreationError","gfx_core::pso","Error types happening upon PSO creation on the device side.",N,N],[3,"ColorInfo","","Color output configuration of the PSO.",N,N],[12,"mask","","Color channel mask",108,N],[12,"color","","Optional color blending",108,N],[12,"alpha","","Optional alpha blending",108,N],[3,"DepthStencilInfo","","Depth and stencil state of the PSO.",N,N],[12,"depth","","Optional depth test configuration",109,N],[12,"front","","Optional stencil test on the front faces",109,N],[12,"back","","Optional stencil test on the back faces",109,N],[3,"Element","","A struct element descriptor.",N,N],[12,"format","","Element format",110,N],[12,"offset","","Offset from the beginning of the container, in bytes",110,N],[3,"VertexBufferDesc","","Vertex buffer descriptor",N,N],[12,"stride","","Total container size, in bytes",111,N],[12,"rate","","Rate of the input for the given buffer",111,N],[3,"Descriptor","","All the information surrounding a shader program that is required for PSO creation, including the formats of vertex buffers and pixel targets;",N,N],[12,"primitive","","Type of the primitive",112,N],[12,"rasterizer","","Rasterizer setup",112,N],[12,"scissor","","Enable scissor test",112,N],[12,"vertex_buffers","","Vertex buffers",112,N],[12,"attributes","","Vertex attributes",112,N],[12,"constant_buffers","","Constant buffers",112,N],[12,"resource_views","","Shader resource views",112,N],[12,"unordered_views","","Unordered access views",112,N],[12,"samplers","","Samplers",112,N],[12,"color_targets","","Render target views (RTV)",112,N],[12,"depth_stencil","","Depth stencil view (DSV)",112,N],[3,"VertexBufferSet","","A complete set of vertex buffers to be used for vertex import in PSO.",N,N],[12,"0","","Array of buffer handles with offsets in them",113,N],[3,"ConstantBufferParam","","A constant buffer run-time parameter for PSO.",N,N],[12,"0","","",114,N],[12,"1","","",114,N],[12,"2","","",114,N],[3,"ResourceViewParam","","A shader resource view (SRV) run-time parameter for PSO.",N,N],[12,"0","","",115,N],[12,"1","","",115,N],[12,"2","","",115,N],[3,"UnorderedViewParam","","An unordered access view (UAV) run-time parameter for PSO.",N,N],[12,"0","","",116,N],[12,"1","","",116,N],[12,"2","","",116,N],[3,"SamplerParam","","A sampler run-time parameter for PSO.",N,N],[12,"0","","",117,N],[12,"1","","",117,N],[12,"2","","",117,N],[3,"PixelTargetSet","","A complete set of render targets to be used for pixel export in PSO.",N,N],[12,"colors","","Array of color target views",118,N],[12,"depth","","Depth target view",118,N],[12,"stencil","","Stencil target view",118,N],[12,"dimensions","","Rendering dimensions",118,N],[6,"BufferOffset","","An offset inside a vertex buffer, in bytes.",N,N],[6,"BufferIndex","","Index of a vertex buffer.",N,N],[6,"ElemOffset","","Offset of an attribute from the start of the buffer, in bytes",N,N],[6,"ElemStride","","Offset between attribute values, in bytes",N,N],[6,"InstanceRate","","The number of instances between each subsequent attribute value",N,N],[6,"AttributeDesc","","PSO vertex attribute descriptor",N,N],[6,"ConstantBufferDesc","","PSO constant buffer descriptor",N,N],[6,"ResourceViewDesc","","PSO shader resource view descriptor",N,N],[6,"UnorderedViewDesc","","PSO unordered access view descriptor",N,N],[6,"SamplerDesc","","PSO sampler descriptor",N,N],[6,"ColorTargetDesc","","PSO color target descriptor",N,N],[6,"DepthStencilDesc","","PSO depth-stencil target descriptor",N,N],[17,"MAX_VERTEX_BUFFERS","","Maximum number of vertex buffers used in a PSO definition.",N,N],[11,"clone","","",119,[[["self"]],["creationerror"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"eq","","",119,[[["self"],["creationerror"]],["bool"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"description","","",119,[[["self"]],["str"]]],[11,"clone","","",108,[[["self"]],["colorinfo"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"hash","","",108,N],[11,"eq","","",108,[[["self"],["colorinfo"]],["bool"]]],[11,"ne","","",108,[[["self"],["colorinfo"]],["bool"]]],[11,"from","","",108,[[["colormask"]],["colorinfo"]]],[11,"from","","",108,[[["blend"]],["colorinfo"]]],[11,"clone","","",109,[[["self"]],["depthstencilinfo"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"hash","","",109,N],[11,"eq","","",109,[[["self"],["depthstencilinfo"]],["bool"]]],[11,"ne","","",109,[[["self"],["depthstencilinfo"]],["bool"]]],[11,"from","","",109,[[["depth"]],["depthstencilinfo"]]],[11,"from","","",109,[[["stencil"]],["depthstencilinfo"]]],[11,"from","","",109,N],[11,"clone","","",110,[[["self"]],["element"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"hash","","",110,N],[11,"eq","","",110,[[["self"],["element"]],["bool"]]],[11,"ne","","",110,[[["self"],["element"]],["bool"]]],[11,"clone","","",111,[[["self"]],["vertexbufferdesc"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"hash","","",111,N],[11,"eq","","",111,[[["self"],["vertexbufferdesc"]],["bool"]]],[11,"ne","","",111,[[["self"],["vertexbufferdesc"]],["bool"]]],[11,"clone","","",112,[[["self"]],["descriptor"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"hash","","",112,N],[11,"eq","","",112,[[["self"],["descriptor"]],["bool"]]],[11,"ne","","",112,[[["self"],["descriptor"]],["bool"]]],[11,"new","","Create a new empty PSO descriptor.",112,[[["primitive"],["rasterizer"]],["descriptor"]]],[11,"clone","","",113,[[["self"]],["vertexbufferset"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"hash","","",113,N],[11,"eq","","",113,[[["self"],["vertexbufferset"]],["bool"]]],[11,"ne","","",113,[[["self"],["vertexbufferset"]],["bool"]]],[11,"new","","Create an empty set",113,[[],["vertexbufferset"]]],[11,"clone","","",114,[[["self"]],["constantbufferparam"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"hash","","",114,N],[11,"eq","","",114,[[["self"],["constantbufferparam"]],["bool"]]],[11,"ne","","",114,[[["self"],["constantbufferparam"]],["bool"]]],[11,"clone","","",115,[[["self"]],["resourceviewparam"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"hash","","",115,N],[11,"eq","","",115,[[["self"],["resourceviewparam"]],["bool"]]],[11,"ne","","",115,[[["self"],["resourceviewparam"]],["bool"]]],[11,"clone","","",116,[[["self"]],["unorderedviewparam"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"hash","","",116,N],[11,"eq","","",116,[[["self"],["unorderedviewparam"]],["bool"]]],[11,"ne","","",116,[[["self"],["unorderedviewparam"]],["bool"]]],[11,"clone","","",117,[[["self"]],["samplerparam"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"hash","","",117,N],[11,"eq","","",117,[[["self"],["samplerparam"]],["bool"]]],[11,"ne","","",117,[[["self"],["samplerparam"]],["bool"]]],[11,"clone","","",118,[[["self"]],["pixeltargetset"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"hash","","",118,N],[11,"eq","","",118,[[["self"],["pixeltargetset"]],["bool"]]],[11,"ne","","",118,[[["self"],["pixeltargetset"]],["bool"]]],[11,"new","","Create an empty set",118,[[],["pixeltargetset"]]],[11,"add_color","","Add a color view to the specified slot",118,N],[11,"add_depth_stencil","","Add a depth or stencil view to the specified slot",118,N],[11,"get_view","","Get the rendering view (returns values > 0)",118,N],[0,"shade","gfx_core","Shader handling.",N,N],[3,"SamplerType","gfx_core::shade","A type of the sampler variable.",N,N],[12,"0","","",120,N],[12,"1","","",120,N],[3,"Usage","","Parameter usage flags.",N,N],[3,"AttributeVar","","Vertex information that a shader takes as input.",N,N],[12,"name","","Name of this attribute.",121,N],[12,"slot","","Slot of the vertex attribute.",121,N],[12,"base_type","","Type that this attribute is composed of.",121,N],[12,"container","","\"Scalarness\" of this attribute.",121,N],[3,"ConstVar","","A constant in the shader - a bit of data that doesn't vary",N,N],[12,"name","","Name of this constant.",122,N],[12,"location","","Location of this constant in the program. For constant buffer elements, it's the offset in bytes.",122,N],[12,"count","","Number of elements this constant represents.",122,N],[12,"base_type","","Type that this constant is composed of",122,N],[12,"container","","\"Scalarness\" of this constant.",122,N],[3,"ConstantBufferVar","","A constant buffer.",N,N],[12,"name","","Name of this constant buffer.",123,N],[12,"slot","","Slot of the constant buffer.",123,N],[12,"size","","Size (in bytes) of this buffer's data.",123,N],[12,"usage","","What program stage this buffer is used in.",123,N],[12,"elements","","List of individual elements in this buffer.",123,N],[3,"TextureVar","","Texture shader parameter.",N,N],[12,"name","","Name of this texture variable.",124,N],[12,"slot","","Slot of this texture variable.",124,N],[12,"base_type","","Base type for the texture.",124,N],[12,"ty","","Type of this texture.",124,N],[12,"usage","","What program stage this texture is used in.",124,N],[3,"UnorderedVar","","Unordered access shader parameter.",N,N],[12,"name","","Name of this unordered variable.",125,N],[12,"slot","","Slot of this unordered variable.",125,N],[12,"usage","","What program stage this UAV is used in.",125,N],[3,"SamplerVar","","Sampler shader parameter.",N,N],[12,"name","","Name of this sampler variable.",126,N],[12,"slot","","Slot of this sampler variable.",126,N],[12,"ty","","Type of this sampler.",126,N],[12,"usage","","What program stage this texture is used in.",126,N],[3,"OutputVar","","Target output variable.",N,N],[12,"name","","Name of this output variable.",127,N],[12,"slot","","Output color target index.",127,N],[12,"base_type","","Type of the output component.",127,N],[12,"container","","\"Scalarness\" of this output.",127,N],[3,"ProgramInfo","","Metadata about a program.",N,N],[12,"vertex_attributes","","Attributes in the program",128,N],[12,"globals","","Global constants in the program",128,N],[12,"constant_buffers","","Constant buffers in the program",128,N],[12,"textures","","Textures in the program",128,N],[12,"unordereds","","Unordered access resources in the program",128,N],[12,"samplers","","Samplers in the program",128,N],[12,"outputs","","Output targets in the program",128,N],[12,"output_depth","","A flag indicating that the pixel shader manually assigns the depth.",128,N],[12,"knows_outputs","","A hacky flag to make sure the clients know we are unable to actually get the output variable info",128,N],[3,"Program","","A program",N,N],[3,"CreateProgramError","","An error type for creating programs.",N,N],[4,"IsArray","","Whether the sampler samples an array texture.",N,N],[13,"Array","","",129,N],[13,"NoArray","","",129,N],[4,"IsComparison","","Whether the sampler compares the depth value upon sampling.",N,N],[13,"Compare","","",130,N],[13,"NoCompare","","",130,N],[4,"IsMultiSample","","Whether the sampler samples a multisample texture.",N,N],[13,"MultiSample","","",131,N],[13,"NoMultiSample","","",131,N],[4,"IsRect","","Whether the sampler samples a rectangle texture.",N,N],[13,"Rect","","",132,N],[13,"NoRect","","",132,N],[4,"MatrixFormat","","Whether the matrix is column or row major.",N,N],[13,"ColumnMajor","","",133,N],[13,"RowMajor","","",133,N],[4,"TextureType","","A type of the texture variable. This has to match the actual data we bind to the shader.",N,N],[13,"Buffer","","Sample from a buffer.",134,N],[13,"D1","","Sample from a 1D texture",134,N],[13,"D2","","Sample from a 2D texture",134,N],[13,"D3","","Sample from a 3D texture",134,N],[13,"Cube","","Sample from a cubemap.",134,N],[4,"BaseType","","Base type of this shader parameter.",N,N],[13,"I32","","",135,N],[13,"U32","","",135,N],[13,"F32","","",135,N],[13,"F64","","",135,N],[13,"Bool","","",135,N],[4,"ContainerType","","Number of components this parameter represents.",N,N],[13,"Single","","Scalar value",136,N],[13,"Vector","","A vector with `Dimension` components.",136,N],[13,"Matrix","","A matrix.",136,N],[4,"Stage","","Which program stage this shader represents.",N,N],[13,"Vertex","","",137,N],[13,"Hull","","",137,N],[13,"Domain","","",137,N],[13,"Geometry","","",137,N],[13,"Pixel","","",137,N],[4,"UniformValue","","A value that can be uploaded to the device as a uniform.",N,N],[13,"I32","","",138,N],[13,"F32","","",138,N],[13,"I32Vector2","","",138,N],[13,"I32Vector3","","",138,N],[13,"I32Vector4","","",138,N],[13,"F32Vector2","","",138,N],[13,"F32Vector3","","",138,N],[13,"F32Vector4","","",138,N],[13,"F32Matrix2","","",138,N],[13,"F32Matrix3","","",138,N],[13,"F32Matrix4","","",138,N],[4,"CompatibilityError","","Error type for trying to store a UniformValue in a ConstVar.",N,N],[13,"ErrorArraySize","","Array sizes differ between the value and the var (trying to upload a vec2 as a vec4, etc)",139,N],[13,"ErrorBaseType","","Base types differ between the value and the var (trying to upload a f32 as a u16, etc)",139,N],[13,"ErrorContainer","","Container-ness differs between the value and the var (trying to upload a scalar as a vec4, etc)",139,N],[4,"CreateShaderError","","An error type for creating shaders.",N,N],[13,"ModelNotSupported","","The device does not support the requested shader model.",140,N],[13,"StageNotSupported","","The device does not support the shader stage.",140,N],[13,"CompilationFailed","","The shader failed to compile.",140,N],[6,"Dimension","","Number of components in a container type (vectors/matrices)",N,N],[6,"Location","","Location of a parameter in the program.",N,N],[6,"ConstFormat","","Format of a shader constant.",N,N],[17,"STAGES","","A constant static array of all shader stages.",N,N],[8,"BaseTyped","","A trait that statically links simple data types to base types of the shader constants.",N,N],[10,"get_base_type","","",141,[[],["basetype"]]],[8,"Formatted","","A trait that statically links simple data types to constant formats.",N,N],[10,"get_format","","Get the associated constant format.",142,[[],["constformat"]]],[11,"clone","","",129,[[["self"]],["isarray"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"hash","","",129,N],[11,"eq","","",129,[[["self"],["isarray"]],["bool"]]],[11,"clone","","",130,[[["self"]],["iscomparison"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"hash","","",130,N],[11,"eq","","",130,[[["self"],["iscomparison"]],["bool"]]],[11,"clone","","",131,[[["self"]],["ismultisample"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"hash","","",131,N],[11,"eq","","",131,[[["self"],["ismultisample"]],["bool"]]],[11,"clone","","",132,[[["self"]],["isrect"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"hash","","",132,N],[11,"eq","","",132,[[["self"],["isrect"]],["bool"]]],[11,"clone","","",133,[[["self"]],["matrixformat"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"hash","","",133,N],[11,"eq","","",133,[[["self"],["matrixformat"]],["bool"]]],[11,"clone","","",134,[[["self"]],["texturetype"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"hash","","",134,N],[11,"eq","","",134,[[["self"],["texturetype"]],["bool"]]],[11,"ne","","",134,[[["self"],["texturetype"]],["bool"]]],[11,"can_sample","","Check if this texture can be used with a sampler.",134,[[["self"]],["bool"]]],[11,"clone","","",120,[[["self"]],["samplertype"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"hash","","",120,N],[11,"eq","","",120,[[["self"],["samplertype"]],["bool"]]],[11,"ne","","",120,[[["self"],["samplertype"]],["bool"]]],[11,"clone","","",135,[[["self"]],["basetype"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"hash","","",135,N],[11,"eq","","",135,[[["self"],["basetype"]],["bool"]]],[11,"clone","","",136,[[["self"]],["containertype"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"hash","","",136,N],[11,"eq","","",136,[[["self"],["containertype"]],["bool"]]],[11,"ne","","",136,[[["self"],["containertype"]],["bool"]]],[11,"clone","","",137,[[["self"]],["stage"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"hash","","",137,N],[11,"eq","","",137,[[["self"],["stage"]],["bool"]]],[11,"clone","","",138,[[["self"]],["uniformvalue"]]],[11,"eq","","",138,[[["self"],["uniformvalue"]],["bool"]]],[11,"ne","","",138,[[["self"],["uniformvalue"]],["bool"]]],[11,"partial_cmp","","",138,[[["self"],["uniformvalue"]],["option",["ordering"]]]],[11,"lt","","",138,[[["self"],["uniformvalue"]],["bool"]]],[11,"le","","",138,[[["self"],["uniformvalue"]],["bool"]]],[11,"gt","","",138,[[["self"],["uniformvalue"]],["bool"]]],[11,"ge","","",138,[[["self"],["uniformvalue"]],["bool"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"eq","","",143,[[["self"],["usage"]],["bool"]]],[11,"ne","","",143,[[["self"],["usage"]],["bool"]]],[11,"clone","","",143,[[["self"]],["usage"]]],[11,"partial_cmp","","",143,[[["self"],["usage"]],["option",["ordering"]]]],[11,"lt","","",143,[[["self"],["usage"]],["bool"]]],[11,"le","","",143,[[["self"],["usage"]],["bool"]]],[11,"gt","","",143,[[["self"],["usage"]],["bool"]]],[11,"ge","","",143,[[["self"],["usage"]],["bool"]]],[11,"cmp","","",143,[[["self"],["usage"]],["ordering"]]],[11,"hash","","",143,N],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[18,"VERTEX","","Used by the vertex shader",143,N],[18,"GEOMETRY","","Used by the geometry shader",143,N],[18,"PIXEL","","Used by the pixel shader",143,N],[18,"HULL","","Used by the hull shader",143,N],[18,"DOMAIN","","Used by the pixel shader",143,N],[11,"empty","","Returns an empty set of flags.",143,[[],["usage"]]],[11,"all","","Returns the set containing all flags.",143,[[],["usage"]]],[11,"bits","","Returns the raw value of the flags currently stored.",143,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",143,[[["u8"]],["option",["usage"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",143,[[["u8"]],["usage"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",143,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",143,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",143,[[["self"],["usage"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",143,[[["self"],["usage"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",143,[[["self"],["usage"]]]],[11,"remove","","Removes the specified flags in-place.",143,[[["self"],["usage"]]]],[11,"toggle","","Toggles the specified flags in-place.",143,[[["self"],["usage"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",143,[[["self"],["usage"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",143,[[["self"],["usage"]],["usage"]]],[11,"bitor_assign","","Adds the set of flags.",143,[[["self"],["usage"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",143,[[["self"],["usage"]],["usage"]]],[11,"bitxor_assign","","Toggles the set of flags.",143,[[["self"],["usage"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",143,[[["self"],["usage"]],["usage"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",143,[[["self"],["usage"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",143,[[["self"],["usage"]],["usage"]]],[11,"sub_assign","","Disables all flags enabled in the set.",143,[[["self"],["usage"]]]],[11,"not","","Returns the complement of this set of flags.",143,[[["self"]],["usage"]]],[11,"extend","","",143,[[["self"],["t"]]]],[11,"from_iter","","",143,[[["t"]],["usage"]]],[11,"from","","",143,[[["stage"]],["self"]]],[11,"clone","","",121,[[["self"]],["attributevar"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"hash","","",121,N],[11,"eq","","",121,[[["self"],["attributevar"]],["bool"]]],[11,"ne","","",121,[[["self"],["attributevar"]],["bool"]]],[11,"clone","","",122,[[["self"]],["constvar"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"hash","","",122,N],[11,"eq","","",122,[[["self"],["constvar"]],["bool"]]],[11,"ne","","",122,[[["self"],["constvar"]],["bool"]]],[11,"clone","","",123,[[["self"]],["constantbuffervar"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"hash","","",123,N],[11,"eq","","",123,[[["self"],["constantbuffervar"]],["bool"]]],[11,"ne","","",123,[[["self"],["constantbuffervar"]],["bool"]]],[11,"clone","","",124,[[["self"]],["texturevar"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"hash","","",124,N],[11,"eq","","",124,[[["self"],["texturevar"]],["bool"]]],[11,"ne","","",124,[[["self"],["texturevar"]],["bool"]]],[11,"clone","","",125,[[["self"]],["unorderedvar"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"hash","","",125,N],[11,"eq","","",125,[[["self"],["unorderedvar"]],["bool"]]],[11,"ne","","",125,[[["self"],["unorderedvar"]],["bool"]]],[11,"clone","","",126,[[["self"]],["samplervar"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"hash","","",126,N],[11,"eq","","",126,[[["self"],["samplervar"]],["bool"]]],[11,"ne","","",126,[[["self"],["samplervar"]],["bool"]]],[11,"clone","","",127,[[["self"]],["outputvar"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"hash","","",127,N],[11,"eq","","",127,[[["self"],["outputvar"]],["bool"]]],[11,"ne","","",127,[[["self"],["outputvar"]],["bool"]]],[11,"clone","","",128,[[["self"]],["programinfo"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"hash","","",128,N],[11,"eq","","",128,[[["self"],["programinfo"]],["bool"]]],[11,"ne","","",128,[[["self"],["programinfo"]],["bool"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"get_info","","Get program info",144,[[["self"]],["programinfo"]]],[11,"eq","","",144,[[["self"],["program"]],["bool"]]],[11,"hash","","",144,[[["self"],["h"]]]],[11,"clone","","",139,[[["self"]],["compatibilityerror"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"eq","","",139,[[["self"],["compatibilityerror"]],["bool"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"description","","",139,[[["self"]],["str"]]],[11,"is_compatible","","Whether a value is compatible with this variable. That is, whether the value can be stored in this variable.",122,[[["self"],["uniformvalue"]],["result",["compatibilityerror"]]]],[11,"clone","","",140,[[["self"]],["createshadererror"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"eq","","",140,[[["self"],["createshadererror"]],["bool"]]],[11,"ne","","",140,[[["self"],["createshadererror"]],["bool"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"description","","",140,[[["self"]],["str"]]],[11,"clone","","",145,[[["self"]],["createprogramerror"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"eq","","",145,[[["self"],["createprogramerror"]],["bool"]]],[11,"ne","","",145,[[["self"],["createprogramerror"]],["bool"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"description","","",145,[[["self"]],["str"]]],[11,"from","","",145,[[["s"]],["createprogramerror"]]],[0,"texture","gfx_core","Texture creation and modification.",N,N],[6,"Layer","gfx_core::texture","A depth value, specifying which plane to select out of a 3D texture.",N,N],[6,"Level","","Mipmap level to select in a texture.",N,N],[3,"Raw","","Untyped texture",N,N],[3,"ImageInfoCommon","","Describes a subvolume of a texture, which image data can be uploaded into.",N,N],[12,"xoffset","","",146,N],[12,"yoffset","","",146,N],[12,"zoffset","","",146,N],[12,"width","","",146,N],[12,"height","","",146,N],[12,"depth","","",146,N],[12,"format","","Format of each texel.",146,N],[12,"mipmap","","Which mipmap to select.",146,N],[3,"TextureCopyRegion","","A texture region defined for copy operations",N,N],[12,"texture","","Raw texture",147,N],[12,"kind","","Texture kind",147,N],[12,"cube_face","","Optional cube face",147,N],[12,"info","","Dimensions, offsets, and format",147,N],[3,"Lod","","A wrapper for the LOD level of a texture.",N,N],[3,"PackedColor","","A wrapper for the 8bpp RGBA color, encoded as u32.",N,N],[12,"0","","",148,N],[3,"SamplerInfo","","Specifies how to sample from a texture.",N,N],[12,"filter","","Filter method to use.",149,N],[12,"wrap_mode","","Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL speak).",149,N],[12,"lod_bias","","This bias is added to every computed mipmap level (N + lod_bias). For example, if it would select mipmap level 2 and lod_bias is 1, it will use mipmap level 3.",149,N],[12,"lod_range","","This range is used to clamp LOD level used for sampling.",149,N],[12,"comparison","","Comparison mode, used primary for a shadow map.",149,N],[12,"border","","Border color is used when one of the wrap modes is set to border.",149,N],[3,"Info","","Texture storage descriptor.",N,N],[12,"kind","","",150,N],[12,"levels","","",150,N],[12,"format","","",150,N],[12,"bind","","",150,N],[12,"usage","","",150,N],[3,"ResourceDesc","","Texture resource view descriptor.",N,N],[12,"channel","","",151,N],[12,"layer","","",151,N],[12,"min","","",151,N],[12,"max","","",151,N],[12,"swizzle","","",151,N],[3,"RenderDesc","","Texture render view descriptor.",N,N],[12,"channel","","",152,N],[12,"level","","",152,N],[12,"layer","","",152,N],[3,"DepthStencilFlags","","Depth-stencil read-only flags",N,N],[3,"DepthStencilDesc","","Texture depth-stencil view descriptor.",N,N],[12,"level","","",153,N],[12,"layer","","",153,N],[12,"flags","","",153,N],[4,"CreationError","","Pure texture object creation error.",N,N],[13,"Format","","Failed to map a given format to the device.",154,N],[13,"Kind","","The kind doesn't support a particular operation.",154,N],[13,"Samples","","Failed to map a given multisampled kind to the device.",154,N],[13,"Size","","Unsupported size in one of the dimensions.",154,N],[13,"Data","","The given data has a different size than the target texture slice.",154,N],[13,"Usage","","The mentioned usage mode is not supported",154,N],[13,"Mipmap","","The requested mipmap creation parameter is unsupported.",154,N],[13,"Level","","The requested mipmap level count does not match the provided data.",154,N],[4,"LayerError","","An error associated with selected texture layer.",N,N],[13,"NotExpected","","The source texture kind doesn't support array slices.",155,N],[13,"OutOfBounds","","Selected layer is outside of the provided range.",155,N],[4,"AaMode","","Describes the configuration of samples inside each texel.",N,N],[13,"Single","","No additional sample information",156,N],[13,"Multi","","MultiSampled Anti-Aliasing (MSAA)",156,N],[13,"Coverage","","Coverage Sampling Anti-Aliasing (CSAA/EQAA)",156,N],[4,"FilterMethod","","How to filter the texture when sampling. They correspond to increasing levels of quality, but also cost. They \"layer\" on top of each other: it is not possible to have bilinear filtering without mipmapping, for example.",N,N],[13,"Scale","","The dumbest filtering possible, nearest-neighbor interpolation.",157,N],[13,"Mipmap","","Add simple mipmapping.",157,N],[13,"Bilinear","","Sample multiple texels within a single mipmap level to increase quality.",157,N],[13,"Trilinear","","Sample multiple texels across two mipmap levels to increase quality.",157,N],[13,"Anisotropic","","Anisotropic filtering with a given \"max\", must be between 1 and 16, inclusive.",157,N],[4,"CubeFace","","The face of a cube texture to do an operation on.",N,N],[13,"PosX","","",158,N],[13,"NegX","","",158,N],[13,"PosY","","",158,N],[13,"NegY","","",158,N],[13,"PosZ","","",158,N],[13,"NegZ","","",158,N],[4,"Kind","","Specifies the kind of a texture storage to be allocated.",N,N],[13,"D1","","A single row of texels.",159,N],[13,"D1Array","","An array of rows of texels. Equivalent to Texture2D except that texels in a different row are not sampled.",159,N],[13,"D2","","A traditional 2D texture, with rows arranged contiguously.",159,N],[13,"D2Array","","An array of 2D textures. Equivalent to Texture3D except that texels in a different depth level are not sampled.",159,N],[13,"D3","","A volume texture, with each 2D layer arranged contiguously.",159,N],[13,"Cube","","A set of 6 2D textures, one for each face of a cube.",159,N],[13,"CubeArray","","An array of Cube textures.",159,N],[4,"Mipmap","","The marker for the texture initializer to generate extra space for the mipmap generation.",N,N],[13,"Provided","","The mipmap data is provided as a part of bitmap data.",160,N],[13,"Allocated","","The mipmap data is not provided, but the memory for it should be allocated for the later generation/",160,N],[4,"WrapMode","","Specifies how texture coordinates outside the range `[0, 1]` are handled.",N,N],[13,"Tile","","Tile the texture. That is, sample the coordinate modulo `1.0`. This is the default.",161,N],[13,"Mirror","","Mirror the texture. Like tile, but uses abs(coord) before the modulo.",161,N],[13,"Clamp","","Clamp the texture to the value at `0.0` or `1.0` respectively.",161,N],[13,"Border","","Use border color.",161,N],[6,"Size","","Dimension size",N,N],[6,"Bits","","Number of bits per component",N,N],[6,"NumSamples","","Number of MSAA samples",N,N],[6,"NumFragments","","Number of EQAA fragments",N,N],[6,"Dimensions","","Dimensions: width, height, depth, and samples.",N,N],[6,"RawImageInfo","","New raw image info based on the universal format spec.",N,N],[6,"NewImageInfo","","New image info based on the universal format spec. The format is suppsed to come from compile-time information as opposed to run-time enum values.",N,N],[17,"MAX_LEVEL","","Maximum accessible mipmap level of a texture.",N,N],[17,"CUBE_FACES","","A constant array of cube faces in the order they map to the hardware.",N,N],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"get_info","","Get texture descriptor",162,[[["self"]],["info"]]],[11,"eq","","",162,[[["self"],["self"]],["bool"]]],[11,"hash","","",162,[[["self"],["h"]]]],[11,"clone","","",154,[[["self"]],["creationerror"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"eq","","",154,[[["self"],["creationerror"]],["bool"]]],[11,"ne","","",154,[[["self"],["creationerror"]],["bool"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"description","","",154,[[["self"]],["str"]]],[11,"clone","","",155,[[["self"]],["layererror"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"hash","","",155,N],[11,"eq","","",155,[[["self"],["layererror"]],["bool"]]],[11,"ne","","",155,[[["self"],["layererror"]],["bool"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"description","","",155,[[["self"]],["str"]]],[11,"clone","","",156,[[["self"]],["aamode"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"hash","","",156,N],[11,"cmp","","",156,[[["self"],["aamode"]],["ordering"]]],[11,"eq","","",156,[[["self"],["aamode"]],["bool"]]],[11,"ne","","",156,[[["self"],["aamode"]],["bool"]]],[11,"partial_cmp","","",156,[[["self"],["aamode"]],["option",["ordering"]]]],[11,"lt","","",156,[[["self"],["aamode"]],["bool"]]],[11,"le","","",156,[[["self"],["aamode"]],["bool"]]],[11,"gt","","",156,[[["self"],["aamode"]],["bool"]]],[11,"ge","","",156,[[["self"],["aamode"]],["bool"]]],[11,"from","","",156,[[["numsamples"]],["aamode"]]],[11,"get_num_fragments","","Return the number of actual data fragments stored per texel.",156,[[["self"]],["numfragments"]]],[11,"needs_resolve","","Return true if the surface has to be resolved before sampling.",156,[[["self"]],["bool"]]],[11,"clone","","",157,[[["self"]],["filtermethod"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"hash","","",157,N],[11,"cmp","","",157,[[["self"],["filtermethod"]],["ordering"]]],[11,"eq","","",157,[[["self"],["filtermethod"]],["bool"]]],[11,"ne","","",157,[[["self"],["filtermethod"]],["bool"]]],[11,"partial_cmp","","",157,[[["self"],["filtermethod"]],["option",["ordering"]]]],[11,"lt","","",157,[[["self"],["filtermethod"]],["bool"]]],[11,"le","","",157,[[["self"],["filtermethod"]],["bool"]]],[11,"gt","","",157,[[["self"],["filtermethod"]],["bool"]]],[11,"ge","","",157,[[["self"],["filtermethod"]],["bool"]]],[11,"clone","","",158,[[["self"]],["cubeface"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"hash","","",158,N],[11,"cmp","","",158,[[["self"],["cubeface"]],["ordering"]]],[11,"eq","","",158,[[["self"],["cubeface"]],["bool"]]],[11,"partial_cmp","","",158,[[["self"],["cubeface"]],["option",["ordering"]]]],[11,"clone","","",159,[[["self"]],["kind"]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"hash","","",159,N],[11,"cmp","","",159,[[["self"],["kind"]],["ordering"]]],[11,"eq","","",159,[[["self"],["kind"]],["bool"]]],[11,"ne","","",159,[[["self"],["kind"]],["bool"]]],[11,"partial_cmp","","",159,[[["self"],["kind"]],["option",["ordering"]]]],[11,"lt","","",159,[[["self"],["kind"]],["bool"]]],[11,"le","","",159,[[["self"],["kind"]],["bool"]]],[11,"gt","","",159,[[["self"],["kind"]],["bool"]]],[11,"ge","","",159,[[["self"],["kind"]],["bool"]]],[11,"get_dimensions","","Get texture dimensions, with 0 values where not applicable.",159,[[["self"]],["dimensions"]]],[11,"get_level_dimensions","","Get the dimensionality of a particular mipmap level.",159,[[["self"],["level"]],["dimensions"]]],[11,"get_num_levels","","Count the number of mipmap levels.",159,[[["self"]],["level"]]],[11,"get_num_slices","","Return the number of slices for an array, or None for non-arrays.",159,[[["self"]],["option",["layer"]]]],[11,"is_cube","","Check if it's one of the cube kinds.",159,[[["self"]],["bool"]]],[11,"clone","","",160,[[["self"]],["mipmap"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"hash","","",160,N],[11,"cmp","","",160,[[["self"],["mipmap"]],["ordering"]]],[11,"eq","","",160,[[["self"],["mipmap"]],["bool"]]],[11,"partial_cmp","","",160,[[["self"],["mipmap"]],["option",["ordering"]]]],[11,"clone","","",146,[[["self"]],["imageinfocommon"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"hash","","",146,N],[11,"cmp","","",146,[[["self"],["imageinfocommon"]],["ordering"]]],[11,"eq","","",146,[[["self"],["imageinfocommon"]],["bool"]]],[11,"ne","","",146,[[["self"],["imageinfocommon"]],["bool"]]],[11,"partial_cmp","","",146,[[["self"],["imageinfocommon"]],["option",["ordering"]]]],[11,"lt","","",146,[[["self"],["imageinfocommon"]],["bool"]]],[11,"le","","",146,[[["self"],["imageinfocommon"]],["bool"]]],[11,"gt","","",146,[[["self"],["imageinfocommon"]],["bool"]]],[11,"ge","","",146,[[["self"],["imageinfocommon"]],["bool"]]],[11,"get_texel_count","","Get the total number of texels.",146,[[["self"]],["usize"]]],[11,"convert","","Convert into a differently typed format.",146,[[["self"],["t"]],["imageinfocommon"]]],[11,"is_inside","","Check if it fits inside given dimensions.",146,[[["self"],["dimensions"]],["bool"]]],[11,"get_byte_count","","Get the total number of bytes.",163,[[["self"]],["usize"]]],[11,"clone","","",147,[[["self"]],["texturecopyregion"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"hash","","",147,N],[11,"cmp","","",147,[[["self"],["texturecopyregion"]],["ordering"]]],[11,"eq","","",147,[[["self"],["texturecopyregion"]],["bool"]]],[11,"ne","","",147,[[["self"],["texturecopyregion"]],["bool"]]],[11,"partial_cmp","","",147,[[["self"],["texturecopyregion"]],["option",["ordering"]]]],[11,"lt","","",147,[[["self"],["texturecopyregion"]],["bool"]]],[11,"le","","",147,[[["self"],["texturecopyregion"]],["bool"]]],[11,"gt","","",147,[[["self"],["texturecopyregion"]],["bool"]]],[11,"ge","","",147,[[["self"],["texturecopyregion"]],["bool"]]],[11,"with_texture","","Change the texture",147,[[["self"],["u"]],["texturecopyregion"]]],[11,"clone","","",161,[[["self"]],["wrapmode"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"hash","","",161,N],[11,"cmp","","",161,[[["self"],["wrapmode"]],["ordering"]]],[11,"eq","","",161,[[["self"],["wrapmode"]],["bool"]]],[11,"partial_cmp","","",161,[[["self"],["wrapmode"]],["option",["ordering"]]]],[11,"clone","","",164,[[["self"]],["lod"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"hash","","",164,N],[11,"eq","","",164,[[["self"],["lod"]],["bool"]]],[11,"ne","","",164,[[["self"],["lod"]],["bool"]]],[11,"partial_cmp","","",164,[[["self"],["lod"]],["option",["ordering"]]]],[11,"lt","","",164,[[["self"],["lod"]],["bool"]]],[11,"le","","",164,[[["self"],["lod"]],["bool"]]],[11,"gt","","",164,[[["self"],["lod"]],["bool"]]],[11,"ge","","",164,[[["self"],["lod"]],["bool"]]],[11,"from","","",164,[[["f32"]],["lod"]]],[11,"into","","",164,[[["self"]],["f32"]]],[11,"clone","","",148,[[["self"]],["packedcolor"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"hash","","",148,N],[11,"eq","","",148,[[["self"],["packedcolor"]],["bool"]]],[11,"ne","","",148,[[["self"],["packedcolor"]],["bool"]]],[11,"partial_cmp","","",148,[[["self"],["packedcolor"]],["option",["ordering"]]]],[11,"lt","","",148,[[["self"],["packedcolor"]],["bool"]]],[11,"le","","",148,[[["self"],["packedcolor"]],["bool"]]],[11,"gt","","",148,[[["self"],["packedcolor"]],["bool"]]],[11,"ge","","",148,[[["self"],["packedcolor"]],["bool"]]],[11,"from","","",148,N],[11,"into","","",148,N],[11,"clone","","",149,[[["self"]],["samplerinfo"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"hash","","",149,N],[11,"eq","","",149,[[["self"],["samplerinfo"]],["bool"]]],[11,"ne","","",149,[[["self"],["samplerinfo"]],["bool"]]],[11,"partial_cmp","","",149,[[["self"],["samplerinfo"]],["option",["ordering"]]]],[11,"lt","","",149,[[["self"],["samplerinfo"]],["bool"]]],[11,"le","","",149,[[["self"],["samplerinfo"]],["bool"]]],[11,"gt","","",149,[[["self"],["samplerinfo"]],["bool"]]],[11,"ge","","",149,[[["self"],["samplerinfo"]],["bool"]]],[11,"new","","Create a new sampler description with a given filter method and wrapping mode, using no LOD modifications.",149,[[["filtermethod"],["wrapmode"]],["samplerinfo"]]],[11,"clone","","",150,[[["self"]],["info"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"hash","","",150,N],[11,"cmp","","",150,[[["self"],["info"]],["ordering"]]],[11,"eq","","",150,[[["self"],["info"]],["bool"]]],[11,"ne","","",150,[[["self"],["info"]],["bool"]]],[11,"partial_cmp","","",150,[[["self"],["info"]],["option",["ordering"]]]],[11,"lt","","",150,[[["self"],["info"]],["bool"]]],[11,"le","","",150,[[["self"],["info"]],["bool"]]],[11,"gt","","",150,[[["self"],["info"]],["bool"]]],[11,"ge","","",150,[[["self"],["info"]],["bool"]]],[11,"to_image_info","","Get image info for a given mip.",150,[[["self"],["level"]],["newimageinfo"]]],[11,"to_raw_image_info","","Get the raw image info for a given mip and a channel type.",150,[[["self"],["channeltype"],["level"]],["rawimageinfo"]]],[11,"clone","","",151,[[["self"]],["resourcedesc"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"hash","","",151,N],[11,"cmp","","",151,[[["self"],["resourcedesc"]],["ordering"]]],[11,"eq","","",151,[[["self"],["resourcedesc"]],["bool"]]],[11,"ne","","",151,[[["self"],["resourcedesc"]],["bool"]]],[11,"partial_cmp","","",151,[[["self"],["resourcedesc"]],["option",["ordering"]]]],[11,"lt","","",151,[[["self"],["resourcedesc"]],["bool"]]],[11,"le","","",151,[[["self"],["resourcedesc"]],["bool"]]],[11,"gt","","",151,[[["self"],["resourcedesc"]],["bool"]]],[11,"ge","","",151,[[["self"],["resourcedesc"]],["bool"]]],[11,"clone","","",152,[[["self"]],["renderdesc"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"hash","","",152,N],[11,"cmp","","",152,[[["self"],["renderdesc"]],["ordering"]]],[11,"eq","","",152,[[["self"],["renderdesc"]],["bool"]]],[11,"ne","","",152,[[["self"],["renderdesc"]],["bool"]]],[11,"partial_cmp","","",152,[[["self"],["renderdesc"]],["option",["ordering"]]]],[11,"lt","","",152,[[["self"],["renderdesc"]],["bool"]]],[11,"le","","",152,[[["self"],["renderdesc"]],["bool"]]],[11,"gt","","",152,[[["self"],["renderdesc"]],["bool"]]],[11,"ge","","",152,[[["self"],["renderdesc"]],["bool"]]],[11,"eq","","",165,[[["self"],["depthstencilflags"]],["bool"]]],[11,"ne","","",165,[[["self"],["depthstencilflags"]],["bool"]]],[11,"clone","","",165,[[["self"]],["depthstencilflags"]]],[11,"partial_cmp","","",165,[[["self"],["depthstencilflags"]],["option",["ordering"]]]],[11,"lt","","",165,[[["self"],["depthstencilflags"]],["bool"]]],[11,"le","","",165,[[["self"],["depthstencilflags"]],["bool"]]],[11,"gt","","",165,[[["self"],["depthstencilflags"]],["bool"]]],[11,"ge","","",165,[[["self"],["depthstencilflags"]],["bool"]]],[11,"cmp","","",165,[[["self"],["depthstencilflags"]],["ordering"]]],[11,"hash","","",165,N],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[18,"RO_DEPTH","","Depth is read-only in the view.",165,N],[18,"RO_STENCIL","","Stencil is read-only in the view.",165,N],[18,"RO_DEPTH_STENCIL","","Both depth and stencil are read-only.",165,N],[11,"empty","","Returns an empty set of flags.",165,[[],["depthstencilflags"]]],[11,"all","","Returns the set containing all flags.",165,[[],["depthstencilflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",165,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",165,[[["u8"]],["option",["depthstencilflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",165,[[["u8"]],["depthstencilflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",165,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",165,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",165,[[["self"],["depthstencilflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",165,[[["self"],["depthstencilflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",165,[[["self"],["depthstencilflags"]]]],[11,"remove","","Removes the specified flags in-place.",165,[[["self"],["depthstencilflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",165,[[["self"],["depthstencilflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",165,[[["self"],["depthstencilflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",165,[[["self"],["depthstencilflags"]],["depthstencilflags"]]],[11,"bitor_assign","","Adds the set of flags.",165,[[["self"],["depthstencilflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",165,[[["self"],["depthstencilflags"]],["depthstencilflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",165,[[["self"],["depthstencilflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",165,[[["self"],["depthstencilflags"]],["depthstencilflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",165,[[["self"],["depthstencilflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",165,[[["self"],["depthstencilflags"]],["depthstencilflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",165,[[["self"],["depthstencilflags"]]]],[11,"not","","Returns the complement of this set of flags.",165,[[["self"]],["depthstencilflags"]]],[11,"extend","","",165,[[["self"],["t"]]]],[11,"from_iter","","",165,[[["t"]],["depthstencilflags"]]],[11,"clone","","",153,[[["self"]],["depthstencildesc"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"hash","","",153,N],[11,"cmp","","",153,[[["self"],["depthstencildesc"]],["ordering"]]],[11,"eq","","",153,[[["self"],["depthstencildesc"]],["bool"]]],[11,"ne","","",153,[[["self"],["depthstencildesc"]],["bool"]]],[11,"partial_cmp","","",153,[[["self"],["depthstencildesc"]],["option",["ordering"]]]],[11,"lt","","",153,[[["self"],["depthstencildesc"]],["bool"]]],[11,"le","","",153,[[["self"],["depthstencildesc"]],["bool"]]],[11,"gt","","",153,[[["self"],["depthstencildesc"]],["bool"]]],[11,"ge","","",153,[[["self"],["depthstencildesc"]],["bool"]]],[11,"from","","",153,[[["renderdesc"]],["depthstencildesc"]]],[6,"VertexCount","gfx_core","Draw vertex count.",N,N],[6,"InstanceCount","","Draw number of instances",N,N],[6,"PatchSize","","Number of vertices in a patch",N,N],[6,"AttributeSlot","","Slot for an attribute.",N,N],[6,"ConstantBufferSlot","","Slot for a constant buffer object.",N,N],[6,"ResourceViewSlot","","Slot for a shader resource view.",N,N],[6,"UnorderedViewSlot","","Slot for an unordered access object.",N,N],[6,"ColorSlot","","Slot for an active color buffer.",N,N],[6,"SamplerSlot","","Slot for a sampler.",N,N],[6,"SubmissionResult","","",N,N],[17,"MAX_VERTEX_ATTRIBUTES","","Compile-time maximum number of vertex attributes.",N,N],[17,"MAX_COLOR_TARGETS","","Compile-time maximum number of color targets.",N,N],[17,"MAX_CONSTANT_BUFFERS","","Compile-time maximum number of constant buffers.",N,N],[17,"MAX_RESOURCE_VIEWS","","Compile-time maximum number of shader resource views (SRV).",N,N],[17,"MAX_UNORDERED_VIEWS","","Compile-time maximum number of unordered access views (UAV).",N,N],[17,"MAX_SAMPLERS","","Compile-time maximum number of samplers.",N,N],[8,"Resources","","Different types of a specific API.",N,N],[16,"Buffer","","",166,N],[16,"Shader","","",166,N],[16,"Program","","",166,N],[16,"PipelineStateObject","","",166,N],[16,"Texture","","",166,N],[16,"ShaderResourceView","","",166,N],[16,"UnorderedAccessView","","",166,N],[16,"RenderTargetView","","",166,N],[16,"DepthStencilView","","",166,N],[16,"Sampler","","",166,N],[16,"Fence","","",166,N],[16,"Mapping","","",166,N],[8,"Device","","A `Device` is responsible for submitting `CommandBuffer`s to the GPU.",N,N],[16,"Resources","","Associated `Resources` type.",167,N],[16,"CommandBuffer","","Associated `CommandBuffer` type. Every `Device` type can only work with one `CommandBuffer` type.",167,N],[10,"get_capabilities","","Returns the capabilities of this `Device`.",167,[[["self"]],["capabilities"]]],[10,"pin_submitted_resources","","Pin everything from this handle manager to live for a frame.",167,[[["self"],["manager"]]]],[10,"submit","","Submits a `CommandBuffer` to the GPU for execution.",167,N],[10,"fenced_submit","","Submits a `CommandBuffer` to the GPU for execution. returns a fence that is signaled after the GPU has executed all commands",167,N],[10,"wait_fence","","Stalls the current thread until the fence is satisfied",167,[[["self"],["fence"]]]],[10,"cleanup","","Cleanup unused resources. This should be called between frames.",167,[[["self"]]]],[8,"Adapter","","Represents a physical or virtual device, which is capable of running the backend.",N,N],[16,"CommandQueue","","Associated `CommandQueue` type.",168,N],[16,"Device","","Associated `Device` type.",168,N],[16,"QueueFamily","","Associated `QueueFamily` type.",168,N],[10,"enumerate_adapters","","Enumerate all available adapters supporting this backend",168,[[],["vec"]]],[10,"open","","Create a new device and command queues.",168,N],[10,"get_info","","Get the `AdapterInfo` for this adapater.",168,[[["self"]],["adapterinfo"]]],[10,"get_queue_families","","Return the supported queue families for this adapter.",168,N],[8,"QueueFamily","","`QueueFamily` denotes a group of command queues provided by the backend with the same properties/type.",N,N],[16,"Surface","","Associated `Surface` type.",169,N],[10,"supports_present","","Check if the queue family supports presentation to a surface",169,N],[10,"num_queues","","Return the number of available queues of this family",169,[[["self"]],["u32"]]],[8,"CommandQueue","","Dummy trait for command queues. CommandBuffers will be later submitted to command queues instead of the device.",N,N],[8,"Surface","","A `Surface` abstracts the surface of a native window, which will be presented",N,N],[16,"CommandQueue","","Associated `CommandQueue` type.",170,N],[16,"SwapChain","","Associated `SwapChain` type.",170,N],[16,"Window","","Associated native `Window` type.",170,N],[10,"from_window","","Create a new surface from a native window.",170,N],[10,"build_swapchain","","Create a new swapchain from the current surface with an associated present queue.",170,N],[8,"SwapChain","","The `SwapChain` is the backend representation of the surface. It consists of multiple buffers, which will be presented on the surface.",N,N],[10,"acquire_frame","","Acquire a new frame for rendering. This needs to be called before presenting.",171,[[["self"]],["frame"]]],[10,"present","","Present one acquired frame in FIFO order.",171,[[["self"]]]],[11,"clone","","",172,[[["self"]],["vertexshader"]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"hash","","",172,N],[11,"eq","","",172,[[["self"],["vertexshader"]],["bool"]]],[11,"ne","","",172,[[["self"],["vertexshader"]],["bool"]]],[11,"reference","","",172,N],[11,"clone","","",173,[[["self"]],["hullshader"]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"hash","","",173,N],[11,"eq","","",173,[[["self"],["hullshader"]],["bool"]]],[11,"ne","","",173,[[["self"],["hullshader"]],["bool"]]],[11,"reference","","",173,N],[11,"clone","","",174,[[["self"]],["domainshader"]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"hash","","",174,N],[11,"eq","","",174,[[["self"],["domainshader"]],["bool"]]],[11,"ne","","",174,[[["self"],["domainshader"]],["bool"]]],[11,"reference","","",174,N],[11,"clone","","",175,[[["self"]],["geometryshader"]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result"]]],[11,"hash","","",175,N],[11,"eq","","",175,[[["self"],["geometryshader"]],["bool"]]],[11,"ne","","",175,[[["self"],["geometryshader"]],["bool"]]],[11,"reference","","",175,N],[11,"clone","","",176,[[["self"]],["pixelshader"]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result"]]],[11,"hash","","",176,N],[11,"eq","","",176,[[["self"],["pixelshader"]],["bool"]]],[11,"ne","","",176,[[["self"],["pixelshader"]],["bool"]]],[11,"reference","","",176,N],[11,"clone","","",20,[[["self"]],["shaderset"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"hash","","",20,N],[11,"eq","","",20,[[["self"],["shaderset"]],["bool"]]],[11,"ne","","",20,[[["self"],["shaderset"]],["bool"]]],[11,"get_usage","","Return the aggregated stage usage for the set.",20,[[["self"]],["usage"]]],[11,"clone","","",18,[[["self"]],["capabilities"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["capabilities"]],["bool"]]],[11,"ne","","",18,[[["self"],["capabilities"]],["bool"]]],[11,"clone","","",21,[[["self"]],["primitive"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"hash","","",21,N],[11,"eq","","",21,[[["self"],["primitive"]],["bool"]]],[11,"ne","","",21,[[["self"],["primitive"]],["bool"]]],[11,"clone","","",22,[[["self"]],["indextype"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"hash","","",22,N],[11,"cmp","","",22,[[["self"],["indextype"]],["ordering"]]],[11,"eq","","",22,[[["self"],["indextype"]],["bool"]]],[11,"partial_cmp","","",22,[[["self"],["indextype"]],["option",["ordering"]]]],[11,"clone","","",23,[[["self"]],["submissionerror"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["submissionerror"]],["bool"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"description","","",23,[[["self"]],["str"]]],[11,"clone","","",19,[[["self"]],["adapterinfo"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["adapterinfo"]],["bool"]]],[11,"ne","","",19,[[["self"],["adapterinfo"]],["bool"]]],[11,"clone","","",177,[[["self"]],["frame"]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"bitand","gfx_core::target","Returns the intersection between the two sets of flags.",178,[[["self"],["mirror"]],["mirror"]]],[11,"bitand","gfx_core::state","Returns the intersection between the two sets of flags.",179,[[["self"],["colormask"]],["colormask"]]],[11,"clone","","",14,[[["self"]],["blend"]]],[11,"clone","","",4,[[["self"]],["rasterizer"]]],[11,"clone","","",16,[[["self"]],["refvalues"]]],[11,"clone","","",11,[[["self"]],["blendvalue"]]],[11,"clone","","",1,[[["self"]],["offset"]]],[11,"clone","","",13,[[["self"]],["blendchannel"]]],[11,"clone","","",5,[[["self"]],["comparison"]]],[11,"clone","","",179,[[["self"]],["colormask"]]],[11,"clone","","",2,[[["self"]],["cullface"]]],[11,"clone","","",12,[[["self"]],["factor"]]],[11,"clone","","",0,[[["self"]],["frontface"]]],[11,"clone","gfx_core::target","",178,[[["self"]],["mirror"]]],[11,"clone","","",17,[[["self"]],["rect"]]],[11,"clone","gfx_core::state","",7,[[["self"]],["stencilside"]]],[11,"clone","","",180,[[["self"]],["multisample"]]],[11,"clone","","",15,[[["self"]],["color"]]],[11,"clone","","",8,[[["self"]],["stencil"]]],[11,"clone","","",10,[[["self"]],["equation"]]],[11,"clone","","",6,[[["self"]],["stencilop"]]],[11,"clone","","",9,[[["self"]],["depth"]]],[11,"clone","","",3,[[["self"]],["rastermethod"]]],[11,"fmt","gfx_core::target","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx_core::state","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx_core::target","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx_core::state","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx_core::target","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","gfx_core::state","",10,[[["self"],["equation"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["depth"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["cullface"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["comparison"]],["ordering"]]],[11,"cmp","","",180,[[["self"],["multisample"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["stencilside"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["stencilop"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["blendvalue"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["factor"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["frontface"]],["ordering"]]],[11,"cmp","","",179,[[["self"],["colormask"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["blendchannel"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["stencil"]],["ordering"]]],[11,"cmp","gfx_core::target","",178,[[["self"],["mirror"]],["ordering"]]],[11,"sub","","Returns the set difference of the two sets of flags.",178,[[["self"],["mirror"]],["mirror"]]],[11,"sub","gfx_core::state","Returns the set difference of the two sets of flags.",179,[[["self"],["colormask"]],["colormask"]]],[11,"from_iter","","",179,[[["t"]],["colormask"]]],[11,"from_iter","gfx_core::target","",178,[[["t"]],["mirror"]]],[11,"default","gfx_core::state","",9,[[],["depth"]]],[11,"default","","",13,[[],["blendchannel"]]],[11,"default","","",7,[[],["stencilside"]]],[11,"default","","",16,[[],["refvalues"]]],[11,"default","","",15,[[],["color"]]],[11,"default","","",8,[[],["stencil"]]],[11,"default","","",14,[[],["blend"]]],[11,"sub_assign","gfx_core::target","Disables all flags enabled in the set.",178,N],[11,"sub_assign","gfx_core::state","Disables all flags enabled in the set.",179,N],[11,"partial_cmp","","",7,[[["self"],["stencilside"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"le","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"gt","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"ge","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["blendvalue"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["blendchannel"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"le","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"gt","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"ge","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["refvalues"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"le","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"gt","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"ge","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"partial_cmp","","",179,[[["self"],["colormask"]],["option",["ordering"]]]],[11,"lt","","",179,[[["self"],["colormask"]],["bool"]]],[11,"le","","",179,[[["self"],["colormask"]],["bool"]]],[11,"gt","","",179,[[["self"],["colormask"]],["bool"]]],[11,"ge","","",179,[[["self"],["colormask"]],["bool"]]],[11,"partial_cmp","","",180,[[["self"],["multisample"]],["option",["ordering"]]]],[11,"partial_cmp","","",14,[[["self"],["blend"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["blend"]],["bool"]]],[11,"le","","",14,[[["self"],["blend"]],["bool"]]],[11,"gt","","",14,[[["self"],["blend"]],["bool"]]],[11,"ge","","",14,[[["self"],["blend"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["comparison"]],["option",["ordering"]]]],[11,"partial_cmp","","",8,[[["self"],["stencil"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["stencil"]],["bool"]]],[11,"le","","",8,[[["self"],["stencil"]],["bool"]]],[11,"gt","","",8,[[["self"],["stencil"]],["bool"]]],[11,"ge","","",8,[[["self"],["stencil"]],["bool"]]],[11,"partial_cmp","gfx_core::target","",178,[[["self"],["mirror"]],["option",["ordering"]]]],[11,"lt","","",178,[[["self"],["mirror"]],["bool"]]],[11,"le","","",178,[[["self"],["mirror"]],["bool"]]],[11,"gt","","",178,[[["self"],["mirror"]],["bool"]]],[11,"ge","","",178,[[["self"],["mirror"]],["bool"]]],[11,"partial_cmp","gfx_core::state","",3,[[["self"],["rastermethod"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"le","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"gt","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"ge","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["factor"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["factor"]],["bool"]]],[11,"le","","",12,[[["self"],["factor"]],["bool"]]],[11,"gt","","",12,[[["self"],["factor"]],["bool"]]],[11,"ge","","",12,[[["self"],["factor"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["stencilop"]],["option",["ordering"]]]],[11,"partial_cmp","","",4,[[["self"],["rasterizer"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"le","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"gt","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"ge","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["offset"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["offset"]],["bool"]]],[11,"le","","",1,[[["self"],["offset"]],["bool"]]],[11,"gt","","",1,[[["self"],["offset"]],["bool"]]],[11,"ge","","",1,[[["self"],["offset"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["depth"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["depth"]],["bool"]]],[11,"le","","",9,[[["self"],["depth"]],["bool"]]],[11,"gt","","",9,[[["self"],["depth"]],["bool"]]],[11,"ge","","",9,[[["self"],["depth"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["frontface"]],["option",["ordering"]]]],[11,"partial_cmp","","",15,[[["self"],["color"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["color"]],["bool"]]],[11,"le","","",15,[[["self"],["color"]],["bool"]]],[11,"gt","","",15,[[["self"],["color"]],["bool"]]],[11,"ge","","",15,[[["self"],["color"]],["bool"]]],[11,"partial_cmp","gfx_core::target","",17,[[["self"],["rect"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["rect"]],["bool"]]],[11,"le","","",17,[[["self"],["rect"]],["bool"]]],[11,"gt","","",17,[[["self"],["rect"]],["bool"]]],[11,"ge","","",17,[[["self"],["rect"]],["bool"]]],[11,"partial_cmp","gfx_core::state","",2,[[["self"],["cullface"]],["option",["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["equation"]],["option",["ordering"]]]],[11,"bitand_assign","gfx_core::target","Disables all flags disabled in the set.",178,N],[11,"bitand_assign","gfx_core::state","Disables all flags disabled in the set.",179,N],[11,"fmt","","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx_core::target","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitor","gfx_core::state","Returns the union of the two sets of flags.",179,[[["self"],["colormask"]],["colormask"]]],[11,"bitor","gfx_core::target","Returns the union of the two sets of flags.",178,[[["self"],["mirror"]],["mirror"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx_core::state","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",13,N],[11,"hash","","",10,N],[11,"hash","","",1,N],[11,"hash","gfx_core::target","",17,N],[11,"hash","gfx_core::state","",9,N],[11,"hash","","",5,N],[11,"hash","gfx_core::target","",178,N],[11,"hash","gfx_core::state","",0,N],[11,"hash","","",7,N],[11,"hash","","",8,N],[11,"hash","","",6,N],[11,"hash","","",3,N],[11,"hash","","",2,N],[11,"hash","","",11,N],[11,"hash","","",12,N],[11,"hash","","",15,N],[11,"hash","","",180,N],[11,"hash","","",4,N],[11,"hash","","",179,N],[11,"hash","","",14,N],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",179,[[["self"],["colormask"]],["colormask"]]],[11,"bitxor","gfx_core::target","Returns the left flags, but with all the right flags toggled.",178,[[["self"],["mirror"]],["mirror"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gfx_core::state","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx_core::target","",178,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx_core::state","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx_core::target","",17,[[["self"],["__s"]],["result"]]],[11,"serialize","gfx_core::state","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",180,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","","",179,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",179,[[["__d"]],["result",["colormask"]]]],[11,"deserialize","","",1,[[["__d"]],["result",["offset"]]]],[11,"deserialize","","",16,[[["__d"]],["result",["refvalues"]]]],[11,"deserialize","","",7,[[["__d"]],["result",["stencilside"]]]],[11,"deserialize","","",9,[[["__d"]],["result",["depth"]]]],[11,"deserialize","","",15,[[["__d"]],["result",["color"]]]],[11,"deserialize","","",180,[[["__d"]],["result",["multisample"]]]],[11,"deserialize","","",3,[[["__d"]],["result",["rastermethod"]]]],[11,"deserialize","","",2,[[["__d"]],["result",["cullface"]]]],[11,"deserialize","","",8,[[["__d"]],["result",["stencil"]]]],[11,"deserialize","","",5,[[["__d"]],["result",["comparison"]]]],[11,"deserialize","","",14,[[["__d"]],["result",["blend"]]]],[11,"deserialize","","",4,[[["__d"]],["result",["rasterizer"]]]],[11,"deserialize","","",10,[[["__d"]],["result",["equation"]]]],[11,"deserialize","","",13,[[["__d"]],["result",["blendchannel"]]]],[11,"deserialize","","",6,[[["__d"]],["result",["stencilop"]]]],[11,"deserialize","","",12,[[["__d"]],["result",["factor"]]]],[11,"deserialize","","",0,[[["__d"]],["result",["frontface"]]]],[11,"deserialize","gfx_core::target","",178,[[["__d"]],["result",["mirror"]]]],[11,"deserialize","gfx_core::state","",11,[[["__d"]],["result",["blendvalue"]]]],[11,"deserialize","gfx_core::target","",17,[[["__d"]],["result",["rect"]]]],[11,"extend","gfx_core::state","",179,N],[11,"extend","gfx_core::target","",178,N],[11,"not","gfx_core::state","Returns the complement of this set of flags.",179,[[["self"]],["colormask"]]],[11,"not","gfx_core::target","Returns the complement of this set of flags.",178,[[["self"]],["mirror"]]],[11,"bitxor_assign","","Toggles the set of flags.",178,N],[11,"bitxor_assign","gfx_core::state","Toggles the set of flags.",179,N],[11,"bitor_assign","gfx_core::target","Adds the set of flags.",178,N],[11,"bitor_assign","gfx_core::state","Adds the set of flags.",179,N],[11,"eq","","",1,[[["self"],["offset"]],["bool"]]],[11,"ne","","",1,[[["self"],["offset"]],["bool"]]],[11,"eq","","",179,[[["self"],["colormask"]],["bool"]]],[11,"ne","","",179,[[["self"],["colormask"]],["bool"]]],[11,"eq","","",8,[[["self"],["stencil"]],["bool"]]],[11,"ne","","",8,[[["self"],["stencil"]],["bool"]]],[11,"eq","","",5,[[["self"],["comparison"]],["bool"]]],[11,"eq","","",9,[[["self"],["depth"]],["bool"]]],[11,"ne","","",9,[[["self"],["depth"]],["bool"]]],[11,"eq","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"ne","","",3,[[["self"],["rastermethod"]],["bool"]]],[11,"eq","","",12,[[["self"],["factor"]],["bool"]]],[11,"ne","","",12,[[["self"],["factor"]],["bool"]]],[11,"eq","","",180,[[["self"],["multisample"]],["bool"]]],[11,"eq","","",10,[[["self"],["equation"]],["bool"]]],[11,"eq","","",6,[[["self"],["stencilop"]],["bool"]]],[11,"eq","","",15,[[["self"],["color"]],["bool"]]],[11,"ne","","",15,[[["self"],["color"]],["bool"]]],[11,"eq","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"ne","","",4,[[["self"],["rasterizer"]],["bool"]]],[11,"eq","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"ne","","",16,[[["self"],["refvalues"]],["bool"]]],[11,"eq","","",2,[[["self"],["cullface"]],["bool"]]],[11,"eq","","",11,[[["self"],["blendvalue"]],["bool"]]],[11,"eq","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"ne","","",7,[[["self"],["stencilside"]],["bool"]]],[11,"eq","","",0,[[["self"],["frontface"]],["bool"]]],[11,"eq","","",14,[[["self"],["blend"]],["bool"]]],[11,"ne","","",14,[[["self"],["blend"]],["bool"]]],[11,"eq","gfx_core::target","",178,[[["self"],["mirror"]],["bool"]]],[11,"ne","","",178,[[["self"],["mirror"]],["bool"]]],[11,"eq","","",17,[[["self"],["rect"]],["bool"]]],[11,"ne","","",17,[[["self"],["rect"]],["bool"]]],[11,"eq","gfx_core::state","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"ne","","",13,[[["self"],["blendchannel"]],["bool"]]],[11,"new_fill","","Create a new filling rasterizer.",4,[[],["rasterizer"]]],[11,"with_cull_back","","Add back face culling.",4,[[["self"]],["rasterizer"]]],[11,"with_offset","","Add polygon offset.",4,[[["self"],["f32"],["i32"]],["rasterizer"]]],[11,"new","","Create a new stencil state with a given function.",8,N],[11,"new","","Create a new blend state with a given equation.",14,[[["equation"],["factor"],["factor"]],["blend"]]],[18,"RED","","",179,N],[18,"GREEN","","",179,N],[18,"BLUE","","",179,N],[18,"ALPHA","","",179,N],[11,"empty","","Returns an empty set of flags.",179,[[],["colormask"]]],[11,"all","","Returns the set containing all flags.",179,[[],["colormask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",179,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",179,[[["u8"]],["option",["colormask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",179,[[["u8"]],["colormask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",179,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",179,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",179,[[["self"],["colormask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",179,[[["self"],["colormask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",179,N],[11,"remove","","Removes the specified flags in-place.",179,N],[11,"toggle","","Toggles the specified flags in-place.",179,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",179,N],[18,"X","gfx_core::target","",178,N],[18,"Y","","",178,N],[11,"empty","","Returns an empty set of flags.",178,[[],["mirror"]]],[11,"all","","Returns the set containing all flags.",178,[[],["mirror"]]],[11,"bits","","Returns the raw value of the flags currently stored.",178,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",178,[[["u8"]],["option",["mirror"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",178,[[["u8"]],["mirror"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",178,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",178,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",178,[[["self"],["mirror"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",178,[[["self"],["mirror"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",178,N],[11,"remove","","Removes the specified flags in-place.",178,N],[11,"toggle","","Toggles the specified flags in-place.",178,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",178,N]],"paths":[[4,"FrontFace"],[3,"Offset"],[4,"CullFace"],[4,"RasterMethod"],[3,"Rasterizer"],[4,"Comparison"],[4,"StencilOp"],[3,"StencilSide"],[3,"Stencil"],[3,"Depth"],[4,"Equation"],[4,"BlendValue"],[4,"Factor"],[3,"BlendChannel"],[3,"Blend"],[3,"Color"],[3,"RefValues"],[3,"Rect"],[3,"Capabilities"],[3,"AdapterInfo"],[4,"ShaderSet"],[4,"Primitive"],[4,"IndexType"],[4,"SubmissionError"],[3,"Info"],[4,"Role"],[4,"CreationError"],[3,"Raw"],[4,"ClearColor"],[8,"Buffer"],[3,"AccessInfo"],[3,"AccessGuard"],[3,"AccessGuardBuffers"],[3,"AccessGuardBuffersChain"],[4,"DummyResources"],[3,"DummyFence"],[3,"DummyMapping"],[3,"DummyDevice"],[3,"DummyCommandBuffer"],[4,"ResourceViewError"],[4,"TargetViewError"],[4,"CombinedError"],[8,"Factory"],[3,"Swizzle"],[3,"Format"],[3,"U8Norm"],[3,"I8Norm"],[3,"U16Norm"],[3,"I16Norm"],[3,"F16"],[4,"ChannelType"],[4,"SurfaceType"],[4,"ChannelSource"],[8,"SurfaceTyped"],[8,"ChannelTyped"],[8,"Formatted"],[4,"Int"],[4,"Uint"],[4,"Inorm"],[4,"Unorm"],[4,"Float"],[4,"Srgb"],[4,"R4_G4"],[4,"R4_G4_B4_A4"],[4,"R5_G5_B5_A1"],[4,"R5_G6_B5"],[4,"R8"],[4,"R8_G8"],[4,"R8_G8_B8_A8"],[4,"R10_G10_B10_A2"],[4,"R11_G11_B10"],[4,"R16"],[4,"R16_G16"],[4,"R16_G16_B16"],[4,"R16_G16_B16_A16"],[4,"R32"],[4,"R32_G32"],[4,"R32_G32_B32"],[4,"R32_G32_B32_A32"],[4,"B8_G8_R8_A8"],[4,"D16"],[4,"D24"],[4,"D24_S8"],[4,"D32"],[3,"RawBuffer"],[3,"Buffer"],[3,"Shader"],[3,"Program"],[3,"RawPipelineState"],[3,"RawTexture"],[3,"Texture"],[3,"RawShaderResourceView"],[3,"ShaderResourceView"],[3,"RawUnorderedAccessView"],[3,"UnorderedAccessView"],[3,"RawRenderTargetView"],[3,"RawDepthStencilView"],[3,"RenderTargetView"],[3,"DepthStencilView"],[3,"Sampler"],[3,"Fence"],[3,"Manager"],[4,"Error"],[3,"Reader"],[3,"Writer"],[4,"Usage"],[3,"Access"],[3,"Bind"],[3,"ColorInfo"],[3,"DepthStencilInfo"],[3,"Element"],[3,"VertexBufferDesc"],[3,"Descriptor"],[3,"VertexBufferSet"],[3,"ConstantBufferParam"],[3,"ResourceViewParam"],[3,"UnorderedViewParam"],[3,"SamplerParam"],[3,"PixelTargetSet"],[3,"CreationError"],[3,"SamplerType"],[3,"AttributeVar"],[3,"ConstVar"],[3,"ConstantBufferVar"],[3,"TextureVar"],[3,"UnorderedVar"],[3,"SamplerVar"],[3,"OutputVar"],[3,"ProgramInfo"],[4,"IsArray"],[4,"IsComparison"],[4,"IsMultiSample"],[4,"IsRect"],[4,"MatrixFormat"],[4,"TextureType"],[4,"BaseType"],[4,"ContainerType"],[4,"Stage"],[4,"UniformValue"],[4,"CompatibilityError"],[4,"CreateShaderError"],[8,"BaseTyped"],[8,"Formatted"],[3,"Usage"],[3,"Program"],[3,"CreateProgramError"],[3,"ImageInfoCommon"],[3,"TextureCopyRegion"],[3,"PackedColor"],[3,"SamplerInfo"],[3,"Info"],[3,"ResourceDesc"],[3,"RenderDesc"],[3,"DepthStencilDesc"],[4,"CreationError"],[4,"LayerError"],[4,"AaMode"],[4,"FilterMethod"],[4,"CubeFace"],[4,"Kind"],[4,"Mipmap"],[4,"WrapMode"],[3,"Raw"],[6,"RawImageInfo"],[3,"Lod"],[3,"DepthStencilFlags"],[8,"Resources"],[8,"Device"],[8,"Adapter"],[8,"QueueFamily"],[8,"Surface"],[8,"SwapChain"],[3,"VertexShader"],[3,"HullShader"],[3,"DomainShader"],[3,"GeometryShader"],[3,"PixelShader"],[3,"Frame"],[3,"Mirror"],[3,"ColorMask"],[3,"MultiSample"]]};
searchIndex["gfx_device_gl"]={"doc":"OpenGL implementation of a device, striving to support OpenGL 2.0 with at least VAOs, but using newer extensions when available.","items":[[3,"CommandBuffer","gfx_device_gl","A command buffer abstraction for OpenGL.",N,N],[12,"buf","","",0,N],[12,"data","","",0,N],[12,"display_fb","","The framebuffer to use for rendering to the main targets (0 by default).",0,N],[3,"Factory","","GL resource factory.",N,N],[3,"Info","","OpenGL implementation information",N,N],[12,"platform_name","","The platform identifier",1,N],[12,"version","","The OpenGL API vesion number",1,N],[12,"shading_language","","The GLSL vesion number",1,N],[12,"extensions","","The extensions supported by the implementation",1,N],[3,"PlatformName","","A unique platform identifier that does not change between releases",N,N],[12,"vendor","","The company responsible for the OpenGL implementation",2,N],[12,"renderer","","The name of the renderer",2,N],[3,"Version","","A version number for a specific component of an OpenGL implementation",N,N],[12,"is_embedded","","",3,N],[12,"major","","",3,N],[12,"minor","","",3,N],[12,"revision","","",3,N],[12,"vendor_info","","",3,N],[3,"Fence","","",N,N],[3,"BufferElement","","",N,N],[12,"desc","","",4,N],[12,"elem","","",4,N],[3,"OutputMerger","","",N,N],[12,"draw_mask","","",5,N],[12,"stencil","","",5,N],[12,"depth","","",5,N],[12,"colors","","",5,N],[3,"PipelineState","","",N,N],[3,"ResourceView","","",N,N],[3,"FatSampler","","",N,N],[3,"Device","","An OpenGL device with GLSL shaders.",N,N],[4,"Resources","","",N,N],[4,"NewTexture","","",N,N],[13,"Surface","","",6,N],[13,"Texture","","",6,N],[4,"TargetView","","",N,N],[13,"Surface","","",7,N],[13,"Texture","","",7,N],[13,"TextureLayer","","",7,N],[4,"Error","","",N,N],[13,"NoError","","",8,N],[13,"InvalidEnum","","",8,N],[13,"InvalidValue","","",8,N],[13,"InvalidOperation","","",8,N],[13,"InvalidFramebufferOperation","","",8,N],[13,"OutOfMemory","","",8,N],[13,"UnknownError","","",8,N],[5,"create","","Create a new device with a factory.",N,N],[5,"create_main_targets_raw","","Create the proxy target views (RTV and DSV) for the attachments of the main framebuffer. These have GL names equal to 0. Not supposed to be used by the users directly.",N,N],[11,"new","","",0,[[["framebuffer"],["workarounds"]],["commandbuffer"]]],[11,"reset","","",0,[[["self"]]]],[11,"bind_pipeline_state","","",0,[[["self"],["pipelinestate"]]]],[11,"bind_vertex_buffers","","",0,[[["self"],["vertexbufferset",["resources"]]]]],[11,"bind_constant_buffers","","",0,N],[11,"bind_global_constant","","",0,[[["self"],["location"],["uniformvalue"]]]],[11,"bind_resource_views","","",0,N],[11,"bind_unordered_views","","",0,N],[11,"bind_samplers","","",0,N],[11,"bind_pixel_targets","","",0,[[["self"],["pixeltargetset",["resources"]]]]],[11,"bind_index","","",0,[[["self"],["buffer"],["indextype"]]]],[11,"set_scissor","","",0,[[["self"],["rect"]]]],[11,"set_ref_values","","",0,[[["self"],["refvalues"]]]],[11,"copy_buffer","","",0,[[["self"],["buffer"],["buffer"],["usize"],["usize"],["usize"]]]],[11,"copy_buffer_to_texture","","",0,[[["self"],["buffer"],["usize"],["texturecopyregion",["newtexture"]]]]],[11,"copy_texture_to_buffer","","",0,[[["self"],["texturecopyregion",["newtexture"]],["buffer"],["usize"]]]],[11,"copy_texture_to_texture","","",0,[[["self"],["texturecopyregion",["newtexture"]],["texturecopyregion",["newtexture"]]]]],[11,"update_buffer","","",0,N],[11,"update_texture","","",0,N],[11,"generate_mipmap","","",0,[[["self"],["resourceview"]]]],[11,"clear_color","","",0,[[["self"],["targetview"],["clearcolor"]]]],[11,"clear_depth_stencil","","",0,[[["self"],["targetview"],["option",["depth"]],["option",["stencil"]]]]],[11,"call_draw","","",0,[[["self"],["vertexcount"],["vertexcount"],["option",["instanceparams"]]]]],[11,"call_draw_indexed","","",0,[[["self"],["vertexcount"],["vertexcount"],["vertexcount"],["option",["instanceparams"]]]]],[11,"clone","","",9,[[["self"]],["factory"]]],[11,"new","","Create a new `Factory`.",9,[[["rc",["share"]]],["factory"]]],[11,"create_command_buffer","","",9,[[["self"]],["commandbuffer"]]],[11,"get_capabilities","","",9,[[["self"]],["capabilities"]]],[11,"create_buffer_raw","","",9,[[["self"],["info"]],["result",["rawbuffer","creationerror"]]]],[11,"create_buffer_immutable_raw","","",9,N],[11,"create_shader","","",9,N],[11,"create_program","","",9,[[["self"],["shaderset"]],["result",["program","createprogramerror"]]]],[11,"create_pipeline_state_raw","","",9,[[["self"],["program"],["descriptor"]],["result",["rawpipelinestate","creationerror"]]]],[11,"create_texture_raw","","",9,[[["self"],["info"],["option",["channeltype"]],["option"]],["result",["rawtexture","creationerror"]]]],[11,"view_buffer_as_shader_resource_raw","","",9,[[["self"],["rawbuffer"],["format"]],["result",["rawshaderresourceview","resourceviewerror"]]]],[11,"view_buffer_as_unordered_access_raw","","",9,[[["self"],["rawbuffer"]],["result",["rawunorderedaccessview","resourceviewerror"]]]],[11,"view_texture_as_shader_resource_raw","","",9,[[["self"],["rawtexture"],["resourcedesc"]],["result",["rawshaderresourceview","resourceviewerror"]]]],[11,"view_texture_as_unordered_access_raw","","",9,[[["self"],["rawtexture"]],["result",["rawunorderedaccessview","resourceviewerror"]]]],[11,"view_texture_as_render_target_raw","","",9,[[["self"],["rawtexture"],["renderdesc"]],["result",["rawrendertargetview","targetviewerror"]]]],[11,"view_texture_as_depth_stencil_raw","","",9,[[["self"],["rawtexture"],["depthstencildesc"]],["result",["rawdepthstencilview","targetviewerror"]]]],[11,"create_sampler","","",9,[[["self"],["samplerinfo"]],["sampler",["r"]]]],[11,"read_mapping","","",9,[[["self"],["buffer"]],["result",["reader","error"]]]],[11,"write_mapping","","",9,[[["self"],["buffer"]],["result",["writer","error"]]]],[11,"clone","","",3,[[["self"]],["version"]]],[11,"eq","","",3,[[["self"],["version"]],["bool"]]],[11,"ne","","",3,[[["self"],["version"]],["bool"]]],[11,"new","","Create a new OpenGL version number",3,[[["u32"],["u32"],["option",["u32"]],["str"]],["self"]]],[11,"new_embedded","","Create a new OpenGL ES version number",3,[[["u32"],["u32"],["str"]],["version"]]],[11,"parse","","According to the OpenGL specification, the version information is expected to follow the following syntax:",3,[[["str"]],["result",["version","str"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["platformname"]]],[11,"eq","","",2,[[["self"],["platformname"]],["bool"]]],[11,"ne","","",2,[[["self"],["platformname"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"is_version_supported","","",1,[[["self"],["u32"],["u32"]],["bool"]]],[11,"is_embedded_version_supported","","",1,[[["self"],["u32"],["u32"]],["bool"]]],[11,"is_extension_supported","","Returns `true` if the implementation supports the extension",1,[[["self"],["str"]],["bool"]]],[11,"is_version_or_extension_supported","","",1,[[["self"],["u32"],["u32"],["str"]],["bool"]]],[11,"is_any_extension_supported","","",1,N],[6,"Buffer","","",N,N],[6,"ArrayBuffer","","",N,N],[6,"Shader","","",N,N],[6,"Program","","",N,N],[6,"FrameBuffer","","",N,N],[6,"Surface","","",N,N],[6,"Texture","","",N,N],[6,"Sampler","","",N,N],[11,"clone","","",10,[[["self"]],["fence"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"hash","","",10,N],[11,"eq","","",10,[[["self"],["fence"]],["bool"]]],[11,"ne","","",10,[[["self"],["fence"]],["bool"]]],[11,"clone","","",11,[[["self"]],["resources"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["resources"]],["bool"]]],[11,"clone","","",4,[[["self"]],["bufferelement"]]],[11,"eq","","",4,[[["self"],["bufferelement"]],["bool"]]],[11,"ne","","",4,[[["self"],["bufferelement"]],["bool"]]],[11,"hash","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["outputmerger"]]],[11,"eq","","",5,[[["self"],["outputmerger"]],["bool"]]],[11,"ne","","",5,[[["self"],["outputmerger"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["pipelinestate"]]],[11,"eq","","",12,[[["self"],["pipelinestate"]],["bool"]]],[11,"ne","","",12,[[["self"],["pipelinestate"]],["bool"]]],[11,"hash","","",12,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["newtexture"]]],[11,"eq","","",6,[[["self"],["newtexture"]],["bool"]]],[11,"ne","","",6,[[["self"],["newtexture"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["resourceview"]]],[11,"eq","","",13,[[["self"],["resourceview"]],["bool"]]],[11,"ne","","",13,[[["self"],["resourceview"]],["bool"]]],[11,"hash","","",13,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new_texture","","",13,[[["texture"],["kind"]],["resourceview"]]],[11,"new_buffer","","",13,[[["texture"]],["resourceview"]]],[11,"clone","","",14,[[["self"]],["fatsampler"]]],[11,"eq","","",14,[[["self"],["fatsampler"]],["bool"]]],[11,"ne","","",14,[[["self"],["fatsampler"]],["bool"]]],[11,"hash","","",14,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["targetview"]]],[11,"eq","","",7,[[["self"],["targetview"]],["bool"]]],[11,"ne","","",7,[[["self"],["targetview"]],["bool"]]],[11,"hash","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["error"]]],[11,"eq","","",8,[[["self"],["error"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"from_error_code","","",8,[[["glenum"]],["error"]]],[11,"with_gl","","Access the OpenGL directly via a closure. OpenGL types and enumerations can be found in the `gl` crate.",15,[[["self"],["f"]]]],[11,"get_info","","Get the OpenGL-specific driver information",15,[[["self"]],["info"]]],[11,"get_capabilities","","",15,[[["self"]],["capabilities"]]],[11,"pin_submitted_resources","","",15,[[["self"],["manager"]]]],[11,"submit","","",15,[[["self"],["commandbuffer"],["accessinfo"]],["submissionresult"]]],[11,"fenced_submit","","",15,[[["self"],["commandbuffer"],["accessinfo"],["option",["fence"]]],["submissionresult",["fence"]]]],[11,"wait_fence","","",15,[[["self"],["fence"]]]],[11,"cleanup","","",15,[[["self"]]]]],"paths":[[3,"CommandBuffer"],[3,"Info"],[3,"PlatformName"],[3,"Version"],[3,"BufferElement"],[3,"OutputMerger"],[4,"NewTexture"],[4,"TargetView"],[4,"Error"],[3,"Factory"],[3,"Fence"],[4,"Resources"],[3,"PipelineState"],[3,"ResourceView"],[3,"FatSampler"],[3,"Device"]]};
searchIndex["gfx_gl"]={"doc":"An OpenGL loader generated by gl-rs.","items":[[3,"FnPtr","gfx_gl","",N,N],[3,"Gl","","",N,N],[12,"ActiveShaderProgram","","",0,N],[12,"ActiveTexture","","Fallbacks: ActiveTextureARB",0,N],[12,"AttachShader","","Fallbacks: AttachObjectARB",0,N],[12,"BeginConditionalRender","","Fallbacks: BeginConditionalRenderNV",0,N],[12,"BeginQuery","","Fallbacks: BeginQueryARB",0,N],[12,"BeginQueryIndexed","","",0,N],[12,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",0,N],[12,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",0,N],[12,"BindBuffer","","Fallbacks: BindBufferARB",0,N],[12,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",0,N],[12,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",0,N],[12,"BindBuffersBase","","",0,N],[12,"BindBuffersRange","","",0,N],[12,"BindFragDataLocation","","Fallbacks: BindFragDataLocationEXT",0,N],[12,"BindFragDataLocationIndexed","","Fallbacks: BindFragDataLocationIndexedEXT",0,N],[12,"BindFramebuffer","","",0,N],[12,"BindImageTexture","","",0,N],[12,"BindImageTextures","","",0,N],[12,"BindProgramPipeline","","",0,N],[12,"BindRenderbuffer","","",0,N],[12,"BindSampler","","",0,N],[12,"BindSamplers","","",0,N],[12,"BindTexture","","Fallbacks: BindTextureEXT",0,N],[12,"BindTextureUnit","","",0,N],[12,"BindTextures","","",0,N],[12,"BindTransformFeedback","","",0,N],[12,"BindVertexArray","","Fallbacks: BindVertexArrayOES",0,N],[12,"BindVertexBuffer","","",0,N],[12,"BindVertexBuffers","","",0,N],[12,"BlendColor","","Fallbacks: BlendColorEXT",0,N],[12,"BlendEquation","","Fallbacks: BlendEquationEXT",0,N],[12,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",0,N],[12,"BlendEquationSeparatei","","Fallbacks: BlendEquationSeparateIndexedAMD, BlendEquationSeparateiARB, BlendEquationSeparateiEXT, BlendEquationSeparateiOES",0,N],[12,"BlendEquationSeparateiARB","","",0,N],[12,"BlendEquationi","","Fallbacks: BlendEquationIndexedAMD, BlendEquationiARB, BlendEquationiEXT, BlendEquationiOES",0,N],[12,"BlendEquationiARB","","",0,N],[12,"BlendFunc","","",0,N],[12,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",0,N],[12,"BlendFuncSeparatei","","Fallbacks: BlendFuncSeparateIndexedAMD, BlendFuncSeparateiARB, BlendFuncSeparateiEXT, BlendFuncSeparateiOES",0,N],[12,"BlendFuncSeparateiARB","","",0,N],[12,"BlendFunci","","Fallbacks: BlendFuncIndexedAMD, BlendFunciARB, BlendFunciEXT, BlendFunciOES",0,N],[12,"BlendFunciARB","","",0,N],[12,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",0,N],[12,"BlitNamedFramebuffer","","",0,N],[12,"BufferData","","Fallbacks: BufferDataARB",0,N],[12,"BufferStorage","","Fallbacks: BufferStorageEXT",0,N],[12,"BufferSubData","","Fallbacks: BufferSubDataARB",0,N],[12,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",0,N],[12,"CheckNamedFramebufferStatus","","",0,N],[12,"ClampColor","","Fallbacks: ClampColorARB",0,N],[12,"Clear","","",0,N],[12,"ClearBufferData","","",0,N],[12,"ClearBufferSubData","","",0,N],[12,"ClearBufferfi","","",0,N],[12,"ClearBufferfv","","",0,N],[12,"ClearBufferiv","","",0,N],[12,"ClearBufferuiv","","",0,N],[12,"ClearColor","","",0,N],[12,"ClearDepth","","",0,N],[12,"ClearDepthf","","Fallbacks: ClearDepthfOES",0,N],[12,"ClearNamedBufferData","","",0,N],[12,"ClearNamedBufferSubData","","",0,N],[12,"ClearNamedFramebufferfi","","",0,N],[12,"ClearNamedFramebufferfv","","",0,N],[12,"ClearNamedFramebufferiv","","",0,N],[12,"ClearNamedFramebufferuiv","","",0,N],[12,"ClearStencil","","",0,N],[12,"ClearTexImage","","Fallbacks: ClearTexImageEXT",0,N],[12,"ClearTexSubImage","","Fallbacks: ClearTexSubImageEXT",0,N],[12,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",0,N],[12,"ClipControl","","",0,N],[12,"ColorMask","","",0,N],[12,"ColorMaski","","Fallbacks: ColorMaskIndexedEXT, ColorMaskiEXT, ColorMaskiOES",0,N],[12,"ColorP3ui","","",0,N],[12,"ColorP3uiv","","",0,N],[12,"ColorP4ui","","",0,N],[12,"ColorP4uiv","","",0,N],[12,"CompileShader","","Fallbacks: CompileShaderARB",0,N],[12,"CompressedTexImage1D","","Fallbacks: CompressedTexImage1DARB",0,N],[12,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",0,N],[12,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB",0,N],[12,"CompressedTexSubImage1D","","Fallbacks: CompressedTexSubImage1DARB",0,N],[12,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",0,N],[12,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB",0,N],[12,"CompressedTextureSubImage1D","","",0,N],[12,"CompressedTextureSubImage2D","","",0,N],[12,"CompressedTextureSubImage3D","","",0,N],[12,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",0,N],[12,"CopyImageSubData","","Fallbacks: CopyImageSubDataEXT, CopyImageSubDataOES",0,N],[12,"CopyNamedBufferSubData","","",0,N],[12,"CopyTexImage1D","","Fallbacks: CopyTexImage1DEXT",0,N],[12,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",0,N],[12,"CopyTexSubImage1D","","Fallbacks: CopyTexSubImage1DEXT",0,N],[12,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",0,N],[12,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT",0,N],[12,"CopyTextureSubImage1D","","",0,N],[12,"CopyTextureSubImage2D","","",0,N],[12,"CopyTextureSubImage3D","","",0,N],[12,"CreateBuffers","","",0,N],[12,"CreateFramebuffers","","",0,N],[12,"CreateProgram","","Fallbacks: CreateProgramObjectARB",0,N],[12,"CreateProgramPipelines","","",0,N],[12,"CreateQueries","","",0,N],[12,"CreateRenderbuffers","","",0,N],[12,"CreateSamplers","","",0,N],[12,"CreateShader","","Fallbacks: CreateShaderObjectARB",0,N],[12,"CreateShaderProgramv","","",0,N],[12,"CreateTextures","","",0,N],[12,"CreateTransformFeedbacks","","",0,N],[12,"CreateVertexArrays","","",0,N],[12,"CullFace","","",0,N],[12,"DebugMessageCallback","","Fallbacks: DebugMessageCallbackARB, DebugMessageCallbackKHR",0,N],[12,"DebugMessageControl","","Fallbacks: DebugMessageControlARB, DebugMessageControlKHR",0,N],[12,"DebugMessageInsert","","Fallbacks: DebugMessageInsertARB, DebugMessageInsertKHR",0,N],[12,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",0,N],[12,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",0,N],[12,"DeleteProgram","","",0,N],[12,"DeleteProgramPipelines","","",0,N],[12,"DeleteQueries","","Fallbacks: DeleteQueriesARB",0,N],[12,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",0,N],[12,"DeleteSamplers","","",0,N],[12,"DeleteShader","","",0,N],[12,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",0,N],[12,"DeleteTextures","","",0,N],[12,"DeleteTransformFeedbacks","","Fallbacks: DeleteTransformFeedbacksNV",0,N],[12,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",0,N],[12,"DepthFunc","","",0,N],[12,"DepthMask","","",0,N],[12,"DepthRange","","",0,N],[12,"DepthRangeArrayv","","",0,N],[12,"DepthRangeIndexed","","",0,N],[12,"DepthRangef","","Fallbacks: DepthRangefOES",0,N],[12,"DetachShader","","Fallbacks: DetachObjectARB",0,N],[12,"Disable","","",0,N],[12,"DisableVertexArrayAttrib","","",0,N],[12,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",0,N],[12,"Disablei","","Fallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV, DisableiOES",0,N],[12,"DispatchCompute","","",0,N],[12,"DispatchComputeIndirect","","",0,N],[12,"DrawArrays","","Fallbacks: DrawArraysEXT",0,N],[12,"DrawArraysIndirect","","",0,N],[12,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",0,N],[12,"DrawArraysInstancedBaseInstance","","Fallbacks: DrawArraysInstancedBaseInstanceEXT",0,N],[12,"DrawBuffer","","",0,N],[12,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",0,N],[12,"DrawElements","","",0,N],[12,"DrawElementsBaseVertex","","Fallbacks: DrawElementsBaseVertexEXT, DrawElementsBaseVertexOES",0,N],[12,"DrawElementsIndirect","","",0,N],[12,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",0,N],[12,"DrawElementsInstancedBaseInstance","","Fallbacks: DrawElementsInstancedBaseInstanceEXT",0,N],[12,"DrawElementsInstancedBaseVertex","","Fallbacks: DrawElementsInstancedBaseVertexEXT, DrawElementsInstancedBaseVertexOES",0,N],[12,"DrawElementsInstancedBaseVertexBaseInstance","","Fallbacks: DrawElementsInstancedBaseVertexBaseInstanceEXT",0,N],[12,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",0,N],[12,"DrawRangeElementsBaseVertex","","Fallbacks: DrawRangeElementsBaseVertexEXT, DrawRangeElementsBaseVertexOES",0,N],[12,"DrawTransformFeedback","","Fallbacks: DrawTransformFeedbackEXT, DrawTransformFeedbackNV",0,N],[12,"DrawTransformFeedbackInstanced","","Fallbacks: DrawTransformFeedbackInstancedEXT",0,N],[12,"DrawTransformFeedbackStream","","",0,N],[12,"DrawTransformFeedbackStreamInstanced","","",0,N],[12,"Enable","","",0,N],[12,"EnableVertexArrayAttrib","","",0,N],[12,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",0,N],[12,"Enablei","","Fallbacks: EnableIndexedEXT, EnableiEXT, EnableiNV, EnableiOES",0,N],[12,"EndConditionalRender","","Fallbacks: EndConditionalRenderNV, EndConditionalRenderNVX",0,N],[12,"EndQuery","","Fallbacks: EndQueryARB",0,N],[12,"EndQueryIndexed","","",0,N],[12,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",0,N],[12,"FenceSync","","Fallbacks: FenceSyncAPPLE",0,N],[12,"Finish","","",0,N],[12,"Flush","","",0,N],[12,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",0,N],[12,"FlushMappedNamedBufferRange","","",0,N],[12,"FramebufferParameteri","","",0,N],[12,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",0,N],[12,"FramebufferTexture","","Fallbacks: FramebufferTextureARB, FramebufferTextureEXT, FramebufferTextureOES",0,N],[12,"FramebufferTexture1D","","Fallbacks: FramebufferTexture1DEXT",0,N],[12,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",0,N],[12,"FramebufferTexture3D","","Fallbacks: FramebufferTexture3DEXT",0,N],[12,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",0,N],[12,"FrontFace","","",0,N],[12,"GenBuffers","","Fallbacks: GenBuffersARB",0,N],[12,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",0,N],[12,"GenProgramPipelines","","",0,N],[12,"GenQueries","","Fallbacks: GenQueriesARB",0,N],[12,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",0,N],[12,"GenSamplers","","",0,N],[12,"GenTextures","","",0,N],[12,"GenTransformFeedbacks","","Fallbacks: GenTransformFeedbacksNV",0,N],[12,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",0,N],[12,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",0,N],[12,"GenerateTextureMipmap","","",0,N],[12,"GetActiveAtomicCounterBufferiv","","",0,N],[12,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",0,N],[12,"GetActiveSubroutineName","","",0,N],[12,"GetActiveSubroutineUniformName","","",0,N],[12,"GetActiveSubroutineUniformiv","","",0,N],[12,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",0,N],[12,"GetActiveUniformBlockName","","",0,N],[12,"GetActiveUniformBlockiv","","",0,N],[12,"GetActiveUniformName","","",0,N],[12,"GetActiveUniformsiv","","",0,N],[12,"GetAttachedShaders","","",0,N],[12,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",0,N],[12,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT",0,N],[12,"GetBooleanv","","",0,N],[12,"GetBufferParameteri64v","","",0,N],[12,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",0,N],[12,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",0,N],[12,"GetBufferSubData","","Fallbacks: GetBufferSubDataARB",0,N],[12,"GetCompressedTexImage","","Fallbacks: GetCompressedTexImageARB",0,N],[12,"GetCompressedTextureImage","","",0,N],[12,"GetCompressedTextureSubImage","","",0,N],[12,"GetDebugMessageLog","","Fallbacks: GetDebugMessageLogARB, GetDebugMessageLogKHR",0,N],[12,"GetDoublei_v","","Fallbacks: GetDoubleIndexedvEXT, GetDoublei_vEXT",0,N],[12,"GetDoublev","","",0,N],[12,"GetError","","",0,N],[12,"GetFloati_v","","Fallbacks: GetFloatIndexedvEXT, GetFloati_vEXT, GetFloati_vNV, GetFloati_vOES",0,N],[12,"GetFloatv","","",0,N],[12,"GetFragDataIndex","","Fallbacks: GetFragDataIndexEXT",0,N],[12,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",0,N],[12,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",0,N],[12,"GetFramebufferParameteriv","","",0,N],[12,"GetGraphicsResetStatus","","Fallbacks: GetGraphicsResetStatusKHR",0,N],[12,"GetInteger64i_v","","",0,N],[12,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",0,N],[12,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",0,N],[12,"GetIntegerv","","",0,N],[12,"GetInternalformati64v","","",0,N],[12,"GetInternalformativ","","",0,N],[12,"GetMultisamplefv","","Fallbacks: GetMultisamplefvNV",0,N],[12,"GetNamedBufferParameteri64v","","",0,N],[12,"GetNamedBufferParameteriv","","",0,N],[12,"GetNamedBufferPointerv","","",0,N],[12,"GetNamedBufferSubData","","",0,N],[12,"GetNamedFramebufferAttachmentParameteriv","","",0,N],[12,"GetNamedFramebufferParameteriv","","",0,N],[12,"GetNamedRenderbufferParameteriv","","",0,N],[12,"GetObjectLabel","","Fallbacks: GetObjectLabelKHR",0,N],[12,"GetObjectPtrLabel","","Fallbacks: GetObjectPtrLabelKHR",0,N],[12,"GetPointerv","","Fallbacks: GetPointervEXT, GetPointervKHR",0,N],[12,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",0,N],[12,"GetProgramInfoLog","","",0,N],[12,"GetProgramInterfaceiv","","",0,N],[12,"GetProgramPipelineInfoLog","","",0,N],[12,"GetProgramPipelineiv","","",0,N],[12,"GetProgramResourceIndex","","",0,N],[12,"GetProgramResourceLocation","","",0,N],[12,"GetProgramResourceLocationIndex","","",0,N],[12,"GetProgramResourceName","","",0,N],[12,"GetProgramResourceiv","","",0,N],[12,"GetProgramStageiv","","",0,N],[12,"GetProgramiv","","",0,N],[12,"GetQueryBufferObjecti64v","","",0,N],[12,"GetQueryBufferObjectiv","","",0,N],[12,"GetQueryBufferObjectui64v","","",0,N],[12,"GetQueryBufferObjectuiv","","",0,N],[12,"GetQueryIndexediv","","",0,N],[12,"GetQueryObjecti64v","","Fallbacks: GetQueryObjecti64vEXT",0,N],[12,"GetQueryObjectiv","","Fallbacks: GetQueryObjectivARB, GetQueryObjectivEXT",0,N],[12,"GetQueryObjectui64v","","Fallbacks: GetQueryObjectui64vEXT",0,N],[12,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",0,N],[12,"GetQueryiv","","Fallbacks: GetQueryivARB",0,N],[12,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",0,N],[12,"GetSamplerParameterIiv","","Fallbacks: GetSamplerParameterIivEXT, GetSamplerParameterIivOES",0,N],[12,"GetSamplerParameterIuiv","","Fallbacks: GetSamplerParameterIuivEXT, GetSamplerParameterIuivOES",0,N],[12,"GetSamplerParameterfv","","",0,N],[12,"GetSamplerParameteriv","","",0,N],[12,"GetShaderInfoLog","","",0,N],[12,"GetShaderPrecisionFormat","","",0,N],[12,"GetShaderSource","","Fallbacks: GetShaderSourceARB",0,N],[12,"GetShaderiv","","",0,N],[12,"GetString","","",0,N],[12,"GetStringi","","",0,N],[12,"GetSubroutineIndex","","",0,N],[12,"GetSubroutineUniformLocation","","",0,N],[12,"GetSynciv","","Fallbacks: GetSyncivAPPLE",0,N],[12,"GetTexImage","","",0,N],[12,"GetTexLevelParameterfv","","",0,N],[12,"GetTexLevelParameteriv","","",0,N],[12,"GetTexParameterIiv","","Fallbacks: GetTexParameterIivEXT, GetTexParameterIivOES",0,N],[12,"GetTexParameterIuiv","","Fallbacks: GetTexParameterIuivEXT, GetTexParameterIuivOES",0,N],[12,"GetTexParameterfv","","",0,N],[12,"GetTexParameteriv","","",0,N],[12,"GetTextureImage","","",0,N],[12,"GetTextureLevelParameterfv","","",0,N],[12,"GetTextureLevelParameteriv","","",0,N],[12,"GetTextureParameterIiv","","",0,N],[12,"GetTextureParameterIuiv","","",0,N],[12,"GetTextureParameterfv","","",0,N],[12,"GetTextureParameteriv","","",0,N],[12,"GetTextureSubImage","","",0,N],[12,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",0,N],[12,"GetTransformFeedbacki64_v","","",0,N],[12,"GetTransformFeedbacki_v","","",0,N],[12,"GetTransformFeedbackiv","","",0,N],[12,"GetUniformBlockIndex","","",0,N],[12,"GetUniformIndices","","",0,N],[12,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",0,N],[12,"GetUniformSubroutineuiv","","",0,N],[12,"GetUniformdv","","",0,N],[12,"GetUniformfv","","Fallbacks: GetUniformfvARB",0,N],[12,"GetUniformiv","","Fallbacks: GetUniformivARB",0,N],[12,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",0,N],[12,"GetVertexArrayIndexed64iv","","",0,N],[12,"GetVertexArrayIndexediv","","",0,N],[12,"GetVertexArrayiv","","",0,N],[12,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",0,N],[12,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",0,N],[12,"GetVertexAttribLdv","","Fallbacks: GetVertexAttribLdvEXT",0,N],[12,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",0,N],[12,"GetVertexAttribdv","","Fallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV",0,N],[12,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",0,N],[12,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",0,N],[12,"GetnColorTable","","",0,N],[12,"GetnCompressedTexImage","","",0,N],[12,"GetnConvolutionFilter","","",0,N],[12,"GetnHistogram","","",0,N],[12,"GetnMapdv","","",0,N],[12,"GetnMapfv","","",0,N],[12,"GetnMapiv","","",0,N],[12,"GetnMinmax","","",0,N],[12,"GetnPixelMapfv","","",0,N],[12,"GetnPixelMapuiv","","",0,N],[12,"GetnPixelMapusv","","",0,N],[12,"GetnPolygonStipple","","",0,N],[12,"GetnSeparableFilter","","",0,N],[12,"GetnTexImage","","",0,N],[12,"GetnUniformdv","","",0,N],[12,"GetnUniformfv","","Fallbacks: GetnUniformfvEXT, GetnUniformfvKHR",0,N],[12,"GetnUniformiv","","Fallbacks: GetnUniformivEXT, GetnUniformivKHR",0,N],[12,"GetnUniformuiv","","Fallbacks: GetnUniformuivKHR",0,N],[12,"Hint","","",0,N],[12,"InvalidateBufferData","","",0,N],[12,"InvalidateBufferSubData","","",0,N],[12,"InvalidateFramebuffer","","",0,N],[12,"InvalidateNamedFramebufferData","","",0,N],[12,"InvalidateNamedFramebufferSubData","","",0,N],[12,"InvalidateSubFramebuffer","","",0,N],[12,"InvalidateTexImage","","",0,N],[12,"InvalidateTexSubImage","","",0,N],[12,"IsBuffer","","Fallbacks: IsBufferARB",0,N],[12,"IsEnabled","","",0,N],[12,"IsEnabledi","","Fallbacks: IsEnabledIndexedEXT, IsEnablediEXT, IsEnablediNV, IsEnablediOES",0,N],[12,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",0,N],[12,"IsProgram","","",0,N],[12,"IsProgramPipeline","","",0,N],[12,"IsQuery","","Fallbacks: IsQueryARB",0,N],[12,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",0,N],[12,"IsSampler","","",0,N],[12,"IsShader","","",0,N],[12,"IsSync","","Fallbacks: IsSyncAPPLE",0,N],[12,"IsTexture","","",0,N],[12,"IsTransformFeedback","","Fallbacks: IsTransformFeedbackNV",0,N],[12,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",0,N],[12,"LineWidth","","",0,N],[12,"LinkProgram","","Fallbacks: LinkProgramARB",0,N],[12,"LogicOp","","",0,N],[12,"MapBuffer","","Fallbacks: MapBufferARB, MapBufferOES",0,N],[12,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",0,N],[12,"MapNamedBuffer","","",0,N],[12,"MapNamedBufferRange","","",0,N],[12,"MemoryBarrier","","Fallbacks: MemoryBarrierEXT",0,N],[12,"MemoryBarrierByRegion","","",0,N],[12,"MinSampleShading","","Fallbacks: MinSampleShadingARB, MinSampleShadingOES",0,N],[12,"MultiDrawArrays","","Fallbacks: MultiDrawArraysEXT",0,N],[12,"MultiDrawArraysIndirect","","Fallbacks: MultiDrawArraysIndirectAMD, MultiDrawArraysIndirectEXT",0,N],[12,"MultiDrawElements","","Fallbacks: MultiDrawElementsEXT",0,N],[12,"MultiDrawElementsBaseVertex","","Fallbacks: MultiDrawElementsBaseVertexEXT",0,N],[12,"MultiDrawElementsIndirect","","Fallbacks: MultiDrawElementsIndirectAMD, MultiDrawElementsIndirectEXT",0,N],[12,"MultiTexCoordP1ui","","",0,N],[12,"MultiTexCoordP1uiv","","",0,N],[12,"MultiTexCoordP2ui","","",0,N],[12,"MultiTexCoordP2uiv","","",0,N],[12,"MultiTexCoordP3ui","","",0,N],[12,"MultiTexCoordP3uiv","","",0,N],[12,"MultiTexCoordP4ui","","",0,N],[12,"MultiTexCoordP4uiv","","",0,N],[12,"NamedBufferData","","",0,N],[12,"NamedBufferStorage","","Fallbacks: NamedBufferStorageEXT",0,N],[12,"NamedBufferSubData","","Fallbacks: NamedBufferSubDataEXT",0,N],[12,"NamedFramebufferDrawBuffer","","",0,N],[12,"NamedFramebufferDrawBuffers","","",0,N],[12,"NamedFramebufferParameteri","","",0,N],[12,"NamedFramebufferReadBuffer","","",0,N],[12,"NamedFramebufferRenderbuffer","","",0,N],[12,"NamedFramebufferTexture","","",0,N],[12,"NamedFramebufferTextureLayer","","",0,N],[12,"NamedRenderbufferStorage","","",0,N],[12,"NamedRenderbufferStorageMultisample","","",0,N],[12,"NormalP3ui","","",0,N],[12,"NormalP3uiv","","",0,N],[12,"ObjectLabel","","Fallbacks: ObjectLabelKHR",0,N],[12,"ObjectPtrLabel","","Fallbacks: ObjectPtrLabelKHR",0,N],[12,"PatchParameterfv","","",0,N],[12,"PatchParameteri","","Fallbacks: PatchParameteriEXT, PatchParameteriOES",0,N],[12,"PauseTransformFeedback","","Fallbacks: PauseTransformFeedbackNV",0,N],[12,"PixelStoref","","",0,N],[12,"PixelStorei","","",0,N],[12,"PointParameterf","","Fallbacks: PointParameterfARB, PointParameterfEXT, PointParameterfSGIS",0,N],[12,"PointParameterfv","","Fallbacks: PointParameterfvARB, PointParameterfvEXT, PointParameterfvSGIS",0,N],[12,"PointParameteri","","Fallbacks: PointParameteriNV",0,N],[12,"PointParameteriv","","Fallbacks: PointParameterivNV",0,N],[12,"PointSize","","",0,N],[12,"PolygonMode","","Fallbacks: PolygonModeNV",0,N],[12,"PolygonOffset","","",0,N],[12,"PopDebugGroup","","Fallbacks: PopDebugGroupKHR",0,N],[12,"PrimitiveRestartIndex","","",0,N],[12,"ProgramBinary","","Fallbacks: ProgramBinaryOES",0,N],[12,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",0,N],[12,"ProgramUniform1d","","",0,N],[12,"ProgramUniform1dv","","",0,N],[12,"ProgramUniform1f","","Fallbacks: ProgramUniform1fEXT",0,N],[12,"ProgramUniform1fv","","Fallbacks: ProgramUniform1fvEXT",0,N],[12,"ProgramUniform1i","","Fallbacks: ProgramUniform1iEXT",0,N],[12,"ProgramUniform1iv","","Fallbacks: ProgramUniform1ivEXT",0,N],[12,"ProgramUniform1ui","","Fallbacks: ProgramUniform1uiEXT",0,N],[12,"ProgramUniform1uiv","","Fallbacks: ProgramUniform1uivEXT",0,N],[12,"ProgramUniform2d","","",0,N],[12,"ProgramUniform2dv","","",0,N],[12,"ProgramUniform2f","","Fallbacks: ProgramUniform2fEXT",0,N],[12,"ProgramUniform2fv","","Fallbacks: ProgramUniform2fvEXT",0,N],[12,"ProgramUniform2i","","Fallbacks: ProgramUniform2iEXT",0,N],[12,"ProgramUniform2iv","","Fallbacks: ProgramUniform2ivEXT",0,N],[12,"ProgramUniform2ui","","Fallbacks: ProgramUniform2uiEXT",0,N],[12,"ProgramUniform2uiv","","Fallbacks: ProgramUniform2uivEXT",0,N],[12,"ProgramUniform3d","","",0,N],[12,"ProgramUniform3dv","","",0,N],[12,"ProgramUniform3f","","Fallbacks: ProgramUniform3fEXT",0,N],[12,"ProgramUniform3fv","","Fallbacks: ProgramUniform3fvEXT",0,N],[12,"ProgramUniform3i","","Fallbacks: ProgramUniform3iEXT",0,N],[12,"ProgramUniform3iv","","Fallbacks: ProgramUniform3ivEXT",0,N],[12,"ProgramUniform3ui","","Fallbacks: ProgramUniform3uiEXT",0,N],[12,"ProgramUniform3uiv","","Fallbacks: ProgramUniform3uivEXT",0,N],[12,"ProgramUniform4d","","",0,N],[12,"ProgramUniform4dv","","",0,N],[12,"ProgramUniform4f","","Fallbacks: ProgramUniform4fEXT",0,N],[12,"ProgramUniform4fv","","Fallbacks: ProgramUniform4fvEXT",0,N],[12,"ProgramUniform4i","","Fallbacks: ProgramUniform4iEXT",0,N],[12,"ProgramUniform4iv","","Fallbacks: ProgramUniform4ivEXT",0,N],[12,"ProgramUniform4ui","","Fallbacks: ProgramUniform4uiEXT",0,N],[12,"ProgramUniform4uiv","","Fallbacks: ProgramUniform4uivEXT",0,N],[12,"ProgramUniformMatrix2dv","","",0,N],[12,"ProgramUniformMatrix2fv","","Fallbacks: ProgramUniformMatrix2fvEXT",0,N],[12,"ProgramUniformMatrix2x3dv","","",0,N],[12,"ProgramUniformMatrix2x3fv","","Fallbacks: ProgramUniformMatrix2x3fvEXT",0,N],[12,"ProgramUniformMatrix2x4dv","","",0,N],[12,"ProgramUniformMatrix2x4fv","","Fallbacks: ProgramUniformMatrix2x4fvEXT",0,N],[12,"ProgramUniformMatrix3dv","","",0,N],[12,"ProgramUniformMatrix3fv","","Fallbacks: ProgramUniformMatrix3fvEXT",0,N],[12,"ProgramUniformMatrix3x2dv","","",0,N],[12,"ProgramUniformMatrix3x2fv","","Fallbacks: ProgramUniformMatrix3x2fvEXT",0,N],[12,"ProgramUniformMatrix3x4dv","","",0,N],[12,"ProgramUniformMatrix3x4fv","","Fallbacks: ProgramUniformMatrix3x4fvEXT",0,N],[12,"ProgramUniformMatrix4dv","","",0,N],[12,"ProgramUniformMatrix4fv","","Fallbacks: ProgramUniformMatrix4fvEXT",0,N],[12,"ProgramUniformMatrix4x2dv","","",0,N],[12,"ProgramUniformMatrix4x2fv","","Fallbacks: ProgramUniformMatrix4x2fvEXT",0,N],[12,"ProgramUniformMatrix4x3dv","","",0,N],[12,"ProgramUniformMatrix4x3fv","","Fallbacks: ProgramUniformMatrix4x3fvEXT",0,N],[12,"ProvokingVertex","","Fallbacks: ProvokingVertexEXT",0,N],[12,"PushDebugGroup","","Fallbacks: PushDebugGroupKHR",0,N],[12,"QueryCounter","","Fallbacks: QueryCounterEXT",0,N],[12,"ReadBuffer","","",0,N],[12,"ReadPixels","","",0,N],[12,"ReadnPixels","","Fallbacks: ReadnPixelsARB, ReadnPixelsEXT, ReadnPixelsKHR",0,N],[12,"ReleaseShaderCompiler","","",0,N],[12,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",0,N],[12,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",0,N],[12,"ResumeTransformFeedback","","Fallbacks: ResumeTransformFeedbackNV",0,N],[12,"SampleCoverage","","Fallbacks: SampleCoverageARB",0,N],[12,"SampleMaski","","",0,N],[12,"SamplerParameterIiv","","Fallbacks: SamplerParameterIivEXT, SamplerParameterIivOES",0,N],[12,"SamplerParameterIuiv","","Fallbacks: SamplerParameterIuivEXT, SamplerParameterIuivOES",0,N],[12,"SamplerParameterf","","",0,N],[12,"SamplerParameterfv","","",0,N],[12,"SamplerParameteri","","",0,N],[12,"SamplerParameteriv","","",0,N],[12,"Scissor","","",0,N],[12,"ScissorArrayv","","Fallbacks: ScissorArrayvNV, ScissorArrayvOES",0,N],[12,"ScissorIndexed","","Fallbacks: ScissorIndexedNV, ScissorIndexedOES",0,N],[12,"ScissorIndexedv","","Fallbacks: ScissorIndexedvNV, ScissorIndexedvOES",0,N],[12,"SecondaryColorP3ui","","",0,N],[12,"SecondaryColorP3uiv","","",0,N],[12,"ShaderBinary","","",0,N],[12,"ShaderSource","","Fallbacks: ShaderSourceARB",0,N],[12,"ShaderStorageBlockBinding","","",0,N],[12,"StencilFunc","","",0,N],[12,"StencilFuncSeparate","","",0,N],[12,"StencilMask","","",0,N],[12,"StencilMaskSeparate","","",0,N],[12,"StencilOp","","",0,N],[12,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",0,N],[12,"TexBuffer","","Fallbacks: TexBufferARB, TexBufferEXT, TexBufferOES",0,N],[12,"TexBufferRange","","Fallbacks: TexBufferRangeEXT, TexBufferRangeOES",0,N],[12,"TexCoordP1ui","","",0,N],[12,"TexCoordP1uiv","","",0,N],[12,"TexCoordP2ui","","",0,N],[12,"TexCoordP2uiv","","",0,N],[12,"TexCoordP3ui","","",0,N],[12,"TexCoordP3uiv","","",0,N],[12,"TexCoordP4ui","","",0,N],[12,"TexCoordP4uiv","","",0,N],[12,"TexImage1D","","",0,N],[12,"TexImage2D","","",0,N],[12,"TexImage2DMultisample","","",0,N],[12,"TexImage3D","","Fallbacks: TexImage3DEXT",0,N],[12,"TexImage3DMultisample","","",0,N],[12,"TexParameterIiv","","Fallbacks: TexParameterIivEXT, TexParameterIivOES",0,N],[12,"TexParameterIuiv","","Fallbacks: TexParameterIuivEXT, TexParameterIuivOES",0,N],[12,"TexParameterf","","",0,N],[12,"TexParameterfv","","",0,N],[12,"TexParameteri","","",0,N],[12,"TexParameteriv","","",0,N],[12,"TexStorage1D","","Fallbacks: TexStorage1DEXT",0,N],[12,"TexStorage2D","","Fallbacks: TexStorage2DEXT",0,N],[12,"TexStorage2DMultisample","","",0,N],[12,"TexStorage3D","","Fallbacks: TexStorage3DEXT",0,N],[12,"TexStorage3DMultisample","","Fallbacks: TexStorage3DMultisampleOES",0,N],[12,"TexSubImage1D","","Fallbacks: TexSubImage1DEXT",0,N],[12,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",0,N],[12,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT",0,N],[12,"TextureBarrier","","",0,N],[12,"TextureBuffer","","",0,N],[12,"TextureBufferRange","","",0,N],[12,"TextureParameterIiv","","",0,N],[12,"TextureParameterIuiv","","",0,N],[12,"TextureParameterf","","",0,N],[12,"TextureParameterfv","","",0,N],[12,"TextureParameteri","","",0,N],[12,"TextureParameteriv","","",0,N],[12,"TextureStorage1D","","",0,N],[12,"TextureStorage2D","","",0,N],[12,"TextureStorage2DMultisample","","",0,N],[12,"TextureStorage3D","","",0,N],[12,"TextureStorage3DMultisample","","",0,N],[12,"TextureSubImage1D","","",0,N],[12,"TextureSubImage2D","","",0,N],[12,"TextureSubImage3D","","",0,N],[12,"TextureView","","Fallbacks: TextureViewEXT, TextureViewOES",0,N],[12,"TransformFeedbackBufferBase","","",0,N],[12,"TransformFeedbackBufferRange","","",0,N],[12,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",0,N],[12,"Uniform1d","","",0,N],[12,"Uniform1dv","","",0,N],[12,"Uniform1f","","Fallbacks: Uniform1fARB",0,N],[12,"Uniform1fv","","Fallbacks: Uniform1fvARB",0,N],[12,"Uniform1i","","Fallbacks: Uniform1iARB",0,N],[12,"Uniform1iv","","Fallbacks: Uniform1ivARB",0,N],[12,"Uniform1ui","","Fallbacks: Uniform1uiEXT",0,N],[12,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",0,N],[12,"Uniform2d","","",0,N],[12,"Uniform2dv","","",0,N],[12,"Uniform2f","","Fallbacks: Uniform2fARB",0,N],[12,"Uniform2fv","","Fallbacks: Uniform2fvARB",0,N],[12,"Uniform2i","","Fallbacks: Uniform2iARB",0,N],[12,"Uniform2iv","","Fallbacks: Uniform2ivARB",0,N],[12,"Uniform2ui","","Fallbacks: Uniform2uiEXT",0,N],[12,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",0,N],[12,"Uniform3d","","",0,N],[12,"Uniform3dv","","",0,N],[12,"Uniform3f","","Fallbacks: Uniform3fARB",0,N],[12,"Uniform3fv","","Fallbacks: Uniform3fvARB",0,N],[12,"Uniform3i","","Fallbacks: Uniform3iARB",0,N],[12,"Uniform3iv","","Fallbacks: Uniform3ivARB",0,N],[12,"Uniform3ui","","Fallbacks: Uniform3uiEXT",0,N],[12,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",0,N],[12,"Uniform4d","","",0,N],[12,"Uniform4dv","","",0,N],[12,"Uniform4f","","Fallbacks: Uniform4fARB",0,N],[12,"Uniform4fv","","Fallbacks: Uniform4fvARB",0,N],[12,"Uniform4i","","Fallbacks: Uniform4iARB",0,N],[12,"Uniform4iv","","Fallbacks: Uniform4ivARB",0,N],[12,"Uniform4ui","","Fallbacks: Uniform4uiEXT",0,N],[12,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",0,N],[12,"UniformBlockBinding","","",0,N],[12,"UniformMatrix2dv","","",0,N],[12,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",0,N],[12,"UniformMatrix2x3dv","","",0,N],[12,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",0,N],[12,"UniformMatrix2x4dv","","",0,N],[12,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",0,N],[12,"UniformMatrix3dv","","",0,N],[12,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",0,N],[12,"UniformMatrix3x2dv","","",0,N],[12,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",0,N],[12,"UniformMatrix3x4dv","","",0,N],[12,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",0,N],[12,"UniformMatrix4dv","","",0,N],[12,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",0,N],[12,"UniformMatrix4x2dv","","",0,N],[12,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",0,N],[12,"UniformMatrix4x3dv","","",0,N],[12,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",0,N],[12,"UniformSubroutinesuiv","","",0,N],[12,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",0,N],[12,"UnmapNamedBuffer","","",0,N],[12,"UseProgram","","Fallbacks: UseProgramObjectARB",0,N],[12,"UseProgramStages","","",0,N],[12,"ValidateProgram","","Fallbacks: ValidateProgramARB",0,N],[12,"ValidateProgramPipeline","","",0,N],[12,"VertexArrayAttribBinding","","",0,N],[12,"VertexArrayAttribFormat","","",0,N],[12,"VertexArrayAttribIFormat","","",0,N],[12,"VertexArrayAttribLFormat","","",0,N],[12,"VertexArrayBindingDivisor","","",0,N],[12,"VertexArrayElementBuffer","","",0,N],[12,"VertexArrayVertexBuffer","","",0,N],[12,"VertexArrayVertexBuffers","","",0,N],[12,"VertexAttrib1d","","Fallbacks: VertexAttrib1dARB, VertexAttrib1dNV",0,N],[12,"VertexAttrib1dv","","Fallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV",0,N],[12,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",0,N],[12,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",0,N],[12,"VertexAttrib1s","","Fallbacks: VertexAttrib1sARB, VertexAttrib1sNV",0,N],[12,"VertexAttrib1sv","","Fallbacks: VertexAttrib1svARB, VertexAttrib1svNV",0,N],[12,"VertexAttrib2d","","Fallbacks: VertexAttrib2dARB, VertexAttrib2dNV",0,N],[12,"VertexAttrib2dv","","Fallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV",0,N],[12,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",0,N],[12,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",0,N],[12,"VertexAttrib2s","","Fallbacks: VertexAttrib2sARB, VertexAttrib2sNV",0,N],[12,"VertexAttrib2sv","","Fallbacks: VertexAttrib2svARB, VertexAttrib2svNV",0,N],[12,"VertexAttrib3d","","Fallbacks: VertexAttrib3dARB, VertexAttrib3dNV",0,N],[12,"VertexAttrib3dv","","Fallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV",0,N],[12,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",0,N],[12,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",0,N],[12,"VertexAttrib3s","","Fallbacks: VertexAttrib3sARB, VertexAttrib3sNV",0,N],[12,"VertexAttrib3sv","","Fallbacks: VertexAttrib3svARB, VertexAttrib3svNV",0,N],[12,"VertexAttrib4Nbv","","Fallbacks: VertexAttrib4NbvARB",0,N],[12,"VertexAttrib4Niv","","Fallbacks: VertexAttrib4NivARB",0,N],[12,"VertexAttrib4Nsv","","Fallbacks: VertexAttrib4NsvARB",0,N],[12,"VertexAttrib4Nub","","Fallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV",0,N],[12,"VertexAttrib4Nubv","","Fallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV",0,N],[12,"VertexAttrib4Nuiv","","Fallbacks: VertexAttrib4NuivARB",0,N],[12,"VertexAttrib4Nusv","","Fallbacks: VertexAttrib4NusvARB",0,N],[12,"VertexAttrib4bv","","Fallbacks: VertexAttrib4bvARB",0,N],[12,"VertexAttrib4d","","Fallbacks: VertexAttrib4dARB, VertexAttrib4dNV",0,N],[12,"VertexAttrib4dv","","Fallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV",0,N],[12,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",0,N],[12,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",0,N],[12,"VertexAttrib4iv","","Fallbacks: VertexAttrib4ivARB",0,N],[12,"VertexAttrib4s","","Fallbacks: VertexAttrib4sARB, VertexAttrib4sNV",0,N],[12,"VertexAttrib4sv","","Fallbacks: VertexAttrib4svARB, VertexAttrib4svNV",0,N],[12,"VertexAttrib4ubv","","Fallbacks: VertexAttrib4ubvARB",0,N],[12,"VertexAttrib4uiv","","Fallbacks: VertexAttrib4uivARB",0,N],[12,"VertexAttrib4usv","","Fallbacks: VertexAttrib4usvARB",0,N],[12,"VertexAttribBinding","","",0,N],[12,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",0,N],[12,"VertexAttribFormat","","",0,N],[12,"VertexAttribI1i","","Fallbacks: VertexAttribI1iEXT",0,N],[12,"VertexAttribI1iv","","Fallbacks: VertexAttribI1ivEXT",0,N],[12,"VertexAttribI1ui","","Fallbacks: VertexAttribI1uiEXT",0,N],[12,"VertexAttribI1uiv","","Fallbacks: VertexAttribI1uivEXT",0,N],[12,"VertexAttribI2i","","Fallbacks: VertexAttribI2iEXT",0,N],[12,"VertexAttribI2iv","","Fallbacks: VertexAttribI2ivEXT",0,N],[12,"VertexAttribI2ui","","Fallbacks: VertexAttribI2uiEXT",0,N],[12,"VertexAttribI2uiv","","Fallbacks: VertexAttribI2uivEXT",0,N],[12,"VertexAttribI3i","","Fallbacks: VertexAttribI3iEXT",0,N],[12,"VertexAttribI3iv","","Fallbacks: VertexAttribI3ivEXT",0,N],[12,"VertexAttribI3ui","","Fallbacks: VertexAttribI3uiEXT",0,N],[12,"VertexAttribI3uiv","","Fallbacks: VertexAttribI3uivEXT",0,N],[12,"VertexAttribI4bv","","Fallbacks: VertexAttribI4bvEXT",0,N],[12,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",0,N],[12,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",0,N],[12,"VertexAttribI4sv","","Fallbacks: VertexAttribI4svEXT",0,N],[12,"VertexAttribI4ubv","","Fallbacks: VertexAttribI4ubvEXT",0,N],[12,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",0,N],[12,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",0,N],[12,"VertexAttribI4usv","","Fallbacks: VertexAttribI4usvEXT",0,N],[12,"VertexAttribIFormat","","",0,N],[12,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",0,N],[12,"VertexAttribL1d","","Fallbacks: VertexAttribL1dEXT",0,N],[12,"VertexAttribL1dv","","Fallbacks: VertexAttribL1dvEXT",0,N],[12,"VertexAttribL2d","","Fallbacks: VertexAttribL2dEXT",0,N],[12,"VertexAttribL2dv","","Fallbacks: VertexAttribL2dvEXT",0,N],[12,"VertexAttribL3d","","Fallbacks: VertexAttribL3dEXT",0,N],[12,"VertexAttribL3dv","","Fallbacks: VertexAttribL3dvEXT",0,N],[12,"VertexAttribL4d","","Fallbacks: VertexAttribL4dEXT",0,N],[12,"VertexAttribL4dv","","Fallbacks: VertexAttribL4dvEXT",0,N],[12,"VertexAttribLFormat","","",0,N],[12,"VertexAttribLPointer","","Fallbacks: VertexAttribLPointerEXT",0,N],[12,"VertexAttribP1ui","","",0,N],[12,"VertexAttribP1uiv","","",0,N],[12,"VertexAttribP2ui","","",0,N],[12,"VertexAttribP2uiv","","",0,N],[12,"VertexAttribP3ui","","",0,N],[12,"VertexAttribP3uiv","","",0,N],[12,"VertexAttribP4ui","","",0,N],[12,"VertexAttribP4uiv","","",0,N],[12,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",0,N],[12,"VertexBindingDivisor","","",0,N],[12,"VertexP2ui","","",0,N],[12,"VertexP2uiv","","",0,N],[12,"VertexP3ui","","",0,N],[12,"VertexP3uiv","","",0,N],[12,"VertexP4ui","","",0,N],[12,"VertexP4uiv","","",0,N],[12,"Viewport","","",0,N],[12,"ViewportArrayv","","Fallbacks: ViewportArrayvNV, ViewportArrayvOES",0,N],[12,"ViewportIndexedf","","Fallbacks: ViewportIndexedfOES, ViewportIndexedfNV",0,N],[12,"ViewportIndexedfv","","Fallbacks: ViewportIndexedfvOES, ViewportIndexedfvNV",0,N],[12,"WaitSync","","Fallbacks: WaitSyncAPPLE",0,N],[0,"types","","",N,N],[4,"__GLsync","gfx_gl::types","",N,N],[4,"_cl_context","","",N,N],[4,"_cl_event","","",N,N],[6,"GLenum","","",N,N],[6,"GLboolean","","",N,N],[6,"GLbitfield","","",N,N],[6,"GLvoid","","",N,N],[6,"GLbyte","","",N,N],[6,"GLshort","","",N,N],[6,"GLint","","",N,N],[6,"GLclampx","","",N,N],[6,"GLubyte","","",N,N],[6,"GLushort","","",N,N],[6,"GLuint","","",N,N],[6,"GLsizei","","",N,N],[6,"GLfloat","","",N,N],[6,"GLclampf","","",N,N],[6,"GLdouble","","",N,N],[6,"GLclampd","","",N,N],[6,"GLeglImageOES","","",N,N],[6,"GLchar","","",N,N],[6,"GLcharARB","","",N,N],[6,"GLhandleARB","","",N,N],[6,"GLhalfARB","","",N,N],[6,"GLhalf","","",N,N],[6,"GLfixed","","",N,N],[6,"GLintptr","","",N,N],[6,"GLsizeiptr","","",N,N],[6,"GLint64","","",N,N],[6,"GLuint64","","",N,N],[6,"GLintptrARB","","",N,N],[6,"GLsizeiptrARB","","",N,N],[6,"GLint64EXT","","",N,N],[6,"GLuint64EXT","","",N,N],[6,"GLsync","","",N,N],[6,"GLDEBUGPROC","","",N,N],[6,"GLDEBUGPROCARB","","",N,N],[6,"GLDEBUGPROCKHR","","",N,N],[6,"GLDEBUGPROCAMD","","",N,N],[6,"GLhalfNV","","",N,N],[6,"GLvdpauSurfaceNV","","",N,N],[17,"ACTIVE_ATOMIC_COUNTER_BUFFERS","gfx_gl","",N,N],[17,"ACTIVE_ATTRIBUTES","","",N,N],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","","",N,N],[17,"ACTIVE_PROGRAM","","",N,N],[17,"ACTIVE_RESOURCES","","",N,N],[17,"ACTIVE_SUBROUTINES","","",N,N],[17,"ACTIVE_SUBROUTINE_MAX_LENGTH","","",N,N],[17,"ACTIVE_SUBROUTINE_UNIFORMS","","",N,N],[17,"ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS","","",N,N],[17,"ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH","","",N,N],[17,"ACTIVE_TEXTURE","","",N,N],[17,"ACTIVE_UNIFORMS","","",N,N],[17,"ACTIVE_UNIFORM_BLOCKS","","",N,N],[17,"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH","","",N,N],[17,"ACTIVE_UNIFORM_MAX_LENGTH","","",N,N],[17,"ACTIVE_VARIABLES","","",N,N],[17,"ALIASED_LINE_WIDTH_RANGE","","",N,N],[17,"ALL_BARRIER_BITS","","",N,N],[17,"ALL_SHADER_BITS","","",N,N],[17,"ALPHA","","",N,N],[17,"ALREADY_SIGNALED","","",N,N],[17,"ALWAYS","","",N,N],[17,"AND","","",N,N],[17,"AND_INVERTED","","",N,N],[17,"AND_REVERSE","","",N,N],[17,"ANY_SAMPLES_PASSED","","",N,N],[17,"ANY_SAMPLES_PASSED_CONSERVATIVE","","",N,N],[17,"ARRAY_BUFFER","","",N,N],[17,"ARRAY_BUFFER_BINDING","","",N,N],[17,"ARRAY_SIZE","","",N,N],[17,"ARRAY_STRIDE","","",N,N],[17,"ATOMIC_COUNTER_BARRIER_BIT","","",N,N],[17,"ATOMIC_COUNTER_BUFFER","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_BINDING","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_DATA_SIZE","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_INDEX","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_SIZE","","",N,N],[17,"ATOMIC_COUNTER_BUFFER_START","","",N,N],[17,"ATTACHED_SHADERS","","",N,N],[17,"AUTO_GENERATE_MIPMAP","","",N,N],[17,"BACK","","",N,N],[17,"BACK_LEFT","","",N,N],[17,"BACK_RIGHT","","",N,N],[17,"BGR","","",N,N],[17,"BGRA","","",N,N],[17,"BGRA_INTEGER","","",N,N],[17,"BGR_INTEGER","","",N,N],[17,"BLEND","","",N,N],[17,"BLEND_COLOR","","",N,N],[17,"BLEND_DST","","",N,N],[17,"BLEND_DST_ALPHA","","",N,N],[17,"BLEND_DST_RGB","","",N,N],[17,"BLEND_EQUATION","","",N,N],[17,"BLEND_EQUATION_ALPHA","","",N,N],[17,"BLEND_EQUATION_RGB","","",N,N],[17,"BLEND_SRC","","",N,N],[17,"BLEND_SRC_ALPHA","","",N,N],[17,"BLEND_SRC_RGB","","",N,N],[17,"BLOCK_INDEX","","",N,N],[17,"BLUE","","",N,N],[17,"BLUE_INTEGER","","",N,N],[17,"BOOL","","",N,N],[17,"BOOL_VEC2","","",N,N],[17,"BOOL_VEC3","","",N,N],[17,"BOOL_VEC4","","",N,N],[17,"BUFFER","","",N,N],[17,"BUFFER_ACCESS","","",N,N],[17,"BUFFER_ACCESS_FLAGS","","",N,N],[17,"BUFFER_BINDING","","",N,N],[17,"BUFFER_DATA_SIZE","","",N,N],[17,"BUFFER_IMMUTABLE_STORAGE","","",N,N],[17,"BUFFER_MAPPED","","",N,N],[17,"BUFFER_MAP_LENGTH","","",N,N],[17,"BUFFER_MAP_OFFSET","","",N,N],[17,"BUFFER_MAP_POINTER","","",N,N],[17,"BUFFER_SIZE","","",N,N],[17,"BUFFER_STORAGE_FLAGS","","",N,N],[17,"BUFFER_UPDATE_BARRIER_BIT","","",N,N],[17,"BUFFER_USAGE","","",N,N],[17,"BUFFER_VARIABLE","","",N,N],[17,"BYTE","","",N,N],[17,"CAVEAT_SUPPORT","","",N,N],[17,"CCW","","",N,N],[17,"CLAMP_READ_COLOR","","",N,N],[17,"CLAMP_TO_BORDER","","",N,N],[17,"CLAMP_TO_EDGE","","",N,N],[17,"CLEAR","","",N,N],[17,"CLEAR_BUFFER","","",N,N],[17,"CLEAR_TEXTURE","","",N,N],[17,"CLIENT_MAPPED_BUFFER_BARRIER_BIT","","",N,N],[17,"CLIENT_STORAGE_BIT","","",N,N],[17,"CLIP_DEPTH_MODE","","",N,N],[17,"CLIP_DISTANCE0","","",N,N],[17,"CLIP_DISTANCE1","","",N,N],[17,"CLIP_DISTANCE2","","",N,N],[17,"CLIP_DISTANCE3","","",N,N],[17,"CLIP_DISTANCE4","","",N,N],[17,"CLIP_DISTANCE5","","",N,N],[17,"CLIP_DISTANCE6","","",N,N],[17,"CLIP_DISTANCE7","","",N,N],[17,"CLIP_ORIGIN","","",N,N],[17,"COLOR","","",N,N],[17,"COLOR_ATTACHMENT0","","",N,N],[17,"COLOR_ATTACHMENT1","","",N,N],[17,"COLOR_ATTACHMENT10","","",N,N],[17,"COLOR_ATTACHMENT11","","",N,N],[17,"COLOR_ATTACHMENT12","","",N,N],[17,"COLOR_ATTACHMENT13","","",N,N],[17,"COLOR_ATTACHMENT14","","",N,N],[17,"COLOR_ATTACHMENT15","","",N,N],[17,"COLOR_ATTACHMENT16","","",N,N],[17,"COLOR_ATTACHMENT17","","",N,N],[17,"COLOR_ATTACHMENT18","","",N,N],[17,"COLOR_ATTACHMENT19","","",N,N],[17,"COLOR_ATTACHMENT2","","",N,N],[17,"COLOR_ATTACHMENT20","","",N,N],[17,"COLOR_ATTACHMENT21","","",N,N],[17,"COLOR_ATTACHMENT22","","",N,N],[17,"COLOR_ATTACHMENT23","","",N,N],[17,"COLOR_ATTACHMENT24","","",N,N],[17,"COLOR_ATTACHMENT25","","",N,N],[17,"COLOR_ATTACHMENT26","","",N,N],[17,"COLOR_ATTACHMENT27","","",N,N],[17,"COLOR_ATTACHMENT28","","",N,N],[17,"COLOR_ATTACHMENT29","","",N,N],[17,"COLOR_ATTACHMENT3","","",N,N],[17,"COLOR_ATTACHMENT30","","",N,N],[17,"COLOR_ATTACHMENT31","","",N,N],[17,"COLOR_ATTACHMENT4","","",N,N],[17,"COLOR_ATTACHMENT5","","",N,N],[17,"COLOR_ATTACHMENT6","","",N,N],[17,"COLOR_ATTACHMENT7","","",N,N],[17,"COLOR_ATTACHMENT8","","",N,N],[17,"COLOR_ATTACHMENT9","","",N,N],[17,"COLOR_BUFFER_BIT","","",N,N],[17,"COLOR_CLEAR_VALUE","","",N,N],[17,"COLOR_COMPONENTS","","",N,N],[17,"COLOR_ENCODING","","",N,N],[17,"COLOR_LOGIC_OP","","",N,N],[17,"COLOR_RENDERABLE","","",N,N],[17,"COLOR_WRITEMASK","","",N,N],[17,"COMMAND_BARRIER_BIT","","",N,N],[17,"COMPARE_REF_TO_TEXTURE","","",N,N],[17,"COMPATIBLE_SUBROUTINES","","",N,N],[17,"COMPILE_STATUS","","",N,N],[17,"COMPRESSED_R11_EAC","","",N,N],[17,"COMPRESSED_RED","","",N,N],[17,"COMPRESSED_RED_RGTC1","","",N,N],[17,"COMPRESSED_RG","","",N,N],[17,"COMPRESSED_RG11_EAC","","",N,N],[17,"COMPRESSED_RGB","","",N,N],[17,"COMPRESSED_RGB8_ETC2","","",N,N],[17,"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",N,N],[17,"COMPRESSED_RGBA","","",N,N],[17,"COMPRESSED_RGBA8_ETC2_EAC","","",N,N],[17,"COMPRESSED_RGBA_BPTC_UNORM","","",N,N],[17,"COMPRESSED_RGB_BPTC_SIGNED_FLOAT","","",N,N],[17,"COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT","","",N,N],[17,"COMPRESSED_RG_RGTC2","","",N,N],[17,"COMPRESSED_SIGNED_R11_EAC","","",N,N],[17,"COMPRESSED_SIGNED_RED_RGTC1","","",N,N],[17,"COMPRESSED_SIGNED_RG11_EAC","","",N,N],[17,"COMPRESSED_SIGNED_RG_RGTC2","","",N,N],[17,"COMPRESSED_SRGB","","",N,N],[17,"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","","",N,N],[17,"COMPRESSED_SRGB8_ETC2","","",N,N],[17,"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",N,N],[17,"COMPRESSED_SRGB_ALPHA","","",N,N],[17,"COMPRESSED_SRGB_ALPHA_BPTC_UNORM","","",N,N],[17,"COMPRESSED_TEXTURE_FORMATS","","",N,N],[17,"COMPUTE_SHADER","","",N,N],[17,"COMPUTE_SHADER_BIT","","",N,N],[17,"COMPUTE_SUBROUTINE","","",N,N],[17,"COMPUTE_SUBROUTINE_UNIFORM","","",N,N],[17,"COMPUTE_TEXTURE","","",N,N],[17,"COMPUTE_WORK_GROUP_SIZE","","",N,N],[17,"CONDITION_SATISFIED","","",N,N],[17,"CONSTANT_ALPHA","","",N,N],[17,"CONSTANT_COLOR","","",N,N],[17,"CONTEXT_COMPATIBILITY_PROFILE_BIT","","",N,N],[17,"CONTEXT_CORE_PROFILE_BIT","","",N,N],[17,"CONTEXT_FLAGS","","",N,N],[17,"CONTEXT_FLAG_DEBUG_BIT","","",N,N],[17,"CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT","","",N,N],[17,"CONTEXT_FLAG_ROBUST_ACCESS_BIT","","",N,N],[17,"CONTEXT_LOST","","",N,N],[17,"CONTEXT_PROFILE_MASK","","",N,N],[17,"CONTEXT_RELEASE_BEHAVIOR","","",N,N],[17,"CONTEXT_RELEASE_BEHAVIOR_FLUSH","","",N,N],[17,"COPY","","",N,N],[17,"COPY_INVERTED","","",N,N],[17,"COPY_READ_BUFFER","","",N,N],[17,"COPY_READ_BUFFER_BINDING","","",N,N],[17,"COPY_WRITE_BUFFER","","",N,N],[17,"COPY_WRITE_BUFFER_BINDING","","",N,N],[17,"CULL_FACE","","",N,N],[17,"CULL_FACE_MODE","","",N,N],[17,"CURRENT_PROGRAM","","",N,N],[17,"CURRENT_QUERY","","",N,N],[17,"CURRENT_VERTEX_ATTRIB","","",N,N],[17,"CW","","",N,N],[17,"DEBUG_CALLBACK_FUNCTION","","",N,N],[17,"DEBUG_CALLBACK_USER_PARAM","","",N,N],[17,"DEBUG_GROUP_STACK_DEPTH","","",N,N],[17,"DEBUG_LOGGED_MESSAGES","","",N,N],[17,"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH","","",N,N],[17,"DEBUG_OUTPUT","","",N,N],[17,"DEBUG_OUTPUT_SYNCHRONOUS","","",N,N],[17,"DEBUG_SEVERITY_HIGH","","",N,N],[17,"DEBUG_SEVERITY_LOW","","",N,N],[17,"DEBUG_SEVERITY_MEDIUM","","",N,N],[17,"DEBUG_SEVERITY_NOTIFICATION","","",N,N],[17,"DEBUG_SOURCE_API","","",N,N],[17,"DEBUG_SOURCE_APPLICATION","","",N,N],[17,"DEBUG_SOURCE_OTHER","","",N,N],[17,"DEBUG_SOURCE_SHADER_COMPILER","","",N,N],[17,"DEBUG_SOURCE_THIRD_PARTY","","",N,N],[17,"DEBUG_SOURCE_WINDOW_SYSTEM","","",N,N],[17,"DEBUG_TYPE_DEPRECATED_BEHAVIOR","","",N,N],[17,"DEBUG_TYPE_ERROR","","",N,N],[17,"DEBUG_TYPE_MARKER","","",N,N],[17,"DEBUG_TYPE_OTHER","","",N,N],[17,"DEBUG_TYPE_PERFORMANCE","","",N,N],[17,"DEBUG_TYPE_POP_GROUP","","",N,N],[17,"DEBUG_TYPE_PORTABILITY","","",N,N],[17,"DEBUG_TYPE_PUSH_GROUP","","",N,N],[17,"DEBUG_TYPE_UNDEFINED_BEHAVIOR","","",N,N],[17,"DECR","","",N,N],[17,"DECR_WRAP","","",N,N],[17,"DELETE_STATUS","","",N,N],[17,"DEPTH","","",N,N],[17,"DEPTH24_STENCIL8","","",N,N],[17,"DEPTH32F_STENCIL8","","",N,N],[17,"DEPTH_ATTACHMENT","","",N,N],[17,"DEPTH_BUFFER_BIT","","",N,N],[17,"DEPTH_CLAMP","","",N,N],[17,"DEPTH_CLEAR_VALUE","","",N,N],[17,"DEPTH_COMPONENT","","",N,N],[17,"DEPTH_COMPONENT16","","",N,N],[17,"DEPTH_COMPONENT24","","",N,N],[17,"DEPTH_COMPONENT32","","",N,N],[17,"DEPTH_COMPONENT32F","","",N,N],[17,"DEPTH_COMPONENTS","","",N,N],[17,"DEPTH_FUNC","","",N,N],[17,"DEPTH_RANGE","","",N,N],[17,"DEPTH_RENDERABLE","","",N,N],[17,"DEPTH_STENCIL","","",N,N],[17,"DEPTH_STENCIL_ATTACHMENT","","",N,N],[17,"DEPTH_STENCIL_TEXTURE_MODE","","",N,N],[17,"DEPTH_TEST","","",N,N],[17,"DEPTH_WRITEMASK","","",N,N],[17,"DISPATCH_INDIRECT_BUFFER","","",N,N],[17,"DISPATCH_INDIRECT_BUFFER_BINDING","","",N,N],[17,"DISPLAY_LIST","","",N,N],[17,"DITHER","","",N,N],[17,"DONT_CARE","","",N,N],[17,"DOUBLE","","",N,N],[17,"DOUBLEBUFFER","","",N,N],[17,"DOUBLE_MAT2","","",N,N],[17,"DOUBLE_MAT2x3","","",N,N],[17,"DOUBLE_MAT2x4","","",N,N],[17,"DOUBLE_MAT3","","",N,N],[17,"DOUBLE_MAT3x2","","",N,N],[17,"DOUBLE_MAT3x4","","",N,N],[17,"DOUBLE_MAT4","","",N,N],[17,"DOUBLE_MAT4x2","","",N,N],[17,"DOUBLE_MAT4x3","","",N,N],[17,"DOUBLE_VEC2","","",N,N],[17,"DOUBLE_VEC3","","",N,N],[17,"DOUBLE_VEC4","","",N,N],[17,"DRAW_BUFFER","","",N,N],[17,"DRAW_BUFFER0","","",N,N],[17,"DRAW_BUFFER1","","",N,N],[17,"DRAW_BUFFER10","","",N,N],[17,"DRAW_BUFFER11","","",N,N],[17,"DRAW_BUFFER12","","",N,N],[17,"DRAW_BUFFER13","","",N,N],[17,"DRAW_BUFFER14","","",N,N],[17,"DRAW_BUFFER15","","",N,N],[17,"DRAW_BUFFER2","","",N,N],[17,"DRAW_BUFFER3","","",N,N],[17,"DRAW_BUFFER4","","",N,N],[17,"DRAW_BUFFER5","","",N,N],[17,"DRAW_BUFFER6","","",N,N],[17,"DRAW_BUFFER7","","",N,N],[17,"DRAW_BUFFER8","","",N,N],[17,"DRAW_BUFFER9","","",N,N],[17,"DRAW_FRAMEBUFFER","","",N,N],[17,"DRAW_FRAMEBUFFER_BINDING","","",N,N],[17,"DRAW_INDIRECT_BUFFER","","",N,N],[17,"DRAW_INDIRECT_BUFFER_BINDING","","",N,N],[17,"DST_ALPHA","","",N,N],[17,"DST_COLOR","","",N,N],[17,"DYNAMIC_COPY","","",N,N],[17,"DYNAMIC_DRAW","","",N,N],[17,"DYNAMIC_READ","","",N,N],[17,"DYNAMIC_STORAGE_BIT","","",N,N],[17,"ELEMENT_ARRAY_BARRIER_BIT","","",N,N],[17,"ELEMENT_ARRAY_BUFFER","","",N,N],[17,"ELEMENT_ARRAY_BUFFER_BINDING","","",N,N],[17,"EQUAL","","",N,N],[17,"EQUIV","","",N,N],[17,"EXTENSIONS","","",N,N],[17,"FALSE","","",N,N],[17,"FASTEST","","",N,N],[17,"FILL","","",N,N],[17,"FILTER","","",N,N],[17,"FIRST_VERTEX_CONVENTION","","",N,N],[17,"FIXED","","",N,N],[17,"FIXED_ONLY","","",N,N],[17,"FLOAT","","",N,N],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","","",N,N],[17,"FLOAT_MAT2","","",N,N],[17,"FLOAT_MAT2x3","","",N,N],[17,"FLOAT_MAT2x4","","",N,N],[17,"FLOAT_MAT3","","",N,N],[17,"FLOAT_MAT3x2","","",N,N],[17,"FLOAT_MAT3x4","","",N,N],[17,"FLOAT_MAT4","","",N,N],[17,"FLOAT_MAT4x2","","",N,N],[17,"FLOAT_MAT4x3","","",N,N],[17,"FLOAT_VEC2","","",N,N],[17,"FLOAT_VEC3","","",N,N],[17,"FLOAT_VEC4","","",N,N],[17,"FRACTIONAL_EVEN","","",N,N],[17,"FRACTIONAL_ODD","","",N,N],[17,"FRAGMENT_INTERPOLATION_OFFSET_BITS","","",N,N],[17,"FRAGMENT_SHADER","","",N,N],[17,"FRAGMENT_SHADER_BIT","","",N,N],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","","",N,N],[17,"FRAGMENT_SUBROUTINE","","",N,N],[17,"FRAGMENT_SUBROUTINE_UNIFORM","","",N,N],[17,"FRAGMENT_TEXTURE","","",N,N],[17,"FRAMEBUFFER","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_LAYERED","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","","",N,N],[17,"FRAMEBUFFER_BARRIER_BIT","","",N,N],[17,"FRAMEBUFFER_BINDING","","",N,N],[17,"FRAMEBUFFER_BLEND","","",N,N],[17,"FRAMEBUFFER_COMPLETE","","",N,N],[17,"FRAMEBUFFER_DEFAULT","","",N,N],[17,"FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS","","",N,N],[17,"FRAMEBUFFER_DEFAULT_HEIGHT","","",N,N],[17,"FRAMEBUFFER_DEFAULT_LAYERS","","",N,N],[17,"FRAMEBUFFER_DEFAULT_SAMPLES","","",N,N],[17,"FRAMEBUFFER_DEFAULT_WIDTH","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_READ_BUFFER","","",N,N],[17,"FRAMEBUFFER_RENDERABLE","","",N,N],[17,"FRAMEBUFFER_RENDERABLE_LAYERED","","",N,N],[17,"FRAMEBUFFER_SRGB","","",N,N],[17,"FRAMEBUFFER_UNDEFINED","","",N,N],[17,"FRAMEBUFFER_UNSUPPORTED","","",N,N],[17,"FRONT","","",N,N],[17,"FRONT_AND_BACK","","",N,N],[17,"FRONT_FACE","","",N,N],[17,"FRONT_LEFT","","",N,N],[17,"FRONT_RIGHT","","",N,N],[17,"FULL_SUPPORT","","",N,N],[17,"FUNC_ADD","","",N,N],[17,"FUNC_REVERSE_SUBTRACT","","",N,N],[17,"FUNC_SUBTRACT","","",N,N],[17,"GEOMETRY_INPUT_TYPE","","",N,N],[17,"GEOMETRY_OUTPUT_TYPE","","",N,N],[17,"GEOMETRY_SHADER","","",N,N],[17,"GEOMETRY_SHADER_BIT","","",N,N],[17,"GEOMETRY_SHADER_INVOCATIONS","","",N,N],[17,"GEOMETRY_SUBROUTINE","","",N,N],[17,"GEOMETRY_SUBROUTINE_UNIFORM","","",N,N],[17,"GEOMETRY_TEXTURE","","",N,N],[17,"GEOMETRY_VERTICES_OUT","","",N,N],[17,"GEQUAL","","",N,N],[17,"GET_TEXTURE_IMAGE_FORMAT","","",N,N],[17,"GET_TEXTURE_IMAGE_TYPE","","",N,N],[17,"GREATER","","",N,N],[17,"GREEN","","",N,N],[17,"GREEN_INTEGER","","",N,N],[17,"GUILTY_CONTEXT_RESET","","",N,N],[17,"HALF_FLOAT","","",N,N],[17,"HIGH_FLOAT","","",N,N],[17,"HIGH_INT","","",N,N],[17,"IMAGE_1D","","",N,N],[17,"IMAGE_1D_ARRAY","","",N,N],[17,"IMAGE_2D","","",N,N],[17,"IMAGE_2D_ARRAY","","",N,N],[17,"IMAGE_2D_MULTISAMPLE","","",N,N],[17,"IMAGE_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"IMAGE_2D_RECT","","",N,N],[17,"IMAGE_3D","","",N,N],[17,"IMAGE_BINDING_ACCESS","","",N,N],[17,"IMAGE_BINDING_FORMAT","","",N,N],[17,"IMAGE_BINDING_LAYER","","",N,N],[17,"IMAGE_BINDING_LAYERED","","",N,N],[17,"IMAGE_BINDING_LEVEL","","",N,N],[17,"IMAGE_BINDING_NAME","","",N,N],[17,"IMAGE_BUFFER","","",N,N],[17,"IMAGE_CLASS_10_10_10_2","","",N,N],[17,"IMAGE_CLASS_11_11_10","","",N,N],[17,"IMAGE_CLASS_1_X_16","","",N,N],[17,"IMAGE_CLASS_1_X_32","","",N,N],[17,"IMAGE_CLASS_1_X_8","","",N,N],[17,"IMAGE_CLASS_2_X_16","","",N,N],[17,"IMAGE_CLASS_2_X_32","","",N,N],[17,"IMAGE_CLASS_2_X_8","","",N,N],[17,"IMAGE_CLASS_4_X_16","","",N,N],[17,"IMAGE_CLASS_4_X_32","","",N,N],[17,"IMAGE_CLASS_4_X_8","","",N,N],[17,"IMAGE_COMPATIBILITY_CLASS","","",N,N],[17,"IMAGE_CUBE","","",N,N],[17,"IMAGE_CUBE_MAP_ARRAY","","",N,N],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_CLASS","","",N,N],[17,"IMAGE_FORMAT_COMPATIBILITY_BY_SIZE","","",N,N],[17,"IMAGE_FORMAT_COMPATIBILITY_TYPE","","",N,N],[17,"IMAGE_PIXEL_FORMAT","","",N,N],[17,"IMAGE_PIXEL_TYPE","","",N,N],[17,"IMAGE_TEXEL_SIZE","","",N,N],[17,"IMPLEMENTATION_COLOR_READ_FORMAT","","",N,N],[17,"IMPLEMENTATION_COLOR_READ_TYPE","","",N,N],[17,"INCR","","",N,N],[17,"INCR_WRAP","","",N,N],[17,"INDEX","","",N,N],[17,"INFO_LOG_LENGTH","","",N,N],[17,"INNOCENT_CONTEXT_RESET","","",N,N],[17,"INT","","",N,N],[17,"INTERLEAVED_ATTRIBS","","",N,N],[17,"INTERNALFORMAT_ALPHA_SIZE","","",N,N],[17,"INTERNALFORMAT_ALPHA_TYPE","","",N,N],[17,"INTERNALFORMAT_BLUE_SIZE","","",N,N],[17,"INTERNALFORMAT_BLUE_TYPE","","",N,N],[17,"INTERNALFORMAT_DEPTH_SIZE","","",N,N],[17,"INTERNALFORMAT_DEPTH_TYPE","","",N,N],[17,"INTERNALFORMAT_GREEN_SIZE","","",N,N],[17,"INTERNALFORMAT_GREEN_TYPE","","",N,N],[17,"INTERNALFORMAT_PREFERRED","","",N,N],[17,"INTERNALFORMAT_RED_SIZE","","",N,N],[17,"INTERNALFORMAT_RED_TYPE","","",N,N],[17,"INTERNALFORMAT_SHARED_SIZE","","",N,N],[17,"INTERNALFORMAT_STENCIL_SIZE","","",N,N],[17,"INTERNALFORMAT_STENCIL_TYPE","","",N,N],[17,"INTERNALFORMAT_SUPPORTED","","",N,N],[17,"INT_2_10_10_10_REV","","",N,N],[17,"INT_IMAGE_1D","","",N,N],[17,"INT_IMAGE_1D_ARRAY","","",N,N],[17,"INT_IMAGE_2D","","",N,N],[17,"INT_IMAGE_2D_ARRAY","","",N,N],[17,"INT_IMAGE_2D_MULTISAMPLE","","",N,N],[17,"INT_IMAGE_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"INT_IMAGE_2D_RECT","","",N,N],[17,"INT_IMAGE_3D","","",N,N],[17,"INT_IMAGE_BUFFER","","",N,N],[17,"INT_IMAGE_CUBE","","",N,N],[17,"INT_IMAGE_CUBE_MAP_ARRAY","","",N,N],[17,"INT_SAMPLER_1D","","",N,N],[17,"INT_SAMPLER_1D_ARRAY","","",N,N],[17,"INT_SAMPLER_2D","","",N,N],[17,"INT_SAMPLER_2D_ARRAY","","",N,N],[17,"INT_SAMPLER_2D_MULTISAMPLE","","",N,N],[17,"INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"INT_SAMPLER_2D_RECT","","",N,N],[17,"INT_SAMPLER_3D","","",N,N],[17,"INT_SAMPLER_BUFFER","","",N,N],[17,"INT_SAMPLER_CUBE","","",N,N],[17,"INT_SAMPLER_CUBE_MAP_ARRAY","","",N,N],[17,"INT_VEC2","","",N,N],[17,"INT_VEC3","","",N,N],[17,"INT_VEC4","","",N,N],[17,"INVALID_ENUM","","",N,N],[17,"INVALID_FRAMEBUFFER_OPERATION","","",N,N],[17,"INVALID_INDEX","","",N,N],[17,"INVALID_OPERATION","","",N,N],[17,"INVALID_VALUE","","",N,N],[17,"INVERT","","",N,N],[17,"ISOLINES","","",N,N],[17,"IS_PER_PATCH","","",N,N],[17,"IS_ROW_MAJOR","","",N,N],[17,"KEEP","","",N,N],[17,"LAST_VERTEX_CONVENTION","","",N,N],[17,"LAYER_PROVOKING_VERTEX","","",N,N],[17,"LEFT","","",N,N],[17,"LEQUAL","","",N,N],[17,"LESS","","",N,N],[17,"LINE","","",N,N],[17,"LINEAR","","",N,N],[17,"LINEAR_MIPMAP_LINEAR","","",N,N],[17,"LINEAR_MIPMAP_NEAREST","","",N,N],[17,"LINES","","",N,N],[17,"LINES_ADJACENCY","","",N,N],[17,"LINE_LOOP","","",N,N],[17,"LINE_SMOOTH","","",N,N],[17,"LINE_SMOOTH_HINT","","",N,N],[17,"LINE_STRIP","","",N,N],[17,"LINE_STRIP_ADJACENCY","","",N,N],[17,"LINE_WIDTH","","",N,N],[17,"LINE_WIDTH_GRANULARITY","","",N,N],[17,"LINE_WIDTH_RANGE","","",N,N],[17,"LINK_STATUS","","",N,N],[17,"LOCATION","","",N,N],[17,"LOCATION_COMPONENT","","",N,N],[17,"LOCATION_INDEX","","",N,N],[17,"LOGIC_OP_MODE","","",N,N],[17,"LOSE_CONTEXT_ON_RESET","","",N,N],[17,"LOWER_LEFT","","",N,N],[17,"LOW_FLOAT","","",N,N],[17,"LOW_INT","","",N,N],[17,"MAJOR_VERSION","","",N,N],[17,"MANUAL_GENERATE_MIPMAP","","",N,N],[17,"MAP_COHERENT_BIT","","",N,N],[17,"MAP_FLUSH_EXPLICIT_BIT","","",N,N],[17,"MAP_INVALIDATE_BUFFER_BIT","","",N,N],[17,"MAP_INVALIDATE_RANGE_BIT","","",N,N],[17,"MAP_PERSISTENT_BIT","","",N,N],[17,"MAP_READ_BIT","","",N,N],[17,"MAP_UNSYNCHRONIZED_BIT","","",N,N],[17,"MAP_WRITE_BIT","","",N,N],[17,"MATRIX_STRIDE","","",N,N],[17,"MAX","","",N,N],[17,"MAX_3D_TEXTURE_SIZE","","",N,N],[17,"MAX_ARRAY_TEXTURE_LAYERS","","",N,N],[17,"MAX_ATOMIC_COUNTER_BUFFER_BINDINGS","","",N,N],[17,"MAX_ATOMIC_COUNTER_BUFFER_SIZE","","",N,N],[17,"MAX_CLIP_DISTANCES","","",N,N],[17,"MAX_COLOR_ATTACHMENTS","","",N,N],[17,"MAX_COLOR_TEXTURE_SAMPLES","","",N,N],[17,"MAX_COMBINED_ATOMIC_COUNTERS","","",N,N],[17,"MAX_COMBINED_ATOMIC_COUNTER_BUFFERS","","",N,N],[17,"MAX_COMBINED_CLIP_AND_CULL_DISTANCES","","",N,N],[17,"MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMBINED_DIMENSIONS","","",N,N],[17,"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMBINED_IMAGE_UNIFORMS","","",N,N],[17,"MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS","","",N,N],[17,"MAX_COMBINED_SHADER_OUTPUT_RESOURCES","","",N,N],[17,"MAX_COMBINED_SHADER_STORAGE_BLOCKS","","",N,N],[17,"MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_COMBINED_UNIFORM_BLOCKS","","",N,N],[17,"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMPUTE_ATOMIC_COUNTERS","","",N,N],[17,"MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS","","",N,N],[17,"MAX_COMPUTE_IMAGE_UNIFORMS","","",N,N],[17,"MAX_COMPUTE_SHADER_STORAGE_BLOCKS","","",N,N],[17,"MAX_COMPUTE_SHARED_MEMORY_SIZE","","",N,N],[17,"MAX_COMPUTE_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_COMPUTE_UNIFORM_BLOCKS","","",N,N],[17,"MAX_COMPUTE_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMPUTE_WORK_GROUP_COUNT","","",N,N],[17,"MAX_COMPUTE_WORK_GROUP_INVOCATIONS","","",N,N],[17,"MAX_COMPUTE_WORK_GROUP_SIZE","","",N,N],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","","",N,N],[17,"MAX_CULL_DISTANCES","","",N,N],[17,"MAX_DEBUG_GROUP_STACK_DEPTH","","",N,N],[17,"MAX_DEBUG_LOGGED_MESSAGES","","",N,N],[17,"MAX_DEBUG_MESSAGE_LENGTH","","",N,N],[17,"MAX_DEPTH","","",N,N],[17,"MAX_DEPTH_TEXTURE_SAMPLES","","",N,N],[17,"MAX_DRAW_BUFFERS","","",N,N],[17,"MAX_DUAL_SOURCE_DRAW_BUFFERS","","",N,N],[17,"MAX_ELEMENTS_INDICES","","",N,N],[17,"MAX_ELEMENTS_VERTICES","","",N,N],[17,"MAX_ELEMENT_INDEX","","",N,N],[17,"MAX_FRAGMENT_ATOMIC_COUNTERS","","",N,N],[17,"MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS","","",N,N],[17,"MAX_FRAGMENT_IMAGE_UNIFORMS","","",N,N],[17,"MAX_FRAGMENT_INPUT_COMPONENTS","","",N,N],[17,"MAX_FRAGMENT_INTERPOLATION_OFFSET","","",N,N],[17,"MAX_FRAGMENT_SHADER_STORAGE_BLOCKS","","",N,N],[17,"MAX_FRAGMENT_UNIFORM_BLOCKS","","",N,N],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_FRAGMENT_UNIFORM_VECTORS","","",N,N],[17,"MAX_FRAMEBUFFER_HEIGHT","","",N,N],[17,"MAX_FRAMEBUFFER_LAYERS","","",N,N],[17,"MAX_FRAMEBUFFER_SAMPLES","","",N,N],[17,"MAX_FRAMEBUFFER_WIDTH","","",N,N],[17,"MAX_GEOMETRY_ATOMIC_COUNTERS","","",N,N],[17,"MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS","","",N,N],[17,"MAX_GEOMETRY_IMAGE_UNIFORMS","","",N,N],[17,"MAX_GEOMETRY_INPUT_COMPONENTS","","",N,N],[17,"MAX_GEOMETRY_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_GEOMETRY_OUTPUT_VERTICES","","",N,N],[17,"MAX_GEOMETRY_SHADER_INVOCATIONS","","",N,N],[17,"MAX_GEOMETRY_SHADER_STORAGE_BLOCKS","","",N,N],[17,"MAX_GEOMETRY_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_GEOMETRY_UNIFORM_BLOCKS","","",N,N],[17,"MAX_GEOMETRY_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_HEIGHT","","",N,N],[17,"MAX_IMAGE_SAMPLES","","",N,N],[17,"MAX_IMAGE_UNITS","","",N,N],[17,"MAX_INTEGER_SAMPLES","","",N,N],[17,"MAX_LABEL_LENGTH","","",N,N],[17,"MAX_LAYERS","","",N,N],[17,"MAX_NAME_LENGTH","","",N,N],[17,"MAX_NUM_ACTIVE_VARIABLES","","",N,N],[17,"MAX_NUM_COMPATIBLE_SUBROUTINES","","",N,N],[17,"MAX_PATCH_VERTICES","","",N,N],[17,"MAX_PROGRAM_TEXEL_OFFSET","","",N,N],[17,"MAX_PROGRAM_TEXTURE_GATHER_OFFSET","","",N,N],[17,"MAX_RECTANGLE_TEXTURE_SIZE","","",N,N],[17,"MAX_RENDERBUFFER_SIZE","","",N,N],[17,"MAX_SAMPLES","","",N,N],[17,"MAX_SAMPLE_MASK_WORDS","","",N,N],[17,"MAX_SERVER_WAIT_TIMEOUT","","",N,N],[17,"MAX_SHADER_STORAGE_BLOCK_SIZE","","",N,N],[17,"MAX_SHADER_STORAGE_BUFFER_BINDINGS","","",N,N],[17,"MAX_SUBROUTINES","","",N,N],[17,"MAX_SUBROUTINE_UNIFORM_LOCATIONS","","",N,N],[17,"MAX_TESS_CONTROL_ATOMIC_COUNTERS","","",N,N],[17,"MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS","","",N,N],[17,"MAX_TESS_CONTROL_IMAGE_UNIFORMS","","",N,N],[17,"MAX_TESS_CONTROL_INPUT_COMPONENTS","","",N,N],[17,"MAX_TESS_CONTROL_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS","","",N,N],[17,"MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_TESS_CONTROL_UNIFORM_BLOCKS","","",N,N],[17,"MAX_TESS_CONTROL_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_TESS_EVALUATION_ATOMIC_COUNTERS","","",N,N],[17,"MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS","","",N,N],[17,"MAX_TESS_EVALUATION_IMAGE_UNIFORMS","","",N,N],[17,"MAX_TESS_EVALUATION_INPUT_COMPONENTS","","",N,N],[17,"MAX_TESS_EVALUATION_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS","","",N,N],[17,"MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_TESS_EVALUATION_UNIFORM_BLOCKS","","",N,N],[17,"MAX_TESS_EVALUATION_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_TESS_GEN_LEVEL","","",N,N],[17,"MAX_TESS_PATCH_COMPONENTS","","",N,N],[17,"MAX_TEXTURE_BUFFER_SIZE","","",N,N],[17,"MAX_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_TEXTURE_LOD_BIAS","","",N,N],[17,"MAX_TEXTURE_MAX_ANISOTROPY_EXT","","",N,N],[17,"MAX_TEXTURE_SIZE","","",N,N],[17,"MAX_TRANSFORM_FEEDBACK_BUFFERS","","",N,N],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","","",N,N],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","","",N,N],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","","",N,N],[17,"MAX_UNIFORM_BLOCK_SIZE","","",N,N],[17,"MAX_UNIFORM_BUFFER_BINDINGS","","",N,N],[17,"MAX_UNIFORM_LOCATIONS","","",N,N],[17,"MAX_VARYING_COMPONENTS","","",N,N],[17,"MAX_VARYING_FLOATS","","",N,N],[17,"MAX_VARYING_VECTORS","","",N,N],[17,"MAX_VERTEX_ATOMIC_COUNTERS","","",N,N],[17,"MAX_VERTEX_ATOMIC_COUNTER_BUFFERS","","",N,N],[17,"MAX_VERTEX_ATTRIBS","","",N,N],[17,"MAX_VERTEX_ATTRIB_BINDINGS","","",N,N],[17,"MAX_VERTEX_ATTRIB_RELATIVE_OFFSET","","",N,N],[17,"MAX_VERTEX_ATTRIB_STRIDE","","",N,N],[17,"MAX_VERTEX_IMAGE_UNIFORMS","","",N,N],[17,"MAX_VERTEX_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_VERTEX_SHADER_STORAGE_BLOCKS","","",N,N],[17,"MAX_VERTEX_STREAMS","","",N,N],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_VERTEX_UNIFORM_BLOCKS","","",N,N],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_VERTEX_UNIFORM_VECTORS","","",N,N],[17,"MAX_VIEWPORTS","","",N,N],[17,"MAX_VIEWPORT_DIMS","","",N,N],[17,"MAX_WIDTH","","",N,N],[17,"MEDIUM_FLOAT","","",N,N],[17,"MEDIUM_INT","","",N,N],[17,"MIN","","",N,N],[17,"MINOR_VERSION","","",N,N],[17,"MIN_FRAGMENT_INTERPOLATION_OFFSET","","",N,N],[17,"MIN_MAP_BUFFER_ALIGNMENT","","",N,N],[17,"MIN_PROGRAM_TEXEL_OFFSET","","",N,N],[17,"MIN_PROGRAM_TEXTURE_GATHER_OFFSET","","",N,N],[17,"MIN_SAMPLE_SHADING_VALUE","","",N,N],[17,"MIPMAP","","",N,N],[17,"MIRRORED_REPEAT","","",N,N],[17,"MIRROR_CLAMP_TO_EDGE","","",N,N],[17,"MULTISAMPLE","","",N,N],[17,"NAME_LENGTH","","",N,N],[17,"NAND","","",N,N],[17,"NEAREST","","",N,N],[17,"NEAREST_MIPMAP_LINEAR","","",N,N],[17,"NEAREST_MIPMAP_NEAREST","","",N,N],[17,"NEGATIVE_ONE_TO_ONE","","",N,N],[17,"NEVER","","",N,N],[17,"NICEST","","",N,N],[17,"NONE","","",N,N],[17,"NOOP","","",N,N],[17,"NOR","","",N,N],[17,"NOTEQUAL","","",N,N],[17,"NO_ERROR","","",N,N],[17,"NO_RESET_NOTIFICATION","","",N,N],[17,"NUM_ACTIVE_VARIABLES","","",N,N],[17,"NUM_COMPATIBLE_SUBROUTINES","","",N,N],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","","",N,N],[17,"NUM_EXTENSIONS","","",N,N],[17,"NUM_PROGRAM_BINARY_FORMATS","","",N,N],[17,"NUM_SAMPLE_COUNTS","","",N,N],[17,"NUM_SHADER_BINARY_FORMATS","","",N,N],[17,"NUM_SHADING_LANGUAGE_VERSIONS","","",N,N],[17,"OBJECT_TYPE","","",N,N],[17,"OFFSET","","",N,N],[17,"ONE","","",N,N],[17,"ONE_MINUS_CONSTANT_ALPHA","","",N,N],[17,"ONE_MINUS_CONSTANT_COLOR","","",N,N],[17,"ONE_MINUS_DST_ALPHA","","",N,N],[17,"ONE_MINUS_DST_COLOR","","",N,N],[17,"ONE_MINUS_SRC1_ALPHA","","",N,N],[17,"ONE_MINUS_SRC1_COLOR","","",N,N],[17,"ONE_MINUS_SRC_ALPHA","","",N,N],[17,"ONE_MINUS_SRC_COLOR","","",N,N],[17,"OR","","",N,N],[17,"OR_INVERTED","","",N,N],[17,"OR_REVERSE","","",N,N],[17,"OUT_OF_MEMORY","","",N,N],[17,"PACK_ALIGNMENT","","",N,N],[17,"PACK_COMPRESSED_BLOCK_DEPTH","","",N,N],[17,"PACK_COMPRESSED_BLOCK_HEIGHT","","",N,N],[17,"PACK_COMPRESSED_BLOCK_SIZE","","",N,N],[17,"PACK_COMPRESSED_BLOCK_WIDTH","","",N,N],[17,"PACK_IMAGE_HEIGHT","","",N,N],[17,"PACK_LSB_FIRST","","",N,N],[17,"PACK_ROW_LENGTH","","",N,N],[17,"PACK_SKIP_IMAGES","","",N,N],[17,"PACK_SKIP_PIXELS","","",N,N],[17,"PACK_SKIP_ROWS","","",N,N],[17,"PACK_SWAP_BYTES","","",N,N],[17,"PATCHES","","",N,N],[17,"PATCH_DEFAULT_INNER_LEVEL","","",N,N],[17,"PATCH_DEFAULT_OUTER_LEVEL","","",N,N],[17,"PATCH_VERTICES","","",N,N],[17,"PIXEL_BUFFER_BARRIER_BIT","","",N,N],[17,"PIXEL_PACK_BUFFER","","",N,N],[17,"PIXEL_PACK_BUFFER_BINDING","","",N,N],[17,"PIXEL_UNPACK_BUFFER","","",N,N],[17,"PIXEL_UNPACK_BUFFER_BINDING","","",N,N],[17,"POINT","","",N,N],[17,"POINTS","","",N,N],[17,"POINT_FADE_THRESHOLD_SIZE","","",N,N],[17,"POINT_SIZE","","",N,N],[17,"POINT_SIZE_GRANULARITY","","",N,N],[17,"POINT_SIZE_RANGE","","",N,N],[17,"POINT_SPRITE_COORD_ORIGIN","","",N,N],[17,"POLYGON_MODE","","",N,N],[17,"POLYGON_OFFSET_FACTOR","","",N,N],[17,"POLYGON_OFFSET_FILL","","",N,N],[17,"POLYGON_OFFSET_LINE","","",N,N],[17,"POLYGON_OFFSET_POINT","","",N,N],[17,"POLYGON_OFFSET_UNITS","","",N,N],[17,"POLYGON_SMOOTH","","",N,N],[17,"POLYGON_SMOOTH_HINT","","",N,N],[17,"PRIMITIVES_GENERATED","","",N,N],[17,"PRIMITIVE_RESTART","","",N,N],[17,"PRIMITIVE_RESTART_FIXED_INDEX","","",N,N],[17,"PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED","","",N,N],[17,"PRIMITIVE_RESTART_INDEX","","",N,N],[17,"PROGRAM","","",N,N],[17,"PROGRAM_BINARY_FORMATS","","",N,N],[17,"PROGRAM_BINARY_LENGTH","","",N,N],[17,"PROGRAM_BINARY_RETRIEVABLE_HINT","","",N,N],[17,"PROGRAM_INPUT","","",N,N],[17,"PROGRAM_OUTPUT","","",N,N],[17,"PROGRAM_PIPELINE","","",N,N],[17,"PROGRAM_PIPELINE_BINDING","","",N,N],[17,"PROGRAM_POINT_SIZE","","",N,N],[17,"PROGRAM_SEPARABLE","","",N,N],[17,"PROVOKING_VERTEX","","",N,N],[17,"PROXY_TEXTURE_1D","","",N,N],[17,"PROXY_TEXTURE_1D_ARRAY","","",N,N],[17,"PROXY_TEXTURE_2D","","",N,N],[17,"PROXY_TEXTURE_2D_ARRAY","","",N,N],[17,"PROXY_TEXTURE_2D_MULTISAMPLE","","",N,N],[17,"PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"PROXY_TEXTURE_3D","","",N,N],[17,"PROXY_TEXTURE_CUBE_MAP","","",N,N],[17,"PROXY_TEXTURE_CUBE_MAP_ARRAY","","",N,N],[17,"PROXY_TEXTURE_RECTANGLE","","",N,N],[17,"QUADS","","",N,N],[17,"QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION","","",N,N],[17,"QUERY","","",N,N],[17,"QUERY_BUFFER","","",N,N],[17,"QUERY_BUFFER_BARRIER_BIT","","",N,N],[17,"QUERY_BUFFER_BINDING","","",N,N],[17,"QUERY_BY_REGION_NO_WAIT","","",N,N],[17,"QUERY_BY_REGION_NO_WAIT_INVERTED","","",N,N],[17,"QUERY_BY_REGION_WAIT","","",N,N],[17,"QUERY_BY_REGION_WAIT_INVERTED","","",N,N],[17,"QUERY_COUNTER_BITS","","",N,N],[17,"QUERY_NO_WAIT","","",N,N],[17,"QUERY_NO_WAIT_INVERTED","","",N,N],[17,"QUERY_RESULT","","",N,N],[17,"QUERY_RESULT_AVAILABLE","","",N,N],[17,"QUERY_RESULT_NO_WAIT","","",N,N],[17,"QUERY_TARGET","","",N,N],[17,"QUERY_WAIT","","",N,N],[17,"QUERY_WAIT_INVERTED","","",N,N],[17,"R11F_G11F_B10F","","",N,N],[17,"R16","","",N,N],[17,"R16F","","",N,N],[17,"R16I","","",N,N],[17,"R16UI","","",N,N],[17,"R16_SNORM","","",N,N],[17,"R32F","","",N,N],[17,"R32I","","",N,N],[17,"R32UI","","",N,N],[17,"R3_G3_B2","","",N,N],[17,"R8","","",N,N],[17,"R8I","","",N,N],[17,"R8UI","","",N,N],[17,"R8_SNORM","","",N,N],[17,"RASTERIZER_DISCARD","","",N,N],[17,"READ_BUFFER","","",N,N],[17,"READ_FRAMEBUFFER","","",N,N],[17,"READ_FRAMEBUFFER_BINDING","","",N,N],[17,"READ_ONLY","","",N,N],[17,"READ_PIXELS","","",N,N],[17,"READ_PIXELS_FORMAT","","",N,N],[17,"READ_PIXELS_TYPE","","",N,N],[17,"READ_WRITE","","",N,N],[17,"RED","","",N,N],[17,"RED_INTEGER","","",N,N],[17,"REFERENCED_BY_COMPUTE_SHADER","","",N,N],[17,"REFERENCED_BY_FRAGMENT_SHADER","","",N,N],[17,"REFERENCED_BY_GEOMETRY_SHADER","","",N,N],[17,"REFERENCED_BY_TESS_CONTROL_SHADER","","",N,N],[17,"REFERENCED_BY_TESS_EVALUATION_SHADER","","",N,N],[17,"REFERENCED_BY_VERTEX_SHADER","","",N,N],[17,"RENDERBUFFER","","",N,N],[17,"RENDERBUFFER_ALPHA_SIZE","","",N,N],[17,"RENDERBUFFER_BINDING","","",N,N],[17,"RENDERBUFFER_BLUE_SIZE","","",N,N],[17,"RENDERBUFFER_DEPTH_SIZE","","",N,N],[17,"RENDERBUFFER_GREEN_SIZE","","",N,N],[17,"RENDERBUFFER_HEIGHT","","",N,N],[17,"RENDERBUFFER_INTERNAL_FORMAT","","",N,N],[17,"RENDERBUFFER_RED_SIZE","","",N,N],[17,"RENDERBUFFER_SAMPLES","","",N,N],[17,"RENDERBUFFER_STENCIL_SIZE","","",N,N],[17,"RENDERBUFFER_WIDTH","","",N,N],[17,"RENDERER","","",N,N],[17,"REPEAT","","",N,N],[17,"REPLACE","","",N,N],[17,"RESET_NOTIFICATION_STRATEGY","","",N,N],[17,"RG","","",N,N],[17,"RG16","","",N,N],[17,"RG16F","","",N,N],[17,"RG16I","","",N,N],[17,"RG16UI","","",N,N],[17,"RG16_SNORM","","",N,N],[17,"RG32F","","",N,N],[17,"RG32I","","",N,N],[17,"RG32UI","","",N,N],[17,"RG8","","",N,N],[17,"RG8I","","",N,N],[17,"RG8UI","","",N,N],[17,"RG8_SNORM","","",N,N],[17,"RGB","","",N,N],[17,"RGB10","","",N,N],[17,"RGB10_A2","","",N,N],[17,"RGB10_A2UI","","",N,N],[17,"RGB12","","",N,N],[17,"RGB16","","",N,N],[17,"RGB16F","","",N,N],[17,"RGB16I","","",N,N],[17,"RGB16UI","","",N,N],[17,"RGB16_SNORM","","",N,N],[17,"RGB32F","","",N,N],[17,"RGB32I","","",N,N],[17,"RGB32UI","","",N,N],[17,"RGB4","","",N,N],[17,"RGB5","","",N,N],[17,"RGB565","","",N,N],[17,"RGB5_A1","","",N,N],[17,"RGB8","","",N,N],[17,"RGB8I","","",N,N],[17,"RGB8UI","","",N,N],[17,"RGB8_SNORM","","",N,N],[17,"RGB9_E5","","",N,N],[17,"RGBA","","",N,N],[17,"RGBA12","","",N,N],[17,"RGBA16","","",N,N],[17,"RGBA16F","","",N,N],[17,"RGBA16I","","",N,N],[17,"RGBA16UI","","",N,N],[17,"RGBA16_SNORM","","",N,N],[17,"RGBA2","","",N,N],[17,"RGBA32F","","",N,N],[17,"RGBA32I","","",N,N],[17,"RGBA32UI","","",N,N],[17,"RGBA4","","",N,N],[17,"RGBA8","","",N,N],[17,"RGBA8I","","",N,N],[17,"RGBA8UI","","",N,N],[17,"RGBA8_SNORM","","",N,N],[17,"RGBA_INTEGER","","",N,N],[17,"RGB_INTEGER","","",N,N],[17,"RG_INTEGER","","",N,N],[17,"RIGHT","","",N,N],[17,"SAMPLER","","",N,N],[17,"SAMPLER_1D","","",N,N],[17,"SAMPLER_1D_ARRAY","","",N,N],[17,"SAMPLER_1D_ARRAY_SHADOW","","",N,N],[17,"SAMPLER_1D_SHADOW","","",N,N],[17,"SAMPLER_2D","","",N,N],[17,"SAMPLER_2D_ARRAY","","",N,N],[17,"SAMPLER_2D_ARRAY_SHADOW","","",N,N],[17,"SAMPLER_2D_MULTISAMPLE","","",N,N],[17,"SAMPLER_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"SAMPLER_2D_RECT","","",N,N],[17,"SAMPLER_2D_RECT_SHADOW","","",N,N],[17,"SAMPLER_2D_SHADOW","","",N,N],[17,"SAMPLER_3D","","",N,N],[17,"SAMPLER_BINDING","","",N,N],[17,"SAMPLER_BUFFER","","",N,N],[17,"SAMPLER_CUBE","","",N,N],[17,"SAMPLER_CUBE_MAP_ARRAY","","",N,N],[17,"SAMPLER_CUBE_MAP_ARRAY_SHADOW","","",N,N],[17,"SAMPLER_CUBE_SHADOW","","",N,N],[17,"SAMPLES","","",N,N],[17,"SAMPLES_PASSED","","",N,N],[17,"SAMPLE_ALPHA_TO_COVERAGE","","",N,N],[17,"SAMPLE_ALPHA_TO_ONE","","",N,N],[17,"SAMPLE_BUFFERS","","",N,N],[17,"SAMPLE_COVERAGE","","",N,N],[17,"SAMPLE_COVERAGE_INVERT","","",N,N],[17,"SAMPLE_COVERAGE_VALUE","","",N,N],[17,"SAMPLE_MASK","","",N,N],[17,"SAMPLE_MASK_VALUE","","",N,N],[17,"SAMPLE_POSITION","","",N,N],[17,"SAMPLE_SHADING","","",N,N],[17,"SCISSOR_BOX","","",N,N],[17,"SCISSOR_TEST","","",N,N],[17,"SEPARATE_ATTRIBS","","",N,N],[17,"SET","","",N,N],[17,"SHADER","","",N,N],[17,"SHADER_BINARY_FORMATS","","",N,N],[17,"SHADER_COMPILER","","",N,N],[17,"SHADER_IMAGE_ACCESS_BARRIER_BIT","","",N,N],[17,"SHADER_IMAGE_ATOMIC","","",N,N],[17,"SHADER_IMAGE_LOAD","","",N,N],[17,"SHADER_IMAGE_STORE","","",N,N],[17,"SHADER_SOURCE_LENGTH","","",N,N],[17,"SHADER_STORAGE_BARRIER_BIT","","",N,N],[17,"SHADER_STORAGE_BLOCK","","",N,N],[17,"SHADER_STORAGE_BUFFER","","",N,N],[17,"SHADER_STORAGE_BUFFER_BINDING","","",N,N],[17,"SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT","","",N,N],[17,"SHADER_STORAGE_BUFFER_SIZE","","",N,N],[17,"SHADER_STORAGE_BUFFER_START","","",N,N],[17,"SHADER_TYPE","","",N,N],[17,"SHADING_LANGUAGE_VERSION","","",N,N],[17,"SHORT","","",N,N],[17,"SIGNALED","","",N,N],[17,"SIGNED_NORMALIZED","","",N,N],[17,"SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST","","",N,N],[17,"SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE","","",N,N],[17,"SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST","","",N,N],[17,"SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE","","",N,N],[17,"SMOOTH_LINE_WIDTH_GRANULARITY","","",N,N],[17,"SMOOTH_LINE_WIDTH_RANGE","","",N,N],[17,"SMOOTH_POINT_SIZE_GRANULARITY","","",N,N],[17,"SMOOTH_POINT_SIZE_RANGE","","",N,N],[17,"SRC1_ALPHA","","",N,N],[17,"SRC1_COLOR","","",N,N],[17,"SRC_ALPHA","","",N,N],[17,"SRC_ALPHA_SATURATE","","",N,N],[17,"SRC_COLOR","","",N,N],[17,"SRGB","","",N,N],[17,"SRGB8","","",N,N],[17,"SRGB8_ALPHA8","","",N,N],[17,"SRGB_ALPHA","","",N,N],[17,"SRGB_READ","","",N,N],[17,"SRGB_WRITE","","",N,N],[17,"STACK_OVERFLOW","","",N,N],[17,"STACK_UNDERFLOW","","",N,N],[17,"STATIC_COPY","","",N,N],[17,"STATIC_DRAW","","",N,N],[17,"STATIC_READ","","",N,N],[17,"STENCIL","","",N,N],[17,"STENCIL_ATTACHMENT","","",N,N],[17,"STENCIL_BACK_FAIL","","",N,N],[17,"STENCIL_BACK_FUNC","","",N,N],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","","",N,N],[17,"STENCIL_BACK_PASS_DEPTH_PASS","","",N,N],[17,"STENCIL_BACK_REF","","",N,N],[17,"STENCIL_BACK_VALUE_MASK","","",N,N],[17,"STENCIL_BACK_WRITEMASK","","",N,N],[17,"STENCIL_BUFFER_BIT","","",N,N],[17,"STENCIL_CLEAR_VALUE","","",N,N],[17,"STENCIL_COMPONENTS","","",N,N],[17,"STENCIL_FAIL","","",N,N],[17,"STENCIL_FUNC","","",N,N],[17,"STENCIL_INDEX","","",N,N],[17,"STENCIL_INDEX1","","",N,N],[17,"STENCIL_INDEX16","","",N,N],[17,"STENCIL_INDEX4","","",N,N],[17,"STENCIL_INDEX8","","",N,N],[17,"STENCIL_PASS_DEPTH_FAIL","","",N,N],[17,"STENCIL_PASS_DEPTH_PASS","","",N,N],[17,"STENCIL_REF","","",N,N],[17,"STENCIL_RENDERABLE","","",N,N],[17,"STENCIL_TEST","","",N,N],[17,"STENCIL_VALUE_MASK","","",N,N],[17,"STENCIL_WRITEMASK","","",N,N],[17,"STEREO","","",N,N],[17,"STREAM_COPY","","",N,N],[17,"STREAM_DRAW","","",N,N],[17,"STREAM_READ","","",N,N],[17,"SUBPIXEL_BITS","","",N,N],[17,"SYNC_CONDITION","","",N,N],[17,"SYNC_FENCE","","",N,N],[17,"SYNC_FLAGS","","",N,N],[17,"SYNC_FLUSH_COMMANDS_BIT","","",N,N],[17,"SYNC_GPU_COMMANDS_COMPLETE","","",N,N],[17,"SYNC_STATUS","","",N,N],[17,"TESS_CONTROL_OUTPUT_VERTICES","","",N,N],[17,"TESS_CONTROL_SHADER","","",N,N],[17,"TESS_CONTROL_SHADER_BIT","","",N,N],[17,"TESS_CONTROL_SUBROUTINE","","",N,N],[17,"TESS_CONTROL_SUBROUTINE_UNIFORM","","",N,N],[17,"TESS_CONTROL_TEXTURE","","",N,N],[17,"TESS_EVALUATION_SHADER","","",N,N],[17,"TESS_EVALUATION_SHADER_BIT","","",N,N],[17,"TESS_EVALUATION_SUBROUTINE","","",N,N],[17,"TESS_EVALUATION_SUBROUTINE_UNIFORM","","",N,N],[17,"TESS_EVALUATION_TEXTURE","","",N,N],[17,"TESS_GEN_MODE","","",N,N],[17,"TESS_GEN_POINT_MODE","","",N,N],[17,"TESS_GEN_SPACING","","",N,N],[17,"TESS_GEN_VERTEX_ORDER","","",N,N],[17,"TEXTURE","","",N,N],[17,"TEXTURE0","","",N,N],[17,"TEXTURE1","","",N,N],[17,"TEXTURE10","","",N,N],[17,"TEXTURE11","","",N,N],[17,"TEXTURE12","","",N,N],[17,"TEXTURE13","","",N,N],[17,"TEXTURE14","","",N,N],[17,"TEXTURE15","","",N,N],[17,"TEXTURE16","","",N,N],[17,"TEXTURE17","","",N,N],[17,"TEXTURE18","","",N,N],[17,"TEXTURE19","","",N,N],[17,"TEXTURE2","","",N,N],[17,"TEXTURE20","","",N,N],[17,"TEXTURE21","","",N,N],[17,"TEXTURE22","","",N,N],[17,"TEXTURE23","","",N,N],[17,"TEXTURE24","","",N,N],[17,"TEXTURE25","","",N,N],[17,"TEXTURE26","","",N,N],[17,"TEXTURE27","","",N,N],[17,"TEXTURE28","","",N,N],[17,"TEXTURE29","","",N,N],[17,"TEXTURE3","","",N,N],[17,"TEXTURE30","","",N,N],[17,"TEXTURE31","","",N,N],[17,"TEXTURE4","","",N,N],[17,"TEXTURE5","","",N,N],[17,"TEXTURE6","","",N,N],[17,"TEXTURE7","","",N,N],[17,"TEXTURE8","","",N,N],[17,"TEXTURE9","","",N,N],[17,"TEXTURE_1D","","",N,N],[17,"TEXTURE_1D_ARRAY","","",N,N],[17,"TEXTURE_2D","","",N,N],[17,"TEXTURE_2D_ARRAY","","",N,N],[17,"TEXTURE_2D_MULTISAMPLE","","",N,N],[17,"TEXTURE_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"TEXTURE_3D","","",N,N],[17,"TEXTURE_ALPHA_SIZE","","",N,N],[17,"TEXTURE_ALPHA_TYPE","","",N,N],[17,"TEXTURE_BASE_LEVEL","","",N,N],[17,"TEXTURE_BINDING_1D","","",N,N],[17,"TEXTURE_BINDING_1D_ARRAY","","",N,N],[17,"TEXTURE_BINDING_2D","","",N,N],[17,"TEXTURE_BINDING_2D_ARRAY","","",N,N],[17,"TEXTURE_BINDING_2D_MULTISAMPLE","","",N,N],[17,"TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"TEXTURE_BINDING_3D","","",N,N],[17,"TEXTURE_BINDING_BUFFER","","",N,N],[17,"TEXTURE_BINDING_CUBE_MAP","","",N,N],[17,"TEXTURE_BINDING_CUBE_MAP_ARRAY","","",N,N],[17,"TEXTURE_BINDING_RECTANGLE","","",N,N],[17,"TEXTURE_BLUE_SIZE","","",N,N],[17,"TEXTURE_BLUE_TYPE","","",N,N],[17,"TEXTURE_BORDER_COLOR","","",N,N],[17,"TEXTURE_BUFFER","","",N,N],[17,"TEXTURE_BUFFER_BINDING","","",N,N],[17,"TEXTURE_BUFFER_DATA_STORE_BINDING","","",N,N],[17,"TEXTURE_BUFFER_OFFSET","","",N,N],[17,"TEXTURE_BUFFER_OFFSET_ALIGNMENT","","",N,N],[17,"TEXTURE_BUFFER_SIZE","","",N,N],[17,"TEXTURE_COMPARE_FUNC","","",N,N],[17,"TEXTURE_COMPARE_MODE","","",N,N],[17,"TEXTURE_COMPRESSED","","",N,N],[17,"TEXTURE_COMPRESSED_BLOCK_HEIGHT","","",N,N],[17,"TEXTURE_COMPRESSED_BLOCK_SIZE","","",N,N],[17,"TEXTURE_COMPRESSED_BLOCK_WIDTH","","",N,N],[17,"TEXTURE_COMPRESSED_IMAGE_SIZE","","",N,N],[17,"TEXTURE_COMPRESSION_HINT","","",N,N],[17,"TEXTURE_CUBE_MAP","","",N,N],[17,"TEXTURE_CUBE_MAP_ARRAY","","",N,N],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","",N,N],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","",N,N],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","",N,N],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","",N,N],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","",N,N],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","",N,N],[17,"TEXTURE_CUBE_MAP_SEAMLESS","","",N,N],[17,"TEXTURE_DEPTH","","",N,N],[17,"TEXTURE_DEPTH_SIZE","","",N,N],[17,"TEXTURE_DEPTH_TYPE","","",N,N],[17,"TEXTURE_FETCH_BARRIER_BIT","","",N,N],[17,"TEXTURE_FIXED_SAMPLE_LOCATIONS","","",N,N],[17,"TEXTURE_GATHER","","",N,N],[17,"TEXTURE_GATHER_SHADOW","","",N,N],[17,"TEXTURE_GREEN_SIZE","","",N,N],[17,"TEXTURE_GREEN_TYPE","","",N,N],[17,"TEXTURE_HEIGHT","","",N,N],[17,"TEXTURE_IMAGE_FORMAT","","",N,N],[17,"TEXTURE_IMAGE_TYPE","","",N,N],[17,"TEXTURE_IMMUTABLE_FORMAT","","",N,N],[17,"TEXTURE_IMMUTABLE_LEVELS","","",N,N],[17,"TEXTURE_INTERNAL_FORMAT","","",N,N],[17,"TEXTURE_LOD_BIAS","","",N,N],[17,"TEXTURE_MAG_FILTER","","",N,N],[17,"TEXTURE_MAX_ANISOTROPY_EXT","","",N,N],[17,"TEXTURE_MAX_LEVEL","","",N,N],[17,"TEXTURE_MAX_LOD","","",N,N],[17,"TEXTURE_MIN_FILTER","","",N,N],[17,"TEXTURE_MIN_LOD","","",N,N],[17,"TEXTURE_RECTANGLE","","",N,N],[17,"TEXTURE_RED_SIZE","","",N,N],[17,"TEXTURE_RED_TYPE","","",N,N],[17,"TEXTURE_SAMPLES","","",N,N],[17,"TEXTURE_SHADOW","","",N,N],[17,"TEXTURE_SHARED_SIZE","","",N,N],[17,"TEXTURE_STENCIL_SIZE","","",N,N],[17,"TEXTURE_SWIZZLE_A","","",N,N],[17,"TEXTURE_SWIZZLE_B","","",N,N],[17,"TEXTURE_SWIZZLE_G","","",N,N],[17,"TEXTURE_SWIZZLE_R","","",N,N],[17,"TEXTURE_SWIZZLE_RGBA","","",N,N],[17,"TEXTURE_TARGET","","",N,N],[17,"TEXTURE_UPDATE_BARRIER_BIT","","",N,N],[17,"TEXTURE_VIEW","","",N,N],[17,"TEXTURE_VIEW_MIN_LAYER","","",N,N],[17,"TEXTURE_VIEW_MIN_LEVEL","","",N,N],[17,"TEXTURE_VIEW_NUM_LAYERS","","",N,N],[17,"TEXTURE_VIEW_NUM_LEVELS","","",N,N],[17,"TEXTURE_WIDTH","","",N,N],[17,"TEXTURE_WRAP_R","","",N,N],[17,"TEXTURE_WRAP_S","","",N,N],[17,"TEXTURE_WRAP_T","","",N,N],[17,"TIMEOUT_EXPIRED","","",N,N],[17,"TIMEOUT_IGNORED","","",N,N],[17,"TIMESTAMP","","",N,N],[17,"TIME_ELAPSED","","",N,N],[17,"TOP_LEVEL_ARRAY_SIZE","","",N,N],[17,"TOP_LEVEL_ARRAY_STRIDE","","",N,N],[17,"TRANSFORM_FEEDBACK","","",N,N],[17,"TRANSFORM_FEEDBACK_ACTIVE","","",N,N],[17,"TRANSFORM_FEEDBACK_BARRIER_BIT","","",N,N],[17,"TRANSFORM_FEEDBACK_BINDING","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_ACTIVE","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_INDEX","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_PAUSED","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_START","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_STRIDE","","",N,N],[17,"TRANSFORM_FEEDBACK_PAUSED","","",N,N],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","","",N,N],[17,"TRANSFORM_FEEDBACK_VARYING","","",N,N],[17,"TRANSFORM_FEEDBACK_VARYINGS","","",N,N],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","","",N,N],[17,"TRIANGLES","","",N,N],[17,"TRIANGLES_ADJACENCY","","",N,N],[17,"TRIANGLE_FAN","","",N,N],[17,"TRIANGLE_STRIP","","",N,N],[17,"TRIANGLE_STRIP_ADJACENCY","","",N,N],[17,"TRUE","","",N,N],[17,"TYPE","","",N,N],[17,"UNDEFINED_VERTEX","","",N,N],[17,"UNIFORM","","",N,N],[17,"UNIFORM_ARRAY_STRIDE","","",N,N],[17,"UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX","","",N,N],[17,"UNIFORM_BARRIER_BIT","","",N,N],[17,"UNIFORM_BLOCK","","",N,N],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORMS","","",N,N],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","","",N,N],[17,"UNIFORM_BLOCK_BINDING","","",N,N],[17,"UNIFORM_BLOCK_DATA_SIZE","","",N,N],[17,"UNIFORM_BLOCK_INDEX","","",N,N],[17,"UNIFORM_BLOCK_NAME_LENGTH","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","","",N,N],[17,"UNIFORM_BUFFER","","",N,N],[17,"UNIFORM_BUFFER_BINDING","","",N,N],[17,"UNIFORM_BUFFER_OFFSET_ALIGNMENT","","",N,N],[17,"UNIFORM_BUFFER_SIZE","","",N,N],[17,"UNIFORM_BUFFER_START","","",N,N],[17,"UNIFORM_IS_ROW_MAJOR","","",N,N],[17,"UNIFORM_MATRIX_STRIDE","","",N,N],[17,"UNIFORM_NAME_LENGTH","","",N,N],[17,"UNIFORM_OFFSET","","",N,N],[17,"UNIFORM_SIZE","","",N,N],[17,"UNIFORM_TYPE","","",N,N],[17,"UNKNOWN_CONTEXT_RESET","","",N,N],[17,"UNPACK_ALIGNMENT","","",N,N],[17,"UNPACK_COMPRESSED_BLOCK_DEPTH","","",N,N],[17,"UNPACK_COMPRESSED_BLOCK_HEIGHT","","",N,N],[17,"UNPACK_COMPRESSED_BLOCK_SIZE","","",N,N],[17,"UNPACK_COMPRESSED_BLOCK_WIDTH","","",N,N],[17,"UNPACK_IMAGE_HEIGHT","","",N,N],[17,"UNPACK_LSB_FIRST","","",N,N],[17,"UNPACK_ROW_LENGTH","","",N,N],[17,"UNPACK_SKIP_IMAGES","","",N,N],[17,"UNPACK_SKIP_PIXELS","","",N,N],[17,"UNPACK_SKIP_ROWS","","",N,N],[17,"UNPACK_SWAP_BYTES","","",N,N],[17,"UNSIGNALED","","",N,N],[17,"UNSIGNED_BYTE","","",N,N],[17,"UNSIGNED_BYTE_2_3_3_REV","","",N,N],[17,"UNSIGNED_BYTE_3_3_2","","",N,N],[17,"UNSIGNED_INT","","",N,N],[17,"UNSIGNED_INT_10F_11F_11F_REV","","",N,N],[17,"UNSIGNED_INT_10_10_10_2","","",N,N],[17,"UNSIGNED_INT_24_8","","",N,N],[17,"UNSIGNED_INT_2_10_10_10_REV","","",N,N],[17,"UNSIGNED_INT_5_9_9_9_REV","","",N,N],[17,"UNSIGNED_INT_8_8_8_8","","",N,N],[17,"UNSIGNED_INT_8_8_8_8_REV","","",N,N],[17,"UNSIGNED_INT_ATOMIC_COUNTER","","",N,N],[17,"UNSIGNED_INT_IMAGE_1D","","",N,N],[17,"UNSIGNED_INT_IMAGE_1D_ARRAY","","",N,N],[17,"UNSIGNED_INT_IMAGE_2D","","",N,N],[17,"UNSIGNED_INT_IMAGE_2D_ARRAY","","",N,N],[17,"UNSIGNED_INT_IMAGE_2D_MULTISAMPLE","","",N,N],[17,"UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"UNSIGNED_INT_IMAGE_2D_RECT","","",N,N],[17,"UNSIGNED_INT_IMAGE_3D","","",N,N],[17,"UNSIGNED_INT_IMAGE_BUFFER","","",N,N],[17,"UNSIGNED_INT_IMAGE_CUBE","","",N,N],[17,"UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY","","",N,N],[17,"UNSIGNED_INT_SAMPLER_1D","","",N,N],[17,"UNSIGNED_INT_SAMPLER_1D_ARRAY","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D_RECT","","",N,N],[17,"UNSIGNED_INT_SAMPLER_3D","","",N,N],[17,"UNSIGNED_INT_SAMPLER_BUFFER","","",N,N],[17,"UNSIGNED_INT_SAMPLER_CUBE","","",N,N],[17,"UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY","","",N,N],[17,"UNSIGNED_INT_VEC2","","",N,N],[17,"UNSIGNED_INT_VEC3","","",N,N],[17,"UNSIGNED_INT_VEC4","","",N,N],[17,"UNSIGNED_NORMALIZED","","",N,N],[17,"UNSIGNED_SHORT","","",N,N],[17,"UNSIGNED_SHORT_1_5_5_5_REV","","",N,N],[17,"UNSIGNED_SHORT_4_4_4_4","","",N,N],[17,"UNSIGNED_SHORT_4_4_4_4_REV","","",N,N],[17,"UNSIGNED_SHORT_5_5_5_1","","",N,N],[17,"UNSIGNED_SHORT_5_6_5","","",N,N],[17,"UNSIGNED_SHORT_5_6_5_REV","","",N,N],[17,"UPPER_LEFT","","",N,N],[17,"VALIDATE_STATUS","","",N,N],[17,"VENDOR","","",N,N],[17,"VERSION","","",N,N],[17,"VERTEX_ARRAY","","",N,N],[17,"VERTEX_ARRAY_BINDING","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_BARRIER_BIT","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_DIVISOR","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_LONG","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_POINTER","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_SIZE","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_TYPE","","",N,N],[17,"VERTEX_ATTRIB_BINDING","","",N,N],[17,"VERTEX_ATTRIB_RELATIVE_OFFSET","","",N,N],[17,"VERTEX_BINDING_BUFFER","","",N,N],[17,"VERTEX_BINDING_DIVISOR","","",N,N],[17,"VERTEX_BINDING_OFFSET","","",N,N],[17,"VERTEX_BINDING_STRIDE","","",N,N],[17,"VERTEX_PROGRAM_POINT_SIZE","","",N,N],[17,"VERTEX_SHADER","","",N,N],[17,"VERTEX_SHADER_BIT","","",N,N],[17,"VERTEX_SUBROUTINE","","",N,N],[17,"VERTEX_SUBROUTINE_UNIFORM","","",N,N],[17,"VERTEX_TEXTURE","","",N,N],[17,"VIEWPORT","","",N,N],[17,"VIEWPORT_BOUNDS_RANGE","","",N,N],[17,"VIEWPORT_INDEX_PROVOKING_VERTEX","","",N,N],[17,"VIEWPORT_SUBPIXEL_BITS","","",N,N],[17,"VIEW_CLASS_128_BITS","","",N,N],[17,"VIEW_CLASS_16_BITS","","",N,N],[17,"VIEW_CLASS_24_BITS","","",N,N],[17,"VIEW_CLASS_32_BITS","","",N,N],[17,"VIEW_CLASS_48_BITS","","",N,N],[17,"VIEW_CLASS_64_BITS","","",N,N],[17,"VIEW_CLASS_8_BITS","","",N,N],[17,"VIEW_CLASS_96_BITS","","",N,N],[17,"VIEW_CLASS_BPTC_FLOAT","","",N,N],[17,"VIEW_CLASS_BPTC_UNORM","","",N,N],[17,"VIEW_CLASS_RGTC1_RED","","",N,N],[17,"VIEW_CLASS_RGTC2_RG","","",N,N],[17,"VIEW_CLASS_S3TC_DXT1_RGB","","",N,N],[17,"VIEW_CLASS_S3TC_DXT1_RGBA","","",N,N],[17,"VIEW_CLASS_S3TC_DXT3_RGBA","","",N,N],[17,"VIEW_CLASS_S3TC_DXT5_RGBA","","",N,N],[17,"VIEW_COMPATIBILITY_CLASS","","",N,N],[17,"WAIT_FAILED","","",N,N],[17,"WRITE_ONLY","","",N,N],[17,"XOR","","",N,N],[17,"ZERO","","",N,N],[17,"ZERO_TO_ONE","","",N,N],[11,"clone","","",1,[[["self"]],["fnptr"]]],[11,"is_loaded","","Returns `true` if the function has been successfully loaded.",1,[[["self"]],["bool"]]],[11,"clone","","",0,[[["self"]],["gl"]]],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",0,[[["f"]],["gl"]]],[11,"ActiveShaderProgram","","",0,N],[11,"ActiveTexture","","",0,N],[11,"AttachShader","","",0,N],[11,"BeginConditionalRender","","",0,N],[11,"BeginQuery","","",0,N],[11,"BeginQueryIndexed","","",0,N],[11,"BeginTransformFeedback","","",0,N],[11,"BindAttribLocation","","",0,N],[11,"BindBuffer","","",0,N],[11,"BindBufferBase","","",0,N],[11,"BindBufferRange","","",0,N],[11,"BindBuffersBase","","",0,N],[11,"BindBuffersRange","","",0,N],[11,"BindFragDataLocation","","",0,N],[11,"BindFragDataLocationIndexed","","",0,N],[11,"BindFramebuffer","","",0,N],[11,"BindImageTexture","","",0,N],[11,"BindImageTextures","","",0,N],[11,"BindProgramPipeline","","",0,N],[11,"BindRenderbuffer","","",0,N],[11,"BindSampler","","",0,N],[11,"BindSamplers","","",0,N],[11,"BindTexture","","",0,N],[11,"BindTextureUnit","","",0,N],[11,"BindTextures","","",0,N],[11,"BindTransformFeedback","","",0,N],[11,"BindVertexArray","","",0,N],[11,"BindVertexBuffer","","",0,N],[11,"BindVertexBuffers","","",0,N],[11,"BlendColor","","",0,N],[11,"BlendEquation","","",0,N],[11,"BlendEquationSeparate","","",0,N],[11,"BlendEquationSeparatei","","",0,N],[11,"BlendEquationSeparateiARB","","",0,N],[11,"BlendEquationi","","",0,N],[11,"BlendEquationiARB","","",0,N],[11,"BlendFunc","","",0,N],[11,"BlendFuncSeparate","","",0,N],[11,"BlendFuncSeparatei","","",0,N],[11,"BlendFuncSeparateiARB","","",0,N],[11,"BlendFunci","","",0,N],[11,"BlendFunciARB","","",0,N],[11,"BlitFramebuffer","","",0,N],[11,"BlitNamedFramebuffer","","",0,N],[11,"BufferData","","",0,N],[11,"BufferStorage","","",0,N],[11,"BufferSubData","","",0,N],[11,"CheckFramebufferStatus","","",0,[[["self"],["glenum"]],["glenum"]]],[11,"CheckNamedFramebufferStatus","","",0,[[["self"],["gluint"],["glenum"]],["glenum"]]],[11,"ClampColor","","",0,N],[11,"Clear","","",0,N],[11,"ClearBufferData","","",0,N],[11,"ClearBufferSubData","","",0,N],[11,"ClearBufferfi","","",0,N],[11,"ClearBufferfv","","",0,N],[11,"ClearBufferiv","","",0,N],[11,"ClearBufferuiv","","",0,N],[11,"ClearColor","","",0,N],[11,"ClearDepth","","",0,N],[11,"ClearDepthf","","",0,N],[11,"ClearNamedBufferData","","",0,N],[11,"ClearNamedBufferSubData","","",0,N],[11,"ClearNamedFramebufferfi","","",0,N],[11,"ClearNamedFramebufferfv","","",0,N],[11,"ClearNamedFramebufferiv","","",0,N],[11,"ClearNamedFramebufferuiv","","",0,N],[11,"ClearStencil","","",0,N],[11,"ClearTexImage","","",0,N],[11,"ClearTexSubImage","","",0,N],[11,"ClientWaitSync","","",0,[[["self"],["glsync"],["glbitfield"],["gluint64"]],["glenum"]]],[11,"ClipControl","","",0,N],[11,"ColorMask","","",0,N],[11,"ColorMaski","","",0,N],[11,"ColorP3ui","","",0,N],[11,"ColorP3uiv","","",0,N],[11,"ColorP4ui","","",0,N],[11,"ColorP4uiv","","",0,N],[11,"CompileShader","","",0,N],[11,"CompressedTexImage1D","","",0,N],[11,"CompressedTexImage2D","","",0,N],[11,"CompressedTexImage3D","","",0,N],[11,"CompressedTexSubImage1D","","",0,N],[11,"CompressedTexSubImage2D","","",0,N],[11,"CompressedTexSubImage3D","","",0,N],[11,"CompressedTextureSubImage1D","","",0,N],[11,"CompressedTextureSubImage2D","","",0,N],[11,"CompressedTextureSubImage3D","","",0,N],[11,"CopyBufferSubData","","",0,N],[11,"CopyImageSubData","","",0,N],[11,"CopyNamedBufferSubData","","",0,N],[11,"CopyTexImage1D","","",0,N],[11,"CopyTexImage2D","","",0,N],[11,"CopyTexSubImage1D","","",0,N],[11,"CopyTexSubImage2D","","",0,N],[11,"CopyTexSubImage3D","","",0,N],[11,"CopyTextureSubImage1D","","",0,N],[11,"CopyTextureSubImage2D","","",0,N],[11,"CopyTextureSubImage3D","","",0,N],[11,"CreateBuffers","","",0,N],[11,"CreateFramebuffers","","",0,N],[11,"CreateProgram","","",0,[[["self"]],["gluint"]]],[11,"CreateProgramPipelines","","",0,N],[11,"CreateQueries","","",0,N],[11,"CreateRenderbuffers","","",0,N],[11,"CreateSamplers","","",0,N],[11,"CreateShader","","",0,[[["self"],["glenum"]],["gluint"]]],[11,"CreateShaderProgramv","","",0,N],[11,"CreateTextures","","",0,N],[11,"CreateTransformFeedbacks","","",0,N],[11,"CreateVertexArrays","","",0,N],[11,"CullFace","","",0,N],[11,"DebugMessageCallback","","",0,N],[11,"DebugMessageControl","","",0,N],[11,"DebugMessageInsert","","",0,N],[11,"DeleteBuffers","","",0,N],[11,"DeleteFramebuffers","","",0,N],[11,"DeleteProgram","","",0,N],[11,"DeleteProgramPipelines","","",0,N],[11,"DeleteQueries","","",0,N],[11,"DeleteRenderbuffers","","",0,N],[11,"DeleteSamplers","","",0,N],[11,"DeleteShader","","",0,N],[11,"DeleteSync","","",0,N],[11,"DeleteTextures","","",0,N],[11,"DeleteTransformFeedbacks","","",0,N],[11,"DeleteVertexArrays","","",0,N],[11,"DepthFunc","","",0,N],[11,"DepthMask","","",0,N],[11,"DepthRange","","",0,N],[11,"DepthRangeArrayv","","",0,N],[11,"DepthRangeIndexed","","",0,N],[11,"DepthRangef","","",0,N],[11,"DetachShader","","",0,N],[11,"Disable","","",0,N],[11,"DisableVertexArrayAttrib","","",0,N],[11,"DisableVertexAttribArray","","",0,N],[11,"Disablei","","",0,N],[11,"DispatchCompute","","",0,N],[11,"DispatchComputeIndirect","","",0,N],[11,"DrawArrays","","",0,N],[11,"DrawArraysIndirect","","",0,N],[11,"DrawArraysInstanced","","",0,N],[11,"DrawArraysInstancedBaseInstance","","",0,N],[11,"DrawBuffer","","",0,N],[11,"DrawBuffers","","",0,N],[11,"DrawElements","","",0,N],[11,"DrawElementsBaseVertex","","",0,N],[11,"DrawElementsIndirect","","",0,N],[11,"DrawElementsInstanced","","",0,N],[11,"DrawElementsInstancedBaseInstance","","",0,N],[11,"DrawElementsInstancedBaseVertex","","",0,N],[11,"DrawElementsInstancedBaseVertexBaseInstance","","",0,N],[11,"DrawRangeElements","","",0,N],[11,"DrawRangeElementsBaseVertex","","",0,N],[11,"DrawTransformFeedback","","",0,N],[11,"DrawTransformFeedbackInstanced","","",0,N],[11,"DrawTransformFeedbackStream","","",0,N],[11,"DrawTransformFeedbackStreamInstanced","","",0,N],[11,"Enable","","",0,N],[11,"EnableVertexArrayAttrib","","",0,N],[11,"EnableVertexAttribArray","","",0,N],[11,"Enablei","","",0,N],[11,"EndConditionalRender","","",0,N],[11,"EndQuery","","",0,N],[11,"EndQueryIndexed","","",0,N],[11,"EndTransformFeedback","","",0,N],[11,"FenceSync","","",0,[[["self"],["glenum"],["glbitfield"]],["glsync"]]],[11,"Finish","","",0,N],[11,"Flush","","",0,N],[11,"FlushMappedBufferRange","","",0,N],[11,"FlushMappedNamedBufferRange","","",0,N],[11,"FramebufferParameteri","","",0,N],[11,"FramebufferRenderbuffer","","",0,N],[11,"FramebufferTexture","","",0,N],[11,"FramebufferTexture1D","","",0,N],[11,"FramebufferTexture2D","","",0,N],[11,"FramebufferTexture3D","","",0,N],[11,"FramebufferTextureLayer","","",0,N],[11,"FrontFace","","",0,N],[11,"GenBuffers","","",0,N],[11,"GenFramebuffers","","",0,N],[11,"GenProgramPipelines","","",0,N],[11,"GenQueries","","",0,N],[11,"GenRenderbuffers","","",0,N],[11,"GenSamplers","","",0,N],[11,"GenTextures","","",0,N],[11,"GenTransformFeedbacks","","",0,N],[11,"GenVertexArrays","","",0,N],[11,"GenerateMipmap","","",0,N],[11,"GenerateTextureMipmap","","",0,N],[11,"GetActiveAtomicCounterBufferiv","","",0,N],[11,"GetActiveAttrib","","",0,N],[11,"GetActiveSubroutineName","","",0,N],[11,"GetActiveSubroutineUniformName","","",0,N],[11,"GetActiveSubroutineUniformiv","","",0,N],[11,"GetActiveUniform","","",0,N],[11,"GetActiveUniformBlockName","","",0,N],[11,"GetActiveUniformBlockiv","","",0,N],[11,"GetActiveUniformName","","",0,N],[11,"GetActiveUniformsiv","","",0,N],[11,"GetAttachedShaders","","",0,N],[11,"GetAttribLocation","","",0,N],[11,"GetBooleani_v","","",0,N],[11,"GetBooleanv","","",0,N],[11,"GetBufferParameteri64v","","",0,N],[11,"GetBufferParameteriv","","",0,N],[11,"GetBufferPointerv","","",0,N],[11,"GetBufferSubData","","",0,N],[11,"GetCompressedTexImage","","",0,N],[11,"GetCompressedTextureImage","","",0,N],[11,"GetCompressedTextureSubImage","","",0,N],[11,"GetDebugMessageLog","","",0,N],[11,"GetDoublei_v","","",0,N],[11,"GetDoublev","","",0,N],[11,"GetError","","",0,[[["self"]],["glenum"]]],[11,"GetFloati_v","","",0,N],[11,"GetFloatv","","",0,N],[11,"GetFragDataIndex","","",0,N],[11,"GetFragDataLocation","","",0,N],[11,"GetFramebufferAttachmentParameteriv","","",0,N],[11,"GetFramebufferParameteriv","","",0,N],[11,"GetGraphicsResetStatus","","",0,[[["self"]],["glenum"]]],[11,"GetInteger64i_v","","",0,N],[11,"GetInteger64v","","",0,N],[11,"GetIntegeri_v","","",0,N],[11,"GetIntegerv","","",0,N],[11,"GetInternalformati64v","","",0,N],[11,"GetInternalformativ","","",0,N],[11,"GetMultisamplefv","","",0,N],[11,"GetNamedBufferParameteri64v","","",0,N],[11,"GetNamedBufferParameteriv","","",0,N],[11,"GetNamedBufferPointerv","","",0,N],[11,"GetNamedBufferSubData","","",0,N],[11,"GetNamedFramebufferAttachmentParameteriv","","",0,N],[11,"GetNamedFramebufferParameteriv","","",0,N],[11,"GetNamedRenderbufferParameteriv","","",0,N],[11,"GetObjectLabel","","",0,N],[11,"GetObjectPtrLabel","","",0,N],[11,"GetPointerv","","",0,N],[11,"GetProgramBinary","","",0,N],[11,"GetProgramInfoLog","","",0,N],[11,"GetProgramInterfaceiv","","",0,N],[11,"GetProgramPipelineInfoLog","","",0,N],[11,"GetProgramPipelineiv","","",0,N],[11,"GetProgramResourceIndex","","",0,N],[11,"GetProgramResourceLocation","","",0,N],[11,"GetProgramResourceLocationIndex","","",0,N],[11,"GetProgramResourceName","","",0,N],[11,"GetProgramResourceiv","","",0,N],[11,"GetProgramStageiv","","",0,N],[11,"GetProgramiv","","",0,N],[11,"GetQueryBufferObjecti64v","","",0,N],[11,"GetQueryBufferObjectiv","","",0,N],[11,"GetQueryBufferObjectui64v","","",0,N],[11,"GetQueryBufferObjectuiv","","",0,N],[11,"GetQueryIndexediv","","",0,N],[11,"GetQueryObjecti64v","","",0,N],[11,"GetQueryObjectiv","","",0,N],[11,"GetQueryObjectui64v","","",0,N],[11,"GetQueryObjectuiv","","",0,N],[11,"GetQueryiv","","",0,N],[11,"GetRenderbufferParameteriv","","",0,N],[11,"GetSamplerParameterIiv","","",0,N],[11,"GetSamplerParameterIuiv","","",0,N],[11,"GetSamplerParameterfv","","",0,N],[11,"GetSamplerParameteriv","","",0,N],[11,"GetShaderInfoLog","","",0,N],[11,"GetShaderPrecisionFormat","","",0,N],[11,"GetShaderSource","","",0,N],[11,"GetShaderiv","","",0,N],[11,"GetString","","",0,N],[11,"GetStringi","","",0,N],[11,"GetSubroutineIndex","","",0,N],[11,"GetSubroutineUniformLocation","","",0,N],[11,"GetSynciv","","",0,N],[11,"GetTexImage","","",0,N],[11,"GetTexLevelParameterfv","","",0,N],[11,"GetTexLevelParameteriv","","",0,N],[11,"GetTexParameterIiv","","",0,N],[11,"GetTexParameterIuiv","","",0,N],[11,"GetTexParameterfv","","",0,N],[11,"GetTexParameteriv","","",0,N],[11,"GetTextureImage","","",0,N],[11,"GetTextureLevelParameterfv","","",0,N],[11,"GetTextureLevelParameteriv","","",0,N],[11,"GetTextureParameterIiv","","",0,N],[11,"GetTextureParameterIuiv","","",0,N],[11,"GetTextureParameterfv","","",0,N],[11,"GetTextureParameteriv","","",0,N],[11,"GetTextureSubImage","","",0,N],[11,"GetTransformFeedbackVarying","","",0,N],[11,"GetTransformFeedbacki64_v","","",0,N],[11,"GetTransformFeedbacki_v","","",0,N],[11,"GetTransformFeedbackiv","","",0,N],[11,"GetUniformBlockIndex","","",0,N],[11,"GetUniformIndices","","",0,N],[11,"GetUniformLocation","","",0,N],[11,"GetUniformSubroutineuiv","","",0,N],[11,"GetUniformdv","","",0,N],[11,"GetUniformfv","","",0,N],[11,"GetUniformiv","","",0,N],[11,"GetUniformuiv","","",0,N],[11,"GetVertexArrayIndexed64iv","","",0,N],[11,"GetVertexArrayIndexediv","","",0,N],[11,"GetVertexArrayiv","","",0,N],[11,"GetVertexAttribIiv","","",0,N],[11,"GetVertexAttribIuiv","","",0,N],[11,"GetVertexAttribLdv","","",0,N],[11,"GetVertexAttribPointerv","","",0,N],[11,"GetVertexAttribdv","","",0,N],[11,"GetVertexAttribfv","","",0,N],[11,"GetVertexAttribiv","","",0,N],[11,"GetnColorTable","","",0,N],[11,"GetnCompressedTexImage","","",0,N],[11,"GetnConvolutionFilter","","",0,N],[11,"GetnHistogram","","",0,N],[11,"GetnMapdv","","",0,N],[11,"GetnMapfv","","",0,N],[11,"GetnMapiv","","",0,N],[11,"GetnMinmax","","",0,N],[11,"GetnPixelMapfv","","",0,N],[11,"GetnPixelMapuiv","","",0,N],[11,"GetnPixelMapusv","","",0,N],[11,"GetnPolygonStipple","","",0,N],[11,"GetnSeparableFilter","","",0,N],[11,"GetnTexImage","","",0,N],[11,"GetnUniformdv","","",0,N],[11,"GetnUniformfv","","",0,N],[11,"GetnUniformiv","","",0,N],[11,"GetnUniformuiv","","",0,N],[11,"Hint","","",0,N],[11,"InvalidateBufferData","","",0,N],[11,"InvalidateBufferSubData","","",0,N],[11,"InvalidateFramebuffer","","",0,N],[11,"InvalidateNamedFramebufferData","","",0,N],[11,"InvalidateNamedFramebufferSubData","","",0,N],[11,"InvalidateSubFramebuffer","","",0,N],[11,"InvalidateTexImage","","",0,N],[11,"InvalidateTexSubImage","","",0,N],[11,"IsBuffer","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsEnabled","","",0,[[["self"],["glenum"]],["glboolean"]]],[11,"IsEnabledi","","",0,[[["self"],["glenum"],["gluint"]],["glboolean"]]],[11,"IsFramebuffer","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsProgram","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsProgramPipeline","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsQuery","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsRenderbuffer","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsSampler","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsShader","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsSync","","",0,[[["self"],["glsync"]],["glboolean"]]],[11,"IsTexture","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsTransformFeedback","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"IsVertexArray","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"LineWidth","","",0,N],[11,"LinkProgram","","",0,N],[11,"LogicOp","","",0,N],[11,"MapBuffer","","",0,N],[11,"MapBufferRange","","",0,N],[11,"MapNamedBuffer","","",0,N],[11,"MapNamedBufferRange","","",0,N],[11,"MemoryBarrier","","",0,N],[11,"MemoryBarrierByRegion","","",0,N],[11,"MinSampleShading","","",0,N],[11,"MultiDrawArrays","","",0,N],[11,"MultiDrawArraysIndirect","","",0,N],[11,"MultiDrawElements","","",0,N],[11,"MultiDrawElementsBaseVertex","","",0,N],[11,"MultiDrawElementsIndirect","","",0,N],[11,"MultiTexCoordP1ui","","",0,N],[11,"MultiTexCoordP1uiv","","",0,N],[11,"MultiTexCoordP2ui","","",0,N],[11,"MultiTexCoordP2uiv","","",0,N],[11,"MultiTexCoordP3ui","","",0,N],[11,"MultiTexCoordP3uiv","","",0,N],[11,"MultiTexCoordP4ui","","",0,N],[11,"MultiTexCoordP4uiv","","",0,N],[11,"NamedBufferData","","",0,N],[11,"NamedBufferStorage","","",0,N],[11,"NamedBufferSubData","","",0,N],[11,"NamedFramebufferDrawBuffer","","",0,N],[11,"NamedFramebufferDrawBuffers","","",0,N],[11,"NamedFramebufferParameteri","","",0,N],[11,"NamedFramebufferReadBuffer","","",0,N],[11,"NamedFramebufferRenderbuffer","","",0,N],[11,"NamedFramebufferTexture","","",0,N],[11,"NamedFramebufferTextureLayer","","",0,N],[11,"NamedRenderbufferStorage","","",0,N],[11,"NamedRenderbufferStorageMultisample","","",0,N],[11,"NormalP3ui","","",0,N],[11,"NormalP3uiv","","",0,N],[11,"ObjectLabel","","",0,N],[11,"ObjectPtrLabel","","",0,N],[11,"PatchParameterfv","","",0,N],[11,"PatchParameteri","","",0,N],[11,"PauseTransformFeedback","","",0,N],[11,"PixelStoref","","",0,N],[11,"PixelStorei","","",0,N],[11,"PointParameterf","","",0,N],[11,"PointParameterfv","","",0,N],[11,"PointParameteri","","",0,N],[11,"PointParameteriv","","",0,N],[11,"PointSize","","",0,N],[11,"PolygonMode","","",0,N],[11,"PolygonOffset","","",0,N],[11,"PopDebugGroup","","",0,N],[11,"PrimitiveRestartIndex","","",0,N],[11,"ProgramBinary","","",0,N],[11,"ProgramParameteri","","",0,N],[11,"ProgramUniform1d","","",0,N],[11,"ProgramUniform1dv","","",0,N],[11,"ProgramUniform1f","","",0,N],[11,"ProgramUniform1fv","","",0,N],[11,"ProgramUniform1i","","",0,N],[11,"ProgramUniform1iv","","",0,N],[11,"ProgramUniform1ui","","",0,N],[11,"ProgramUniform1uiv","","",0,N],[11,"ProgramUniform2d","","",0,N],[11,"ProgramUniform2dv","","",0,N],[11,"ProgramUniform2f","","",0,N],[11,"ProgramUniform2fv","","",0,N],[11,"ProgramUniform2i","","",0,N],[11,"ProgramUniform2iv","","",0,N],[11,"ProgramUniform2ui","","",0,N],[11,"ProgramUniform2uiv","","",0,N],[11,"ProgramUniform3d","","",0,N],[11,"ProgramUniform3dv","","",0,N],[11,"ProgramUniform3f","","",0,N],[11,"ProgramUniform3fv","","",0,N],[11,"ProgramUniform3i","","",0,N],[11,"ProgramUniform3iv","","",0,N],[11,"ProgramUniform3ui","","",0,N],[11,"ProgramUniform3uiv","","",0,N],[11,"ProgramUniform4d","","",0,N],[11,"ProgramUniform4dv","","",0,N],[11,"ProgramUniform4f","","",0,N],[11,"ProgramUniform4fv","","",0,N],[11,"ProgramUniform4i","","",0,N],[11,"ProgramUniform4iv","","",0,N],[11,"ProgramUniform4ui","","",0,N],[11,"ProgramUniform4uiv","","",0,N],[11,"ProgramUniformMatrix2dv","","",0,N],[11,"ProgramUniformMatrix2fv","","",0,N],[11,"ProgramUniformMatrix2x3dv","","",0,N],[11,"ProgramUniformMatrix2x3fv","","",0,N],[11,"ProgramUniformMatrix2x4dv","","",0,N],[11,"ProgramUniformMatrix2x4fv","","",0,N],[11,"ProgramUniformMatrix3dv","","",0,N],[11,"ProgramUniformMatrix3fv","","",0,N],[11,"ProgramUniformMatrix3x2dv","","",0,N],[11,"ProgramUniformMatrix3x2fv","","",0,N],[11,"ProgramUniformMatrix3x4dv","","",0,N],[11,"ProgramUniformMatrix3x4fv","","",0,N],[11,"ProgramUniformMatrix4dv","","",0,N],[11,"ProgramUniformMatrix4fv","","",0,N],[11,"ProgramUniformMatrix4x2dv","","",0,N],[11,"ProgramUniformMatrix4x2fv","","",0,N],[11,"ProgramUniformMatrix4x3dv","","",0,N],[11,"ProgramUniformMatrix4x3fv","","",0,N],[11,"ProvokingVertex","","",0,N],[11,"PushDebugGroup","","",0,N],[11,"QueryCounter","","",0,N],[11,"ReadBuffer","","",0,N],[11,"ReadPixels","","",0,N],[11,"ReadnPixels","","",0,N],[11,"ReleaseShaderCompiler","","",0,N],[11,"RenderbufferStorage","","",0,N],[11,"RenderbufferStorageMultisample","","",0,N],[11,"ResumeTransformFeedback","","",0,N],[11,"SampleCoverage","","",0,N],[11,"SampleMaski","","",0,N],[11,"SamplerParameterIiv","","",0,N],[11,"SamplerParameterIuiv","","",0,N],[11,"SamplerParameterf","","",0,N],[11,"SamplerParameterfv","","",0,N],[11,"SamplerParameteri","","",0,N],[11,"SamplerParameteriv","","",0,N],[11,"Scissor","","",0,N],[11,"ScissorArrayv","","",0,N],[11,"ScissorIndexed","","",0,N],[11,"ScissorIndexedv","","",0,N],[11,"SecondaryColorP3ui","","",0,N],[11,"SecondaryColorP3uiv","","",0,N],[11,"ShaderBinary","","",0,N],[11,"ShaderSource","","",0,N],[11,"ShaderStorageBlockBinding","","",0,N],[11,"StencilFunc","","",0,N],[11,"StencilFuncSeparate","","",0,N],[11,"StencilMask","","",0,N],[11,"StencilMaskSeparate","","",0,N],[11,"StencilOp","","",0,N],[11,"StencilOpSeparate","","",0,N],[11,"TexBuffer","","",0,N],[11,"TexBufferRange","","",0,N],[11,"TexCoordP1ui","","",0,N],[11,"TexCoordP1uiv","","",0,N],[11,"TexCoordP2ui","","",0,N],[11,"TexCoordP2uiv","","",0,N],[11,"TexCoordP3ui","","",0,N],[11,"TexCoordP3uiv","","",0,N],[11,"TexCoordP4ui","","",0,N],[11,"TexCoordP4uiv","","",0,N],[11,"TexImage1D","","",0,N],[11,"TexImage2D","","",0,N],[11,"TexImage2DMultisample","","",0,N],[11,"TexImage3D","","",0,N],[11,"TexImage3DMultisample","","",0,N],[11,"TexParameterIiv","","",0,N],[11,"TexParameterIuiv","","",0,N],[11,"TexParameterf","","",0,N],[11,"TexParameterfv","","",0,N],[11,"TexParameteri","","",0,N],[11,"TexParameteriv","","",0,N],[11,"TexStorage1D","","",0,N],[11,"TexStorage2D","","",0,N],[11,"TexStorage2DMultisample","","",0,N],[11,"TexStorage3D","","",0,N],[11,"TexStorage3DMultisample","","",0,N],[11,"TexSubImage1D","","",0,N],[11,"TexSubImage2D","","",0,N],[11,"TexSubImage3D","","",0,N],[11,"TextureBarrier","","",0,N],[11,"TextureBuffer","","",0,N],[11,"TextureBufferRange","","",0,N],[11,"TextureParameterIiv","","",0,N],[11,"TextureParameterIuiv","","",0,N],[11,"TextureParameterf","","",0,N],[11,"TextureParameterfv","","",0,N],[11,"TextureParameteri","","",0,N],[11,"TextureParameteriv","","",0,N],[11,"TextureStorage1D","","",0,N],[11,"TextureStorage2D","","",0,N],[11,"TextureStorage2DMultisample","","",0,N],[11,"TextureStorage3D","","",0,N],[11,"TextureStorage3DMultisample","","",0,N],[11,"TextureSubImage1D","","",0,N],[11,"TextureSubImage2D","","",0,N],[11,"TextureSubImage3D","","",0,N],[11,"TextureView","","",0,N],[11,"TransformFeedbackBufferBase","","",0,N],[11,"TransformFeedbackBufferRange","","",0,N],[11,"TransformFeedbackVaryings","","",0,N],[11,"Uniform1d","","",0,N],[11,"Uniform1dv","","",0,N],[11,"Uniform1f","","",0,N],[11,"Uniform1fv","","",0,N],[11,"Uniform1i","","",0,N],[11,"Uniform1iv","","",0,N],[11,"Uniform1ui","","",0,N],[11,"Uniform1uiv","","",0,N],[11,"Uniform2d","","",0,N],[11,"Uniform2dv","","",0,N],[11,"Uniform2f","","",0,N],[11,"Uniform2fv","","",0,N],[11,"Uniform2i","","",0,N],[11,"Uniform2iv","","",0,N],[11,"Uniform2ui","","",0,N],[11,"Uniform2uiv","","",0,N],[11,"Uniform3d","","",0,N],[11,"Uniform3dv","","",0,N],[11,"Uniform3f","","",0,N],[11,"Uniform3fv","","",0,N],[11,"Uniform3i","","",0,N],[11,"Uniform3iv","","",0,N],[11,"Uniform3ui","","",0,N],[11,"Uniform3uiv","","",0,N],[11,"Uniform4d","","",0,N],[11,"Uniform4dv","","",0,N],[11,"Uniform4f","","",0,N],[11,"Uniform4fv","","",0,N],[11,"Uniform4i","","",0,N],[11,"Uniform4iv","","",0,N],[11,"Uniform4ui","","",0,N],[11,"Uniform4uiv","","",0,N],[11,"UniformBlockBinding","","",0,N],[11,"UniformMatrix2dv","","",0,N],[11,"UniformMatrix2fv","","",0,N],[11,"UniformMatrix2x3dv","","",0,N],[11,"UniformMatrix2x3fv","","",0,N],[11,"UniformMatrix2x4dv","","",0,N],[11,"UniformMatrix2x4fv","","",0,N],[11,"UniformMatrix3dv","","",0,N],[11,"UniformMatrix3fv","","",0,N],[11,"UniformMatrix3x2dv","","",0,N],[11,"UniformMatrix3x2fv","","",0,N],[11,"UniformMatrix3x4dv","","",0,N],[11,"UniformMatrix3x4fv","","",0,N],[11,"UniformMatrix4dv","","",0,N],[11,"UniformMatrix4fv","","",0,N],[11,"UniformMatrix4x2dv","","",0,N],[11,"UniformMatrix4x2fv","","",0,N],[11,"UniformMatrix4x3dv","","",0,N],[11,"UniformMatrix4x3fv","","",0,N],[11,"UniformSubroutinesuiv","","",0,N],[11,"UnmapBuffer","","",0,[[["self"],["glenum"]],["glboolean"]]],[11,"UnmapNamedBuffer","","",0,[[["self"],["gluint"]],["glboolean"]]],[11,"UseProgram","","",0,N],[11,"UseProgramStages","","",0,N],[11,"ValidateProgram","","",0,N],[11,"ValidateProgramPipeline","","",0,N],[11,"VertexArrayAttribBinding","","",0,N],[11,"VertexArrayAttribFormat","","",0,N],[11,"VertexArrayAttribIFormat","","",0,N],[11,"VertexArrayAttribLFormat","","",0,N],[11,"VertexArrayBindingDivisor","","",0,N],[11,"VertexArrayElementBuffer","","",0,N],[11,"VertexArrayVertexBuffer","","",0,N],[11,"VertexArrayVertexBuffers","","",0,N],[11,"VertexAttrib1d","","",0,N],[11,"VertexAttrib1dv","","",0,N],[11,"VertexAttrib1f","","",0,N],[11,"VertexAttrib1fv","","",0,N],[11,"VertexAttrib1s","","",0,N],[11,"VertexAttrib1sv","","",0,N],[11,"VertexAttrib2d","","",0,N],[11,"VertexAttrib2dv","","",0,N],[11,"VertexAttrib2f","","",0,N],[11,"VertexAttrib2fv","","",0,N],[11,"VertexAttrib2s","","",0,N],[11,"VertexAttrib2sv","","",0,N],[11,"VertexAttrib3d","","",0,N],[11,"VertexAttrib3dv","","",0,N],[11,"VertexAttrib3f","","",0,N],[11,"VertexAttrib3fv","","",0,N],[11,"VertexAttrib3s","","",0,N],[11,"VertexAttrib3sv","","",0,N],[11,"VertexAttrib4Nbv","","",0,N],[11,"VertexAttrib4Niv","","",0,N],[11,"VertexAttrib4Nsv","","",0,N],[11,"VertexAttrib4Nub","","",0,N],[11,"VertexAttrib4Nubv","","",0,N],[11,"VertexAttrib4Nuiv","","",0,N],[11,"VertexAttrib4Nusv","","",0,N],[11,"VertexAttrib4bv","","",0,N],[11,"VertexAttrib4d","","",0,N],[11,"VertexAttrib4dv","","",0,N],[11,"VertexAttrib4f","","",0,N],[11,"VertexAttrib4fv","","",0,N],[11,"VertexAttrib4iv","","",0,N],[11,"VertexAttrib4s","","",0,N],[11,"VertexAttrib4sv","","",0,N],[11,"VertexAttrib4ubv","","",0,N],[11,"VertexAttrib4uiv","","",0,N],[11,"VertexAttrib4usv","","",0,N],[11,"VertexAttribBinding","","",0,N],[11,"VertexAttribDivisor","","",0,N],[11,"VertexAttribFormat","","",0,N],[11,"VertexAttribI1i","","",0,N],[11,"VertexAttribI1iv","","",0,N],[11,"VertexAttribI1ui","","",0,N],[11,"VertexAttribI1uiv","","",0,N],[11,"VertexAttribI2i","","",0,N],[11,"VertexAttribI2iv","","",0,N],[11,"VertexAttribI2ui","","",0,N],[11,"VertexAttribI2uiv","","",0,N],[11,"VertexAttribI3i","","",0,N],[11,"VertexAttribI3iv","","",0,N],[11,"VertexAttribI3ui","","",0,N],[11,"VertexAttribI3uiv","","",0,N],[11,"VertexAttribI4bv","","",0,N],[11,"VertexAttribI4i","","",0,N],[11,"VertexAttribI4iv","","",0,N],[11,"VertexAttribI4sv","","",0,N],[11,"VertexAttribI4ubv","","",0,N],[11,"VertexAttribI4ui","","",0,N],[11,"VertexAttribI4uiv","","",0,N],[11,"VertexAttribI4usv","","",0,N],[11,"VertexAttribIFormat","","",0,N],[11,"VertexAttribIPointer","","",0,N],[11,"VertexAttribL1d","","",0,N],[11,"VertexAttribL1dv","","",0,N],[11,"VertexAttribL2d","","",0,N],[11,"VertexAttribL2dv","","",0,N],[11,"VertexAttribL3d","","",0,N],[11,"VertexAttribL3dv","","",0,N],[11,"VertexAttribL4d","","",0,N],[11,"VertexAttribL4dv","","",0,N],[11,"VertexAttribLFormat","","",0,N],[11,"VertexAttribLPointer","","",0,N],[11,"VertexAttribP1ui","","",0,N],[11,"VertexAttribP1uiv","","",0,N],[11,"VertexAttribP2ui","","",0,N],[11,"VertexAttribP2uiv","","",0,N],[11,"VertexAttribP3ui","","",0,N],[11,"VertexAttribP3uiv","","",0,N],[11,"VertexAttribP4ui","","",0,N],[11,"VertexAttribP4uiv","","",0,N],[11,"VertexAttribPointer","","",0,N],[11,"VertexBindingDivisor","","",0,N],[11,"VertexP2ui","","",0,N],[11,"VertexP2uiv","","",0,N],[11,"VertexP3ui","","",0,N],[11,"VertexP3uiv","","",0,N],[11,"VertexP4ui","","",0,N],[11,"VertexP4uiv","","",0,N],[11,"Viewport","","",0,N],[11,"ViewportArrayv","","",0,N],[11,"ViewportIndexedf","","",0,N],[11,"ViewportIndexedfv","","",0,N],[11,"WaitSync","","",0,N]],"paths":[[3,"Gl"],[3,"FnPtr"]]};
searchIndex["gfx_glyph"]={"doc":"Fast GPU cached text rendering using gfx-rs & rusttype.","items":[[3,"Font","gfx_glyph","A single font. This may or may not own the font data.",N,N],[3,"Glyph","","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",N,N],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",N,N],[12,"0","","",0,N],[3,"HMetrics","","The \"horizontal metrics\" of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally.",N,N],[12,"advance_width","","The horizontal offset that the origin of the next glyph should be from the origin of this glyph.",1,N],[12,"left_side_bearing","","The horizontal offset between the origin of this glyph and the leftmost edge/point of the glyph.",1,N],[3,"Point","","A point in 2-dimensional space, with each dimension of type `N`.",N,N],[12,"x","","",2,N],[12,"y","","",2,N],[3,"PositionedGlyph","","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph.",N,N],[3,"Rect","","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",N,N],[12,"min","","",3,N],[12,"max","","",3,N],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor f in the horizontal direction is achieved by setting `x` equal to f times `y`.",N,N],[12,"x","","Horizontal scale, in pixels.",4,N],[12,"y","","Vertical scale, in pixels.",4,N],[3,"ScaledGlyph","","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph.",N,N],[4,"SharedBytes","","`SharedBytes` handles the lifetime of font data used in RustType. The data is either a shared reference to externally owned data, or managed by reference counting. `SharedBytes` can be conveniently used with `From` and `Into`, and dereferences to the contained bytes.",N,N],[13,"ByRef","","",5,N],[13,"ByArc","","",5,N],[3,"VMetrics","","The \"vertical metrics\" of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines.",N,N],[12,"ascent","","The highest point that any glyph in the font extends to above the baseline. Typically positive.",6,N],[12,"descent","","The lowest point that any glyph in the font extends to below the baseline. Typically negative.",6,N],[12,"line_gap","","The gap to leave between the descent of one line and the ascent of the next. This is of course only a guideline given by the font's designers.",6,N],[3,"GlyphBrushBuilder","","Builder for a `GlyphBrush`.",N,N],[3,"GlyphCalculator","","Cut down version of a `GlyphBrush` that can calculate pixel bounds, but is unable to actually render anything.",N,N],[3,"GlyphCalculatorGuard","","`GlyphCalculator` scoped cache lock.",N,N],[3,"GlyphCalculatorBuilder","","Builder for a `GlyphCalculator`.",N,N],[3,"OwnedVariedSection","","",N,N],[12,"screen_position","","Position on screen to render text, in pixels from top-left. Defaults to (0, 0).",7,N],[12,"bounds","","Max (width, height) bounds, in pixels from top-left. Defaults to unbounded.",7,N],[12,"z","","Z values for use in depth testing. Defaults to 0.0",7,N],[12,"layout","","Built in layout, can be overridden with custom layout logic see `queue_custom_layout`",7,N],[12,"text","","Text to render, rendered next to one another according the layout.",7,N],[3,"OwnedSectionText","","",N,N],[12,"text","","Text to render",8,N],[12,"scale","","Position on screen to render text, in pixels from top-left. Defaults to (0, 0).",8,N],[12,"color","","Rgba color of rendered text. Defaults to black.",8,N],[12,"font_id","","Font id to use for this section.",8,N],[3,"VariedSection","","An object that contains all the info to render a varied section of text. That is one including many parts with differing fonts/scales/colors bowing to a single layout.",N,N],[12,"screen_position","","Position on screen to render text, in pixels from top-left. Defaults to (0, 0).",9,N],[12,"bounds","","Max (width, height) bounds, in pixels from top-left. Defaults to unbounded.",9,N],[12,"z","","Z values for use in depth testing. Defaults to 0.0",9,N],[12,"layout","","Built in layout, can be overridden with custom layout logic see `queue_custom_layout`",9,N],[12,"text","","Text to render, rendered next to one another according the layout.",9,N],[3,"SectionText","","",N,N],[12,"text","","Text to render",10,N],[12,"scale","","Position on screen to render text, in pixels from top-left. Defaults to (0, 0).",10,N],[12,"color","","Rgba color of rendered text. Defaults to black.",10,N],[12,"font_id","","Font id to use for this section.",10,N],[3,"FontId","","Id for a font, the default `FontId(0)` will always be present in a `GlyphBrush`",N,N],[12,"0","","",11,N],[3,"Section","","An object that contains all the info to render a section of text.",N,N],[12,"text","","Text to render",12,N],[12,"screen_position","","Position on screen to render text, in pixels from top-left. Defaults to (0, 0).",12,N],[12,"bounds","","Max (width, height) bounds, in pixels from top-left. Defaults to unbounded.",12,N],[12,"scale","","Font scale. Defaults to 16",12,N],[12,"color","","Rgba color of rendered text. Defaults to black.",12,N],[12,"z","","Z values for use in depth testing. Defaults to 0.0",12,N],[12,"layout","","Built in layout, can overridden with custom layout logic see `queue_custom_layout`",12,N],[12,"font_id","","Font id to use for this section.",12,N],[3,"GlyphBrush","","Object allowing glyph drawing, containing cache state. Manages glyph positioning cacheing, glyph draw caching & efficient GPU texture cache updating and re-sizing on demand.",N,N],[4,"Layout","","Built-in `GlyphPositioner` implementations.",N,N],[13,"SingleLine","","Renders a single line from left-to-right according to the inner alignment. Hard breaking will end the line, partially hitting the width bound will end the line.",13,N],[12,"line_breaker","gfx_glyph::Layout","",13,N],[12,"h_align","","",13,N],[12,"v_align","","",13,N],[13,"Wrap","gfx_glyph","Renders multiple lines from left-to-right according to the inner alignment. Hard breaking characters will cause advancement to another line. A characters hitting the width bound will also cause another line to start.",13,N],[12,"line_breaker","gfx_glyph::Layout","",13,N],[12,"h_align","","",13,N],[12,"v_align","","",13,N],[4,"HorizontalAlign","gfx_glyph","Describes horizontal alignment preference for positioning & bounds.",N,N],[13,"Left","","Leftmost character is immediately to the right of the render position. Bounds start from the render position and advance rightwards.",14,N],[13,"Center","","Leftmost & rightmost characters are equidistant to the render position. Bounds start from the render position and advance equally left & right.",14,N],[13,"Right","","Rightmost character is immetiately to the left of the render position. Bounds start from the render position and advance leftwards.",14,N],[4,"VerticalAlign","","Describes vertical alignment preference for positioning & bounds. Currently a placeholder for future functionality.",N,N],[13,"Top","","Characters/bounds start underneath the render position and progress downwards.",15,N],[13,"Center","","Characters/bounds center at the render position and progress outward equally.",15,N],[13,"Bottom","","Characters/bounds start above the render position and progress upward.",15,N],[4,"LineBreak","","Indicator that a character is a line break, soft or hard. Includes the offset (byte-index) position.",N,N],[13,"Soft","","Soft line break (offset).",16,N],[13,"Hard","","Hard line break (offset).",16,N],[4,"BuiltInLineBreaker","","",N,N],[13,"UnicodeLineBreaker","","LineBreaker that follows Unicode Standard Annex #14. That effectively means it wraps words in a way that should work for most cases.",17,N],[13,"AnyCharLineBreaker","","LineBreaker that soft breaks on any character, and hard breaks similarly to UnicodeLineBreaker.",17,N],[11,"using_font_bytes","","Specifies the default font data used to render glyphs. Referenced with `FontId(0)`, which is default.",18,[[["b"]],["self"]]],[11,"using_fonts_bytes","","",18,[[["v"]],["self"]]],[11,"using_font","","Specifies the default font used to render glyphs. Referenced with `FontId(0)`, which is default.",18,[[["font"]],["self"]]],[11,"using_fonts","","",18,[[["v"]],["self"]]],[11,"add_font_bytes","","Adds additional fonts to the one added in `using_font` / `using_font_bytes`. Returns a `FontId` to reference this font.",18,[[["self"],["b"]],["fontid"]]],[11,"add_font","","Adds additional fonts to the one added in `using_font` / `using_font_bytes`. Returns a `FontId` to reference this font.",18,[[["self"],["font"]],["fontid"]]],[11,"initial_cache_size","","Initial size of 2D texture used as a gpu cache, pixels (width, height). The GPU cache will dynamically quadruple in size whenever the current size is insufficient.",18,N],[11,"gpu_cache_scale_tolerance","","Sets the maximum allowed difference in scale used for judging whether to reuse an existing glyph in the GPU cache.",18,[[["self"],["f32"]],["self"]]],[11,"gpu_cache_position_tolerance","","Sets the maximum allowed difference in subpixel position used for judging whether to reuse an existing glyph in the GPU cache. Anything greater than or equal to 1.0 means \"don't care\".",18,[[["self"],["f32"]],["self"]]],[11,"cache_glyph_positioning","","Sets whether perform the calculation of glyph positioning according to the layout every time, or use a cached result if the input `Section` and `GlyphPositioner` are the same hash as a previous call.",18,[[["self"],["bool"]],["self"]]],[11,"cache_glyph_drawing","","Sets optimising drawing by reusing the last draw requesting an identical draw queue.",18,[[["self"],["bool"]],["self"]]],[11,"depth_test","","Sets the depth test to use on the text section z values.",18,[[["self"],["depth"]],["self"]]],[11,"texture_filter_method","","Sets the texture filtering method.",18,[[["self"],["filtermethod"]],["self"]]],[11,"section_hasher","","Sets the section hasher. `GlyphBrush` cannot handle absolute section hash collisions so use a good hash algorithm.",18,[[["self"],["t"]],["glyphbrushbuilder"]]],[11,"build","","Builds a `GlyphBrush` using the input gfx factory",18,[[["self"],["f"]],["glyphbrush"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["layout"]]],[11,"hash","","",13,N],[11,"eq","","",13,[[["self"],["layout"]],["bool"]]],[11,"ne","","",13,[[["self"],["layout"]],["bool"]]],[11,"default","","",13,[[],["self"]]],[11,"default_single_line","","",13,[[],["self"]]],[11,"default_wrap","","",13,[[],["self"]]],[11,"h_align","","Returns an identical `Layout` but with the input `h_align`",13,[[["self"],["horizontalalign"]],["self"]]],[11,"v_align","","Returns an identical `Layout` but with the input `v_align`",13,[[["self"],["verticalalign"]],["self"]]],[11,"line_breaker","","Returns an identical `Layout` but with the input `line_breaker`",13,[[["self"],["l2"]],["layout"]]],[11,"calculate_glyphs","","",13,[[["self"],["fontmap"],["variedsection"]],["vec"]]],[11,"bounds_rect","","",13,[[["self"],["variedsection"]],["rect",["f32"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["horizontalalign"]]],[11,"eq","","",14,[[["self"],["horizontalalign"]],["bool"]]],[11,"hash","","",14,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["verticalalign"]]],[11,"eq","","",15,[[["self"],["verticalalign"]],["bool"]]],[11,"hash","","",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["linebreak"]]],[11,"eq","","",16,[[["self"],["linebreak"]],["bool"]]],[11,"ne","","",16,[[["self"],["linebreak"]],["bool"]]],[11,"hash","","",16,N],[11,"offset","","Returns the offset of the line break, the index after the breaking character.",16,[[["self"]],["usize"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["builtinlinebreaker"]]],[11,"hash","","",17,N],[11,"eq","","",17,[[["self"],["builtinlinebreaker"]],["bool"]]],[11,"default","","",17,[[],["self"]]],[11,"line_breaks","","",17,[[["self"],["str"]],["box",["iterator"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["variedsection"]]],[11,"default","","",9,[[],["self"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"to_owned","","",9,[[["self"]],["ownedvariedsection"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["sectiontext"]]],[11,"default","","",10,[[],["self"]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"to_owned","","",10,[[["self"]],["ownedsectiontext"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["fontid"]]],[11,"eq","","",11,[[["self"],["fontid"]],["bool"]]],[11,"ne","","",11,[[["self"],["fontid"]],["bool"]]],[11,"hash","","",11,N],[11,"partial_cmp","","",11,[[["self"],["fontid"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["fontid"]],["bool"]]],[11,"le","","",11,[[["self"],["fontid"]],["bool"]]],[11,"gt","","",11,[[["self"],["fontid"]],["bool"]]],[11,"ge","","",11,[[["self"],["fontid"]],["bool"]]],[11,"cmp","","",11,[[["self"],["fontid"]],["ordering"]]],[11,"default","","",11,[[],["fontid"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["section"]]],[11,"default","","",12,[[],["self"]]],[11,"from","","",9,[[["section"]],["self"]]],[11,"from","","",9,[[["section"]],["self"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"cache_scope","","",19,[[["self"]],["glyphcalculatorguard"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"pixel_bounds_custom_layout","","",20,[[["self"],["s"],["l"]],["option",["rect"]]]],[11,"glyphs_custom_layout","","",20,[[["self"],["s"],["l"]],["positionedglyphiter"]]],[11,"drop","","",20,[[["self"]]]],[11,"using_font_bytes","","Specifies the default font data used to render glyphs. Referenced with `FontId(0)`, which is default.",21,[[["b"]],["self"]]],[11,"using_fonts_bytes","","",21,[[["v"]],["self"]]],[11,"using_font","","Specifies the default font used to render glyphs. Referenced with `FontId(0)`, which is default.",21,[[["font"]],["self"]]],[11,"using_fonts","","",21,[[["v"]],["self"]]],[11,"add_font_bytes","","Adds additional fonts to the one added in `using_font` / `using_font_bytes`.",21,[[["self"],["b"]],["fontid"]]],[11,"add_font","","Adds additional fonts to the one added in `using_font` / `using_font_bytes`.",21,[[["self"],["font"]],["fontid"]]],[11,"section_hasher","","Sets the section hasher. `GlyphCalculator` cannot handle absolute section hash collisions so use a good hash algorithm.",21,[[["self"],["t"]],["glyphcalculatorbuilder"]]],[11,"build","","Builds a `GlyphCalculator`",21,[[["self"]],["glyphcalculator"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["ownedvariedsection"]]],[11,"default","","",7,[[],["self"]]],[11,"to_borrowed","","",7,[[["self"]],["variedsection"]]],[11,"from","","",9,[[["ownedvariedsection"]],["self"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["ownedsectiontext"]]],[11,"default","","",8,[[],["self"]]],[11,"from","","",10,[[["ownedsectiontext"]],["self"]]],[6,"FontMap","","Map of `FontId` → `Font`.",N,N],[6,"PositionedGlyphIter","","`PositionedGlyph` iterator.",N,N],[8,"GlyphCruncher","","Common glyph layout logic.",N,N],[10,"pixel_bounds_custom_layout","","Returns the pixel bounding box for the input section using a custom layout. The box is a conservative whole number pixel rectangle that can contain the section.",22,[[["self"],["s"],["l"]],["option",["rect"]]]],[11,"pixel_bounds","","Returns the pixel bounding box for the input section. The box is a conservative whole number pixel rectangle that can contain the section.",22,[[["self"],["s"]],["option",["rect"]]]],[10,"glyphs_custom_layout","","Returns an iterator over the `PositionedGlyph`s of the given section with a custom layout.",22,[[["self"],["s"],["l"]],["positionedglyphiter"]]],[11,"glyphs","","Returns an iterator over the `PositionedGlyph`s of the given section.",22,[[["self"],["s"]],["positionedglyphiter"]]],[8,"GlyphPositioner","","Logic to calculate glyph positioning based on `Font` and `VariedSection`",N,N],[10,"calculate_glyphs","","Calculate a sequence of positioned glyphs to render. Custom implementations should always return the same result when called with the same arguments. If not consider disabling `cache_glyph_positioning`.",23,[[["self"],["fontmap"],["variedsection"]],["vec"]]],[10,"bounds_rect","","Return a screen rectangle according to the requested render position and bounds appropriate for the glyph layout.",23,[[["self"],["variedsection"]],["rect",["f32"]]]],[8,"LineBreaker","","Producer of a `LineBreak` iterator. Used to allow to the `Layout` to be line break aware in a generic way.",N,N],[10,"line_breaks","","",24,[[["self"],["str"]],["box",["iterator"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"pixel_bounds_custom_layout","","",25,[[["self"],["s"],["l"]],["option",["rect"]]]],[11,"glyphs_custom_layout","","",25,[[["self"],["s"],["l"]],["positionedglyphiter"]]],[11,"queue_custom_layout","","Queues a section/layout to be drawn by the next call of `draw_queued`. Can be called multiple times to queue multiple sections for drawing.",25,[[["self"],["s"],["g"]]]],[11,"queue","","Queues a section/layout to be drawn by the next call of `draw_queued`. Can be called multiple times to queue multiple sections for drawing.",25,[[["self"],["s"]]]],[11,"draw_queued","","Draws all queued sections onto a render target, applying a position transform (e.g. a projection). See `queue`.",25,[[["self"],["encoder"],["cv"],["dv"]],["result",["string"]]]],[11,"draw_queued_with_transform","","Draws all queued sections onto a render target, applying a position transform (e.g. a projection). See `queue`.",25,N],[11,"fonts","","Returns `FontMap` of available fonts.",25,[[["self"]],["fontmap"]]],[11,"add_font_bytes","","Adds an additional font to the one(s) initially added on build.",25,[[["self"],["b"]],["fontid"]]],[11,"add_font","","Adds an additional font to the one(s) initially added on build.",25,[[["self"],["font"]],["fontid"]]],[11,"from_bytes","","Constructs a font from an array of bytes, this is a shortcut for `FontCollection::from_bytes` for collections comprised of a single font.",26,[[["b"]],["result",["font","error"]]]],[11,"v_metrics","","The \"vertical metrics\" for this font at a given scale. These metrics are shared by all of the glyphs in the font. See `VMetrics` for more detail.",26,[[["self"],["scale"]],["vmetrics"]]],[11,"v_metrics_unscaled","","Get the unscaled VMetrics for this font, shared by all glyphs. See `VMetrics` for more detail.",26,[[["self"]],["vmetrics"]]],[11,"units_per_em","","Returns the units per EM square of this font",26,[[["self"]],["u16"]]],[11,"glyph_count","","The number of glyphs present in this font. Glyph identifiers for this font will always be in the range `0..self.glyph_count()`",26,[[["self"]],["usize"]]],[11,"glyph","","Returns the corresponding glyph for a Unicode code point or a glyph id for this font.",26,[[["self"],["c"]],["glyph"]]],[11,"glyphs_for","","A convenience function.",26,[[["self"],["i"]],["glyphiter"]]],[11,"font_name_strings","","Returns an iterator over the names for this font.",26,[[["self"]],["fontnameiter",["sharedbytes"]]]],[11,"layout","","A convenience function for laying out glyphs for a string horizontally. It does not take control characters like line breaks into account, as treatment of these is likely to depend on the application.",26,[[["self"],["str"],["scale"],["point",["f32"]]],["layoutiter"]]],[11,"pair_kerning","","Returns additional kerning to apply as well as that given by HMetrics for a particular pair of glyphs.",26,[[["self"],["scale"],["a"],["b"]],["f32"]]],[11,"clone","","",26,[[["self"]],["font"]]],[11,"clone","","",3,[[["self"]],["rect"]]],[11,"clone","","",27,[[["self"]],["scaledglyph"]]],[11,"clone","","",1,[[["self"]],["hmetrics"]]],[11,"clone","","",28,[[["self"]],["glyph"]]],[11,"clone","","",6,[[["self"]],["vmetrics"]]],[11,"clone","","",4,[[["self"]],["scale"]]],[11,"clone","","",29,[[["self"]],["positionedglyph"]]],[11,"clone","","",2,[[["self"]],["point"]]],[11,"clone","","",0,[[["self"]],["glyphid"]]],[11,"clone","","",5,[[["self"]],["sharedbytes"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"add","","",2,[[["self"],["vector"]],["point"]]],[11,"partial_cmp","","",6,[[["self"],["vmetrics"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["vmetrics"]],["bool"]]],[11,"le","","",6,[[["self"],["vmetrics"]],["bool"]]],[11,"gt","","",6,[[["self"],["vmetrics"]],["bool"]]],[11,"ge","","",6,[[["self"],["vmetrics"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["hmetrics"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["hmetrics"]],["bool"]]],[11,"le","","",1,[[["self"],["hmetrics"]],["bool"]]],[11,"gt","","",1,[[["self"],["hmetrics"]],["bool"]]],[11,"ge","","",1,[[["self"],["hmetrics"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["glyphid"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["glyphid"]],["bool"]]],[11,"le","","",0,[[["self"],["glyphid"]],["bool"]]],[11,"gt","","",0,[[["self"],["glyphid"]],["bool"]]],[11,"ge","","",0,[[["self"],["glyphid"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["rect"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["rect"]],["bool"]]],[11,"le","","",3,[[["self"],["rect"]],["bool"]]],[11,"gt","","",3,[[["self"],["rect"]],["bool"]]],[11,"ge","","",3,[[["self"],["rect"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["scale"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["scale"]],["bool"]]],[11,"le","","",4,[[["self"],["scale"]],["bool"]]],[11,"gt","","",4,[[["self"],["scale"]],["bool"]]],[11,"ge","","",4,[[["self"],["scale"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["point"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["point"]],["bool"]]],[11,"le","","",2,[[["self"],["point"]],["bool"]]],[11,"gt","","",2,[[["self"],["point"]],["bool"]]],[11,"ge","","",2,[[["self"],["point"]],["bool"]]],[11,"cmp","","",0,[[["self"],["glyphid"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["point"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["rect"]],["ordering"]]],[11,"sub","","",2,[[["self"],["vector"]],["point"]]],[11,"sub","","",2,[[["self"],["point"]],["vector"]]],[11,"into_glyph_id","","",0,[[["self"],["font"]],["glyphid"]]],[11,"hash","","",2,N],[11,"hash","","",0,N],[11,"hash","","",3,N],[11,"mul","","",6,[[["self"],["f32"]],["vmetrics"]]],[11,"deref","","",5,N],[11,"from","","",5,[[["t"]],["sharedbytes"]]],[11,"from","","",5,[[["vec",["u8"]]],["sharedbytes"]]],[11,"from","","",5,N],[11,"from","","",6,[[["vmetrics"]],["vmetrics"]]],[11,"from","","",5,[[["arc"]],["sharedbytes"]]],[11,"from","","",5,[[["box"]],["sharedbytes"]]],[11,"eq","","",4,[[["self"],["scale"]],["bool"]]],[11,"ne","","",4,[[["self"],["scale"]],["bool"]]],[11,"eq","","",3,[[["self"],["rect"]],["bool"]]],[11,"ne","","",3,[[["self"],["rect"]],["bool"]]],[11,"eq","","",0,[[["self"],["glyphid"]],["bool"]]],[11,"ne","","",0,[[["self"],["glyphid"]],["bool"]]],[11,"eq","","",1,[[["self"],["hmetrics"]],["bool"]]],[11,"ne","","",1,[[["self"],["hmetrics"]],["bool"]]],[11,"eq","","",6,[[["self"],["vmetrics"]],["bool"]]],[11,"ne","","",6,[[["self"],["vmetrics"]],["bool"]]],[11,"eq","","",2,[[["self"],["point"]],["bool"]]],[11,"ne","","",2,[[["self"],["point"]],["bool"]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",28,[[["self"]],["option",["font"]]]],[11,"id","","The glyph identifier for this glyph.",28,[[["self"]],["glyphid"]]],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",28,[[["self"],["scale"]],["scaledglyph"]]],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",28,[[["self"]],["glyph"]]],[11,"get_data","","Get the data from this glyph (such as width, extents, vertices, etc.). Only possible if the glyph is a shared glyph.",28,[[["self"]],["option",["arc"]]]],[11,"id","","The glyph identifier for this glyph.",29,[[["self"]],["glyphid"]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",29,[[["self"]],["option",["font"]]]],[11,"unpositioned","","A reference to this glyph without positioning",29,[[["self"]],["scaledglyph"]]],[11,"into_unpositioned","","Removes the positioning from this glyph",29,[[["self"]],["scaledglyph"]]],[11,"pixel_bounding_box","","The conservative pixel-boundary bounding box for this glyph. This is the smallest rectangle aligned to pixel boundaries that encloses the shape of this glyph at this position. Note that the origin of the glyph, at pixel-space coordinates (0, 0), is at the top left of the bounding box.",29,[[["self"]],["option",["rect"]]]],[11,"shape","","Similar to `ScaledGlyph::shape()`, but with the position of the glyph taken into account.",29,[[["self"]],["option",["vec"]]]],[11,"scale","","",29,[[["self"]],["scale"]]],[11,"position","","",29,[[["self"]],["point",["f32"]]]],[11,"draw","","Rasterises this glyph. For each pixel in the rect given by `pixel_bounding_box()`, `o` is called:",29,N],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",29,[[["self"]],["positionedglyph"]]],[11,"width","","",3,[[["self"]],["n"]]],[11,"height","","",3,[[["self"]],["n"]]],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",4,[[["f32"]],["scale"]]],[11,"id","","The glyph identifier for this glyph.",27,[[["self"]],["glyphid"]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",27,[[["self"]],["option",["font"]]]],[11,"into_unscaled","","A reference to this glyph without the scaling",27,[[["self"]],["glyph"]]],[11,"unscaled","","Removes the scaling from this glyph",27,[[["self"]],["glyph"]]],[11,"positioned","","Augments this glyph with positioning information, making methods that depend on the position of the glyph available.",27,[[["self"],["point",["f32"]]],["positionedglyph"]]],[11,"scale","","",27,[[["self"]],["scale"]]],[11,"h_metrics","","Retrieves the \"horizontal metrics\" of this glyph. See `HMetrics` for more detail.",27,[[["self"]],["hmetrics"]]],[11,"shape","","Produces a list of the contours that make up the shape of this glyph. Each contour consists of a sequence of segments. Each segment is either a straight `Line` or a `Curve`.",27,[[["self"]],["option",["vec"]]]],[11,"exact_bounding_box","","The bounding box of the shape of this glyph, not to be confused with `pixel_bounding_box`, the conservative pixel-boundary bounding box. The coordinates are relative to the glyph's origin.",27,[[["self"]],["option",["rect"]]]],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",27,[[["self"]],["scaledglyph"]]],[11,"index","","",30,N],[11,"index","","",30,N],[11,"pixel_bounds","","Returns the pixel bounding box for the input section. The box is a conservative whole number pixel rectangle that can contain the section.",22,[[["self"],["s"]],["option",["rect"]]]],[11,"glyphs","","Returns an iterator over the `PositionedGlyph`s of the given section.",22,[[["self"],["s"]],["positionedglyphiter"]]]],"paths":[[3,"GlyphId"],[3,"HMetrics"],[3,"Point"],[3,"Rect"],[3,"Scale"],[4,"SharedBytes"],[3,"VMetrics"],[3,"OwnedVariedSection"],[3,"OwnedSectionText"],[3,"VariedSection"],[3,"SectionText"],[3,"FontId"],[3,"Section"],[4,"Layout"],[4,"HorizontalAlign"],[4,"VerticalAlign"],[4,"LineBreak"],[4,"BuiltInLineBreaker"],[3,"GlyphBrushBuilder"],[3,"GlyphCalculator"],[3,"GlyphCalculatorGuard"],[3,"GlyphCalculatorBuilder"],[8,"GlyphCruncher"],[8,"GlyphPositioner"],[8,"LineBreaker"],[3,"GlyphBrush"],[3,"Font"],[3,"ScaledGlyph"],[3,"Glyph"],[3,"PositionedGlyph"],[6,"FontMap"]]};
searchIndex["gfx_macros"]={"doc":"","items":[[5,"vertex","gfx_macros","",N,[[["tokenstream"]],["tokenstream"]]],[5,"constant","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["gfx_window_glutin"]={"doc":"","items":[[5,"init","gfx_window_glutin","Initialize with a window builder. Generically parametrized version over the main framebuffer format.",N,N],[5,"init_existing","","Initialize with an existing Glutin window. Generically parametrized version over the main framebuffer format.",N,N],[5,"init_raw","","Initialize with a window builder. Raw version.",N,N],[5,"init_existing_raw","","Initialize with an existing Glutin window. Raw version.",N,N],[5,"update_views","","Update the internal dimensions of the main framebuffer targets. Generic version over the format.",N,[[["glwindow"],["rendertargetview"],["depthstencilview"]]]],[5,"update_views_raw","","Return new main target views if the window resolution has changed from the old dimensions.",N,[[["glwindow"],["dimensions"],["format"],["format"]],["option"]]],[5,"new_views","","Create new main target views based on the current size of the window. Best called just after a WindowResize event.",N,N]],"paths":[]};
searchIndex["gif"]={"doc":"GIF en- and decoding library Build Status","items":[[3,"Frame","gif","A GIF frame",N,N],[12,"delay","","Frame delay in units of 10 ms.",0,N],[12,"dispose","","Disposal method.",0,N],[12,"transparent","","Transparent index (if available).",0,N],[12,"needs_user_input","","True if the frame needs user input to be displayed.",0,N],[12,"top","","Offset from the top border of the canvas.",0,N],[12,"left","","Offset from the left border of the canvas.",0,N],[12,"width","","Width of the frame.",0,N],[12,"height","","Height of the frame.",0,N],[12,"interlaced","","True if the image is interlaced.",0,N],[12,"palette","","Frame local color palette if available.",0,N],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",0,N],[3,"StreamingDecoder","","GIF decoder which supports streaming",N,N],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means that there is no memory limit set.",N,N],[12,"0","","",1,N],[3,"Reader","","GIF decoder",N,N],[3,"Decoder","","GIF decoder",N,N],[3,"Encoder","","GIF encoder.",N,N],[4,"Block","","Known GIF block types",N,N],[13,"Image","","Image block.",2,N],[13,"Extension","","Extension block.",2,N],[13,"Trailer","","Image trailer.",2,N],[4,"Extension","","Known GIF extensions",N,N],[13,"Text","","Text extension.",3,N],[13,"Control","","Control extension.",3,N],[13,"Comment","","Comment extension.",3,N],[13,"Application","","Application extension.",3,N],[4,"DisposalMethod","","Disposal method",N,N],[13,"Any","","StreamingDecoder is not required to take any action.",4,N],[13,"Keep","","Do not dispose.",4,N],[13,"Background","","Restore to background color.",4,N],[13,"Previous","","Restore to previous.",4,N],[4,"Decoded","","Indicates whether a certain object has been decoded",N,N],[13,"Nothing","","Decoded nothing.",5,N],[13,"GlobalPalette","","Global palette.",5,N],[13,"BackgroundColor","","Index of the background color in the global palette.",5,N],[13,"Trailer","","Decoded the image trailer.",5,N],[13,"BlockStart","","The start of a block.",5,N],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,N],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,N],[13,"Frame","","Decoded all information of the next frame. The returned frame does not any image data.",5,N],[13,"Data","","Decoded some data of the current frame.",5,N],[13,"DataEnd","","No more data available the current frame.",5,N],[4,"DecodingError","","Decoding error.",N,N],[13,"Format","","Returned if the image is found to be malformed.",6,N],[13,"Internal","","Internal (logic) error.",6,N],[13,"Io","","Wraps `std::io::Error`.",6,N],[4,"ColorOutput","","Output mode for the image data",N,N],[13,"RGBA","","The decoder expands the image data to 32bit RGBA. This affects:",7,N],[13,"Indexed","","The decoder returns the raw indexed data.",7,N],[4,"Extensions","","Configures how extensions should be handled",N,N],[13,"Save","","Saves all extention data",8,N],[13,"Skip","","Skips the data of unknown extensions and extracts the data from known ones",8,N],[4,"ExtensionData","","Extension data.",N,N],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,N],[12,"flags","gif::ExtensionData","Flags.",9,N],[12,"delay","","Frame delay.",9,N],[12,"trns","","Transparent index.",9,N],[13,"Repetitions","gif","Sets the number of repetitions",9,N],[4,"Repeat","","Number of repetitions",N,N],[13,"Finite","","Finite number of repetitions",10,N],[13,"Infinite","","Infinite number of repetitions",10,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["disposalmethod"]]],[11,"eq","","",4,[[["self"],["disposalmethod"]],["bool"]]],[11,"from_u8","","Converts `u8` to `Option<Self>`",4,[[["u8"]],["option",["disposalmethod"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["block"]]],[11,"eq","","",2,[[["self"],["block"]],["bool"]]],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,[[["u8"]],["option",["block"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["extension"]]],[11,"eq","","",3,[[["self"],["extension"]],["bool"]]],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,[[["u8"]],["option",["extension"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["frame"]]],[11,"default","","",0,[[],["frame"]]],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,N],[11,"from_palette_pixels","","Creates a frame from a palette and indexed pixels",0,N],[11,"from_indexed_pixels","","Creates a frame from indexed pixels in the global palette",0,N],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"cause","","",6,[[["self"]],["option",["error"]]]],[11,"from","","",6,[[["error"]],["self"]]],[11,"eq","","",8,[[["self"],["extensions"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"set_param","","",8,[[["self"],["streamingdecoder"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new streaming decoder",11,[[],["streamingdecoder"]]],[11,"update","","Updates the internal state of the decoder. ",11,N],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,N],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,[[["self"]],["frame"]]],[11,"current_frame","","Current frame info as a ref.",11,[[["self"]],["frame"]]],[11,"width","","Width of the image",11,[[["self"]],["u16"]]],[11,"height","","Height of the image",11,[[["self"]],["u16"]]],[11,"eq","","",7,[[["self"],["coloroutput"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"set_param","","",7,[[["self"],["decoder"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"set_param","","",1,[[["self"],["decoder"]]]],[11,"new","","Creates a new decoder builder",12,[[["r"]],["decoder"]]],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,[[["self"]],["result",["reader","decodingerror"]]]],[11,"next_frame_info","","Returns the next frame info",13,[[["self"]],["result",["option","decodingerror"]]]],[11,"read_next_frame","","Reads the next frame from the image.",13,[[["self"]],["result",["option","decodingerror"]]]],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,N],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been filled completely.",13,N],[11,"buffer_size","","Output buffer size",13,[[["self"]],["usize"]]],[11,"line_length","","Line length of the current frame",13,[[["self"]],["usize"]]],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,[[["self"]],["result",["decodingerror"]]]],[11,"global_palette","","The global color palette",13,[[["self"]],["option"]]],[11,"width","","Width of the image",13,[[["self"]],["u16"]]],[11,"height","","Height of the image",13,[[["self"]],["u16"]]],[11,"bg_color","","Index of the background color in the global palette",13,[[["self"]],["option",["usize"]]]],[11,"set_param","","",10,N],[11,"new_control_ext","","Constructor for control extension data.",9,[[["u16"],["disposalmethod"],["bool"],["option",["u8"]]],["extensiondata"]]],[11,"new","","Creates a new encoder.",14,N],[11,"write_global_palette","","Writes the global color palette.",14,N],[11,"write_frame","","Writes a frame to the image.",14,[[["self"],["frame"]],["result"]]],[11,"write_extension","","Writes an extension to the image.",14,[[["self"],["extensiondata"]],["result"]]],[11,"write_raw_extension","","Writes a raw extension to the image.",14,N],[11,"drop","","",14,[[["self"]]]],[8,"SetParameter","","Implemented for objects that have parameters.",N,N],[11,"set","","Sets `value` as a parameter of `self`.",15,N],[8,"Parameter","","Configuration parameter trait.",N,N],[16,"Result","","Result type of `set_param`.",16,N],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,N],[11,"set","","Sets `value` as a parameter of `self`.",15,N]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["glsl_layout"]={"doc":"This crates provides data types to build structures ready to upload into UBO. Data layout will match one for uniform blocks declared with `layout(std140)`. See specs for alignment rules.","items":[[3,"Element","glsl_layout","Aligning wrapper. Elements for array are aligned to 16 bytes (size of vec4) at least.",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[3,"Array","","Array of `Element`s. This type implements useful traits for converting from unwrapped types.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[3,"ArrayIter","","Array ref iterator Iterate over references to inner values.",N,N],[3,"boolean","","Boolean value.",N,N],[3,"bvec2","","Vector of 2 `boolean` values. `foo: bvec2` is equivalent to glsl's `bvec2 foo;`",N,N],[3,"bvec3","","Vector of 3 `boolean` values. `foo: bvec3` is equivalent to glsl's `bvec3 foo;`",N,N],[3,"bvec4","","Vector of 4 `boolean` values. `foo: bvec4` is equivalent to glsl's `bvec4 foo;`",N,N],[3,"ivec2","","Vector of 2 `int` values. `foo: ivec2` is equivalent to glsl's `ivec2 foo;`",N,N],[3,"ivec3","","Vector of 3 `int` values. `foo: ivec3` is equivalent to glsl's `ivec3 foo;`",N,N],[3,"ivec4","","Vector of 4 `int` values. `foo: ivec4` is equivalent to glsl's `ivec4 foo;`",N,N],[3,"uvec2","","Vector of 2 `uint` values. `foo: uvec2` is equivalent to glsl's `uvec2 foo;`",N,N],[3,"uvec3","","Vector of 3 `uint` values. `foo: uvec3` is equivalent to glsl's `uvec3 foo;`",N,N],[3,"uvec4","","Vector of 4 `uint` values. `foo: uvec4` is equivalent to glsl's `uvec4 foo;`",N,N],[3,"vec2","","Vector of 2 `float` values. `foo: vec2` is equivalent to glsl's `vec2 foo;`",N,N],[3,"vec3","","Vector of 3 `float` values. `foo: vec3` is equivalent to glsl's `vec3 foo;`",N,N],[3,"vec4","","Vector of 4 `float` values. `foo: vec4` is equivalent to glsl's `vec4 foo;`",N,N],[3,"dvec2","","Vector of 2 `double` value. `foo: dvec2` is equivalent to glsl's `dvec2 foo;`",N,N],[3,"dvec3","","Vector of 3 `double` value. `foo: dvec3` is equivalent to glsl's `dvec3 foo;`",N,N],[3,"dvec4","","Vector of 4 `double` value. `foo: dvec4` is equivalent to glsl's `dvec4 foo;`",N,N],[11,"clone","","",2,[[["self"]],["boolean"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",2,[[],["boolean"]]],[11,"partial_cmp","","",2,[[["self"],["boolean"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["boolean"]],["bool"]]],[11,"le","","",2,[[["self"],["boolean"]],["bool"]]],[11,"gt","","",2,[[["self"],["boolean"]],["bool"]]],[11,"ge","","",2,[[["self"],["boolean"]],["bool"]]],[11,"eq","","",2,[[["self"],["boolean"]],["bool"]]],[11,"ne","","",2,[[["self"],["boolean"]],["bool"]]],[11,"cmp","","",2,[[["self"],["boolean"]],["ordering"]]],[11,"hash","","",2,N],[11,"new","","Create `boolean` from `bool`.",2,[[["bool"]],["self"]]],[11,"from","","",2,[[["bool"]],["self"]]],[11,"align","","",2,[[],["align4"]]],[11,"std140","","",2,[[["self"]],["boolean"]]],[11,"clone","","",3,[[["self"]],["bvec2"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["bvec2"]]],[11,"partial_cmp","","",3,[[["self"],["bvec2"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["bvec2"]],["bool"]]],[11,"le","","",3,[[["self"],["bvec2"]],["bool"]]],[11,"gt","","",3,[[["self"],["bvec2"]],["bool"]]],[11,"ge","","",3,[[["self"],["bvec2"]],["bool"]]],[11,"eq","","",3,[[["self"],["bvec2"]],["bool"]]],[11,"ne","","",3,[[["self"],["bvec2"]],["bool"]]],[11,"cmp","","",3,[[["self"],["bvec2"]],["ordering"]]],[11,"hash","","",3,N],[11,"from","","",3,N],[11,"as_ref","","",3,N],[11,"as_mut","","",3,N],[11,"as_ref","","",3,N],[11,"as_mut","","",3,N],[11,"align","","",3,[[],["align8"]]],[11,"std140","","",3,[[["self"]],["bvec2"]]],[11,"clone","","",4,[[["self"]],["bvec3"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["bvec3"]]],[11,"partial_cmp","","",4,[[["self"],["bvec3"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["bvec3"]],["bool"]]],[11,"le","","",4,[[["self"],["bvec3"]],["bool"]]],[11,"gt","","",4,[[["self"],["bvec3"]],["bool"]]],[11,"ge","","",4,[[["self"],["bvec3"]],["bool"]]],[11,"eq","","",4,[[["self"],["bvec3"]],["bool"]]],[11,"ne","","",4,[[["self"],["bvec3"]],["bool"]]],[11,"cmp","","",4,[[["self"],["bvec3"]],["ordering"]]],[11,"hash","","",4,N],[11,"from","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"align","","",4,[[],["align16"]]],[11,"std140","","",4,[[["self"]],["bvec3"]]],[11,"clone","","",5,[[["self"]],["bvec4"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["bvec4"]]],[11,"partial_cmp","","",5,[[["self"],["bvec4"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["bvec4"]],["bool"]]],[11,"le","","",5,[[["self"],["bvec4"]],["bool"]]],[11,"gt","","",5,[[["self"],["bvec4"]],["bool"]]],[11,"ge","","",5,[[["self"],["bvec4"]],["bool"]]],[11,"eq","","",5,[[["self"],["bvec4"]],["bool"]]],[11,"ne","","",5,[[["self"],["bvec4"]],["bool"]]],[11,"cmp","","",5,[[["self"],["bvec4"]],["ordering"]]],[11,"hash","","",5,N],[11,"from","","",5,N],[11,"as_ref","","",5,N],[11,"as_mut","","",5,N],[11,"as_ref","","",5,N],[11,"as_mut","","",5,N],[11,"align","","",5,[[],["align16"]]],[11,"std140","","",5,[[["self"]],["bvec4"]]],[11,"clone","","",6,[[["self"]],["ivec2"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"default","","",6,[[],["ivec2"]]],[11,"partial_cmp","","",6,[[["self"],["ivec2"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["ivec2"]],["bool"]]],[11,"le","","",6,[[["self"],["ivec2"]],["bool"]]],[11,"gt","","",6,[[["self"],["ivec2"]],["bool"]]],[11,"ge","","",6,[[["self"],["ivec2"]],["bool"]]],[11,"eq","","",6,[[["self"],["ivec2"]],["bool"]]],[11,"ne","","",6,[[["self"],["ivec2"]],["bool"]]],[11,"cmp","","",6,[[["self"],["ivec2"]],["ordering"]]],[11,"hash","","",6,N],[11,"from","","",6,N],[11,"as_ref","","",6,N],[11,"as_mut","","",6,N],[11,"as_ref","","",6,N],[11,"as_mut","","",6,N],[11,"align","","",6,[[],["align8"]]],[11,"std140","","",6,[[["self"]],["ivec2"]]],[11,"clone","","",7,[[["self"]],["ivec3"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"default","","",7,[[],["ivec3"]]],[11,"partial_cmp","","",7,[[["self"],["ivec3"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["ivec3"]],["bool"]]],[11,"le","","",7,[[["self"],["ivec3"]],["bool"]]],[11,"gt","","",7,[[["self"],["ivec3"]],["bool"]]],[11,"ge","","",7,[[["self"],["ivec3"]],["bool"]]],[11,"eq","","",7,[[["self"],["ivec3"]],["bool"]]],[11,"ne","","",7,[[["self"],["ivec3"]],["bool"]]],[11,"cmp","","",7,[[["self"],["ivec3"]],["ordering"]]],[11,"hash","","",7,N],[11,"from","","",7,N],[11,"as_ref","","",7,N],[11,"as_mut","","",7,N],[11,"as_ref","","",7,N],[11,"as_mut","","",7,N],[11,"align","","",7,[[],["align16"]]],[11,"std140","","",7,[[["self"]],["ivec3"]]],[11,"clone","","",8,[[["self"]],["ivec4"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"default","","",8,[[],["ivec4"]]],[11,"partial_cmp","","",8,[[["self"],["ivec4"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["ivec4"]],["bool"]]],[11,"le","","",8,[[["self"],["ivec4"]],["bool"]]],[11,"gt","","",8,[[["self"],["ivec4"]],["bool"]]],[11,"ge","","",8,[[["self"],["ivec4"]],["bool"]]],[11,"eq","","",8,[[["self"],["ivec4"]],["bool"]]],[11,"ne","","",8,[[["self"],["ivec4"]],["bool"]]],[11,"cmp","","",8,[[["self"],["ivec4"]],["ordering"]]],[11,"hash","","",8,N],[11,"from","","",8,N],[11,"as_ref","","",8,N],[11,"as_mut","","",8,N],[11,"as_ref","","",8,N],[11,"as_mut","","",8,N],[11,"align","","",8,[[],["align16"]]],[11,"std140","","",8,[[["self"]],["ivec4"]]],[11,"clone","","",9,[[["self"]],["uvec2"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"default","","",9,[[],["uvec2"]]],[11,"partial_cmp","","",9,[[["self"],["uvec2"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["uvec2"]],["bool"]]],[11,"le","","",9,[[["self"],["uvec2"]],["bool"]]],[11,"gt","","",9,[[["self"],["uvec2"]],["bool"]]],[11,"ge","","",9,[[["self"],["uvec2"]],["bool"]]],[11,"eq","","",9,[[["self"],["uvec2"]],["bool"]]],[11,"ne","","",9,[[["self"],["uvec2"]],["bool"]]],[11,"cmp","","",9,[[["self"],["uvec2"]],["ordering"]]],[11,"hash","","",9,N],[11,"from","","",9,N],[11,"as_ref","","",9,N],[11,"as_mut","","",9,N],[11,"as_ref","","",9,N],[11,"as_mut","","",9,N],[11,"align","","",9,[[],["align8"]]],[11,"std140","","",9,[[["self"]],["uvec2"]]],[11,"clone","","",10,[[["self"]],["uvec3"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"default","","",10,[[],["uvec3"]]],[11,"partial_cmp","","",10,[[["self"],["uvec3"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["uvec3"]],["bool"]]],[11,"le","","",10,[[["self"],["uvec3"]],["bool"]]],[11,"gt","","",10,[[["self"],["uvec3"]],["bool"]]],[11,"ge","","",10,[[["self"],["uvec3"]],["bool"]]],[11,"eq","","",10,[[["self"],["uvec3"]],["bool"]]],[11,"ne","","",10,[[["self"],["uvec3"]],["bool"]]],[11,"cmp","","",10,[[["self"],["uvec3"]],["ordering"]]],[11,"hash","","",10,N],[11,"from","","",10,N],[11,"as_ref","","",10,N],[11,"as_mut","","",10,N],[11,"as_ref","","",10,N],[11,"as_mut","","",10,N],[11,"align","","",10,[[],["align16"]]],[11,"std140","","",10,[[["self"]],["uvec3"]]],[11,"clone","","",11,[[["self"]],["uvec4"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"default","","",11,[[],["uvec4"]]],[11,"partial_cmp","","",11,[[["self"],["uvec4"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["uvec4"]],["bool"]]],[11,"le","","",11,[[["self"],["uvec4"]],["bool"]]],[11,"gt","","",11,[[["self"],["uvec4"]],["bool"]]],[11,"ge","","",11,[[["self"],["uvec4"]],["bool"]]],[11,"eq","","",11,[[["self"],["uvec4"]],["bool"]]],[11,"ne","","",11,[[["self"],["uvec4"]],["bool"]]],[11,"cmp","","",11,[[["self"],["uvec4"]],["ordering"]]],[11,"hash","","",11,N],[11,"from","","",11,N],[11,"as_ref","","",11,N],[11,"as_mut","","",11,N],[11,"as_ref","","",11,N],[11,"as_mut","","",11,N],[11,"align","","",11,[[],["align16"]]],[11,"std140","","",11,[[["self"]],["uvec4"]]],[11,"clone","","",12,[[["self"]],["vec2"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"default","","",12,[[],["vec2"]]],[11,"partial_cmp","","",12,[[["self"],["vec2"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["vec2"]],["bool"]]],[11,"le","","",12,[[["self"],["vec2"]],["bool"]]],[11,"gt","","",12,[[["self"],["vec2"]],["bool"]]],[11,"ge","","",12,[[["self"],["vec2"]],["bool"]]],[11,"eq","","",12,[[["self"],["vec2"]],["bool"]]],[11,"ne","","",12,[[["self"],["vec2"]],["bool"]]],[11,"from","","",12,N],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[11,"align","","",12,[[],["align8"]]],[11,"std140","","",12,[[["self"]],["vec2"]]],[11,"clone","","",13,[[["self"]],["vec3"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"default","","",13,[[],["vec3"]]],[11,"partial_cmp","","",13,[[["self"],["vec3"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["vec3"]],["bool"]]],[11,"le","","",13,[[["self"],["vec3"]],["bool"]]],[11,"gt","","",13,[[["self"],["vec3"]],["bool"]]],[11,"ge","","",13,[[["self"],["vec3"]],["bool"]]],[11,"eq","","",13,[[["self"],["vec3"]],["bool"]]],[11,"ne","","",13,[[["self"],["vec3"]],["bool"]]],[11,"from","","",13,N],[11,"as_ref","","",13,N],[11,"as_mut","","",13,N],[11,"as_ref","","",13,N],[11,"as_mut","","",13,N],[11,"align","","",13,[[],["align16"]]],[11,"std140","","",13,[[["self"]],["vec3"]]],[11,"clone","","",14,[[["self"]],["vec4"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"default","","",14,[[],["vec4"]]],[11,"partial_cmp","","",14,[[["self"],["vec4"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["vec4"]],["bool"]]],[11,"le","","",14,[[["self"],["vec4"]],["bool"]]],[11,"gt","","",14,[[["self"],["vec4"]],["bool"]]],[11,"ge","","",14,[[["self"],["vec4"]],["bool"]]],[11,"eq","","",14,[[["self"],["vec4"]],["bool"]]],[11,"ne","","",14,[[["self"],["vec4"]],["bool"]]],[11,"from","","",14,N],[11,"as_ref","","",14,N],[11,"as_mut","","",14,N],[11,"as_ref","","",14,N],[11,"as_mut","","",14,N],[11,"align","","",14,[[],["align16"]]],[11,"std140","","",14,[[["self"]],["vec4"]]],[11,"clone","","",15,[[["self"]],["dvec2"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"default","","",15,[[],["dvec2"]]],[11,"partial_cmp","","",15,[[["self"],["dvec2"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["dvec2"]],["bool"]]],[11,"le","","",15,[[["self"],["dvec2"]],["bool"]]],[11,"gt","","",15,[[["self"],["dvec2"]],["bool"]]],[11,"ge","","",15,[[["self"],["dvec2"]],["bool"]]],[11,"eq","","",15,[[["self"],["dvec2"]],["bool"]]],[11,"ne","","",15,[[["self"],["dvec2"]],["bool"]]],[11,"from","","",15,N],[11,"as_ref","","",15,N],[11,"as_mut","","",15,N],[11,"as_ref","","",15,N],[11,"as_mut","","",15,N],[11,"align","","",15,[[],["align16"]]],[11,"std140","","",15,[[["self"]],["dvec2"]]],[11,"clone","","",16,[[["self"]],["dvec3"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"default","","",16,[[],["dvec3"]]],[11,"partial_cmp","","",16,[[["self"],["dvec3"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["dvec3"]],["bool"]]],[11,"le","","",16,[[["self"],["dvec3"]],["bool"]]],[11,"gt","","",16,[[["self"],["dvec3"]],["bool"]]],[11,"ge","","",16,[[["self"],["dvec3"]],["bool"]]],[11,"eq","","",16,[[["self"],["dvec3"]],["bool"]]],[11,"ne","","",16,[[["self"],["dvec3"]],["bool"]]],[11,"from","","",16,N],[11,"as_ref","","",16,N],[11,"as_mut","","",16,N],[11,"as_ref","","",16,N],[11,"as_mut","","",16,N],[11,"align","","",16,[[],["align32"]]],[11,"std140","","",16,[[["self"]],["dvec3"]]],[11,"clone","","",17,[[["self"]],["dvec4"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"default","","",17,[[],["dvec4"]]],[11,"partial_cmp","","",17,[[["self"],["dvec4"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["dvec4"]],["bool"]]],[11,"le","","",17,[[["self"],["dvec4"]],["bool"]]],[11,"gt","","",17,[[["self"],["dvec4"]],["bool"]]],[11,"ge","","",17,[[["self"],["dvec4"]],["bool"]]],[11,"eq","","",17,[[["self"],["dvec4"]],["bool"]]],[11,"ne","","",17,[[["self"],["dvec4"]],["bool"]]],[11,"from","","",17,N],[11,"as_ref","","",17,N],[11,"as_mut","","",17,N],[11,"as_ref","","",17,N],[11,"as_mut","","",17,N],[11,"align","","",17,[[],["align32"]]],[11,"std140","","",17,[[["self"]],["dvec4"]]],[11,"clone","","",0,[[["self"]],["element"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["element"]]],[11,"partial_cmp","","",0,[[["self"],["element"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["element"]],["bool"]]],[11,"le","","",0,[[["self"],["element"]],["bool"]]],[11,"gt","","",0,[[["self"],["element"]],["bool"]]],[11,"ge","","",0,[[["self"],["element"]],["bool"]]],[11,"eq","","",0,[[["self"],["element"]],["bool"]]],[11,"ne","","",0,[[["self"],["element"]],["bool"]]],[11,"cmp","","",0,[[["self"],["element"]],["ordering"]]],[11,"hash","","",0,N],[11,"from","","",0,[[["t"]],["self"]]],[11,"as_ref","","",0,[[["self"]],["t"]]],[11,"as_mut","","",0,[[["self"]],["t"]]],[11,"clone","","",1,[[["self"]],["array"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["array"]]],[11,"partial_cmp","","",1,[[["self"],["array"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["array"]],["bool"]]],[11,"le","","",1,[[["self"],["array"]],["bool"]]],[11,"gt","","",1,[[["self"],["array"]],["bool"]]],[11,"ge","","",1,[[["self"],["array"]],["bool"]]],[11,"eq","","",1,[[["self"],["array"]],["bool"]]],[11,"ne","","",1,[[["self"],["array"]],["bool"]]],[11,"cmp","","",1,[[["self"],["array"]],["ordering"]]],[11,"hash","","",1,N],[11,"new","","",1,[[["a"]],["self"]]],[11,"as_ref","","",1,[[["self"]],["a"]]],[11,"as_mut","","",1,[[["self"]],["a"]]],[11,"iter","","",1,[[["self"]],["arrayiter",["sliceiter"]]]],[11,"iter_mut","","",1,[[["self"]],["arrayiter",["sliceitermut"]]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"from","","",1,N],[11,"from","","",1,N],[11,"align","","",1,[[],["align16"]]],[11,"std140","","",1,[[["self"]],["array"]]],[11,"from","","",1,N],[11,"from","","",1,N],[11,"align","","",1,[[],["align16"]]],[11,"std140","","",1,[[["self"]],["array"]]],[11,"from","","",1,N],[11,"from","","",1,N],[11,"align","","",1,[[],["align16"]]],[11,"std140","","",1,[[["self"]],["array"]]],[11,"from","","",1,N],[11,"from","","",1,N],[11,"align","","",1,[[],["align16"]]],[11,"std140","","",1,[[["self"]],["array"]]],[11,"from","","",1,N],[11,"from","","",1,N],[11,"align","","",1,[[],["align16"]]],[11,"std140","","",1,[[["self"]],["array"]]],[11,"from","","",6,[[["vector2",["int"]]],["self"]]],[11,"from","","",7,[[["vector3",["int"]]],["self"]]],[11,"from","","",8,[[["vector4",["int"]]],["self"]]],[11,"from","","",9,[[["vector2",["uint"]]],["self"]]],[11,"from","","",10,[[["vector3",["uint"]]],["self"]]],[11,"from","","",11,[[["vector4",["uint"]]],["self"]]],[11,"from","","",12,[[["vector2",["float"]]],["self"]]],[11,"from","","",13,[[["vector3",["float"]]],["self"]]],[11,"from","","",14,[[["vector4",["float"]]],["self"]]],[11,"from","","",15,[[["vector2",["double"]]],["self"]]],[11,"from","","",16,[[["vector3",["double"]]],["self"]]],[11,"from","","",17,[[["vector4",["double"]]],["self"]]],[6,"bmat2x2","","Matrix of 2 x 2 boolean values.",N,N],[6,"bmat2x3","","Matrix of 2 x 3 boolean values.",N,N],[6,"bmat2x4","","Matrix of 2 x 4 boolean values.",N,N],[6,"bmat3x2","","Matrix of 3 x 2 boolean values.",N,N],[6,"bmat3x3","","Matrix of 3 x 3 boolean values.",N,N],[6,"bmat3x4","","Matrix of 3 x 4 boolean values.",N,N],[6,"bmat4x2","","Matrix of 4 x 2 boolean values.",N,N],[6,"bmat4x3","","Matrix of 4 x 3 boolean values.",N,N],[6,"bmat4x4","","Matrix of 4 x 4 boolean values.",N,N],[6,"bmat2","","Matrix of 2 x 2 boolean values.",N,N],[6,"bmat3","","Matrix of 3 x 3 boolean values.",N,N],[6,"bmat4","","Matrix of 4 x 4 boolean values.",N,N],[6,"imat2x2","","Matrix of 2 x 2 signed integer values.",N,N],[6,"imat2x3","","Matrix of 2 x 3 signed integer values.",N,N],[6,"imat2x4","","Matrix of 2 x 4 signed integer values.",N,N],[6,"imat3x2","","Matrix of 3 x 2 signed integer values.",N,N],[6,"imat3x3","","Matrix of 3 x 3 signed integer values.",N,N],[6,"imat3x4","","Matrix of 3 x 4 signed integer values.",N,N],[6,"imat4x2","","Matrix of 4 x 2 signed integer values.",N,N],[6,"imat4x3","","Matrix of 4 x 3 signed integer values.",N,N],[6,"imat4x4","","Matrix of 4 x 4 signed integer values.",N,N],[6,"imat2","","Matrix of 2 x 2 signed integer values.",N,N],[6,"imat3","","Matrix of 3 x 3 signed integer values.",N,N],[6,"imat4","","Matrix of 4 x 4 signed integer values.",N,N],[6,"umat2x2","","Matrix of 2 x 2 unsiged integer values.",N,N],[6,"umat2x3","","Matrix of 2 x 3 unsiged integer values.",N,N],[6,"umat2x4","","Matrix of 2 x 4 unsiged integer values.",N,N],[6,"umat3x2","","Matrix of 3 x 2 unsiged integer values.",N,N],[6,"umat3x3","","Matrix of 3 x 3 unsiged integer values.",N,N],[6,"umat3x4","","Matrix of 3 x 4 unsiged integer values.",N,N],[6,"umat4x2","","Matrix of 4 x 2 unsiged integer values.",N,N],[6,"umat4x3","","Matrix of 4 x 3 unsiged integer values.",N,N],[6,"umat4x4","","Matrix of 4 x 4 unsiged integer values.",N,N],[6,"umat2","","Matrix of 2 x 2 unsiged integer values.",N,N],[6,"umat3","","Matrix of 3 x 3 unsiged integer values.",N,N],[6,"umat4","","Matrix of 4 x 4 unsiged integer values.",N,N],[6,"mat2x2","","Matrix of 2 x 2 floating-point values.",N,N],[6,"mat2x3","","Matrix of 2 x 3 floating-point values.",N,N],[6,"mat2x4","","Matrix of 2 x 4 floating-point values.",N,N],[6,"mat3x2","","Matrix of 3 x 2 floating-point values.",N,N],[6,"mat3x3","","Matrix of 3 x 3 floating-point values.",N,N],[6,"mat3x4","","Matrix of 3 x 4 floating-point values.",N,N],[6,"mat4x2","","Matrix of 4 x 2 floating-point values.",N,N],[6,"mat4x3","","Matrix of 4 x 3 floating-point values.",N,N],[6,"mat4x4","","Matrix of 4 x 4 floating-point values.",N,N],[6,"mat2","","Matrix of 2 x 2 floating-point values.",N,N],[6,"mat3","","Matrix of 3 x 3 floating-point values.",N,N],[6,"mat4","","Matrix of 4 x 4 floating-point values.",N,N],[6,"dmat2x2","","Matrix of 2 x 2 double-precision floating-point values.",N,N],[6,"dmat2x3","","Matrix of 2 x 3 double-precision floating-point values.",N,N],[6,"dmat2x4","","Matrix of 2 x 4 double-precision floating-point values.",N,N],[6,"dmat3x2","","Matrix of 3 x 2 double-precision floating-point values.",N,N],[6,"dmat3x3","","Matrix of 3 x 3 double-precision floating-point values.",N,N],[6,"dmat3x4","","Matrix of 3 x 4 double-precision floating-point values.",N,N],[6,"dmat4x2","","Matrix of 4 x 2 double-precision floating-point values.",N,N],[6,"dmat4x3","","Matrix of 4 x 3 double-precision floating-point values.",N,N],[6,"dmat4x4","","Matrix of 4 x 4 double-precision floating-point values.",N,N],[6,"dmat2","","Matrix of 2 x 2 double-precision floating-point values.",N,N],[6,"dmat3","","Matrix of 3 x 3 double-precision floating-point values.",N,N],[6,"dmat4","","Matrix of 4 x 4 double-precision floating-point values.",N,N],[6,"int","","Signed integer value.",N,N],[6,"uint","","Unsigned integer value.",N,N],[6,"float","","floating-point value.",N,N],[6,"double","","Double-precision floating-point value.",N,N],[8,"Std140","","Special marker trait implemented only for `std140` types.",N,N],[8,"Uniform","","Structure to transform data from rust's structure to the raw data ready to upload to UBO. Users should prepfer to use `derive(Uniform)` instead of implementing this manually.",N,N],[16,"Align","","ZST that enforces alignment required for this type.",19,N],[10,"align","","The value of the `Align`.",19,N],[16,"Std140","","Type that contain same data with memory layout matching glsl's `layout(std140)`.",19,N],[10,"std140","","Get aligned data from structure.",19,N],[11,"align","","",20,[[],["align4"]]],[11,"std140","","",20,[[["self"]],["int"]]],[11,"align","","",21,[[],["align4"]]],[11,"std140","","",21,[[["self"]],["uint"]]],[11,"align","","",22,[[],["align4"]]],[11,"std140","","",22,[[["self"]],["float"]]],[11,"align","","",23,[[],["align8"]]],[11,"std140","","",23,[[["self"]],["double"]]],[11,"from","","",24,[[["matrix2",["int"]]],["self"]]],[11,"from","","",25,[[["matrix3",["int"]]],["self"]]],[11,"from","","",26,[[["matrix4",["int"]]],["self"]]],[11,"from","","",27,[[["matrix2",["uint"]]],["self"]]],[11,"from","","",28,[[["matrix3",["uint"]]],["self"]]],[11,"from","","",29,[[["matrix4",["uint"]]],["self"]]],[11,"from","","",30,[[["matrix2",["float"]]],["self"]]],[11,"from","","",31,[[["matrix3",["float"]]],["self"]]],[11,"from","","",32,[[["matrix4",["float"]]],["self"]]],[11,"from","","",33,[[["matrix2",["double"]]],["self"]]],[11,"from","","",34,[[["matrix3",["double"]]],["self"]]],[11,"from","","",35,[[["matrix4",["double"]]],["self"]]]],"paths":[[3,"Element"],[3,"Array"],[3,"boolean"],[3,"bvec2"],[3,"bvec3"],[3,"bvec4"],[3,"ivec2"],[3,"ivec3"],[3,"ivec4"],[3,"uvec2"],[3,"uvec3"],[3,"uvec4"],[3,"vec2"],[3,"vec3"],[3,"vec4"],[3,"dvec2"],[3,"dvec3"],[3,"dvec4"],[3,"ArrayIter"],[8,"Uniform"],[6,"int"],[6,"uint"],[6,"float"],[6,"double"],[6,"imat2"],[6,"imat3"],[6,"imat4"],[6,"umat2"],[6,"umat3"],[6,"umat4"],[6,"mat2"],[6,"mat3"],[6,"mat4"],[6,"dmat2"],[6,"dmat3"],[6,"dmat4"]]};
searchIndex["glsl_layout_derive"]={"doc":"","items":[[5,"uniform","glsl_layout_derive","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["gltf"]={"doc":"glTF 2.0 loader","items":[[4,"Semantic","gltf","Vertex attribute semantic name.",N,N],[13,"Positions","","XYZ vertex positions.",0,N],[13,"Normals","","XYZ vertex normals.",0,N],[13,"Tangents","","XYZW vertex tangents where the `w` component is a sign value indicating the handedness of the tangent basis.",0,N],[13,"Colors","","RGB or RGBA vertex color.",0,N],[13,"TexCoords","","UV texture co-ordinates.",0,N],[13,"Joints","","Joint indices.",0,N],[13,"Weights","","Joint weights.",0,N],[3,"Animation","","A keyframe animation.",N,N],[3,"Accessor","","A typed view into a buffer view.",N,N],[3,"Buffer","","A buffer points to binary data representing geometry, animations, or skins.",N,N],[3,"Camera","","A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene.",N,N],[3,"Image","","Image data used to create a texture.",N,N],[3,"Material","","The material appearance of a primitive.",N,N],[3,"Mesh","","A set of primitives to be rendered.",N,N],[3,"Primitive","","Geometry to be rendered with the given material.",N,N],[3,"Node","","A node in the node hierarchy.",N,N],[3,"Scene","","The root nodes of a scene.",N,N],[3,"Skin","","Joints and matrices defining a skin.",N,N],[3,"Texture","","A texture and its sampler.",N,N],[3,"Gltf","","glTF JSON wrapper plus binary payload.",N,N],[12,"document","","The glTF JSON wrapper.",1,N],[12,"blob","","The glTF binary payload in the case of binary glTF.",1,N],[3,"Document","","glTF JSON wrapper.",N,N],[4,"Error","","Represents a runtime error.",N,N],[13,"Base64","","Base 64 decoding error.",2,N],[13,"Binary","","GLB parsing error.",2,N],[13,"BufferLength","","Buffer length does not match expected length.",2,N],[12,"buffer","gltf::Error","The index of the offending buffer.",2,N],[12,"expected","","The expected buffer length in bytes.",2,N],[12,"actual","","The number of bytes actually available.",2,N],[13,"Deserialize","gltf","JSON deserialization error.",2,N],[13,"Io","","Standard I/O error.",2,N],[13,"Image","","Image decoding error.",2,N],[13,"MissingBlob","","The `BIN` chunk of binary glTF is referenced but does not exist.",2,N],[13,"UnsupportedImageEncoding","","Unsupported image encoding.",2,N],[13,"UnsupportedScheme","","Unsupported URI scheme.",2,N],[13,"Validation","","glTF validation error.",2,N],[5,"import","","Import some glTF 2.0 from the file system.",N,[[["p"]],["result"]]],[0,"accessor","","Accessors for reading vertex attributes from buffer views. # Basic usage",N,N],[4,"DataType","gltf::accessor","The component data type.",N,N],[13,"I8","","Corresponds to `GL_BYTE`.",3,N],[13,"U8","","Corresponds to `GL_UNSIGNED_BYTE`.",3,N],[13,"I16","","Corresponds to `GL_SHORT`.",3,N],[13,"U16","","Corresponds to `GL_UNSIGNED_SHORT`.",3,N],[13,"U32","","Corresponds to `GL_UNSIGNED_INT`.",3,N],[13,"F32","","Corresponds to `GL_FLOAT`.",3,N],[4,"Dimensions","","Specifies whether an attribute, vector, or matrix.",N,N],[13,"Scalar","","Scalar quantity.",4,N],[13,"Vec2","","2D vector.",4,N],[13,"Vec3","","3D vector.",4,N],[13,"Vec4","","4D vector.",4,N],[13,"Mat2","","2x2 matrix.",4,N],[13,"Mat3","","3x3 matrix.",4,N],[13,"Mat4","","4x4 matrix.",4,N],[3,"Iter","","Visits the items in an [`Accessor`].",N,N],[3,"Accessor","","A typed view into a buffer view.",N,N],[0,"util","","Utility functions.",N,N],[3,"Iter","gltf::accessor::util","Visits the items in an [`Accessor`].",N,N],[8,"Item","","Represents items that can be read by an [`Accessor`].",N,N],[10,"from_slice","","Create an object of this type from a byte slice.",5,N],[11,"clone","","",6,[[["self"]],["iter"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor.",6,N],[11,"next","","",6,[[["self"]],["option"]]],[11,"nth","","",6,[[["self"],["usize"]],["option"]]],[11,"last","","",6,[[["self"]],["option"]]],[11,"count","","",6,[[["self"]],["usize"]]],[11,"size_hint","","",6,N],[0,"sparse","gltf::accessor","Contains data structures for sparse storage.",N,N],[3,"Indices","gltf::accessor::sparse","Indices of those attributes that deviate from their initialization value.",N,N],[3,"Sparse","","Sparse storage of attributes that deviate from their initialization value.",N,N],[3,"Values","","Array of size `count * number_of_components` storing the displaced accessor attributes pointed by `accessor::sparse::Indices`.",N,N],[4,"IndexType","","The index data type.",N,N],[13,"U8","","Corresponds to `GL_UNSIGNED_BYTE`.",7,N],[13,"U16","","Corresponds to `GL_UNSIGNED_SHORT`.",7,N],[13,"U32","","Corresponds to `GL_UNSIGNED_INT`.",7,N],[11,"clone","","",7,[[["self"]],["indextype"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"view","","Returns the buffer view containing the sparse indices.",8,[[["self"]],["view"]]],[11,"offset","","The offset relative to the start of the parent buffer view in bytes.",8,[[["self"]],["u32"]]],[11,"index_type","","The data type of each index.",8,[[["self"]],["indextype"]]],[11,"extras","","Optional application specific data.",8,[[["self"]],["extras"]]],[11,"count","","Returns the number of attributes encoded in this sparse accessor.",9,[[["self"]],["u32"]]],[11,"indices","","Returns an index array of size `count` that points to those accessor attributes that deviate from their initialization value.",9,[[["self"]],["indices"]]],[11,"values","","Returns an array of size `count * number_of_components`, storing the displaced accessor attributes pointed by `indices`.",9,[[["self"]],["values"]]],[11,"extras","","Optional application specific data.",9,[[["self"]],["extras"]]],[11,"view","","Returns the buffer view containing the sparse values.",10,[[["self"]],["view"]]],[11,"offset","","The offset relative to the start of the parent buffer view in bytes.",10,[[["self"]],["u32"]]],[11,"extras","","Optional application specific data.",10,[[["self"]],["extras"]]],[11,"size","","Returns the number of bytes this value represents.",7,[[["self"]],["usize"]]],[8,"Item","gltf::accessor","Represents items that can be read by an [`Accessor`].",N,N],[10,"from_slice","","Create an object of this type from a byte slice.",5,N],[11,"clone","","",11,[[["self"]],["accessor"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"index","","Returns the internal JSON index.",11,[[["self"]],["usize"]]],[11,"size","","Returns the size of each component that this accessor describes.",11,[[["self"]],["usize"]]],[11,"view","","Returns the buffer view this accessor reads from.",11,[[["self"]],["view"]]],[11,"offset","","Returns the offset relative to the start of the parent buffer view in bytes.",11,[[["self"]],["usize"]]],[11,"count","","Returns the number of components within the buffer view - not to be confused with the number of bytes in the buffer view.",11,[[["self"]],["usize"]]],[11,"data_type","","Returns the data type of components in the attribute.",11,[[["self"]],["datatype"]]],[11,"extras","","Optional application specific data.",11,[[["self"]],["extras"]]],[11,"dimensions","","Specifies if the attribute is a scalar, vector, or matrix.",11,[[["self"]],["dimensions"]]],[11,"min","","Returns the minimum value of each component in this attribute.",11,[[["self"]],["option",["value"]]]],[11,"max","","Returns the maximum value of each component in this attribute.",11,[[["self"]],["option",["value"]]]],[11,"name","","Optional user-defined name for this object.",11,[[["self"]],["option",["str"]]]],[11,"normalized","","Specifies whether integer data values should be normalized.",11,[[["self"]],["bool"]]],[11,"sparse","","Returns sparse storage of attributes that deviate from their initialization value.",11,[[["self"]],["option",["sparse"]]]],[0,"animation","gltf","Animations, their channels, targets, and samplers.",N,N],[4,"Interpolation","gltf::animation","Specifies an interpolation algorithm.",N,N],[13,"Linear","","Linear interpolation.",12,N],[13,"Step","","Step interpolation.",12,N],[13,"CatmullRomSpline","","Uniform Catmull-Rom spline interpolation.",12,N],[13,"CubicSpline","","Cubic spline interpolation.",12,N],[4,"Property","","Specifies a property to animate.",N,N],[13,"Translation","","XYZ translation vector.",13,N],[13,"Rotation","","XYZW rotation quaternion.",13,N],[13,"Scale","","XYZ scale vector.",13,N],[13,"MorphTargetWeights","","Weights of morph targets.",13,N],[3,"Reader","","Animation channel reader.",N,N],[3,"Animation","","A keyframe animation.",N,N],[3,"Channel","","Targets an animation's sampler at a node's property.",N,N],[3,"Sampler","","Defines a keyframe graph (but not its target).",N,N],[3,"Target","","The node and TRS property that an animation channel targets.",N,N],[0,"iter","","Iterators.",N,N],[3,"Channels","gltf::animation::iter","An `Iterator` that visits the channels of an animation.",N,N],[3,"Samplers","","An `Iterator` that visits the samplers of an animation.",N,N],[11,"clone","","",14,[[["self"]],["channels"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["samplers"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"next","","",15,[[["self"]],["option"]]],[0,"util","gltf::animation","Utility functions.",N,N],[3,"Reader","gltf::animation::util","Animation channel reader.",N,N],[4,"Rotations","","Rotation animations",N,N],[13,"I8","","Rotations of type `[i8; 4]`.",16,N],[13,"U8","","Rotations of type `[u8; 4]`.",16,N],[13,"I16","","Rotations of type `[i16; 4]`.",16,N],[13,"U16","","Rotations of type `[u16; 4]`.",16,N],[13,"F32","","Rotations of type `[f32; 4]`.",16,N],[4,"MorphTargetWeights","","Morph-target weight animations.",N,N],[13,"I8","","Weights of type `i8`.",17,N],[13,"U8","","Weights of type `u8`.",17,N],[13,"I16","","Weights of type `i16`.",17,N],[13,"U16","","Weights of type `u16`.",17,N],[13,"F32","","Weights of type `f32`.",17,N],[4,"ReadOutputs","","Animation output sampler values.",N,N],[13,"Translations","","XYZ translations of type `[f32; 3]`.",18,N],[13,"Rotations","","Rotation animations.",18,N],[13,"Scales","","XYZ scales of type `[f32; 3]`.",18,N],[13,"MorphTargetWeights","","Morph target animations.",18,N],[0,"rotations","","Casting iterator adapters for rotations.",N,N],[3,"CastingIter","gltf::animation::util::rotations","Casting iterator for `Rotations`.",N,N],[3,"I8","","Type which describes how to cast any weight into i8.",N,N],[3,"U8","","Type which describes how to cast any weight into u8.",N,N],[3,"I16","","Type which describes how to cast any weight into i16.",N,N],[3,"U16","","Type which describes how to cast any weight into u16.",N,N],[3,"F32","","Type which describes how to cast any weight into f32.",N,N],[8,"Cast","","Trait for types which describe casting behaviour.",N,N],[16,"Output","","Output type.",19,N],[10,"cast_i8","","Cast from i8.",19,N],[10,"cast_u8","","Cast from u8.",19,N],[10,"cast_i16","","Cast from i16.",19,N],[10,"cast_u16","","Cast from u16.",19,N],[10,"cast_f32","","Cast from f32.",19,N],[11,"clone","","",20,[[["self"]],["castingiter"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["i8"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["u8"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["i16"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["u16"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["f32"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"unwrap","","Unwrap underlying `Rotations` object.",20,[[["self"]],["rotations"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"nth","","",20,[[["self"],["usize"]],["option"]]],[11,"last","","",20,[[["self"]],["option"]]],[11,"count","","",20,[[["self"]],["usize"]]],[11,"size_hint","","",20,N],[11,"cast_i8","","",21,N],[11,"cast_u8","","",21,N],[11,"cast_i16","","",21,N],[11,"cast_u16","","",21,N],[11,"cast_f32","","",21,N],[11,"cast_i8","","",23,N],[11,"cast_u8","","",23,N],[11,"cast_i16","","",23,N],[11,"cast_u16","","",23,N],[11,"cast_f32","","",23,N],[11,"cast_i8","","",24,N],[11,"cast_u8","","",24,N],[11,"cast_i16","","",24,N],[11,"cast_u16","","",24,N],[11,"cast_f32","","",24,N],[11,"cast_i8","","",25,N],[11,"cast_u8","","",25,N],[11,"cast_i16","","",25,N],[11,"cast_u16","","",25,N],[11,"cast_f32","","",25,N],[0,"morph_target_weights","gltf::animation::util","Casting iterator adapters for morph target weights.",N,N],[3,"CastingIter","gltf::animation::util::morph_target_weights","Casting iterator for `MorphTargetWeights`.",N,N],[3,"I8","","Type which describes how to cast any weight into i8.",N,N],[3,"U8","","Type which describes how to cast any weight into u8.",N,N],[3,"I16","","Type which describes how to cast any weight into i16.",N,N],[3,"U16","","Type which describes how to cast any weight into u16.",N,N],[3,"F32","","Type which describes how to cast any weight into f32.",N,N],[8,"Cast","","Trait for types which describe casting behaviour.",N,N],[16,"Output","","Output type.",26,N],[10,"cast_i8","","Cast from i8.",26,N],[10,"cast_u8","","Cast from u8.",26,N],[10,"cast_i16","","Cast from i16.",26,N],[10,"cast_u16","","Cast from u16.",26,N],[10,"cast_f32","","Cast from f32.",26,N],[11,"clone","","",27,[[["self"]],["castingiter"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["i8"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["u8"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["i16"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["u16"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["f32"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"unwrap","","Unwrap underlying `MorphTargetWeights` object.",27,[[["self"]],["morphtargetweights"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"nth","","",27,[[["self"],["usize"]],["option"]]],[11,"last","","",27,[[["self"]],["option"]]],[11,"count","","",27,[[["self"]],["usize"]]],[11,"size_hint","","",27,N],[11,"cast_i8","","",28,N],[11,"cast_u8","","",28,N],[11,"cast_i16","","",28,N],[11,"cast_u16","","",28,N],[11,"cast_f32","","",28,N],[11,"cast_i8","","",29,N],[11,"cast_u8","","",29,N],[11,"cast_i16","","",29,N],[11,"cast_u16","","",29,N],[11,"cast_f32","","",29,N],[11,"cast_i8","","",30,N],[11,"cast_u8","","",30,N],[11,"cast_i16","","",30,N],[11,"cast_u16","","",30,N],[11,"cast_f32","","",30,N],[11,"cast_i8","","",31,N],[11,"cast_u8","","",31,N],[11,"cast_i16","","",31,N],[11,"cast_u16","","",31,N],[11,"cast_f32","","",31,N],[11,"cast_i8","","",32,N],[11,"cast_u8","","",32,N],[11,"cast_i16","","",32,N],[11,"cast_u16","","",32,N],[11,"cast_f32","","",32,N],[6,"ReadInputs","gltf::animation::util","Animation input sampler values of type `f32`.",N,N],[6,"Translations","","Animation output sampler values of type `[f32; 3]`.",N,N],[6,"Scales","","Animation output sampler values of type `[f32; 3]`.",N,N],[11,"clone","","",33,[[["self"]],["reader"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["rotations"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["morphtargetweights"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"into_i8","","Reinterpret rotations as u16.  Lossy if underlying iterator yields u8, i16, u16 or f32.",16,[[["self"]],["castingiter",["i8"]]]],[11,"into_u8","","Reinterpret rotations as u16.  Lossy if underlying iterator yields i16, u16 or f32.",16,[[["self"]],["castingiter",["u8"]]]],[11,"into_i16","","Reinterpret rotations as u16.  Lossy if underlying iterator yields u16 or f32.",16,[[["self"]],["castingiter",["i16"]]]],[11,"into_u16","","Reinterpret rotations as u16.  Lossy if underlying iterator yields f32.",16,[[["self"]],["castingiter",["u16"]]]],[11,"into_f32","","Reinterpret rotations as f32.  Lossy if underlying iterator yields i16 or u16.",16,[[["self"]],["castingiter",["f32"]]]],[11,"into_i8","","Reinterpret morph weights as u16.  Lossy if underlying iterator yields u8, i16, u16 or f32.",17,[[["self"]],["castingiter",["i8"]]]],[11,"into_u8","","Reinterpret morph weights as u16.  Lossy if underlying iterator yields i16, u16 or f32.",17,[[["self"]],["castingiter",["u8"]]]],[11,"into_i16","","Reinterpret morph weights as u16.  Lossy if underlying iterator yields u16 or f32.",17,[[["self"]],["castingiter",["i16"]]]],[11,"into_u16","","Reinterpret morph weights as u16.  Lossy if underlying iterator yields f32.",17,[[["self"]],["castingiter",["u16"]]]],[11,"into_f32","","Reinterpret morph weights as f32.  Lossy if underlying iterator yields i16 or u16.",17,[[["self"]],["castingiter",["f32"]]]],[11,"read_inputs","","Visits the input samples of a channel.",33,[[["self"]],["option",["readinputs"]]]],[11,"read_outputs","","Visits the output samples of a channel.",33,[[["self"]],["option",["readoutputs"]]]],[11,"clone","gltf::animation","",34,[[["self"]],["animation"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["channel"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",36,[[["self"]],["sampler"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["target"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"index","","Returns the internal JSON index.",34,[[["self"]],["usize"]]],[11,"extras","","Optional application specific data.",34,[[["self"]],["extras"]]],[11,"channels","","Returns an `Iterator` over the animation channels.",34,[[["self"]],["channels"]]],[11,"name","","Optional user-defined name for this object.",34,[[["self"]],["option",["str"]]]],[11,"samplers","","Returns an `Iterator` over the animation samplers.",34,[[["self"]],["samplers"]]],[11,"animation","","Returns the parent `Animation` struct.",35,[[["self"]],["animation"]]],[11,"sampler","","Returns the sampler in this animation used to compute the value for the target.",35,[[["self"]],["sampler"]]],[11,"target","","Returns the node and property to target.",35,[[["self"]],["target"]]],[11,"reader","","Constructs an animation channel reader.",35,[[["self"],["f"]],["reader"]]],[11,"extras","","Optional application specific data.",35,[[["self"]],["extras"]]],[11,"animation","","Returns the parent `Animation` struct.",37,[[["self"]],["animation"]]],[11,"extras","","Optional application specific data.",37,[[["self"]],["extras"]]],[11,"node","","Returns the target node.",37,[[["self"]],["node"]]],[11,"property","","Returns the node's property to modify or the 'weights' of the morph targets it instantiates.",37,[[["self"]],["property"]]],[11,"animation","","Returns the parent `Animation` struct.",36,[[["self"]],["animation"]]],[11,"extras","","Optional application specific data.",36,[[["self"]],["extras"]]],[11,"input","","Returns the accessor containing the keyframe input values (e.g. time).",36,[[["self"]],["accessor"]]],[11,"interpolation","","Returns the keyframe interpolation algorithm.",36,[[["self"]],["interpolation"]]],[11,"output","","Returns the accessor containing the keyframe output values.",36,[[["self"]],["accessor"]]],[0,"binary","gltf","Primitives for working with binary glTF.",N,N],[3,"Glb","gltf::binary","The contents of a .glb file.",N,N],[12,"header","","The header section of the `.glb` file.",38,N],[12,"json","","The JSON section of the `.glb` file.",38,N],[12,"bin","","The optional BIN section of the `.glb` file.",38,N],[3,"Header","","The header section of a .glb file.",N,N],[12,"magic","","Must be `b\"glTF\"`.",39,N],[12,"version","","Must be `2`.",39,N],[12,"length","","Must match the length of the parent .glb file.",39,N],[4,"Error","","Represents a Glb loader error.",N,N],[13,"Io","","Io error occured.",40,N],[13,"Version","","Unsupported version.",40,N],[13,"Magic","","Magic says that file is not glTF.",40,N],[13,"Length","","Length specified in GLB header exceeeds that of slice.",40,N],[12,"length","gltf::binary::Error","length specified in GLB header.",40,N],[12,"length_read","","Actual length of data read.",40,N],[13,"ChunkLength","gltf::binary","Stream ended before we could read the chunk.",40,N],[12,"ty","gltf::binary::Error","chunkType error happened at.",40,N],[12,"length","","chunkLength.",40,N],[12,"length_read","","Actual length of data read.",40,N],[13,"ChunkType","gltf::binary","Chunk of this chunkType was not expected.",40,N],[13,"UnknownChunkType","","Unknown chunk type.",40,N],[4,"ChunkType","","GLB chunk type.",N,N],[13,"Json","","`JSON` chunk.",41,N],[13,"Bin","","`BIN` chunk.",41,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["glb"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["header"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["chunktype"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"to_writer","","Writes binary glTF to a writer.",38,[[["self"],["w"]],["result",["error"]]]],[11,"to_vec","","Writes binary glTF to a byte vector.",38,[[["self"]],["result",["vec","error"]]]],[11,"from_slice","","Splits loaded GLB into its three chunks.",38,N],[11,"from_reader","","Does the loading job for you.  Provided buf will be cleared before new data will be written.  When error happens, if only header was read, buf will not be mutated, otherwise, buf will be empty.",38,[[["r"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"description","","",40,[[["self"]],["str"]]],[0,"buffer","gltf","Buffers and buffer views.",N,N],[4,"Target","gltf::buffer","Specifies the target a GPU buffer should be bound to.",N,N],[13,"ArrayBuffer","","Corresponds to `GL_ARRAY_BUFFER`.",42,N],[13,"ElementArrayBuffer","","Corresponds to `GL_ELEMENT_ARRAY_BUFFER`.",42,N],[3,"Buffer","","A buffer points to binary data representing geometry, animations, or skins.",N,N],[3,"View","","A view into a buffer generally representing a subset of the buffer.",N,N],[3,"Data","","Buffer data belonging to an imported glTF asset.",N,N],[12,"0","","",43,N],[4,"Source","","Describes a buffer data source.",N,N],[13,"Bin","","Buffer data is contained in the `BIN` section of binary glTF.",44,N],[13,"Uri","","Buffer data is contained in an external data source.",44,N],[11,"clone","","",45,[[["self"]],["buffer"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["view"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["source"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["data"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"deref","","",43,N],[11,"index","","Returns the internal JSON index.",45,[[["self"]],["usize"]]],[11,"source","","Returns the buffer data source.",45,[[["self"]],["source"]]],[11,"length","","The length of the buffer in bytes.",45,[[["self"]],["usize"]]],[11,"name","","Optional user-defined name for this object.",45,[[["self"]],["option",["str"]]]],[11,"extras","","Optional application specific data.",45,[[["self"]],["extras"]]],[11,"index","","Returns the internal JSON index.",46,[[["self"]],["usize"]]],[11,"buffer","","Returns the parent `Buffer`.",46,[[["self"]],["buffer"]]],[11,"length","","Returns the length of the buffer view in bytes.",46,[[["self"]],["usize"]]],[11,"offset","","Returns the offset into the parent buffer in bytes.",46,[[["self"]],["usize"]]],[11,"stride","","Returns the stride in bytes between vertex attributes or other interleavable data. When `None`, data is assumed to be tightly packed.",46,[[["self"]],["option",["usize"]]]],[11,"name","","Optional user-defined name for this object.",46,[[["self"]],["option",["str"]]]],[11,"target","","Optional target the buffer should be bound to.",46,[[["self"]],["option",["target"]]]],[11,"extras","","Optional application specific data.",46,[[["self"]],["extras"]]],[0,"camera","gltf","Cameras and their projections.",N,N],[3,"Camera","gltf::camera","A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene.",N,N],[3,"Orthographic","","Values for an orthographic camera projection.",N,N],[3,"Perspective","","Values for a perspective camera projection.",N,N],[4,"Projection","","A camera's projection.",N,N],[13,"Orthographic","","Describes an orthographic projection.",47,N],[13,"Perspective","","Describes a perspective projection.",47,N],[11,"clone","","",47,[[["self"]],["projection"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["camera"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["orthographic"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["perspective"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"index","","Returns the internal JSON index.",48,[[["self"]],["usize"]]],[11,"name","","Optional user-defined name for this object.",48,[[["self"]],["option",["str"]]]],[11,"projection","","Returns the camera's projection.",48,[[["self"]],["projection"]]],[11,"extras","","Optional application specific data.",48,[[["self"]],["extras"]]],[11,"xmag","","The horizontal magnification of the view.",49,[[["self"]],["f32"]]],[11,"ymag","","The vertical magnification of the view.",49,[[["self"]],["f32"]]],[11,"zfar","","The distance to the far clipping plane.",49,[[["self"]],["f32"]]],[11,"znear","","The distance to the near clipping plane.",49,[[["self"]],["f32"]]],[11,"extras","","Optional application specific data.",49,[[["self"]],["extras"]]],[11,"aspect_ratio","","Aspect ratio of the field of view.",50,[[["self"]],["option",["f32"]]]],[11,"yfov","","The vertical field of view in radians.",50,[[["self"]],["f32"]]],[11,"zfar","","The distance to the far clipping plane.",50,[[["self"]],["option",["f32"]]]],[11,"znear","","The distance to the near clipping plane.",50,[[["self"]],["f32"]]],[11,"extras","","Optional application specific data.",50,[[["self"]],["extras"]]],[0,"image","gltf","Images that may be used by textures.",N,N],[3,"Image","gltf::image","Image data used to create a texture.",N,N],[3,"Data","","Image data belonging to an imported glTF asset.",N,N],[12,"pixels","","The image pixel data (8 bits per channel).",51,N],[12,"format","","The image pixel data format.",51,N],[12,"width","","The image height in pixels.",51,N],[12,"height","","The image width in pixels.",51,N],[4,"Format","","Format of image pixel data.",N,N],[13,"R8","","Red only.",52,N],[13,"R8G8","","Red, green.",52,N],[13,"R8G8B8","","Red, green, blue.",52,N],[13,"R8G8B8A8","","Red, green, blue, alpha.",52,N],[4,"Source","","Describes an image data source.",N,N],[13,"View","","Image data is contained in a buffer view.",53,N],[12,"view","gltf::image::Source","The buffer view containing the encoded image data.",53,N],[12,"mime_type","","The image data MIME type.",53,N],[13,"Uri","gltf::image","Image data is contained in an external data source.",53,N],[12,"uri","gltf::image::Source","The URI of the external data source.",53,N],[12,"mime_type","","The image data MIME type, if provided.",53,N],[11,"clone","gltf::image","",52,[[["self"]],["format"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"hash","","",52,N],[11,"eq","","",52,[[["self"],["format"]],["bool"]]],[11,"clone","","",53,[[["self"]],["source"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"clone","","",54,[[["self"]],["image"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["data"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"index","","Returns the internal JSON index.",54,[[["self"]],["usize"]]],[11,"name","","Optional user-defined name for this object.",54,[[["self"]],["option",["str"]]]],[11,"source","","Returns the image data source.",54,[[["self"]],["source"]]],[11,"extras","","Optional application specific data.",54,[[["self"]],["extras"]]],[0,"iter","gltf","Iterators for walking the glTF node hierarchy.",N,N],[3,"ExtensionsUsed","gltf::iter","An `Iterator` that visits extension strings used by a glTF asset.",N,N],[3,"ExtensionsRequired","","An `Iterator` that visits extension strings required by a glTF asset.",N,N],[3,"Accessors","","An `Iterator` that visits every accessor in a glTF asset.",N,N],[3,"Animations","","An `Iterator` that visits every animation in a glTF asset.",N,N],[3,"Buffers","","An `Iterator` that visits every buffer in a glTF asset.",N,N],[3,"Views","","An `Iterator` that visits every buffer view in a glTF asset.",N,N],[3,"Cameras","","An `Iterator` that visits every camera in a glTF asset.",N,N],[3,"Images","","An `Iterator` that visits every pre-loaded image in a glTF asset.",N,N],[3,"Materials","","An `Iterator` that visits every material in a glTF asset.",N,N],[3,"Meshes","","An `Iterator` that visits every mesh in a glTF asset.",N,N],[3,"Nodes","","An `Iterator` that visits every node in a glTF asset.",N,N],[3,"Samplers","","An `Iterator` that visits every sampler in a glTF asset.",N,N],[3,"Scenes","","An `Iterator` that visits every scene in a glTF asset.",N,N],[3,"Skins","","An `Iterator` that visits every skin in a glTF asset.",N,N],[3,"Textures","","An `Iterator` that visits every texture in a glTF asset.",N,N],[11,"clone","","",55,[[["self"]],["extensionsused"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"clone","","",56,[[["self"]],["extensionsrequired"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",57,[[["self"]],["accessors"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"clone","","",58,[[["self"]],["animations"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"clone","","",59,[[["self"]],["buffers"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"clone","","",60,[[["self"]],["views"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"clone","","",61,[[["self"]],["cameras"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"clone","","",62,[[["self"]],["images"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"clone","","",63,[[["self"]],["materials"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"clone","","",64,[[["self"]],["meshes"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["nodes"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",66,[[["self"]],["samplers"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["scenes"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["skins"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",69,[[["self"]],["textures"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"next","","",57,[[["self"]],["option"]]],[11,"size_hint","","",57,N],[11,"next","","",58,[[["self"]],["option"]]],[11,"size_hint","","",58,N],[11,"next","","",59,[[["self"]],["option"]]],[11,"size_hint","","",59,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"next","","",56,[[["self"]],["option"]]],[11,"size_hint","","",56,N],[11,"next","","",60,[[["self"]],["option"]]],[11,"size_hint","","",60,N],[11,"next","","",61,[[["self"]],["option"]]],[11,"size_hint","","",61,N],[11,"next","","",62,[[["self"]],["option"]]],[11,"size_hint","","",62,N],[11,"next","","",63,[[["self"]],["option"]]],[11,"size_hint","","",63,N],[11,"next","","",64,[[["self"]],["option"]]],[11,"size_hint","","",64,N],[11,"next","","",65,[[["self"]],["option"]]],[11,"size_hint","","",65,N],[11,"next","","",66,[[["self"]],["option"]]],[11,"size_hint","","",66,N],[11,"next","","",67,[[["self"]],["option"]]],[11,"size_hint","","",67,N],[11,"next","","",68,[[["self"]],["option"]]],[11,"size_hint","","",68,N],[11,"next","","",69,[[["self"]],["option"]]],[11,"size_hint","","",69,N],[0,"material","gltf","Material properties of primitives.",N,N],[4,"AlphaMode","gltf::material","The alpha rendering mode of a material.",N,N],[13,"Opaque","","The alpha value is ignored and the rendered output is fully opaque.",70,N],[13,"Mask","","The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.",70,N],[13,"Blend","","The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.",70,N],[3,"Material","","The material appearance of a primitive.",N,N],[3,"PbrMetallicRoughness","","A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.",N,N],[3,"NormalTexture","","Defines the normal texture of a material.",N,N],[3,"OcclusionTexture","","Defines the occlusion texture of a material.",N,N],[11,"index","","Returns the internal JSON index if this `Material` was explicity defined.",71,[[["self"]],["option",["usize"]]]],[11,"alpha_cutoff","","The alpha cutoff value of the material.",71,[[["self"]],["f32"]]],[11,"alpha_mode","","The alpha rendering mode of the material.  The material's alpha rendering mode enumeration specifying the interpretation of the alpha value of the main factor and texture.",71,[[["self"]],["alphamode"]]],[11,"double_sided","","Specifies whether the material is double-sided.",71,[[["self"]],["bool"]]],[11,"name","","Optional user-defined name for this object.",71,[[["self"]],["option",["str"]]]],[11,"pbr_metallic_roughness","","Parameter values that define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.",71,[[["self"]],["pbrmetallicroughness"]]],[11,"normal_texture","","A tangent space normal map.",71,[[["self"]],["option",["normaltexture"]]]],[11,"occlusion_texture","","The occlusion map texture.",71,[[["self"]],["option",["occlusiontexture"]]]],[11,"emissive_texture","","The emissive map texture.",71,[[["self"]],["option",["info"]]]],[11,"emissive_factor","","The emissive color of the material.",71,N],[11,"extras","","Optional application specific data.",71,[[["self"]],["extras"]]],[11,"base_color_factor","","Returns the material's base color factor.",72,N],[11,"base_color_texture","","Returns the base color texture.",72,[[["self"]],["option",["info"]]]],[11,"metallic_factor","","Returns the metalness factor of the material.",72,[[["self"]],["f32"]]],[11,"roughness_factor","","Returns the roughness factor of the material.",72,[[["self"]],["f32"]]],[11,"metallic_roughness_texture","","The metallic-roughness texture.",72,[[["self"]],["option",["info"]]]],[11,"extras","","Optional application specific data.",72,[[["self"]],["extras"]]],[11,"scale","","Returns the scalar multiplier applied to each normal vector of the texture.",73,[[["self"]],["f32"]]],[11,"tex_coord","","The set index of the texture's `TEXCOORD` attribute.",73,[[["self"]],["u32"]]],[11,"texture","","Returns the referenced texture.",73,[[["self"]],["texture"]]],[11,"extras","","Optional application specific data.",73,[[["self"]],["extras"]]],[11,"strength","","Returns the scalar multiplier controlling the amount of occlusion applied.",74,[[["self"]],["f32"]]],[11,"tex_coord","","Returns the set index of the texture's `TEXCOORD` attribute.",74,[[["self"]],["u32"]]],[11,"texture","","Returns the referenced texture.",74,[[["self"]],["texture"]]],[11,"extras","","Optional application specific data.",74,[[["self"]],["extras"]]],[11,"as_ref","","",73,[[["self"]],["texture"]]],[11,"as_ref","","",74,[[["self"]],["texture"]]],[0,"mesh","gltf","Meshes and their primitives. # Basic usage",N,N],[4,"Mode","gltf::mesh","The type of primitives to render.",N,N],[13,"Points","","Corresponds to `GL_POINTS`.",75,N],[13,"Lines","","Corresponds to `GL_LINES`.",75,N],[13,"LineLoop","","Corresponds to `GL_LINE_LOOP`.",75,N],[13,"LineStrip","","Corresponds to `GL_LINE_STRIP`.",75,N],[13,"Triangles","","Corresponds to `GL_TRIANGLES`.",75,N],[13,"TriangleStrip","","Corresponds to `GL_TRIANGLE_STRIP`.",75,N],[13,"TriangleFan","","Corresponds to `GL_TRIANGLE_FAN`.",75,N],[4,"Semantic","","Vertex attribute semantic name.",N,N],[13,"Positions","","XYZ vertex positions.",0,N],[13,"Normals","","XYZ vertex normals.",0,N],[13,"Tangents","","XYZW vertex tangents where the `w` component is a sign value indicating the handedness of the tangent basis.",0,N],[13,"Colors","","RGB or RGBA vertex color.",0,N],[13,"TexCoords","","UV texture co-ordinates.",0,N],[13,"Joints","","Joint indices.",0,N],[13,"Weights","","Joint weights.",0,N],[3,"Bounds","","The minimum and maximum values for a generic accessor.",N,N],[12,"min","","Minimum value.",76,N],[12,"max","","Maximum value.",76,N],[3,"Mesh","","A set of primitives to be rendered.",N,N],[3,"MorphTarget","","A single morph target for a mesh primitive.",N,N],[3,"Primitive","","Geometry to be rendered with the given material.",N,N],[3,"Reader","","Mesh primitive reader.",N,N],[0,"iter","","Iterators.",N,N],[3,"MorphTargets","gltf::mesh::iter","An `Iterator` that visits the morph targets of a `Primitive`.",N,N],[3,"Attributes","","An `Iterator` that visits the attributes of a `Primitive`.",N,N],[3,"Primitives","","An `Iterator` that visits the primitives of a `Mesh`.",N,N],[11,"clone","","",77,[[["self"]],["morphtargets"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["attributes"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"clone","","",79,[[["self"]],["primitives"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"next","","",78,[[["self"]],["option"]]],[11,"size_hint","","",78,N],[11,"next","","",79,[[["self"]],["option"]]],[11,"size_hint","","",79,N],[11,"next","","",77,[[["self"]],["option"]]],[11,"size_hint","","",77,N],[0,"util","gltf::mesh","Utility functions.",N,N],[3,"ReadMorphTargets","gltf::mesh::util","Morph targets.",N,N],[4,"ReadColors","","Vertex colors.",N,N],[13,"RgbU8","","RGB vertex color of type `[u8; 3]>`.",80,N],[13,"RgbU16","","RGB vertex color of type `[u16; 3]>`.",80,N],[13,"RgbF32","","RGB vertex color of type `[f32; 3]`.",80,N],[13,"RgbaU8","","RGBA vertex color of type `[u8; 4]>`.",80,N],[13,"RgbaU16","","RGBA vertex color of type `[u16; 4]>`.",80,N],[13,"RgbaF32","","RGBA vertex color of type `[f32; 4]`.",80,N],[4,"ReadIndices","","Index data.",N,N],[13,"U8","","Index data of type U8",81,N],[13,"U16","","Index data of type U16",81,N],[13,"U32","","Index data of type U32",81,N],[4,"ReadJoints","","Vertex joints.",N,N],[13,"U8","","Joints of type `[u8; 4]`. Refer to the documentation on morph targets and skins for more information.",82,N],[13,"U16","","Joints of type `[u16; 4]`. Refer to the documentation on morph targets and skins for more information.",82,N],[4,"ReadTexCoords","","UV texture co-ordinates.",N,N],[13,"U8","","UV texture co-ordinates of type `[u8; 2]>`.",83,N],[13,"U16","","UV texture co-ordinates of type `[u16; 2]>`.",83,N],[13,"F32","","UV texture co-ordinates of type `[f32; 2]`.",83,N],[4,"ReadWeights","","Weights.",N,N],[13,"U8","","Weights of type `[u8; 4]`.",84,N],[13,"U16","","Weights of type `[u16; 4]`.",84,N],[13,"F32","","Weights of type `[f32; 4]`.",84,N],[0,"colors","","Casting iterator adapters for colors.",N,N],[3,"CastingIter","gltf::mesh::util::colors","Casting iterator for `Colors`.",N,N],[3,"RgbU8","","Type which describes how to cast any color into RGB u8.",N,N],[3,"RgbU16","","Type which describes how to cast any color into RGB u16.",N,N],[3,"RgbF32","","Type which describes how to cast any color into RGB f32.",N,N],[3,"RgbaU8","","Type which describes how to cast any color into RGBA u8.",N,N],[3,"RgbaU16","","Type which describes how to cast any color into RGBA u16.",N,N],[3,"RgbaF32","","Type which describes how to cast any color into RGBA f32.",N,N],[8,"Cast","","Trait for types which describe casting behaviour.",N,N],[16,"Output","","Output type.",85,N],[10,"cast_rgb_u8","","Cast from RGB u8.",85,N],[10,"cast_rgb_u16","","Cast from RGB u16.",85,N],[10,"cast_rgb_f32","","Cast from RGB f32.",85,N],[10,"cast_rgba_u8","","Cast from RGBA u8.",85,N],[10,"cast_rgba_u16","","Cast from RGBA u16.",85,N],[10,"cast_rgba_f32","","Cast from RGBA f32.",85,N],[11,"clone","","",86,[[["self"]],["castingiter"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",87,[[["self"]],["rgbu8"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["rgbu16"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["rgbf32"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",90,[[["self"]],["rgbau8"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"clone","","",91,[[["self"]],["rgbau16"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"clone","","",92,[[["self"]],["rgbaf32"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"unwrap","","Unwrap underlying `ReadColors` object.",86,[[["self"]],["readcolors"]]],[11,"next","","",86,[[["self"]],["option"]]],[11,"nth","","",86,[[["self"],["usize"]],["option"]]],[11,"last","","",86,[[["self"]],["option"]]],[11,"count","","",86,[[["self"]],["usize"]]],[11,"size_hint","","",86,N],[11,"cast_rgb_u8","","",87,N],[11,"cast_rgb_u16","","",87,N],[11,"cast_rgb_f32","","",87,N],[11,"cast_rgba_u8","","",87,N],[11,"cast_rgba_u16","","",87,N],[11,"cast_rgba_f32","","",87,N],[11,"cast_rgb_u8","","",88,N],[11,"cast_rgb_u16","","",88,N],[11,"cast_rgb_f32","","",88,N],[11,"cast_rgba_u8","","",88,N],[11,"cast_rgba_u16","","",88,N],[11,"cast_rgba_f32","","",88,N],[11,"cast_rgb_u8","","",89,N],[11,"cast_rgb_u16","","",89,N],[11,"cast_rgb_f32","","",89,N],[11,"cast_rgba_u8","","",89,N],[11,"cast_rgba_u16","","",89,N],[11,"cast_rgba_f32","","",89,N],[11,"cast_rgb_u8","","",90,N],[11,"cast_rgb_u16","","",90,N],[11,"cast_rgb_f32","","",90,N],[11,"cast_rgba_u8","","",90,N],[11,"cast_rgba_u16","","",90,N],[11,"cast_rgba_f32","","",90,N],[11,"cast_rgb_u8","","",91,N],[11,"cast_rgb_u16","","",91,N],[11,"cast_rgb_f32","","",91,N],[11,"cast_rgba_u8","","",91,N],[11,"cast_rgba_u16","","",91,N],[11,"cast_rgba_f32","","",91,N],[11,"cast_rgb_u8","","",92,N],[11,"cast_rgb_u16","","",92,N],[11,"cast_rgb_f32","","",92,N],[11,"cast_rgba_u8","","",92,N],[11,"cast_rgba_u16","","",92,N],[11,"cast_rgba_f32","","",92,N],[0,"indices","gltf::mesh::util","Casting iterator adapters for vertex indices.",N,N],[3,"CastingIter","gltf::mesh::util::indices","Casting iterator for `Indices`.",N,N],[3,"U32","","Type which describes how to cast any index into u32.",N,N],[8,"Cast","","Trait for types which describe casting behaviour.",N,N],[16,"Output","","Output type.",93,N],[10,"cast_u8","","Cast from u8.",93,N],[10,"cast_u16","","Cast from u16.",93,N],[10,"cast_u32","","Cast from u32.",93,N],[11,"clone","","",94,[[["self"]],["castingiter"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["u32"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"unwrap","","Unwrap underlying `Indices` object.",94,[[["self"]],["readindices"]]],[11,"next","","",94,[[["self"]],["option"]]],[11,"nth","","",94,[[["self"],["usize"]],["option"]]],[11,"last","","",94,[[["self"]],["option"]]],[11,"count","","",94,[[["self"]],["usize"]]],[11,"size_hint","","",94,N],[11,"cast_u8","","",95,N],[11,"cast_u16","","",95,N],[11,"cast_u32","","",95,N],[0,"joints","gltf::mesh::util","Casting iterator adapters for joint indices.",N,N],[3,"CastingIter","gltf::mesh::util::joints","Casting iterator for `Joints`.",N,N],[3,"U16","","Type which describes how to cast any joint into u16.",N,N],[8,"Cast","","Trait for types which describe casting behaviour.",N,N],[16,"Output","","Output type.",96,N],[10,"cast_u8","","Cast from u8.",96,N],[10,"cast_u16","","Cast from u16.",96,N],[11,"clone","","",97,[[["self"]],["castingiter"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"clone","","",98,[[["self"]],["u16"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"unwrap","","Unwrap underlying `Joints` object.",97,[[["self"]],["readjoints"]]],[11,"next","","",97,[[["self"]],["option"]]],[11,"nth","","",97,[[["self"],["usize"]],["option"]]],[11,"last","","",97,[[["self"]],["option"]]],[11,"count","","",97,[[["self"]],["usize"]]],[11,"size_hint","","",97,N],[11,"cast_u8","","",98,N],[11,"cast_u16","","",98,N],[0,"tex_coords","gltf::mesh::util","Casting iterator adapters for texture co-ordinates.",N,N],[3,"CastingIter","gltf::mesh::util::tex_coords","Casting iterator for `TexCoords`.",N,N],[3,"U8","","Type which describes how to cast any texture coordinate into pair of u8.",N,N],[3,"U16","","Type which describes how to cast any texture coordinate into pair of u16.",N,N],[3,"F32","","Type which describes how to cast any texture coordinate into pair of f32.",N,N],[8,"Cast","","Trait for types which describe casting behaviour.",N,N],[16,"Output","","Output type.",99,N],[10,"cast_u8","","Cast from u8 pair.",99,N],[10,"cast_u16","","Cast from u16 pair.",99,N],[10,"cast_f32","","Cast from f32 pair.",99,N],[11,"clone","","",100,[[["self"]],["castingiter"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"clone","","",101,[[["self"]],["u8"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"clone","","",102,[[["self"]],["u16"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"clone","","",103,[[["self"]],["f32"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"unwrap","","Unwrap underlying `TexCoords` object.",100,[[["self"]],["readtexcoords"]]],[11,"next","","",100,[[["self"]],["option"]]],[11,"nth","","",100,[[["self"],["usize"]],["option"]]],[11,"last","","",100,[[["self"]],["option"]]],[11,"count","","",100,[[["self"]],["usize"]]],[11,"size_hint","","",100,N],[11,"cast_u8","","",101,N],[11,"cast_u16","","",101,N],[11,"cast_f32","","",101,N],[11,"cast_u8","","",102,N],[11,"cast_u16","","",102,N],[11,"cast_f32","","",102,N],[11,"cast_u8","","",103,N],[11,"cast_u16","","",103,N],[11,"cast_f32","","",103,N],[0,"weights","gltf::mesh::util","Casting iterator adapters for node weights.",N,N],[3,"CastingIter","gltf::mesh::util::weights","Casting iterator for `Weights`.",N,N],[3,"U8","","Type which describes how to cast any weight into u8.",N,N],[3,"U16","","Type which describes how to cast any weight into u16.",N,N],[3,"F32","","Type which describes how to cast any weight into f32.",N,N],[8,"Cast","","Trait for types which describe casting behaviour.",N,N],[16,"Output","","Output type.",104,N],[10,"cast_u8","","Cast from u8.",104,N],[10,"cast_u16","","Cast from u16.",104,N],[10,"cast_f32","","Cast from f32.",104,N],[11,"clone","","",105,[[["self"]],["castingiter"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"clone","","",106,[[["self"]],["u8"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"clone","","",107,[[["self"]],["u16"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"clone","","",108,[[["self"]],["f32"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"unwrap","","Unwrap underlying `Weights` object.",105,[[["self"]],["readweights"]]],[11,"next","","",105,[[["self"]],["option"]]],[11,"nth","","",105,[[["self"],["usize"]],["option"]]],[11,"last","","",105,[[["self"]],["option"]]],[11,"count","","",105,[[["self"]],["usize"]]],[11,"size_hint","","",105,N],[11,"cast_u8","","",106,N],[11,"cast_u16","","",106,N],[11,"cast_f32","","",106,N],[11,"cast_u8","","",107,N],[11,"cast_u16","","",107,N],[11,"cast_f32","","",107,N],[11,"cast_u8","","",108,N],[11,"cast_u16","","",108,N],[11,"cast_f32","","",108,N],[6,"ReadPositions","gltf::mesh::util","XYZ vertex positions of type `[f32; 3]`.",N,N],[6,"ReadNormals","","XYZ vertex normals of type `[f32; 3]`.",N,N],[6,"ReadTangents","","XYZW vertex tangents of type `[f32; 4]` where the `w` component is a sign value (-1 or +1) indicating the handedness of the tangent basis.",N,N],[6,"ReadPositionDisplacements","","XYZ vertex position displacements of type `[f32; 3]`.",N,N],[6,"ReadNormalDisplacements","","XYZ vertex normal displacements of type `[f32; 3]`.",N,N],[6,"ReadTangentDisplacements","","XYZ vertex tangent displacements.",N,N],[11,"clone","","",80,[[["self"]],["readcolors"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"clone","","",81,[[["self"]],["readindices"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"clone","","",82,[[["self"]],["readjoints"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"clone","","",83,[[["self"]],["readtexcoords"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"clone","","",84,[[["self"]],["readweights"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",109,[[["self"]],["readmorphtargets"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"next","","",109,[[["self"]],["option"]]],[11,"size_hint","","",109,N],[11,"into_rgb_u8","","Reinterpret colors as RGB u8, discarding alpha, if present.  Lossy if the underlying iterator yields u16, f32 or any RGBA.",80,[[["self"]],["castingiter",["rgbu8"]]]],[11,"into_rgb_u16","","Reinterpret colors as RGB u16, discarding alpha, if present.  Lossy if the underlying iterator yields f32 or any RGBA.",80,[[["self"]],["castingiter",["rgbu16"]]]],[11,"into_rgb_f32","","Reinterpret colors as RGB f32, discarding alpha, if present.  Lossy if the underlying iterator yields u16 or any RGBA.",80,[[["self"]],["castingiter",["rgbf32"]]]],[11,"into_rgba_u8","","Reinterpret colors as RGBA u8, with default alpha 255.  Lossy if the underlying iterator yields u16 or f32.",80,[[["self"]],["castingiter",["rgbau8"]]]],[11,"into_rgba_u16","","Reinterpret colors as RGBA u16, with default alpha 65535.  Lossy if the underlying iterator yields f32.",80,[[["self"]],["castingiter",["rgbau16"]]]],[11,"into_rgba_f32","","Reinterpret colors as RGBA f32, with default alpha 1.0.  Lossy if the underlying iterator yields u16.",80,[[["self"]],["castingiter",["rgbaf32"]]]],[11,"into_u32","","Reinterpret indices as u32, which can fit any possible index.",81,[[["self"]],["castingiter",["u32"]]]],[11,"into_u16","","Reinterpret joints as u16, which can fit any possible joint.",82,[[["self"]],["castingiter",["u16"]]]],[11,"into_u8","","Reinterpret texture coordinates as u8.  Lossy if the underlying iterator yields u16 or f32.",83,[[["self"]],["castingiter",["u8"]]]],[11,"into_u16","","Reinterpret texture coordinates as u16.  Lossy if the underlying iterator yields f32.",83,[[["self"]],["castingiter",["u16"]]]],[11,"into_f32","","Reinterpret texture coordinates as f32.  Lossy if the underlying iterator yields u16.",83,[[["self"]],["castingiter",["f32"]]]],[11,"into_u8","","Reinterpret weights as u8.  Lossy if the underlying iterator yields u16 or f32.",84,[[["self"]],["castingiter",["u8"]]]],[11,"into_u16","","Reinterpret weights as u16.  Lossy if the underlying iterator yields f32.",84,[[["self"]],["castingiter",["u16"]]]],[11,"into_f32","","Reinterpret weights as f32.  Lossy if the underlying iterator yields u16.",84,[[["self"]],["castingiter",["f32"]]]],[6,"Attribute","gltf::mesh","Vertex attribute data.",N,N],[6,"BoundingBox","","Vertex position bounding box.",N,N],[11,"clone","","",76,[[["self"]],["bounds"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"eq","","",76,[[["self"],["bounds"]],["bool"]]],[11,"ne","","",76,[[["self"],["bounds"]],["bool"]]],[11,"clone","","",110,[[["self"]],["mesh"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"clone","","",111,[[["self"]],["morphtarget"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",112,[[["self"]],["primitive"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"clone","","",113,[[["self"]],["reader"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"index","","Returns the internal JSON index.",110,[[["self"]],["usize"]]],[11,"extras","","Optional application specific data.",110,[[["self"]],["extras"]]],[11,"name","","Optional user-defined name for this object.",110,[[["self"]],["option",["str"]]]],[11,"primitives","","Defines the geometry to be renderered with a material.",110,[[["self"]],["primitives"]]],[11,"weights","","Defines the weights to be applied to the morph targets.",110,[[["self"]],["option"]]],[11,"bounding_box","","Returns the bounds of the `POSITION` vertex attribute.",112,[[["self"]],["boundingbox"]]],[11,"extras","","Optional application specific data.",112,[[["self"]],["extras"]]],[11,"get","","Return the accessor with the given semantic.",112,[[["self"],["semantic"]],["option",["accessor"]]]],[11,"index","","Returns the internal JSON index.",112,[[["self"]],["usize"]]],[11,"indices","","Returns the accessor containing the primitive indices, if provided.",112,[[["self"]],["option",["accessor"]]]],[11,"attributes","","Returns an `Iterator` that visits the vertex attributes.",112,[[["self"]],["attributes"]]],[11,"material","","Returns the material to apply to this primitive when rendering",112,[[["self"]],["material"]]],[11,"mode","","The type of primitives to render.",112,[[["self"]],["mode"]]],[11,"morph_targets","","Returns an `Iterator` that visits the morph targets of the primitive.",112,[[["self"]],["morphtargets"]]],[11,"reader","","Constructs the primitive reader.",112,[[["self"],["f"]],["reader"]]],[11,"read_positions","","Visits the vertex positions of a primitive.",113,[[["self"]],["option",["readpositions"]]]],[11,"read_normals","","Visits the vertex normals of a primitive.",113,[[["self"]],["option",["readnormals"]]]],[11,"read_tangents","","Visits the vertex tangents of a primitive.",113,[[["self"]],["option",["readtangents"]]]],[11,"read_colors","","Visits the vertex colors of a primitive.",113,[[["self"],["u32"]],["option",["readcolors"]]]],[11,"read_indices","","Visits the vertex draw sequence of a primitive.",113,[[["self"]],["option",["readindices"]]]],[11,"read_joints","","Visits the joint indices of the primitive.",113,[[["self"],["u32"]],["option",["readjoints"]]]],[11,"read_tex_coords","","Visits the vertex texture co-ordinates of a primitive.",113,[[["self"],["u32"]],["option",["readtexcoords"]]]],[11,"read_weights","","Visits the joint weights of the primitive.",113,[[["self"],["u32"]],["option",["readweights"]]]],[11,"read_morph_targets","","Visits the morph targets of the primitive.",113,[[["self"]],["readmorphtargets"]]],[11,"positions","","Returns the XYZ vertex position displacements.",111,[[["self"]],["option",["accessor"]]]],[11,"normals","","Returns the XYZ vertex normal displacements.",111,[[["self"]],["option",["accessor"]]]],[11,"tangents","","Returns the XYZ vertex tangent displacements.",111,[[["self"]],["option",["accessor"]]]],[0,"scene","gltf","The glTF node heirarchy.",N,N],[3,"Node","gltf::scene","A node in the node hierarchy.",N,N],[3,"Scene","","The root nodes of a scene.",N,N],[4,"Transform","","The transform for a `Node`.",N,N],[13,"Matrix","","4x4 transformation matrix in column-major order.",114,N],[12,"matrix","gltf::scene::Transform","4x4 matrix.",114,N],[13,"Decomposed","gltf::scene","Decomposed TRS properties.",114,N],[12,"translation","gltf::scene::Transform","`[x, y, z]` vector.",114,N],[12,"rotation","","`[x, y, z, w]` quaternion, where `w` is the scalar.",114,N],[12,"scale","","`[x, y, z]` vector.",114,N],[0,"iter","gltf::scene","Iterators.",N,N],[3,"Nodes","gltf::scene::iter","An `Iterator` that visits the nodes in a scene.",N,N],[3,"Children","","An `Iterator` that visits the children of a node.",N,N],[11,"clone","","",115,[[["self"]],["nodes"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"clone","","",116,[[["self"]],["children"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"next","","",115,[[["self"]],["option"]]],[11,"size_hint","","",115,N],[11,"next","","",116,[[["self"]],["option"]]],[11,"size_hint","","",116,N],[11,"clone","gltf::scene","",114,[[["self"]],["transform"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"matrix","","Returns the matrix representation of this transform.",114,N],[11,"decomposed","","Returns a decomposed representation of this transform.",114,N],[11,"clone","","",117,[[["self"]],["node"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"clone","","",118,[[["self"]],["scene"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"index","","Returns the internal JSON index.",117,[[["self"]],["usize"]]],[11,"camera","","Returns the camera referenced by this node.",117,[[["self"]],["option",["camera"]]]],[11,"children","","Returns an `Iterator` that visits the node's children.",117,[[["self"]],["children"]]],[11,"extras","","Optional application specific data.",117,[[["self"]],["extras"]]],[11,"mesh","","Returns the mesh referenced by this node.",117,[[["self"]],["option",["mesh"]]]],[11,"name","","Optional user-defined name for this object.",117,[[["self"]],["option",["str"]]]],[11,"transform","","Returns the node's transform.",117,[[["self"]],["transform"]]],[11,"skin","","Returns the skin referenced by this node.",117,[[["self"]],["option",["skin"]]]],[11,"weights","","Returns the weights of the instantiated morph target.",117,[[["self"]],["option"]]],[11,"index","","Returns the internal JSON index.",118,[[["self"]],["usize"]]],[11,"extras","","Optional application specific data.",118,[[["self"]],["extras"]]],[11,"name","","Optional user-defined name for this object.",118,[[["self"]],["option",["str"]]]],[11,"nodes","","Returns an `Iterator` that visits each root node of the scene.",118,[[["self"]],["nodes"]]],[0,"skin","gltf","Mesh skinning primitives.",N,N],[3,"Reader","gltf::skin","Skin reader.",N,N],[3,"Skin","","Joints and matrices defining a skin.",N,N],[0,"iter","","Iterators.",N,N],[3,"Joints","gltf::skin::iter","An `Iterator` that visits the joints of a `Skin`.",N,N],[11,"clone","","",119,[[["self"]],["joints"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"next","","",119,[[["self"]],["option"]]],[0,"util","gltf::skin","Utility functions.",N,N],[3,"Reader","gltf::skin::util","Skin reader.",N,N],[6,"ReadInverseBindMatrices","","Inverse Bind Matrices of type `[[f32; 4]; 4]`.",N,N],[11,"clone","","",120,[[["self"]],["reader"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"read_inverse_bind_matrices","","Returns an `Iterator` that reads the inverse bind matrices of the skin.",120,[[["self"]],["option",["readinversebindmatrices"]]]],[11,"clone","gltf::skin","",121,[[["self"]],["skin"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"index","","Returns the internal JSON index.",121,[[["self"]],["usize"]]],[11,"extras","","Optional application specific data.",121,[[["self"]],["extras"]]],[11,"inverse_bind_matrices","","Returns the accessor containing the 4x4 inverse-bind matrices.",121,[[["self"]],["option",["accessor"]]]],[11,"reader","","Constructs a skin reader.",121,[[["self"],["f"]],["reader"]]],[11,"joints","","Returns an `Iterator` that visits the skeleton nodes used as joints in this skin.",121,[[["self"]],["joints"]]],[11,"name","","Optional user-defined name for this object.",121,[[["self"]],["option",["str"]]]],[11,"skeleton","","Returns the node used as the skeleton root. When `None`, joints transforms resolve to scene root.",121,[[["self"]],["option",["node"]]]],[0,"texture","gltf","Textures and their samplers.",N,N],[4,"MagFilter","gltf::texture","Magnification filter.",N,N],[13,"Nearest","","Corresponds to `GL_NEAREST`.",122,N],[13,"Linear","","Corresponds to `GL_LINEAR`.",122,N],[4,"MinFilter","","Minification filter.",N,N],[13,"Nearest","","Corresponds to `GL_NEAREST`.",123,N],[13,"Linear","","Corresponds to `GL_LINEAR`.",123,N],[13,"NearestMipmapNearest","","Corresponds to `GL_NEAREST_MIPMAP_NEAREST`.",123,N],[13,"LinearMipmapNearest","","Corresponds to `GL_LINEAR_MIPMAP_NEAREST`.",123,N],[13,"NearestMipmapLinear","","Corresponds to `GL_NEAREST_MIPMAP_LINEAR`.",123,N],[13,"LinearMipmapLinear","","Corresponds to `GL_LINEAR_MIPMAP_LINEAR`.",123,N],[4,"WrappingMode","","Texture co-ordinate wrapping mode.",N,N],[13,"ClampToEdge","","Corresponds to `GL_CLAMP_TO_EDGE`.",124,N],[13,"MirroredRepeat","","Corresponds to `GL_MIRRORED_REPEAT`.",124,N],[13,"Repeat","","Corresponds to `GL_REPEAT`.",124,N],[3,"Info","","A reference to a `Texture`.",N,N],[3,"Sampler","","Texture sampler properties for filtering and wrapping modes.",N,N],[3,"Texture","","A texture and its sampler.",N,N],[11,"clone","","",125,[[["self"]],["info"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"clone","","",126,[[["self"]],["sampler"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"clone","","",127,[[["self"]],["texture"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"index","","Returns the internal JSON index if this `Sampler` was explicity defined.",126,[[["self"]],["option",["usize"]]]],[11,"mag_filter","","Magnification filter.",126,[[["self"]],["option",["magfilter"]]]],[11,"min_filter","","Minification filter.",126,[[["self"]],["option",["minfilter"]]]],[11,"name","","Optional user-defined name for this object.",126,[[["self"]],["option",["str"]]]],[11,"wrap_s","","`s` wrapping mode.",126,[[["self"]],["wrappingmode"]]],[11,"wrap_t","","`t` wrapping mode.",126,[[["self"]],["wrappingmode"]]],[11,"extras","","Optional application specific data.",126,[[["self"]],["extras"]]],[11,"index","","Returns the internal JSON index.",127,[[["self"]],["usize"]]],[11,"name","","Optional user-defined name for this object.",127,[[["self"]],["option",["str"]]]],[11,"sampler","","Returns the sampler used by this texture.",127,[[["self"]],["sampler"]]],[11,"source","","Returns the image used by this texture.",127,[[["self"]],["image"]]],[11,"extras","","Optional application specific data.",127,[[["self"]],["extras"]]],[11,"tex_coord","","The set index of the texture's `TEXCOORD` attribute.",125,[[["self"]],["u32"]]],[11,"texture","","Returns the referenced `Texture`.",125,[[["self"]],["texture"]]],[11,"extras","","Optional application specific data.",125,[[["self"]],["extras"]]],[11,"as_ref","","",125,[[["self"]],["texture"]]],[6,"Attribute","gltf","Vertex attribute data.",N,N],[6,"Result","","Result type for convenience.",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["gltf"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",128,[[["self"]],["document"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"open","","Convenience function that loads glTF from the file system.",1,[[["p"]],["result"]]],[11,"from_reader_without_validation","","Loads glTF from a reader without performing validation checks.",1,[[["r"]],["result"]]],[11,"from_reader","","Loads glTF from a reader.",1,[[["r"]],["result"]]],[11,"from_slice_without_validation","","Loads glTF from a slice of bytes without performing validation checks.",1,N],[11,"from_slice","","Loads glTF from a slice of bytes.",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"from_json","","Loads glTF from pre-deserialized JSON.",128,[[["root"]],["result"]]],[11,"from_json_without_validation","","Loads glTF from pre-deserialized JSON without performing validation checks.",128,[[["root"]],["self"]]],[11,"into_json","","Unwraps the glTF document.",128,[[["self"]],["root"]]],[11,"accessors","","Returns an `Iterator` that visits the accessors of the glTF asset.",128,[[["self"]],["accessors"]]],[11,"animations","","Returns an `Iterator` that visits the animations of the glTF asset.",128,[[["self"]],["animations"]]],[11,"buffers","","Returns an `Iterator` that visits the pre-loaded buffers of the glTF asset.",128,[[["self"]],["buffers"]]],[11,"cameras","","Returns an `Iterator` that visits the cameras of the glTF asset.",128,[[["self"]],["cameras"]]],[11,"default_scene","","Returns the default scene, if provided.",128,[[["self"]],["option",["scene"]]]],[11,"extensions_used","","Returns the extensions referenced in this .document file.",128,[[["self"]],["extensionsused"]]],[11,"extensions_required","","Returns the extensions required to load and render this asset.",128,[[["self"]],["extensionsrequired"]]],[11,"images","","Returns an `Iterator` that visits the pre-loaded images of the glTF asset.",128,[[["self"]],["images"]]],[11,"materials","","Returns an `Iterator` that visits the materials of the glTF asset.",128,[[["self"]],["materials"]]],[11,"meshes","","Returns an `Iterator` that visits the meshes of the glTF asset.",128,[[["self"]],["meshes"]]],[11,"nodes","","Returns an `Iterator` that visits the nodes of the glTF asset.",128,[[["self"]],["nodes"]]],[11,"samplers","","Returns an `Iterator` that visits the samplers of the glTF asset.",128,[[["self"]],["samplers"]]],[11,"scenes","","Returns an `Iterator` that visits the scenes of the glTF asset.",128,[[["self"]],["scenes"]]],[11,"skins","","Returns an `Iterator` that visits the skins of the glTF asset.",128,[[["self"]],["skins"]]],[11,"textures","","Returns an `Iterator` that visits the textures of the glTF asset.",128,[[["self"]],["textures"]]],[11,"views","","Returns an `Iterator` that visits the pre-loaded buffer views of the glTF asset.",128,[[["self"]],["views"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"from","","",2,[[["error"]],["self"]]],[11,"from","","",2,[[["error"]],["self"]]],[11,"from","","",2,[[["imageerror"]],["self"]]],[11,"from","","",2,[[["error"]],["self"]]],[11,"from","","",2,[[["vec"]],["self"]]],[11,"clone","gltf::texture","",124,[[["self"]],["wrappingmode"]]],[11,"clone","gltf::accessor","",3,[[["self"]],["componenttype"]]],[11,"clone","","",4,[[["self"]],["type"]]],[11,"clone","gltf::mesh","",0,[[["self"]],["semantic"]]],[11,"clone","gltf::texture","",122,[[["self"]],["magfilter"]]],[11,"clone","gltf::material","",70,[[["self"]],["alphamode"]]],[11,"clone","gltf::animation","",13,[[["self"]],["property"]]],[11,"clone","","",12,[[["self"]],["interpolation"]]],[11,"clone","gltf::mesh","",75,[[["self"]],["mode"]]],[11,"clone","gltf::texture","",123,[[["self"]],["minfilter"]]],[11,"clone","gltf::buffer","",42,[[["self"]],["target"]]],[11,"fmt","gltf::texture","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::mesh","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::animation","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::accessor","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::texture","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::mesh","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::accessor","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::buffer","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::animation","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::material","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf::texture","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","gltf::animation","",12,[[],["interpolation"]]],[11,"default","gltf::texture","",124,[[],["wrappingmode"]]],[11,"default","gltf::material","",70,[[],["alphamode"]]],[11,"default","gltf::mesh","",75,[[],["mode"]]],[11,"hash","","",0,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"serialize","gltf::animation","",12,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::texture","",123,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::buffer","",42,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::material","",70,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::accessor","",4,[[["self"],["s"]],["result"]]],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::mesh","",0,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::texture","",124,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::animation","",13,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::texture","",122,[[["self"],["s"]],["result"]]],[11,"serialize","gltf::mesh","",75,[[["self"],["s"]],["result"]]],[11,"deserialize","gltf::accessor","",4,[[["__d"]],["result",["type"]]]],[11,"deserialize","gltf::texture","",124,[[["__d"]],["result",["wrappingmode"]]]],[11,"deserialize","gltf::animation","",13,[[["__d"]],["result",["property"]]]],[11,"deserialize","gltf::accessor","",3,[[["__d"]],["result",["componenttype"]]]],[11,"deserialize","gltf::mesh","",75,[[["__d"]],["result",["mode"]]]],[11,"deserialize","gltf::texture","",123,[[["__d"]],["result",["minfilter"]]]],[11,"deserialize","gltf::animation","",12,[[["__d"]],["result",["interpolation"]]]],[11,"deserialize","gltf::texture","",122,[[["__d"]],["result",["magfilter"]]]],[11,"eq","","",123,[[["self"],["minfilter"]],["bool"]]],[11,"eq","","",122,[[["self"],["magfilter"]],["bool"]]],[11,"eq","","",124,[[["self"],["wrappingmode"]],["bool"]]],[11,"eq","gltf::buffer","",42,[[["self"],["target"]],["bool"]]],[11,"eq","gltf::accessor","",4,[[["self"],["type"]],["bool"]]],[11,"eq","gltf::mesh","",0,[[["self"],["semantic"]],["bool"]]],[11,"ne","","",0,[[["self"],["semantic"]],["bool"]]],[11,"eq","gltf::material","",70,[[["self"],["alphamode"]],["bool"]]],[11,"eq","gltf::animation","",13,[[["self"],["property"]],["bool"]]],[11,"eq","gltf::mesh","",75,[[["self"],["mode"]],["bool"]]],[11,"eq","gltf::animation","",12,[[["self"],["interpolation"]],["bool"]]],[11,"eq","gltf::accessor","",3,[[["self"],["componenttype"]],["bool"]]],[11,"size","","Returns the number of bytes this value represents.",3,[[["self"]],["usize"]]],[11,"as_gl_enum","","Returns the corresponding `GLenum`.",3,[[["self"]],["u32"]]],[11,"multiplicity","","Returns the equivalent number of scalar quantities this type represents.",4,[[["self"]],["usize"]]],[11,"as_gl_enum","gltf::mesh","Returns the equivalent `GLenum`.",75,[[["self"]],["u32"]]],[11,"as_gl_enum","gltf::texture","OpenGL enum",122,[[["self"]],["u32"]]],[11,"as_gl_enum","","Returns the corresponding OpenGL enum value.",123,[[["self"]],["u32"]]],[11,"as_gl_enum","","Returns the corresponding OpenGL enum value.",124,[[["self"]],["u32"]]]],"paths":[[4,"Semantic"],[3,"Gltf"],[4,"Error"],[4,"DataType"],[4,"Dimensions"],[8,"Item"],[3,"Iter"],[4,"IndexType"],[3,"Indices"],[3,"Sparse"],[3,"Values"],[3,"Accessor"],[4,"Interpolation"],[4,"Property"],[3,"Channels"],[3,"Samplers"],[4,"Rotations"],[4,"MorphTargetWeights"],[4,"ReadOutputs"],[8,"Cast"],[3,"CastingIter"],[3,"I8"],[3,"U8"],[3,"I16"],[3,"U16"],[3,"F32"],[8,"Cast"],[3,"CastingIter"],[3,"I8"],[3,"U8"],[3,"I16"],[3,"U16"],[3,"F32"],[3,"Reader"],[3,"Animation"],[3,"Channel"],[3,"Sampler"],[3,"Target"],[3,"Glb"],[3,"Header"],[4,"Error"],[4,"ChunkType"],[4,"Target"],[3,"Data"],[4,"Source"],[3,"Buffer"],[3,"View"],[4,"Projection"],[3,"Camera"],[3,"Orthographic"],[3,"Perspective"],[3,"Data"],[4,"Format"],[4,"Source"],[3,"Image"],[3,"ExtensionsUsed"],[3,"ExtensionsRequired"],[3,"Accessors"],[3,"Animations"],[3,"Buffers"],[3,"Views"],[3,"Cameras"],[3,"Images"],[3,"Materials"],[3,"Meshes"],[3,"Nodes"],[3,"Samplers"],[3,"Scenes"],[3,"Skins"],[3,"Textures"],[4,"AlphaMode"],[3,"Material"],[3,"PbrMetallicRoughness"],[3,"NormalTexture"],[3,"OcclusionTexture"],[4,"Mode"],[3,"Bounds"],[3,"MorphTargets"],[3,"Attributes"],[3,"Primitives"],[4,"ReadColors"],[4,"ReadIndices"],[4,"ReadJoints"],[4,"ReadTexCoords"],[4,"ReadWeights"],[8,"Cast"],[3,"CastingIter"],[3,"RgbU8"],[3,"RgbU16"],[3,"RgbF32"],[3,"RgbaU8"],[3,"RgbaU16"],[3,"RgbaF32"],[8,"Cast"],[3,"CastingIter"],[3,"U32"],[8,"Cast"],[3,"CastingIter"],[3,"U16"],[8,"Cast"],[3,"CastingIter"],[3,"U8"],[3,"U16"],[3,"F32"],[8,"Cast"],[3,"CastingIter"],[3,"U8"],[3,"U16"],[3,"F32"],[3,"ReadMorphTargets"],[3,"Mesh"],[3,"MorphTarget"],[3,"Primitive"],[3,"Reader"],[4,"Transform"],[3,"Nodes"],[3,"Children"],[3,"Node"],[3,"Scene"],[3,"Joints"],[3,"Reader"],[3,"Skin"],[4,"MagFilter"],[4,"MinFilter"],[4,"WrappingMode"],[3,"Info"],[3,"Sampler"],[3,"Texture"],[3,"Document"]]};
searchIndex["gltf_derive"]={"doc":"","items":[[5,"main","gltf_derive","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["gltf_json"]={"doc":"","items":[[3,"Error","gltf_json","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[3,"Accessor","","A typed view into a buffer view.",N,N],[12,"buffer_view","","The parent buffer view this accessor reads from.",1,N],[12,"byte_offset","","The offset relative to the start of the parent `BufferView` in bytes.",1,N],[12,"count","","The number of components within the buffer view - not to be confused with the number of bytes in the buffer view.",1,N],[12,"component_type","","The data type of components in the attribute.",1,N],[12,"extensions","","Extension specific data.",1,N],[12,"extras","","Optional application specific data.",1,N],[12,"type_","","Specifies if the attribute is a scalar, vector, or matrix.",1,N],[12,"min","","Minimum value of each component in this attribute.",1,N],[12,"max","","Maximum value of each component in this attribute.",1,N],[12,"name","","Optional user-defined name for this object.",1,N],[12,"normalized","","Specifies whether integer data values should be normalized.",1,N],[12,"sparse","","Sparse storage of attributes that deviate from their initialization value.",1,N],[3,"Animation","","A keyframe animation.",N,N],[12,"extensions","","Extension specific data.",2,N],[12,"extras","","Optional application specific data.",2,N],[12,"channels","","An array of channels, each of which targets an animation's sampler at a node's property.",2,N],[12,"name","","Optional user-defined name for this object.",2,N],[12,"samplers","","An array of samplers that combine input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).",2,N],[3,"Asset","","Metadata about the glTF asset.",N,N],[12,"copyright","","A copyright message suitable for display to credit the content creator.",3,N],[12,"extensions","","Extension specific data.",3,N],[12,"extras","","Optional application specific data.",3,N],[12,"generator","","Tool that generated this glTF model.",3,N],[12,"min_version","","The minimum glTF version that this asset targets.",3,N],[12,"version","","The glTF version of this asset.",3,N],[3,"Buffer","","A buffer points to binary data representing geometry, animations, or skins.",N,N],[12,"byte_length","","The length of the buffer in bytes.",4,N],[12,"name","","Optional user-defined name for this object.",4,N],[12,"uri","","The uri of the buffer.  Relative paths are relative to the .gltf file. Instead of referencing an external file, the uri can also be a data-uri.",4,N],[12,"extensions","","Extension specific data.",4,N],[12,"extras","","Optional application specific data.",4,N],[3,"Camera","","A camera's projection.",N,N],[12,"name","","Optional user-defined name for this object.",5,N],[12,"orthographic","","An orthographic camera containing properties to create an orthographic projection matrix.",5,N],[12,"perspective","","A perspective camera containing properties to create a perspective projection matrix.",5,N],[12,"type_","","Specifies if the camera uses a perspective or orthographic projection.",5,N],[12,"extensions","","Extension specific data.",5,N],[12,"extras","","Optional application specific data.",5,N],[3,"Image","","Image data used to create a texture.",N,N],[12,"buffer_view","","The index of the buffer view that contains the image. Use this instead of the image's uri property.",6,N],[12,"mime_type","","The image's MIME type.",6,N],[12,"name","","Optional user-defined name for this object.",6,N],[12,"uri","","The uri of the image.  Relative paths are relative to the .gltf file. Instead of referencing an external file, the uri can also be a data-uri. The image format must be jpg or png.",6,N],[12,"extensions","","Extension specific data.",6,N],[12,"extras","","Optional application specific data.",6,N],[3,"Material","","The material appearance of a primitive.",N,N],[12,"alpha_cutoff","","The alpha cutoff value of the material.",7,N],[12,"alpha_mode","","The alpha rendering mode of the material.",7,N],[12,"double_sided","","Specifies whether the material is double-sided.",7,N],[12,"name","","Optional user-defined name for this object.",7,N],[12,"pbr_metallic_roughness","","A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply.",7,N],[12,"normal_texture","","A tangent space normal map. The texture contains RGB components in linear space. Each texel represents the XYZ components of a normal vector in tangent space. Red [0 to 255] maps to X [-1 to 1]. Green [0 to 255] maps to Y [-1 to 1]. Blue [128 to 255] maps to Z [1/255 to 1]. The normal vectors use OpenGL conventions where +X is right and +Y is up. +Z points toward the viewer.",7,N],[12,"occlusion_texture","","The occlusion map texture. The occlusion values are sampled from the R channel. Higher values indicate areas that should receive full indirect lighting and lower values indicate no indirect lighting. These values are linear. If other channels are present (GBA), they are ignored for occlusion calculations.",7,N],[12,"emissive_texture","","The emissive map controls the color and intensity of the light being emitted by the material. This texture contains RGB components in sRGB color space. If a fourth component (A) is present, it is ignored.",7,N],[12,"emissive_factor","","The emissive color of the material.",7,N],[12,"extensions","","Extension specific data.",7,N],[12,"extras","","Optional application specific data.",7,N],[3,"Mesh","","A set of primitives to be rendered.",N,N],[12,"extensions","","Extension specific data.",8,N],[12,"extras","","Optional application specific data.",8,N],[12,"name","","Optional user-defined name for this object.",8,N],[12,"primitives","","Defines the geometry to be renderered with a material.",8,N],[12,"weights","","Defines the weights to be applied to the morph targets.",8,N],[3,"Node","","A node in the node hierarchy.  When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes. A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.",N,N],[12,"camera","","The index of the camera referenced by this node.",9,N],[12,"children","","The indices of this node's children.",9,N],[12,"extensions","","Extension specific data.",9,N],[12,"extras","","Optional application specific data.",9,N],[12,"matrix","","4x4 column-major transformation matrix.",9,N],[12,"mesh","","The index of the mesh in this node.",9,N],[12,"name","","Optional user-defined name for this object.",9,N],[12,"rotation","","The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.",9,N],[12,"scale","","The node's non-uniform scale.",9,N],[12,"translation","","The node's translation.",9,N],[12,"skin","","The index of the skin referenced by this node.",9,N],[12,"weights","","The weights of the instantiated Morph Target. Number of elements must match the number of Morph Targets of used mesh.",9,N],[3,"Scene","","The root `Node`s of a scene.",N,N],[12,"extensions","","Extension specific data.",10,N],[12,"extras","","Optional application specific data.",10,N],[12,"name","","Optional user-defined name for this object.",10,N],[12,"nodes","","The indices of each root node.",10,N],[3,"Skin","","Joints and matrices defining a skin.",N,N],[12,"extensions","","Extension specific data.",11,N],[12,"extras","","Optional application specific data.",11,N],[12,"inverse_bind_matrices","","The index of the accessor containing the 4x4 inverse-bind matrices.",11,N],[12,"joints","","Indices of skeleton nodes used as joints in this skin.",11,N],[12,"name","","Optional user-defined name for this object.",11,N],[12,"skeleton","","The index of the node used as a skeleton root.",11,N],[3,"Texture","","A texture and its sampler.",N,N],[12,"name","","Optional user-defined name for this object.",12,N],[12,"sampler","","The index of the sampler used by this texture.",12,N],[12,"source","","The index of the image used by this texture.",12,N],[12,"extensions","","Extension specific data.",12,N],[12,"extras","","Optional application specific data.",12,N],[3,"Path","","An immutable JSON source path.",N,N],[12,"0","","",13,N],[3,"Index","","Represents an offset into an array of type `T` owned by the root glTF object.",N,N],[3,"Root","","The root object of a glTF 2.0 asset.",N,N],[12,"accessors","","An array of accessors.",14,N],[12,"animations","","An array of keyframe animations.",14,N],[12,"asset","","Metadata about the glTF asset.",14,N],[12,"buffers","","An array of buffers.",14,N],[12,"buffer_views","","An array of buffer views.",14,N],[12,"scene","","The default scene.",14,N],[12,"extensions","","Extension specific data.",14,N],[12,"extras","","Optional application specific data.",14,N],[12,"extensions_used","","Names of glTF extensions used somewhere in this asset.",14,N],[12,"extensions_required","","Names of glTF extensions required to properly load this asset.",14,N],[12,"cameras","","An array of cameras.",14,N],[12,"images","","An array of images.",14,N],[12,"materials","","An array of materials.",14,N],[12,"meshes","","An array of meshes.",14,N],[12,"nodes","","An array of nodes.",14,N],[12,"samplers","","An array of samplers.",14,N],[12,"scenes","","An array of scenes.",14,N],[12,"skins","","An array of skins.",14,N],[12,"textures","","An array of textures.",14,N],[0,"accessor","","Contains `Accessor` and other related data structures.",N,N],[3,"Accessor","gltf_json::accessor","A typed view into a buffer view.",N,N],[12,"buffer_view","","The parent buffer view this accessor reads from.",1,N],[12,"byte_offset","","The offset relative to the start of the parent `BufferView` in bytes.",1,N],[12,"count","","The number of components within the buffer view - not to be confused with the number of bytes in the buffer view.",1,N],[12,"component_type","","The data type of components in the attribute.",1,N],[12,"extensions","","Extension specific data.",1,N],[12,"extras","","Optional application specific data.",1,N],[12,"type_","","Specifies if the attribute is a scalar, vector, or matrix.",1,N],[12,"min","","Minimum value of each component in this attribute.",1,N],[12,"max","","Maximum value of each component in this attribute.",1,N],[12,"name","","Optional user-defined name for this object.",1,N],[12,"normalized","","Specifies whether integer data values should be normalized.",1,N],[12,"sparse","","Sparse storage of attributes that deviate from their initialization value.",1,N],[3,"IndexComponentType","","The data type of an index.",N,N],[12,"0","","",15,N],[3,"GenericComponentType","","The data type of a generic vertex attribute.",N,N],[12,"0","","",16,N],[4,"ComponentType","","The component data type.",N,N],[13,"I8","","Corresponds to `GL_BYTE`.",17,N],[13,"U8","","Corresponds to `GL_UNSIGNED_BYTE`.",17,N],[13,"I16","","Corresponds to `GL_SHORT`.",17,N],[13,"U16","","Corresponds to `GL_UNSIGNED_SHORT`.",17,N],[13,"U32","","Corresponds to `GL_UNSIGNED_INT`.",17,N],[13,"F32","","Corresponds to `GL_FLOAT`.",17,N],[4,"Type","","Specifies whether an attribute, vector, or matrix.",N,N],[13,"Scalar","","Scalar quantity.",18,N],[13,"Vec2","","2D vector.",18,N],[13,"Vec3","","3D vector.",18,N],[13,"Vec4","","4D vector.",18,N],[13,"Mat2","","2x2 matrix.",18,N],[13,"Mat3","","3x3 matrix.",18,N],[13,"Mat4","","4x4 matrix.",18,N],[0,"sparse","","Contains data structures for sparse storage.",N,N],[3,"Indices","gltf_json::accessor::sparse","Indices of those attributes that deviate from their initialization value.",N,N],[12,"buffer_view","","The parent buffer view containing the sparse indices.",19,N],[12,"byte_offset","","The offset relative to the start of the parent `BufferView` in bytes.",19,N],[12,"component_type","","The data type of each index.",19,N],[12,"extensions","","Extension specific data.",19,N],[12,"extras","","Optional application specific data.",19,N],[3,"Sparse","","Sparse storage of attributes that deviate from their initialization value.",N,N],[12,"count","","The number of attributes encoded in this sparse accessor.",20,N],[12,"indices","","Index array of size `count` that points to those accessor attributes that deviate from their initialization value.",20,N],[12,"values","","Array of size `count * number_of_components` storing the displaced accessor attributes pointed by `indices`.",20,N],[12,"extensions","","Extension specific data.",20,N],[12,"extras","","Optional application specific data.",20,N],[3,"Values","","Array of size `count * number_of_components` storing the displaced accessor attributes pointed by `accessor::sparse::Indices`.",N,N],[12,"buffer_view","","The parent buffer view containing the sparse indices.",21,N],[12,"byte_offset","","The offset relative to the start of the parent buffer view in bytes.",21,N],[12,"extensions","","Extension specific data.",21,N],[12,"extras","","Optional application specific data.",21,N],[11,"clone","","",19,[[["self"]],["indices"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",19,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",19,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",20,[[["self"]],["sparse"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",20,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",20,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",21,[[["self"]],["values"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",21,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",21,[[["self"],["root"],["p"],["r"]]]],[17,"BYTE","gltf_json::accessor","Corresponds to `GL_BYTE`.",N,N],[17,"UNSIGNED_BYTE","","Corresponds to `GL_UNSIGNED_BYTE`.",N,N],[17,"SHORT","","Corresponds to `GL_SHORT`.",N,N],[17,"UNSIGNED_SHORT","","Corresponds to `GL_UNSIGNED_SHORT`.",N,N],[17,"UNSIGNED_INT","","Corresponds to `GL_UNSIGNED_INT`.",N,N],[17,"FLOAT","","Corresponds to `GL_FLOAT`.",N,N],[17,"VALID_COMPONENT_TYPES","","All valid generic vertex attribute component types.",N,N],[17,"VALID_INDEX_TYPES","","All valid index component types.",N,N],[17,"VALID_ACCESSOR_TYPES","","All valid accessor types.",N,N],[11,"clone","","",17,[[["self"]],["componenttype"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["componenttype"]],["bool"]]],[11,"clone","","",18,[[["self"]],["type"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["type"]],["bool"]]],[11,"clone","","",1,[[["self"]],["accessor"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",1,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",1,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",15,[[["self"]],["indexcomponenttype"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["genericcomponenttype"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",18,[[["self"],["s"]],["result"]]],[11,"size","","Returns the number of bytes this value represents.",17,[[["self"]],["usize"]]],[11,"as_gl_enum","","Returns the corresponding `GLenum`.",17,[[["self"]],["u32"]]],[11,"serialize","","",17,[[["self"],["s"]],["result"]]],[11,"multiplicity","","Returns the equivalent number of scalar quantities this type represents.",18,[[["self"]],["usize"]]],[0,"animation","gltf_json","Contains `Animation` and other related data structures.",N,N],[3,"Animation","gltf_json::animation","A keyframe animation.",N,N],[12,"extensions","","Extension specific data.",2,N],[12,"extras","","Optional application specific data.",2,N],[12,"channels","","An array of channels, each of which targets an animation's sampler at a node's property.",2,N],[12,"name","","Optional user-defined name for this object.",2,N],[12,"samplers","","An array of samplers that combine input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).",2,N],[3,"Channel","","Targets an animation's sampler at a node's property.",N,N],[12,"sampler","","The index of a sampler in this animation used to compute the value for the target.",22,N],[12,"target","","The index of the node and TRS property to target.",22,N],[12,"extensions","","Extension specific data.",22,N],[12,"extras","","Optional application specific data.",22,N],[3,"Target","","The index of the node and TRS property that an animation channel targets.",N,N],[12,"extensions","","Extension specific data.",23,N],[12,"extras","","Optional application specific data.",23,N],[12,"node","","The index of the node to target.",23,N],[12,"path","","The name of the node's property to modify or the 'weights' of the morph targets it instantiates.",23,N],[3,"Sampler","","Defines a keyframe graph but not its target.",N,N],[12,"extensions","","Extension specific data.",24,N],[12,"extras","","Optional application specific data.",24,N],[12,"input","","The index of an accessor containing keyframe input values, e.g., time.",24,N],[12,"interpolation","","The interpolation algorithm.",24,N],[12,"output","","The index of an accessor containing keyframe output values.",24,N],[4,"Interpolation","","Specifies an interpolation algorithm.",N,N],[13,"Linear","","Linear interpolation.",25,N],[13,"Step","","Step interpolation.",25,N],[13,"CatmullRomSpline","","Uniform Catmull-Rom spline interpolation.",25,N],[13,"CubicSpline","","Cubic spline interpolation.",25,N],[4,"Property","","Specifies a property to animate.",N,N],[13,"Translation","","XYZ translation vector.",26,N],[13,"Rotation","","XYZW rotation quaternion.",26,N],[13,"Scale","","XYZ scale vector.",26,N],[13,"MorphTargetWeights","","Weights of morph targets.",26,N],[17,"VALID_INTERPOLATIONS","","All valid animation interpolation algorithms.",N,N],[17,"VALID_PROPERTIES","","All valid animation property names.",N,N],[11,"clone","","",25,[[["self"]],["interpolation"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["interpolation"]],["bool"]]],[11,"clone","","",26,[[["self"]],["property"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["property"]],["bool"]]],[11,"clone","","",2,[[["self"]],["animation"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["channel"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["target"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",23,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",23,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",24,[[["self"]],["sampler"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",24,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",24,[[["self"],["root"],["p"],["r"]]]],[11,"validate_minimally","","",2,[[["self"],["root"],["p"],["r"]]]],[11,"default","","",25,[[],["self"]]],[11,"serialize","","",25,[[["self"],["s"]],["result"]]],[11,"serialize","","",26,[[["self"],["s"]],["result"]]],[0,"asset","gltf_json","Contains `Asset` metadata.",N,N],[3,"Asset","gltf_json::asset","Metadata about the glTF asset.",N,N],[12,"copyright","","A copyright message suitable for display to credit the content creator.",3,N],[12,"extensions","","Extension specific data.",3,N],[12,"extras","","Optional application specific data.",3,N],[12,"generator","","Tool that generated this glTF model.",3,N],[12,"min_version","","The minimum glTF version that this asset targets.",3,N],[12,"version","","The glTF version of this asset.",3,N],[11,"clone","","",3,[[["self"]],["asset"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",3,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",3,[[["self"],["root"],["p"],["r"]]]],[11,"default","","",3,[[],["self"]]],[0,"buffer","gltf_json","Contains `Buffer`, `View`, and other related data structures.",N,N],[3,"Buffer","gltf_json::buffer","A buffer points to binary data representing geometry, animations, or skins.",N,N],[12,"byte_length","","The length of the buffer in bytes.",4,N],[12,"name","","Optional user-defined name for this object.",4,N],[12,"uri","","The uri of the buffer.  Relative paths are relative to the .gltf file. Instead of referencing an external file, the uri can also be a data-uri.",4,N],[12,"extensions","","Extension specific data.",4,N],[12,"extras","","Optional application specific data.",4,N],[3,"View","","A view into a buffer generally representing a subset of the buffer.",N,N],[12,"buffer","","The parent `Buffer`.",27,N],[12,"byte_length","","The length of the `BufferView` in bytes.",27,N],[12,"byte_offset","","Offset into the parent buffer in bytes.",27,N],[12,"byte_stride","","The stride in bytes between vertex attributes or other interleavable data.",27,N],[12,"name","","Optional user-defined name for this object.",27,N],[12,"target","","Optional target the buffer should be bound to.",27,N],[12,"extensions","","Extension specific data.",27,N],[12,"extras","","Optional application specific data.",27,N],[3,"ByteStride","","The stride, in bytes, between vertex attributes.",N,N],[12,"0","","",28,N],[4,"Target","","Specifies the target a GPU buffer should be bound to.",N,N],[13,"ArrayBuffer","","Corresponds to `GL_ARRAY_BUFFER`.",29,N],[13,"ElementArrayBuffer","","Corresponds to `GL_ELEMENT_ARRAY_BUFFER`.",29,N],[17,"ARRAY_BUFFER","","Corresponds to `GL_ARRAY_BUFFER`.",N,N],[17,"ELEMENT_ARRAY_BUFFER","","Corresponds to `GL_ELEMENT_ARRAY_BUFFER`.",N,N],[17,"MIN_BYTE_STRIDE","","The minimum byte stride.",N,N],[17,"MAX_BYTE_STRIDE","","The maximum byte stride.",N,N],[17,"VALID_TARGETS","","All valid GPU buffer targets.",N,N],[11,"clone","","",29,[[["self"]],["target"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["target"]],["bool"]]],[11,"serialize","","",29,[[["self"],["s"]],["result"]]],[11,"clone","","",4,[[["self"]],["buffer"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",4,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",4,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",27,[[["self"]],["view"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",27,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",27,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",28,[[["self"]],["bytestride"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"validate_completely","","",28,[[["self"],["root"],["p"],["r"]]]],[0,"camera","gltf_json","Contains `Camera` and other related data structures.",N,N],[3,"Camera","gltf_json::camera","A camera's projection.",N,N],[12,"name","","Optional user-defined name for this object.",5,N],[12,"orthographic","","An orthographic camera containing properties to create an orthographic projection matrix.",5,N],[12,"perspective","","A perspective camera containing properties to create a perspective projection matrix.",5,N],[12,"type_","","Specifies if the camera uses a perspective or orthographic projection.",5,N],[12,"extensions","","Extension specific data.",5,N],[12,"extras","","Optional application specific data.",5,N],[3,"Orthographic","","Values for an orthographic camera.",N,N],[12,"xmag","","The horizontal magnification of the view.",30,N],[12,"ymag","","The vertical magnification of the view.",30,N],[12,"zfar","","The distance to the far clipping plane.",30,N],[12,"znear","","The distance to the near clipping plane.",30,N],[12,"extensions","","Extension specific data.",30,N],[12,"extras","","Optional application specific data.",30,N],[3,"Perspective","","Values for a perspective camera.",N,N],[12,"aspect_ratio","","Aspect ratio of the field of view.",31,N],[12,"yfov","","The vertical field of view in radians.",31,N],[12,"zfar","","The distance to the far clipping plane.",31,N],[12,"znear","","The distance to the near clipping plane.",31,N],[12,"extensions","","Extension specific data.",31,N],[12,"extras","","Optional application specific data.",31,N],[4,"Type","","Specifies the camera type.",N,N],[13,"Perspective","","A perspective projection.",32,N],[13,"Orthographic","","An orthographic projection.",32,N],[17,"VALID_CAMERA_TYPES","","All valid camera types.",N,N],[11,"clone","","",32,[[["self"]],["type"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["type"]],["bool"]]],[11,"clone","","",5,[[["self"]],["camera"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["orthographic"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["perspective"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",5,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",30,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",31,[[["self"],["root"],["p"],["r"]]]],[11,"serialize","","",32,[[["self"],["s"]],["result"]]],[0,"extensions","gltf_json","Contains extension specific data structures and the names of all 2.0 extensions supported by the library.",N,N],[0,"accessor","gltf_json::extensions","Contains `Accessor` and other related data structures.",N,N],[3,"Accessor","gltf_json::extensions::accessor","A typed view into a buffer view.",N,N],[0,"sparse","","Contains data structures for sparse storage.",N,N],[3,"Indices","gltf_json::extensions::accessor::sparse","Indices of those attributes that deviate from their initialization value.",N,N],[3,"Sparse","","Sparse storage of attributes that deviate from their initialization value.",N,N],[3,"Values","","Array of size `count * number_of_components` storing the displaced accessor attributes pointed by `accessor::sparse::Indices`.",N,N],[11,"clone","","",33,[[["self"]],["indices"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"default","","",33,[[],["indices"]]],[11,"validate_minimally","","",33,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",33,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",34,[[["self"]],["sparse"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"default","","",34,[[],["sparse"]]],[11,"validate_minimally","","",34,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",34,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",35,[[["self"]],["values"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"default","","",35,[[],["values"]]],[11,"validate_minimally","","",35,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",35,[[["self"],["root"],["p"],["r"]]]],[11,"clone","gltf_json::extensions::accessor","",36,[[["self"]],["accessor"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"default","","",36,[[],["accessor"]]],[11,"validate_minimally","","",36,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",36,[[["self"],["root"],["p"],["r"]]]],[0,"animation","gltf_json::extensions","Contains `Animation` and other related data structures.",N,N],[3,"Animation","gltf_json::extensions::animation","A keyframe animation.",N,N],[3,"Channel","","Targets an animation's sampler at a node's property.",N,N],[3,"Target","","The index of the node and TRS property that an animation channel targets.",N,N],[3,"Sampler","","Defines a keyframe graph but not its target.",N,N],[11,"clone","","",37,[[["self"]],["animation"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"default","","",37,[[],["animation"]]],[11,"clone","","",38,[[["self"]],["channel"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"default","","",38,[[],["channel"]]],[11,"clone","","",39,[[["self"]],["target"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"default","","",39,[[],["target"]]],[11,"validate_minimally","","",39,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",39,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",40,[[["self"]],["sampler"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"default","","",40,[[],["sampler"]]],[11,"validate_minimally","","",40,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",40,[[["self"],["root"],["p"],["r"]]]],[0,"asset","gltf_json::extensions","Contains `Asset` metadata.",N,N],[3,"Asset","gltf_json::extensions::asset","Metadata about the glTF asset.",N,N],[11,"clone","","",41,[[["self"]],["asset"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"default","","",41,[[],["asset"]]],[11,"validate_minimally","","",41,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",41,[[["self"],["root"],["p"],["r"]]]],[0,"buffer","gltf_json::extensions","Contains `Buffer`, `View`, and other related data structures.",N,N],[3,"Buffer","gltf_json::extensions::buffer","A buffer points to binary data representing geometry, animations, or skins.",N,N],[3,"View","","A view into a buffer generally representing a subset of the buffer.",N,N],[11,"clone","","",42,[[["self"]],["buffer"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"default","","",42,[[],["buffer"]]],[11,"validate_minimally","","",42,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",42,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",43,[[["self"]],["view"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"default","","",43,[[],["view"]]],[11,"validate_minimally","","",43,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",43,[[["self"],["root"],["p"],["r"]]]],[0,"camera","gltf_json::extensions","Contains `Camera` and other related data structures.",N,N],[3,"Camera","gltf_json::extensions::camera","A camera's projection.",N,N],[3,"Orthographic","","Values for an orthographic camera.",N,N],[3,"Perspective","","Values for a perspective camera.",N,N],[11,"clone","","",44,[[["self"]],["camera"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"default","","",44,[[],["camera"]]],[11,"validate_minimally","","",44,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",44,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",45,[[["self"]],["orthographic"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"default","","",45,[[],["orthographic"]]],[11,"validate_minimally","","",45,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",45,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",46,[[["self"]],["perspective"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"default","","",46,[[],["perspective"]]],[11,"validate_minimally","","",46,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",46,[[["self"],["root"],["p"],["r"]]]],[0,"image","gltf_json::extensions","Contains `Image` and other related data structures.",N,N],[3,"Image","gltf_json::extensions::image","Image data used to create a texture.",N,N],[11,"clone","","",47,[[["self"]],["image"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"default","","",47,[[],["image"]]],[11,"validate_minimally","","",47,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",47,[[["self"],["root"],["p"],["r"]]]],[0,"material","gltf_json::extensions","Contains `Material` and other related data structures.",N,N],[3,"Material","gltf_json::extensions::material","The material appearance of a primitive.",N,N],[3,"PbrMetallicRoughness","","A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.",N,N],[3,"NormalTexture","","Defines the normal texture of a material.",N,N],[3,"OcclusionTexture","","Defines the occlusion texture of a material.",N,N],[11,"clone","","",48,[[["self"]],["material"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"default","","",48,[[],["material"]]],[11,"validate_minimally","","",48,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",48,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",49,[[["self"]],["pbrmetallicroughness"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"default","","",49,[[],["pbrmetallicroughness"]]],[11,"validate_minimally","","",49,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",49,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",50,[[["self"]],["normaltexture"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"default","","",50,[[],["normaltexture"]]],[11,"validate_minimally","","",50,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",50,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",51,[[["self"]],["occlusiontexture"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"default","","",51,[[],["occlusiontexture"]]],[11,"validate_minimally","","",51,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",51,[[["self"],["root"],["p"],["r"]]]],[0,"mesh","gltf_json::extensions","Contains `Mesh` and other related data structures.",N,N],[3,"Mesh","gltf_json::extensions::mesh","A set of primitives to be rendered.",N,N],[3,"Primitive","","Geometry to be rendered with the given material.",N,N],[11,"clone","","",52,[[["self"]],["mesh"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"default","","",52,[[],["mesh"]]],[11,"validate_minimally","","",52,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",52,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",53,[[["self"]],["primitive"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"default","","",53,[[],["primitive"]]],[11,"validate_minimally","","",53,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",53,[[["self"],["root"],["p"],["r"]]]],[0,"root","gltf_json::extensions","Contains `Root`.",N,N],[3,"Root","gltf_json::extensions::root","The root object of a glTF 2.0 asset.",N,N],[11,"clone","","",54,[[["self"]],["root"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"default","","",54,[[],["root"]]],[11,"validate_minimally","","",54,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",54,[[["self"],["root"],["p"],["r"]]]],[0,"scene","gltf_json::extensions","Contains `Scene`, `Node`, and other related data structures.",N,N],[3,"Node","gltf_json::extensions::scene","A node in the node hierarchy.  When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes. A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.",N,N],[3,"Scene","","The root `Node`s of a scene.",N,N],[11,"clone","","",55,[[["self"]],["node"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"default","","",55,[[],["node"]]],[11,"validate_minimally","","",55,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",55,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",56,[[["self"]],["scene"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"default","","",56,[[],["scene"]]],[11,"validate_minimally","","",56,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",56,[[["self"],["root"],["p"],["r"]]]],[0,"skin","gltf_json::extensions","Contains `Skin` and other related data structures.",N,N],[3,"Skin","gltf_json::extensions::skin","Joints and matrices defining a skin.",N,N],[11,"clone","","",57,[[["self"]],["skin"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"default","","",57,[[],["skin"]]],[11,"validate_minimally","","",57,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",57,[[["self"],["root"],["p"],["r"]]]],[0,"texture","gltf_json::extensions","Contains `Texture`, `Sampler`, and other related data structures.",N,N],[3,"Sampler","gltf_json::extensions::texture","Texture sampler properties for filtering and wrapping modes.",N,N],[3,"Texture","","A texture and its sampler.",N,N],[3,"Info","","Reference to a `Texture`.",N,N],[11,"clone","","",58,[[["self"]],["sampler"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"default","","",58,[[],["sampler"]]],[11,"validate_minimally","","",58,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",58,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",59,[[["self"]],["texture"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"default","","",59,[[],["texture"]]],[11,"validate_minimally","","",59,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",59,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",60,[[["self"]],["info"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"default","","",60,[[],["info"]]],[11,"validate_minimally","","",60,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",60,[[["self"],["root"],["p"],["r"]]]],[17,"ENABLED_EXTENSIONS","gltf_json::extensions","Names of glTF 2.0 extensions enabled by the user.",N,N],[17,"SUPPORTED_EXTENSIONS","","Names of glTF 2.0 extensions supported by the library.",N,N],[0,"extras","gltf_json","Contains `Extras`.",N,N],[4,"Value","gltf_json::extras","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[3,"Void","","Type representing no user-defined data.",N,N],[6,"Extras","","Data type of the `extras` attribute on all glTF objects.",N,N],[11,"clone","","",61,[[["self"]],["void"]]],[11,"default","","",61,[[],["void"]]],[11,"validate_minimally","","",61,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",61,[[["self"],["root"],["p"],["r"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[0,"image","gltf_json","Contains `Image` and other related data structures.",N,N],[3,"Image","gltf_json::image","Image data used to create a texture.",N,N],[12,"buffer_view","","The index of the buffer view that contains the image. Use this instead of the image's uri property.",6,N],[12,"mime_type","","The image's MIME type.",6,N],[12,"name","","Optional user-defined name for this object.",6,N],[12,"uri","","The uri of the image.  Relative paths are relative to the .gltf file. Instead of referencing an external file, the uri can also be a data-uri. The image format must be jpg or png.",6,N],[12,"extensions","","Extension specific data.",6,N],[12,"extras","","Optional application specific data.",6,N],[3,"MimeType","","An image MIME type.",N,N],[12,"0","","",62,N],[17,"VALID_MIME_TYPES","","All valid MIME types.",N,N],[11,"clone","","",6,[[["self"]],["image"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",6,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",6,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",62,[[["self"]],["mimetype"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"validate_completely","","",62,[[["self"],["root"],["p"],["r"]]]],[0,"material","gltf_json","Contains `Material` and other related data structures.",N,N],[3,"Material","gltf_json::material","The material appearance of a primitive.",N,N],[12,"alpha_cutoff","","The alpha cutoff value of the material.",7,N],[12,"alpha_mode","","The alpha rendering mode of the material.",7,N],[12,"double_sided","","Specifies whether the material is double-sided.",7,N],[12,"name","","Optional user-defined name for this object.",7,N],[12,"pbr_metallic_roughness","","A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply.",7,N],[12,"normal_texture","","A tangent space normal map. The texture contains RGB components in linear space. Each texel represents the XYZ components of a normal vector in tangent space. Red [0 to 255] maps to X [-1 to 1]. Green [0 to 255] maps to Y [-1 to 1]. Blue [128 to 255] maps to Z [1/255 to 1]. The normal vectors use OpenGL conventions where +X is right and +Y is up. +Z points toward the viewer.",7,N],[12,"occlusion_texture","","The occlusion map texture. The occlusion values are sampled from the R channel. Higher values indicate areas that should receive full indirect lighting and lower values indicate no indirect lighting. These values are linear. If other channels are present (GBA), they are ignored for occlusion calculations.",7,N],[12,"emissive_texture","","The emissive map controls the color and intensity of the light being emitted by the material. This texture contains RGB components in sRGB color space. If a fourth component (A) is present, it is ignored.",7,N],[12,"emissive_factor","","The emissive color of the material.",7,N],[12,"extensions","","Extension specific data.",7,N],[12,"extras","","Optional application specific data.",7,N],[3,"PbrMetallicRoughness","","A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.",N,N],[12,"base_color_factor","","The material's base color factor.",63,N],[12,"base_color_texture","","The base color texture.",63,N],[12,"metallic_factor","","The metalness of the material.",63,N],[12,"roughness_factor","","The roughness of the material.",63,N],[12,"metallic_roughness_texture","","The metallic-roughness texture.",63,N],[12,"extensions","","Extension specific data.",63,N],[12,"extras","","Optional application specific data.",63,N],[3,"NormalTexture","","Defines the normal texture of a material.",N,N],[12,"index","","The index of the texture.",64,N],[12,"scale","","The scalar multiplier applied to each normal vector of the texture.",64,N],[12,"tex_coord","","The set index of the texture's `TEXCOORD` attribute.",64,N],[12,"extensions","","Extension specific data.",64,N],[12,"extras","","Optional application specific data.",64,N],[3,"OcclusionTexture","","Defines the occlusion texture of a material.",N,N],[12,"index","","The index of the texture.",65,N],[12,"strength","","The scalar multiplier controlling the amount of occlusion applied.",65,N],[12,"tex_coord","","The set index of the texture's `TEXCOORD` attribute.",65,N],[12,"extensions","","Extension specific data.",65,N],[12,"extras","","Optional application specific data.",65,N],[3,"AlphaCutoff","","The alpha cutoff value of a material.",N,N],[12,"0","","",66,N],[3,"EmissiveFactor","","The emissive color of a material.",N,N],[12,"0","","",67,N],[3,"PbrBaseColorFactor","","The base color factor of a material.",N,N],[12,"0","","",68,N],[3,"StrengthFactor","","A number in the inclusive range [0.0, 1.0] with a default value of 1.0.",N,N],[12,"0","","",69,N],[4,"AlphaMode","","The alpha rendering mode of a material.",N,N],[13,"Opaque","","The alpha value is ignored and the rendered output is fully opaque.",70,N],[13,"Mask","","The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.",70,N],[13,"Blend","","The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.",70,N],[17,"VALID_ALPHA_MODES","","All valid alpha modes.",N,N],[11,"clone","","",70,[[["self"]],["alphamode"]]],[11,"eq","","",70,[[["self"],["alphamode"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",70,[[["self"],["s"]],["result"]]],[11,"clone","","",7,[[["self"]],["material"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"default","","",7,[[],["material"]]],[11,"validate_minimally","","",7,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",7,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",63,[[["self"]],["pbrmetallicroughness"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"default","","",63,[[],["pbrmetallicroughness"]]],[11,"validate_minimally","","",63,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",63,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",64,[[["self"]],["normaltexture"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",64,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",64,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",65,[[["self"]],["occlusiontexture"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",65,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",65,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",66,[[["self"]],["alphacutoff"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["emissivefactor"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"default","","",67,[[],["emissivefactor"]]],[11,"clone","","",68,[[["self"]],["pbrbasecolorfactor"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",69,[[["self"]],["strengthfactor"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"default","","",66,[[],["self"]]],[11,"default","","",70,[[],["self"]]],[11,"validate_completely","","",66,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",67,[[["self"],["root"],["p"],["r"]]]],[11,"default","","",68,[[],["self"]]],[11,"validate_completely","","",68,[[["self"],["root"],["p"],["r"]]]],[11,"default","","",69,[[],["self"]]],[11,"validate_completely","","",69,[[["self"],["root"],["p"],["r"]]]],[0,"mesh","gltf_json","Contains `Mesh` and other related data structures.",N,N],[3,"Mesh","gltf_json::mesh","A set of primitives to be rendered.",N,N],[12,"extensions","","Extension specific data.",8,N],[12,"extras","","Optional application specific data.",8,N],[12,"name","","Optional user-defined name for this object.",8,N],[12,"primitives","","Defines the geometry to be renderered with a material.",8,N],[12,"weights","","Defines the weights to be applied to the morph targets.",8,N],[3,"Primitive","","Geometry to be rendered with the given material.",N,N],[12,"attributes","","Maps attribute semantic names to the `Accessor`s containing the corresponding attribute data.",71,N],[12,"extensions","","Extension specific data.",71,N],[12,"extras","","Optional application specific data.",71,N],[12,"indices","","The index of the accessor that contains the indices.",71,N],[12,"material","","The index of the material to apply to this primitive when rendering",71,N],[12,"mode","","The type of primitives to render.",71,N],[12,"targets","","An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target.",71,N],[3,"MorphTarget","","A dictionary mapping attributes to their deviations in the Morph Target.",N,N],[12,"positions","","XYZ vertex position displacements of type `[f32; 3]`.",72,N],[12,"normals","","XYZ vertex normal displacements of type `[f32; 3]`.",72,N],[12,"tangents","","XYZ vertex tangent displacements of type `[f32; 3]`.",72,N],[4,"Mode","","The type of primitives to render.",N,N],[13,"Points","","Corresponds to `GL_POINTS`.",73,N],[13,"Lines","","Corresponds to `GL_LINES`.",73,N],[13,"LineLoop","","Corresponds to `GL_LINE_LOOP`.",73,N],[13,"LineStrip","","Corresponds to `GL_LINE_STRIP`.",73,N],[13,"Triangles","","Corresponds to `GL_TRIANGLES`.",73,N],[13,"TriangleStrip","","Corresponds to `GL_TRIANGLE_STRIP`.",73,N],[13,"TriangleFan","","Corresponds to `GL_TRIANGLE_FAN`.",73,N],[4,"Semantic","","Vertex attribute semantic name.",N,N],[13,"Positions","","XYZ vertex positions.",74,N],[13,"Normals","","XYZ vertex normals.",74,N],[13,"Tangents","","XYZW vertex tangents where the `w` component is a sign value indicating the handedness of the tangent basis.",74,N],[13,"Colors","","RGB or RGBA vertex color.",74,N],[13,"TexCoords","","UV texture co-ordinates.",74,N],[13,"Joints","","Joint indices.",74,N],[13,"Weights","","Joint weights.",74,N],[17,"POINTS","","Corresponds to `GL_POINTS`.",N,N],[17,"LINES","","Corresponds to `GL_LINES`.",N,N],[17,"LINE_LOOP","","Corresponds to `GL_LINE_LOOP`.",N,N],[17,"LINE_STRIP","","Corresponds to `GL_LINE_STRIP`.",N,N],[17,"TRIANGLES","","Corresponds to `GL_TRIANGLES`.",N,N],[17,"TRIANGLE_STRIP","","Corresponds to `GL_TRIANGLE_STRIP`.",N,N],[17,"TRIANGLE_FAN","","Corresponds to `GL_TRIANGLE_FAN`.",N,N],[17,"VALID_MODES","","All valid primitive rendering modes.",N,N],[17,"VALID_MORPH_TARGETS","","All valid semantic names for Morph targets.",N,N],[11,"clone","","",73,[[["self"]],["mode"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"eq","","",73,[[["self"],["mode"]],["bool"]]],[11,"clone","","",8,[[["self"]],["mesh"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",8,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",8,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",71,[[["self"]],["primitive"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",71,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",72,[[["self"]],["morphtarget"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",72,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",72,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",74,[[["self"]],["semantic"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"hash","","",74,N],[11,"eq","","",74,[[["self"],["semantic"]],["bool"]]],[11,"ne","","",74,[[["self"],["semantic"]],["bool"]]],[11,"default","","",73,[[],["mode"]]],[11,"as_gl_enum","","Returns the equivalent `GLenum`.",73,[[["self"]],["u32"]]],[11,"serialize","","",73,[[["self"],["s"]],["result"]]],[11,"serialize","","",74,[[["self"],["s"]],["result"]]],[11,"to_string","","",74,[[["self"]],["string"]]],[0,"path","gltf_json","Contains `Path`.",N,N],[3,"Path","gltf_json::path","An immutable JSON source path.",N,N],[12,"0","","",13,N],[11,"default","","",13,[[],["path"]]],[11,"clone","","",13,[[["self"]],["path"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["path"]],["bool"]]],[11,"ne","","",13,[[["self"],["path"]],["bool"]]],[11,"new","","Creates an empty JSON source path.",13,[[],["self"]]],[11,"field","","Returns a new path ending with the given field.",13,[[["self"],["str"]],["self"]]],[11,"index","","Returns a new path ending with the given array index.",13,[[["self"],["usize"]],["self"]]],[11,"key","","Returns a new path ending with the given object key.",13,[[["self"],["str"]],["self"]]],[11,"as_str","","Returns a view into the internal representation.",13,[[["self"]],["str"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[0,"root","gltf_json","Contains `Root`.",N,N],[3,"Index","gltf_json::root","Represents an offset into an array of type `T` owned by the root glTF object.",N,N],[3,"Root","","The root object of a glTF 2.0 asset.",N,N],[12,"accessors","","An array of accessors.",14,N],[12,"animations","","An array of keyframe animations.",14,N],[12,"asset","","Metadata about the glTF asset.",14,N],[12,"buffers","","An array of buffers.",14,N],[12,"buffer_views","","An array of buffer views.",14,N],[12,"scene","","The default scene.",14,N],[12,"extensions","","Extension specific data.",14,N],[12,"extras","","Optional application specific data.",14,N],[12,"extensions_used","","Names of glTF extensions used somewhere in this asset.",14,N],[12,"extensions_required","","Names of glTF extensions required to properly load this asset.",14,N],[12,"cameras","","An array of cameras.",14,N],[12,"images","","An array of images.",14,N],[12,"materials","","An array of materials.",14,N],[12,"meshes","","An array of meshes.",14,N],[12,"nodes","","An array of nodes.",14,N],[12,"samplers","","An array of samplers.",14,N],[12,"scenes","","An array of scenes.",14,N],[12,"skins","","An array of skins.",14,N],[12,"textures","","An array of textures.",14,N],[8,"Get","","Helper trait for retrieving top-level objects by a universal identifier.",N,N],[10,"get","","Retrieves a single value at the given index.",75,[[["self"],["index"]],["option"]]],[11,"clone","","",76,[[["self"]],["index"]]],[11,"clone","","",14,[[["self"]],["root"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"default","","",14,[[],["root"]]],[11,"validate_minimally","","",14,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",14,[[["self"],["root"],["p"],["r"]]]],[11,"get","","Returns a single item from the root object.",14,[[["self"],["index"]],["option"]]],[11,"from_str","","Deserialize from a JSON string slice.",14,[[["str"]],["result",["error"]]]],[11,"from_slice","","Deserialize from a JSON byte slice.",14,N],[11,"from_reader","","Deserialize from a stream of JSON.",14,[[["r"]],["result",["error"]]]],[11,"to_string","","Serialize as a `String` of JSON.",14,[[["self"]],["result",["string","error"]]]],[11,"to_string_pretty","","Serialize as a pretty-printed `String` of JSON.",14,[[["self"]],["result",["string","error"]]]],[11,"to_value","","Serialize as a generic JSON value.",14,[[["self"]],["result",["value","error"]]]],[11,"to_vec","","Serialize as a JSON byte vector.",14,[[["self"]],["result",["vec","error"]]]],[11,"to_vec_pretty","","Serialize as a pretty-printed JSON byte vector.",14,[[["self"]],["result",["vec","error"]]]],[11,"to_writer","","Serialize as a JSON byte writertor.",14,[[["self"],["w"]],["result",["error"]]]],[11,"to_writer_pretty","","Serialize as a pretty-printed JSON byte writertor.",14,[[["self"],["w"]],["result",["error"]]]],[11,"value","","Returns the internal offset value.",76,[[["self"]],["usize"]]],[11,"serialize","","",76,[[["self"],["s"]],["result"]]],[11,"deserialize","","",76,[[["d"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",76,[[["self"],["root"],["p"],["r"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["accessor"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["animation"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["buffer"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["view"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["camera"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["image"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["material"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["mesh"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["node"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["sampler"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["scene"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["skin"]]]],[11,"get","","",14,[[["self"],["index"]],["option",["texture"]]]],[0,"scene","gltf_json","Contains `Scene`, `Node`, and other related data structures.",N,N],[3,"Node","gltf_json::scene","A node in the node hierarchy.  When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes. A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.",N,N],[12,"camera","","The index of the camera referenced by this node.",9,N],[12,"children","","The indices of this node's children.",9,N],[12,"extensions","","Extension specific data.",9,N],[12,"extras","","Optional application specific data.",9,N],[12,"matrix","","4x4 column-major transformation matrix.",9,N],[12,"mesh","","The index of the mesh in this node.",9,N],[12,"name","","Optional user-defined name for this object.",9,N],[12,"rotation","","The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.",9,N],[12,"scale","","The node's non-uniform scale.",9,N],[12,"translation","","The node's translation.",9,N],[12,"skin","","The index of the skin referenced by this node.",9,N],[12,"weights","","The weights of the instantiated Morph Target. Number of elements must match the number of Morph Targets of used mesh.",9,N],[3,"Scene","","The root `Node`s of a scene.",N,N],[12,"extensions","","Extension specific data.",10,N],[12,"extras","","Optional application specific data.",10,N],[12,"name","","Optional user-defined name for this object.",10,N],[12,"nodes","","The indices of each root node.",10,N],[3,"UnitQuaternion","","Unit quaternion rotation in the order (x, y, z, w), where w is the scalar.",N,N],[12,"0","","",77,N],[11,"clone","","",9,[[["self"]],["node"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",9,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",9,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",10,[[["self"]],["scene"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",10,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",10,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",77,[[["self"]],["unitquaternion"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"default","","",77,[[],["self"]]],[11,"validate_completely","","",77,[[["self"],["root"],["p"],["r"]]]],[0,"skin","gltf_json","Contains `Skin` and other related data structures.",N,N],[3,"Skin","gltf_json::skin","Joints and matrices defining a skin.",N,N],[12,"extensions","","Extension specific data.",11,N],[12,"extras","","Optional application specific data.",11,N],[12,"inverse_bind_matrices","","The index of the accessor containing the 4x4 inverse-bind matrices.",11,N],[12,"joints","","Indices of skeleton nodes used as joints in this skin.",11,N],[12,"name","","Optional user-defined name for this object.",11,N],[12,"skeleton","","The index of the node used as a skeleton root.",11,N],[11,"clone","","",11,[[["self"]],["skin"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",11,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",11,[[["self"],["root"],["p"],["r"]]]],[0,"texture","gltf_json","Contains `Texture`, `Sampler`, and other related data structures.",N,N],[3,"Sampler","gltf_json::texture","Texture sampler properties for filtering and wrapping modes.",N,N],[12,"mag_filter","","Magnification filter.",78,N],[12,"min_filter","","Minification filter.",78,N],[12,"name","","Optional user-defined name for this object.",78,N],[12,"wrap_s","","`s` wrapping mode.",78,N],[12,"wrap_t","","`t` wrapping mode.",78,N],[12,"extensions","","Extension specific data.",78,N],[12,"extras","","Optional application specific data.",78,N],[3,"Texture","","A texture and its sampler.",N,N],[12,"name","","Optional user-defined name for this object.",12,N],[12,"sampler","","The index of the sampler used by this texture.",12,N],[12,"source","","The index of the image used by this texture.",12,N],[12,"extensions","","Extension specific data.",12,N],[12,"extras","","Optional application specific data.",12,N],[3,"Info","","Reference to a `Texture`.",N,N],[12,"index","","The index of the texture.",79,N],[12,"tex_coord","","The set index of the texture's `TEXCOORD` attribute.",79,N],[12,"extensions","","Extension specific data.",79,N],[12,"extras","","Optional application specific data.",79,N],[4,"MagFilter","","Magnification filter.",N,N],[13,"Nearest","","Corresponds to `GL_NEAREST`.",80,N],[13,"Linear","","Corresponds to `GL_LINEAR`.",80,N],[4,"MinFilter","","Minification filter.",N,N],[13,"Nearest","","Corresponds to `GL_NEAREST`.",81,N],[13,"Linear","","Corresponds to `GL_LINEAR`.",81,N],[13,"NearestMipmapNearest","","Corresponds to `GL_NEAREST_MIPMAP_NEAREST`.",81,N],[13,"LinearMipmapNearest","","Corresponds to `GL_LINEAR_MIPMAP_NEAREST`.",81,N],[13,"NearestMipmapLinear","","Corresponds to `GL_NEAREST_MIPMAP_LINEAR`.",81,N],[13,"LinearMipmapLinear","","Corresponds to `GL_LINEAR_MIPMAP_LINEAR`.",81,N],[4,"WrappingMode","","Texture co-ordinate wrapping mode.",N,N],[13,"ClampToEdge","","Corresponds to `GL_CLAMP_TO_EDGE`.",82,N],[13,"MirroredRepeat","","Corresponds to `GL_MIRRORED_REPEAT`.",82,N],[13,"Repeat","","Corresponds to `GL_REPEAT`.",82,N],[17,"NEAREST","","Corresponds to `GL_NEAREST`.",N,N],[17,"LINEAR","","Corresponds to `GL_LINEAR`.",N,N],[17,"NEAREST_MIPMAP_NEAREST","","Corresponds to `GL_NEAREST_MIPMAP_NEAREST`.",N,N],[17,"LINEAR_MIPMAP_NEAREST","","Corresponds to `GL_LINEAR_MIPMAP_NEAREST`.",N,N],[17,"NEAREST_MIPMAP_LINEAR","","Corresponds to `GL_NEAREST_MIPMAP_LINEAR`.",N,N],[17,"LINEAR_MIPMAP_LINEAR","","Corresponds to `GL_LINEAR_MIPMAP_LINEAR`.",N,N],[17,"CLAMP_TO_EDGE","","Corresponds to `GL_CLAMP_TO_EDGE`.",N,N],[17,"MIRRORED_REPEAT","","Corresponds to `GL_MIRRORED_REPEAT`.",N,N],[17,"REPEAT","","Corresponds to `GL_REPEAT`.",N,N],[17,"VALID_MAG_FILTERS","","All valid magnification filters.",N,N],[17,"VALID_MIN_FILTERS","","All valid minification filters.",N,N],[17,"VALID_WRAPPING_MODES","","All valid wrapping modes.",N,N],[11,"clone","","",80,[[["self"]],["magfilter"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"eq","","",80,[[["self"],["magfilter"]],["bool"]]],[11,"as_gl_enum","","OpenGL enum",80,[[["self"]],["u32"]]],[11,"clone","","",81,[[["self"]],["minfilter"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"eq","","",81,[[["self"],["minfilter"]],["bool"]]],[11,"as_gl_enum","","Returns the corresponding OpenGL enum value.",81,[[["self"]],["u32"]]],[11,"clone","","",82,[[["self"]],["wrappingmode"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"eq","","",82,[[["self"],["wrappingmode"]],["bool"]]],[11,"as_gl_enum","","Returns the corresponding OpenGL enum value.",82,[[["self"]],["u32"]]],[11,"clone","","",78,[[["self"]],["sampler"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"default","","",78,[[],["sampler"]]],[11,"validate_minimally","","",78,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",78,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",12,[[["self"]],["texture"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",12,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",12,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",79,[[["self"]],["info"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"validate_minimally","","",79,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","",79,[[["self"],["root"],["p"],["r"]]]],[11,"serialize","","",81,[[["self"],["s"]],["result"]]],[11,"serialize","","",80,[[["self"],["s"]],["result"]]],[11,"default","","",82,[[],["self"]]],[11,"serialize","","",82,[[["self"],["s"]],["result"]]],[0,"validation","gltf_json","Contains functions that validate glTF JSON data against the specification.",N,N],[4,"Error","gltf_json::validation","Specifies what kind of error occured during validation.",N,N],[13,"IndexOutOfBounds","","An index was found to be out of bounds.",83,N],[13,"Invalid","","An invalid value was identified.",83,N],[13,"Missing","","Some required data has been omitted.",83,N],[4,"Checked","","Specifies a type that has been pre-validated during deserialization or otherwise.",N,N],[13,"Valid","","The item is valid.",84,N],[13,"Invalid","","The item is invalid.",84,N],[8,"Validate","","Trait for validating glTF JSON data against the 2.0 specification.",N,N],[11,"validate_minimally","","Validates only the invariants required for the library to function safely.",85,[[["self"],["root"],["p"],["r"]]]],[11,"validate_completely","","Validates the data against the glTF 2.0 specification.",85,[[["self"],["root"],["p"],["r"]]]],[11,"clone","","",83,[[["self"]],["error"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"eq","","",83,[[["self"],["error"]],["bool"]]],[11,"partial_cmp","","",83,[[["self"],["error"]],["option",["ordering"]]]],[11,"cmp","","",83,[[["self"],["error"]],["ordering"]]],[11,"hash","","",83,N],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"hash","","",84,N],[11,"eq","","",84,[[["self"],["checked"]],["bool"]]],[11,"ne","","",84,[[["self"],["checked"]],["bool"]]],[11,"as_ref","","Converts from `Checked<T>` to `Checked<&T>`.",84,[[["self"]],["checked"]]],[11,"unwrap","","Takes ownership of the contained item if it is `Valid`.",84,[[["self"]],["t"]]],[11,"serialize","","",84,[[["self"],["s"]],["result"]]],[11,"clone","","",84,[[["self"]],["self"]]],[11,"default","","",84,[[],["self"]]],[11,"validate_minimally","","",84,[[["self"],["root"],["p"],["r"]]]],[11,"description","","",83,[[["self"]],["str"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[0,"deserialize","gltf_json","Re-exports of `serde_json` deserialization functions.",N,N],[5,"from_reader","gltf_json::deserialize","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result",["error"]]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result",["error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[0,"serialize","gltf_json","Re-exports of `serde_json` serialization functions.",N,N],[5,"to_string","gltf_json::serialize","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string","error"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string","error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec","error"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec","error"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result",["error"]]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result",["error"]]]],[6,"Extras","gltf_json","Data type of the `extras` attribute on all glTF objects.",N,N],[11,"line","","One-based line number at which the error was detected.",86,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",86,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",86,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",86,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",86,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",86,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",86,[[["self"]],["bool"]]],[11,"clone","gltf_json::extras","",0,[[["self"]],["value"]]],[11,"fmt","gltf_json","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf_json::extras","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","gltf_json","",86,[[["self"]],["str"]]],[11,"cause","","",86,[[["self"]],["option",["error"]]]],[11,"custom","","",86,[[["t"]],["error"]]],[11,"invalid_type","","",86,[[["unexpected"],["expected"]],["error"]]],[11,"from_str","gltf_json::extras","",0,[[["str"]],["result",["value","error"]]]],[11,"default","","",0,[[],["value"]]],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"custom","gltf_json","",86,[[["t"]],["error"]]],[11,"from","gltf_json::extras","",0,[[["u16"]],["value"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["u64"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["value"]]],[11,"from","","",0,[[["i16"]],["value"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["value"]]],[11,"from","","",0,[[["isize"]],["value"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["usize"]],["value"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["value"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["value"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["value"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["value"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["value"]]],[11,"fmt","gltf_json","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","gltf_json::extras","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"deserialize","gltf_json::validation","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]],[11,"deserialize","","",84,[[["d"]],["result"]]]],"paths":[[4,"Value"],[3,"Accessor"],[3,"Animation"],[3,"Asset"],[3,"Buffer"],[3,"Camera"],[3,"Image"],[3,"Material"],[3,"Mesh"],[3,"Node"],[3,"Scene"],[3,"Skin"],[3,"Texture"],[3,"Path"],[3,"Root"],[3,"IndexComponentType"],[3,"GenericComponentType"],[4,"ComponentType"],[4,"Type"],[3,"Indices"],[3,"Sparse"],[3,"Values"],[3,"Channel"],[3,"Target"],[3,"Sampler"],[4,"Interpolation"],[4,"Property"],[3,"View"],[3,"ByteStride"],[4,"Target"],[3,"Orthographic"],[3,"Perspective"],[4,"Type"],[3,"Indices"],[3,"Sparse"],[3,"Values"],[3,"Accessor"],[3,"Animation"],[3,"Channel"],[3,"Target"],[3,"Sampler"],[3,"Asset"],[3,"Buffer"],[3,"View"],[3,"Camera"],[3,"Orthographic"],[3,"Perspective"],[3,"Image"],[3,"Material"],[3,"PbrMetallicRoughness"],[3,"NormalTexture"],[3,"OcclusionTexture"],[3,"Mesh"],[3,"Primitive"],[3,"Root"],[3,"Node"],[3,"Scene"],[3,"Skin"],[3,"Sampler"],[3,"Texture"],[3,"Info"],[3,"Void"],[3,"MimeType"],[3,"PbrMetallicRoughness"],[3,"NormalTexture"],[3,"OcclusionTexture"],[3,"AlphaCutoff"],[3,"EmissiveFactor"],[3,"PbrBaseColorFactor"],[3,"StrengthFactor"],[4,"AlphaMode"],[3,"Primitive"],[3,"MorphTarget"],[4,"Mode"],[4,"Semantic"],[8,"Get"],[3,"Index"],[3,"UnitQuaternion"],[3,"Sampler"],[3,"Info"],[4,"MagFilter"],[4,"MinFilter"],[4,"WrappingMode"],[4,"Error"],[4,"Checked"],[8,"Validate"],[3,"Error"]]};
searchIndex["glutin"]={"doc":"The purpose of this library is to provide an OpenGL context on as many platforms as possible.","items":[[3,"AvailableMonitorsIter","glutin","An iterator for the list of available monitors.",N,N],[6,"AxisId","","Identifier for a specific analog axis on some device.",N,N],[6,"ButtonId","","Identifier for a specific button on some device.",N,N],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",N,N],[13,"Continue","","Continue looping and waiting for events.",0,N],[13,"Break","","Break from the event loop.",0,N],[4,"WindowCreationError","","Error that can happen while creating a window or a headless renderer.",N,N],[13,"OsError","","",1,N],[13,"NotSupported","","TODO: remove this error",1,N],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",N,N],[13,"Added","","",2,N],[13,"Removed","","",2,N],[13,"MouseMotion","","Change in physical position of a pointing device.",2,N],[12,"delta","glutin::DeviceEvent","(x, y) change in position in unspecified units.",2,N],[13,"MouseWheel","glutin","Physical scroll event",2,N],[12,"delta","glutin::DeviceEvent","",2,N],[13,"Motion","glutin","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",2,N],[12,"axis","glutin::DeviceEvent","",2,N],[12,"value","","",2,N],[13,"Button","glutin","",2,N],[12,"button","glutin::DeviceEvent","",2,N],[12,"state","","",2,N],[13,"Key","glutin","",2,N],[13,"Text","","",2,N],[12,"codepoint","glutin::DeviceEvent","",2,N],[3,"DeviceId","glutin","Identifier of an input device.",N,N],[0,"dpi","","DPI is important, so read the docs for this module if you don't want to be confused.",N,N],[5,"validate_hidpi_factor","glutin::dpi","Checks that the DPI factor is a normal positive `f64`.",N,[[["f64"]],["bool"]]],[3,"LogicalPosition","","A position represented in logical pixels.",N,N],[12,"x","","",3,N],[12,"y","","",3,N],[3,"PhysicalPosition","","A position represented in physical pixels.",N,N],[12,"x","","",4,N],[12,"y","","",4,N],[3,"LogicalSize","","A size represented in logical pixels.",N,N],[12,"width","","",5,N],[12,"height","","",5,N],[3,"PhysicalSize","","A size represented in physical pixels.",N,N],[12,"width","","",6,N],[12,"height","","",6,N],[4,"ElementState","glutin","Describes the input state of a key.",N,N],[13,"Pressed","","",7,N],[13,"Released","","",7,N],[4,"Event","","Describes a generic event.",N,N],[13,"WindowEvent","","",8,N],[12,"window_id","glutin::Event","",8,N],[12,"event","","",8,N],[13,"DeviceEvent","glutin","",8,N],[12,"device_id","glutin::Event","",8,N],[12,"event","","",8,N],[13,"Awakened","glutin","",8,N],[13,"Suspended","","The application has been suspended or resumed.",8,N],[3,"EventsLoop","","Provides a way to retrieve events from the system and from the windows that were registered to the events loop.",N,N],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",N,N],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",N,N],[3,"Icon","","An icon used for the window titlebar, taskbar, etc.",N,N],[3,"KeyboardInput","","Describes a keyboard input event.",N,N],[12,"scancode","","Identifies the physical key pressed",9,N],[12,"state","","",9,N],[12,"virtual_keycode","","Identifies the semantic meaning of the key",9,N],[12,"modifiers","","Modifier keys active at the time of this input.",9,N],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",N,N],[12,"shift","","The \"shift\" key",10,N],[12,"ctrl","","The \"control\" key",10,N],[12,"alt","","The \"alt\" key",10,N],[12,"logo","","The \"logo\" key",10,N],[3,"MonitorId","","Identifier for a monitor.",N,N],[4,"MouseButton","","Describes a button of a mouse controller.",N,N],[13,"Left","","",11,N],[13,"Right","","",11,N],[13,"Middle","","",11,N],[13,"Other","","",11,N],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",N,N],[13,"Default","","The platform-dependent default cursor.",12,N],[13,"Crosshair","","A simple crosshair.",12,N],[13,"Hand","","A hand (often used to indicate links in web browsers).",12,N],[13,"Arrow","","Self explanatory.",12,N],[13,"Move","","Indicates something is to be moved.",12,N],[13,"Text","","Indicates text that may be selected or edited.",12,N],[13,"Wait","","Program busy indicator.",12,N],[13,"Help","","Help indicator (often rendered as a \"?\")",12,N],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",12,N],[13,"NotAllowed","","Cursor showing that something cannot be done.",12,N],[13,"ContextMenu","","",12,N],[13,"Cell","","",12,N],[13,"VerticalText","","",12,N],[13,"Alias","","",12,N],[13,"Copy","","",12,N],[13,"NoDrop","","",12,N],[13,"Grab","","",12,N],[13,"Grabbing","","",12,N],[13,"AllScroll","","",12,N],[13,"ZoomIn","","",12,N],[13,"ZoomOut","","",12,N],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",12,N],[13,"NResize","","",12,N],[13,"NeResize","","",12,N],[13,"NwResize","","",12,N],[13,"SResize","","",12,N],[13,"SeResize","","",12,N],[13,"SwResize","","",12,N],[13,"WResize","","",12,N],[13,"EwResize","","",12,N],[13,"NsResize","","",12,N],[13,"NeswResize","","",12,N],[13,"NwseResize","","",12,N],[13,"ColResize","","",12,N],[13,"RowResize","","",12,N],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",N,N],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",13,N],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",13,N],[6,"ScanCode","","Hardware-dependent keyboard scan code.",N,N],[3,"Touch","","Represents touch event",N,N],[12,"device_id","","",14,N],[12,"phase","","",14,N],[12,"location","","",14,N],[12,"id","","unique identifier of a finger.",14,N],[4,"TouchPhase","","Describes touch-screen input state.",N,N],[13,"Started","","",15,N],[13,"Moved","","",15,N],[13,"Ended","","",15,N],[13,"Cancelled","","",15,N],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",N,N],[13,"Key1","","The '1' key over the letters.",16,N],[13,"Key2","","The '2' key over the letters.",16,N],[13,"Key3","","The '3' key over the letters.",16,N],[13,"Key4","","The '4' key over the letters.",16,N],[13,"Key5","","The '5' key over the letters.",16,N],[13,"Key6","","The '6' key over the letters.",16,N],[13,"Key7","","The '7' key over the letters.",16,N],[13,"Key8","","The '8' key over the letters.",16,N],[13,"Key9","","The '9' key over the letters.",16,N],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",16,N],[13,"A","","",16,N],[13,"B","","",16,N],[13,"C","","",16,N],[13,"D","","",16,N],[13,"E","","",16,N],[13,"F","","",16,N],[13,"G","","",16,N],[13,"H","","",16,N],[13,"I","","",16,N],[13,"J","","",16,N],[13,"K","","",16,N],[13,"L","","",16,N],[13,"M","","",16,N],[13,"N","","",16,N],[13,"O","","",16,N],[13,"P","","",16,N],[13,"Q","","",16,N],[13,"R","","",16,N],[13,"S","","",16,N],[13,"T","","",16,N],[13,"U","","",16,N],[13,"V","","",16,N],[13,"W","","",16,N],[13,"X","","",16,N],[13,"Y","","",16,N],[13,"Z","","",16,N],[13,"Escape","","The Escape key, next to F1.",16,N],[13,"F1","","",16,N],[13,"F2","","",16,N],[13,"F3","","",16,N],[13,"F4","","",16,N],[13,"F5","","",16,N],[13,"F6","","",16,N],[13,"F7","","",16,N],[13,"F8","","",16,N],[13,"F9","","",16,N],[13,"F10","","",16,N],[13,"F11","","",16,N],[13,"F12","","",16,N],[13,"F13","","",16,N],[13,"F14","","",16,N],[13,"F15","","",16,N],[13,"Snapshot","","Print Screen/SysRq.",16,N],[13,"Scroll","","Scroll Lock.",16,N],[13,"Pause","","Pause/Break key, next to Scroll lock.",16,N],[13,"Insert","","`Insert`, next to Backspace.",16,N],[13,"Home","","",16,N],[13,"Delete","","",16,N],[13,"End","","",16,N],[13,"PageDown","","",16,N],[13,"PageUp","","",16,N],[13,"Left","","",16,N],[13,"Up","","",16,N],[13,"Right","","",16,N],[13,"Down","","",16,N],[13,"Back","","The Backspace key, right over Enter.",16,N],[13,"Return","","The Enter key.",16,N],[13,"Space","","The space bar.",16,N],[13,"Compose","","The \"Compose\" key on Linux.",16,N],[13,"Caret","","",16,N],[13,"Numlock","","",16,N],[13,"Numpad0","","",16,N],[13,"Numpad1","","",16,N],[13,"Numpad2","","",16,N],[13,"Numpad3","","",16,N],[13,"Numpad4","","",16,N],[13,"Numpad5","","",16,N],[13,"Numpad6","","",16,N],[13,"Numpad7","","",16,N],[13,"Numpad8","","",16,N],[13,"Numpad9","","",16,N],[13,"AbntC1","","",16,N],[13,"AbntC2","","",16,N],[13,"Add","","",16,N],[13,"Apostrophe","","",16,N],[13,"Apps","","",16,N],[13,"At","","",16,N],[13,"Ax","","",16,N],[13,"Backslash","","",16,N],[13,"Calculator","","",16,N],[13,"Capital","","",16,N],[13,"Colon","","",16,N],[13,"Comma","","",16,N],[13,"Convert","","",16,N],[13,"Decimal","","",16,N],[13,"Divide","","",16,N],[13,"Equals","","",16,N],[13,"Grave","","",16,N],[13,"Kana","","",16,N],[13,"Kanji","","",16,N],[13,"LAlt","","",16,N],[13,"LBracket","","",16,N],[13,"LControl","","",16,N],[13,"LShift","","",16,N],[13,"LWin","","",16,N],[13,"Mail","","",16,N],[13,"MediaSelect","","",16,N],[13,"MediaStop","","",16,N],[13,"Minus","","",16,N],[13,"Multiply","","",16,N],[13,"Mute","","",16,N],[13,"MyComputer","","",16,N],[13,"NavigateForward","","",16,N],[13,"NavigateBackward","","",16,N],[13,"NextTrack","","",16,N],[13,"NoConvert","","",16,N],[13,"NumpadComma","","",16,N],[13,"NumpadEnter","","",16,N],[13,"NumpadEquals","","",16,N],[13,"OEM102","","",16,N],[13,"Period","","",16,N],[13,"PlayPause","","",16,N],[13,"Power","","",16,N],[13,"PrevTrack","","",16,N],[13,"RAlt","","",16,N],[13,"RBracket","","",16,N],[13,"RControl","","",16,N],[13,"RShift","","",16,N],[13,"RWin","","",16,N],[13,"Semicolon","","",16,N],[13,"Slash","","",16,N],[13,"Sleep","","",16,N],[13,"Stop","","",16,N],[13,"Subtract","","",16,N],[13,"Sysrq","","",16,N],[13,"Tab","","",16,N],[13,"Underline","","",16,N],[13,"Unlabeled","","",16,N],[13,"VolumeDown","","",16,N],[13,"VolumeUp","","",16,N],[13,"Wake","","",16,N],[13,"WebBack","","",16,N],[13,"WebFavorites","","",16,N],[13,"WebForward","","",16,N],[13,"WebHome","","",16,N],[13,"WebRefresh","","",16,N],[13,"WebSearch","","",16,N],[13,"WebStop","","",16,N],[13,"Yen","","",16,N],[13,"Copy","","",16,N],[13,"Paste","","",16,N],[13,"Cut","","",16,N],[3,"Window","","Represents a window.",N,N],[3,"WindowAttributes","","Attributes to use when creating a window.",N,N],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",17,N],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",17,N],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",17,N],[12,"resizable","","Whether the window is resizable or not.",17,N],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",17,N],[12,"title","","The title of the window in the title bar.",17,N],[12,"maximized","","Whether the window should be maximized upon creation.",17,N],[12,"visible","","Whether the window should be immediately visible upon creation.",17,N],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",17,N],[12,"decorations","","Whether the window should have borders and bars.",17,N],[12,"always_on_top","","Whether the window should always be on top of other windows.",17,N],[12,"window_icon","","The window icon.",17,N],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",17,N],[3,"WindowBuilder","","Object that allows you to build windows.",N,N],[12,"window","","The attributes to use to create the window.",18,N],[4,"WindowEvent","","Describes an event from a `Window`.",N,N],[13,"Resized","","The size of the window has changed. Contains the client area's new dimensions.",19,N],[13,"Moved","","The position of the window has changed. Contains the window's new position.",19,N],[13,"CloseRequested","","The window has been requested to close.",19,N],[13,"Destroyed","","The window has been destroyed.",19,N],[13,"DroppedFile","","A file has been dropped into the window.",19,N],[13,"HoveredFile","","A file is being hovered over the window.",19,N],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",19,N],[13,"ReceivedCharacter","","The window received a unicode character.",19,N],[13,"Focused","","The window gained or lost focus.",19,N],[13,"KeyboardInput","","An event from the keyboard has been received.",19,N],[12,"device_id","glutin::WindowEvent","",19,N],[12,"input","","",19,N],[13,"CursorMoved","glutin","The cursor has moved on the window.",19,N],[12,"device_id","glutin::WindowEvent","",19,N],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",19,N],[12,"modifiers","","",19,N],[13,"CursorEntered","glutin","The cursor has entered the window.",19,N],[12,"device_id","glutin::WindowEvent","",19,N],[13,"CursorLeft","glutin","The cursor has left the window.",19,N],[12,"device_id","glutin::WindowEvent","",19,N],[13,"MouseWheel","glutin","A mouse wheel movement or touchpad scroll occurred.",19,N],[12,"device_id","glutin::WindowEvent","",19,N],[12,"delta","","",19,N],[12,"phase","","",19,N],[12,"modifiers","","",19,N],[13,"MouseInput","glutin","An mouse button press has been received.",19,N],[12,"device_id","glutin::WindowEvent","",19,N],[12,"state","","",19,N],[12,"button","","",19,N],[12,"modifiers","","",19,N],[13,"TouchpadPressure","glutin","Touchpad pressure event.",19,N],[12,"device_id","glutin::WindowEvent","",19,N],[12,"pressure","","",19,N],[12,"stage","","",19,N],[13,"AxisMotion","glutin","Motion on some analog axis. May report data redundant to other, more specific events.",19,N],[12,"device_id","glutin::WindowEvent","",19,N],[12,"axis","","",19,N],[12,"value","","",19,N],[13,"Refresh","glutin","The window needs to be redrawn.",19,N],[13,"Touch","","Touch event has been received",19,N],[13,"HiDpiFactorChanged","","The DPI factor of the window has changed.",19,N],[3,"WindowId","","Identifier of a window. Unique for each window.",N,N],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",N,N],[12,"dimensions","","The dimensions to use.",20,N],[12,"opengl","","The OpenGL attributes to build the context with.",20,N],[3,"HeadlessContext","","Represents a headless OpenGL context.",N,N],[3,"Context","","Represents an OpenGL context.",N,N],[3,"ContextBuilder","","Object that allows you to build `Context`s.",N,N],[12,"gl_attr","","The attributes to use to create the context.",21,N],[3,"GlWindow","","Represents an OpenGL context and a Window with which it is associated.",N,N],[3,"PixelFormat","","Describes a possible format. Unused.",N,N],[12,"hardware_accelerated","","",22,N],[12,"color_bits","","",22,N],[12,"alpha_bits","","",22,N],[12,"depth_bits","","",22,N],[12,"stencil_bits","","",22,N],[12,"stereoscopy","","",22,N],[12,"double_buffer","","",22,N],[12,"multisampling","","",22,N],[12,"srgb","","",22,N],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",N,N],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be considered. If false, only software renderers. `None` means \"don't care\". Default is `Some(true)`.",23,N],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\". The default is `Some(24)`.",23,N],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",23,N],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `Some(8)`.",23,N],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(24)`.",23,N],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(8)`.",23,N],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer formats. `None` means \"don't care\". The default is `Some(true)`.",23,N],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",23,N],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic formats. The default is `false`.",23,N],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care. The default is `false`.",23,N],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",23,N],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",N,N],[12,"sharing","","An existing context to share the new the context with.",24,N],[12,"version","","Version to try create. See `GlRequest` for more infos.",24,N],[12,"profile","","OpenGL profile to use.",24,N],[12,"debug","","Whether to enable the `debug` flag of the context.",24,N],[12,"robustness","","How the OpenGL context should detect errors.",24,N],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the screen refreshes. This is typically used to prevent screen tearing.",24,N],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",N,N],[13,"OsError","","",25,N],[13,"NotSupported","","TODO: remove this error",25,N],[13,"NoBackendAvailable","","",25,N],[13,"RobustnessNotSupported","","",25,N],[13,"OpenGlVersionNotSupported","","",25,N],[13,"NoAvailablePixelFormat","","",25,N],[13,"PlatformSpecific","","",25,N],[13,"Window","","",25,N],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",N,N],[13,"OsError","","General platform error.",26,N],[13,"IoError","","",26,N],[13,"ContextLost","","",26,N],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",N,N],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",27,N],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",27,N],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",27,N],[4,"GlProfile","","Describes the requested OpenGL context profiles.",N,N],[13,"Compatibility","","Include all the immediate more functions and definitions.",28,N],[13,"Core","","Include all the future-compatible functions and definitions.",28,N],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",N,N],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",29,N],[13,"Specific","","Request a specific version of a specific API.",29,N],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`. Else if OpenGL ES or WebGL is available, create a context with the specified `opengles_version`.",29,N],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",29,N],[12,"opengles_version","","The version to use for OpenGL ES.",29,N],[4,"Robustness","glutin","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands and/or raw shader code from an untrusted source, you should definitely care about this.",N,N],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your shaders.",30,N],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're doing before using it. See the `GL_KHR_no_error` extension.",30,N],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem, but if a problem occurs the behavior is implementation-defined. You are just guaranteed not to get a crash.",30,N],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not supported.",30,N],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a \"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a way to recreate a context with the same window :-/",30,N],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not supported.",30,N],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",N,N],[13,"None","","Doesn't do anything. Most notably doesn't flush.",31,N],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",31,N],[11,"clone","","",20,[[["self"]],["headlessrendererbuilder"]]],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",20,[[["u32"],["u32"]],["headlessrendererbuilder"]]],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",20,[[["self"],["glrequest"]],["headlessrendererbuilder"]]],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",20,[[["self"],["glprofile"]],["headlessrendererbuilder"]]],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",20,[[["self"],["bool"]],["headlessrendererbuilder"]]],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",20,[[["self"],["robustness"]],["headlessrendererbuilder"]]],[11,"build","","Builds the headless context.",20,[[["self"]],["result",["headlesscontext","creationerror"]]]],[11,"build_strict","","Builds the headless context.",20,[[["self"]],["result",["headlesscontext","creationerror"]]]],[11,"make_current","","Creates a new OpenGL context Sets the context as the current context.",32,[[["self"]],["result",["contexterror"]]]],[11,"is_current","","Returns true if this context is the current one in this thread.",32,[[["self"]],["bool"]]],[11,"get_proc_address","","Returns the address of an OpenGL function.",32,N],[11,"get_api","","Returns the API that is currently provided by this window.",32,[[["self"]],["api"]]],[11,"swap_buffers","","",32,[[["self"]],["result",["contexterror"]]]],[11,"get_pixel_format","","",32,[[["self"]],["pixelformat"]]],[11,"resize","","",32,[[["self"],["physicalsize"]]]],[0,"os","","Contains traits with platform-specific methods in them.",N,N],[0,"unix","glutin::os","",N,N],[4,"XNotSupported","glutin::os::unix","Error returned if this system doesn't have XLib or can't create an X connection.",N,N],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",33,N],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",33,N],[4,"XWindowType","","X window type. Maps directly to `_NET_WM_WINDOW_TYPE`.",N,N],[13,"Desktop","","A desktop feature. This can include a single window containing desktop icons with the same dimensions as the screen, allowing the desktop environment to have full control of the desktop, without the need for proxying root window clicks.",34,N],[13,"Dock","","A dock or panel feature. Typically a Window Manager would keep such windows on top of all other windows.",34,N],[13,"Toolbar","","Toolbar windows. \"Torn off\" from the main application.",34,N],[13,"Menu","","Pinnable menu windows. \"Torn off\" from the main application.",34,N],[13,"Utility","","A small persistent utility window, such as a palette or toolbox.",34,N],[13,"Splash","","The window is a splash screen displayed as an application is starting up.",34,N],[13,"Dialog","","This is a dialog window.",34,N],[13,"Normal","","This is a normal, top-level window.",34,N],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",N,N],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",35,[[],["result",["xnotsupported"]]]],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",35,[[],["self"]]],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",35,[[["self"]],["bool"]]],[10,"is_x11","","True if the `EventsLoop` uses X11.",35,[[["self"]],["bool"]]],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",N,N],[10,"native_id","","Returns the inner identifier of the monitor.",36,[[["self"]],["u32"]]],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",N,N],[10,"with_x11_visual","","",37,N],[10,"with_x11_screen","","",37,[[["self"],["i32"]],["windowbuilder"]]],[10,"with_class","","Build window with `WM_CLASS` hint; defaults to the name of the binary. Only relevant on X11.",37,[[["self"],["string"],["string"]],["windowbuilder"]]],[10,"with_override_redirect","","Build window with override-redirect flag; defaults to false. Only relevant on X11.",37,[[["self"],["bool"]],["windowbuilder"]]],[10,"with_x11_window_type","","Build window with `_NET_WM_WINDOW_TYPE` hint; defaults to `Normal`. Only relevant on X11.",37,[[["self"],["windowtype"]],["windowbuilder"]]],[10,"with_resize_increments","","Build window with resize increment hint. Only implemented on X11.",37,[[["self"],["logicalsize"]],["windowbuilder"]]],[10,"with_base_size","","Build window with base size hint. Only implemented on X11.",37,[[["self"],["logicalsize"]],["windowbuilder"]]],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",N,N],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",38,[[["self"]],["option",["u64"]]]],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",38,[[["self"]],["option"]]],[10,"get_xlib_screen_id","","",38,[[["self"]],["option",["i32"]]]],[10,"set_urgent","","Set window urgency hint (`XUrgencyHint`). Only relevant on X.",38,N],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",38,[[["self"]],["option"]]],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",38,[[["self"]],["option"]]],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",38,[[["self"]],["option"]]],[10,"is_ready","","Check if the window is ready for drawing",38,[[["self"]],["bool"]]],[4,"RawHandle","","Context handles available on Unix-like platforms.",N,N],[13,"Glx","","",39,N],[13,"Egl","","",39,N],[6,"EGLContext","","",N,N],[6,"GLXContext","","",N,N],[11,"raw_handle","glutin","",40,N],[11,"raw_handle","","",32,N],[8,"GlContextExt","glutin::os","Platform-specific extensions for OpenGL contexts.",N,N],[16,"Handle","","Raw context handle.",41,N],[10,"raw_handle","","Returns the raw context handle.",41,N],[7,"GL_CORE","glutin","The minimum core profile GL context. Useful for getting the minimum required GL version while still running on OSX, which often forbids the compatibility profile features.",N,N],[8,"GlContext","","A trait for types associated with a GL context.",N,N],[10,"make_current","","Sets the context as the current context.",42,[[["self"]],["result",["contexterror"]]]],[10,"is_current","","Returns true if this context is the current one in this thread.",42,[[["self"]],["bool"]]],[10,"get_proc_address","","Returns the address of an OpenGL function.",42,N],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",42,[[["self"]],["result",["contexterror"]]]],[10,"get_api","","Returns the OpenGL API being used.",42,[[["self"]],["api"]]],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",42,[[["self"]],["pixelformat"]]],[10,"resize","","Resize the GL context.",42,[[["self"],["physicalsize"]]]],[11,"new","","Initializes a new `ContextBuilder` with default values.",21,[[],["self"]]],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",21,[[["self"],["glrequest"]],["self"]]],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",21,[[["self"],["glprofile"]],["self"]]],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",21,[[["self"],["bool"]],["self"]]],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",21,[[["self"],["robustness"]],["self"]]],[11,"with_vsync","","Requests that the window has vsync enabled.",21,[[["self"],["bool"]],["self"]]],[11,"with_shared_lists","","Share the display lists with the given `Context`.",21,[[["self"],["context"]],["self"]]],[11,"with_multisampling","","Sets the multisampling level to request. A value of `0` indicates that multisampling must not be enabled.",21,[[["self"],["u16"]],["self"]]],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",21,[[["self"],["u8"]],["self"]]],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",21,[[["self"],["u8"]],["self"]]],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",21,[[["self"],["u8"],["u8"]],["self"]]],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",21,[[["self"]],["self"]]],[11,"with_srgb","","Sets whether sRGB should be enabled on the window.",21,[[["self"],["bool"]],["self"]]],[11,"with_double_buffer","","Sets whether double buffering should be enabled.",21,[[["self"],["option",["bool"]]],["self"]]],[11,"with_hardware_acceleration","","Sets whether hardware acceleration is required.",21,[[["self"],["option",["bool"]]],["self"]]],[11,"new","","Builds the given window along with the associated GL context, returning the pair as a `GlWindow`.",43,[[["windowbuilder"],["contextbuilder"],["eventsloop"]],["result",["creationerror"]]]],[11,"window","","Borrow the inner `Window`.",43,[[["self"]],["window"]]],[11,"context","","Borrow the inner GL `Context`.",43,[[["self"]],["context"]]],[11,"make_current","","",40,[[["self"]],["result",["contexterror"]]]],[11,"is_current","","",40,[[["self"]],["bool"]]],[11,"get_proc_address","","",40,N],[11,"swap_buffers","","",40,[[["self"]],["result",["contexterror"]]]],[11,"get_api","","",40,[[["self"]],["api"]]],[11,"get_pixel_format","","",40,[[["self"]],["pixelformat"]]],[11,"resize","","",40,[[["self"],["physicalsize"]]]],[11,"make_current","","",43,[[["self"]],["result",["contexterror"]]]],[11,"is_current","","",43,[[["self"]],["bool"]]],[11,"get_proc_address","","",43,N],[11,"swap_buffers","","",43,[[["self"]],["result",["contexterror"]]]],[11,"get_api","","",43,[[["self"]],["api"]]],[11,"get_pixel_format","","",43,[[["self"]],["pixelformat"]]],[11,"resize","","",43,[[["self"],["physicalsize"]]]],[11,"deref","","",43,N],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",25,[[["self"]],["str"]]],[11,"cause","","",25,[[["self"]],["option",["error"]]]],[11,"from","","",25,[[["windowcreationerror"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",26,[[["self"]],["str"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["api"]]],[11,"eq","","",27,[[["self"],["api"]],["bool"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["glprofile"]]],[11,"eq","","",28,[[["self"],["glprofile"]],["bool"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["glrequest"]]],[11,"to_gl_version","","Extract the desktop GL version, if any.",29,[[["self"]],["option"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["robustness"]]],[11,"eq","","",30,[[["self"],["robustness"]],["bool"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["releasebehavior"]]],[11,"eq","","",31,[[["self"],["releasebehavior"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["pixelformat"]]],[11,"clone","","",23,[[["self"]],["pixelformatrequirements"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"default","","",23,[[],["pixelformatrequirements"]]],[11,"clone","","",24,[[["self"]],["glattributes"]]],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",24,[[["self"],["f"]],["glattributes"]]],[11,"default","","",24,[[],["glattributes"]]],[11,"clone","","",9,[[["self"]],["keyboardinput"]]],[11,"clone","glutin::os::unix","",34,[[["self"]],["windowtype"]]],[11,"clone","glutin","",44,[[["self"]],["eventsloopproxy"]]],[11,"clone","","",12,[[["self"]],["mousecursor"]]],[11,"clone","glutin::dpi","",3,[[["self"]],["logicalposition"]]],[11,"clone","glutin","",14,[[["self"]],["touch"]]],[11,"clone","","",45,[[["self"]],["eventsloopclosed"]]],[11,"clone","glutin::dpi","",6,[[["self"]],["physicalsize"]]],[11,"clone","glutin","",18,[[["self"]],["windowbuilder"]]],[11,"clone","","",8,[[["self"]],["event"]]],[11,"clone","","",11,[[["self"]],["mousebutton"]]],[11,"clone","","",7,[[["self"]],["elementstate"]]],[11,"clone","glutin::dpi","",5,[[["self"]],["logicalsize"]]],[11,"clone","glutin","",46,[[["self"]],["windowid"]]],[11,"clone","","",17,[[["self"]],["windowattributes"]]],[11,"clone","","",10,[[["self"]],["modifiersstate"]]],[11,"clone","","",15,[[["self"]],["touchphase"]]],[11,"clone","","",2,[[["self"]],["deviceevent"]]],[11,"clone","glutin::os::unix","",33,[[["self"]],["xnotsupported"]]],[11,"clone","glutin::dpi","",4,[[["self"]],["physicalposition"]]],[11,"clone","glutin","",13,[[["self"]],["mousescrolldelta"]]],[11,"clone","","",47,[[["self"]],["monitorid"]]],[11,"clone","","",16,[[["self"]],["virtualkeycode"]]],[11,"clone","","",1,[[["self"]],["creationerror"]]],[11,"clone","","",48,[[["self"]],["icon"]]],[11,"clone","","",19,[[["self"]],["windowevent"]]],[11,"clone","","",49,[[["self"]],["deviceid"]]],[11,"clone","","",0,[[["self"]],["controlflow"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin::dpi","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin::os::unix","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin::dpi","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin::dpi","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin::os::unix","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin::dpi","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",49,[[["self"],["deviceid"]],["option",["ordering"]]]],[11,"lt","","",49,[[["self"],["deviceid"]],["bool"]]],[11,"le","","",49,[[["self"],["deviceid"]],["bool"]]],[11,"gt","","",49,[[["self"],["deviceid"]],["bool"]]],[11,"ge","","",49,[[["self"],["deviceid"]],["bool"]]],[11,"partial_cmp","","",46,[[["self"],["windowid"]],["option",["ordering"]]]],[11,"lt","","",46,[[["self"],["windowid"]],["bool"]]],[11,"le","","",46,[[["self"],["windowid"]],["bool"]]],[11,"gt","","",46,[[["self"],["windowid"]],["bool"]]],[11,"ge","","",46,[[["self"],["windowid"]],["bool"]]],[11,"description","glutin::os::unix","",33,[[["self"]],["str"]]],[11,"cause","","",33,[[["self"]],["option",["error"]]]],[11,"description","glutin","",45,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cmp","","",49,[[["self"],["deviceid"]],["ordering"]]],[11,"cmp","","",46,[[["self"],["windowid"]],["ordering"]]],[11,"get_xlib_window","","",51,[[["self"]],["option",["u64"]]]],[11,"get_xlib_display","","",51,[[["self"]],["option"]]],[11,"get_xlib_screen_id","","",51,[[["self"]],["option",["i32"]]]],[11,"get_xcb_connection","","",51,[[["self"]],["option"]]],[11,"set_urgent","","",51,N],[11,"get_wayland_surface","","",51,[[["self"]],["option"]]],[11,"get_wayland_display","","",51,[[["self"]],["option"]]],[11,"is_ready","","",51,[[["self"]],["bool"]]],[11,"default","","",17,[[],["windowattributes"]]],[11,"default","","",10,[[],["modifiersstate"]]],[11,"default","","",12,[[],["mousecursor"]]],[11,"default","glutin::os::unix","",34,[[],["windowtype"]]],[11,"hash","glutin","",45,N],[11,"hash","","",16,N],[11,"hash","","",7,N],[11,"hash","","",10,N],[11,"hash","glutin::os::unix","",34,N],[11,"hash","glutin","",46,N],[11,"hash","","",15,N],[11,"hash","","",49,N],[11,"hash","","",11,N],[11,"native_id","","",47,[[["self"]],["u32"]]],[11,"with_x11_visual","","",18,N],[11,"with_x11_screen","","",18,[[["self"],["i32"]],["windowbuilder"]]],[11,"with_class","","",18,[[["self"],["string"],["string"]],["windowbuilder"]]],[11,"with_override_redirect","","",18,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_x11_window_type","","",18,[[["self"],["windowtype"]],["windowbuilder"]]],[11,"with_resize_increments","","",18,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"with_base_size","","",18,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"new_x11","","",52,[[],["result",["eventsloop","xnotsupported"]]]],[11,"new_wayland","","",52,[[],["eventsloop"]]],[11,"is_wayland","","",52,[[["self"]],["bool"]]],[11,"is_x11","","",52,[[["self"]],["bool"]]],[11,"from","glutin::dpi","",5,N],[11,"from","","",3,N],[11,"from","glutin","",10,[[["modifiersstate"]],["modifiersstate"]]],[11,"from","glutin::dpi","",3,N],[11,"from","glutin","",10,[[["ximodifierstate"]],["modifiersstate"]]],[11,"from","glutin::dpi","",6,N],[11,"from","","",6,N],[11,"from","glutin::os::unix","",33,[[["openerror"]],["xnotsupported"]]],[11,"from","glutin::dpi","",4,N],[11,"from","","",4,N],[11,"from","","",5,N],[11,"into","","Note that this rounds instead of truncating.",5,N],[11,"into","","Note that this rounds instead of truncating.",3,N],[11,"into","","Note that this rounds instead of truncating.",4,N],[11,"into","","",5,N],[11,"into","","",6,N],[11,"into","","Note that this rounds instead of truncating.",6,N],[11,"into","","",4,N],[11,"into","","",3,N],[11,"fmt","glutin","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin::os::unix","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","glutin","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","glutin::dpi","",5,[[["self"],["logicalsize"]],["bool"]]],[11,"ne","","",5,[[["self"],["logicalsize"]],["bool"]]],[11,"eq","glutin","",46,[[["self"],["windowid"]],["bool"]]],[11,"ne","","",46,[[["self"],["windowid"]],["bool"]]],[11,"eq","","",0,[[["self"],["controlflow"]],["bool"]]],[11,"eq","","",49,[[["self"],["deviceid"]],["bool"]]],[11,"ne","","",49,[[["self"],["deviceid"]],["bool"]]],[11,"eq","","",13,[[["self"],["mousescrolldelta"]],["bool"]]],[11,"ne","","",13,[[["self"],["mousescrolldelta"]],["bool"]]],[11,"eq","","",45,[[["self"],["eventsloopclosed"]],["bool"]]],[11,"eq","glutin::dpi","",6,[[["self"],["physicalsize"]],["bool"]]],[11,"ne","","",6,[[["self"],["physicalsize"]],["bool"]]],[11,"eq","","",4,[[["self"],["physicalposition"]],["bool"]]],[11,"ne","","",4,[[["self"],["physicalposition"]],["bool"]]],[11,"eq","glutin::os::unix","",34,[[["self"],["windowtype"]],["bool"]]],[11,"eq","glutin","",11,[[["self"],["mousebutton"]],["bool"]]],[11,"ne","","",11,[[["self"],["mousebutton"]],["bool"]]],[11,"eq","","",12,[[["self"],["mousecursor"]],["bool"]]],[11,"eq","glutin::dpi","",3,[[["self"],["logicalposition"]],["bool"]]],[11,"ne","","",3,[[["self"],["logicalposition"]],["bool"]]],[11,"eq","glutin","",10,[[["self"],["modifiersstate"]],["bool"]]],[11,"ne","","",10,[[["self"],["modifiersstate"]],["bool"]]],[11,"eq","","",48,[[["self"],["icon"]],["bool"]]],[11,"ne","","",48,[[["self"],["icon"]],["bool"]]],[11,"eq","","",7,[[["self"],["elementstate"]],["bool"]]],[11,"eq","","",16,[[["self"],["virtualkeycode"]],["bool"]]],[11,"eq","","",15,[[["self"],["touchphase"]],["bool"]]],[11,"next","","",50,[[["self"]],["option",["monitorid"]]]],[11,"size_hint","","",50,N],[11,"new","glutin::dpi","",3,[[["f64"],["f64"]],["logicalposition"]]],[11,"from_physical","","",3,[[["t"],["f64"]],["logicalposition"]]],[11,"to_physical","","",3,[[["self"],["f64"]],["physicalposition"]]],[11,"new","","",4,[[["f64"],["f64"]],["physicalposition"]]],[11,"from_logical","","",4,[[["t"],["f64"]],["physicalposition"]]],[11,"to_logical","","",4,[[["self"],["f64"]],["logicalposition"]]],[11,"new","","",5,[[["f64"],["f64"]],["logicalsize"]]],[11,"from_physical","","",5,[[["t"],["f64"]],["logicalsize"]]],[11,"to_physical","","",5,[[["self"],["f64"]],["physicalsize"]]],[11,"new","","",6,[[["f64"],["f64"]],["physicalsize"]]],[11,"from_logical","","",6,[[["t"],["f64"]],["physicalsize"]]],[11,"to_logical","","",6,[[["self"],["f64"]],["logicalsize"]]],[11,"new","glutin","Builds a new events loop.",52,[[],["eventsloop"]]],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",52,[[["self"]],["availablemonitorsiter"]]],[11,"get_primary_monitor","","Returns the primary monitor of the system.",52,[[["self"]],["monitorid"]]],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",52,N],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",52,N],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",52,[[["self"]],["eventsloopproxy"]]],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",44,[[["self"]],["result",["eventsloopclosed"]]]],[11,"from_rgba","","Creates an `Icon` from 32bpp RGBA data.",48,[[["vec",["u8"]],["u32"],["u32"]],["result",["icon","badicon"]]]],[11,"get_name","","Returns a human-readable name of the monitor.",47,[[["self"]],["option",["string"]]]],[11,"get_dimensions","","Returns the monitor's resolution.",47,[[["self"]],["physicalsize"]]],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",47,[[["self"]],["physicalposition"]]],[11,"get_hidpi_factor","","Returns the DPI factor that can be used to map logical pixels to physical pixels, and vice versa.",47,[[["self"]],["f64"]]],[11,"new","","Creates a new Window for platforms where this is appropriate.",51,[[["eventsloop"]],["result",["window","creationerror"]]]],[11,"set_title","","Modifies the title of the window.",51,N],[11,"show","","Shows the window if it was hidden.",51,N],[11,"hide","","Hides the window if it was visible.",51,N],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",51,[[["self"]],["option",["logicalposition"]]]],[11,"get_inner_position","","Returns the position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.",51,[[["self"]],["option",["logicalposition"]]]],[11,"set_position","","Modifies the position of the window.",51,N],[11,"get_inner_size","","Returns the logical size of the window's client area.",51,[[["self"]],["option",["logicalsize"]]]],[11,"get_outer_size","","Returns the logical size of the entire window.",51,[[["self"]],["option",["logicalsize"]]]],[11,"set_inner_size","","Modifies the inner size of the window.",51,N],[11,"set_min_dimensions","","Sets a minimum dimension size for the window.",51,N],[11,"set_max_dimensions","","Sets a maximum dimension size for the window.",51,N],[11,"set_resizable","","Sets whether the window is resizable or not.",51,N],[11,"get_hidpi_factor","","Returns the DPI factor that can be used to map logical pixels to physical pixels, and vice versa.",51,[[["self"]],["f64"]]],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",51,N],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",51,[[["self"],["logicalposition"]],["result",["string"]]]],[11,"grab_cursor","","Grabs the cursor, preventing it from leaving the window.",51,[[["self"],["bool"]],["result",["string"]]]],[11,"hide_cursor","","Hides the cursor, making it invisible but still usable.",51,N],[11,"set_maximized","","Sets the window to maximized or back",51,N],[11,"set_fullscreen","","Sets the window to fullscreen or back",51,N],[11,"set_decorations","","Turn window decorations on or off.",51,N],[11,"set_always_on_top","","Change whether or not the window will always be on top of other windows.",51,N],[11,"set_window_icon","","Sets the window icon. On Windows and X11, this is typically the small icon in the top-left corner of the titlebar.",51,N],[11,"set_ime_spot","","Sets location of IME candidate box in client area coordinates relative to the top left.",51,N],[11,"get_current_monitor","","Returns the monitor on which the window currently resides",51,[[["self"]],["monitorid"]]],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",51,[[["self"]],["availablemonitorsiter"]]],[11,"get_primary_monitor","","Returns the primary monitor of the system.",51,[[["self"]],["monitorid"]]],[11,"id","","",51,[[["self"]],["windowid"]]],[11,"new","","Initializes a new `WindowBuilder` with default values.",18,[[],["windowbuilder"]]],[11,"with_dimensions","","Requests the window to be of specific dimensions.",18,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",18,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",18,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"with_resizable","","Sets whether the window is resizable or not",18,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_title","","Requests a specific title for the window.",18,[[["self"],["t"]],["windowbuilder"]]],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",18,[[["self"],["option",["monitorid"]]],["windowbuilder"]]],[11,"with_maximized","","Requests maximized mode.",18,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",18,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_transparency","","Sets whether the background of the window should be transparent.",18,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",18,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_always_on_top","","Sets whether or not the window will always be on top of other windows.",18,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_window_icon","","Sets the window icon. On Windows and X11, this is typically the small icon in the top-left corner of the titlebar.",18,[[["self"],["option",["icon"]]],["windowbuilder"]]],[11,"with_multitouch","","Enables multitouch.",18,[[["self"]],["windowbuilder"]]],[11,"build","","Builds the window.",18,[[["self"],["eventsloop"]],["result",["window","creationerror"]]]],[11,"clone","glutin::os::unix","",39,[[["self"]],["rawhandle"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"ControlFlow"],[4,"WindowCreationError"],[4,"DeviceEvent"],[3,"LogicalPosition"],[3,"PhysicalPosition"],[3,"LogicalSize"],[3,"PhysicalSize"],[4,"ElementState"],[4,"Event"],[3,"KeyboardInput"],[3,"ModifiersState"],[4,"MouseButton"],[4,"MouseCursor"],[4,"MouseScrollDelta"],[3,"Touch"],[4,"TouchPhase"],[4,"VirtualKeyCode"],[3,"WindowAttributes"],[3,"WindowBuilder"],[4,"WindowEvent"],[3,"HeadlessRendererBuilder"],[3,"ContextBuilder"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"GlAttributes"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[3,"HeadlessContext"],[4,"XNotSupported"],[4,"XWindowType"],[8,"EventsLoopExt"],[8,"MonitorIdExt"],[8,"WindowBuilderExt"],[8,"WindowExt"],[4,"RawHandle"],[3,"Context"],[8,"GlContextExt"],[8,"GlContext"],[3,"GlWindow"],[3,"EventsLoopProxy"],[3,"EventsLoopClosed"],[3,"WindowId"],[3,"MonitorId"],[3,"Icon"],[3,"DeviceId"],[3,"AvailableMonitorsIter"],[3,"Window"],[3,"EventsLoop"]]};
searchIndex["hetseq"]={"doc":"","items":[[3,"List","hetseq","Heterogenous list Supports pushing, splitting to head and tail Mapping and folding",N,N],[12,"0","","",0,N],[3,"P","","Type level -1",N,N],[3,"S","","Type level +1",N,N],[3,"Queue","","Heterogenous queue Supports pushing, splitting to init and last Mapping and folding",N,N],[12,"0","","",1,N],[4,"Z","","Type level zero value",N,N],[11,"by_ref","","",0,N],[11,"by_ref","","",0,N],[11,"by_ref","","",1,N],[11,"by_ref","","",1,N],[11,"fold","","",0,[[["self"],["i"],["f"]],["i"]]],[11,"fold","","",1,[[["self"],["i"],["f"]],["i"]]],[11,"fold","","",0,[[["self"],["i"],["f"]],["i"]]],[11,"fold","","",1,[[["self"],["i"],["f"]],["i"]]],[11,"fmap","","",0,[[["self"],["f"]],["list"]]],[11,"fmap","","",1,[[["self"],["f"]],["queue"]]],[11,"fmap","","",0,N],[11,"fmap","","",1,N],[11,"clone","","",0,[[["self"]],["list"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["list"]],["bool"]]],[11,"ne","","",0,[[["self"],["list"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["list"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["list"]],["bool"]]],[11,"le","","",0,[[["self"],["list"]],["bool"]]],[11,"gt","","",0,[[["self"],["list"]],["bool"]]],[11,"ge","","",0,[[["self"],["list"]],["bool"]]],[11,"cmp","","",0,[[["self"],["list"]],["ordering"]]],[11,"new","","",0,[[],["list"]]],[11,"push","","",0,[[["self"],["v"]],["list"]]],[11,"head","","",0,[[["self"]],["h"]]],[11,"tail","","",0,[[["self"]],["list"]]],[11,"into_list","","",0,[[["self"]],["self"]]],[11,"value","","",2,[[],["usize"]]],[11,"value","","",3,[[],["usize"]]],[11,"value","","",4,[[],["usize"]]],[11,"try","","",0,[[["self"]],["result",["list"]]]],[11,"try","","",0,[[["self"]],["result",["list"]]]],[11,"try","","",1,[[["self"]],["result",["queue"]]]],[11,"try","","",1,[[["self"]],["result",["queue"]]]],[11,"clone","","",1,[[["self"]],["queue"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["queue"]],["bool"]]],[11,"ne","","",1,[[["self"],["queue"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["queue"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["queue"]],["bool"]]],[11,"le","","",1,[[["self"],["queue"]],["bool"]]],[11,"gt","","",1,[[["self"],["queue"]],["bool"]]],[11,"ge","","",1,[[["self"],["queue"]],["bool"]]],[11,"cmp","","",1,[[["self"],["queue"]],["ordering"]]],[11,"new","","",1,[[],["queue"]]],[11,"push","","",1,[[["self"],["v"]],["queue"]]],[11,"init","","",1,[[["self"]],["queue"]]],[11,"last","","",1,[[["self"]],["t"]]],[11,"zip","","",0,[[["self"],["list"]],["list"]]],[11,"zip","","",0,N],[11,"zip","","",1,[[["self"],["queue"]],["queue"]]],[11,"zip","","",1,N],[0,"prelude","","",N,N],[8,"HetFnOnce","hetseq::prelude","Substitution for FnMut trait family in stable and beta channels In nightly consider to use \"nightly\" feature and FnMut trait family",N,N],[16,"Output","","Output of the function",5,N],[10,"call_once","","Call the function",5,N],[8,"HetFnMut","","Substitution for FnMut trait family in stable and beta channels In nightly consider to use \"nightly\" feature and FnMut trait family",N,N],[10,"call_mut","","Call the function",6,N],[8,"HetFn","","Substitution for Fn trait family in stable and beta channels In nightly consider to use \"nightly\" feature and Fn trait family",N,N],[10,"call","","Call the function",7,N],[8,"ByRef","hetseq","",N,N],[16,"Refs","","",8,N],[10,"by_ref","","",8,N],[8,"HetFnOnce","","Substitution for FnMut trait family in stable and beta channels In nightly consider to use \"nightly\" feature and FnMut trait family",N,N],[16,"Output","","Output of the function",5,N],[10,"call_once","","Call the function",5,N],[8,"HetFnMut","","Substitution for FnMut trait family in stable and beta channels In nightly consider to use \"nightly\" feature and FnMut trait family",N,N],[10,"call_mut","","Call the function",6,N],[8,"HetFn","","Substitution for Fn trait family in stable and beta channels In nightly consider to use \"nightly\" feature and Fn trait family",N,N],[10,"call","","Call the function",7,N],[8,"Foldable","","Foldable heterogenous list",N,N],[10,"fold","","fold sequence using `F`unction starting with `I`nit value",9,[[["self"],["i"],["f"]],["i"]]],[8,"Functor","","Functor over heterogenous list",N,N],[16,"Output","","Result of mapping",10,N],[10,"fmap","","Map sequence using `F`unction",10,N],[8,"Length","","",N,N],[16,"Length","","",11,N],[11,"len","","",11,[[],["usize"]]],[8,"IntoList","","",N,N],[16,"List","","",12,N],[10,"into_list","","",12,N],[8,"Num","","Type level number",N,N],[16,"S","","Next number",13,N],[16,"P","","Previous number",13,N],[10,"value","","Convert to value level",13,[[],["usize"]]],[8,"Try","","",N,N],[16,"Ok","","Sequence of `Ok` `Result`s",14,N],[10,"try","","",14,[[["self"]],["result"]]],[8,"IntoQueue","","",N,N],[16,"Queue","","",15,N],[10,"into_queue","","",15,N],[8,"Zip","","",N,N],[16,"Zipped","","",16,N],[10,"zip","","",16,N],[14,"hlist","","Convenient way to define heterogenous `List`",N,N],[14,"hqueue","","Convenient way to define heterogenous `Queue`",N,N],[14,"HQueue","","Convenient way to define heterogenous `Queue`",N,N],[14,"lambda","","This macro can be used to define lambdas with syntax similar to rust's lambdas Arguments are bounded by traits Mainly to use with `Functor` and `Foldable`",N,N],[11,"len","","",11,[[],["usize"]]]],"paths":[[3,"List"],[3,"Queue"],[4,"Z"],[3,"S"],[3,"P"],[8,"HetFnOnce"],[8,"HetFnMut"],[8,"HetFn"],[8,"ByRef"],[8,"Foldable"],[8,"Functor"],[8,"Length"],[8,"IntoList"],[8,"Num"],[8,"Try"],[8,"IntoQueue"],[8,"Zip"]]};
searchIndex["hibitset"]={"doc":"hibitset","items":[[3,"AtomicBitSet","hibitset","This is similar to a [`BitSet`] but allows setting of value without unique ownership of the structure",N,N],[3,"BitIter","","An `Iterator` over a [`BitSetLike`] structure.",N,N],[3,"DrainBitIter","","A draining `Iterator` over a [`DrainableBitSet`] structure.",N,N],[3,"BitParIter","","A `ParallelIterator` over a [`BitSetLike`] structure.",N,N],[3,"BitProducer","","Allows splitting and internally iterating through `BitSet`.",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[3,"BitSetAll","","`BitSetAll` is a bitset with all bits set. Essentially the same as `BitSetNot(BitSet::new())` but without any allocation.",N,N],[3,"BitSetAnd","","`BitSetAnd` takes two [`BitSetLike`] items, and merges the masks returning a new virtual set, which represents an intersection of the two original sets.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[3,"BitSetNot","","`BitSetNot` takes a [`BitSetLike`] item, and produced an inverted virtual set. Note: the implementation is sub-optimal because layers 1-3 are not active.",N,N],[12,"0","","",2,N],[3,"BitSetOr","","`BitSetOr` takes two [`BitSetLike`] items, and merges the masks returning a new virtual set, which represents an merged of the two original sets.",N,N],[12,"0","","",3,N],[12,"1","","",3,N],[3,"BitSetXor","","`BitSetXor` takes two [`BitSetLike`] items, and merges the masks returning a new virtual set, which represents an merged of the two original sets.",N,N],[12,"0","","",4,N],[12,"1","","",4,N],[3,"BitSet","","A `BitSet` is a simple set designed to track which indices are placed into it.",N,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates an empty `AtomicBitSet`.",5,[[],["atomicbitset"]]],[11,"add_atomic","","Adds `id` to the `AtomicBitSet`. Returns `true` if the value was already in the set.",5,[[["self"],["u32"]],["bool"]]],[11,"add","","Adds `id` to the `BitSet`. Returns `true` if the value was already in the set.",5,[[["self"],["u32"]],["bool"]]],[11,"remove","","Removes `id` from the set, returns `true` if the value was removed, and `false` if the value was not set to begin with.",5,[[["self"],["u32"]],["bool"]]],[11,"contains","","Returns `true` if `id` is in the set.",5,[[["self"],["u32"]],["bool"]]],[11,"clear","","Clear all bits in the set",5,[[["self"]]]],[11,"layer3","","",5,[[["self"]],["usize"]]],[11,"layer2","","",5,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",5,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",5,[[["self"],["usize"]],["usize"]]],[11,"contains","","",5,[[["self"],["u32"]],["bool"]]],[11,"remove","","",5,[[["self"],["u32"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `BitParIter`. You usually don't call this function but just [`.par_iter()`] on a bit set.",6,[[["t"]],["self"]]],[11,"layers_split","","Sets how many layers are split when forking.",6,[[["self"],["u8"]],["self"]]],[11,"drive_unindexed","","",6,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"split","","How the splitting is done:",0,N],[11,"fold_with","","",0,[[["self"],["f"]],["f"]]],[11,"new","","Creates a new `DrainBitIter`. You usually don't call this function but just [`.drain()`] on a bit set.",7,N],[11,"next","","",7,[[["self"]],["option"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `BitIter`. You usually don't call this function but just [`.iter()`] on a bit set.",8,N],[11,"contains","","Allows checking if set bit is contained in underlying bit set.",8,[[["self"],["u32"]],["bool"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"bitor_assign","","",9,[[["self"],["b"]]]],[11,"bitand_assign","","",9,[[["self"],["b"]]]],[11,"bitxor_assign","","",9,[[["self"],["b"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"layer3","","",1,[[["self"]],["usize"]]],[11,"layer2","","",1,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",1,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",1,[[["self"],["usize"]],["usize"]]],[11,"contains","","",1,[[["self"],["u32"]],["bool"]]],[11,"remove","","",1,[[["self"],["u32"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"layer3","","",3,[[["self"]],["usize"]]],[11,"layer2","","",3,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",3,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",3,[[["self"],["usize"]],["usize"]]],[11,"contains","","",3,[[["self"],["u32"]],["bool"]]],[11,"remove","","",3,[[["self"],["u32"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"layer3","","",2,[[["self"]],["usize"]]],[11,"layer2","","",2,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",2,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",2,[[["self"],["usize"]],["usize"]]],[11,"contains","","",2,[[["self"],["u32"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"layer3","","",4,[[["self"]],["usize"]]],[11,"layer2","","",4,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",4,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",4,[[["self"],["usize"]],["usize"]]],[11,"contains","","",4,[[["self"],["u32"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"layer3","","",10,[[["self"]],["usize"]]],[11,"layer2","","",10,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",10,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",10,[[["self"],["usize"]],["usize"]]],[11,"contains","","",10,[[["self"],["u32"]],["bool"]]],[11,"into_iter","","",9,N],[11,"not","","",9,N],[11,"bitand","","",9,N],[11,"bitor","","",9,N],[11,"bitxor","","",9,N],[11,"into_iter","","",5,N],[11,"not","","",5,N],[11,"bitand","","",5,N],[11,"bitor","","",5,N],[11,"bitxor","","",5,N],[11,"into_iter","","",2,N],[11,"not","","",2,N],[11,"bitand","","",2,N],[11,"bitor","","",2,N],[11,"bitxor","","",2,N],[11,"into_iter","","",1,N],[11,"not","","",1,N],[11,"bitand","","",1,N],[11,"bitor","","",1,N],[11,"bitxor","","",1,N],[11,"into_iter","","",3,N],[11,"not","","",3,N],[11,"bitand","","",3,N],[11,"bitor","","",3,N],[11,"bitxor","","",3,N],[11,"into_iter","","",4,N],[11,"not","","",4,N],[11,"bitand","","",4,N],[11,"bitor","","",4,N],[11,"bitxor","","",4,N],[11,"into_iter","","",10,N],[11,"not","","",10,N],[11,"bitand","","",10,N],[11,"bitor","","",10,N],[11,"bitxor","","",10,N],[11,"from_iter","","",9,[[["t"]],["self"]]],[11,"from_iter","","",9,[[["t"]],["self"]]],[11,"extend","","",9,[[["self"],["t"]]]],[11,"extend","","",9,[[["self"],["t"]]]],[11,"from_iter","","",5,[[["t"]],["self"]]],[11,"from_iter","","",5,[[["t"]],["self"]]],[11,"extend","","",5,[[["self"],["t"]]]],[11,"extend","","",5,[[["self"],["t"]]]],[8,"BitSetLike","","A generic interface for [`BitSetLike`]-like types.",N,N],[11,"get_from_layer","","Gets the `usize` corresponding to layer and index.",11,[[["self"],["usize"],["usize"]],["usize"]]],[10,"layer3","","Return a `usize` where each bit represents if any word in layer2 has been set.",11,[[["self"]],["usize"]]],[10,"layer2","","Return the `usize` from the array of usizes that indicates if any bit has been set in layer1",11,[[["self"],["usize"]],["usize"]]],[10,"layer1","","Return the `usize` from the array of usizes that indicates if any bit has been set in layer0",11,[[["self"],["usize"]],["usize"]]],[10,"layer0","","Return a `usize` that maps to the direct 1:1 association with each index of the set",11,[[["self"],["usize"]],["usize"]]],[10,"contains","","Allows checking if set bit is contained in the bit set.",11,[[["self"],["u32"]],["bool"]]],[11,"iter","","Create an iterator that will scan over the keyspace",11,[[["self"]],["bititer"]]],[11,"par_iter","","Create a parallel iterator that will scan over the keyspace",11,[[["self"]],["bitpariter"]]],[8,"DrainableBitSet","","A extension to the [`BitSetLike`] trait which allows draining it.",N,N],[10,"remove","","Removes bit from the bit set.",12,[[["self"],["u32"]],["bool"]]],[11,"drain","","Create a draining iterator that will scan over the keyspace and clears it while doing so.",12,[[["self"]],["drainbititer"]]],[11,"clone","","",9,[[["self"]],["bitset"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"default","","",9,[[],["bitset"]]],[11,"new","","Creates an empty `BitSet`.",9,[[],["bitset"]]],[11,"with_capacity","","Creates an empty `BitSet`, preallocated for up to `max` indices.",9,[[["u32"]],["bitset"]]],[11,"add","","Adds `id` to the `BitSet`. Returns `true` if the value was already in the set.",9,[[["self"],["u32"]],["bool"]]],[11,"remove","","Removes `id` from the set, returns `true` if the value was removed, and `false` if the value was not set to begin with.",9,[[["self"],["u32"]],["bool"]]],[11,"contains","","Returns `true` if `id` is in the set.",9,[[["self"],["u32"]],["bool"]]],[11,"clear","","Completely wipes out the bit set.",9,[[["self"]]]],[11,"layer3","","",9,[[["self"]],["usize"]]],[11,"layer2","","",9,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",9,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",9,[[["self"],["usize"]],["usize"]]],[11,"contains","","",9,[[["self"],["u32"]],["bool"]]],[11,"remove","","",9,[[["self"],["u32"]],["bool"]]]],"paths":[[3,"BitProducer"],[3,"BitSetAnd"],[3,"BitSetNot"],[3,"BitSetOr"],[3,"BitSetXor"],[3,"AtomicBitSet"],[3,"BitParIter"],[3,"DrainBitIter"],[3,"BitIter"],[3,"BitSet"],[3,"BitSetAll"],[8,"BitSetLike"],[8,"DrainableBitSet"]]};
searchIndex["hound"]={"doc":"Hound, a wav encoding and decoding library.","items":[[3,"WavReader","hound","A reader that reads the WAVE format from the underlying reader.",N,N],[3,"WavIntoSamples","","An iterator that yields samples of type `S` read from a `WavReader`.",N,N],[3,"WavSamples","","An iterator that yields samples of type `S` read from a `WavReader`.",N,N],[3,"SampleWriter16","","A writer that specifically only writes integer samples of 16 bits per sample.",N,N],[3,"WavWriter","","A writer that accepts samples and writes the WAVE format.",N,N],[3,"WavSpec","","Specifies properties of the audio data.",N,N],[12,"channels","","The number of channels.",0,N],[12,"sample_rate","","The number of samples per second.",0,N],[12,"bits_per_sample","","The number of bits per sample.",0,N],[12,"sample_format","","Whether the wav's samples are float or integer values.",0,N],[4,"SampleFormat","","Specifies whether a sample is stored as an \"IEEE Float\" or an integer.",N,N],[13,"Float","","Wave files with the `WAVE_FORMAT_IEEE_FLOAT` format tag store samples as floating point values.",1,N],[13,"Int","","Wave files with the `WAVE_FORMAT_PCM` format tag store samples as integer values.",1,N],[4,"Error","","The error type for operations on `WavReader` and `WavWriter`.",N,N],[13,"IoError","","An IO error occured in the underlying reader or writer.",2,N],[13,"FormatError","","Ill-formed WAVE data was encountered.",2,N],[13,"TooWide","","The sample has more bits than the destination type.",2,N],[13,"UnfinishedSample","","The number of samples written is not a multiple of the number of channels.",2,N],[13,"Unsupported","","The format is not supported.",2,N],[13,"InvalidSampleFormat","","The sample format is different than the destination format.",2,N],[5,"read_wave_header","","Reads the RIFF WAVE header, returns the supposed file size.",N,[[["r"]],["result",["u64"]]]],[11,"new","","Attempts to create a reader that reads the WAVE format.",3,[[["r"]],["result",["wavreader"]]]],[11,"spec","","Returns information about the WAVE file.",3,[[["self"]],["wavspec"]]],[11,"samples","","Returns an iterator over all samples.",3,[[["self"]],["wavsamples"]]],[11,"into_samples","","Same as `samples`, but takes ownership of the `WavReader`.",3,[[["self"]],["wavintosamples"]]],[11,"duration","","Returns the duration of the file in samples.",3,[[["self"]],["u32"]]],[11,"len","","Returns the number of values that the sample iterator will yield.",3,[[["self"]],["u32"]]],[11,"into_inner","","Destroys the `WavReader` and returns the underlying reader.",3,[[["self"]],["r"]]],[11,"seek","","Seek to the given time within the file.",3,[[["self"],["u32"]],["result"]]],[11,"open","","Attempts to create a reader that reads from the specified file.",3,[[["p"]],["result",["wavreader"]]]],[11,"next","","",4,[[["self"]],["option",["result"]]]],[11,"size_hint","","",4,N],[11,"next","","",5,[[["self"]],["option",["result"]]]],[11,"size_hint","","",5,N],[11,"new","","Creates a writer that writes the WAVE format to the underlying writer.",6,[[["w"],["wavspec"]],["result",["wavwriter"]]]],[11,"write_sample","","Writes a single sample for one channel.",6,[[["self"],["s"]],["result"]]],[11,"get_i16_writer","","Create an efficient writer that writes 16-bit integer samples only.",6,[[["self"],["u32"]],["samplewriter16"]]],[11,"flush","","Updates the WAVE header and flushes the underlying writer.",6,[[["self"]],["result"]]],[11,"finalize","","Updates the WAVE header (which requires knowing all samples).",6,[[["self"]],["result"]]],[11,"spec","","Returns information about the WAVE file being written.",6,[[["self"]],["wavspec"]]],[11,"duration","","Returns the duration of the file written so far, in samples.",6,[[["self"]],["u32"]]],[11,"len","","Returns the number of samples in the file written so far.",6,[[["self"]],["u32"]]],[11,"drop","","",6,[[["self"]]]],[11,"create","","Creates a writer that writes the WAVE format to a file.",6,[[["p"],["wavspec"]],["result",["wavwriter"]]]],[11,"append","","Creates a writer that appends samples to an existing file.",6,[[["p"]],["result",["wavwriter"]]]],[11,"new_append","","Creates a writer that appends samples to an existing file stream.",6,[[["w"]],["result",["wavwriter"]]]],[11,"write_sample","","Writes a single sample for one channel.",7,[[["self"],["s"]]]],[11,"write_sample_unchecked","","Like `write_sample()`, but does not perform a bounds check when writing to the internal buffer.",7,[[["self"],["s"]]]],[11,"flush","","Flush the internal buffer to the underlying writer.",7,[[["self"]],["result"]]],[6,"Result","","A type for results generated by Hound where the error type is hard-wired.",N,N],[8,"Sample","","A type that can be used to represent audio samples.",N,N],[10,"write","","Writes the audio sample to the WAVE data chunk.",8,[[["self"],["w"],["u16"]],["result"]]],[10,"read","","Reads the audio sample from the WAVE data chunk.",8,[[["r"],["sampleformat"],["u16"],["u16"]],["result"]]],[10,"as_i16","","Cast the sample to a 16-bit sample.",8,[[["self"]],["i16"]]],[11,"clone","","",1,[[["self"]],["sampleformat"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["sampleformat"]],["bool"]]],[11,"clone","","",0,[[["self"]],["wavspec"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["wavspec"]],["bool"]]],[11,"ne","","",0,[[["self"],["wavspec"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"from","","",2,[[["error"]],["error"]]]],"paths":[[3,"WavSpec"],[4,"SampleFormat"],[4,"Error"],[3,"WavReader"],[3,"WavSamples"],[3,"WavIntoSamples"],[3,"WavWriter"],[3,"SampleWriter16"],[8,"Sample"]]};
searchIndex["image"]={"doc":"This crate provides native rust implementations of image encoders and decoders and basic image manipulation functions.","items":[[3,"Luma","image","Grayscale colors",N,N],[12,"data","","",0,N],[3,"LumaA","","Grayscale colors + alpha channel",N,N],[12,"data","","",1,N],[3,"Rgb","","RGB colors",N,N],[12,"data","","",2,N],[3,"Rgba","","RGB colors + alpha channel",N,N],[12,"data","","",3,N],[3,"SubImage","","A View into another image",N,N],[3,"Pixels","","Immutable pixel iterator",N,N],[3,"MutPixels","","Mutable pixel iterator",N,N],[3,"ImageBuffer","","Generic image buffer",N,N],[3,"Frame","","A single animation frame",N,N],[3,"Frames","","Holds the frames of the animated image",N,N],[4,"ColorType","","An enumeration over supported color types and their bit depths",N,N],[13,"Gray","","Pixel is grayscale",4,N],[13,"RGB","","Pixel contains R, G and B channels",4,N],[13,"Palette","","Pixel is an index into a color palette",4,N],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,N],[13,"RGBA","","Pixel is RGB with an alpha channel",4,N],[4,"ImageError","","An enumeration of Image errors",N,N],[13,"FormatError","","The Image is not formatted properly",5,N],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,N],[13,"UnsupportedError","","The Decoder does not support this image format",5,N],[13,"UnsupportedColor","","The Decoder does not support this color type",5,N],[13,"NotEnoughData","","Not enough data was provided to the Decoder to decode the image",5,N],[13,"IoError","","An I/O Error occurred while decoding the image",5,N],[13,"ImageEnd","","The end of the image has been reached",5,N],[4,"DecodingResult","","Result of a decoding process",N,N],[13,"U8","","A vector of unsigned bytes",6,N],[13,"U16","","A vector of unsigned words",6,N],[4,"FilterType","","Available Sampling Filters",N,N],[13,"Nearest","","Nearest Neighbor",7,N],[13,"Triangle","","Linear Filter",7,N],[13,"CatmullRom","","Cubic Filter",7,N],[13,"Gaussian","","Gaussian Filter",7,N],[13,"Lanczos3","","Lanczos with window 3",7,N],[4,"ImageFormat","","An enumeration of supported image formats. Not all formats support both encoding and decoding.",N,N],[13,"PNG","","An Image in PNG Format",8,N],[13,"JPEG","","An Image in JPEG Format",8,N],[13,"GIF","","An Image in GIF Format",8,N],[13,"WEBP","","An Image in WEBP Format",8,N],[13,"PNM","","An Image in general PNM Format",8,N],[13,"TIFF","","An Image in TIFF Format",8,N],[13,"TGA","","An Image in TGA Format",8,N],[13,"BMP","","An Image in BMP Format",8,N],[13,"ICO","","An Image in ICO Format",8,N],[13,"HDR","","An Image in Radiance HDR Format",8,N],[4,"ImageOutputFormat","","An enumeration of supported image formats for encoding.",N,N],[13,"PNG","","An Image in PNG Format",9,N],[13,"JPEG","","An Image in JPEG Format with specified quality",9,N],[13,"PNM","","An Image in one of the PNM Formats",9,N],[13,"GIF","","An Image in GIF Format",9,N],[13,"ICO","","An Image in ICO Format",9,N],[13,"BMP","","An Image in BMP Format",9,N],[13,"Unsupported","","A value for signalling an error: An unsupported format was requested",9,N],[4,"DynamicImage","","A Dynamic Image",N,N],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",10,N],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",10,N],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",10,N],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",10,N],[5,"Luma","","",N,N],[5,"LumaA","","",N,N],[5,"Rgb","","",N,N],[5,"Rgba","","",N,N],[5,"open","","Open the image located at the path specified. The image's format is determined from the path's file extension.",N,[[["p"]],["imageresult",["dynamicimage"]]]],[5,"load","","Create a new image from a Reader",N,[[["r"],["imageformat"]],["imageresult",["dynamicimage"]]]],[5,"load_from_memory","","Create a new image from a byte slice",N,N],[5,"load_from_memory_with_format","","Create a new image from a byte slice",N,N],[5,"guess_format","","Guess image format from memory block",N,N],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",N,N],[0,"math","","Mathematical helper functions and types.",N,N],[0,"utils","image::math","Shared mathematical utility functions.",N,N],[5,"clamp","image::math::utils","Cut value to be inside given range",N,[[["n"],["n"],["n"]],["n"]]],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See \"Kohonen neural networks for optimal colour quantization\" in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of the algorithm. See also http://www.acm.org/~dekker/NEUQUANT.HTML",N,N],[3,"NeuQuant","image::math::nq","Neural network color quantizer",N,N],[11,"new","","Creates a new neural network and trains it with the supplied data",11,N],[11,"init","","Initializes the neural network and trains it with the supplied data",11,N],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",11,N],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",11,N],[0,"imageops","image","Image Processing Functions",N,N],[4,"FilterType","image::imageops","Available Sampling Filters",N,N],[13,"Nearest","","Nearest Neighbor",7,N],[13,"Triangle","","Linear Filter",7,N],[13,"CatmullRom","","Cubic Filter",7,N],[13,"Gaussian","","Gaussian Filter",7,N],[13,"Lanczos3","","Lanczos with window 3",7,N],[5,"rotate90","","Rotate an image 90 degrees clockwise.",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"rotate180","","Rotate an image 180 degrees clockwise.",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"rotate270","","Rotate an image 270 degrees clockwise.",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"flip_horizontal","","Flip an image horizontally",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"flip_vertical","","Flip an image vertically",N,[[["i"]],["imagebuffer",["vec"]]]],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image. `kernel` is an array of the filter weights of length 9.",N,N],[5,"resize","","Resize the supplied image to the specified dimensions. `nwidth` and `nheight` are the new dimensions. `filter` is the sampling filter to use.",N,[[["i"],["u32"],["u32"],["filtertype"]],["imagebuffer",["vec"]]]],[5,"thumbnail","","Resize the supplied image down to the specific dimensions.",N,[[["i"],["u32"],["u32"]],["imagebuffer",["vec"]]]],[5,"blur","","Performs a Gaussian blur on the supplied image. `sigma` is a measure of how much to blur by.",N,[[["i"],["f32"]],["imagebuffer",["vec"]]]],[5,"unsharpen","","Performs an unsharpen mask on the supplied image. `sigma` is the amount to blur the image by. `threshold` is the threshold for the difference between",N,[[["i"],["f32"],["i32"]],["imagebuffer",["vec"]]]],[5,"crop","","Return a mutable view into an image",N,[[["i"],["u32"],["u32"],["u32"],["u32"]],["subimage"]]],[5,"overlay","","Overlay an image at a given coordinate (x, y)",N,[[["i"],["i"],["u32"],["u32"]]]],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",N,[[["i"],["i"],["u32"],["u32"]]]],[0,"colorops","","Functions for altering and converting the color of pixelbufs",N,N],[3,"BiLevel","image::imageops::colorops","A bi-level color map",N,N],[5,"grayscale","","Convert the supplied image to grayscale",N,[[["i"]],["imagebuffer",["luma","vec"]]]],[5,"invert","","Invert each pixel within the supplied image. This function operates in place.",N,[[["i"]]]],[5,"contrast","","Adjust the contrast of the supplied image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",N,[[["i"],["f32"]],["imagebuffer",["vec"]]]],[5,"brighten","","Brighten the supplied image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",N,[[["i"],["i32"]],["imagebuffer",["vec"]]]],[5,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",N,[[["i"],["i32"]],["imagebuffer",["vec"]]]],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying Floyd-Steinberg dithering to improve the visual conception",N,[[["imagebuffer"],["map"]]]],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",N,[[["imagebuffer"],["map"]],["imagebuffer",["luma","vec"]]]],[8,"ColorMap","","A color map",N,N],[16,"Color","","The color type on which the map operates on",12,N],[10,"index_of","","Returns the index of the closed match of `color` in the color map.",12,N],[10,"map_color","","Maps `color` to the closest color in the color map.",12,N],[11,"clone","","",13,[[["self"]],["bilevel"]]],[11,"index_of","","",13,[[["self"],["luma"]],["usize"]]],[11,"map_color","","",13,[[["self"],["luma"]]]],[11,"index_of","image::math::nq","",11,[[["self"],["rgba"]],["usize"]]],[11,"map_color","","",11,[[["self"],["rgba"]]]],[11,"clone","image","",7,[[["self"]],["filtertype"]]],[0,"webp","","Decoding of Webp Images",N,N],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",N,N],[11,"new","","Create a new WebpDecoder from the Reader `r`. This function takes ownership of the Reader.",14,[[["r"]],["webpdecoder"]]],[11,"dimensions","","",14,[[["self"]],["imageresult"]]],[11,"colortype","","",14,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",14,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",14,N],[11,"read_image","","",14,[[["self"]],["imageresult",["decodingresult"]]]],[0,"vp8","","An implementation of the VP8 Video Codec",N,N],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",N,N],[12,"width","","The width of the luma plane",15,N],[12,"height","","The height of the luma plane",15,N],[12,"ybuf","","The luma plane of the frame",15,N],[12,"keyframe","","Indicates whether this frame is a keyframe",15,N],[12,"for_display","","Indicates whether this frame is intended for display",15,N],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2 of the VP8 Specification",15,N],[3,"VP8Decoder","","VP8 Decoder",N,N],[11,"default","","",15,[[],["frame"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["frame"]]],[11,"new","","Create a new decoder. The reader must present a raw vp8 bitstream to the decoder",16,[[["r"]],["vp8decoder"]]],[11,"decode_frame","","Decodes the current frame and returns a reference to it",16,[[["self"]],["result",["frame"]]]],[0,"pnm","image","Decoding of netpbm image formats (pbm, pgm, ppm and pam).",N,N],[3,"PNMDecoder","image::pnm","PNM decoder",N,N],[3,"PNMEncoder","","Encodes images to any of the `pnm` image formats.",N,N],[3,"PNMHeader","","Stores the complete header data of a file.",N,N],[3,"ArbitraryHeader","","Header produced by a `pam` file (\"Portable Arbitrary Map\")",N,N],[12,"height","","Height of the image file",17,N],[12,"width","","Width of the image file",17,N],[12,"depth","","Number of color channels",17,N],[12,"maxval","","Maximum sample value within the image",17,N],[12,"tupltype","","Color interpretation of image pixels",17,N],[3,"BitmapHeader","","Header produced by a `pbm` file (\"Portable Bit Map\")",N,N],[12,"encoding","","Binary or Ascii encoded file",18,N],[12,"height","","Height of the image file",18,N],[12,"width","","Width of the image file",18,N],[3,"GraymapHeader","","Header produced by a `pgm` file (\"Portable Gray Map\")",N,N],[12,"encoding","","Binary or Ascii encoded file",19,N],[12,"height","","Height of the image file",19,N],[12,"width","","Width of the image file",19,N],[12,"maxwhite","","Maximum sample value within the image",19,N],[3,"PixmapHeader","","Header produced by a `ppm` file (\"Portable Pixel Map\")",N,N],[12,"encoding","","Binary or Ascii encoded file",20,N],[12,"height","","Height of the image file",20,N],[12,"width","","Width of the image file",20,N],[12,"maxval","","Maximum sample value within the image",20,N],[4,"PNMSubtype","","Denotes the category of the magic number",N,N],[13,"Bitmap","","Magic numbers P1 and P4",21,N],[13,"Graymap","","Magic numbers P2 and P5",21,N],[13,"Pixmap","","Magic numbers P3 and P6",21,N],[13,"ArbitraryMap","","Magic number P7",21,N],[4,"SampleEncoding","","The kind of encoding used to store sample values",N,N],[13,"Binary","","Samples are unsigned binary integers in big endian",22,N],[13,"Ascii","","Samples are encoded as decimal ascii strings separated by whitespace",22,N],[4,"ArbitraryTuplType","","Standardized tuple type specifiers in the header of a `pam`.",N,N],[13,"BlackAndWhite","","Pixels are either black (0) or white (1)",23,N],[13,"BlackAndWhiteAlpha","","Pixels are either black (0) or white (1) and a second alpha channel",23,N],[13,"Grayscale","","Pixels represent the amount of white",23,N],[13,"GrayscaleAlpha","","Grayscale with an additional alpha channel",23,N],[13,"RGB","","Three channels: Red, Green, Blue",23,N],[13,"RGBAlpha","","Four channels: Red, Green, Blue, Alpha",23,N],[13,"Custom","","An image format which is not standardized",23,N],[11,"new","","Create a new decoder that decodes from the stream `read`",24,[[["r"]],["imageresult",["pnmdecoder"]]]],[11,"into_inner","","Extract the reader and header after an image has been read.",24,N],[11,"dimensions","","",24,[[["self"]],["imageresult"]]],[11,"colortype","","",24,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",24,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",24,N],[11,"read_image","","",24,[[["self"]],["imageresult",["decodingresult"]]]],[11,"subtype","","Get the pnm subtype, depending on the magic constant contained in the header",24,[[["self"]],["pnmsubtype"]]],[11,"new","","Create new PNMEncoder from the `writer`.",25,[[["w"]],["self"]]],[11,"with_subtype","","Encode a specific pnm subtype image.",25,[[["self"],["pnmsubtype"]],["self"]]],[11,"with_header","","Enforce the use of a chosen header.",25,[[["self"],["pnmheader"]],["self"]]],[11,"with_dynamic_header","","Create the header dynamically for each image.",25,[[["self"]],["self"]]],[11,"encode","","Encode an image whose samples are represented as `u8`.",25,[[["self"],["s"],["u32"],["u32"],["colortype"]],["result"]]],[11,"clone","","",22,[[["self"]],["sampleencoding"]]],[11,"eq","","",22,[[["self"],["sampleencoding"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["pnmsubtype"]]],[11,"eq","","",21,[[["self"],["pnmsubtype"]],["bool"]]],[11,"ne","","",21,[[["self"],["pnmsubtype"]],["bool"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["bitmapheader"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["graymapheader"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["pixmapheader"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["arbitraryheader"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["arbitrarytupltype"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"magic_constant","","Get the two magic constant bytes corresponding to this format subtype.",21,N],[11,"sample_encoding","","Whether samples are stored as binary or as decimal ascii",21,[[["self"]],["sampleencoding"]]],[11,"subtype","","Retrieve the format subtype from which the header was created.",26,[[["self"]],["pnmsubtype"]]],[11,"width","","The width of the image this header is for.",26,[[["self"]],["u32"]]],[11,"height","","The height of the image this header is for.",26,[[["self"]],["u32"]]],[11,"maximal_sample","","The biggest value a sample can have. In other words, the colour resolution.",26,[[["self"]],["u32"]]],[11,"as_bitmap","","Retrieve the underlying bitmap header if any",26,[[["self"]],["option",["bitmapheader"]]]],[11,"as_graymap","","Retrieve the underlying graymap header if any",26,[[["self"]],["option",["graymapheader"]]]],[11,"as_pixmap","","Retrieve the underlying pixmap header if any",26,[[["self"]],["option",["pixmapheader"]]]],[11,"as_arbitrary","","Retrieve the underlying arbitrary header if any",26,[[["self"]],["option",["arbitraryheader"]]]],[11,"write","","Write the header back into a binary stream",26,[[["self"],["write"]],["result"]]],[11,"from","","",26,[[["bitmapheader"]],["self"]]],[11,"from","","",26,[[["graymapheader"]],["self"]]],[11,"from","","",26,[[["pixmapheader"]],["self"]]],[11,"from","","",26,[[["arbitraryheader"]],["self"]]],[0,"png","image","Decoding and Encoding of PNG Images",N,N],[3,"PNGDecoder","image::png","PNG decoder",N,N],[3,"PNGEncoder","","PNG encoder",N,N],[11,"new","","Creates a new decoder that decodes from the stream `r`",27,[[["r"]],["pngdecoder"]]],[11,"dimensions","","",27,[[["self"]],["imageresult"]]],[11,"colortype","","",27,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",27,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",27,N],[11,"read_image","","",27,[[["self"]],["imageresult",["decodingresult"]]]],[11,"new","","Create a new encoder that writes its output to `w`",28,[[["w"]],["pngencoder"]]],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",28,N],[11,"from","image","",4,N],[11,"from","","",5,[[["decodingerror"]],["imageerror"]]],[0,"ico","","Decoding and Encoding of ICO files",N,N],[3,"ICODecoder","image::ico","An ico decoder",N,N],[3,"ICOEncoder","","ICO encoder",N,N],[11,"new","","Create a new decoder that decodes from the stream `r`",29,[[["r"]],["imageresult",["icodecoder"]]]],[11,"dimensions","","",29,[[["self"]],["imageresult"]]],[11,"colortype","","",29,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",29,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",29,N],[11,"read_image","","",29,[[["self"]],["imageresult",["decodingresult"]]]],[11,"new","","Create a new encoder that writes its output to `w`.",30,[[["w"]],["icoencoder"]]],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.  The dimensions of the image must be between 1 and 256 (inclusive) or an error will be returned.",30,N],[0,"jpeg","image","Decoding and Encoding of JPEG Images",N,N],[3,"JPEGDecoder","image::jpeg","JPEG decoder",N,N],[3,"JPEGEncoder","","The representation of a JPEG encoder",N,N],[11,"new","","Create a new encoder that writes its output to `w`",31,[[["w"]],["jpegencoder"]]],[11,"new_with_quality","","Create a new encoder that writes its output to `w`, and has the quality parameter `quality` with a value in the range 1-100 where 1 is the worst and 100 is the best.",31,[[["w"],["u8"]],["jpegencoder"]]],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",31,N],[11,"new","","Create a new decoder that decodes from the stream `r`",32,[[["r"]],["jpegdecoder"]]],[11,"dimensions","","",32,[[["self"]],["imageresult"]]],[11,"colortype","","",32,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",32,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",32,N],[11,"read_image","","",32,[[["self"]],["imageresult",["decodingresult"]]]],[11,"from","image","",4,[[["pixelformat"]],["colortype"]]],[11,"from","","",5,[[["error"]],["imageerror"]]],[0,"gif","","Decoding of GIF Images",N,N],[3,"Frame","image::gif","A GIF frame",N,N],[12,"delay","","Frame delay in units of 10 ms.",33,N],[12,"dispose","","Disposal method.",33,N],[12,"transparent","","Transparent index (if available).",33,N],[12,"needs_user_input","","True if the frame needs user input to be displayed.",33,N],[12,"top","","Offset from the top border of the canvas.",33,N],[12,"left","","Offset from the left border of the canvas.",33,N],[12,"width","","Width of the frame.",33,N],[12,"height","","Height of the frame.",33,N],[12,"interlaced","","True if the image is interlaced.",33,N],[12,"palette","","Frame local color palette if available.",33,N],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",33,N],[4,"DisposalMethod","","Disposal method",N,N],[13,"Any","","StreamingDecoder is not required to take any action.",34,N],[13,"Keep","","Do not dispose.",34,N],[13,"Background","","Restore to background color.",34,N],[13,"Previous","","Restore to previous.",34,N],[3,"Decoder","","GIF decoder",N,N],[3,"Encoder","","GIF encoder.",N,N],[11,"new","","Creates a new decoder that decodes the input steam `r`",35,[[["r"]],["decoder"]]],[11,"dimensions","","",35,[[["self"]],["imageresult"]]],[11,"colortype","","",35,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",35,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",35,N],[11,"read_image","","",35,[[["self"]],["imageresult",["decodingresult"]]]],[11,"is_animated","","",35,[[["self"]],["imageresult",["bool"]]]],[11,"into_frames","","",35,[[["self"]],["imageresult",["image_frames"]]]],[11,"new","","Creates a new GIF encoder.",36,[[["w"]],["encoder"]]],[11,"encode","","Encodes a frame.",36,[[["self"],["frame"]],["imageresult"]]],[11,"from","image","",5,[[["decodingerror"]],["imageerror"]]],[0,"tiff","","Decoding and Encoding of TIFF Images",N,N],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",N,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new decoder that decodes from the stream `r`",37,[[["r"]],["imageresult",["tiffdecoder"]]]],[11,"init","","Initializes the decoder.",37,[[["self"]],["imageresult",["tiffdecoder"]]]],[11,"next_image","","Reads in the next image. If there is no further image in the TIFF file a format error is returned. To determine whether there are more images call `TIFFDecoder::more_images` instead.",37,[[["self"]],["imageresult",["tiffdecoder"]]]],[11,"more_images","","Returns `true` if there is at least one more image available.",37,[[["self"]],["bool"]]],[11,"byte_order","","Returns the byte_order",37,[[["self"]],["byteorder"]]],[11,"read_short","","Reads a TIFF short value",37,[[["self"]],["result",["u16","error"]]]],[11,"read_long","","Reads a TIFF long value",37,[[["self"]],["result",["u32","error"]]]],[11,"read_offset","","Reads a TIFF IFA offset/value field",37,[[["self"]],["result",["error"]]]],[11,"goto_offset","","Moves the cursor to the specified offset",37,[[["self"],["u32"]],["result"]]],[11,"dimensions","","",37,[[["self"]],["imageresult"]]],[11,"colortype","","",37,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",37,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",37,N],[11,"read_image","","",37,[[["self"]],["imageresult",["decodingresult"]]]],[0,"tga","image","Decoding of TGA Images",N,N],[3,"TGADecoder","image::tga","The representation of a TGA decoder",N,N],[11,"new","","Create a new decoder that decodes from the stream `r`",38,[[["r"]],["tgadecoder"]]],[11,"dimensions","","",38,[[["self"]],["imageresult"]]],[11,"colortype","","",38,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",38,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",38,N],[11,"read_image","","",38,[[["self"]],["imageresult",["decodingresult"]]]],[0,"bmp","image","Decoding and Encoding of BMP Images",N,N],[3,"BMPEncoder","image::bmp","The representation of a BMP encoder.",N,N],[3,"BMPDecoder","","A bmp decoder",N,N],[11,"new","","Create a new encoder that writes its output to `w`.",39,[[["w"]],["self"]]],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.",39,N],[11,"new","","Create a new decoder that decodes from the stream `r`",40,[[["r"]],["bmpdecoder"]]],[11,"dimensions","","",40,[[["self"]],["imageresult"]]],[11,"colortype","","",40,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",40,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",40,N],[11,"read_image","","",40,[[["self"]],["imageresult",["decodingresult"]]]],[0,"hdr","image","Decoding of Radiance HDR Images",N,N],[3,"HDRAdapter","image::hdr","Adapter to conform to `ImageDecoder` trait",N,N],[3,"HDRDecoder","","An Radiance HDR decoder",N,N],[3,"RGBE8Pixel","","Refer to wikipedia",N,N],[12,"c","","Color components",41,N],[12,"e","","Exponent",41,N],[3,"HDRImageDecoderIterator","","Scanline buffered pixel by pixel iterator",N,N],[3,"HDRMetadata","","Metadata for Radiance HDR image",N,N],[12,"width","","Width of decoded image. It could be either scanline length, or scanline count, depending on image orientation.",42,N],[12,"height","","Height of decoded image. It depends on orientation too.",42,N],[12,"orientation","","Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom. First pair tells how resulting pixel coordinates change along a scanline. Second pair tells how they change from one scanline to the next.",42,N],[12,"exposure","","Divide color values by exposure to get to get physical radiance in watts/steradian/m2",42,N],[12,"color_correction","","Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance in watts/steradian/m2",42,N],[12,"pixel_aspect_ratio","","Pixel height divided by pixel width",42,N],[12,"custom_attributes","","All lines contained in image header are put here. Ordering of lines is preserved. Lines in the form \"key=value\" are represented as (\"key\", \"value\"). All other lines are (\"\", \"line\")",42,N],[3,"HDREncoder","","Radiance HDR encoder",N,N],[5,"rgbe8","","Creates `RGBE8Pixel` from components",N,[[["u8"],["u8"],["u8"],["u8"]],["rgbe8pixel"]]],[5,"read_raw_file","","Helper function for reading raw 3-channel f32 images",N,[[["p"]],["result",["vec"]]]],[5,"to_rgbe8","","Converts `Rgb<f32>` into `RGBE8Pixel`",N,[[["rgb",["f32"]]],["rgbe8pixel"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates adapter",43,[[["r"]],["imageresult",["hdradapter"]]]],[11,"new_nonstrict","","Allows reading old Radiance HDR images",43,[[["r"]],["imageresult",["hdradapter"]]]],[11,"dimensions","","",43,[[["self"]],["imageresult"]]],[11,"colortype","","",43,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",43,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",43,N],[11,"read_image","","",43,[[["self"]],["imageresult",["decodingresult"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["rgbe8pixel"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["rgbe8pixel"]],["bool"]]],[11,"ne","","",41,[[["self"],["rgbe8pixel"]],["bool"]]],[11,"to_hdr","","Converts `RGBE8Pixel` into `Rgb<f32>` linearly",41,[[["self"]],["rgb",["f32"]]]],[11,"to_ldr","","Converts `RGBE8Pixel` into `Rgb<T>` with scale=1 and gamma=2.2",41,[[["self"]],["rgb"]]],[11,"to_ldr_scale_gamma","","Converts RGBE8Pixel into Rgb using provided scale and gamma",41,[[["self"],["f32"],["f32"]],["rgb"]]],[11,"new","","Reads Radiance HDR image header from stream `r` if the header is valid, creates HDRDecoder strict mode is enabled",44,[[["r"]],["imageresult",["hdrdecoder"]]]],[11,"with_strictness","","Reads Radiance HDR image header from stream `reader`, if the header is valid, creates `HDRDecoder`.",44,[[["r"],["bool"]],["imageresult",["hdrdecoder"]]]],[11,"metadata","","Returns file metadata. Refer to `HDRMetadata` for details.",44,[[["self"]],["hdrmetadata"]]],[11,"read_image_native","","Consumes decoder and returns a vector of RGBE8 pixels",44,[[["self"]],["imageresult",["vec"]]]],[11,"read_image_transform","","Consumes decoder and returns a vector of transformed pixels",44,[[["self"],["f"]],["imageresult",["vec"]]]],[11,"read_image_ldr","","Consumes decoder and returns a vector of Rgb pixels. scale = 1, gamma = 2.2",44,[[["self"]],["imageresult",["vec"]]]],[11,"read_image_hdr","","Consumes decoder and returns a vector of Rgb pixels.",44,[[["self"]],["imageresult",["vec"]]]],[11,"into_iter","","",44,N],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["hdrmetadata"]]],[11,"new","","Creates encoder",46,[[["w"]],["hdrencoder"]]],[11,"encode","","Encodes the image `data` that has dimensions `width` and `height`",46,N],[17,"SIGNATURE","","Radiance HDR file signature",N,N],[0,"dxt","image","Decoding of DXT (S3TC) compression",N,N],[3,"DXTDecoder","image::dxt","DXT decoder",N,N],[3,"DXTEncoder","","DXT encoder",N,N],[4,"DXTVariant","","What version of DXT compression are we using? Note that DXT2 and DXT4 are left away as they're just DXT3 and DXT5 with premultiplied alpha",N,N],[13,"DXT1","","The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is compressed into an 8 byte block of DXT1 data",47,N],[13,"DXT3","","The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is compressed into a 16 byte block of DXT3 data",47,N],[13,"DXT5","","The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is compressed into a 16 byte block of DXT5 data",47,N],[11,"clone","","",47,[[["self"]],["dxtvariant"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["dxtvariant"]],["bool"]]],[11,"colortype","","Returns the colortype that is stored in this DXT variant",47,[[["self"]],["colortype"]]],[11,"new","","Create a new DXT decoder that decodes from the stream `r`. As DXT is often stored as raw buffers with the width/height somewhere else the width and height of the image need to be passed in `width` and `height`, as well as the DXT variant in `variant`. width and height are required to be powers of 2 and at least 4. otherwise an error will be returned",48,[[["r"],["u32"],["u32"],["dxtvariant"]],["result",["dxtdecoder","imageerror"]]]],[11,"dimensions","","",48,[[["self"]],["imageresult"]]],[11,"colortype","","",48,[[["self"]],["imageresult",["colortype"]]]],[11,"row_len","","",48,[[["self"]],["imageresult",["usize"]]]],[11,"read_scanline","","",48,N],[11,"read_image","","",48,[[["self"]],["imageresult",["decodingresult"]]]],[11,"new","","Create a new encoder that writes its output to `w`",49,[[["w"]],["dxtencoder"]]],[11,"encode","","Encodes the image data `data` that has dimensions `width` and `height` in `DXTVariant` `variant` data is assumed to be in variant.colortype()",49,N],[11,"fmt","image","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"from","","",5,[[["error"]],["imageerror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["imageformat"]]],[11,"eq","","",8,[[["self"],["imageformat"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["imageoutputformat"]]],[11,"eq","","",9,[[["self"],["imageoutputformat"]],["bool"]]],[11,"ne","","",9,[[["self"],["imageoutputformat"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from","","",9,[[["imageformat"]],["self"]]],[11,"next","","",50,[[["self"]],["option"]]],[11,"next","","",51,[[["self"]],["option"]]],[11,"new","","Construct a new subimage",52,[[["i"],["u32"],["u32"],["u32"],["u32"]],["subimage"]]],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",52,[[["self"]],["i"]]],[11,"change_bounds","","Change the coordinates of this subimage.",52,[[["self"],["u32"],["u32"],["u32"],["u32"]]]],[11,"to_image","","Convert this subimage to an ImageBuffer",52,[[["self"]],["imagebuffer",["vec"]]]],[11,"dimensions","","",52,N],[11,"bounds","","",52,N],[11,"get_pixel","","",52,N],[11,"put_pixel","","",52,N],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",52,N],[11,"get_pixel_mut","","",52,N],[11,"clone","","",10,[[["self"]],["dynamicimage"]]],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",10,[[["u32"],["u32"]],["dynamicimage"]]],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey pixels with transparency.",10,[[["u32"],["u32"]],["dynamicimage"]]],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",10,[[["u32"],["u32"]],["dynamicimage"]]],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",10,[[["u32"],["u32"]],["dynamicimage"]]],[11,"to_rgb","","Returns a copy of this image as an RGB image.",10,[[["self"]],["rgbimage"]]],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",10,[[["self"]],["rgbaimage"]]],[11,"to_luma","","Returns a copy of this image as a Luma image.",10,[[["self"]],["grayimage"]]],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",10,[[["self"]],["grayalphaimage"]]],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",10,[[["self"],["u32"],["u32"],["u32"],["u32"]],["dynamicimage"]]],[11,"as_rgb8","","Return a reference to an 8bit RGB image",10,[[["self"]],["option",["rgbimage"]]]],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",10,[[["self"]],["option",["rgbimage"]]]],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",10,[[["self"]],["option",["rgbaimage"]]]],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",10,[[["self"]],["option",["rgbaimage"]]]],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",10,[[["self"]],["option",["grayimage"]]]],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",10,[[["self"]],["option",["grayimage"]]]],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",10,[[["self"]],["option",["grayalphaimage"]]]],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",10,[[["self"]],["option",["grayalphaimage"]]]],[11,"raw_pixels","","Return this image's pixels as a byte vector.",10,[[["self"]],["vec",["u8"]]]],[11,"color","","Return this image's color type.",10,[[["self"]],["colortype"]]],[11,"grayscale","","Return a grayscale version of this image.",10,[[["self"]],["dynamicimage"]]],[11,"invert","","Invert the colors of this image. This method operates inplace.",10,[[["self"]]]],[11,"resize","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",10,[[["self"],["u32"],["u32"],["filtertype"]],["dynamicimage"]]],[11,"resize_exact","","Resize this image using the specified filter algorithm. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions",10,[[["self"],["u32"],["u32"],["filtertype"]],["dynamicimage"]]],[11,"thumbnail","","Scale this image down to fit within a specific size. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",10,[[["self"],["u32"],["u32"]],["dynamicimage"]]],[11,"thumbnail_exact","","Scale this image down to a specific size. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions. This method uses a fast integer algorithm where each source pixel contributes to exactly one target pixel. May give aliasing artifacts if new size is close to old size.",10,[[["self"],["u32"],["u32"]],["dynamicimage"]]],[11,"resize_to_fill","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the larger (relative to aspect ratio) of the bounds specified by `nwidth` and `nheight`, then cropped to fit within the other bound.",10,[[["self"],["u32"],["u32"],["filtertype"]],["dynamicimage"]]],[11,"blur","","Performs a Gaussian blur on this image. `sigma` is a measure of how much to blur by.",10,[[["self"],["f32"]],["dynamicimage"]]],[11,"unsharpen","","Performs an unsharpen mask on this image. `sigma` is the amount to blur the image by. `threshold` is a control of how much to sharpen.",10,[[["self"],["f32"],["i32"]],["dynamicimage"]]],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",10,N],[11,"adjust_contrast","","Adjust the contrast of this image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",10,[[["self"],["f32"]],["dynamicimage"]]],[11,"brighten","","Brighten the pixels of this image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",10,[[["self"],["i32"]],["dynamicimage"]]],[11,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",10,[[["self"],["i32"]],["dynamicimage"]]],[11,"flipv","","Flip this image vertically",10,[[["self"]],["dynamicimage"]]],[11,"fliph","","Flip this image horizontally",10,[[["self"]],["dynamicimage"]]],[11,"rotate90","","Rotate this image 90 degrees clockwise.",10,[[["self"]],["dynamicimage"]]],[11,"rotate180","","Rotate this image 180 degrees clockwise.",10,[[["self"]],["dynamicimage"]]],[11,"rotate270","","Rotate this image 270 degrees clockwise.",10,[[["self"]],["dynamicimage"]]],[11,"write_to","","Encode this image and write it to `w`",10,[[["self"],["w"],["f"]],["imageresult"]]],[11,"save","","Saves the buffer to a file at the path specified.",10,[[["self"],["q"]],["result"]]],[11,"dimensions","","",10,N],[11,"bounds","","",10,N],[11,"get_pixel","","",10,[[["self"],["u32"],["u32"]],["rgba",["u8"]]]],[11,"put_pixel","","",10,[[["self"],["u32"],["u32"],["rgba",["u8"]]]]],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",10,[[["self"],["u32"],["u32"],["rgba",["u8"]]]]],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",10,[[["self"],["u32"],["u32"]],["rgba"]]],[11,"eq","","",4,[[["self"],["colortype"]],["bool"]]],[11,"ne","","",4,[[["self"],["colortype"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["colortype"]]],[11,"hash","","",4,N],[11,"eq","","",2,[[["self"],["rgb"]],["bool"]]],[11,"ne","","",2,[[["self"],["rgb"]],["bool"]]],[11,"clone","","",2,[[["self"]],["rgb"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"channel_count","","",2,[[],["u8"]]],[11,"color_model","","",2,[[],["str"]]],[11,"color_type","","",2,[[],["colortype"]]],[11,"channels","","",2,N],[11,"channels_mut","","",2,N],[11,"channels4","","",2,N],[11,"from_channels","","",2,[[["t"],["t"],["t"],["t"]],["rgb"]]],[11,"from_slice","","",2,N],[11,"from_slice_mut","","",2,N],[11,"to_rgb","","",2,[[["self"]],["rgb"]]],[11,"to_rgba","","",2,[[["self"]],["rgba"]]],[11,"to_luma","","",2,[[["self"]],["luma"]]],[11,"to_luma_alpha","","",2,[[["self"]],["lumaa"]]],[11,"map","","",2,[[["self"],["f"]],["rgb"]]],[11,"apply","","",2,[[["self"],["f"]]]],[11,"map_with_alpha","","",2,[[["self"],["f"],["g"]],["rgb"]]],[11,"apply_with_alpha","","",2,[[["self"],["f"],["g"]]]],[11,"map2","","",2,[[["self"],["self"],["f"]],["rgb"]]],[11,"apply2","","",2,[[["self"],["rgb"],["f"]]]],[11,"invert","","",2,[[["self"]]]],[11,"blend","","",2,[[["self"],["rgb"]]]],[11,"index","","",2,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",2,[[["self"],["usize"]],["t"]]],[11,"eq","","",0,[[["self"],["luma"]],["bool"]]],[11,"ne","","",0,[[["self"],["luma"]],["bool"]]],[11,"clone","","",0,[[["self"]],["luma"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"channel_count","","",0,[[],["u8"]]],[11,"color_model","","",0,[[],["str"]]],[11,"color_type","","",0,[[],["colortype"]]],[11,"channels","","",0,N],[11,"channels_mut","","",0,N],[11,"channels4","","",0,N],[11,"from_channels","","",0,[[["t"],["t"],["t"],["t"]],["luma"]]],[11,"from_slice","","",0,N],[11,"from_slice_mut","","",0,N],[11,"to_rgb","","",0,[[["self"]],["rgb"]]],[11,"to_rgba","","",0,[[["self"]],["rgba"]]],[11,"to_luma","","",0,[[["self"]],["luma"]]],[11,"to_luma_alpha","","",0,[[["self"]],["lumaa"]]],[11,"map","","",0,[[["self"],["f"]],["luma"]]],[11,"apply","","",0,[[["self"],["f"]]]],[11,"map_with_alpha","","",0,[[["self"],["f"],["g"]],["luma"]]],[11,"apply_with_alpha","","",0,[[["self"],["f"],["g"]]]],[11,"map2","","",0,[[["self"],["self"],["f"]],["luma"]]],[11,"apply2","","",0,[[["self"],["luma"],["f"]]]],[11,"invert","","",0,[[["self"]]]],[11,"blend","","",0,[[["self"],["luma"]]]],[11,"index","","",0,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["t"]]],[11,"eq","","",3,[[["self"],["rgba"]],["bool"]]],[11,"ne","","",3,[[["self"],["rgba"]],["bool"]]],[11,"clone","","",3,[[["self"]],["rgba"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"channel_count","","",3,[[],["u8"]]],[11,"color_model","","",3,[[],["str"]]],[11,"color_type","","",3,[[],["colortype"]]],[11,"channels","","",3,N],[11,"channels_mut","","",3,N],[11,"channels4","","",3,N],[11,"from_channels","","",3,[[["t"],["t"],["t"],["t"]],["rgba"]]],[11,"from_slice","","",3,N],[11,"from_slice_mut","","",3,N],[11,"to_rgb","","",3,[[["self"]],["rgb"]]],[11,"to_rgba","","",3,[[["self"]],["rgba"]]],[11,"to_luma","","",3,[[["self"]],["luma"]]],[11,"to_luma_alpha","","",3,[[["self"]],["lumaa"]]],[11,"map","","",3,[[["self"],["f"]],["rgba"]]],[11,"apply","","",3,[[["self"],["f"]]]],[11,"map_with_alpha","","",3,[[["self"],["f"],["g"]],["rgba"]]],[11,"apply_with_alpha","","",3,[[["self"],["f"],["g"]]]],[11,"map2","","",3,[[["self"],["self"],["f"]],["rgba"]]],[11,"apply2","","",3,[[["self"],["rgba"],["f"]]]],[11,"invert","","",3,[[["self"]]]],[11,"blend","","",3,[[["self"],["rgba"]]]],[11,"index","","",3,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",3,[[["self"],["usize"]],["t"]]],[11,"eq","","",1,[[["self"],["lumaa"]],["bool"]]],[11,"ne","","",1,[[["self"],["lumaa"]],["bool"]]],[11,"clone","","",1,[[["self"]],["lumaa"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"channel_count","","",1,[[],["u8"]]],[11,"color_model","","",1,[[],["str"]]],[11,"color_type","","",1,[[],["colortype"]]],[11,"channels","","",1,N],[11,"channels_mut","","",1,N],[11,"channels4","","",1,N],[11,"from_channels","","",1,[[["t"],["t"],["t"],["t"]],["lumaa"]]],[11,"from_slice","","",1,N],[11,"from_slice_mut","","",1,N],[11,"to_rgb","","",1,[[["self"]],["rgb"]]],[11,"to_rgba","","",1,[[["self"]],["rgba"]]],[11,"to_luma","","",1,[[["self"]],["luma"]]],[11,"to_luma_alpha","","",1,[[["self"]],["lumaa"]]],[11,"map","","",1,[[["self"],["f"]],["lumaa"]]],[11,"apply","","",1,[[["self"],["f"]]]],[11,"map_with_alpha","","",1,[[["self"],["f"],["g"]],["lumaa"]]],[11,"apply_with_alpha","","",1,[[["self"],["f"],["g"]]]],[11,"map2","","",1,[[["self"],["self"],["f"]],["lumaa"]]],[11,"apply2","","",1,[[["self"],["lumaa"],["f"]]]],[11,"invert","","",1,[[["self"]]]],[11,"blend","","",1,[[["self"],["lumaa"]]]],[11,"index","","",1,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["t"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"from_raw","","Contructs a buffer from a generic container (for example a `Vec` or a slice)",53,[[["u32"],["u32"],["container"]],["option",["imagebuffer"]]]],[11,"into_raw","","Returns the underlying raw buffer",53,[[["self"]],["container"]]],[11,"dimensions","","The width and height of this image.",53,N],[11,"width","","The width of this image.",53,[[["self"]],["u32"]]],[11,"height","","The height of this image.",53,[[["self"]],["u32"]]],[11,"pixels","","Returns an iterator over the pixels of this image.",53,[[["self"]],["pixels"]]],[11,"enumerate_pixels","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a reference to them.",53,[[["self"]],["enumeratepixels"]]],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.",53,[[["self"]],["pixelsmut"]]],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",53,[[["self"]],["enumeratepixelsmut"]]],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"put_pixel","","Puts a pixel at location `(x, y)`",53,[[["self"],["u32"],["u32"],["p"]]]],[11,"save","","Saves the buffer to a file at the path specified.",53,[[["self"],["q"]],["result"]]],[11,"deref","","",53,N],[11,"deref_mut","","",53,N],[11,"index","","",53,N],[11,"index_mut","","",53,N],[11,"clone","","",53,[[["self"]],["imagebuffer"]]],[11,"dimensions","","",53,N],[11,"bounds","","",53,N],[11,"get_pixel","","",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"get_pixel_mut","","",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",53,[[["self"],["u32"],["u32"]],["p"]]],[11,"put_pixel","","",53,[[["self"],["u32"],["u32"],["p"]]]],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",53,[[["self"],["u32"],["u32"],["p"]]]],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",53,[[["self"],["u32"],["u32"],["p"]]]],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",53,[[["u32"],["u32"]],["imagebuffer",["vec"]]]],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",53,[[["u32"],["u32"],["p"]],["imagebuffer",["vec"]]]],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function. The arguments to the function are the pixel's x and y coordinates.",53,[[["u32"],["u32"],["f"]],["imagebuffer",["vec"]]]],[11,"from_vec","","Creates an image buffer out of an existing buffer. Returns None if the buffer is not big enough.",53,[[["u32"],["u32"],["vec"]],["option",["imagebuffer"]]]],[11,"into_vec","","Consumes the image buffer and returns the underlying data as an owned buffer",53,[[["self"]],["vec"]]],[11,"convert","","",53,[[["self"]],["imagebuffer",["vec"]]]],[11,"new","","Contructs a new frame iterator",54,[[["vec",["frame"]]],["frames"]]],[11,"clone","","",55,[[["self"]],["frame"]]],[11,"new","","Contructs a new frame",55,[[["rgbaimage"]],["frame"]]],[11,"from_parts","","Contructs a new frame",55,[[["rgbaimage"],["u32"],["u32"],["ratio",["u16"]]],["frame"]]],[11,"delay","","Delay of this frame",55,[[["self"]],["ratio",["u16"]]]],[11,"buffer","","Returns the image buffer",55,[[["self"]],["rgbaimage"]]],[11,"into_buffer","","Returns the image buffer",55,[[["self"]],["rgbaimage"]]],[11,"left","","Returns the x offset",55,[[["self"]],["u32"]]],[11,"top","","Returns the y offset",55,[[["self"]],["u32"]]],[11,"next","","",54,[[["self"]],["option",["frame"]]]],[6,"ImageResult","","Result of an image decoding/encoding process",N,N],[6,"RgbImage","","Sendable Rgb image buffer",N,N],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",N,N],[6,"GrayImage","","Sendable grayscale image buffer",N,N],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",N,N],[8,"ImageDecoder","","The trait that all decoders implement",N,N],[10,"dimensions","","Returns a tuple containing the width and height of the image",56,[[["self"]],["imageresult"]]],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",56,[[["self"]],["imageresult",["colortype"]]]],[10,"row_len","","Returns the length in bytes of one decoded row of the image",56,[[["self"]],["imageresult",["usize"]]]],[10,"read_scanline","","Reads one row from the image into `buf` and returns the row index",56,N],[10,"read_image","","Decodes the entire image and return it as a Vector",56,[[["self"]],["imageresult",["decodingresult"]]]],[11,"is_animated","","Returns true if the image is animated",56,[[["self"]],["imageresult",["bool"]]]],[11,"into_frames","","Returns the frames of the image",56,[[["self"]],["imageresult",["frames"]]]],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",56,[[["self"],["u32"],["u32"],["u32"],["u32"]],["imageresult",["vec"]]]],[8,"GenericImage","","A trait for manipulating images.",N,N],[16,"Pixel","","The type of pixel.",57,N],[10,"dimensions","","The width and height of this image.",57,N],[11,"width","","The width of this image.",57,[[["self"]],["u32"]]],[11,"height","","The height of this image.",57,[[["self"]],["u32"]]],[10,"bounds","","The bounding rectangle of this image.",57,N],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",57,[[["self"],["u32"],["u32"]],["bool"]]],[10,"get_pixel","","Returns the pixel located at (x, y)",57,N],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",57,N],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",57,N],[10,"put_pixel","","Put a pixel at location (x, y)",57,N],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",57,N],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",57,N],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",57,[[["self"]],["pixels"]]],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",57,[[["self"]],["mutpixels"]]],[11,"copy_from","","Copies all of the pixels from another image into this image.",57,[[["self"],["o"],["u32"],["u32"]],["bool"]]],[11,"sub_image","","Returns a subimage that is a view into this image.",57,[[["self"],["u32"],["u32"],["u32"],["u32"]],["subimage"]]],[8,"Pixel","","A generalized pixel.",N,N],[16,"Subpixel","","The underlying subpixel type.",58,N],[10,"channel_count","","Returns the number of channels of this pixel type.",58,[[],["u8"]]],[10,"channels","","Returns the components as a slice.",58,N],[10,"channels_mut","","Returns the components as a mutable slice",58,N],[10,"color_model","","Returns a string that can help to interpret the meaning each channel See gimp babl.",58,[[],["str"]]],[10,"color_type","","Returns the ColorType for this pixel format",58,[[],["colortype"]]],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel has less than 4 channels the remainder is filled with the maximum value",58,N],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d. If the pixel does not contain 4 channels the extra are ignored.",58,N],[10,"from_slice","","Returns a view into a slice.",58,N],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",58,N],[10,"to_rgb","","Convert this pixel to RGB",58,[[["self"]],["rgb"]]],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",58,[[["self"]],["rgba"]]],[10,"to_luma","","Convert this pixel to luma",58,[[["self"]],["luma"]]],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",58,[[["self"]],["lumaa"]]],[10,"map","","Apply the function `f` to each channel of this pixel.",58,[[["self"],["f"]],["self"]]],[10,"apply","","Apply the function `f` to each channel of this pixel.",58,[[["self"],["f"]]]],[10,"map_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel.",58,[[["self"],["f"],["g"]],["self"]]],[10,"apply_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel. Works in-place.",58,[[["self"],["f"],["g"]]]],[10,"map2","","Apply the function `f` to each channel of this pixel and `other` pairwise.",58,[[["self"],["self"],["f"]],["self"]]],[10,"apply2","","Apply the function `f` to each channel of this pixel and `other` pairwise. Works in-place.",58,[[["self"],["self"],["f"]]]],[10,"invert","","Invert this pixel",58,[[["self"]]]],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",58,[[["self"],["self"]]]],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",N,N],[10,"convert","","Converts `self` to a buffer of type T",59,[[["self"]],["t"]]],[8,"Primitive","","Primitive trait from old stdlib",N,N],[11,"from_rgba","image::gif","Creates a frame from pixels in RGBA format.",33,N],[11,"from_palette_pixels","","Creates a frame from a palette and indexed pixels",33,N],[11,"from_indexed_pixels","","Creates a frame from indexed pixels in the global palette",33,N],[11,"from_rgb","","Creates a frame from pixels in RGB format.",33,N],[11,"clone","","",33,[[["self"]],["frame"]]],[11,"clone","","",34,[[["self"]],["disposalmethod"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",33,[[],["frame"]]],[11,"eq","","",34,[[["self"],["disposalmethod"]],["bool"]]],[11,"from_u8","","Converts `u8` to `Option<Self>`",34,[[["u8"]],["option",["disposalmethod"]]]],[11,"is_animated","image","Returns true if the image is animated",56,[[["self"]],["imageresult",["bool"]]]],[11,"into_frames","","Returns the frames of the image",56,[[["self"]],["imageresult",["frames"]]]],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",56,[[["self"],["u32"],["u32"],["u32"],["u32"]],["imageresult",["vec"]]]],[11,"width","","The width of this image.",57,[[["self"]],["u32"]]],[11,"height","","The height of this image.",57,[[["self"]],["u32"]]],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",57,[[["self"],["u32"],["u32"]],["bool"]]],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",57,N],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",57,N],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",57,[[["self"]],["pixels"]]],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",57,[[["self"]],["mutpixels"]]],[11,"copy_from","","Copies all of the pixels from another image into this image.",57,[[["self"],["o"],["u32"],["u32"]],["bool"]]],[11,"sub_image","","Returns a subimage that is a view into this image.",57,[[["self"],["u32"],["u32"],["u32"],["u32"]],["subimage"]]],[11,"expand_palette","","Expands a color palette by re-using the existing buffer. Assumes 8 bit per pixel. Uses an optionally transparent index to adjust it's alpha value accordingly.",60,N]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"DecodingResult"],[4,"FilterType"],[4,"ImageFormat"],[4,"ImageOutputFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"ArbitraryHeader"],[3,"BitmapHeader"],[3,"GraymapHeader"],[3,"PixmapHeader"],[4,"PNMSubtype"],[4,"SampleEncoding"],[4,"ArbitraryTuplType"],[3,"PNMDecoder"],[3,"PNMEncoder"],[3,"PNMHeader"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[4,"DisposalMethod"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPEncoder"],[3,"BMPDecoder"],[3,"RGBE8Pixel"],[3,"HDRMetadata"],[3,"HDRAdapter"],[3,"HDRDecoder"],[3,"HDRImageDecoderIterator"],[3,"HDREncoder"],[4,"DXTVariant"],[3,"DXTDecoder"],[3,"DXTEncoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["inflate"]={"doc":"A DEFLATE decoder written in rust.","items":[[3,"InflateWriter","inflate","A DEFLATE decoder.",N,N],[3,"DeflateDecoder","","A DEFLATE decoder/decompressor.",N,N],[3,"DeflateDecoderBuf","","A DEFLATE decoder/decompressor.",N,N],[3,"InflateStream","","",N,N],[5,"inflate_bytes","","Decompress the given slice of DEFLATE compressed data.",N,N],[5,"inflate_bytes_zlib","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.",N,N],[5,"inflate_bytes_zlib_no_checksum","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data, without calculating and validating the checksum.",N,N],[11,"new","","",0,[[["w"]],["inflatewriter"]]],[11,"from_zlib","","",0,[[["w"]],["inflatewriter"]]],[11,"finish","","",0,[[["self"]],["result"]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",1,[[["r"]],["deflatedecoderbuf"]]],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",1,[[["r"]],["deflatedecoderbuf"]]],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",1,[[["r"]],["deflatedecoderbuf"]]],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",1,[[["self"],["r"]],["r"]]],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",1,[[["self"]]]],[11,"get_ref","","Returns a reference to the underlying `BufRead` instance.",1,[[["self"]],["r"]]],[11,"get_mut","","Returns a mutable reference to the underlying `BufRead` instance.",1,[[["self"]],["r"]]],[11,"into_inner","","Drops the decoder and return the inner `BufRead` instance.",1,[[["self"]],["r"]]],[11,"total_in","","Returns the total bytes read from the underlying `BufRead` instance.",1,[[["self"]],["u64"]]],[11,"total_out","","Returns the total number of bytes output from this decoder.",1,[[["self"]],["u64"]]],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",1,[[["self"]],["u32"]]],[11,"read","","",1,N],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",2,[[["r"]],["deflatedecoder"]]],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",2,[[["r"]],["deflatedecoder"]]],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",2,[[["r"]],["deflatedecoder"]]],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",2,[[["self"],["r"]],["r"]]],[11,"get_ref","","Returns a reference to the underlying reader.",2,[[["self"]],["r"]]],[11,"get_mut","","Returns a mutable reference to the underlying reader.",2,[[["self"]],["r"]]],[11,"into_inner","","Returns the total number of bytes output from this decoder.",2,[[["self"]],["r"]]],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",2,[[["self"]]]],[11,"total_in","","Returns the total bytes read from the underlying reader.",2,[[["self"]],["u64"]]],[11,"total_out","","Returns the total number of bytes output from this decoder.",2,[[["self"]],["u64"]]],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",2,[[["self"]],["u32"]]],[11,"read","","",2,N],[11,"new","","Create a new stream for decoding raw deflate encoded data.",3,[[],["inflatestream"]]],[11,"from_zlib","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,[[],["inflatestream"]]],[11,"from_zlib_no_checksum","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,[[],["inflatestream"]]],[11,"reset","","",3,[[["self"]]]],[11,"reset_to_zlib","","",3,[[["self"]]]],[11,"update","","Try to uncompress/decode the data in `data`.",3,N],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",3,[[["self"]],["u32"]]]],"paths":[[3,"InflateWriter"],[3,"DeflateDecoderBuf"],[3,"DeflateDecoder"],[3,"InflateStream"]]};
searchIndex["inflections"]={"doc":"This is a library which allows anyone to change various properties of their strings with a heavy emphasis on performance. Allows programmers to manipulate a single programatic name consistently in multiple contexts.","items":[[0,"case","inflections","Utilities to change the case of a string to another case. Supports “lower case,” “UPPER CASE,” “sentence case,” “Title Case,” “camelCase,” “PascalCase,” “kebab-case,” “Train-Case,” “snake_case,” and “CONSTANT_CASE.”",N,N],[5,"to_lower_case","inflections::case","Converts any case into lower case ignoring separators.",N,[[["str"]],["string"]]],[5,"is_lower_case","","Check to see if a string is completely lower case.",N,[[["str"]],["bool"]]],[5,"to_upper_case","","Converts any case into UPPER CASE ignoring separators.",N,[[["str"]],["string"]]],[5,"is_upper_case","","Check to see if a string is completely UPPER CASE.",N,[[["str"]],["bool"]]],[5,"to_sentence_case","","Converts any case into traditional sentence case without capitalizing the first letter.",N,[[["str"]],["string"]]],[5,"is_sentence_case","","Check to see if a string is sentence case.",N,[[["str"]],["bool"]]],[5,"to_title_case","","Converts any case into title case where every word is capitalized.",N,[[["str"]],["string"]]],[5,"is_title_case","","Check to see if a string is Title Case.",N,[[["str"]],["bool"]]],[5,"to_camel_case","","Converts any case into camelCase.",N,[[["str"]],["string"]]],[5,"is_camel_case","","Check to see if a string is camelCase.",N,[[["str"]],["bool"]]],[5,"to_pascal_case","","Converts any case into PascalCase.",N,[[["str"]],["string"]]],[5,"is_pascal_case","","Check to see if a string is PascalCase.",N,[[["str"]],["bool"]]],[5,"to_kebab_case","","Converts any case into kebab-case.",N,[[["str"]],["string"]]],[5,"is_kebab_case","","Check to see if a string is kebab-case.",N,[[["str"]],["bool"]]],[5,"to_train_case","","Converts any case into Train-Case.",N,[[["str"]],["string"]]],[5,"is_train_case","","Check to see if a string is Train-Case.",N,[[["str"]],["bool"]]],[5,"to_snake_case","","Converts any case into snake_case.",N,[[["str"]],["string"]]],[5,"is_snake_case","","Check to see if a string is snake_case.",N,[[["str"]],["bool"]]],[5,"to_constant_case","","Converts any case into CONSTANT_CASE.",N,[[["str"]],["string"]]],[5,"is_constant_case","","Check to see if a string is CONSTANT_CASE.",N,[[["str"]],["bool"]]],[8,"Inflect","inflections","An extension trait to make the functions in the `case` module available as methods on the `str` type.",N,N],[10,"to_upper_case","","",0,[[["self"]],["string"]]],[10,"is_upper_case","","",0,[[["self"]],["bool"]]],[10,"to_lower_case","","",0,[[["self"]],["string"]]],[10,"is_lower_case","","",0,[[["self"]],["bool"]]],[10,"to_sentence_case","","",0,[[["self"]],["string"]]],[10,"is_sentence_case","","",0,[[["self"]],["bool"]]],[10,"to_title_case","","",0,[[["self"]],["string"]]],[10,"is_title_case","","",0,[[["self"]],["bool"]]],[10,"to_camel_case","","",0,[[["self"]],["string"]]],[10,"is_camel_case","","",0,[[["self"]],["bool"]]],[10,"to_pascal_case","","",0,[[["self"]],["string"]]],[10,"is_pascal_case","","",0,[[["self"]],["bool"]]],[10,"to_kebab_case","","",0,[[["self"]],["string"]]],[10,"is_kebab_case","","",0,[[["self"]],["bool"]]],[10,"to_train_case","","",0,[[["self"]],["string"]]],[10,"is_train_case","","",0,[[["self"]],["bool"]]],[10,"to_snake_case","","",0,[[["self"]],["string"]]],[10,"is_snake_case","","",0,[[["self"]],["bool"]]],[10,"to_constant_case","","",0,[[["self"]],["string"]]],[10,"is_constant_case","","",0,[[["self"]],["bool"]]]],"paths":[[8,"Inflect"]]};
searchIndex["itertools"]={"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[4,"Diff","","A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,N],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,N],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,N],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",N,N],[13,"NoElements","","Empty iterator",2,N],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,N],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,N],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",N,N],[13,"First","","This is the first element.",3,N],[13,"Middle","","This is neither the first nor the last element.",3,N],[13,"Last","","This is the last element.",3,N],[13,"Only","","This is the only element.",3,N],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",N,N],[13,"Both","","Both values are present.",4,N],[13,"Left","","Only the left value of type `A` is present.",4,N],[13,"Right","","Only the right value of type `B` is present.",4,N],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"flatten","","Flatten an iterable of iterables into a single combined sequence of all the elements in the iterables.",N,[[["i"]],["flatten"]]],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",N,N],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",N,[[["i"]],["constuples"]]],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",N,[[["i"],["j"],["f"]],["option",["diff"]]]],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",N,[[["i"],["f"]],["kmergeby"]]],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",N,[[["i"],["f"]],["result"]]],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",N,[[["a"],["usize"]],["repeatn"]]],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",N,[[["f"]],["repeatcall"]]],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",N,[[["st"],["f"]],["unfold"]]],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",N,[[["st"],["f"]],["iterate"]]],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",N,[[["u"]],["zip"]]],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",N,[[["i"],["j"]],["interleave"]]],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",N,[[["i"],["j"]],["merge"]]],[5,"put_back","","Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",N,[[["i"]],["putbackn"]]],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",N,[[["i"]],["multipeek"]]],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",N,[[["i"]],["kmerge"]]],[5,"zip_eq","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zipeq"]]],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.",N,[[["i"],["j"],["f"]],["mergejoinby"]]],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",N,[[["i"]],["rciter"]]],[5,"enumerate","","Iterate `iterable` with a running index.",N,[[["i"]],["enumerate"]]],[5,"rev","","Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip","","Iterate `i` and `j` in lock step.",N,[[["i"],["j"]],["zip"]]],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",N,[[["i"],["j"]],["chain"]]],[5,"cloned","","Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold","","Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all","","Test whether the predicate holds for all elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"any","","Test whether the predicate holds for any elements in the iterable.",N,[[["i"],["f"]],["bool"]]],[5,"max","","Return the maximum value of the iterable.",N,[[["i"]],["option"]]],[5,"min","","Return the minimum value of the iterable.",N,[[["i"]],["option"]]],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",N,[[["i"],["str"]],["string"]]],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",N,[[["i"]],["vec"]]],[5,"equal","","Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",N,[[["i"],["j"]],["bool"]]],[5,"assert_equal","","Assert that two iterables produce equal sequences, with the same semantics as equal(a, b).",N,[[["i"],["j"]]]],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",N,[[["i"],["f"]],["usize"]]],[0,"structs","","The concrete iterator types.",N,N],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",N,N],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",N,N],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",N,N],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",N,N],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",N,N],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",N,N],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",N,N],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",N,N],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",N,N],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",N,N],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",N,N],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",N,N],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",N,N],[3,"Flatten","","An iterator adapter to simply flatten a structure.",N,N],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",N,N],[3,"Update","","An iterator adapter to apply a mutating function to each element before yielding it.",N,N],[3,"MultiProduct","","An iterator adaptor that iterates over the cartesian product of multiple iterators of type `I`.",N,N],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",N,N],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",N,N],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",N,N],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",N,N],[3,"Chunk","","An iterator for the elements in a single chunk.",N,N],[3,"Chunks","","An iterator that yields the Chunk iterators.",N,N],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",N,N],[3,"Group","","An iterator for the elements in a single group.",N,N],[3,"Groups","","An iterator that yields the Group iterators.",N,N],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",N,N],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",N,N],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",N,N],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two base iterators in ascending order.",N,N],[3,"MultiPeek","","See `multipeek()` for more information.",N,N],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",N,N],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",N,N],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",N,N],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",N,N],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",N,N],[12,"rciter","","The boxed iterator.",6,N],[3,"RepeatN","","An iterator that produces n repetitions of an element.",N,N],[3,"RepeatCall","","See `repeat_call` for more information.",N,N],[3,"Unfold","","See `unfold` for more information.",N,N],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,N],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",N,N],[3,"Tee","","One half of an iterator pair where both return the same elements.",N,N],[3,"TupleBuffer","","An iterator over a incomplete tuple.",N,N],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",N,N],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",N,N],[3,"Unique","","An iterator adapter to filter out duplicate elements.",N,N],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",N,N],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",N,N],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",N,N],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",N,N],[3,"Zip","","See `multizip` for more information.",N,N],[11,"clone","","",8,[[["self"]],["multiproduct"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"count","","",8,[[["self"]],["usize"]]],[11,"size_hint","","",8,N],[11,"last","","",8,[[["self"]],["option"]]],[11,"clone","","",9,[[["self"]],["interleave"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"clone","","",10,[[["self"]],["interleaveshortest"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"clone","","",11,[[["self"]],["putback"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"with_value","","put back value `value` (builder method)",11,N],[11,"into_parts","","Split the `PutBack` into its parts.",11,N],[11,"put_back","","Put back a single value to the front of the iterator.",11,N],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"all","","",11,[[["self"],["g"]],["bool"]]],[11,"fold","","",11,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["product"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"fold","","",12,[[["self"],["acc"],["g"]],["acc"]]],[11,"clone","","",13,[[["self"]],["batching"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"clone","","",14,[[["self"]],["step"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["self"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"clone","","",17,[[["self"]],["self"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"clone","","",18,[[["self"]],["self"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"fold","","",18,[[["self"],["acc"],["g"]],["acc"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"clone","","",20,[[["self"]],["whilesome"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"next","","",21,[[["self"]],["option"]]],[11,"clone","","",22,[[["self"]],["flatten"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"fold","","",22,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"size_hint","","",23,N],[11,"fold","","",23,[[["self"],["acc"],["fold"]],["acc"]]],[11,"collect","","",23,[[["self"]],["c"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,N],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next","","",25,[[["self"]],["option"]]],[11,"size_hint","","",25,N],[11,"fold","","",25,[[["self"],["acc"],["g"]],["acc"]]],[11,"collect","","",25,[[["self"]],["c"]]],[11,"next_back","","",25,[[["self"]],["option"]]],[11,"clone","itertools","",4,[[["self"]],["eitherorboth"]]],[11,"eq","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"ne","","",4,[[["self"],["eitherorboth"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","itertools::structs","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"fold","","",26,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"clone","","",28,[[["self"]],["format"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"drop","","",31,[[["self"]]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"drop","","",33,[[["self"]]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"clone","","",34,[[["self"]],["intersperse"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"next","","",34,[[["self"]],["option"]]],[11,"size_hint","","",34,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["kmerge"]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,N],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"next","","",36,[[["self"]],["option"]]],[11,"size_hint","","",36,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,N],[11,"clone","itertools","",2,[[["self"]],["minmaxresult"]]],[11,"eq","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["minmaxresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,[[["self"]],["option"]]],[11,"clone","itertools::structs","",38,[[["self"]],["multipeek"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"reset_peek","","Reset the peeking “cursor”",38,[[["self"]]]],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",38,[[["self"]],["option"]]],[11,"peeking_next","","",38,[[["self"],["f"]],["option"]]],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"clone","","",39,[[["self"]],["padusing"]]],[11,"next","","",39,[[["self"]],["option"]]],[11,"size_hint","","",39,N],[11,"next_back","","",39,[[["self"]],["option"]]],[11,"peeking_next","","",11,[[["self"],["f"]],["option"]]],[11,"peeking_next","","",40,[[["self"],["f"]],["option"]]],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"next","","",42,[[["self"]],["option"]]],[11,"size_hint","","",42,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["putbackn"]]],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",40,N],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["rciter"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"next","","",43,[[["self"]],["option"]]],[11,"size_hint","","",43,N],[11,"next_back","","",43,[[["self"]],["option"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"next","","",44,[[["self"]],["option"]]],[11,"size_hint","","",44,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unfold"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"clone","","",45,[[["self"]],["iterate"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"next","","",46,[[["self"]],["option"]]],[11,"size_hint","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"next","","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,N],[11,"next","","",48,[[["self"]],["option"]]],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",48,[[["self"]],["tuplebuffer"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"next","","",49,[[["self"]],["option"]]],[11,"clone","","",50,[[["self"]],["uniqueby"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"next","","",50,[[["self"]],["option"]]],[11,"size_hint","","",50,N],[11,"count","","",50,[[["self"]],["usize"]]],[11,"next","","",51,[[["self"]],["option"]]],[11,"size_hint","","",51,N],[11,"count","","",51,[[["self"]],["usize"]]],[11,"clone","","",51,[[["self"]],["unique"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","itertools","",3,[[["self"]],["position"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["position"]],["bool"]]],[11,"ne","","",3,[[["self"],["position"]],["bool"]]],[11,"into_inner","","Return the inner value.",3,[[["self"]],["t"]]],[11,"next","itertools::structs","",52,[[["self"]],["option"]]],[11,"size_hint","","",52,N],[11,"clone","","",53,[[["self"]],["zipeq"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"next","","",53,[[["self"]],["option"]]],[11,"size_hint","","",53,N],[11,"clone","","",54,[[["self"]],["ziplongest"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"next","","",54,[[["self"]],["option"]]],[11,"size_hint","","",54,N],[11,"next_back","","",54,[[["self"]],["option"]]],[11,"clone","","",55,[[["self"]],["zip"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"from","","",55,N],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",N,N],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",56,[[["self"],["f"]],["option"]]],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",N,N],[11,"interleave","","Alternate elements from two iterators until both have run out.",57,[[["self"],["j"]],["interleave"]]],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",57,[[["self"],["j"]],["interleaveshortest"]]],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",57,N],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",57,[[["self"],["j"]],["ziplongest"]]],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",57,[[["self"],["j"]],["zipeq"]]],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",57,[[["self"],["f"]],["batching"]]],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",57,[[["self"],["f"]],["groupby"]]],[11,"chunks","","Return an iterable that can chunk the iterator.",57,[[["self"],["usize"]],["intochunks"]]],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",57,[[["self"]],["tuplewindows"]]],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",57,[[["self"]],["tuples"]]],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",57,N],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",57,[[["self"],["usize"]],["step"]]],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",57,[[["self"],["f"]],["mapresults"]]],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",57,[[["self"],["j"]],["merge"]]],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",57,[[["self"],["j"],["f"]],["mergeby"]]],[11,"merge_join_by","","Create an iterator that merges items from both this and the specified iterator in ascending order.",57,[[["self"],["j"],["f"]],["mergejoinby"]]],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",57,[[["self"]],["kmerge"]]],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",57,[[["self"],["f"]],["kmergeby"]]],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",57,[[["self"],["j"]],["product"]]],[11,"multi_cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of all subiterators returned by meta-iterator `self`.",57,[[["self"]],["multiproduct"]]],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",57,[[["self"],["f"]],["coalesce"]]],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",57,[[["self"]],["dedup"]]],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",57,[[["self"]],["unique"]]],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",57,[[["self"],["f"]],["uniqueby"]]],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",57,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",57,[[["self"],["f"]],["takewhileref"]]],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",57,[[["self"]],["whilesome"]]],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",57,[[["self"]],["tuplecombinations"]]],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",57,[[["self"],["usize"]],["combinations"]]],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",57,[[["self"],["usize"],["f"]],["padusing"]]],[11,"flatten","","Flatten an iterator of iterables into a single combined sequence of all the elements in the iterables.",57,[[["self"]],["flatten"]]],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",57,[[["self"]],["withposition"]]],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",57,[[["self"],["p"]],["positions"]]],[11,"update","","Return an iterator adaptor that applies a mutating function to each element before yielding it.",57,[[["self"],["f"]],["update"]]],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",57,[[["self"]],["option"]]],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a specific size (up to 4).",57,[[["self"]],["option"]]],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",57,[[["self"],["p"]],["option"]]],[11,"all_equal","","Check whether all elements compare equal.",57,[[["self"]],["bool"]]],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",57,[[["self"],["usize"]],["self"]]],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",57,[[["self"],["usize"]],["self"]]],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",57,[[["self"],["f"]]]],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",57,N],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",57,[[["self"]],["vec"]]],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",57,[[["self"],["j"]],["usize"]]],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",57,[[["self"],["str"]],["string"]]],[11,"format","","Format all iterator elements, separated by `sep`.",57,[[["self"],["str"]],["format"]]],[11,"format_with","","Format all iterator elements, separated by `sep`.",57,[[["self"],["str"],["f"]],["formatwith"]]],[11,"fold_results","","Fold `Result` values from an iterator.",57,[[["self"],["b"],["f"]],["result"]]],[11,"fold_options","","Fold `Option` values from an iterator.",57,[[["self"],["b"],["f"]],["option"]]],[11,"fold1","","Accumulator of the elements in the iterator.",57,[[["self"],["f"]],["option"]]],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like manner.",57,[[["self"],["f"]],["option"]]],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",57,[[["self"],["b"],["f"]],["foldwhile"]]],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",57,[[["self"]],["vec"]]],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",57,[[["self"],["f"]],["vec"]]],[11,"sorted_by_key","","Collect all iterator elements into a sorted vector.",57,[[["self"],["f"]],["vec"]]],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",57,N],[11,"into_group_map","","Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values are taken from `(Key, Value)` tuple pairs yielded by the input iterator.",57,[[["self"]],["hashmap",["vec"]]]],[11,"minmax","","Return the minimum and maximum elements in the iterator.",57,[[["self"]],["minmaxresult"]]],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",57,[[["self"],["f"]],["minmaxresult"]]],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",57,[[["self"],["f"]],["minmaxresult"]]],[11,"clone","","",5,[[["self"]],["foldwhile"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Return the value in the continue or done.",5,[[["self"]],["t"]]],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,[[["self"]],["bool"]]],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",N,N],[14,"izip","","Create an iterator running multiple iterators in lockstep.",N,N],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"extend","","",0,N],[11,"from","","",0,[[["result"]],["either"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"hash","","",0,N],[11,"deref_mut","","",0,N],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"clone","","",0,[[["self"]],["either"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"into","","",0,[[["self"]],["result"]]]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiProduct"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Combinations"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"MultiPeek"],[3,"PadUsing"],[3,"PutBackN"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"UniqueBy"],[3,"Unique"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["itoa"]={"doc":"","items":[[3,"Buffer","itoa","A safe API for formatting integers to text.",N,N],[5,"write","","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N],[11,"default","","",0,[[],["buffer"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["buffer"]]],[11,"format","","Print an integer into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["i"]],["str"]]]],"paths":[[3,"Buffer"]]};
searchIndex["jpeg_decoder"]={"doc":"This crate contains a JPEG decoder.","items":[[3,"Decoder","jpeg_decoder","JPEG decoder",N,N],[3,"ImageInfo","","Represents metadata of an image.",N,N],[12,"width","","The width of the image, in pixels.",0,N],[12,"height","","The height of the image, in pixels.",0,N],[12,"pixel_format","","The pixel format of the image.",0,N],[4,"PixelFormat","","An enumeration over combinations of color spaces and bit depths a pixel can have.",N,N],[13,"L8","","Luminance (grayscale), 8 bits",1,N],[13,"RGB24","","RGB, 8 bits per channel",1,N],[13,"CMYK32","","CMYK, 8 bits per channel",1,N],[4,"Error","","Errors that can occur while decoding a JPEG image.",N,N],[13,"Format","","The image is not formatted properly. The string contains detailed information about the error.",2,N],[13,"Unsupported","","The image makes use of a JPEG feature not (currently) supported by this library.",2,N],[13,"Io","","An I/O error occurred while decoding the image.",2,N],[13,"Internal","","An internal error occurred while decoding the image.",2,N],[4,"UnsupportedFeature","","An enumeration over JPEG features (currently) unsupported by this library.",N,N],[13,"Hierarchical","","Hierarchical JPEG.",3,N],[13,"Lossless","","Lossless JPEG.",3,N],[13,"ArithmeticEntropyCoding","","JPEG using arithmetic entropy coding instead of Huffman coding.",3,N],[13,"SamplePrecision","","Sample precision in bits. 8 bit sample precision is what is currently supported.",3,N],[13,"ComponentCount","","Number of components in an image. 1, 3 and 4 components are currently supported.",3,N],[13,"DNL","","An image can specify a zero height in the frame header and use the DNL (Define Number of Lines) marker at the end of the first scan to define the number of lines in the frame.",3,N],[13,"SubsamplingRatio","","Subsampling ratio.",3,N],[13,"NonIntegerSubsamplingRatio","","A subsampling ratio not representable as an integer.",3,N],[11,"clone","","",1,[[["self"]],["pixelformat"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["pixelformat"]],["bool"]]],[11,"clone","","",0,[[["self"]],["imageinfo"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["imageinfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["imageinfo"]],["bool"]]],[11,"new","","Creates a new `Decoder` using the reader `reader`.",4,[[["r"]],["decoder"]]],[11,"info","","Returns metadata about the image.",4,[[["self"]],["option",["imageinfo"]]]],[11,"read_info","","Tries to read metadata from the image without decoding it.",4,[[["self"]],["result",["error"]]]],[11,"decode","","Decodes the image and returns the decoded pixels if successful.",4,[[["self"]],["result",["vec","error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["stderror"]]]],[11,"from","","",2,[[["ioerror"]],["error"]]],[11,"from","","",2,[[["recverror"]],["error"]]],[11,"from","","",2,[[["senderror"]],["error"]]]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["lewton"]={"doc":"A `vorbis` decoder, written in Rust.","items":[[4,"VorbisError","lewton","Errors that can occur during decoding",N,N],[13,"BadAudio","","",0,N],[13,"BadHeader","","",0,N],[13,"OggError","","",0,N],[0,"header","","Header decoding",N,N],[3,"IdentHeader","lewton::header","Representation for the identification header",N,N],[12,"audio_channels","","The number of audio channels in the stream",1,N],[12,"audio_sample_rate","","The sample rate of the stream",1,N],[12,"bitrate_maximum","","The maximum bit rate of the stream",1,N],[12,"bitrate_nominal","","The nominal bit rate of the stream",1,N],[12,"bitrate_minimum","","The minimum bit rate of the stream",1,N],[12,"blocksize_0","","",1,N],[12,"blocksize_1","","",1,N],[3,"CommentHeader","","Representation of the comment header",N,N],[12,"vendor","","An identification string of the software/library that encoded the stream.",2,N],[12,"comment_list","","A key-value list of the comments attached to the stream.",2,N],[3,"SetupHeader","","",N,N],[4,"HeaderReadError","","Errors that can occur during Header decoding",N,N],[13,"EndOfPacket","","",3,N],[13,"NotVorbisHeader","","If the passed data don't start with the \"vorbis\" capture pattern, this error is returned.",3,N],[13,"UnsupportedVorbisVersion","","",3,N],[13,"HeaderBadFormat","","If the header violates the vorbis spec",3,N],[13,"HeaderBadType","","The given packet indeed seems to be a vorbis header, but it looks like it is a different header type than the function it was passed to.",3,N],[13,"HeaderIsAudio","","The given packet does not seem to be a header as per vorbis spec, instead it seems to be an audio packet.",3,N],[13,"Utf8DecodeError","","",3,N],[13,"BufferNotAddressable","","If the needed memory isn't addressable by us",3,N],[5,"read_header_ident","","Reading the Identification header",N,N],[5,"read_header_comment","","Reading the Comment header",N,N],[5,"read_header_setup","","Reading the setup header.",N,N],[6,"HeaderSet","","The set of the three Vorbis headers",N,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["headerreaderror"]],["bool"]]],[11,"ne","","",3,[[["self"],["headerreaderror"]],["bool"]]],[11,"from","","",3,N],[11,"from","","",3,[[["error"]],["headerreaderror"]]],[11,"from","","",3,[[["fromutf8error"]],["headerreaderror"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",2,[[["self"]],["commentheader"]]],[11,"eq","","",2,[[["self"],["commentheader"]],["bool"]]],[11,"ne","","",2,[[["self"],["commentheader"]],["bool"]]],[11,"hash","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[0,"audio","lewton","Audio packet decoding",N,N],[3,"PreviousWindowRight","lewton::audio","The right part of the previous window",N,N],[4,"AudioReadError","","",N,N],[13,"EndOfPacket","","",4,N],[13,"AudioBadFormat","","",4,N],[13,"AudioIsHeader","","",4,N],[13,"BufferNotAddressable","","If the needed memory isn't addressable by us",4,N],[5,"get_decoded_sample_count","","Returns the per-channel sample count of a packet if it were decoded.",N,N],[5,"read_audio_packet","","Main audio packet decoding function",N,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["audioreaderror"]],["bool"]]],[11,"from","","",4,N],[11,"description","","",4,[[["self"]],["str"]]],[11,"cause","","",4,[[["self"]],["option",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"new","","",5,[[],["self"]]],[0,"inside_ogg","lewton","Higher-level utilities for Ogg streams and files",N,N],[3,"OggStreamReader","lewton::inside_ogg","Reading ogg/vorbis files or streams",N,N],[12,"ident_hdr","","",6,N],[12,"comment_hdr","","",6,N],[12,"setup_hdr","","",6,N],[5,"read_headers","","Reads the three vorbis headers from an ogg stream as well as stream serial information",N,[[["packetreader"]],["result",["vorbiserror"]]]],[11,"new","","Constructs a new OggStreamReader from a given implementation of `Read + Seek`.",6,[[["t"]],["result",["oggstreamreader","vorbiserror"]]]],[11,"from_ogg_reader","","Constructs a new OggStreamReader from a given Ogg PacketReader.",6,[[["packetreader"]],["result",["oggstreamreader","vorbiserror"]]]],[11,"into_inner","","",6,[[["self"]],["packetreader"]]],[11,"read_dec_packet","","Reads and decompresses an audio packet from the stream.",6,[[["self"]],["result",["option","vorbiserror"]]]],[11,"read_dec_packet_itl","","Reads and decompresses an audio packet from the stream (interleaved).",6,[[["self"]],["result",["option","vorbiserror"]]]],[11,"get_last_absgp","","Returns the absolute granule position of the last read page.",6,[[["self"]],["option",["u64"]]]],[11,"seek_absgp_pg","","Seeks to the specified absolute granule position, with a page granularity.",6,[[["self"],["u64"]],["result",["vorbiserror"]]]],[11,"fmt","lewton","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",0,[[["audioreaderror"]],["vorbiserror"]]],[11,"from","","",0,[[["headerreaderror"]],["vorbiserror"]]],[11,"from","","",0,[[["oggreaderror"]],["vorbiserror"]]]],"paths":[[4,"VorbisError"],[3,"IdentHeader"],[3,"CommentHeader"],[4,"HeaderReadError"],[4,"AudioReadError"],[3,"PreviousWindowRight"],[3,"OggStreamReader"]]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",116,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]],[11,"clone","","",117,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",118,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",119,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",120,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",121,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",123,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",124,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",125,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",126,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",127,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",128,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",129,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",130,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["libloading"]={"doc":"A memory-safer wrapper around system dynamic library loading primitives.","items":[[3,"Library","libloading","A loaded dynamic library.",N,N],[3,"Symbol","","Symbol from a library.",N,N],[0,"os","","Unsafe, platform specific bindings to dynamic library loading facilities.",N,N],[0,"unix","libloading::os","UNIX implementation of dynamic library loading.",N,N],[3,"Library","libloading::os::unix","A platform-specific equivalent of the cross-platform `Library`.",N,N],[3,"Symbol","","Symbol from a library.",N,N],[11,"new","","Find and load a shared library (module).",0,[[["p"]],["result",["library"]]]],[11,"this","","Load the dynamic libraries linked into main program.",0,[[],["library"]]],[11,"open","","Find and load a shared library (module).",0,[[["option"],["c_int"]],["result",["library"]]]],[11,"get","","Get a pointer to function or static variable by symbol name.",0,N],[11,"drop","","",0,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"lift_option","","Lift Option out of the symbol.",1,[[["self"]],["option",["symbol"]]]],[11,"clone","","",1,[[["self"]],["symbol"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"windows","libloading::os","Windows implementation of dynamic library loading.",N,N],[0,"changelog","libloading","Project changelog",N,N],[0,"r0_5_0","libloading::changelog","Release 0.5.0 (2018-01-11)",N,N],[0,"r0_4_3","","Release 0.4.3 (2017-12-07)",N,N],[0,"r0_4_2","","Release 0.4.2 (2017-09-24)",N,N],[0,"r0_4_1","","Release 0.4.1 (2017-08-29)",N,N],[0,"r0_4_0","","Release 0.4.0 (2017-05-01)",N,N],[0,"r0_3_4","","Release 0.3.4 (2017-03-25)",N,N],[0,"r0_3_3","","Release 0.3.3 (2017-03-25)",N,N],[0,"r0_3_2","","Release 0.3.2 (2017-02-10)",N,N],[0,"r0_3_1","","Release 0.3.1 (2016-10-01)",N,N],[0,"r0_3_0","","Release 0.3.0 (2016-07-27)",N,N],[6,"Result","libloading","",N,N],[11,"new","","Find and load a dynamic library.",2,[[["p"]],["result",["library"]]]],[11,"get","","Get a pointer to function or static variable by symbol name.",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["library"]],["library"]]],[11,"from","libloading::os::unix","",0,[[["library"]],["library"]]],[11,"into_raw","libloading","Extract the wrapped `os::platform::Symbol`.",3,[[["self"]],["symbol"]]],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",3,[[["symbol"],["l"]],["symbol"]]],[11,"lift_option","","Lift Option out of the symbol.",3,[[["self"]],["option",["symbol"]]]],[11,"clone","","",3,[[["self"]],["symbol"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Library"],[3,"Symbol"],[3,"Library"],[3,"Symbol"]]};
searchIndex["linked_hash_map"]={"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",N,N],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",N,N],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",N,N],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",N,N],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",N,N],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",N,N],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",N,N],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",N,N],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",N,N],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",N,N],[13,"Occupied","","An occupied Entry.",0,N],[13,"Vacant","","A vacant Entry.",0,N],[11,"new","","Creates a linked hash map.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,[[["usize"],["s"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,[[["self"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["k"]],["entry"]]],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,[[["self"]],["entries"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,[[["self"],["k"],["v"]],["option"]]],[11,"contains_key","","Checks if the map contains the given key.",1,[[["self"],["q"]],["bool"]]],[11,"get","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,[[["self"],["q"]],["option"]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"pop_front","","Removes the first entry.",1,[[["self"]],["option"]]],[11,"front","","Gets the first entry.",1,[[["self"]],["option"]]],[11,"pop_back","","Removes the last entry.",1,[[["self"]],["option"]]],[11,"back","","Gets the last entry.",1,[[["self"]],["option"]]],[11,"len","","Returns the number of key-value pairs in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the map is currently empty.",1,[[["self"]],["bool"]]],[11,"hasher","","Returns a reference to the map's hasher.",1,[[["self"]],["s"]]],[11,"clear","","Clears the map of all key-value pairs.",1,[[["self"]]]],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,[[["self"]],["itermut"]]],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,[[["self"]],["keys"]]],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,[[["self"]],["values"]]],[11,"index","","",1,[[["self"],["q"]],["v"]]],[11,"index_mut","","",1,[[["self"],["q"]],["v"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"drop","","",1,[[["self"]]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next","","",5,[[["self"]],["option",["occupiedentry"]]]],[11,"size_hint","","",5,N],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"len","","",2,[[["self"]],["usize"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"drop","","",3,[[["self"]]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"len","","",6,[[["self"]],["usize"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"len","","",7,[[["self"]],["usize"]]],[11,"into_iter","","",1,[[["self"]],["intoiter"]]],[11,"key","","Returns the entry key",0,[[["self"]],["k"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"key","","Gets a reference to the entry key",8,[[["self"]],["k"]]],[11,"get","","Gets a reference to the value in the entry.",8,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it",8,[[["self"]],["v"]]],[11,"key","","Gets a reference to the entry key",9,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,[[["self"],["v"]],["v"]]]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["lock_api"]={"doc":"This library provides type-safe and fully-featured `Mutex` and `RwLock` types which wrap a simple raw mutex or rwlock type. This has several benefits: not only does it eliminate a large portion of the work in implementing custom lock types, it also allows users to write code which is generic with regards to different lock implementations.","items":[[3,"GuardSend","lock_api","Marker type which indicates that the Guard type for a lock is `Send`.",N,N],[3,"GuardNoSend","","Marker type which indicates that the Guard type for a lock is not `Send`.",N,N],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"RwLock","","A reader-writer lock",N,N],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[3,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[11,"new","","Creates a new mutex in an unlocked state ready for use.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[["self"]],["t"]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,[[["self"]],["mutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",0,[[["self"]],["option",["mutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",0,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",0,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",0,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"default","","",0,[[],["mutex"]]],[11,"from","","",0,[[["t"]],["mutex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"mutex","","Returns a reference to the original `Mutex` object.",1,[[["self"]],["mutex"]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",1,[[["self"],["f"]],["mappedmutexguard"]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",1,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",1,[[["self"]]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",2,[[["self"],["f"]],["mappedmutexguard"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",2,[[["self"]]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",3,[[["t"]],["reentrantmutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,[[["self"]],["t"]]],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",3,[[["self"]],["reentrantmutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",3,[[["self"]],["option",["reentrantmutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",3,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",3,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",3,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"default","","",3,[[],["reentrantmutex"]]],[11,"from","","",3,[[["t"]],["reentrantmutex"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"remutex","","Returns a reference to the original `ReentrantMutex` object.",4,[[["self"]],["reentrantmutex"]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",4,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",4,[[["self"]]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"drop","","",4,[[["self"]]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",5,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",5,[[["self"]]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"drop","","",5,[[["self"]]]],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",6,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",6,[[["self"]],["t"]]],[11,"read","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"write","","Locks this `RwLock` with exclusive write access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempts to lock this `RwLock` with exclusive write access.",6,[[["self"]],["option",["rwlockwriteguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",6,[[["self"]],["t"]]],[11,"force_unlock_read","","Forcibly unlocks a read lock.",6,[[["self"]]]],[11,"force_unlock_write","","Forcibly unlocks a write lock.",6,[[["self"]]]],[11,"raw","","Returns the underlying raw reader-writer lock object.",6,[[["self"]],["r"]]],[11,"force_unlock_read_fair","","Forcibly unlocks a read lock using a fair unlock procotol.",6,[[["self"]]]],[11,"force_unlock_write_fair","","Forcibly unlocks a write lock using a fair unlock procotol.",6,[[["self"]]]],[11,"try_read_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_write_for","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"try_write_until","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"read_recursive","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read_recursive","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"try_read_recursive_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_recursive_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"upgradable_read","","Locks this `RwLock` with upgradable read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockupgradablereadguard"]]],[11,"try_upgradable_read","","Attempts to acquire this `RwLock` with upgradable read access.",6,[[["self"]],["option",["rwlockupgradablereadguard"]]]],[11,"try_upgradable_read_for","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"try_upgradable_read_until","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"default","","",6,[[],["rwlock"]]],[11,"from","","",6,[[["t"]],["rwlock"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",7,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",7,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",7,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",7,[[["self"]]]],[11,"deref","","",7,[[["self"]],["t"]]],[11,"drop","","",7,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",8,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",8,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockreadguard"]]],[11,"downgrade_to_upgradable","","Atomically downgrades a write lock into an upgradable read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockupgradablereadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",8,[[["self"]]]],[11,"deref","","",8,[[["self"]],["t"]]],[11,"deref_mut","","",8,[[["self"]],["t"]]],[11,"drop","","",8,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",9,[[["self"]],["rwlock"]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",9,[[["self"]],["rwlockwriteguard"]]],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",9,[[["self"]],["result",["rwlockwriteguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",9,[[["self"]]]],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,[[["self"]],["rwlockreadguard"]]],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"deref","","",9,[[["self"]],["t"]]],[11,"drop","","",9,[[["self"]]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",10,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,[[["self"]]]],[11,"deref","","",10,[[["self"]],["t"]]],[11,"drop","","",10,[[["self"]]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",11,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",11,[[["self"]],["mappedrwlockreadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",11,[[["self"]]]],[11,"deref","","",11,[[["self"]],["t"]]],[11,"deref_mut","","",11,[[["self"]],["t"]]],[11,"drop","","",11,[[["self"]]]],[8,"RawMutex","","Basic operations for a mutex.",N,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",12,N],[10,"lock","","Acquires this mutex, blocking the current thread until it is able to do so.",12,[[["self"]]]],[10,"try_lock","","Attempts to acquire this mutex without blocking.",12,[[["self"]],["bool"]]],[10,"unlock","","Unlocks this mutex.",12,[[["self"]]]],[8,"RawMutexFair","","Additional methods for mutexes which support fair unlocking.",N,N],[10,"unlock_fair","","Unlocks this mutex using a fair unlock protocol.",13,[[["self"]]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[8,"RawMutexTimed","","Additional methods for mutexes which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",14,N],[16,"Instant","","Instant type used for `try_lock_until`.",14,N],[10,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",14,N],[10,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",14,N],[8,"GetThreadId","","Helper trait which returns a non-zero thread ID.",N,N],[18,"INIT","","Initial value.",15,N],[10,"nonzero_thread_id","","Returns a non-zero thread ID which identifies the current thread of execution.",15,[[["self"]],["usize"]]],[8,"RawRwLock","","Basic operations for a reader-writer lock.",N,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",16,N],[10,"lock_shared","","Acquires a shared lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_shared","","Attempts to acquire a shared lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_shared","","Releases a shared lock.",16,[[["self"]]]],[10,"lock_exclusive","","Acquires an exclusive lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_exclusive","","Attempts to acquire an exclusive lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_exclusive","","Releases an exclusive lock.",16,[[["self"]]]],[8,"RawRwLockFair","","Additional methods for RwLocks which support fair unlocking.",N,N],[10,"unlock_shared_fair","","Releases a shared lock using a fair unlock protocol.",17,[[["self"]]]],[10,"unlock_exclusive_fair","","Releases an exclusive lock using a fair unlock protocol.",17,[[["self"]]]],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[8,"RawRwLockDowngrade","","Additional methods for RwLocks which support atomically downgrading an exclusive lock to a shared lock.",N,N],[10,"downgrade","","Atomically downgrades an exclusive lock into a shared lock without allowing any thread to take an exclusive lock in the meantime.",18,[[["self"]]]],[8,"RawRwLockTimed","","Additional methods for RwLocks which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",19,N],[16,"Instant","","Instant type used for `try_lock_until`.",19,N],[10,"try_lock_shared_for","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_shared_until","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_for","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_until","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[8,"RawRwLockRecursive","","Additional methods for RwLocks which support recursive read locks.",N,N],[10,"lock_shared_recursive","","Acquires a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]]]],[10,"try_lock_shared_recursive","","Attempts to acquire a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]],["bool"]]],[8,"RawRwLockRecursiveTimed","","Additional methods for RwLocks which support recursive read locks and timeouts.",N,N],[10,"try_lock_shared_recursive_for","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[10,"try_lock_shared_recursive_until","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[8,"RawRwLockUpgrade","","Additional methods for RwLocks which support atomically upgrading a shared lock to an exclusive lock.",N,N],[10,"lock_upgradable","","Acquires an upgradable lock, blocking the current thread until it is able to do so.",22,[[["self"]]]],[10,"try_lock_upgradable","","Attempts to acquire an upgradable lock without blocking.",22,[[["self"]],["bool"]]],[10,"unlock_upgradable","","Releases an upgradable lock.",22,[[["self"]]]],[10,"upgrade","","Upgrades an upgradable lock to an exclusive lock.",22,[[["self"]]]],[10,"try_upgrade","","Attempts to upgrade an upgradable lock to an exclusive lock without blocking.",22,[[["self"]],["bool"]]],[8,"RawRwLockUpgradeFair","","Additional methods for RwLocks which support upgradable locks and fair unlocking.",N,N],[10,"unlock_upgradable_fair","","Releases an upgradable lock using a fair unlock protocol.",23,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]],[8,"RawRwLockUpgradeDowngrade","","Additional methods for RwLocks which support upgradable locks and lock downgrading.",N,N],[10,"downgrade_upgradable","","Downgrades an upgradable lock to a shared lock.",24,[[["self"]]]],[10,"downgrade_to_upgradable","","Downgrades an exclusive lock to an upgradable lock.",24,[[["self"]]]],[8,"RawRwLockUpgradeTimed","","Additional methods for RwLocks which support upgradable locks and locking with timeouts.",N,N],[10,"try_lock_upgradable_for","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_lock_upgradable_until","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_upgrade_for","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[10,"try_upgrade_until","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[18,"INIT","","Initial value.",15,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutex"],[8,"RawMutexFair"],[8,"RawMutexTimed"],[8,"GetThreadId"],[8,"RawRwLock"],[8,"RawRwLockFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursive"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgrade"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockUpgradeTimed"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_boxed_logger","","Sets the global logger to a `Box<Log>`.",N,[[["box",["log"]]],["result",["setloggererror"]]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["lzw"]={"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",N,N],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",N,N],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",N,N],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",N,N],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",N,N],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",N,N],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",N,N],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",N,N],[13,"Some","","Consumed bytes, reconstructed bits",0,N],[13,"None","","Consumed bytes",0,N],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",N,[[["r"],["w"],["u8"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new LZW decoder. ",1,[[["r"],["u8"]],["decoder"]]],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new LZW decoder. ",2,[[["r"],["u8"]],["decoderearlychange"]]],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,N],[11,"new","","Creates a new LZW encoder.",3,[[["w"],["u8"]],["result",["encoder"]]]],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,N],[11,"drop","","",3,[[["self"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new bit reader",4,[[],["lsbreader"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new bit reader",5,[[],["msbreader"]]],[11,"read_bits","","",4,N],[11,"read_bits","","",5,N],[11,"new","","Creates a new bit reader",6,[[["w"]],["lsbwriter"]]],[11,"write","","",6,N],[11,"flush","","",6,[[["self"]],["result"]]],[11,"new","","Creates a new bit reader",7,[[["w"]],["msbwriter"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"write_bits","","",6,[[["self"],["u16"],["u8"]],["result"]]],[11,"write_bits","","",7,[[["self"],["u16"],["u8"]],["result"]]],[8,"BitReader","","A bit reader.",N,N],[10,"read_bits","","Returns the next `n` bits.",8,N],[8,"BitWriter","","A bit writer.",N,N],[10,"write_bits","","Writes the next `n` bits.",9,[[["self"],["u16"],["u8"]],["result"]]]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["memmap"]={"doc":"A cross-platform Rust API for memory mapped buffers.","items":[[3,"MmapOptions","memmap","A memory map builder, providing advanced options and flags for specifying memory map behavior.",N,N],[3,"Mmap","","An immutable memory mapped buffer.",N,N],[3,"MmapMut","","A mutable memory mapped buffer.",N,N],[11,"clone","","",0,[[["self"]],["mmapoptions"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["mmapoptions"]]],[11,"new","","Creates a new set of options for configuring and creating a memory map.",0,[[],["mmapoptions"]]],[11,"offset","","Configures the memory map to start at byte `offset` from the beginning of the file.",0,[[["self"],["usize"]],["self"]]],[11,"len","","Configures the created memory mapped buffer to be `len` bytes long.",0,[[["self"],["usize"]],["self"]]],[11,"stack","","Configures the anonymous memory map to be suitable for a process or thread stack.",0,[[["self"]],["self"]]],[11,"map","","Creates a read-only memory map backed by a file.",0,[[["self"],["file"]],["result",["mmap"]]]],[11,"map_exec","","Creates a readable and executable memory map backed by a file.",0,[[["self"],["file"]],["result",["mmap"]]]],[11,"map_mut","","Creates a writeable memory map backed by a file.",0,[[["self"],["file"]],["result",["mmapmut"]]]],[11,"map_copy","","Creates a copy-on-write memory map backed by a file.",0,[[["self"],["file"]],["result",["mmapmut"]]]],[11,"map_anon","","Creates an anonymous memory map.",0,[[["self"]],["result",["mmapmut"]]]],[11,"map","","Creates a read-only memory map backed by a file.",1,[[["file"]],["result",["mmap"]]]],[11,"make_mut","","Transition the memory map to be writable.",1,[[["self"]],["result",["mmapmut"]]]],[11,"deref","","",1,N],[11,"as_ref","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"map_mut","","Creates a writeable memory map backed by a file.",2,[[["file"]],["result",["mmapmut"]]]],[11,"map_anon","","Creates an anonymous memory map.",2,[[["usize"]],["result",["mmapmut"]]]],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,[[["self"]],["result"]]],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,[[["self"]],["result"]]],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,[[["self"],["usize"],["usize"]],["result"]]],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range to disk.",2,[[["self"],["usize"],["usize"]],["result"]]],[11,"make_read_only","","Returns an immutable version of this memory mapped buffer.",2,[[["self"]],["result",["mmap"]]]],[11,"make_exec","","Transition the memory map to be readable and executable.",2,[[["self"]],["result",["mmap"]]]],[11,"deref","","",2,N],[11,"deref_mut","","",2,N],[11,"as_ref","","",2,N],[11,"as_mut","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"MmapOptions"],[3,"Mmap"],[3,"MmapMut"]]};
searchIndex["memoffset"]={"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",N,N],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",N,N]],"paths":[]};
searchIndex["mikktspace"]={"doc":"","items":[[5,"generate_tangents","mikktspace","Generates tangents.",N,[[["fn"],["fn"],["fn"],["fn"],["fn"],["fnmut"]],["bool"]]]],"paths":[]};
searchIndex["minimp3"]={"doc":"","items":[[3,"Decoder","minimp3","A MP3 decoder which consumes a reader and produces [`Frame`]s.",N,N],[3,"Frame","","A MP3 frame, owning the decoded audio of that frame.",N,N],[12,"data","","The decoded audio held by this frame. Channels are interleaved.",0,N],[12,"sample_rate","","This frame's sample rate in hertz.",0,N],[12,"channels","","The number of channels in this frame.",0,N],[12,"layer","","MPEG layer used by this file.",0,N],[12,"bitrate","","Current bitrate as of this frame, in kb/s.",0,N],[4,"Error","","Errors encountered by the MP3 decoder.",N,N],[13,"Io","","An error caused by some IO operation required during decoding.",1,N],[13,"InsufficientData","","The decoder tried to parse a frame from its internal buffer, but there was not enough.",1,N],[13,"SkippedData","","The decoder encountered data which was not a frame (ie, ID3 data), and skipped it.",1,N],[13,"Eof","","The decoder has reached the end of the provided reader.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["stderror"]]]],[17,"MAX_SAMPLES_PER_FRAME","","Maximum number of samples present in a MP3 frame.",N,N],[11,"new","","Creates a new decoder, consuming the `reader`.",2,[[["r"]],["decoder"]]],[11,"next_frame","","Reads a new frame from the internal reader. Returns a [`Frame`] if one was found, or, otherwise, an `Err` explaining why not.",2,[[["self"]],["result",["frame","error"]]]]],"paths":[[3,"Frame"],[4,"Error"],[3,"Decoder"]]};
searchIndex["minimp3_sys"]={"doc":"","items":[[3,"mp3dec_frame_info_t","minimp3_sys","",N,N],[12,"frame_bytes","","",0,N],[12,"channels","","",0,N],[12,"hz","","",0,N],[12,"layer","","",0,N],[12,"bitrate_kbps","","",0,N],[3,"mp3dec_t","","",N,N],[12,"mdct_overlap","","",1,N],[12,"qmf_state","","",1,N],[12,"reserv","","",1,N],[12,"free_format_bytes","","",1,N],[12,"header","","",1,N],[12,"reserv_buf","","",1,N],[5,"mp3dec_init","","",N,N],[5,"mp3dec_decode_frame","","",N,N],[17,"MINIMP3_MAX_SAMPLES_PER_FRAME","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["mp3dec_frame_info_t"]]],[11,"clone","","",1,[[["self"]],["mp3dec_t"]]]],"paths":[[3,"mp3dec_frame_info_t"],[3,"mp3dec_t"]]};
searchIndex["mint"]={"doc":"Mint - Math interoperability standard types.","items":[[3,"RowMatrix2","mint","",N,N],[12,"x","","",0,N],[12,"y","","",0,N],[3,"RowMatrix2x3","","",N,N],[12,"x","","",1,N],[12,"y","","",1,N],[3,"RowMatrix3x2","","",N,N],[12,"x","","",2,N],[12,"y","","",2,N],[12,"z","","",2,N],[3,"RowMatrix3","","",N,N],[12,"x","","",3,N],[12,"y","","",3,N],[12,"z","","",3,N],[3,"RowMatrix3x4","","",N,N],[12,"x","","",4,N],[12,"y","","",4,N],[12,"z","","",4,N],[3,"RowMatrix4x3","","",N,N],[12,"x","","",5,N],[12,"y","","",5,N],[12,"z","","",5,N],[12,"w","","",5,N],[3,"RowMatrix4","","",N,N],[12,"x","","",6,N],[12,"y","","",6,N],[12,"z","","",6,N],[12,"w","","",6,N],[3,"ColumnMatrix2","","",N,N],[12,"x","","",7,N],[12,"y","","",7,N],[3,"ColumnMatrix2x3","","",N,N],[12,"x","","",8,N],[12,"y","","",8,N],[12,"z","","",8,N],[3,"ColumnMatrix3x2","","",N,N],[12,"x","","",9,N],[12,"y","","",9,N],[3,"ColumnMatrix3","","",N,N],[12,"x","","",10,N],[12,"y","","",10,N],[12,"z","","",10,N],[3,"ColumnMatrix3x4","","",N,N],[12,"x","","",11,N],[12,"y","","",11,N],[12,"z","","",11,N],[12,"w","","",11,N],[3,"ColumnMatrix4x3","","",N,N],[12,"x","","",12,N],[12,"y","","",12,N],[12,"z","","",12,N],[3,"ColumnMatrix4","","",N,N],[12,"x","","",13,N],[12,"y","","",13,N],[12,"z","","",13,N],[12,"w","","",13,N],[3,"Quaternion","","Standard quaternion represented by the scalar and vector parts. Useful for representing rotation in 3D space. Corresponds to a right-handed rotation matrix.",N,N],[12,"s","","Scalar part of a quaternion.",14,N],[12,"v","","Vector part of a quaternion.",14,N],[3,"EulerAngles","","Abstract set of Euler angles in 3D space. The basis of angles is defined by the generic parameter `B`.",N,N],[12,"a","","First angle of rotation in range [-pi, pi] (pitch).",15,N],[12,"b","","Second angle of rotation around in range [-pi/2, pi/2] (yaw).",15,N],[12,"c","","Third angle of rotation in range [-pi, pi] (roll).",15,N],[12,"marker","","Marker for the phantom basis.",15,N],[3,"Vector2","","",N,N],[12,"x","","",16,N],[12,"y","","",16,N],[3,"Vector3","","",N,N],[12,"x","","",17,N],[12,"y","","",17,N],[12,"z","","",17,N],[3,"Vector4","","",N,N],[12,"x","","",18,N],[12,"y","","",18,N],[12,"z","","",18,N],[12,"w","","",18,N],[3,"Point2","","",N,N],[12,"x","","",19,N],[12,"y","","",19,N],[3,"Point3","","",N,N],[12,"x","","",20,N],[12,"y","","",20,N],[12,"z","","",20,N],[4,"IntraXYZ","","Intrinsic rotation around X, then Y, then Z axis.",N,N],[4,"IntraZXZ","","Intrinsic rotation around Z, then X, then Z axis.",N,N],[4,"IntraZYX","","Intrinsic rotation around Z, then Y, then X axis.",N,N],[4,"ExtraXYZ","","Extrinsic rotation around X, then Y, then Z axis.",N,N],[4,"ExtraZXZ","","Extrinsic rotation around Z, then X, then Z axis.",N,N],[4,"ExtraZYX","","Extrinsic rotation around Z, then Y, then X axis.",N,N],[11,"clone","","",0,[[["self"]],["rowmatrix2"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["rowmatrix2"]],["bool"]]],[11,"ne","","",0,[[["self"],["rowmatrix2"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["rowmatrix2"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["rowmatrix2"]],["bool"]]],[11,"le","","",0,[[["self"],["rowmatrix2"]],["bool"]]],[11,"gt","","",0,[[["self"],["rowmatrix2"]],["bool"]]],[11,"ge","","",0,[[["self"],["rowmatrix2"]],["bool"]]],[11,"cmp","","",0,[[["self"],["rowmatrix2"]],["ordering"]]],[11,"from","","",0,N],[11,"into","","",0,N],[11,"as_ref","","",0,N],[11,"from","","",0,N],[11,"into","","",0,N],[11,"as_ref","","",0,N],[11,"from","","",0,[[["columnmatrix2"]],["self"]]],[11,"clone","","",1,[[["self"]],["rowmatrix2x3"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"eq","","",1,[[["self"],["rowmatrix2x3"]],["bool"]]],[11,"ne","","",1,[[["self"],["rowmatrix2x3"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["rowmatrix2x3"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["rowmatrix2x3"]],["bool"]]],[11,"le","","",1,[[["self"],["rowmatrix2x3"]],["bool"]]],[11,"gt","","",1,[[["self"],["rowmatrix2x3"]],["bool"]]],[11,"ge","","",1,[[["self"],["rowmatrix2x3"]],["bool"]]],[11,"cmp","","",1,[[["self"],["rowmatrix2x3"]],["ordering"]]],[11,"from","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"from","","",1,N],[11,"into","","",1,N],[11,"as_ref","","",1,N],[11,"from","","",1,[[["columnmatrix2x3"]],["self"]]],[11,"clone","","",2,[[["self"]],["rowmatrix3x2"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"eq","","",2,[[["self"],["rowmatrix3x2"]],["bool"]]],[11,"ne","","",2,[[["self"],["rowmatrix3x2"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["rowmatrix3x2"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["rowmatrix3x2"]],["bool"]]],[11,"le","","",2,[[["self"],["rowmatrix3x2"]],["bool"]]],[11,"gt","","",2,[[["self"],["rowmatrix3x2"]],["bool"]]],[11,"ge","","",2,[[["self"],["rowmatrix3x2"]],["bool"]]],[11,"cmp","","",2,[[["self"],["rowmatrix3x2"]],["ordering"]]],[11,"from","","",2,N],[11,"into","","",2,N],[11,"as_ref","","",2,N],[11,"from","","",2,N],[11,"into","","",2,N],[11,"as_ref","","",2,N],[11,"from","","",2,[[["columnmatrix3x2"]],["self"]]],[11,"clone","","",3,[[["self"]],["rowmatrix3"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"eq","","",3,[[["self"],["rowmatrix3"]],["bool"]]],[11,"ne","","",3,[[["self"],["rowmatrix3"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["rowmatrix3"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["rowmatrix3"]],["bool"]]],[11,"le","","",3,[[["self"],["rowmatrix3"]],["bool"]]],[11,"gt","","",3,[[["self"],["rowmatrix3"]],["bool"]]],[11,"ge","","",3,[[["self"],["rowmatrix3"]],["bool"]]],[11,"cmp","","",3,[[["self"],["rowmatrix3"]],["ordering"]]],[11,"from","","",3,N],[11,"into","","",3,N],[11,"as_ref","","",3,N],[11,"from","","",3,N],[11,"into","","",3,N],[11,"as_ref","","",3,N],[11,"from","","",3,[[["columnmatrix3"]],["self"]]],[11,"clone","","",4,[[["self"]],["rowmatrix3x4"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"eq","","",4,[[["self"],["rowmatrix3x4"]],["bool"]]],[11,"ne","","",4,[[["self"],["rowmatrix3x4"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["rowmatrix3x4"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["rowmatrix3x4"]],["bool"]]],[11,"le","","",4,[[["self"],["rowmatrix3x4"]],["bool"]]],[11,"gt","","",4,[[["self"],["rowmatrix3x4"]],["bool"]]],[11,"ge","","",4,[[["self"],["rowmatrix3x4"]],["bool"]]],[11,"cmp","","",4,[[["self"],["rowmatrix3x4"]],["ordering"]]],[11,"from","","",4,N],[11,"into","","",4,N],[11,"as_ref","","",4,N],[11,"from","","",4,N],[11,"into","","",4,N],[11,"as_ref","","",4,N],[11,"from","","",4,[[["columnmatrix3x4"]],["self"]]],[11,"clone","","",5,[[["self"]],["rowmatrix4x3"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"hash","","",5,N],[11,"eq","","",5,[[["self"],["rowmatrix4x3"]],["bool"]]],[11,"ne","","",5,[[["self"],["rowmatrix4x3"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["rowmatrix4x3"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["rowmatrix4x3"]],["bool"]]],[11,"le","","",5,[[["self"],["rowmatrix4x3"]],["bool"]]],[11,"gt","","",5,[[["self"],["rowmatrix4x3"]],["bool"]]],[11,"ge","","",5,[[["self"],["rowmatrix4x3"]],["bool"]]],[11,"cmp","","",5,[[["self"],["rowmatrix4x3"]],["ordering"]]],[11,"from","","",5,N],[11,"into","","",5,N],[11,"as_ref","","",5,N],[11,"from","","",5,N],[11,"into","","",5,N],[11,"as_ref","","",5,N],[11,"from","","",5,[[["columnmatrix4x3"]],["self"]]],[11,"clone","","",6,[[["self"]],["rowmatrix4"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"hash","","",6,N],[11,"eq","","",6,[[["self"],["rowmatrix4"]],["bool"]]],[11,"ne","","",6,[[["self"],["rowmatrix4"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["rowmatrix4"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["rowmatrix4"]],["bool"]]],[11,"le","","",6,[[["self"],["rowmatrix4"]],["bool"]]],[11,"gt","","",6,[[["self"],["rowmatrix4"]],["bool"]]],[11,"ge","","",6,[[["self"],["rowmatrix4"]],["bool"]]],[11,"cmp","","",6,[[["self"],["rowmatrix4"]],["ordering"]]],[11,"from","","",6,N],[11,"into","","",6,N],[11,"as_ref","","",6,N],[11,"from","","",6,N],[11,"into","","",6,N],[11,"as_ref","","",6,N],[11,"from","","",6,[[["columnmatrix4"]],["self"]]],[11,"clone","","",7,[[["self"]],["columnmatrix2"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"hash","","",7,N],[11,"eq","","",7,[[["self"],["columnmatrix2"]],["bool"]]],[11,"ne","","",7,[[["self"],["columnmatrix2"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["columnmatrix2"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["columnmatrix2"]],["bool"]]],[11,"le","","",7,[[["self"],["columnmatrix2"]],["bool"]]],[11,"gt","","",7,[[["self"],["columnmatrix2"]],["bool"]]],[11,"ge","","",7,[[["self"],["columnmatrix2"]],["bool"]]],[11,"cmp","","",7,[[["self"],["columnmatrix2"]],["ordering"]]],[11,"from","","",7,N],[11,"into","","",7,N],[11,"as_ref","","",7,N],[11,"from","","",7,N],[11,"into","","",7,N],[11,"as_ref","","",7,N],[11,"from","","",7,[[["rowmatrix2"]],["self"]]],[11,"clone","","",8,[[["self"]],["columnmatrix2x3"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"hash","","",8,N],[11,"eq","","",8,[[["self"],["columnmatrix2x3"]],["bool"]]],[11,"ne","","",8,[[["self"],["columnmatrix2x3"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["columnmatrix2x3"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["columnmatrix2x3"]],["bool"]]],[11,"le","","",8,[[["self"],["columnmatrix2x3"]],["bool"]]],[11,"gt","","",8,[[["self"],["columnmatrix2x3"]],["bool"]]],[11,"ge","","",8,[[["self"],["columnmatrix2x3"]],["bool"]]],[11,"cmp","","",8,[[["self"],["columnmatrix2x3"]],["ordering"]]],[11,"from","","",8,N],[11,"into","","",8,N],[11,"as_ref","","",8,N],[11,"from","","",8,N],[11,"into","","",8,N],[11,"as_ref","","",8,N],[11,"from","","",8,[[["rowmatrix2x3"]],["self"]]],[11,"clone","","",9,[[["self"]],["columnmatrix3x2"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"hash","","",9,N],[11,"eq","","",9,[[["self"],["columnmatrix3x2"]],["bool"]]],[11,"ne","","",9,[[["self"],["columnmatrix3x2"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["columnmatrix3x2"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["columnmatrix3x2"]],["bool"]]],[11,"le","","",9,[[["self"],["columnmatrix3x2"]],["bool"]]],[11,"gt","","",9,[[["self"],["columnmatrix3x2"]],["bool"]]],[11,"ge","","",9,[[["self"],["columnmatrix3x2"]],["bool"]]],[11,"cmp","","",9,[[["self"],["columnmatrix3x2"]],["ordering"]]],[11,"from","","",9,N],[11,"into","","",9,N],[11,"as_ref","","",9,N],[11,"from","","",9,N],[11,"into","","",9,N],[11,"as_ref","","",9,N],[11,"from","","",9,[[["rowmatrix3x2"]],["self"]]],[11,"clone","","",10,[[["self"]],["columnmatrix3"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"hash","","",10,N],[11,"eq","","",10,[[["self"],["columnmatrix3"]],["bool"]]],[11,"ne","","",10,[[["self"],["columnmatrix3"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["columnmatrix3"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["columnmatrix3"]],["bool"]]],[11,"le","","",10,[[["self"],["columnmatrix3"]],["bool"]]],[11,"gt","","",10,[[["self"],["columnmatrix3"]],["bool"]]],[11,"ge","","",10,[[["self"],["columnmatrix3"]],["bool"]]],[11,"cmp","","",10,[[["self"],["columnmatrix3"]],["ordering"]]],[11,"from","","",10,N],[11,"into","","",10,N],[11,"as_ref","","",10,N],[11,"from","","",10,N],[11,"into","","",10,N],[11,"as_ref","","",10,N],[11,"from","","",10,[[["rowmatrix3"]],["self"]]],[11,"clone","","",11,[[["self"]],["columnmatrix3x4"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["columnmatrix3x4"]],["bool"]]],[11,"ne","","",11,[[["self"],["columnmatrix3x4"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["columnmatrix3x4"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["columnmatrix3x4"]],["bool"]]],[11,"le","","",11,[[["self"],["columnmatrix3x4"]],["bool"]]],[11,"gt","","",11,[[["self"],["columnmatrix3x4"]],["bool"]]],[11,"ge","","",11,[[["self"],["columnmatrix3x4"]],["bool"]]],[11,"cmp","","",11,[[["self"],["columnmatrix3x4"]],["ordering"]]],[11,"from","","",11,N],[11,"into","","",11,N],[11,"as_ref","","",11,N],[11,"from","","",11,N],[11,"into","","",11,N],[11,"as_ref","","",11,N],[11,"from","","",11,[[["rowmatrix3x4"]],["self"]]],[11,"clone","","",12,[[["self"]],["columnmatrix4x3"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"hash","","",12,N],[11,"eq","","",12,[[["self"],["columnmatrix4x3"]],["bool"]]],[11,"ne","","",12,[[["self"],["columnmatrix4x3"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["columnmatrix4x3"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["columnmatrix4x3"]],["bool"]]],[11,"le","","",12,[[["self"],["columnmatrix4x3"]],["bool"]]],[11,"gt","","",12,[[["self"],["columnmatrix4x3"]],["bool"]]],[11,"ge","","",12,[[["self"],["columnmatrix4x3"]],["bool"]]],[11,"cmp","","",12,[[["self"],["columnmatrix4x3"]],["ordering"]]],[11,"from","","",12,N],[11,"into","","",12,N],[11,"as_ref","","",12,N],[11,"from","","",12,N],[11,"into","","",12,N],[11,"as_ref","","",12,N],[11,"from","","",12,[[["rowmatrix4x3"]],["self"]]],[11,"clone","","",13,[[["self"]],["columnmatrix4"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"hash","","",13,N],[11,"eq","","",13,[[["self"],["columnmatrix4"]],["bool"]]],[11,"ne","","",13,[[["self"],["columnmatrix4"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["columnmatrix4"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["columnmatrix4"]],["bool"]]],[11,"le","","",13,[[["self"],["columnmatrix4"]],["bool"]]],[11,"gt","","",13,[[["self"],["columnmatrix4"]],["bool"]]],[11,"ge","","",13,[[["self"],["columnmatrix4"]],["bool"]]],[11,"cmp","","",13,[[["self"],["columnmatrix4"]],["ordering"]]],[11,"from","","",13,N],[11,"into","","",13,N],[11,"as_ref","","",13,N],[11,"from","","",13,N],[11,"into","","",13,N],[11,"as_ref","","",13,N],[11,"from","","",13,[[["rowmatrix4"]],["self"]]],[11,"clone","","",14,[[["self"]],["quaternion"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"hash","","",14,N],[11,"eq","","",14,[[["self"],["quaternion"]],["bool"]]],[11,"ne","","",14,[[["self"],["quaternion"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["quaternion"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["quaternion"]],["bool"]]],[11,"le","","",14,[[["self"],["quaternion"]],["bool"]]],[11,"gt","","",14,[[["self"],["quaternion"]],["bool"]]],[11,"ge","","",14,[[["self"],["quaternion"]],["bool"]]],[11,"cmp","","",14,[[["self"],["quaternion"]],["ordering"]]],[11,"from","","",14,N],[11,"into","","",14,N],[11,"as_ref","","",14,N],[11,"clone","","",15,[[["self"]],["eulerangles"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"hash","","",15,N],[11,"eq","","",15,[[["self"],["eulerangles"]],["bool"]]],[11,"ne","","",15,[[["self"],["eulerangles"]],["bool"]]],[11,"partial_cmp","","",15,[[["self"],["eulerangles"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["eulerangles"]],["bool"]]],[11,"le","","",15,[[["self"],["eulerangles"]],["bool"]]],[11,"gt","","",15,[[["self"],["eulerangles"]],["bool"]]],[11,"ge","","",15,[[["self"],["eulerangles"]],["bool"]]],[11,"cmp","","",15,[[["self"],["eulerangles"]],["ordering"]]],[11,"clone","","",21,[[["self"]],["intraxyz"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"hash","","",21,N],[11,"eq","","",21,[[["self"],["intraxyz"]],["bool"]]],[11,"partial_cmp","","",21,[[["self"],["intraxyz"]],["option",["ordering"]]]],[11,"cmp","","",21,[[["self"],["intraxyz"]],["ordering"]]],[11,"clone","","",22,[[["self"]],["intrazxz"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"hash","","",22,N],[11,"eq","","",22,[[["self"],["intrazxz"]],["bool"]]],[11,"partial_cmp","","",22,[[["self"],["intrazxz"]],["option",["ordering"]]]],[11,"cmp","","",22,[[["self"],["intrazxz"]],["ordering"]]],[11,"clone","","",23,[[["self"]],["intrazyx"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"hash","","",23,N],[11,"eq","","",23,[[["self"],["intrazyx"]],["bool"]]],[11,"partial_cmp","","",23,[[["self"],["intrazyx"]],["option",["ordering"]]]],[11,"cmp","","",23,[[["self"],["intrazyx"]],["ordering"]]],[11,"clone","","",24,[[["self"]],["extraxyz"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"hash","","",24,N],[11,"eq","","",24,[[["self"],["extraxyz"]],["bool"]]],[11,"partial_cmp","","",24,[[["self"],["extraxyz"]],["option",["ordering"]]]],[11,"cmp","","",24,[[["self"],["extraxyz"]],["ordering"]]],[11,"clone","","",25,[[["self"]],["extrazxz"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"hash","","",25,N],[11,"eq","","",25,[[["self"],["extrazxz"]],["bool"]]],[11,"partial_cmp","","",25,[[["self"],["extrazxz"]],["option",["ordering"]]]],[11,"cmp","","",25,[[["self"],["extrazxz"]],["ordering"]]],[11,"clone","","",26,[[["self"]],["extrazyx"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"hash","","",26,N],[11,"eq","","",26,[[["self"],["extrazyx"]],["bool"]]],[11,"partial_cmp","","",26,[[["self"],["extrazyx"]],["option",["ordering"]]]],[11,"cmp","","",26,[[["self"],["extrazyx"]],["ordering"]]],[11,"from","","",15,N],[11,"into","","",15,N],[11,"from","","",15,[[["eulerangles",["intraxyz"]]],["self"]]],[11,"from","","",15,[[["eulerangles",["extrazyx"]]],["self"]]],[11,"from","","",15,[[["eulerangles",["intrazxz"]]],["self"]]],[11,"from","","",15,[[["eulerangles",["extrazxz"]]],["self"]]],[11,"from","","",15,[[["eulerangles",["intrazyx"]]],["self"]]],[11,"from","","",15,[[["eulerangles",["extraxyz"]]],["self"]]],[11,"clone","","",16,[[["self"]],["vector2"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"hash","","",16,N],[11,"eq","","",16,[[["self"],["vector2"]],["bool"]]],[11,"ne","","",16,[[["self"],["vector2"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["vector2"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["vector2"]],["bool"]]],[11,"le","","",16,[[["self"],["vector2"]],["bool"]]],[11,"gt","","",16,[[["self"],["vector2"]],["bool"]]],[11,"ge","","",16,[[["self"],["vector2"]],["bool"]]],[11,"cmp","","",16,[[["self"],["vector2"]],["ordering"]]],[11,"from","","",16,N],[11,"into","","",16,N],[11,"as_ref","","",16,N],[11,"from_slice","","",16,N],[11,"from","","",16,[[["point2"]],["self"]]],[11,"clone","","",17,[[["self"]],["vector3"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"hash","","",17,N],[11,"eq","","",17,[[["self"],["vector3"]],["bool"]]],[11,"ne","","",17,[[["self"],["vector3"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["vector3"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["vector3"]],["bool"]]],[11,"le","","",17,[[["self"],["vector3"]],["bool"]]],[11,"gt","","",17,[[["self"],["vector3"]],["bool"]]],[11,"ge","","",17,[[["self"],["vector3"]],["bool"]]],[11,"cmp","","",17,[[["self"],["vector3"]],["ordering"]]],[11,"from","","",17,N],[11,"into","","",17,N],[11,"as_ref","","",17,N],[11,"from_slice","","",17,N],[11,"from","","",17,[[["point3"]],["self"]]],[11,"clone","","",18,[[["self"]],["vector4"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"hash","","",18,N],[11,"eq","","",18,[[["self"],["vector4"]],["bool"]]],[11,"ne","","",18,[[["self"],["vector4"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["vector4"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["vector4"]],["bool"]]],[11,"le","","",18,[[["self"],["vector4"]],["bool"]]],[11,"gt","","",18,[[["self"],["vector4"]],["bool"]]],[11,"ge","","",18,[[["self"],["vector4"]],["bool"]]],[11,"cmp","","",18,[[["self"],["vector4"]],["ordering"]]],[11,"from","","",18,N],[11,"into","","",18,N],[11,"as_ref","","",18,N],[11,"from_slice","","",18,N],[11,"clone","","",19,[[["self"]],["point2"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"hash","","",19,N],[11,"eq","","",19,[[["self"],["point2"]],["bool"]]],[11,"ne","","",19,[[["self"],["point2"]],["bool"]]],[11,"partial_cmp","","",19,[[["self"],["point2"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["point2"]],["bool"]]],[11,"le","","",19,[[["self"],["point2"]],["bool"]]],[11,"gt","","",19,[[["self"],["point2"]],["bool"]]],[11,"ge","","",19,[[["self"],["point2"]],["bool"]]],[11,"cmp","","",19,[[["self"],["point2"]],["ordering"]]],[11,"from","","",19,N],[11,"into","","",19,N],[11,"as_ref","","",19,N],[11,"from_slice","","",19,N],[11,"from","","",19,[[["vector2"]],["self"]]],[11,"clone","","",20,[[["self"]],["point3"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"hash","","",20,N],[11,"eq","","",20,[[["self"],["point3"]],["bool"]]],[11,"ne","","",20,[[["self"],["point3"]],["bool"]]],[11,"partial_cmp","","",20,[[["self"],["point3"]],["option",["ordering"]]]],[11,"lt","","",20,[[["self"],["point3"]],["bool"]]],[11,"le","","",20,[[["self"],["point3"]],["bool"]]],[11,"gt","","",20,[[["self"],["point3"]],["bool"]]],[11,"ge","","",20,[[["self"],["point3"]],["bool"]]],[11,"cmp","","",20,[[["self"],["point3"]],["ordering"]]],[11,"from","","",20,N],[11,"into","","",20,N],[11,"as_ref","","",20,N],[11,"from_slice","","",20,N],[11,"from","","",20,[[["vector3"]],["self"]]]],"paths":[[3,"RowMatrix2"],[3,"RowMatrix2x3"],[3,"RowMatrix3x2"],[3,"RowMatrix3"],[3,"RowMatrix3x4"],[3,"RowMatrix4x3"],[3,"RowMatrix4"],[3,"ColumnMatrix2"],[3,"ColumnMatrix2x3"],[3,"ColumnMatrix3x2"],[3,"ColumnMatrix3"],[3,"ColumnMatrix3x4"],[3,"ColumnMatrix4x3"],[3,"ColumnMatrix4"],[3,"Quaternion"],[3,"EulerAngles"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Point2"],[3,"Point3"],[4,"IntraXYZ"],[4,"IntraZXZ"],[4,"IntraZYX"],[4,"ExtraXYZ"],[4,"ExtraZXZ"],[4,"ExtraZYX"]]};
searchIndex["minterpolate"]={"doc":"Data set interpolation for `mint` `Vector3` and `Quaternion`.","items":[[4,"InterpolationFunction","minterpolate","Supported interpolation functions",N,N],[13,"Linear","","Linear interpolation",0,N],[13,"SphericalLinear","","Spherical linear interpolation",0,N],[13,"QuasiSphericalLinear","","Quasi spherical linear interpolation",0,N],[13,"Step","","Step interpolation",0,N],[13,"CatmullRomSpline","","Catmull-Rom spline interpolation",0,N],[13,"CubicSpline","","Cubic Hermite spline interpolation",0,N],[13,"Function","","Generic function",0,N],[5,"catmull_rom_spline_interpolate","","Catmull-Rom spline interpolation",N,N],[5,"cubic_spline_interpolate","","Cubic Hermite spline interpolation",N,N],[5,"linear_interpolate","","Do linear interpolation.",N,N],[5,"quasi_spherical_linear_interpolate","","Do quasi spherical linear interpolation.",N,N],[5,"spherical_linear_interpolate","","Do spherical linear interpolation.",N,N],[5,"step_interpolate","","Do step interpolation.",N,N],[5,"get_input_index","","Calculate the keyframe index in the input collection",N,N],[5,"get_interpolation_factor","","Calculate the keyframe index in the input collection, and the interpolation factor between the current keyframe and the next keyframe.",N,N],[8,"InterpolationPrimitive","","Interpolation primitive, defines basic arithmetic needed for interpolation.",N,N],[10,"add","","",1,[[["self"],["self"]],["self"]]],[10,"sub","","",1,[[["self"],["self"]],["self"]]],[10,"mul","","",1,[[["self"],["f32"]],["self"]]],[10,"dot","","",1,[[["self"],["self"]],["f32"]]],[10,"magnitude2","","",1,[[["self"]],["f32"]]],[11,"magnitude","","",1,[[["self"]],["f32"]]],[11,"normalize","","",1,[[["self"]],["self"]]],[11,"clone","","",0,[[["self"]],["interpolationfunction"]]],[11,"interpolate","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["interpolationfunction"]],["bool"]]],[11,"magnitude","","",1,[[["self"]],["f32"]]],[11,"normalize","","",1,[[["self"]],["self"]]]],"paths":[[4,"InterpolationFunction"],[8,"InterpolationPrimitive"]]};
searchIndex["mopa"]={"doc":"MOPA: My Own Personal Any. A macro to implement all the `Any` methods on your own trait.","items":[[8,"Any","mopa","A type to emulate dynamic typing.",N,N],[14,"mopafy","","The macro for implementing all the `Any` methods on your own trait.",N,N]],"paths":[]};
searchIndex["nix"]={"doc":"Rust friendly bindings to the various *nix system functions.","items":[[4,"Error","nix","Nix Error Type",N,N],[13,"Sys","","",0,N],[13,"InvalidPath","","",0,N],[13,"InvalidUtf8","","The operation involved a conversion to Rust's native String type, which failed because the string did not contain all valid UTF-8.",0,N],[13,"UnsupportedOperation","","The operation is not supported by Nix, in this instance either use the libc bindings or consult the module documentation to see if there is a more appropriate interface available.",0,N],[0,"errno","","",N,N],[4,"Errno","nix::errno","",N,N],[13,"UnknownErrno","","",1,N],[13,"EPERM","","",1,N],[13,"ENOENT","","",1,N],[13,"ESRCH","","",1,N],[13,"EINTR","","",1,N],[13,"EIO","","",1,N],[13,"ENXIO","","",1,N],[13,"E2BIG","","",1,N],[13,"ENOEXEC","","",1,N],[13,"EBADF","","",1,N],[13,"ECHILD","","",1,N],[13,"EAGAIN","","",1,N],[13,"ENOMEM","","",1,N],[13,"EACCES","","",1,N],[13,"EFAULT","","",1,N],[13,"ENOTBLK","","",1,N],[13,"EBUSY","","",1,N],[13,"EEXIST","","",1,N],[13,"EXDEV","","",1,N],[13,"ENODEV","","",1,N],[13,"ENOTDIR","","",1,N],[13,"EISDIR","","",1,N],[13,"EINVAL","","",1,N],[13,"ENFILE","","",1,N],[13,"EMFILE","","",1,N],[13,"ENOTTY","","",1,N],[13,"ETXTBSY","","",1,N],[13,"EFBIG","","",1,N],[13,"ENOSPC","","",1,N],[13,"ESPIPE","","",1,N],[13,"EROFS","","",1,N],[13,"EMLINK","","",1,N],[13,"EPIPE","","",1,N],[13,"EDOM","","",1,N],[13,"ERANGE","","",1,N],[13,"EDEADLK","","",1,N],[13,"ENAMETOOLONG","","",1,N],[13,"ENOLCK","","",1,N],[13,"ENOSYS","","",1,N],[13,"ENOTEMPTY","","",1,N],[13,"ELOOP","","",1,N],[13,"ENOMSG","","",1,N],[13,"EIDRM","","",1,N],[13,"ECHRNG","","",1,N],[13,"EL2NSYNC","","",1,N],[13,"EL3HLT","","",1,N],[13,"EL3RST","","",1,N],[13,"ELNRNG","","",1,N],[13,"EUNATCH","","",1,N],[13,"ENOCSI","","",1,N],[13,"EL2HLT","","",1,N],[13,"EBADE","","",1,N],[13,"EBADR","","",1,N],[13,"EXFULL","","",1,N],[13,"ENOANO","","",1,N],[13,"EBADRQC","","",1,N],[13,"EBADSLT","","",1,N],[13,"EBFONT","","",1,N],[13,"ENOSTR","","",1,N],[13,"ENODATA","","",1,N],[13,"ETIME","","",1,N],[13,"ENOSR","","",1,N],[13,"ENONET","","",1,N],[13,"ENOPKG","","",1,N],[13,"EREMOTE","","",1,N],[13,"ENOLINK","","",1,N],[13,"EADV","","",1,N],[13,"ESRMNT","","",1,N],[13,"ECOMM","","",1,N],[13,"EPROTO","","",1,N],[13,"EMULTIHOP","","",1,N],[13,"EDOTDOT","","",1,N],[13,"EBADMSG","","",1,N],[13,"EOVERFLOW","","",1,N],[13,"ENOTUNIQ","","",1,N],[13,"EBADFD","","",1,N],[13,"EREMCHG","","",1,N],[13,"ELIBACC","","",1,N],[13,"ELIBBAD","","",1,N],[13,"ELIBSCN","","",1,N],[13,"ELIBMAX","","",1,N],[13,"ELIBEXEC","","",1,N],[13,"EILSEQ","","",1,N],[13,"ERESTART","","",1,N],[13,"ESTRPIPE","","",1,N],[13,"EUSERS","","",1,N],[13,"ENOTSOCK","","",1,N],[13,"EDESTADDRREQ","","",1,N],[13,"EMSGSIZE","","",1,N],[13,"EPROTOTYPE","","",1,N],[13,"ENOPROTOOPT","","",1,N],[13,"EPROTONOSUPPORT","","",1,N],[13,"ESOCKTNOSUPPORT","","",1,N],[13,"EOPNOTSUPP","","",1,N],[13,"EPFNOSUPPORT","","",1,N],[13,"EAFNOSUPPORT","","",1,N],[13,"EADDRINUSE","","",1,N],[13,"EADDRNOTAVAIL","","",1,N],[13,"ENETDOWN","","",1,N],[13,"ENETUNREACH","","",1,N],[13,"ENETRESET","","",1,N],[13,"ECONNABORTED","","",1,N],[13,"ECONNRESET","","",1,N],[13,"ENOBUFS","","",1,N],[13,"EISCONN","","",1,N],[13,"ENOTCONN","","",1,N],[13,"ESHUTDOWN","","",1,N],[13,"ETOOMANYREFS","","",1,N],[13,"ETIMEDOUT","","",1,N],[13,"ECONNREFUSED","","",1,N],[13,"EHOSTDOWN","","",1,N],[13,"EHOSTUNREACH","","",1,N],[13,"EALREADY","","",1,N],[13,"EINPROGRESS","","",1,N],[13,"ESTALE","","",1,N],[13,"EUCLEAN","","",1,N],[13,"ENOTNAM","","",1,N],[13,"ENAVAIL","","",1,N],[13,"EISNAM","","",1,N],[13,"EREMOTEIO","","",1,N],[13,"EDQUOT","","",1,N],[13,"ENOMEDIUM","","",1,N],[13,"EMEDIUMTYPE","","",1,N],[13,"ECANCELED","","",1,N],[13,"ENOKEY","","",1,N],[13,"EKEYEXPIRED","","",1,N],[13,"EKEYREVOKED","","",1,N],[13,"EKEYREJECTED","","",1,N],[13,"EOWNERDEAD","","",1,N],[13,"ENOTRECOVERABLE","","",1,N],[13,"ERFKILL","","",1,N],[13,"EHWPOISON","","",1,N],[5,"from_i32","","",N,[[["i32"]],["errno"]]],[5,"errno","","Returns the platform-specific value of errno",N,[[],["i32"]]],[11,"clone","","",1,[[["self"]],["errno"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["errno"]],["bool"]]],[17,"EWOULDBLOCK","","",N,N],[17,"EDEADLOCK","","",N,N],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",N,N],[10,"sentinel","","",2,[[],["self"]]],[11,"last","","",1,[[],["self"]]],[11,"desc","","",1,[[["self"]],["str"]]],[11,"from_i32","","",1,[[["i32"]],["errno"]]],[11,"clear","","",1,N],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",1,[[["s"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"features","nix","Feature tests for OS functionality",N,N],[5,"socket_atomic_cloexec","nix::features","Check if the OS supports atomic close-on-exec for sockets",N,[[],["bool"]]],[0,"fcntl","nix","",N,N],[3,"AtFlags","nix::fcntl","",N,N],[3,"OFlag","","Configuration options for opened files.",N,N],[3,"SealFlag","","Additional flags for file sealing, which allows for limiting operations on a file.",N,N],[3,"FdFlag","","Additional configuration flags for `fcntl`'s `F_SETFD`.",N,N],[3,"SpliceFFlags","","Additional flags to `splice` and friends.",N,N],[3,"FallocateFlags","","Mode argument flags for fallocate determining operation performed on a given range.",N,N],[4,"FcntlArg","","",N,N],[13,"F_DUPFD","","",3,N],[13,"F_DUPFD_CLOEXEC","","",3,N],[13,"F_GETFD","","",3,N],[13,"F_SETFD","","",3,N],[13,"F_GETFL","","",3,N],[13,"F_SETFL","","",3,N],[13,"F_SETLK","","",3,N],[13,"F_SETLKW","","",3,N],[13,"F_GETLK","","",3,N],[13,"F_OFD_SETLK","","",3,N],[13,"F_OFD_SETLKW","","",3,N],[13,"F_OFD_GETLK","","",3,N],[13,"F_ADD_SEALS","","",3,N],[13,"F_GET_SEALS","","",3,N],[13,"F_GETPIPE_SZ","","",3,N],[13,"F_SETPIPE_SZ","","",3,N],[4,"FlockArg","","",N,N],[13,"LockShared","","",4,N],[13,"LockExclusive","","",4,N],[13,"Unlock","","",4,N],[13,"LockSharedNonblock","","",4,N],[13,"LockExclusiveNonblock","","",4,N],[13,"UnlockNonblock","","",4,N],[5,"open","","",N,[[["p"],["oflag"],["mode"]],["result",["rawfd"]]]],[5,"openat","","",N,[[["rawfd"],["p"],["oflag"],["mode"]],["result",["rawfd"]]]],[5,"readlink","","",N,N],[5,"readlinkat","","",N,N],[5,"fcntl","","",N,[[["rawfd"],["fcntlarg"]],["result",["c_int"]]]],[5,"flock","","",N,[[["rawfd"],["flockarg"]],["result"]]],[5,"splice","","",N,[[["rawfd"],["option",["loff_t"]],["rawfd"],["option",["loff_t"]],["usize"],["splicefflags"]],["result",["usize"]]]],[5,"tee","","",N,[[["rawfd"],["rawfd"],["usize"],["splicefflags"]],["result",["usize"]]]],[5,"vmsplice","","",N,N],[5,"fallocate","","Manipulates file space.",N,[[["rawfd"],["fallocateflags"],["off_t"],["off_t"]],["result",["c_int"]]]],[11,"eq","","",5,[[["self"],["atflags"]],["bool"]]],[11,"ne","","",5,[[["self"],["atflags"]],["bool"]]],[11,"clone","","",5,[[["self"]],["atflags"]]],[11,"partial_cmp","","",5,[[["self"],["atflags"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["atflags"]],["bool"]]],[11,"le","","",5,[[["self"],["atflags"]],["bool"]]],[11,"gt","","",5,[[["self"],["atflags"]],["bool"]]],[11,"ge","","",5,[[["self"],["atflags"]],["bool"]]],[11,"cmp","","",5,[[["self"],["atflags"]],["ordering"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[18,"AT_SYMLINK_NOFOLLOW","","",5,N],[18,"AT_NO_AUTOMOUNT","","",5,N],[18,"AT_EMPTY_PATH","","",5,N],[11,"empty","","Returns an empty set of flags.",5,[[],["atflags"]]],[11,"all","","Returns the set containing all flags.",5,[[],["atflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",5,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",5,[[["c_int"]],["option",["atflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",5,[[["c_int"]],["atflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",5,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,[[["self"],["atflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,[[["self"],["atflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",5,[[["self"],["atflags"]]]],[11,"remove","","Removes the specified flags in-place.",5,[[["self"],["atflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",5,[[["self"],["atflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",5,[[["self"],["atflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",5,[[["self"],["atflags"]],["atflags"]]],[11,"bitor_assign","","Adds the set of flags.",5,[[["self"],["atflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,[[["self"],["atflags"]],["atflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",5,[[["self"],["atflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",5,[[["self"],["atflags"]],["atflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",5,[[["self"],["atflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",5,[[["self"],["atflags"]],["atflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",5,[[["self"],["atflags"]]]],[11,"not","","Returns the complement of this set of flags.",5,[[["self"]],["atflags"]]],[11,"extend","","",5,[[["self"],["t"]]]],[11,"from_iter","","",5,[[["t"]],["atflags"]]],[11,"eq","","",6,[[["self"],["oflag"]],["bool"]]],[11,"ne","","",6,[[["self"],["oflag"]],["bool"]]],[11,"clone","","",6,[[["self"]],["oflag"]]],[11,"partial_cmp","","",6,[[["self"],["oflag"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["oflag"]],["bool"]]],[11,"le","","",6,[[["self"],["oflag"]],["bool"]]],[11,"gt","","",6,[[["self"],["oflag"]],["bool"]]],[11,"ge","","",6,[[["self"],["oflag"]],["bool"]]],[11,"cmp","","",6,[[["self"],["oflag"]],["ordering"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[18,"O_ACCMODE","","Mask for the access mode of the file.",6,N],[18,"O_APPEND","","Open the file in append-only mode.",6,N],[18,"O_ASYNC","","Generate a signal when input or output becomes possible.",6,N],[18,"O_CLOEXEC","","Closes the file descriptor once an `execve` call is made.",6,N],[18,"O_CREAT","","Create the file if it does not exist.",6,N],[18,"O_DIRECT","","Try to minimize cache effects of the I/O for this file.",6,N],[18,"O_DIRECTORY","","If the specified path isn't a directory, fail.",6,N],[18,"O_DSYNC","","Implicitly follow each `write()` with an `fdatasync()`.",6,N],[18,"O_EXCL","","Error out if a file was not created.",6,N],[18,"O_FSYNC","","Same as `O_SYNC`.",6,N],[18,"O_LARGEFILE","","Allow files whose sizes can't be represented in an `off_t` to be opened.",6,N],[18,"O_NOATIME","","Do not update the file last access time during `read(2)`s.",6,N],[18,"O_NOCTTY","","Don't attach the device as the process' controlling terminal.",6,N],[18,"O_NDELAY","","Same as `O_NONBLOCK`.",6,N],[18,"O_NOFOLLOW","","`open()` will fail if the given path is a symbolic link.",6,N],[18,"O_NONBLOCK","","When possible, open the file in nonblocking mode.",6,N],[18,"O_PATH","","Obtain a file descriptor for low-level access.",6,N],[18,"O_RDONLY","","Only allow reading.",6,N],[18,"O_RDWR","","Allow both reading and writing.",6,N],[18,"O_RSYNC","","Similar to `O_DSYNC` but applies to `read`s instead.",6,N],[18,"O_SYNC","","Implicitly follow each `write()` with an `fsync()`.",6,N],[18,"O_TMPFILE","","Create an unnamed temporary file.",6,N],[18,"O_TRUNC","","Truncate an existing regular file to 0 length if it allows writing.",6,N],[18,"O_WRONLY","","Only allow writing.",6,N],[11,"empty","","Returns an empty set of flags.",6,[[],["oflag"]]],[11,"all","","Returns the set containing all flags.",6,[[],["oflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,[[["c_int"]],["option",["oflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,[[["c_int"]],["oflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,[[["self"],["oflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,[[["self"],["oflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["self"],["oflag"]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["self"],["oflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["self"],["oflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",6,[[["self"],["oflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["self"],["oflag"]],["oflag"]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["self"],["oflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,[[["self"],["oflag"]],["oflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["self"],["oflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["self"],["oflag"]],["oflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["self"],["oflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["self"],["oflag"]],["oflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["self"],["oflag"]]]],[11,"not","","Returns the complement of this set of flags.",6,[[["self"]],["oflag"]]],[11,"extend","","",6,[[["self"],["t"]]]],[11,"from_iter","","",6,[[["t"]],["oflag"]]],[11,"eq","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"ne","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"clone","","",7,[[["self"]],["sealflag"]]],[11,"partial_cmp","","",7,[[["self"],["sealflag"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"le","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"gt","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"ge","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"cmp","","",7,[[["self"],["sealflag"]],["ordering"]]],[11,"hash","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[18,"F_SEAL_SEAL","","Prevents further calls to `fcntl()` with `F_ADD_SEALS`.",7,N],[18,"F_SEAL_SHRINK","","The file cannot be reduced in size.",7,N],[18,"F_SEAL_GROW","","The size of the file cannot be increased.",7,N],[18,"F_SEAL_WRITE","","The file contents cannot be modified.",7,N],[11,"empty","","Returns an empty set of flags.",7,[[],["sealflag"]]],[11,"all","","Returns the set containing all flags.",7,[[],["sealflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",7,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,[[["c_int"]],["option",["sealflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,[[["c_int"]],["sealflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",7,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,[[["self"],["sealflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,[[["self"],["sealflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",7,[[["self"],["sealflag"]]]],[11,"remove","","Removes the specified flags in-place.",7,[[["self"],["sealflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",7,[[["self"],["sealflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",7,[[["self"],["sealflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",7,[[["self"],["sealflag"]],["sealflag"]]],[11,"bitor_assign","","Adds the set of flags.",7,[[["self"],["sealflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,[[["self"],["sealflag"]],["sealflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",7,[[["self"],["sealflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",7,[[["self"],["sealflag"]],["sealflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",7,[[["self"],["sealflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",7,[[["self"],["sealflag"]],["sealflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",7,[[["self"],["sealflag"]]]],[11,"not","","Returns the complement of this set of flags.",7,[[["self"]],["sealflag"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"from_iter","","",7,[[["t"]],["sealflag"]]],[11,"eq","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"ne","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"clone","","",8,[[["self"]],["fdflag"]]],[11,"partial_cmp","","",8,[[["self"],["fdflag"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"le","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"gt","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"ge","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"cmp","","",8,[[["self"],["fdflag"]],["ordering"]]],[11,"hash","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[18,"FD_CLOEXEC","","The file descriptor will automatically be closed during a successful `execve(2)`.",8,N],[11,"empty","","Returns an empty set of flags.",8,[[],["fdflag"]]],[11,"all","","Returns the set containing all flags.",8,[[],["fdflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",8,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,[[["c_int"]],["option",["fdflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,[[["c_int"]],["fdflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",8,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,[[["self"],["fdflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,[[["self"],["fdflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",8,[[["self"],["fdflag"]]]],[11,"remove","","Removes the specified flags in-place.",8,[[["self"],["fdflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",8,[[["self"],["fdflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",8,[[["self"],["fdflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",8,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitor_assign","","Adds the set of flags.",8,[[["self"],["fdflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",8,[[["self"],["fdflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",8,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",8,[[["self"],["fdflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",8,[[["self"],["fdflag"]],["fdflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",8,[[["self"],["fdflag"]]]],[11,"not","","Returns the complement of this set of flags.",8,[[["self"]],["fdflag"]]],[11,"extend","","",8,[[["self"],["t"]]]],[11,"from_iter","","",8,[[["t"]],["fdflag"]]],[11,"clone","","",4,[[["self"]],["flockarg"]]],[11,"eq","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"ne","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"clone","","",9,[[["self"]],["splicefflags"]]],[11,"partial_cmp","","",9,[[["self"],["splicefflags"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"le","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"gt","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"ge","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"cmp","","",9,[[["self"],["splicefflags"]],["ordering"]]],[11,"hash","","",9,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[18,"SPLICE_F_MOVE","","Request that pages be moved instead of copied.",9,N],[18,"SPLICE_F_NONBLOCK","","Do not block on I/O.",9,N],[18,"SPLICE_F_MORE","","Hint that more data will be coming in a subsequent splice.",9,N],[18,"SPLICE_F_GIFT","","Gift the user pages to the kernel.",9,N],[11,"empty","","Returns an empty set of flags.",9,[[],["splicefflags"]]],[11,"all","","Returns the set containing all flags.",9,[[],["splicefflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",9,[[["self"]],["c_uint"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,[[["c_uint"]],["option",["splicefflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,[[["c_uint"]],["splicefflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",9,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,[[["self"],["splicefflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,[[["self"],["splicefflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",9,[[["self"],["splicefflags"]]]],[11,"remove","","Removes the specified flags in-place.",9,[[["self"],["splicefflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",9,[[["self"],["splicefflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",9,[[["self"],["splicefflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",9,[[["self"],["splicefflags"]],["splicefflags"]]],[11,"bitor_assign","","Adds the set of flags.",9,[[["self"],["splicefflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,[[["self"],["splicefflags"]],["splicefflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",9,[[["self"],["splicefflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",9,[[["self"],["splicefflags"]],["splicefflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",9,[[["self"],["splicefflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",9,[[["self"],["splicefflags"]],["splicefflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",9,[[["self"],["splicefflags"]]]],[11,"not","","Returns the complement of this set of flags.",9,[[["self"]],["splicefflags"]]],[11,"extend","","",9,[[["self"],["t"]]]],[11,"from_iter","","",9,[[["t"]],["splicefflags"]]],[11,"eq","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"ne","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"clone","","",10,[[["self"]],["fallocateflags"]]],[11,"partial_cmp","","",10,[[["self"],["fallocateflags"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"le","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"gt","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"ge","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"cmp","","",10,[[["self"],["fallocateflags"]],["ordering"]]],[11,"hash","","",10,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[18,"FALLOC_FL_KEEP_SIZE","","File size is not changed.",10,N],[18,"FALLOC_FL_PUNCH_HOLE","","Deallocates space by creating a hole.",10,N],[18,"FALLOC_FL_COLLAPSE_RANGE","","Removes byte range from a file without leaving a hole.",10,N],[18,"FALLOC_FL_ZERO_RANGE","","Zeroes space in specified byte range.",10,N],[18,"FALLOC_FL_INSERT_RANGE","","Increases file space by inserting a hole within the file size.",10,N],[18,"FALLOC_FL_UNSHARE_RANGE","","Shared file data extants are made private to the file.",10,N],[11,"empty","","Returns an empty set of flags.",10,[[],["fallocateflags"]]],[11,"all","","Returns the set containing all flags.",10,[[],["fallocateflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",10,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,[[["c_int"]],["option",["fallocateflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,[[["c_int"]],["fallocateflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",10,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",10,[[["self"],["fallocateflags"]]]],[11,"remove","","Removes the specified flags in-place.",10,[[["self"],["fallocateflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",10,[[["self"],["fallocateflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",10,[[["self"],["fallocateflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",10,[[["self"],["fallocateflags"]],["fallocateflags"]]],[11,"bitor_assign","","Adds the set of flags.",10,[[["self"],["fallocateflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,[[["self"],["fallocateflags"]],["fallocateflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",10,[[["self"],["fallocateflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",10,[[["self"],["fallocateflags"]],["fallocateflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",10,[[["self"],["fallocateflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",10,[[["self"],["fallocateflags"]],["fallocateflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",10,[[["self"],["fallocateflags"]]]],[11,"not","","Returns the complement of this set of flags.",10,[[["self"]],["fallocateflags"]]],[11,"extend","","",10,[[["self"],["t"]]]],[11,"from_iter","","",10,[[["t"]],["fallocateflags"]]],[0,"ifaddrs","nix","Query network interface addresses",N,N],[3,"InterfaceAddress","nix::ifaddrs","Describes a single address for an interface as returned by `getifaddrs`.",N,N],[12,"interface_name","","Name of the network interface",11,N],[12,"flags","","Flags as from `SIOCGIFFLAGS` ioctl",11,N],[12,"address","","Network address of this interface",11,N],[12,"netmask","","Netmask of this interface",11,N],[12,"broadcast","","Broadcast address of this interface, if applicable",11,N],[12,"destination","","Point-to-point destination address",11,N],[3,"InterfaceAddressIterator","","Holds the results of `getifaddrs`.",N,N],[5,"getifaddrs","","Get interface addresses using libc's `getifaddrs`",N,[[],["result",["interfaceaddressiterator"]]]],[11,"clone","","",11,[[["self"]],["interfaceaddress"]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["interfaceaddress"]],["bool"]]],[11,"ne","","",11,[[["self"],["interfaceaddress"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"hash","","",12,N],[11,"eq","","",12,[[["self"],["interfaceaddressiterator"]],["bool"]]],[11,"ne","","",12,[[["self"],["interfaceaddressiterator"]],["bool"]]],[11,"drop","","",12,[[["self"]]]],[11,"next","","",12,[[["self"]],["option"]]],[0,"mount","nix","",N,N],[3,"MsFlags","nix::mount","",N,N],[3,"MntFlags","","",N,N],[5,"mount","","",N,[[["option"],["p2"],["option"],["msflags"],["option"]],["result"]]],[5,"umount","","",N,[[["p"]],["result"]]],[5,"umount2","","",N,[[["p"],["mntflags"]],["result"]]],[11,"eq","","",13,[[["self"],["msflags"]],["bool"]]],[11,"ne","","",13,[[["self"],["msflags"]],["bool"]]],[11,"clone","","",13,[[["self"]],["msflags"]]],[11,"partial_cmp","","",13,[[["self"],["msflags"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["msflags"]],["bool"]]],[11,"le","","",13,[[["self"],["msflags"]],["bool"]]],[11,"gt","","",13,[[["self"],["msflags"]],["bool"]]],[11,"ge","","",13,[[["self"],["msflags"]],["bool"]]],[11,"cmp","","",13,[[["self"],["msflags"]],["ordering"]]],[11,"hash","","",13,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[18,"MS_RDONLY","","Mount read-only",13,N],[18,"MS_NOSUID","","Ignore suid and sgid bits",13,N],[18,"MS_NODEV","","Disallow access to device special files",13,N],[18,"MS_NOEXEC","","Disallow program execution",13,N],[18,"MS_SYNCHRONOUS","","Writes are synced at once",13,N],[18,"MS_REMOUNT","","Alter flags of a mounted FS",13,N],[18,"MS_MANDLOCK","","Allow mandatory locks on a FS",13,N],[18,"MS_DIRSYNC","","Directory modifications are synchronous",13,N],[18,"MS_NOATIME","","Do not update access times",13,N],[18,"MS_NODIRATIME","","Do not update directory access times",13,N],[18,"MS_BIND","","Linux 2.4.0 - Bind directory at different place",13,N],[18,"MS_MOVE","","",13,N],[18,"MS_REC","","",13,N],[18,"MS_SILENT","","",13,N],[18,"MS_POSIXACL","","",13,N],[18,"MS_UNBINDABLE","","",13,N],[18,"MS_PRIVATE","","",13,N],[18,"MS_SLAVE","","",13,N],[18,"MS_SHARED","","",13,N],[18,"MS_RELATIME","","",13,N],[18,"MS_KERNMOUNT","","",13,N],[18,"MS_I_VERSION","","",13,N],[18,"MS_STRICTATIME","","",13,N],[18,"MS_ACTIVE","","",13,N],[18,"MS_NOUSER","","",13,N],[18,"MS_RMT_MASK","","",13,N],[18,"MS_MGC_VAL","","",13,N],[18,"MS_MGC_MSK","","",13,N],[11,"empty","","Returns an empty set of flags.",13,[[],["msflags"]]],[11,"all","","Returns the set containing all flags.",13,[[],["msflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",13,[[["self"]],["c_ulong"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,[[["c_ulong"]],["option",["msflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,[[["c_ulong"]],["msflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",13,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,[[["self"],["msflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,[[["self"],["msflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",13,[[["self"],["msflags"]]]],[11,"remove","","Removes the specified flags in-place.",13,[[["self"],["msflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",13,[[["self"],["msflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",13,[[["self"],["msflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",13,[[["self"],["msflags"]],["msflags"]]],[11,"bitor_assign","","Adds the set of flags.",13,[[["self"],["msflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,[[["self"],["msflags"]],["msflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",13,[[["self"],["msflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",13,[[["self"],["msflags"]],["msflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",13,[[["self"],["msflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",13,[[["self"],["msflags"]],["msflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",13,[[["self"],["msflags"]]]],[11,"not","","Returns the complement of this set of flags.",13,[[["self"]],["msflags"]]],[11,"extend","","",13,[[["self"],["t"]]]],[11,"from_iter","","",13,[[["t"]],["msflags"]]],[11,"eq","","",14,[[["self"],["mntflags"]],["bool"]]],[11,"ne","","",14,[[["self"],["mntflags"]],["bool"]]],[11,"clone","","",14,[[["self"]],["mntflags"]]],[11,"partial_cmp","","",14,[[["self"],["mntflags"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["mntflags"]],["bool"]]],[11,"le","","",14,[[["self"],["mntflags"]],["bool"]]],[11,"gt","","",14,[[["self"],["mntflags"]],["bool"]]],[11,"ge","","",14,[[["self"],["mntflags"]],["bool"]]],[11,"cmp","","",14,[[["self"],["mntflags"]],["ordering"]]],[11,"hash","","",14,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[18,"MNT_FORCE","","",14,N],[18,"MNT_DETACH","","",14,N],[18,"MNT_EXPIRE","","",14,N],[11,"empty","","Returns an empty set of flags.",14,[[],["mntflags"]]],[11,"all","","Returns the set containing all flags.",14,[[],["mntflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",14,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",14,[[["c_int"]],["option",["mntflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",14,[[["c_int"]],["mntflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",14,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,[[["self"],["mntflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,[[["self"],["mntflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",14,[[["self"],["mntflags"]]]],[11,"remove","","Removes the specified flags in-place.",14,[[["self"],["mntflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",14,[[["self"],["mntflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",14,[[["self"],["mntflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",14,[[["self"],["mntflags"]],["mntflags"]]],[11,"bitor_assign","","Adds the set of flags.",14,[[["self"],["mntflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,[[["self"],["mntflags"]],["mntflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",14,[[["self"],["mntflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",14,[[["self"],["mntflags"]],["mntflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",14,[[["self"],["mntflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",14,[[["self"],["mntflags"]],["mntflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",14,[[["self"],["mntflags"]]]],[11,"not","","Returns the complement of this set of flags.",14,[[["self"]],["mntflags"]]],[11,"extend","","",14,[[["self"],["t"]]]],[11,"from_iter","","",14,[[["t"]],["mntflags"]]],[0,"mqueue","nix","Posix Message Queue functions",N,N],[3,"MQ_OFlag","nix::mqueue","",N,N],[3,"FdFlag","","",N,N],[3,"MqAttr","","",N,N],[5,"mq_open","","Open a message queue",N,[[["cstring"],["mq_oflag"],["mode"],["option",["mqattr"]]],["result",["mqd_t"]]]],[5,"mq_unlink","","Remove a message queue",N,[[["cstring"]],["result"]]],[5,"mq_close","","Close a message queue",N,[[["mqd_t"]],["result"]]],[5,"mq_receive","","Receive a message from a message queue",N,N],[5,"mq_send","","Send a message to a message queue",N,N],[5,"mq_getattr","","Get message queue attributes",N,[[["mqd_t"]],["result",["mqattr"]]]],[5,"mq_setattr","","Set the attributes of the message queue. Only `O_NONBLOCK` can be set, everything else will be ignored Returns the old attributes It is recommend to use the `mq_set_nonblock()` and `mq_remove_nonblock()` convenience functions as they are easier to use",N,[[["mqd_t"],["mqattr"]],["result",["mqattr"]]]],[5,"mq_set_nonblock","","Convenience function. Sets the `O_NONBLOCK` attribute for a given message queue descriptor Returns the old attributes",N,[[["mqd_t"]],["result",["mqattr"]]]],[5,"mq_remove_nonblock","","Convenience function. Removes `O_NONBLOCK` attribute for a given message queue descriptor Returns the old attributes",N,[[["mqd_t"]],["result",["mqattr"]]]],[11,"eq","","",15,[[["self"],["mq_oflag"]],["bool"]]],[11,"ne","","",15,[[["self"],["mq_oflag"]],["bool"]]],[11,"clone","","",15,[[["self"]],["mq_oflag"]]],[11,"partial_cmp","","",15,[[["self"],["mq_oflag"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["mq_oflag"]],["bool"]]],[11,"le","","",15,[[["self"],["mq_oflag"]],["bool"]]],[11,"gt","","",15,[[["self"],["mq_oflag"]],["bool"]]],[11,"ge","","",15,[[["self"],["mq_oflag"]],["bool"]]],[11,"cmp","","",15,[[["self"],["mq_oflag"]],["ordering"]]],[11,"hash","","",15,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[18,"O_RDONLY","","",15,N],[18,"O_WRONLY","","",15,N],[18,"O_RDWR","","",15,N],[18,"O_CREAT","","",15,N],[18,"O_EXCL","","",15,N],[18,"O_NONBLOCK","","",15,N],[18,"O_CLOEXEC","","",15,N],[11,"empty","","Returns an empty set of flags.",15,[[],["mq_oflag"]]],[11,"all","","Returns the set containing all flags.",15,[[],["mq_oflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",15,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",15,[[["c_int"]],["option",["mq_oflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",15,[[["c_int"]],["mq_oflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",15,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",15,[[["self"],["mq_oflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",15,[[["self"],["mq_oflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",15,[[["self"],["mq_oflag"]]]],[11,"remove","","Removes the specified flags in-place.",15,[[["self"],["mq_oflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",15,[[["self"],["mq_oflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",15,[[["self"],["mq_oflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",15,[[["self"],["mq_oflag"]],["mq_oflag"]]],[11,"bitor_assign","","Adds the set of flags.",15,[[["self"],["mq_oflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",15,[[["self"],["mq_oflag"]],["mq_oflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",15,[[["self"],["mq_oflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",15,[[["self"],["mq_oflag"]],["mq_oflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",15,[[["self"],["mq_oflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",15,[[["self"],["mq_oflag"]],["mq_oflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",15,[[["self"],["mq_oflag"]]]],[11,"not","","Returns the complement of this set of flags.",15,[[["self"]],["mq_oflag"]]],[11,"extend","","",15,[[["self"],["t"]]]],[11,"from_iter","","",15,[[["t"]],["mq_oflag"]]],[11,"eq","","",16,[[["self"],["fdflag"]],["bool"]]],[11,"ne","","",16,[[["self"],["fdflag"]],["bool"]]],[11,"clone","","",16,[[["self"]],["fdflag"]]],[11,"partial_cmp","","",16,[[["self"],["fdflag"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["fdflag"]],["bool"]]],[11,"le","","",16,[[["self"],["fdflag"]],["bool"]]],[11,"gt","","",16,[[["self"],["fdflag"]],["bool"]]],[11,"ge","","",16,[[["self"],["fdflag"]],["bool"]]],[11,"cmp","","",16,[[["self"],["fdflag"]],["ordering"]]],[11,"hash","","",16,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[18,"FD_CLOEXEC","","",16,N],[11,"empty","","Returns an empty set of flags.",16,[[],["fdflag"]]],[11,"all","","Returns the set containing all flags.",16,[[],["fdflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",16,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",16,[[["c_int"]],["option",["fdflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",16,[[["c_int"]],["fdflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",16,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,[[["self"],["fdflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,[[["self"],["fdflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",16,[[["self"],["fdflag"]]]],[11,"remove","","Removes the specified flags in-place.",16,[[["self"],["fdflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",16,[[["self"],["fdflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",16,[[["self"],["fdflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",16,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitor_assign","","Adds the set of flags.",16,[[["self"],["fdflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",16,[[["self"],["fdflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",16,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",16,[[["self"],["fdflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",16,[[["self"],["fdflag"]],["fdflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",16,[[["self"],["fdflag"]]]],[11,"not","","Returns the complement of this set of flags.",16,[[["self"]],["fdflag"]]],[11,"extend","","",16,[[["self"],["t"]]]],[11,"from_iter","","",16,[[["t"]],["fdflag"]]],[11,"clone","","",17,[[["self"]],["mqattr"]]],[11,"eq","","",17,[[["self"],["mqattr"]],["bool"]]],[11,"new","","",17,[[["c_long"],["c_long"],["c_long"],["c_long"]],["mqattr"]]],[11,"flags","","",17,[[["self"]],["c_long"]]],[0,"net","nix","Functionality involving network interfaces",N,N],[0,"if_","nix::net","Network interface name resolution.",N,N],[3,"InterfaceFlags","nix::net::if_","Standard interface flags, used by `getifaddrs`",N,N],[5,"if_nametoindex","","Resolve an interface into a interface number.",N,[[["p"]],["result",["c_uint"]]]],[11,"eq","","",18,[[["self"],["interfaceflags"]],["bool"]]],[11,"ne","","",18,[[["self"],["interfaceflags"]],["bool"]]],[11,"clone","","",18,[[["self"]],["interfaceflags"]]],[11,"partial_cmp","","",18,[[["self"],["interfaceflags"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["interfaceflags"]],["bool"]]],[11,"le","","",18,[[["self"],["interfaceflags"]],["bool"]]],[11,"gt","","",18,[[["self"],["interfaceflags"]],["bool"]]],[11,"ge","","",18,[[["self"],["interfaceflags"]],["bool"]]],[11,"cmp","","",18,[[["self"],["interfaceflags"]],["ordering"]]],[11,"hash","","",18,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[18,"IFF_UP","","Interface is running. (see `netdevice(7)`)",18,N],[18,"IFF_BROADCAST","","Valid broadcast address set. (see `netdevice(7)`)",18,N],[18,"IFF_DEBUG","","Internal debugging flag. (see `netdevice(7)`)",18,N],[18,"IFF_LOOPBACK","","Interface is a loopback interface. (see `netdevice(7)`)",18,N],[18,"IFF_POINTOPOINT","","Interface is a point-to-point link. (see `netdevice(7)`)",18,N],[18,"IFF_NOTRAILERS","","Avoid use of trailers. (see `netdevice(7)`)",18,N],[18,"IFF_RUNNING","","Resources allocated. (see `netdevice(7)`)",18,N],[18,"IFF_NOARP","","No arp protocol, L2 destination address not set. (see `netdevice(7)`)",18,N],[18,"IFF_PROMISC","","Interface is in promiscuous mode. (see `netdevice(7)`)",18,N],[18,"IFF_ALLMULTI","","Receive all multicast packets. (see `netdevice(7)`)",18,N],[18,"IFF_MASTER","","Master of a load balancing bundle. (see `netdevice(7)`)",18,N],[18,"IFF_SLAVE","","Slave of a load balancing bundle. (see `netdevice(7)`)",18,N],[18,"IFF_MULTICAST","","Supports multicast. (see `netdevice(7)`)",18,N],[18,"IFF_PORTSEL","","Is able to select media type via ifmap. (see `netdevice(7)`)",18,N],[18,"IFF_AUTOMEDIA","","Auto media selection active. (see `netdevice(7)`)",18,N],[18,"IFF_DYNAMIC","","The addresses are lost when the interface goes down. (see `netdevice(7)`)",18,N],[18,"IFF_LOWER_UP","","Driver signals L1 up. Volatile.",18,N],[18,"IFF_DORMANT","","Driver signals dormant. Volatile.",18,N],[18,"IFF_ECHO","","Echo sent packets. Volatile.",18,N],[18,"IFF_NO_PI","","Do not provide packet information",18,N],[18,"IFF_TUN","","TUN device (no Ethernet headers) ",18,N],[18,"IFF_TAP","","TAP device",18,N],[11,"empty","","Returns an empty set of flags.",18,[[],["interfaceflags"]]],[11,"all","","Returns the set containing all flags.",18,[[],["interfaceflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",18,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,[[["c_int"]],["option",["interfaceflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,[[["c_int"]],["interfaceflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",18,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,[[["self"],["interfaceflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,[[["self"],["interfaceflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",18,[[["self"],["interfaceflags"]]]],[11,"remove","","Removes the specified flags in-place.",18,[[["self"],["interfaceflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",18,[[["self"],["interfaceflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",18,[[["self"],["interfaceflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",18,[[["self"],["interfaceflags"]],["interfaceflags"]]],[11,"bitor_assign","","Adds the set of flags.",18,[[["self"],["interfaceflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,[[["self"],["interfaceflags"]],["interfaceflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",18,[[["self"],["interfaceflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",18,[[["self"],["interfaceflags"]],["interfaceflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",18,[[["self"],["interfaceflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",18,[[["self"],["interfaceflags"]],["interfaceflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",18,[[["self"],["interfaceflags"]]]],[11,"not","","Returns the complement of this set of flags.",18,[[["self"]],["interfaceflags"]]],[11,"extend","","",18,[[["self"],["t"]]]],[11,"from_iter","","",18,[[["t"]],["interfaceflags"]]],[0,"poll","nix","Wait for events to trigger on specific file descriptors",N,N],[3,"PollFd","nix::poll","This is a wrapper around `libc::pollfd`.",N,N],[3,"EventFlags","","These flags define the different events that can be monitored by `poll` and `ppoll`",N,N],[5,"poll","","`poll` waits for one of a set of file descriptors to become ready to perform I/O. (`poll(2)`)",N,N],[5,"ppoll","","`ppoll()` allows an application to safely wait until either a file descriptor becomes ready or until a signal is caught. (`poll(2)`)",N,N],[11,"clone","","",19,[[["self"]],["pollfd"]]],[11,"new","","Creates a new `PollFd` specifying the events of interest for a given file descriptor.",19,[[["rawfd"],["eventflags"]],["pollfd"]]],[11,"revents","","Returns the events that occured in the last call to `poll` or `ppoll`.",19,[[["self"]],["option",["eventflags"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"clone","","",20,[[["self"]],["eventflags"]]],[11,"partial_cmp","","",20,[[["self"],["eventflags"]],["option",["ordering"]]]],[11,"lt","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"le","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"gt","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"ge","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"cmp","","",20,[[["self"],["eventflags"]],["ordering"]]],[11,"hash","","",20,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[18,"POLLIN","","There is data to read.",20,N],[18,"POLLPRI","","There is some exceptional condition on the file descriptor.",20,N],[18,"POLLOUT","","Writing is now possible, though a write larger that the available space in a socket or pipe will still block (unless `O_NONBLOCK` is set).",20,N],[18,"POLLRDNORM","","Equivalent to `POLLIN`",20,N],[18,"POLLWRNORM","","Equivalent to `POLLOUT`",20,N],[18,"POLLRDBAND","","Priority band data can be read (generally unused on Linux).",20,N],[18,"POLLWRBAND","","Priority data may be written.",20,N],[18,"POLLERR","","Error condition (only returned in `PollFd::revents`; ignored in `PollFd::new`). This bit is also set for a file descriptor referring to the write end of a pipe when the read end has been closed.",20,N],[18,"POLLHUP","","Hang up (only returned in `PollFd::revents`; ignored in `PollFd::new`). Note that when reading from a channel such as a pipe or a stream socket, this event merely indicates that the peer closed its end of the channel.  Subsequent reads from the channel will return 0 (end of file) only after all outstanding data in the channel has been consumed.",20,N],[18,"POLLNVAL","","Invalid request: `fd` not open (only returned in `PollFd::revents`; ignored in `PollFd::new`).",20,N],[11,"empty","","Returns an empty set of flags.",20,[[],["eventflags"]]],[11,"all","","Returns the set containing all flags.",20,[[],["eventflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",20,[[["self"]],["c_short"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,[[["c_short"]],["option",["eventflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,[[["c_short"]],["eventflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",20,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,[[["self"],["eventflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,[[["self"],["eventflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",20,[[["self"],["eventflags"]]]],[11,"remove","","Removes the specified flags in-place.",20,[[["self"],["eventflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",20,[[["self"],["eventflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",20,[[["self"],["eventflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",20,[[["self"],["eventflags"]],["eventflags"]]],[11,"bitor_assign","","Adds the set of flags.",20,[[["self"],["eventflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,[[["self"],["eventflags"]],["eventflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",20,[[["self"],["eventflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",20,[[["self"],["eventflags"]],["eventflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",20,[[["self"],["eventflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",20,[[["self"],["eventflags"]],["eventflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",20,[[["self"],["eventflags"]]]],[11,"not","","Returns the complement of this set of flags.",20,[[["self"]],["eventflags"]]],[11,"extend","","",20,[[["self"],["t"]]]],[11,"from_iter","","",20,[[["t"]],["eventflags"]]],[0,"pty","nix","Create master and slave virtual pseudo-terminals (PTYs)",N,N],[6,"SessionId","nix::pty","",N,N],[3,"Winsize","","",N,N],[12,"ws_row","","",21,N],[12,"ws_col","","",21,N],[12,"ws_xpixel","","",21,N],[12,"ws_ypixel","","",21,N],[3,"OpenptyResult","","Representation of a master/slave pty pair",N,N],[12,"master","","The master port in a virtual pty pair",22,N],[12,"slave","","The slave port in a virtual pty pair",22,N],[3,"PtyMaster","","Representation of the Master device in a master/slave pty pair",N,N],[5,"grantpt","","Grant access to a slave pseudoterminal (see `grantpt(3)`)",N,[[["ptymaster"]],["result"]]],[5,"posix_openpt","","Open a pseudoterminal device (see `posix_openpt(3)`)",N,[[["oflag"]],["result",["ptymaster"]]]],[5,"ptsname","","Get the name of the slave pseudoterminal (see `ptsname(3)`)",N,[[["ptymaster"]],["result",["string"]]]],[5,"ptsname_r","","Get the name of the slave pseudoterminal (see `ptsname(3)`)",N,[[["ptymaster"]],["result",["string"]]]],[5,"unlockpt","","Unlock a pseudoterminal master/slave pseudoterminal pair (see `unlockpt(3)`)",N,[[["ptymaster"]],["result"]]],[5,"openpty","","Create a new pseudoterminal, returning the slave and master file descriptors in `OpenptyResult` (see `openpty`).",N,[[["t"],["u"]],["result",["openptyresult"]]]],[11,"clone","","",22,[[["self"]],["openptyresult"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",23,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",23,[[["self"]],["rawfd"]]],[11,"drop","","",23,[[["self"]]]],[0,"sched","nix","",N,N],[3,"CloneFlags","nix::sched","",N,N],[3,"CpuSet","","",N,N],[5,"sched_setaffinity","","",N,[[["pid"],["cpuset"]],["result"]]],[5,"clone","","",N,N],[5,"unshare","","",N,[[["cloneflags"]],["result"]]],[5,"setns","","",N,[[["rawfd"],["cloneflags"]],["result"]]],[6,"CloneCb","","",N,N],[11,"eq","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"ne","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"clone","","",24,[[["self"]],["cloneflags"]]],[11,"partial_cmp","","",24,[[["self"],["cloneflags"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"le","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"gt","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"ge","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"cmp","","",24,[[["self"],["cloneflags"]],["ordering"]]],[11,"hash","","",24,N],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[18,"CLONE_VM","","",24,N],[18,"CLONE_FS","","",24,N],[18,"CLONE_FILES","","",24,N],[18,"CLONE_SIGHAND","","",24,N],[18,"CLONE_PTRACE","","",24,N],[18,"CLONE_VFORK","","",24,N],[18,"CLONE_PARENT","","",24,N],[18,"CLONE_THREAD","","",24,N],[18,"CLONE_NEWNS","","",24,N],[18,"CLONE_SYSVSEM","","",24,N],[18,"CLONE_SETTLS","","",24,N],[18,"CLONE_PARENT_SETTID","","",24,N],[18,"CLONE_CHILD_CLEARTID","","",24,N],[18,"CLONE_DETACHED","","",24,N],[18,"CLONE_UNTRACED","","",24,N],[18,"CLONE_CHILD_SETTID","","",24,N],[18,"CLONE_NEWCGROUP","","",24,N],[18,"CLONE_NEWUTS","","",24,N],[18,"CLONE_NEWIPC","","",24,N],[18,"CLONE_NEWUSER","","",24,N],[18,"CLONE_NEWPID","","",24,N],[18,"CLONE_NEWNET","","",24,N],[18,"CLONE_IO","","",24,N],[11,"empty","","Returns an empty set of flags.",24,[[],["cloneflags"]]],[11,"all","","Returns the set containing all flags.",24,[[],["cloneflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",24,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,[[["c_int"]],["option",["cloneflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,[[["c_int"]],["cloneflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",24,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,[[["self"],["cloneflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,[[["self"],["cloneflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",24,[[["self"],["cloneflags"]]]],[11,"remove","","Removes the specified flags in-place.",24,[[["self"],["cloneflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",24,[[["self"],["cloneflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",24,[[["self"],["cloneflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",24,[[["self"],["cloneflags"]],["cloneflags"]]],[11,"bitor_assign","","Adds the set of flags.",24,[[["self"],["cloneflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,[[["self"],["cloneflags"]],["cloneflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",24,[[["self"],["cloneflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",24,[[["self"],["cloneflags"]],["cloneflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",24,[[["self"],["cloneflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",24,[[["self"],["cloneflags"]],["cloneflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",24,[[["self"],["cloneflags"]]]],[11,"not","","Returns the complement of this set of flags.",24,[[["self"]],["cloneflags"]]],[11,"extend","","",24,[[["self"],["t"]]]],[11,"from_iter","","",24,[[["t"]],["cloneflags"]]],[11,"clone","","",25,[[["self"]],["cpuset"]]],[11,"new","","",25,[[],["cpuset"]]],[11,"is_set","","",25,[[["self"],["usize"]],["result",["bool"]]]],[11,"set","","",25,[[["self"],["usize"]],["result"]]],[11,"unset","","",25,[[["self"],["usize"]],["result"]]],[0,"sys","nix","",N,N],[0,"aio","nix::sys","POSIX Asynchronous I/O",N,N],[3,"AioCb","nix::sys::aio","AIO Control Block.",N,N],[3,"LioCb","","LIO Control Block.",N,N],[12,"aiocbs","","A collection of [`AioCb`]s.  All of these will be issued simultaneously by the [`listio`] method.",26,N],[4,"AioFsyncMode","","Mode for `AioCb::fsync`.  Controls whether only data or both data and metadata are synced.",N,N],[13,"O_SYNC","","do it like `fsync`",27,N],[13,"O_DSYNC","","on supported operating systems only, do it like `fdatasync`",27,N],[4,"LioOpcode","","When used with `lio_listio`, determines whether a given `aiocb` should be used for a read operation, a write operation, or ignored.  Has no effect for any other aio functions.",N,N],[13,"LIO_NOP","","",28,N],[13,"LIO_WRITE","","",28,N],[13,"LIO_READ","","",28,N],[4,"LioMode","","Mode for `lio_listio`",N,N],[13,"LIO_WAIT","","Requests that `lio_listio` block until all requested operations have been completed",29,N],[13,"LIO_NOWAIT","","Requests that `lio_listio` return immediately",29,N],[4,"AioCancelStat","","Return values for `AioCb::cancel` and `aio_cancel_all`",N,N],[13,"AioCanceled","","All outstanding requests were canceled",30,N],[13,"AioNotCanceled","","Some requests were not canceled.  Their status should be checked with `AioCb::error`",30,N],[13,"AioAllDone","","All of the requests have already finished",30,N],[4,"Buffer","","Owns (uniquely or shared) a memory buffer to keep it from `Drop`ing while the kernel has a pointer to it.",N,N],[13,"None","","No buffer to own.",31,N],[13,"Phantom","","Keeps a reference to a slice",31,N],[13,"BoxedSlice","","Generic thing that keeps a buffer from dropping",31,N],[13,"BoxedMutSlice","","Generic thing that keeps a mutable buffer from dropping",31,N],[5,"aio_cancel_all","","Cancels outstanding AIO requests for a given file descriptor.",N,[[["rawfd"]],["result",["aiocancelstat"]]]],[5,"aio_suspend","","Suspends the calling process until at least one of the specified `AioCb`s has completed, a signal is delivered, or the timeout has passed.",N,N],[11,"clone","","",27,[[["self"]],["aiofsyncmode"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"hash","","",27,N],[11,"cmp","","",27,[[["self"],["aiofsyncmode"]],["ordering"]]],[11,"eq","","",27,[[["self"],["aiofsyncmode"]],["bool"]]],[11,"partial_cmp","","",27,[[["self"],["aiofsyncmode"]],["option",["ordering"]]]],[11,"clone","","",28,[[["self"]],["lioopcode"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"hash","","",28,N],[11,"cmp","","",28,[[["self"],["lioopcode"]],["ordering"]]],[11,"eq","","",28,[[["self"],["lioopcode"]],["bool"]]],[11,"partial_cmp","","",28,[[["self"],["lioopcode"]],["option",["ordering"]]]],[11,"clone","","",29,[[["self"]],["liomode"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"hash","","",29,N],[11,"cmp","","",29,[[["self"],["liomode"]],["ordering"]]],[11,"eq","","",29,[[["self"],["liomode"]],["bool"]]],[11,"partial_cmp","","",29,[[["self"],["liomode"]],["option",["ordering"]]]],[11,"clone","","",30,[[["self"]],["aiocancelstat"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["aiocancelstat"]],["bool"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"buffer","","Remove the inner `Buffer` and return it",32,[[["self"]],["buffer"]]],[11,"boxed_slice","","Remove the inner boxed slice, if any, and return it.",32,[[["self"]],["option",["box"]]]],[11,"boxed_mut_slice","","Remove the inner boxed mutable slice, if any, and return it.",32,[[["self"]],["option",["box"]]]],[11,"fd","","Returns the underlying file descriptor associated with the `AioCb`",32,[[["self"]],["rawfd"]]],[11,"from_fd","","Constructs a new `AioCb` with no associated buffer.",32,[[["rawfd"],["c_int"],["sigevnotify"]],["aiocb"]]],[11,"from_mut_slice","","Constructs a new `AioCb` from a mutable slice.",32,N],[11,"from_boxed_slice","","The safest and most flexible way to create an `AioCb`.",32,[[["rawfd"],["off_t"],["box",["borrow"]],["c_int"],["sigevnotify"],["lioopcode"]],["aiocb"]]],[11,"from_boxed_mut_slice","","The safest and most flexible way to create an `AioCb` for reading.",32,[[["rawfd"],["off_t"],["box",["borrowmut"]],["c_int"],["sigevnotify"],["lioopcode"]],["aiocb"]]],[11,"from_mut_ptr","","Constructs a new `AioCb` from a mutable raw pointer",32,N],[11,"from_ptr","","Constructs a new `AioCb` from a raw pointer.",32,N],[11,"from_slice","","Like `from_mut_slice`, but works on constant slices rather than mutable slices.",32,N],[11,"set_sigev_notify","","Update the notification settings for an existing `aiocb`",32,[[["self"],["sigevnotify"]]]],[11,"cancel","","Cancels an outstanding AIO request.",32,[[["self"]],["result",["aiocancelstat"]]]],[11,"error","","Retrieve error status of an asynchronous operation.",32,[[["self"]],["result"]]],[11,"fsync","","An asynchronous version of `fsync(2)`.",32,[[["self"],["aiofsyncmode"]],["result"]]],[11,"lio_opcode","","Returns the `aiocb`'s `LioOpcode` field",32,[[["self"]],["option",["lioopcode"]]]],[11,"nbytes","","Returns the requested length of the aio operation in bytes",32,[[["self"]],["usize"]]],[11,"offset","","Returns the file offset stored in the `AioCb`",32,[[["self"]],["off_t"]]],[11,"priority","","Returns the priority of the `AioCb`",32,[[["self"]],["c_int"]]],[11,"read","","Asynchronously reads from a file descriptor into a buffer",32,[[["self"]],["result"]]],[11,"sigevent","","Returns the `SigEvent` stored in the `AioCb`",32,[[["self"]],["sigevent"]]],[11,"aio_return","","Retrieve return status of an asynchronous operation.",32,[[["self"]],["result",["isize"]]]],[11,"write","","Asynchronously writes from a buffer to a file descriptor",32,[[["self"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"drop","","If the `AioCb` has no remaining state in the kernel, just drop it. Otherwise, dropping constitutes a resource leak, which is an error",32,[[["self"]]]],[11,"with_capacity","","Initialize an empty `LioCb`",26,[[["usize"]],["liocb"]]],[11,"listio","","Submits multiple asynchronous I/O requests with a single system call.",26,[[["self"],["liomode"],["sigevnotify"]],["result"]]],[11,"listio_resubmit","","Resubmits any incomplete operations with [`lio_listio`].",26,[[["self"],["liomode"],["sigevnotify"]],["result"]]],[11,"aio_return","","Collect final status for an individual `AioCb` submitted as part of an `LioCb`.",26,[[["self"],["usize"]],["result",["isize"]]]],[11,"error","","Retrieve error status of an individual `AioCb` submitted as part of an `LioCb`.",26,[[["self"],["usize"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"from","","",26,[[["vec",["aiocb"]]],["liocb"]]],[0,"epoll","nix::sys","",N,N],[3,"EpollFlags","nix::sys::epoll","",N,N],[3,"EpollCreateFlags","","",N,N],[3,"EpollEvent","","",N,N],[4,"EpollOp","","",N,N],[13,"EpollCtlAdd","","",33,N],[13,"EpollCtlDel","","",33,N],[13,"EpollCtlMod","","",33,N],[5,"epoll_create","","",N,[[],["result",["rawfd"]]]],[5,"epoll_create1","","",N,[[["epollcreateflags"]],["result",["rawfd"]]]],[5,"epoll_ctl","","",N,[[["rawfd"],["epollop"],["rawfd"],["t"]],["result"]]],[5,"epoll_wait","","",N,N],[11,"eq","","",34,[[["self"],["epollflags"]],["bool"]]],[11,"ne","","",34,[[["self"],["epollflags"]],["bool"]]],[11,"clone","","",34,[[["self"]],["epollflags"]]],[11,"partial_cmp","","",34,[[["self"],["epollflags"]],["option",["ordering"]]]],[11,"lt","","",34,[[["self"],["epollflags"]],["bool"]]],[11,"le","","",34,[[["self"],["epollflags"]],["bool"]]],[11,"gt","","",34,[[["self"],["epollflags"]],["bool"]]],[11,"ge","","",34,[[["self"],["epollflags"]],["bool"]]],[11,"cmp","","",34,[[["self"],["epollflags"]],["ordering"]]],[11,"hash","","",34,N],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[18,"EPOLLIN","","",34,N],[18,"EPOLLPRI","","",34,N],[18,"EPOLLOUT","","",34,N],[18,"EPOLLRDNORM","","",34,N],[18,"EPOLLRDBAND","","",34,N],[18,"EPOLLWRNORM","","",34,N],[18,"EPOLLWRBAND","","",34,N],[18,"EPOLLMSG","","",34,N],[18,"EPOLLERR","","",34,N],[18,"EPOLLHUP","","",34,N],[18,"EPOLLRDHUP","","",34,N],[18,"EPOLLEXCLUSIVE","","",34,N],[18,"EPOLLWAKEUP","","",34,N],[18,"EPOLLONESHOT","","",34,N],[18,"EPOLLET","","",34,N],[11,"empty","","Returns an empty set of flags.",34,[[],["epollflags"]]],[11,"all","","Returns the set containing all flags.",34,[[],["epollflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",34,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",34,[[["c_int"]],["option",["epollflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",34,[[["c_int"]],["epollflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",34,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,[[["self"],["epollflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,[[["self"],["epollflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",34,[[["self"],["epollflags"]]]],[11,"remove","","Removes the specified flags in-place.",34,[[["self"],["epollflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",34,[[["self"],["epollflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",34,[[["self"],["epollflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",34,[[["self"],["epollflags"]],["epollflags"]]],[11,"bitor_assign","","Adds the set of flags.",34,[[["self"],["epollflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,[[["self"],["epollflags"]],["epollflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",34,[[["self"],["epollflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",34,[[["self"],["epollflags"]],["epollflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",34,[[["self"],["epollflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",34,[[["self"],["epollflags"]],["epollflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",34,[[["self"],["epollflags"]]]],[11,"not","","Returns the complement of this set of flags.",34,[[["self"]],["epollflags"]]],[11,"extend","","",34,[[["self"],["t"]]]],[11,"from_iter","","",34,[[["t"]],["epollflags"]]],[11,"clone","","",33,[[["self"]],["epollop"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"hash","","",33,N],[11,"eq","","",33,[[["self"],["epollop"]],["bool"]]],[11,"eq","","",35,[[["self"],["epollcreateflags"]],["bool"]]],[11,"ne","","",35,[[["self"],["epollcreateflags"]],["bool"]]],[11,"clone","","",35,[[["self"]],["epollcreateflags"]]],[11,"partial_cmp","","",35,[[["self"],["epollcreateflags"]],["option",["ordering"]]]],[11,"lt","","",35,[[["self"],["epollcreateflags"]],["bool"]]],[11,"le","","",35,[[["self"],["epollcreateflags"]],["bool"]]],[11,"gt","","",35,[[["self"],["epollcreateflags"]],["bool"]]],[11,"ge","","",35,[[["self"],["epollcreateflags"]],["bool"]]],[11,"cmp","","",35,[[["self"],["epollcreateflags"]],["ordering"]]],[11,"hash","","",35,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[18,"EPOLL_CLOEXEC","","",35,N],[11,"empty","","Returns an empty set of flags.",35,[[],["epollcreateflags"]]],[11,"all","","Returns the set containing all flags.",35,[[],["epollcreateflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",35,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",35,[[["c_int"]],["option",["epollcreateflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",35,[[["c_int"]],["epollcreateflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",35,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",35,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",35,[[["self"],["epollcreateflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",35,[[["self"],["epollcreateflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",35,[[["self"],["epollcreateflags"]]]],[11,"remove","","Removes the specified flags in-place.",35,[[["self"],["epollcreateflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",35,[[["self"],["epollcreateflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",35,[[["self"],["epollcreateflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",35,[[["self"],["epollcreateflags"]],["epollcreateflags"]]],[11,"bitor_assign","","Adds the set of flags.",35,[[["self"],["epollcreateflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",35,[[["self"],["epollcreateflags"]],["epollcreateflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",35,[[["self"],["epollcreateflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",35,[[["self"],["epollcreateflags"]],["epollcreateflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",35,[[["self"],["epollcreateflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",35,[[["self"],["epollcreateflags"]],["epollcreateflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",35,[[["self"],["epollcreateflags"]]]],[11,"not","","Returns the complement of this set of flags.",35,[[["self"]],["epollcreateflags"]]],[11,"extend","","",35,[[["self"],["t"]]]],[11,"from_iter","","",35,[[["t"]],["epollcreateflags"]]],[11,"clone","","",36,[[["self"]],["epollevent"]]],[11,"new","","",36,[[["epollflags"],["u64"]],["self"]]],[11,"empty","","",36,[[],["self"]]],[11,"events","","",36,[[["self"]],["epollflags"]]],[11,"data","","",36,[[["self"]],["u64"]]],[0,"eventfd","nix::sys","",N,N],[3,"EfdFlags","nix::sys::eventfd","",N,N],[5,"eventfd","","",N,[[["c_uint"],["efdflags"]],["result",["rawfd"]]]],[11,"eq","","",37,[[["self"],["efdflags"]],["bool"]]],[11,"ne","","",37,[[["self"],["efdflags"]],["bool"]]],[11,"clone","","",37,[[["self"]],["efdflags"]]],[11,"partial_cmp","","",37,[[["self"],["efdflags"]],["option",["ordering"]]]],[11,"lt","","",37,[[["self"],["efdflags"]],["bool"]]],[11,"le","","",37,[[["self"],["efdflags"]],["bool"]]],[11,"gt","","",37,[[["self"],["efdflags"]],["bool"]]],[11,"ge","","",37,[[["self"],["efdflags"]],["bool"]]],[11,"cmp","","",37,[[["self"],["efdflags"]],["ordering"]]],[11,"hash","","",37,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[18,"EFD_CLOEXEC","","",37,N],[18,"EFD_NONBLOCK","","",37,N],[18,"EFD_SEMAPHORE","","",37,N],[11,"empty","","Returns an empty set of flags.",37,[[],["efdflags"]]],[11,"all","","Returns the set containing all flags.",37,[[],["efdflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",37,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",37,[[["c_int"]],["option",["efdflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",37,[[["c_int"]],["efdflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",37,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,[[["self"],["efdflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,[[["self"],["efdflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",37,[[["self"],["efdflags"]]]],[11,"remove","","Removes the specified flags in-place.",37,[[["self"],["efdflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",37,[[["self"],["efdflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",37,[[["self"],["efdflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",37,[[["self"],["efdflags"]],["efdflags"]]],[11,"bitor_assign","","Adds the set of flags.",37,[[["self"],["efdflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,[[["self"],["efdflags"]],["efdflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",37,[[["self"],["efdflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",37,[[["self"],["efdflags"]],["efdflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",37,[[["self"],["efdflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",37,[[["self"],["efdflags"]],["efdflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",37,[[["self"],["efdflags"]]]],[11,"not","","Returns the complement of this set of flags.",37,[[["self"]],["efdflags"]]],[11,"extend","","",37,[[["self"],["t"]]]],[11,"from_iter","","",37,[[["t"]],["efdflags"]]],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls.",N,N],[0,"memfd","","",N,N],[3,"MemFdCreateFlag","nix::sys::memfd","",N,N],[5,"memfd_create","","",N,[[["cstr"],["memfdcreateflag"]],["result",["rawfd"]]]],[11,"eq","","",38,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"ne","","",38,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"clone","","",38,[[["self"]],["memfdcreateflag"]]],[11,"partial_cmp","","",38,[[["self"],["memfdcreateflag"]],["option",["ordering"]]]],[11,"lt","","",38,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"le","","",38,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"gt","","",38,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"ge","","",38,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"cmp","","",38,[[["self"],["memfdcreateflag"]],["ordering"]]],[11,"hash","","",38,N],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[18,"MFD_CLOEXEC","","",38,N],[18,"MFD_ALLOW_SEALING","","",38,N],[11,"empty","","Returns an empty set of flags.",38,[[],["memfdcreateflag"]]],[11,"all","","Returns the set containing all flags.",38,[[],["memfdcreateflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",38,[[["self"]],["c_uint"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",38,[[["c_uint"]],["option",["memfdcreateflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",38,[[["c_uint"]],["memfdcreateflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",38,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",38,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",38,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",38,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",38,[[["self"],["memfdcreateflag"]]]],[11,"remove","","Removes the specified flags in-place.",38,[[["self"],["memfdcreateflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",38,[[["self"],["memfdcreateflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",38,[[["self"],["memfdcreateflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",38,[[["self"],["memfdcreateflag"]],["memfdcreateflag"]]],[11,"bitor_assign","","Adds the set of flags.",38,[[["self"],["memfdcreateflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",38,[[["self"],["memfdcreateflag"]],["memfdcreateflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",38,[[["self"],["memfdcreateflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",38,[[["self"],["memfdcreateflag"]],["memfdcreateflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",38,[[["self"],["memfdcreateflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",38,[[["self"],["memfdcreateflag"]],["memfdcreateflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",38,[[["self"],["memfdcreateflag"]]]],[11,"not","","Returns the complement of this set of flags.",38,[[["self"]],["memfdcreateflag"]]],[11,"extend","","",38,[[["self"],["t"]]]],[11,"from_iter","","",38,[[["t"]],["memfdcreateflag"]]],[0,"mman","nix::sys","",N,N],[3,"ProtFlags","nix::sys::mman","Desired memory protection of a memory mapping.",N,N],[3,"MapFlags","","Additional parameters for `mmap()`.",N,N],[3,"MsFlags","","Configuration flags for `msync`.",N,N],[3,"MlockAllFlags","","Flags for `mlockall`.",N,N],[4,"MmapAdvise","","Usage information for a range of memory to allow for performance optimizations by the kernel.",N,N],[13,"MADV_NORMAL","","No further special treatment. This is the default.",39,N],[13,"MADV_RANDOM","","Expect random page references.",39,N],[13,"MADV_SEQUENTIAL","","Expect sequential page references.",39,N],[13,"MADV_WILLNEED","","Expect access in the near future.",39,N],[13,"MADV_DONTNEED","","Do not expect access in the near future.",39,N],[13,"MADV_REMOVE","","Free up a given range of pages and its associated backing store.",39,N],[13,"MADV_DONTFORK","","Do not make pages in this range available to the child after a `fork(2)`.",39,N],[13,"MADV_DOFORK","","Undo the effect of `MADV_DONTFORK`.",39,N],[13,"MADV_HWPOISON","","Poison the given pages.",39,N],[13,"MADV_MERGEABLE","","Enable Kernel Samepage Merging (KSM) for the given pages.",39,N],[13,"MADV_UNMERGEABLE","","Undo the effect of `MADV_MERGEABLE`",39,N],[13,"MADV_SOFT_OFFLINE","","Preserve the memory of each page but offline the original page.",39,N],[13,"MADV_HUGEPAGE","","Enable Transparent Huge Pages (THP) for pages in the given range.",39,N],[13,"MADV_NOHUGEPAGE","","Undo the effect of `MADV_HUGEPAGE`.",39,N],[13,"MADV_DONTDUMP","","Exclude the given range from a core dump.",39,N],[13,"MADV_DODUMP","","Undo the effect of an earlier `MADV_DONTDUMP`.",39,N],[13,"MADV_FREE","","Specify that the application no longer needs the pages in the given range.",39,N],[5,"mlock","","Locks all memory pages that contain part of the address range with `length` bytes starting at `addr`. Locked pages never move to the swap area.",N,N],[5,"munlock","","Unlocks all memory pages that contain part of the address range with `length` bytes starting at `addr`.",N,N],[5,"mlockall","","Locks all memory pages mapped into this process' address space. Locked pages never move to the swap area.",N,[[["mlockallflags"]],["result"]]],[5,"munlockall","","Unlocks all memory pages mapped into this process' address space.",N,[[],["result"]]],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",N,N],[5,"munmap","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"shm_open","","",N,[[["p"],["oflag"],["mode"]],["result",["rawfd"]]]],[5,"shm_unlink","","",N,[[["p"]],["result"]]],[11,"eq","","",40,[[["self"],["protflags"]],["bool"]]],[11,"ne","","",40,[[["self"],["protflags"]],["bool"]]],[11,"clone","","",40,[[["self"]],["protflags"]]],[11,"partial_cmp","","",40,[[["self"],["protflags"]],["option",["ordering"]]]],[11,"lt","","",40,[[["self"],["protflags"]],["bool"]]],[11,"le","","",40,[[["self"],["protflags"]],["bool"]]],[11,"gt","","",40,[[["self"],["protflags"]],["bool"]]],[11,"ge","","",40,[[["self"],["protflags"]],["bool"]]],[11,"cmp","","",40,[[["self"],["protflags"]],["ordering"]]],[11,"hash","","",40,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[18,"PROT_NONE","","Pages cannot be accessed.",40,N],[18,"PROT_READ","","Pages can be read.",40,N],[18,"PROT_WRITE","","Pages can be written.",40,N],[18,"PROT_EXEC","","Pages can be executed",40,N],[18,"PROT_GROWSDOWN","","Apply protection up to the end of a mapping that grows upwards.",40,N],[18,"PROT_GROWSUP","","Apply protection down to the beginning of a mapping that grows downwards.",40,N],[11,"empty","","Returns an empty set of flags.",40,[[],["protflags"]]],[11,"all","","Returns the set containing all flags.",40,[[],["protflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",40,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",40,[[["c_int"]],["option",["protflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",40,[[["c_int"]],["protflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",40,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,[[["self"],["protflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,[[["self"],["protflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",40,[[["self"],["protflags"]]]],[11,"remove","","Removes the specified flags in-place.",40,[[["self"],["protflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",40,[[["self"],["protflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",40,[[["self"],["protflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",40,[[["self"],["protflags"]],["protflags"]]],[11,"bitor_assign","","Adds the set of flags.",40,[[["self"],["protflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,[[["self"],["protflags"]],["protflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",40,[[["self"],["protflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",40,[[["self"],["protflags"]],["protflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",40,[[["self"],["protflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",40,[[["self"],["protflags"]],["protflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",40,[[["self"],["protflags"]]]],[11,"not","","Returns the complement of this set of flags.",40,[[["self"]],["protflags"]]],[11,"extend","","",40,[[["self"],["t"]]]],[11,"from_iter","","",40,[[["t"]],["protflags"]]],[11,"eq","","",41,[[["self"],["mapflags"]],["bool"]]],[11,"ne","","",41,[[["self"],["mapflags"]],["bool"]]],[11,"clone","","",41,[[["self"]],["mapflags"]]],[11,"partial_cmp","","",41,[[["self"],["mapflags"]],["option",["ordering"]]]],[11,"lt","","",41,[[["self"],["mapflags"]],["bool"]]],[11,"le","","",41,[[["self"],["mapflags"]],["bool"]]],[11,"gt","","",41,[[["self"],["mapflags"]],["bool"]]],[11,"ge","","",41,[[["self"],["mapflags"]],["bool"]]],[11,"cmp","","",41,[[["self"],["mapflags"]],["ordering"]]],[11,"hash","","",41,N],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[18,"MAP_FILE","","Compatibility flag. Ignored.",41,N],[18,"MAP_SHARED","","Share this mapping. Mutually exclusive with `MAP_PRIVATE`.",41,N],[18,"MAP_PRIVATE","","Create a private copy-on-write mapping. Mutually exclusive with `MAP_SHARED`.",41,N],[18,"MAP_FIXED","","Place the mapping at exactly the address specified in `addr`.",41,N],[18,"MAP_ANON","","Synonym for `MAP_ANONYMOUS`.",41,N],[18,"MAP_ANONYMOUS","","The mapping is not backed by any file.",41,N],[18,"MAP_32BIT","","Put the mapping into the first 2GB of the process address space.",41,N],[18,"MAP_GROWSDOWN","","Used for stacks; indicates to the kernel that the mapping should extend downward in memory.",41,N],[18,"MAP_DENYWRITE","","Compatibility flag. Ignored.",41,N],[18,"MAP_EXECUTABLE","","Compatibility flag. Ignored.",41,N],[18,"MAP_LOCKED","","Mark the mmaped region to be locked in the same way as `mlock(2)`.",41,N],[18,"MAP_NORESERVE","","Do not reserve swap space for this mapping.",41,N],[18,"MAP_POPULATE","","Populate page tables for a mapping.",41,N],[18,"MAP_NONBLOCK","","Only meaningful when used with `MAP_POPULATE`. Don't perform read-ahead.",41,N],[18,"MAP_HUGETLB","","Allocate the mapping using \"huge pages.\"",41,N],[18,"MAP_STACK","","Region grows down, like a stack.",41,N],[11,"empty","","Returns an empty set of flags.",41,[[],["mapflags"]]],[11,"all","","Returns the set containing all flags.",41,[[],["mapflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",41,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",41,[[["c_int"]],["option",["mapflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",41,[[["c_int"]],["mapflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",41,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,[[["self"],["mapflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,[[["self"],["mapflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",41,[[["self"],["mapflags"]]]],[11,"remove","","Removes the specified flags in-place.",41,[[["self"],["mapflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",41,[[["self"],["mapflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",41,[[["self"],["mapflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",41,[[["self"],["mapflags"]],["mapflags"]]],[11,"bitor_assign","","Adds the set of flags.",41,[[["self"],["mapflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,[[["self"],["mapflags"]],["mapflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",41,[[["self"],["mapflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",41,[[["self"],["mapflags"]],["mapflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",41,[[["self"],["mapflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",41,[[["self"],["mapflags"]],["mapflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",41,[[["self"],["mapflags"]]]],[11,"not","","Returns the complement of this set of flags.",41,[[["self"]],["mapflags"]]],[11,"extend","","",41,[[["self"],["t"]]]],[11,"from_iter","","",41,[[["t"]],["mapflags"]]],[11,"clone","","",39,[[["self"]],["mmapadvise"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"hash","","",39,N],[11,"cmp","","",39,[[["self"],["mmapadvise"]],["ordering"]]],[11,"eq","","",39,[[["self"],["mmapadvise"]],["bool"]]],[11,"partial_cmp","","",39,[[["self"],["mmapadvise"]],["option",["ordering"]]]],[11,"eq","","",42,[[["self"],["msflags"]],["bool"]]],[11,"ne","","",42,[[["self"],["msflags"]],["bool"]]],[11,"clone","","",42,[[["self"]],["msflags"]]],[11,"partial_cmp","","",42,[[["self"],["msflags"]],["option",["ordering"]]]],[11,"lt","","",42,[[["self"],["msflags"]],["bool"]]],[11,"le","","",42,[[["self"],["msflags"]],["bool"]]],[11,"gt","","",42,[[["self"],["msflags"]],["bool"]]],[11,"ge","","",42,[[["self"],["msflags"]],["bool"]]],[11,"cmp","","",42,[[["self"],["msflags"]],["ordering"]]],[11,"hash","","",42,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[18,"MS_ASYNC","","Schedule an update but return immediately.",42,N],[18,"MS_INVALIDATE","","Invalidate all cached data.",42,N],[18,"MS_SYNC","","Perform an update and wait for it to complete.",42,N],[11,"empty","","Returns an empty set of flags.",42,[[],["msflags"]]],[11,"all","","Returns the set containing all flags.",42,[[],["msflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",42,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",42,[[["c_int"]],["option",["msflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",42,[[["c_int"]],["msflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",42,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",42,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",42,[[["self"],["msflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",42,[[["self"],["msflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",42,[[["self"],["msflags"]]]],[11,"remove","","Removes the specified flags in-place.",42,[[["self"],["msflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",42,[[["self"],["msflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",42,[[["self"],["msflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",42,[[["self"],["msflags"]],["msflags"]]],[11,"bitor_assign","","Adds the set of flags.",42,[[["self"],["msflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",42,[[["self"],["msflags"]],["msflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",42,[[["self"],["msflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",42,[[["self"],["msflags"]],["msflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",42,[[["self"],["msflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",42,[[["self"],["msflags"]],["msflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",42,[[["self"],["msflags"]]]],[11,"not","","Returns the complement of this set of flags.",42,[[["self"]],["msflags"]]],[11,"extend","","",42,[[["self"],["t"]]]],[11,"from_iter","","",42,[[["t"]],["msflags"]]],[11,"eq","","",43,[[["self"],["mlockallflags"]],["bool"]]],[11,"ne","","",43,[[["self"],["mlockallflags"]],["bool"]]],[11,"clone","","",43,[[["self"]],["mlockallflags"]]],[11,"partial_cmp","","",43,[[["self"],["mlockallflags"]],["option",["ordering"]]]],[11,"lt","","",43,[[["self"],["mlockallflags"]],["bool"]]],[11,"le","","",43,[[["self"],["mlockallflags"]],["bool"]]],[11,"gt","","",43,[[["self"],["mlockallflags"]],["bool"]]],[11,"ge","","",43,[[["self"],["mlockallflags"]],["bool"]]],[11,"cmp","","",43,[[["self"],["mlockallflags"]],["ordering"]]],[11,"hash","","",43,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[18,"MCL_CURRENT","","Lock pages that are currently mapped into the address space of the process.",43,N],[18,"MCL_FUTURE","","Lock pages which will become mapped into the address space of the process in the future.",43,N],[11,"empty","","Returns an empty set of flags.",43,[[],["mlockallflags"]]],[11,"all","","Returns the set containing all flags.",43,[[],["mlockallflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",43,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",43,[[["c_int"]],["option",["mlockallflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",43,[[["c_int"]],["mlockallflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",43,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",43,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",43,[[["self"],["mlockallflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",43,[[["self"],["mlockallflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",43,[[["self"],["mlockallflags"]]]],[11,"remove","","Removes the specified flags in-place.",43,[[["self"],["mlockallflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",43,[[["self"],["mlockallflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",43,[[["self"],["mlockallflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",43,[[["self"],["mlockallflags"]],["mlockallflags"]]],[11,"bitor_assign","","Adds the set of flags.",43,[[["self"],["mlockallflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",43,[[["self"],["mlockallflags"]],["mlockallflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",43,[[["self"],["mlockallflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",43,[[["self"],["mlockallflags"]],["mlockallflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",43,[[["self"],["mlockallflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",43,[[["self"],["mlockallflags"]],["mlockallflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",43,[[["self"],["mlockallflags"]]]],[11,"not","","Returns the complement of this set of flags.",43,[[["self"]],["mlockallflags"]]],[11,"extend","","",43,[[["self"],["t"]]]],[11,"from_iter","","",43,[[["t"]],["mlockallflags"]]],[0,"pthread","nix::sys","",N,N],[5,"pthread_self","nix::sys::pthread","Obtain ID of the calling thread (see `pthread_self(3)`",N,[[],["pthread"]]],[6,"Pthread","","",N,N],[0,"ptrace","nix::sys","For detailed description of the ptrace requests, consult `man ptrace`.",N,N],[3,"Options","nix::sys::ptrace","Ptrace options used in conjunction with the PTRACE_SETOPTIONS request. See `man ptrace` for more details.",N,N],[4,"Request","","Ptrace Request enum defining the action to be taken.",N,N],[13,"PTRACE_TRACEME","","",44,N],[13,"PTRACE_PEEKTEXT","","",44,N],[13,"PTRACE_PEEKDATA","","",44,N],[13,"PTRACE_PEEKUSER","","",44,N],[13,"PTRACE_POKETEXT","","",44,N],[13,"PTRACE_POKEDATA","","",44,N],[13,"PTRACE_POKEUSER","","",44,N],[13,"PTRACE_CONT","","",44,N],[13,"PTRACE_KILL","","",44,N],[13,"PTRACE_SINGLESTEP","","",44,N],[13,"PTRACE_GETREGS","","",44,N],[13,"PTRACE_SETREGS","","",44,N],[13,"PTRACE_GETFPREGS","","",44,N],[13,"PTRACE_SETFPREGS","","",44,N],[13,"PTRACE_ATTACH","","",44,N],[13,"PTRACE_DETACH","","",44,N],[13,"PTRACE_GETFPXREGS","","",44,N],[13,"PTRACE_SETFPXREGS","","",44,N],[13,"PTRACE_SYSCALL","","",44,N],[13,"PTRACE_SETOPTIONS","","",44,N],[13,"PTRACE_GETEVENTMSG","","",44,N],[13,"PTRACE_GETSIGINFO","","",44,N],[13,"PTRACE_SETSIGINFO","","",44,N],[13,"PTRACE_GETREGSET","","",44,N],[13,"PTRACE_SETREGSET","","",44,N],[13,"PTRACE_SEIZE","","",44,N],[13,"PTRACE_INTERRUPT","","",44,N],[13,"PTRACE_LISTEN","","",44,N],[13,"PTRACE_PEEKSIGINFO","","",44,N],[4,"Event","","Using the ptrace options the tracer can configure the tracee to stop at certain events. This enum is used to define those events as defined in `man ptrace`.",N,N],[13,"PTRACE_EVENT_FORK","","Event that stops before a return from fork or clone.",45,N],[13,"PTRACE_EVENT_VFORK","","Event that stops before a return from vfork or clone.",45,N],[13,"PTRACE_EVENT_CLONE","","Event that stops before a return from clone.",45,N],[13,"PTRACE_EVENT_EXEC","","Event that stops before a return from execve.",45,N],[13,"PTRACE_EVENT_VFORK_DONE","","Event for a return from vfork.",45,N],[13,"PTRACE_EVENT_EXIT","","Event for a stop before an exit. Unlike the waitpid Exit status program. registers can still be examined",45,N],[13,"PTRACE_EVENT_SECCOMP","","STop triggered by a seccomp rule on a tracee.",45,N],[5,"ptrace","","Performs a ptrace request. If the request in question is provided by a specialised function this function will return an unsupported operation error.",N,N],[5,"setoptions","","Set options, as with `ptrace(PTRACE_SETOPTIONS,...)`.",N,[[["pid"],["options"]],["result"]]],[5,"getevent","","Gets a ptrace event as described by `ptrace(PTRACE_GETEVENTMSG,...)`",N,[[["pid"]],["result",["c_long"]]]],[5,"getsiginfo","","Get siginfo as with `ptrace(PTRACE_GETSIGINFO,...)`",N,[[["pid"]],["result",["siginfo_t"]]]],[5,"setsiginfo","","Set siginfo as with `ptrace(PTRACE_SETSIGINFO,...)`",N,[[["pid"],["siginfo_t"]],["result"]]],[5,"traceme","","Sets the process as traceable, as with `ptrace(PTRACE_TRACEME, ...)`",N,[[],["result"]]],[5,"syscall","","Ask for next syscall, as with `ptrace(PTRACE_SYSCALL, ...)`",N,[[["pid"]],["result"]]],[5,"attach","","Attach to a running process, as with `ptrace(PTRACE_ATTACH, ...)`",N,[[["pid"]],["result"]]],[5,"detach","","Detaches the current running process, as with `ptrace(PTRACE_DETACH, ...)`",N,[[["pid"]],["result"]]],[5,"cont","","Restart the stopped tracee process, as with `ptrace(PTRACE_CONT, ...)`",N,[[["pid"],["t"]],["result"]]],[5,"step","","Move the stopped tracee process forward by a single step as with  `ptrace(PTRACE_SINGLESTEP, ...)`",N,[[["pid"],["t"]],["result"]]],[11,"clone","","",44,[[["self"]],["request"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"hash","","",44,N],[11,"cmp","","",44,[[["self"],["request"]],["ordering"]]],[11,"eq","","",44,[[["self"],["request"]],["bool"]]],[11,"partial_cmp","","",44,[[["self"],["request"]],["option",["ordering"]]]],[11,"clone","","",45,[[["self"]],["event"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"hash","","",45,N],[11,"cmp","","",45,[[["self"],["event"]],["ordering"]]],[11,"eq","","",45,[[["self"],["event"]],["bool"]]],[11,"partial_cmp","","",45,[[["self"],["event"]],["option",["ordering"]]]],[11,"eq","","",46,[[["self"],["options"]],["bool"]]],[11,"ne","","",46,[[["self"],["options"]],["bool"]]],[11,"clone","","",46,[[["self"]],["options"]]],[11,"partial_cmp","","",46,[[["self"],["options"]],["option",["ordering"]]]],[11,"lt","","",46,[[["self"],["options"]],["bool"]]],[11,"le","","",46,[[["self"],["options"]],["bool"]]],[11,"gt","","",46,[[["self"],["options"]],["bool"]]],[11,"ge","","",46,[[["self"],["options"]],["bool"]]],[11,"cmp","","",46,[[["self"],["options"]],["ordering"]]],[11,"hash","","",46,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[18,"PTRACE_O_TRACESYSGOOD","","When delivering system call traps set a bit to allow tracer to distinguish between normal stops or syscall stops. May not work on all systems.",46,N],[18,"PTRACE_O_TRACEFORK","","Stop tracee at next fork and start tracing the forked process.",46,N],[18,"PTRACE_O_TRACEVFORK","","Stop tracee at next vfork call and trace the vforked process.",46,N],[18,"PTRACE_O_TRACECLONE","","Stop tracee at next clone call and trace the cloned process.",46,N],[18,"PTRACE_O_TRACEEXEC","","Stop tracee at next execve call.",46,N],[18,"PTRACE_O_TRACEVFORKDONE","","Stop tracee at vfork completion.",46,N],[18,"PTRACE_O_TRACEEXIT","","Stop tracee at next exit call. Stops before exit commences allowing tracer to see location of exit and register states.",46,N],[18,"PTRACE_O_TRACESECCOMP","","Stop tracee when a SECCOMP_RET_TRACE rule is triggered. See `man seccomp` for more details.",46,N],[18,"PTRACE_O_EXITKILL","","Send a SIGKILL to the tracee if the tracer exits.  This is useful for ptrace jailers to prevent tracees from escaping their control.",46,N],[11,"empty","","Returns an empty set of flags.",46,[[],["options"]]],[11,"all","","Returns the set containing all flags.",46,[[],["options"]]],[11,"bits","","Returns the raw value of the flags currently stored.",46,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",46,[[["c_int"]],["option",["options"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",46,[[["c_int"]],["options"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",46,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",46,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",46,[[["self"],["options"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",46,[[["self"],["options"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",46,[[["self"],["options"]]]],[11,"remove","","Removes the specified flags in-place.",46,[[["self"],["options"]]]],[11,"toggle","","Toggles the specified flags in-place.",46,[[["self"],["options"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",46,[[["self"],["options"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",46,[[["self"],["options"]],["options"]]],[11,"bitor_assign","","Adds the set of flags.",46,[[["self"],["options"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",46,[[["self"],["options"]],["options"]]],[11,"bitxor_assign","","Toggles the set of flags.",46,[[["self"],["options"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",46,[[["self"],["options"]],["options"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",46,[[["self"],["options"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",46,[[["self"],["options"]],["options"]]],[11,"sub_assign","","Disables all flags enabled in the set.",46,[[["self"],["options"]]]],[11,"not","","Returns the complement of this set of flags.",46,[[["self"]],["options"]]],[11,"extend","","",46,[[["self"],["t"]]]],[11,"from_iter","","",46,[[["t"]],["options"]]],[0,"quota","nix::sys","Set and configure disk quotas for users, groups, or projects.",N,N],[3,"QuotaValidFlags","nix::sys::quota","Indicates the quota fields that are valid to read from.",N,N],[3,"Dqblk","","Wrapper type for `if_dqblk`",N,N],[4,"QuotaType","","The scope of the quota.",N,N],[13,"USRQUOTA","","Specify a user quota",47,N],[13,"GRPQUOTA","","Specify a group quota",47,N],[4,"QuotaFmt","","The type of quota format to use.",N,N],[13,"QFMT_VFS_OLD","","Use the original quota format.",48,N],[13,"QFMT_VFS_V0","","Use the standard VFS v0 quota format.",48,N],[13,"QFMT_VFS_V1","","Use the VFS v1 quota format.",48,N],[5,"quotactl_on","","Turn on disk quotas for a block device.",N,[[["quotatype"],["p"],["quotafmt"],["p"]],["result"]]],[5,"quotactl_off","","Disable disk quotas for a block device.",N,[[["quotatype"],["p"]],["result"]]],[5,"quotactl_sync","","Update the on-disk copy of quota usages for a filesystem.",N,[[["quotatype"],["option"]],["result"]]],[5,"quotactl_get","","Get disk quota limits and current usage for the given user/group id.",N,[[["quotatype"],["p"],["c_int"]],["result",["dqblk"]]]],[5,"quotactl_set","","Configure quota values for the specified fields for a given user/group id.",N,[[["quotatype"],["p"],["c_int"],["dqblk"],["quotavalidflags"]],["result"]]],[11,"clone","","",47,[[["self"]],["quotatype"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"hash","","",47,N],[11,"cmp","","",47,[[["self"],["quotatype"]],["ordering"]]],[11,"eq","","",47,[[["self"],["quotatype"]],["bool"]]],[11,"partial_cmp","","",47,[[["self"],["quotatype"]],["option",["ordering"]]]],[11,"clone","","",48,[[["self"]],["quotafmt"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"hash","","",48,N],[11,"cmp","","",48,[[["self"],["quotafmt"]],["ordering"]]],[11,"eq","","",48,[[["self"],["quotafmt"]],["bool"]]],[11,"partial_cmp","","",48,[[["self"],["quotafmt"]],["option",["ordering"]]]],[11,"eq","","",49,[[["self"],["quotavalidflags"]],["bool"]]],[11,"ne","","",49,[[["self"],["quotavalidflags"]],["bool"]]],[11,"clone","","",49,[[["self"]],["quotavalidflags"]]],[11,"partial_cmp","","",49,[[["self"],["quotavalidflags"]],["option",["ordering"]]]],[11,"lt","","",49,[[["self"],["quotavalidflags"]],["bool"]]],[11,"le","","",49,[[["self"],["quotavalidflags"]],["bool"]]],[11,"gt","","",49,[[["self"],["quotavalidflags"]],["bool"]]],[11,"ge","","",49,[[["self"],["quotavalidflags"]],["bool"]]],[11,"cmp","","",49,[[["self"],["quotavalidflags"]],["ordering"]]],[11,"hash","","",49,N],[11,"default","","",49,[[],["quotavalidflags"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[18,"QIF_BLIMITS","","The block hard & soft limit fields.",49,N],[18,"QIF_SPACE","","The current space field.",49,N],[18,"QIF_ILIMITS","","The inode hard & soft limit fields.",49,N],[18,"QIF_INODES","","The current inodes field.",49,N],[18,"QIF_BTIME","","The disk use time limit field.",49,N],[18,"QIF_ITIME","","The file quote time limit field.",49,N],[18,"QIF_LIMITS","","All block & inode limits.",49,N],[18,"QIF_USAGE","","The space & inodes usage fields.",49,N],[18,"QIF_TIMES","","The time limit fields.",49,N],[18,"QIF_ALL","","All fields.",49,N],[11,"empty","","Returns an empty set of flags.",49,[[],["quotavalidflags"]]],[11,"all","","Returns the set containing all flags.",49,[[],["quotavalidflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",49,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",49,[[["u32"]],["option",["quotavalidflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",49,[[["u32"]],["quotavalidflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",49,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",49,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",49,[[["self"],["quotavalidflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",49,[[["self"],["quotavalidflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",49,[[["self"],["quotavalidflags"]]]],[11,"remove","","Removes the specified flags in-place.",49,[[["self"],["quotavalidflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",49,[[["self"],["quotavalidflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",49,[[["self"],["quotavalidflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",49,[[["self"],["quotavalidflags"]],["quotavalidflags"]]],[11,"bitor_assign","","Adds the set of flags.",49,[[["self"],["quotavalidflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",49,[[["self"],["quotavalidflags"]],["quotavalidflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",49,[[["self"],["quotavalidflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",49,[[["self"],["quotavalidflags"]],["quotavalidflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",49,[[["self"],["quotavalidflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",49,[[["self"],["quotavalidflags"]],["quotavalidflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",49,[[["self"],["quotavalidflags"]]]],[11,"not","","Returns the complement of this set of flags.",49,[[["self"]],["quotavalidflags"]]],[11,"extend","","",49,[[["self"],["t"]]]],[11,"from_iter","","",49,[[["t"]],["quotavalidflags"]]],[11,"clone","","",50,[[["self"]],["dqblk"]]],[11,"default","","",50,[[],["dqblk"]]],[11,"blocks_hard_limit","","The absolute limit on disk quota blocks allocated.",50,[[["self"]],["option",["u64"]]]],[11,"set_blocks_hard_limit","","Set the absolute limit on disk quota blocks allocated.",50,[[["self"],["u64"]]]],[11,"blocks_soft_limit","","Preferred limit on disk quota blocks",50,[[["self"]],["option",["u64"]]]],[11,"set_blocks_soft_limit","","Set the preferred limit on disk quota blocks allocated.",50,[[["self"],["u64"]]]],[11,"occupied_space","","Current occupied space (bytes).",50,[[["self"]],["option",["u64"]]]],[11,"inodes_hard_limit","","Maximum number of allocated inodes.",50,[[["self"]],["option",["u64"]]]],[11,"set_inodes_hard_limit","","Set the maximum number of allocated inodes.",50,[[["self"],["u64"]]]],[11,"inodes_soft_limit","","Preferred inode limit",50,[[["self"]],["option",["u64"]]]],[11,"set_inodes_soft_limit","","Set the preferred limit of allocated inodes.",50,[[["self"],["u64"]]]],[11,"allocated_inodes","","Current number of allocated inodes.",50,[[["self"]],["option",["u64"]]]],[11,"block_time_limit","","Time limit for excessive disk use.",50,[[["self"]],["option",["u64"]]]],[11,"set_block_time_limit","","Set the time limit for excessive disk use.",50,[[["self"],["u64"]]]],[11,"inode_time_limit","","Time limit for excessive files.",50,[[["self"]],["option",["u64"]]]],[11,"set_inode_time_limit","","Set the time limit for excessive files.",50,[[["self"],["u64"]]]],[0,"reboot","nix::sys","Reboot/shutdown or enable/disable Ctrl-Alt-Delete.",N,N],[4,"RebootMode","nix::sys::reboot","How exactly should the system be rebooted.",N,N],[13,"RB_HALT_SYSTEM","","",51,N],[13,"RB_KEXEC","","",51,N],[13,"RB_POWER_OFF","","",51,N],[13,"RB_AUTOBOOT","","",51,N],[13,"RB_SW_SUSPEND","","",51,N],[5,"reboot","","",N,[[["rebootmode"]],["result",["void"]]]],[5,"set_cad_enabled","","Enable or disable the reboot keystroke (Ctrl-Alt-Delete).",N,[[["bool"]],["result"]]],[11,"clone","","",51,[[["self"]],["rebootmode"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"hash","","",51,N],[11,"cmp","","",51,[[["self"],["rebootmode"]],["ordering"]]],[11,"eq","","",51,[[["self"],["rebootmode"]],["bool"]]],[11,"partial_cmp","","",51,[[["self"],["rebootmode"]],["option",["ordering"]]]],[0,"select","nix::sys","",N,N],[17,"FD_SETSIZE","nix::sys::select","",N,N],[3,"FdSet","","",N,N],[5,"select","","Monitors file descriptors for readiness",N,[[["n"],["r"],["w"],["e"],["t"]],["result",["c_int"]]]],[5,"pselect","","Monitors file descriptors for readiness with an altered signal mask.",N,[[["n"],["r"],["w"],["e"],["t"],["s"]],["result",["c_int"]]]],[11,"clone","","",52,[[["self"]],["fdset"]]],[11,"new","","",52,[[],["fdset"]]],[11,"insert","","",52,[[["self"],["rawfd"]]]],[11,"remove","","",52,[[["self"],["rawfd"]]]],[11,"contains","","",52,[[["self"],["rawfd"]],["bool"]]],[11,"clear","","",52,[[["self"]]]],[11,"highest","","Finds the highest file descriptor in the set.",52,[[["self"]],["option",["rawfd"]]]],[0,"sendfile","nix::sys","",N,N],[5,"sendfile","nix::sys::sendfile","Copy up to `count` bytes to `out_fd` from `in_fd` starting at `offset`.",N,[[["rawfd"],["rawfd"],["option",["off_t"]],["usize"]],["result",["usize"]]]],[0,"signal","nix::sys","",N,N],[3,"SigEvent","nix::sys::signal","Used to request asynchronous notification of the completion of certain events, such as POSIX AIO and timers.",N,N],[3,"SignalIterator","","",N,N],[3,"SaFlags","","",N,N],[3,"SigSet","","",N,N],[3,"SigAction","","Action to take on receipt of a signal. Corresponds to `sigaction`.",N,N],[4,"Signal","","",N,N],[13,"SIGHUP","","",53,N],[13,"SIGINT","","",53,N],[13,"SIGQUIT","","",53,N],[13,"SIGILL","","",53,N],[13,"SIGTRAP","","",53,N],[13,"SIGABRT","","",53,N],[13,"SIGBUS","","",53,N],[13,"SIGFPE","","",53,N],[13,"SIGKILL","","",53,N],[13,"SIGUSR1","","",53,N],[13,"SIGSEGV","","",53,N],[13,"SIGUSR2","","",53,N],[13,"SIGPIPE","","",53,N],[13,"SIGALRM","","",53,N],[13,"SIGTERM","","",53,N],[13,"SIGSTKFLT","","",53,N],[13,"SIGCHLD","","",53,N],[13,"SIGCONT","","",53,N],[13,"SIGSTOP","","",53,N],[13,"SIGTSTP","","",53,N],[13,"SIGTTIN","","",53,N],[13,"SIGTTOU","","",53,N],[13,"SIGURG","","",53,N],[13,"SIGXCPU","","",53,N],[13,"SIGXFSZ","","",53,N],[13,"SIGVTALRM","","",53,N],[13,"SIGPROF","","",53,N],[13,"SIGWINCH","","",53,N],[13,"SIGIO","","",53,N],[13,"SIGPWR","","",53,N],[13,"SIGSYS","","",53,N],[4,"SigmaskHow","","",N,N],[13,"SIG_BLOCK","","",54,N],[13,"SIG_UNBLOCK","","",54,N],[13,"SIG_SETMASK","","",54,N],[4,"SigHandler","","A signal handler.",N,N],[13,"SigDfl","","Default signal handling.",55,N],[13,"SigIgn","","Request that the signal be ignored.",55,N],[13,"Handler","","Use the given signal-catching function, which takes in the signal.",55,N],[13,"SigAction","","Use the given signal-catching function, which takes in the signal, information about how the signal was generated, and a pointer to the threads `ucontext_t`.",55,N],[4,"SigevNotify","","Used to request asynchronous notification of certain events, for example, with POSIX AIO, POSIX message queues, and POSIX timers.",N,N],[13,"SigevNone","","No notification will be delivered",56,N],[13,"SigevSignal","","The signal given by `signal` will be delivered to the process.  The value in `si_value` will be present in the `si_value` field of the `siginfo_t` structure of the queued signal.",56,N],[12,"signal","nix::sys::signal::SigevNotify","",56,N],[12,"si_value","","",56,N],[13,"SigevThreadId","nix::sys::signal","The signal `signal` is queued to the thread whose LWP ID is given in `thread_id`.  The value stored in `si_value` will be present in the `si_value` of the `siginfo_t` structure of the queued signal.",56,N],[12,"signal","nix::sys::signal::SigevNotify","",56,N],[12,"thread_id","","",56,N],[12,"si_value","","",56,N],[5,"sigaction","nix::sys::signal","Changes the action taken by a process on receipt of a specific signal.",N,[[["signal"],["sigaction"]],["result",["sigaction"]]]],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",N,[[["sigmaskhow"],["option",["sigset"]],["option",["sigset"]]],["result"]]],[5,"sigprocmask","","Examine and change blocked signals.",N,[[["sigmaskhow"],["option",["sigset"]],["option",["sigset"]]],["result"]]],[5,"kill","","",N,[[["pid"],["t"]],["result"]]],[5,"raise","","",N,[[["signal"]],["result"]]],[11,"clone","","",57,[[["self"]],["sigevent"]]],[11,"new","","Note: this constructor does not allow the user to set the `sigev_notify_kevent_flags` field.  That's considered ok because on FreeBSD at least those flags don't do anything useful.  That field is part of a union that shares space with the more genuinely useful fields.",57,[[["sigevnotify"]],["sigevent"]]],[11,"sigevent","","",57,[[["self"]],["sigevent"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"from","","",57,[[["sigevent"]],["self"]]],[6,"type_of_thread_id","","",N,N],[17,"NSIG","","",N,N],[17,"SIGIOT","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGUNUSED","","",N,N],[11,"clone","","",53,[[["self"]],["signal"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"hash","","",53,N],[11,"cmp","","",53,[[["self"],["signal"]],["ordering"]]],[11,"eq","","",53,[[["self"],["signal"]],["bool"]]],[11,"partial_cmp","","",53,[[["self"],["signal"]],["option",["ordering"]]]],[11,"clone","","",58,[[["self"]],["signaliterator"]]],[11,"next","","",58,[[["self"]],["option",["signal"]]]],[11,"iterator","","",53,[[],["signaliterator"]]],[11,"from_c_int","","",53,[[["c_int"]],["result",["signal"]]]],[11,"eq","","",59,[[["self"],["saflags"]],["bool"]]],[11,"ne","","",59,[[["self"],["saflags"]],["bool"]]],[11,"clone","","",59,[[["self"]],["saflags"]]],[11,"partial_cmp","","",59,[[["self"],["saflags"]],["option",["ordering"]]]],[11,"lt","","",59,[[["self"],["saflags"]],["bool"]]],[11,"le","","",59,[[["self"],["saflags"]],["bool"]]],[11,"gt","","",59,[[["self"],["saflags"]],["bool"]]],[11,"ge","","",59,[[["self"],["saflags"]],["bool"]]],[11,"cmp","","",59,[[["self"],["saflags"]],["ordering"]]],[11,"hash","","",59,N],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[18,"SA_NOCLDSTOP","","",59,N],[18,"SA_NOCLDWAIT","","",59,N],[18,"SA_NODEFER","","",59,N],[18,"SA_ONSTACK","","",59,N],[18,"SA_RESETHAND","","",59,N],[18,"SA_RESTART","","",59,N],[18,"SA_SIGINFO","","",59,N],[11,"empty","","Returns an empty set of flags.",59,[[],["saflags"]]],[11,"all","","Returns the set containing all flags.",59,[[],["saflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",59,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",59,[[["c_int"]],["option",["saflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",59,[[["c_int"]],["saflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",59,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",59,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59,[[["self"],["saflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59,[[["self"],["saflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",59,[[["self"],["saflags"]]]],[11,"remove","","Removes the specified flags in-place.",59,[[["self"],["saflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",59,[[["self"],["saflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",59,[[["self"],["saflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",59,[[["self"],["saflags"]],["saflags"]]],[11,"bitor_assign","","Adds the set of flags.",59,[[["self"],["saflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59,[[["self"],["saflags"]],["saflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",59,[[["self"],["saflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",59,[[["self"],["saflags"]],["saflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",59,[[["self"],["saflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",59,[[["self"],["saflags"]],["saflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",59,[[["self"],["saflags"]]]],[11,"not","","Returns the complement of this set of flags.",59,[[["self"]],["saflags"]]],[11,"extend","","",59,[[["self"],["t"]]]],[11,"from_iter","","",59,[[["t"]],["saflags"]]],[11,"clone","","",54,[[["self"]],["sigmaskhow"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"hash","","",54,N],[11,"cmp","","",54,[[["self"],["sigmaskhow"]],["ordering"]]],[11,"eq","","",54,[[["self"],["sigmaskhow"]],["bool"]]],[11,"partial_cmp","","",54,[[["self"],["sigmaskhow"]],["option",["ordering"]]]],[11,"clone","","",60,[[["self"]],["sigset"]]],[11,"all","","",60,[[],["sigset"]]],[11,"empty","","",60,[[],["sigset"]]],[11,"add","","",60,[[["self"],["signal"]]]],[11,"clear","","",60,[[["self"]]]],[11,"remove","","",60,[[["self"],["signal"]]]],[11,"contains","","",60,[[["self"],["signal"]],["bool"]]],[11,"extend","","",60,[[["self"],["sigset"]]]],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",60,[[],["result",["sigset"]]]],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",60,[[["self"]],["result"]]],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",60,[[["self"]],["result"]]],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",60,[[["self"]],["result"]]],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",60,[[["self"],["sigmaskhow"]],["result",["sigset"]]]],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",60,[[["self"]],["result",["signal"]]]],[11,"as_ref","","",60,[[["self"]],["sigset_t"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"clone","","",55,[[["self"]],["sighandler"]]],[11,"eq","","",55,[[["self"],["sighandler"]],["bool"]]],[11,"ne","","",55,[[["self"],["sighandler"]],["bool"]]],[11,"clone","","",61,[[["self"]],["sigaction"]]],[11,"new","","Creates a new action.",61,[[["sighandler"],["saflags"],["sigset"]],["sigaction"]]],[11,"flags","","Returns the flags set on the action.",61,[[["self"]],["saflags"]]],[11,"mask","","Returns the set of signals that are blocked during execution of the action's signal-catching function.",61,[[["self"]],["sigset"]]],[11,"handler","","Returns the action's handler.",61,[[["self"]],["sighandler"]]],[11,"clone","","",56,[[["self"]],["sigevnotify"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["sigevnotify"]],["bool"]]],[11,"ne","","",56,[[["self"],["sigevnotify"]],["bool"]]],[0,"signalfd","nix::sys","Interface for the `signalfd` syscall.",N,N],[3,"siginfo","nix::sys::signalfd","",N,N],[12,"ssi_signo","","",62,N],[12,"ssi_errno","","",62,N],[12,"ssi_code","","",62,N],[12,"ssi_pid","","",62,N],[12,"ssi_uid","","",62,N],[12,"ssi_fd","","",62,N],[12,"ssi_tid","","",62,N],[12,"ssi_band","","",62,N],[12,"ssi_overrun","","",62,N],[12,"ssi_trapno","","",62,N],[12,"ssi_status","","",62,N],[12,"ssi_int","","",62,N],[12,"ssi_ptr","","",62,N],[12,"ssi_utime","","",62,N],[12,"ssi_stime","","",62,N],[12,"ssi_addr","","",62,N],[3,"SfdFlags","","",N,N],[3,"SignalFd","","A helper struct for creating, reading and closing a `signalfd` instance.",N,N],[5,"signalfd","","Creates a new file descriptor for reading signals.",N,[[["rawfd"],["sigset"],["sfdflags"]],["result",["rawfd"]]]],[17,"SIGNALFD_NEW","","",N,N],[17,"SIGNALFD_SIGINFO_SIZE","","",N,N],[11,"eq","","",63,[[["self"],["sfdflags"]],["bool"]]],[11,"ne","","",63,[[["self"],["sfdflags"]],["bool"]]],[11,"clone","","",63,[[["self"]],["sfdflags"]]],[11,"partial_cmp","","",63,[[["self"],["sfdflags"]],["option",["ordering"]]]],[11,"lt","","",63,[[["self"],["sfdflags"]],["bool"]]],[11,"le","","",63,[[["self"],["sfdflags"]],["bool"]]],[11,"gt","","",63,[[["self"],["sfdflags"]],["bool"]]],[11,"ge","","",63,[[["self"],["sfdflags"]],["bool"]]],[11,"cmp","","",63,[[["self"],["sfdflags"]],["ordering"]]],[11,"hash","","",63,N],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[18,"SFD_NONBLOCK","","",63,N],[18,"SFD_CLOEXEC","","",63,N],[11,"empty","","Returns an empty set of flags.",63,[[],["sfdflags"]]],[11,"all","","Returns the set containing all flags.",63,[[],["sfdflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",63,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",63,[[["c_int"]],["option",["sfdflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",63,[[["c_int"]],["sfdflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",63,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",63,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",63,[[["self"],["sfdflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",63,[[["self"],["sfdflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",63,[[["self"],["sfdflags"]]]],[11,"remove","","Removes the specified flags in-place.",63,[[["self"],["sfdflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",63,[[["self"],["sfdflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",63,[[["self"],["sfdflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",63,[[["self"],["sfdflags"]],["sfdflags"]]],[11,"bitor_assign","","Adds the set of flags.",63,[[["self"],["sfdflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",63,[[["self"],["sfdflags"]],["sfdflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",63,[[["self"],["sfdflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",63,[[["self"],["sfdflags"]],["sfdflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",63,[[["self"],["sfdflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",63,[[["self"],["sfdflags"]],["sfdflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",63,[[["self"],["sfdflags"]]]],[11,"not","","Returns the complement of this set of flags.",63,[[["self"]],["sfdflags"]]],[11,"extend","","",63,[[["self"],["t"]]]],[11,"from_iter","","",63,[[["t"]],["sfdflags"]]],[11,"clone","","",64,[[["self"]],["signalfd"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"hash","","",64,N],[11,"eq","","",64,[[["self"],["signalfd"]],["bool"]]],[11,"ne","","",64,[[["self"],["signalfd"]],["bool"]]],[11,"new","","",64,[[["sigset"]],["result",["signalfd"]]]],[11,"with_flags","","",64,[[["sigset"],["sfdflags"]],["result",["signalfd"]]]],[11,"set_mask","","",64,[[["self"],["sigset"]],["result"]]],[11,"read_signal","","",64,[[["self"]],["result",["option"]]]],[11,"drop","","",64,[[["self"]]]],[11,"as_raw_fd","","",64,[[["self"]],["rawfd"]]],[11,"next","","",64,[[["self"]],["option"]]],[0,"socket","nix::sys","Socket interface functions",N,N],[3,"cmsghdr","nix::sys::socket","",N,N],[12,"cmsg_len","","",65,N],[12,"cmsg_level","","",65,N],[12,"cmsg_type","","",65,N],[3,"msghdr","","",N,N],[12,"msg_name","","",66,N],[12,"msg_namelen","","",66,N],[12,"msg_iov","","",66,N],[12,"msg_iovlen","","",66,N],[12,"msg_control","","",66,N],[12,"msg_controllen","","",66,N],[12,"msg_flags","","",66,N],[6,"sa_family_t","","",N,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",67,N],[12,"sa_data","","",67,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",68,N],[12,"sin_port","","",68,N],[12,"sin_addr","","",68,N],[12,"sin_zero","","",68,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",69,N],[12,"sin6_port","","",69,N],[12,"sin6_flowinfo","","",69,N],[12,"sin6_addr","","",69,N],[12,"sin6_scope_id","","",69,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",70,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",71,N],[12,"sun_path","","",71,N],[3,"UnixAddr","","A wrapper around `sockaddr_un`.",N,N],[12,"0","","",72,N],[12,"1","","",72,N],[3,"Ipv4Addr","","",N,N],[12,"0","","",73,N],[3,"Ipv6Addr","","",N,N],[12,"0","","",74,N],[3,"LinkAddr","","Hardware Address",N,N],[12,"0","","",75,N],[3,"NetlinkAddr","","",N,N],[12,"0","","",76,N],[3,"SockFlag","","Additional socket options",N,N],[3,"MsgFlags","","Flags for send/recv and their relatives",N,N],[3,"UnixCredentials","","Unix credentials of the sending process.",N,N],[3,"IpMembershipRequest","","Request for multicast socket operations",N,N],[3,"Ipv6MembershipRequest","","Request for ipv6 multicast socket operations",N,N],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",N,N],[3,"RecvMsg","","",N,N],[12,"bytes","","",77,N],[12,"address","","",77,N],[12,"flags","","",77,N],[3,"CmsgIterator","","",N,N],[4,"AddressFamily","","These constants specify the protocol family to be used in `socket` and `socketpair`",N,N],[13,"Unix","","Local communication (see `unix(7)`)",78,N],[13,"Inet","","IPv4 Internet protocols (see `ip(7)`)",78,N],[13,"Inet6","","IPv6 Internet protocols (see `ipv6(7)`)",78,N],[13,"Netlink","","Kernel user interface device (see `netlink(7)`)",78,N],[13,"Packet","","Low level packet interface (see `packet(7)`)",78,N],[13,"Ax25","","Amateur radio AX.25 protocol",78,N],[13,"Ipx","","IPX - Novell protocols",78,N],[13,"AppleTalk","","AppleTalk",78,N],[13,"NetRom","","",78,N],[13,"Bridge","","",78,N],[13,"AtmPvc","","Access to raw ATM PVCs",78,N],[13,"X25","","ITU-T X.25 / ISO-8208 protocol (see `x25(7)`)",78,N],[13,"Rose","","",78,N],[13,"Decnet","","",78,N],[13,"NetBeui","","",78,N],[13,"Security","","",78,N],[13,"Key","","",78,N],[13,"Ash","","",78,N],[13,"Econet","","",78,N],[13,"AtmSvc","","",78,N],[13,"Rds","","",78,N],[13,"Sna","","",78,N],[13,"Irda","","",78,N],[13,"Pppox","","",78,N],[13,"Wanpipe","","",78,N],[13,"Llc","","",78,N],[13,"Ib","","",78,N],[13,"Mpls","","",78,N],[13,"Can","","",78,N],[13,"Tipc","","",78,N],[13,"Bluetooth","","",78,N],[13,"Iucv","","",78,N],[13,"RxRpc","","",78,N],[13,"Isdn","","",78,N],[13,"Phonet","","",78,N],[13,"Ieee802154","","",78,N],[13,"Caif","","",78,N],[13,"Alg","","Interface to kernel crypto API",78,N],[13,"Nfc","","",78,N],[13,"Vsock","","",78,N],[4,"SockAddr","","Represents a socket address",N,N],[13,"Inet","","",79,N],[13,"Unix","","",79,N],[13,"Netlink","","",79,N],[13,"Link","","Datalink address (MAC)",79,N],[4,"InetAddr","","",N,N],[13,"V4","","",80,N],[13,"V6","","",80,N],[4,"IpAddr","","",N,N],[13,"V4","","",81,N],[13,"V6","","",81,N],[4,"SockType","","These constants are used to specify the communication semantics when creating a socket with `socket()`",N,N],[13,"Stream","","Provides sequenced, reliable, two-way, connection- based byte streams.  An out-of-band data transmission mechanism may be supported.",82,N],[13,"Datagram","","Supports datagrams (connectionless, unreliable messages of a fixed maximum length).",82,N],[13,"SeqPacket","","Provides a sequenced, reliable, two-way connection- based data transmission path for datagrams of fixed maximum length; a consumer is required to read an entire packet with each input system call.",82,N],[13,"Raw","","Provides raw network protocol access.",82,N],[13,"Rdm","","Provides a reliable datagram layer that does not guarantee ordering.",82,N],[4,"SockProtocol","","Constants used in `socket` and `socketpair` to specify the protocol to use.",N,N],[13,"Tcp","","TCP protocol (ip(7))",83,N],[13,"Udp","","UDP protocol (ip(7))",83,N],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",N,N],[13,"ScmRights","","A message of type `SCM_RIGHTS`, containing an array of file descriptors passed between processes.",84,N],[13,"ScmTimestamp","","A message of type `SCM_TIMESTAMP`, containing the time the packet was received by the kernel.",84,N],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",N,N],[13,"Socket","","",85,N],[13,"Tcp","","",85,N],[13,"Ip","","",85,N],[13,"Ipv6","","",85,N],[13,"Udp","","",85,N],[13,"Netlink","","",85,N],[4,"Shutdown","","",N,N],[13,"Read","","Further receptions will be disallowed.",86,N],[13,"Write","","Further  transmissions will be disallowed.",86,N],[13,"Both","","Further receptions and transmissions will be disallowed.",86,N],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",N,N],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",N,N],[5,"socket","","Create an endpoint for communication",N,[[["addressfamily"],["socktype"],["sockflag"],["t"]],["result",["rawfd"]]]],[5,"socketpair","","Create a pair of connected sockets",N,[[["addressfamily"],["socktype"],["t"],["sockflag"]],["result"]]],[5,"listen","","Listen for connections on a socket",N,[[["rawfd"],["usize"]],["result"]]],[5,"bind","","Bind a name to a socket",N,[[["rawfd"],["sockaddr"]],["result"]]],[5,"accept","","Accept a connection on a socket",N,[[["rawfd"]],["result",["rawfd"]]]],[5,"accept4","","Accept a connection on a socket",N,[[["rawfd"],["sockflag"]],["result",["rawfd"]]]],[5,"connect","","Initiate a connection on a socket",N,[[["rawfd"],["sockaddr"]],["result"]]],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",N,N],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",N,N],[5,"sendto","","Send a message to a socket",N,N],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",N,N],[5,"getsockopt","","Get the current value for the requested socket option",N,[[["rawfd"],["o"]],["result"]]],[5,"setsockopt","","Sets the value for the requested socket option",N,N],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",N,[[["rawfd"]],["result",["sockaddr"]]]],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",N,[[["rawfd"]],["result",["sockaddr"]]]],[5,"sockaddr_storage_to_addr","","Return the appropriate `SockAddr` type from a `sockaddr_storage` of a certain size.  In C this would usually be done by casting.  The `len` argument should be the number of bytes in the `sockaddr_storage` that are actually allocated and valid.  It must be at least as large as all the useful parts of the structure.  Note that in the case of a `sockaddr_un`, `len` need not include the terminating null.",N,[[["sockaddr_storage"],["usize"]],["result",["sockaddr"]]]],[5,"shutdown","","Shut down part of a full-duplex connection.",N,[[["rawfd"],["shutdown"]],["result"]]],[11,"clone","","",76,[[["self"]],["netlinkaddr"]]],[11,"eq","","",76,[[["self"],["self"]],["bool"]]],[11,"hash","","",76,[[["self"],["h"]]]],[11,"new","","",76,[[["u32"],["u32"]],["netlinkaddr"]]],[11,"pid","","",76,[[["self"]],["u32"]]],[11,"groups","","",76,[[["self"]],["u32"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"clone","","",75,[[["self"]],["linkaddr"]]],[11,"family","","Always AF_PACKET",75,[[["self"]],["addressfamily"]]],[11,"protocol","","Physical-layer protocol",75,[[["self"]],["u16"]]],[11,"ifindex","","Interface number",75,[[["self"]],["usize"]]],[11,"hatype","","ARP hardware type",75,[[["self"]],["u16"]]],[11,"pkttype","","Packet type",75,[[["self"]],["u8"]]],[11,"halen","","Length of MAC address",75,[[["self"]],["usize"]]],[11,"addr","","Physical-layer address (MAC)",75,N],[11,"eq","","",75,[[["self"],["self"]],["bool"]]],[11,"hash","","",75,[[["self"],["h"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["addressfamily"]]],[11,"eq","","",78,[[["self"],["addressfamily"]],["bool"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"hash","","",78,N],[11,"from_i32","","Create a new `AddressFamily` from an integer value retrieved from `libc`, usually from the `sa_family` field of a `sockaddr`.",78,[[["i32"]],["option",["addressfamily"]]]],[11,"from_std","","",80,[[["socketaddr"]],["inetaddr"]]],[11,"new","","",80,[[["ipaddr"],["u16"]],["inetaddr"]]],[11,"ip","","Gets the IP address associated with this socket address.",80,[[["self"]],["ipaddr"]]],[11,"port","","Gets the port number associated with this socket address",80,[[["self"]],["u16"]]],[11,"to_std","","",80,[[["self"]],["socketaddr"]]],[11,"to_str","","",80,[[["self"]],["string"]]],[11,"eq","","",80,[[["self"],["inetaddr"]],["bool"]]],[11,"hash","","",80,[[["self"],["h"]]]],[11,"clone","","",80,[[["self"]],["inetaddr"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"clone","","",81,[[["self"]],["ipaddr"]]],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",81,[[["u8"],["u8"],["u8"],["u8"]],["ipaddr"]]],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",81,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["ipaddr"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"new","","",73,[[["u8"],["u8"],["u8"],["u8"]],["ipv4addr"]]],[11,"from_std","","",73,[[["ipv4addr"]],["ipv4addr"]]],[11,"any","","",73,[[],["ipv4addr"]]],[11,"octets","","",73,N],[11,"to_std","","",73,[[["self"]],["ipv4addr"]]],[11,"eq","","",73,[[["self"],["ipv4addr"]],["bool"]]],[11,"hash","","",73,[[["self"],["h"]]]],[11,"clone","","",73,[[["self"]],["ipv4addr"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"clone","","",74,[[["self"]],["ipv6addr"]]],[11,"new","","",74,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["ipv6addr"]]],[11,"from_std","","",74,[[["ipv6addr"]],["ipv6addr"]]],[11,"segments","","Return the eight 16-bit segments that make up this address",74,N],[11,"to_std","","",74,[[["self"]],["ipv6addr"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new sockaddr_un representing a filesystem path.",72,[[["p"]],["result",["unixaddr"]]]],[11,"new_abstract","","Create a new `sockaddr_un` representing an address in the \"abstract namespace\".",72,N],[11,"path","","If this address represents a filesystem path, return that path.",72,[[["self"]],["option",["path"]]]],[11,"as_abstract","","If this address represents an abstract socket, return its name.",72,[[["self"]],["option"]]],[11,"eq","","",72,[[["self"],["unixaddr"]],["bool"]]],[11,"hash","","",72,[[["self"],["h"]]]],[11,"clone","","",72,[[["self"]],["unixaddr"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"new_inet","","",79,[[["inetaddr"]],["sockaddr"]]],[11,"new_unix","","",79,[[["p"]],["result",["sockaddr"]]]],[11,"new_netlink","","",79,[[["u32"],["u32"]],["sockaddr"]]],[11,"family","","",79,[[["self"]],["addressfamily"]]],[11,"to_str","","",79,[[["self"]],["string"]]],[11,"from_libc_sockaddr","","Creates a `SockAddr` struct from libc's sockaddr.",79,N],[11,"as_ffi_pair","","Conversion from nix's SockAddr type to the underlying libc sockaddr type.",79,N],[11,"eq","","",79,[[["self"],["sockaddr"]],["bool"]]],[11,"hash","","",79,[[["self"],["h"]]]],[11,"clone","","",79,[[["self"]],["sockaddr"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[0,"sockopt","","",N,N],[3,"ReuseAddr","nix::sys::socket::sockopt","",N,N],[3,"ReusePort","","",N,N],[3,"TcpNoDelay","","",N,N],[3,"Linger","","",N,N],[3,"IpAddMembership","","",N,N],[3,"IpDropMembership","","",N,N],[3,"Ipv6AddMembership","","",N,N],[3,"Ipv6DropMembership","","",N,N],[3,"IpMulticastTtl","","",N,N],[3,"IpMulticastLoop","","",N,N],[3,"ReceiveTimeout","","",N,N],[3,"SendTimeout","","",N,N],[3,"Broadcast","","",N,N],[3,"OobInline","","",N,N],[3,"SocketError","","",N,N],[3,"KeepAlive","","",N,N],[3,"PeerCredentials","","",N,N],[3,"TcpKeepIdle","","",N,N],[3,"RcvBuf","","",N,N],[3,"SndBuf","","",N,N],[3,"RcvBufForce","","",N,N],[3,"SndBufForce","","",N,N],[3,"SockType","","",N,N],[3,"AcceptConn","","",N,N],[3,"OriginalDst","","",N,N],[3,"ReceiveTimestamp","","",N,N],[3,"IpTransparent","","",N,N],[3,"Mark","","",N,N],[11,"clone","","",87,[[["self"]],["reuseaddr"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"set","","",87,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",87,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",88,[[["self"]],["reuseport"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"set","","",88,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",88,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",89,[[["self"]],["tcpnodelay"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"set","","",89,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",89,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",90,[[["self"]],["linger"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"set","","",90,[[["self"],["rawfd"],["linger"]],["result"]]],[11,"get","","",90,[[["self"],["rawfd"]],["result",["linger"]]]],[11,"clone","","",91,[[["self"]],["ipaddmembership"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"set","","",91,[[["self"],["rawfd"],["ipmembershiprequest"]],["result"]]],[11,"clone","","",92,[[["self"]],["ipdropmembership"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"set","","",92,[[["self"],["rawfd"],["ipmembershiprequest"]],["result"]]],[11,"clone","","",93,[[["self"]],["ipv6addmembership"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"set","","",93,[[["self"],["rawfd"],["ipv6membershiprequest"]],["result"]]],[11,"clone","","",94,[[["self"]],["ipv6dropmembership"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"set","","",94,[[["self"],["rawfd"],["ipv6membershiprequest"]],["result"]]],[11,"clone","","",95,[[["self"]],["ipmulticastttl"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"set","","",95,[[["self"],["rawfd"],["u8"]],["result"]]],[11,"get","","",95,[[["self"],["rawfd"]],["result",["u8"]]]],[11,"clone","","",96,[[["self"]],["ipmulticastloop"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"set","","",96,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",96,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",97,[[["self"]],["receivetimeout"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"set","","",97,[[["self"],["rawfd"],["timeval"]],["result"]]],[11,"get","","",97,[[["self"],["rawfd"]],["result",["timeval"]]]],[11,"clone","","",98,[[["self"]],["sendtimeout"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"set","","",98,[[["self"],["rawfd"],["timeval"]],["result"]]],[11,"get","","",98,[[["self"],["rawfd"]],["result",["timeval"]]]],[11,"clone","","",99,[[["self"]],["broadcast"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"set","","",99,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",99,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",100,[[["self"]],["oobinline"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"set","","",100,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",100,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",101,[[["self"]],["socketerror"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"get","","",101,[[["self"],["rawfd"]],["result",["i32"]]]],[11,"clone","","",102,[[["self"]],["keepalive"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"set","","",102,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",102,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",103,[[["self"]],["peercredentials"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"get","","",103,[[["self"],["rawfd"]],["result",["unixcredentials"]]]],[11,"clone","","",104,[[["self"]],["tcpkeepidle"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"set","","",104,[[["self"],["rawfd"],["u32"]],["result"]]],[11,"get","","",104,[[["self"],["rawfd"]],["result",["u32"]]]],[11,"clone","","",105,[[["self"]],["rcvbuf"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"set","","",105,[[["self"],["rawfd"],["usize"]],["result"]]],[11,"get","","",105,[[["self"],["rawfd"]],["result",["usize"]]]],[11,"clone","","",106,[[["self"]],["sndbuf"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"set","","",106,[[["self"],["rawfd"],["usize"]],["result"]]],[11,"get","","",106,[[["self"],["rawfd"]],["result",["usize"]]]],[11,"clone","","",107,[[["self"]],["rcvbufforce"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"set","","",107,[[["self"],["rawfd"],["usize"]],["result"]]],[11,"clone","","",108,[[["self"]],["sndbufforce"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"set","","",108,[[["self"],["rawfd"],["usize"]],["result"]]],[11,"clone","","",109,[[["self"]],["socktype"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"get","","",109,[[["self"],["rawfd"]],["result",["socktype"]]]],[11,"clone","","",110,[[["self"]],["acceptconn"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"get","","",110,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",111,[[["self"]],["originaldst"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"get","","",111,[[["self"],["rawfd"]],["result",["sockaddr_in"]]]],[11,"clone","","",112,[[["self"]],["receivetimestamp"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"set","","",112,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",112,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",113,[[["self"]],["iptransparent"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"set","","",113,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",113,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",114,[[["self"]],["mark"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"set","","",114,[[["self"],["rawfd"],["u32"]],["result"]]],[11,"get","","",114,[[["self"],["rawfd"]],["result",["u32"]]]],[8,"GetSockOpt","nix::sys::socket","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",N,N],[16,"Val","","",115,N],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",N,N],[16,"Val","","",116,N],[11,"clone","","",82,[[["self"]],["socktype"]]],[11,"eq","","",82,[[["self"],["socktype"]],["bool"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"clone","","",83,[[["self"]],["sockprotocol"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"hash","","",83,N],[11,"eq","","",83,[[["self"],["sockprotocol"]],["bool"]]],[11,"eq","","",117,[[["self"],["sockflag"]],["bool"]]],[11,"ne","","",117,[[["self"],["sockflag"]],["bool"]]],[11,"clone","","",117,[[["self"]],["sockflag"]]],[11,"partial_cmp","","",117,[[["self"],["sockflag"]],["option",["ordering"]]]],[11,"lt","","",117,[[["self"],["sockflag"]],["bool"]]],[11,"le","","",117,[[["self"],["sockflag"]],["bool"]]],[11,"gt","","",117,[[["self"],["sockflag"]],["bool"]]],[11,"ge","","",117,[[["self"],["sockflag"]],["bool"]]],[11,"cmp","","",117,[[["self"],["sockflag"]],["ordering"]]],[11,"hash","","",117,N],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[18,"SOCK_NONBLOCK","","Set non-blocking mode on the new socket",117,N],[18,"SOCK_CLOEXEC","","Set close-on-exec on the new descriptor",117,N],[11,"empty","","Returns an empty set of flags.",117,[[],["sockflag"]]],[11,"all","","Returns the set containing all flags.",117,[[],["sockflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",117,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",117,[[["c_int"]],["option",["sockflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",117,[[["c_int"]],["sockflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",117,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",117,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",117,[[["self"],["sockflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",117,[[["self"],["sockflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",117,[[["self"],["sockflag"]]]],[11,"remove","","Removes the specified flags in-place.",117,[[["self"],["sockflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",117,[[["self"],["sockflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",117,[[["self"],["sockflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",117,[[["self"],["sockflag"]],["sockflag"]]],[11,"bitor_assign","","Adds the set of flags.",117,[[["self"],["sockflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",117,[[["self"],["sockflag"]],["sockflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",117,[[["self"],["sockflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",117,[[["self"],["sockflag"]],["sockflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",117,[[["self"],["sockflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",117,[[["self"],["sockflag"]],["sockflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",117,[[["self"],["sockflag"]]]],[11,"not","","Returns the complement of this set of flags.",117,[[["self"]],["sockflag"]]],[11,"extend","","",117,[[["self"],["t"]]]],[11,"from_iter","","",117,[[["t"]],["sockflag"]]],[11,"eq","","",118,[[["self"],["msgflags"]],["bool"]]],[11,"ne","","",118,[[["self"],["msgflags"]],["bool"]]],[11,"clone","","",118,[[["self"]],["msgflags"]]],[11,"partial_cmp","","",118,[[["self"],["msgflags"]],["option",["ordering"]]]],[11,"lt","","",118,[[["self"],["msgflags"]],["bool"]]],[11,"le","","",118,[[["self"],["msgflags"]],["bool"]]],[11,"gt","","",118,[[["self"],["msgflags"]],["bool"]]],[11,"ge","","",118,[[["self"],["msgflags"]],["bool"]]],[11,"cmp","","",118,[[["self"],["msgflags"]],["ordering"]]],[11,"hash","","",118,N],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[18,"MSG_OOB","","Sends or requests out-of-band data on sockets that support this notion (e.g., of type `Stream`); the underlying protocol must also support out-of-band data.",118,N],[18,"MSG_PEEK","","Peeks at an incoming message. The data is treated as unread and the next `recv()` or similar function shall still return this data.",118,N],[18,"MSG_DONTWAIT","","Enables nonblocking operation; if the operation would block, `EAGAIN` or `EWOULDBLOCK` is returned.  This provides similar behavior to setting the `O_NONBLOCK` flag (via the `fcntl` `F_SETFL` operation), but differs in that `MSG_DONTWAIT` is a per- call option, whereas `O_NONBLOCK` is a setting on the open file description (see open(2)), which will affect all threads in the calling process and as well as other processes that hold file descriptors referring to the same open file description.",118,N],[18,"MSG_CTRUNC","","Receive flags: Control Data was discarded (buffer too small)",118,N],[18,"MSG_TRUNC","","For raw (`Packet`), Internet datagram (since Linux 2.4.27/2.6.8), netlink (since Linux 2.6.22) and UNIX datagram (since Linux 3.4) sockets: return the real length of the packet or datagram, even when it was longer than the passed buffer. Not implemented for UNIX domain (unix(7)) sockets.",118,N],[18,"MSG_EOR","","Terminates a record (when this notion is supported, as for sockets of type `SeqPacket`).",118,N],[18,"MSG_ERRQUEUE","","This flag specifies that queued errors should be received from the socket error queue. (For more details, see recvfrom(2))",118,N],[18,"MSG_CMSG_CLOEXEC","","Set the `close-on-exec` flag for the file descriptor received via a UNIX domain file descriptor using the `SCM_RIGHTS` operation (described in unix(7)). This flag is useful for the same reasons as the `O_CLOEXEC` flag of open(2).",118,N],[11,"empty","","Returns an empty set of flags.",118,[[],["msgflags"]]],[11,"all","","Returns the set containing all flags.",118,[[],["msgflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",118,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",118,[[["c_int"]],["option",["msgflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",118,[[["c_int"]],["msgflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",118,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",118,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",118,[[["self"],["msgflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",118,[[["self"],["msgflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",118,[[["self"],["msgflags"]]]],[11,"remove","","Removes the specified flags in-place.",118,[[["self"],["msgflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",118,[[["self"],["msgflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",118,[[["self"],["msgflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",118,[[["self"],["msgflags"]],["msgflags"]]],[11,"bitor_assign","","Adds the set of flags.",118,[[["self"],["msgflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",118,[[["self"],["msgflags"]],["msgflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",118,[[["self"],["msgflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",118,[[["self"],["msgflags"]],["msgflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",118,[[["self"],["msgflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",118,[[["self"],["msgflags"]],["msgflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",118,[[["self"],["msgflags"]]]],[11,"not","","Returns the complement of this set of flags.",118,[[["self"]],["msgflags"]]],[11,"extend","","",118,[[["self"],["t"]]]],[11,"from_iter","","",118,[[["t"]],["msgflags"]]],[11,"clone","","",119,[[["self"]],["unixcredentials"]]],[11,"pid","","Returns the process identifier",119,[[["self"]],["pid_t"]]],[11,"uid","","Returns the user identifier",119,[[["self"]],["uid_t"]]],[11,"gid","","Returns the group identifier",119,[[["self"]],["gid_t"]]],[11,"eq","","",119,[[["self"],["self"]],["bool"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"clone","","",120,[[["self"]],["ipmembershiprequest"]]],[11,"new","","Instantiate a new `IpMembershipRequest`",120,[[["ipv4addr"],["option",["ipv4addr"]]],["self"]]],[11,"eq","","",120,[[["self"],["self"]],["bool"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"clone","","",121,[[["self"]],["ipv6membershiprequest"]]],[11,"new","","Instantiate a new `Ipv6MembershipRequest`",121,[[["ipv6addr"]],["self"]]],[11,"eq","","",121,[[["self"],["self"]],["bool"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a CmsgSpace. The structure is used only for space, so the fields are uninitialized.",122,[[],["self"]]],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",77,[[["self"]],["cmsgiterator"]]],[11,"next","","",123,[[["self"]],["option",["controlmessage"]]]],[11,"clone","","",85,[[["self"]],["socklevel"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"hash","","",85,N],[11,"eq","","",85,[[["self"],["socklevel"]],["bool"]]],[11,"clone","","",86,[[["self"]],["shutdown"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"hash","","",86,N],[11,"eq","","",86,[[["self"],["shutdown"]],["bool"]]],[0,"stat","nix::sys","",N,N],[6,"dev_t","nix::sys::stat","",N,N],[3,"FileStat","","",N,N],[12,"st_dev","","",124,N],[12,"st_ino","","",124,N],[12,"st_nlink","","",124,N],[12,"st_mode","","",124,N],[12,"st_uid","","",124,N],[12,"st_gid","","",124,N],[12,"st_rdev","","",124,N],[12,"st_size","","",124,N],[12,"st_blksize","","",124,N],[12,"st_blocks","","",124,N],[12,"st_atime","","",124,N],[12,"st_atime_nsec","","",124,N],[12,"st_mtime","","",124,N],[12,"st_mtime_nsec","","",124,N],[12,"st_ctime","","",124,N],[12,"st_ctime_nsec","","",124,N],[5,"FileStat","","",N,N],[3,"SFlag","","",N,N],[3,"Mode","","",N,N],[4,"FchmodatFlags","","Flags for `fchmodat` function.",N,N],[13,"FollowSymlink","","",125,N],[13,"NoFollowSymlink","","",125,N],[5,"mknod","","",N,[[["p"],["sflag"],["mode"],["dev_t"]],["result"]]],[5,"major","","",N,[[["dev_t"]],["u64"]]],[5,"minor","","",N,[[["dev_t"]],["u64"]]],[5,"makedev","","",N,[[["u64"],["u64"]],["dev_t"]]],[5,"umask","","",N,[[["mode"]],["mode"]]],[5,"stat","","",N,[[["p"]],["result",["filestat"]]]],[5,"lstat","","",N,[[["p"]],["result",["filestat"]]]],[5,"fstat","","",N,[[["rawfd"]],["result",["filestat"]]]],[5,"fstatat","","",N,[[["rawfd"],["p"],["atflags"]],["result",["filestat"]]]],[5,"fchmod","","Change the file permission bits of the file specified by a file descriptor.",N,[[["rawfd"],["mode"]],["result"]]],[5,"fchmodat","","Change the file permission bits.",N,[[["option",["rawfd"]],["p"],["mode"],["fchmodatflags"]],["result"]]],[11,"eq","","",126,[[["self"],["sflag"]],["bool"]]],[11,"ne","","",126,[[["self"],["sflag"]],["bool"]]],[11,"clone","","",126,[[["self"]],["sflag"]]],[11,"partial_cmp","","",126,[[["self"],["sflag"]],["option",["ordering"]]]],[11,"lt","","",126,[[["self"],["sflag"]],["bool"]]],[11,"le","","",126,[[["self"],["sflag"]],["bool"]]],[11,"gt","","",126,[[["self"],["sflag"]],["bool"]]],[11,"ge","","",126,[[["self"],["sflag"]],["bool"]]],[11,"cmp","","",126,[[["self"],["sflag"]],["ordering"]]],[11,"hash","","",126,N],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[18,"S_IFIFO","","",126,N],[18,"S_IFCHR","","",126,N],[18,"S_IFDIR","","",126,N],[18,"S_IFBLK","","",126,N],[18,"S_IFREG","","",126,N],[18,"S_IFLNK","","",126,N],[18,"S_IFSOCK","","",126,N],[18,"S_IFMT","","",126,N],[11,"empty","","Returns an empty set of flags.",126,[[],["sflag"]]],[11,"all","","Returns the set containing all flags.",126,[[],["sflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",126,[[["self"]],["mode_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",126,[[["mode_t"]],["option",["sflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",126,[[["mode_t"]],["sflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",126,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",126,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",126,[[["self"],["sflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",126,[[["self"],["sflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",126,[[["self"],["sflag"]]]],[11,"remove","","Removes the specified flags in-place.",126,[[["self"],["sflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",126,[[["self"],["sflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",126,[[["self"],["sflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",126,[[["self"],["sflag"]],["sflag"]]],[11,"bitor_assign","","Adds the set of flags.",126,[[["self"],["sflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",126,[[["self"],["sflag"]],["sflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",126,[[["self"],["sflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",126,[[["self"],["sflag"]],["sflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",126,[[["self"],["sflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",126,[[["self"],["sflag"]],["sflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",126,[[["self"],["sflag"]]]],[11,"not","","Returns the complement of this set of flags.",126,[[["self"]],["sflag"]]],[11,"extend","","",126,[[["self"],["t"]]]],[11,"from_iter","","",126,[[["t"]],["sflag"]]],[11,"eq","","",127,[[["self"],["mode"]],["bool"]]],[11,"ne","","",127,[[["self"],["mode"]],["bool"]]],[11,"clone","","",127,[[["self"]],["mode"]]],[11,"partial_cmp","","",127,[[["self"],["mode"]],["option",["ordering"]]]],[11,"lt","","",127,[[["self"],["mode"]],["bool"]]],[11,"le","","",127,[[["self"],["mode"]],["bool"]]],[11,"gt","","",127,[[["self"],["mode"]],["bool"]]],[11,"ge","","",127,[[["self"],["mode"]],["bool"]]],[11,"cmp","","",127,[[["self"],["mode"]],["ordering"]]],[11,"hash","","",127,N],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[18,"S_IRWXU","","",127,N],[18,"S_IRUSR","","",127,N],[18,"S_IWUSR","","",127,N],[18,"S_IXUSR","","",127,N],[18,"S_IRWXG","","",127,N],[18,"S_IRGRP","","",127,N],[18,"S_IWGRP","","",127,N],[18,"S_IXGRP","","",127,N],[18,"S_IRWXO","","",127,N],[18,"S_IROTH","","",127,N],[18,"S_IWOTH","","",127,N],[18,"S_IXOTH","","",127,N],[18,"S_ISUID","","",127,N],[18,"S_ISGID","","",127,N],[18,"S_ISVTX","","",127,N],[11,"empty","","Returns an empty set of flags.",127,[[],["mode"]]],[11,"all","","Returns the set containing all flags.",127,[[],["mode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",127,[[["self"]],["mode_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",127,[[["mode_t"]],["option",["mode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",127,[[["mode_t"]],["mode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",127,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",127,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",127,[[["self"],["mode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",127,[[["self"],["mode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",127,[[["self"],["mode"]]]],[11,"remove","","Removes the specified flags in-place.",127,[[["self"],["mode"]]]],[11,"toggle","","Toggles the specified flags in-place.",127,[[["self"],["mode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",127,[[["self"],["mode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",127,[[["self"],["mode"]],["mode"]]],[11,"bitor_assign","","Adds the set of flags.",127,[[["self"],["mode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",127,[[["self"],["mode"]],["mode"]]],[11,"bitxor_assign","","Toggles the set of flags.",127,[[["self"],["mode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",127,[[["self"],["mode"]],["mode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",127,[[["self"],["mode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",127,[[["self"],["mode"]],["mode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",127,[[["self"],["mode"]]]],[11,"not","","Returns the complement of this set of flags.",127,[[["self"]],["mode"]]],[11,"extend","","",127,[[["self"],["t"]]]],[11,"from_iter","","",127,[[["t"]],["mode"]]],[11,"clone","","",125,[[["self"]],["fchmodatflags"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[0,"statfs","nix::sys","",N,N],[5,"statfs","nix::sys::statfs","",N,[[["p"],["statfs"]],["result"]]],[5,"fstatfs","","",N,[[["t"],["statfs"]],["result"]]],[0,"statvfs","nix::sys","Get filesystem statistics",N,N],[3,"FsFlags","nix::sys::statvfs","File system mount Flags",N,N],[3,"Statvfs","","Wrapper around the POSIX `statvfs` struct",N,N],[5,"statvfs","","Return a `Statvfs` object with information about the `path`",N,[[["p"]],["result",["statvfs"]]]],[5,"fstatvfs","","Return a `Statvfs` object with information about `fd`",N,[[["t"]],["result",["statvfs"]]]],[11,"eq","","",128,[[["self"],["fsflags"]],["bool"]]],[11,"ne","","",128,[[["self"],["fsflags"]],["bool"]]],[11,"clone","","",128,[[["self"]],["fsflags"]]],[11,"partial_cmp","","",128,[[["self"],["fsflags"]],["option",["ordering"]]]],[11,"lt","","",128,[[["self"],["fsflags"]],["bool"]]],[11,"le","","",128,[[["self"],["fsflags"]],["bool"]]],[11,"gt","","",128,[[["self"],["fsflags"]],["bool"]]],[11,"ge","","",128,[[["self"],["fsflags"]],["bool"]]],[11,"cmp","","",128,[[["self"],["fsflags"]],["ordering"]]],[11,"hash","","",128,N],[11,"default","","",128,[[],["fsflags"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[18,"ST_RDONLY","","Read Only",128,N],[18,"ST_NOSUID","","Do not allow the set-uid bits to have an effect",128,N],[18,"ST_NODEV","","Do not interpret character or block-special devices",128,N],[18,"ST_NOEXEC","","Do not allow execution of binaries on the filesystem",128,N],[18,"ST_SYNCHRONOUS","","All IO should be done synchronously",128,N],[18,"ST_MANDLOCK","","Allow mandatory locks on the filesystem",128,N],[18,"ST_WRITE","","Write on file/directory/symlink",128,N],[18,"ST_APPEND","","Append-only file",128,N],[18,"ST_IMMUTABLE","","Immutable file",128,N],[18,"ST_NOATIME","","Do not update access times on files",128,N],[18,"ST_NODIRATIME","","Do not update access times on files",128,N],[18,"ST_RELATIME","","Update access time relative to modify/change time",128,N],[11,"empty","","Returns an empty set of flags.",128,[[],["fsflags"]]],[11,"all","","Returns the set containing all flags.",128,[[],["fsflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",128,[[["self"]],["c_ulong"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",128,[[["c_ulong"]],["option",["fsflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",128,[[["c_ulong"]],["fsflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",128,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",128,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",128,[[["self"],["fsflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",128,[[["self"],["fsflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",128,[[["self"],["fsflags"]]]],[11,"remove","","Removes the specified flags in-place.",128,[[["self"],["fsflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",128,[[["self"],["fsflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",128,[[["self"],["fsflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",128,[[["self"],["fsflags"]],["fsflags"]]],[11,"bitor_assign","","Adds the set of flags.",128,[[["self"],["fsflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",128,[[["self"],["fsflags"]],["fsflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",128,[[["self"],["fsflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",128,[[["self"],["fsflags"]],["fsflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",128,[[["self"],["fsflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",128,[[["self"],["fsflags"]],["fsflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",128,[[["self"],["fsflags"]]]],[11,"not","","Returns the complement of this set of flags.",128,[[["self"]],["fsflags"]]],[11,"extend","","",128,[[["self"],["t"]]]],[11,"from_iter","","",128,[[["t"]],["fsflags"]]],[11,"clone","","",129,[[["self"]],["statvfs"]]],[11,"block_size","","get the file system block size",129,[[["self"]],["c_ulong"]]],[11,"fragment_size","","Get the fundamental file system block size",129,[[["self"]],["c_ulong"]]],[11,"blocks","","Get the number of blocks.",129,[[["self"]],["fsblkcnt_t"]]],[11,"blocks_free","","Get the number of free blocks in the file system",129,[[["self"]],["fsblkcnt_t"]]],[11,"blocks_available","","Get the number of free blocks for unprivileged users",129,[[["self"]],["fsblkcnt_t"]]],[11,"files","","Get the total number of file inodes",129,[[["self"]],["fsfilcnt_t"]]],[11,"files_free","","Get the number of free file inodes",129,[[["self"]],["fsfilcnt_t"]]],[11,"files_available","","Get the number of free file inodes for unprivileged users",129,[[["self"]],["fsfilcnt_t"]]],[11,"filesystem_id","","Get the file system id",129,[[["self"]],["c_ulong"]]],[11,"flags","","Get the mount flags",129,[[["self"]],["fsflags"]]],[11,"name_max","","Get the maximum filename length",129,[[["self"]],["c_ulong"]]],[0,"termios","nix::sys","An interface for controlling asynchronous communication ports",N,N],[17,"NCCS","nix::sys::termios","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[3,"Termios","","Stores settings for the termios API",N,N],[12,"input_flags","","Input mode flags (see `termios.c_iflag` documentation)",130,N],[12,"output_flags","","Output mode flags (see `termios.c_oflag` documentation)",130,N],[12,"control_flags","","Control mode flags (see `termios.c_cflag` documentation)",130,N],[12,"local_flags","","Local mode flags (see `termios.c_lflag` documentation)",130,N],[12,"control_chars","","Control characters (see `termios.c_cc` documentation)",130,N],[3,"InputFlags","","Flags for configuring the input mode of a terminal",N,N],[3,"OutputFlags","","Flags for configuring the output mode of a terminal",N,N],[3,"ControlFlags","","Flags for setting the control mode of a terminal",N,N],[3,"LocalFlags","","Flags for setting any local modes",N,N],[4,"BaudRate","","Baud rates supported by the system.",N,N],[13,"B0","","",131,N],[13,"B50","","",131,N],[13,"B75","","",131,N],[13,"B110","","",131,N],[13,"B134","","",131,N],[13,"B150","","",131,N],[13,"B200","","",131,N],[13,"B300","","",131,N],[13,"B600","","",131,N],[13,"B1200","","",131,N],[13,"B1800","","",131,N],[13,"B2400","","",131,N],[13,"B4800","","",131,N],[13,"B9600","","",131,N],[13,"B19200","","",131,N],[13,"B38400","","",131,N],[13,"B57600","","",131,N],[13,"B115200","","",131,N],[13,"B230400","","",131,N],[13,"B460800","","",131,N],[13,"B500000","","",131,N],[13,"B576000","","",131,N],[13,"B921600","","",131,N],[13,"B1000000","","",131,N],[13,"B1152000","","",131,N],[13,"B1500000","","",131,N],[13,"B2000000","","",131,N],[13,"B2500000","","",131,N],[13,"B3000000","","",131,N],[13,"B3500000","","",131,N],[13,"B4000000","","",131,N],[4,"SetArg","","Specify when a port configuration change should occur.",N,N],[13,"TCSANOW","","The change will occur immediately",132,N],[13,"TCSADRAIN","","The change occurs after all output has been written",132,N],[13,"TCSAFLUSH","","Same as `TCSADRAIN`, but will also flush the input buffer",132,N],[4,"FlushArg","","Specify a combination of the input and output buffers to flush",N,N],[13,"TCIFLUSH","","Flush data that was received but not read",133,N],[13,"TCOFLUSH","","Flush data written but not transmitted",133,N],[13,"TCIOFLUSH","","Flush both received data not read and written data not transmitted",133,N],[4,"FlowArg","","Specify how transmission flow should be altered",N,N],[13,"TCOOFF","","Suspend transmission",134,N],[13,"TCOON","","Resume transmission",134,N],[13,"TCIOFF","","Transmit a STOP character, which should disable a connected terminal device",134,N],[13,"TCION","","Transmit a START character, which should re-enable a connected terminal device",134,N],[4,"SpecialCharacterIndices","","Indices into the `termios.c_cc` array for special characters.",N,N],[13,"VDISCARD","","",135,N],[13,"VEOF","","",135,N],[13,"VEOL","","",135,N],[13,"VEOL2","","",135,N],[13,"VERASE","","",135,N],[13,"VINTR","","",135,N],[13,"VKILL","","",135,N],[13,"VLNEXT","","",135,N],[13,"VMIN","","",135,N],[13,"VQUIT","","",135,N],[13,"VREPRINT","","",135,N],[13,"VSTART","","",135,N],[13,"VSTOP","","",135,N],[13,"VSUSP","","",135,N],[13,"VSWTC","","",135,N],[13,"VTIME","","",135,N],[13,"VWERASE","","",135,N],[5,"cfgetispeed","","Get input baud rate (see cfgetispeed(3p)).",N,[[["termios"]],["baudrate"]]],[5,"cfgetospeed","","Get output baud rate (see cfgetospeed(3p)).",N,[[["termios"]],["baudrate"]]],[5,"cfsetispeed","","Set input baud rate (see cfsetispeed(3p)).",N,[[["termios"],["baudrate"]],["result"]]],[5,"cfsetospeed","","Set output baud rate (see cfsetospeed(3p)).",N,[[["termios"],["baudrate"]],["result"]]],[5,"cfsetspeed","","Set both the input and output baud rates (see termios(3)).",N,[[["termios"],["baudrate"]],["result"]]],[5,"cfmakeraw","","Configures the port to something like the \"raw\" mode of the old Version 7 terminal driver (see termios(3)).",N,[[["termios"]]]],[5,"tcgetattr","","Return the configuration of a port tcgetattr(3p)).",N,[[["rawfd"]],["result",["termios"]]]],[5,"tcsetattr","","Set the configuration for a terminal (see tcsetattr(3p)).",N,[[["rawfd"],["setarg"],["termios"]],["result"]]],[5,"tcdrain","","Block until all output data is written (see tcdrain(3p)).",N,[[["rawfd"]],["result"]]],[5,"tcflow","","Suspend or resume the transmission or reception of data (see tcflow(3p)).",N,[[["rawfd"],["flowarg"]],["result"]]],[5,"tcflush","","Discard data in the output or input queue (see tcflush(3p)).",N,[[["rawfd"],["flusharg"]],["result"]]],[5,"tcsendbreak","","Send a break for a specific duration (see tcsendbreak(3p)).",N,[[["rawfd"],["c_int"]],["result"]]],[5,"tcgetsid","","Get the session controlled by the given terminal (see tcgetsid(3)).",N,[[["rawfd"]],["result",["pid"]]]],[11,"clone","","",130,[[["self"]],["termios"]]],[11,"from","","",130,[[["termios"]],["self"]]],[11,"clone","","",131,[[["self"]],["baudrate"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"hash","","",131,N],[11,"cmp","","",131,[[["self"],["baudrate"]],["ordering"]]],[11,"eq","","",131,[[["self"],["baudrate"]],["bool"]]],[11,"partial_cmp","","",131,[[["self"],["baudrate"]],["option",["ordering"]]]],[11,"from","","",131,[[["speed_t"]],["baudrate"]]],[11,"clone","","",132,[[["self"]],["setarg"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"hash","","",132,N],[11,"cmp","","",132,[[["self"],["setarg"]],["ordering"]]],[11,"eq","","",132,[[["self"],["setarg"]],["bool"]]],[11,"partial_cmp","","",132,[[["self"],["setarg"]],["option",["ordering"]]]],[11,"clone","","",133,[[["self"]],["flusharg"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"hash","","",133,N],[11,"cmp","","",133,[[["self"],["flusharg"]],["ordering"]]],[11,"eq","","",133,[[["self"],["flusharg"]],["bool"]]],[11,"partial_cmp","","",133,[[["self"],["flusharg"]],["option",["ordering"]]]],[11,"clone","","",134,[[["self"]],["flowarg"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"hash","","",134,N],[11,"cmp","","",134,[[["self"],["flowarg"]],["ordering"]]],[11,"eq","","",134,[[["self"],["flowarg"]],["bool"]]],[11,"partial_cmp","","",134,[[["self"],["flowarg"]],["option",["ordering"]]]],[11,"clone","","",135,[[["self"]],["specialcharacterindices"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"hash","","",135,N],[11,"cmp","","",135,[[["self"],["specialcharacterindices"]],["ordering"]]],[11,"eq","","",135,[[["self"],["specialcharacterindices"]],["bool"]]],[11,"partial_cmp","","",135,[[["self"],["specialcharacterindices"]],["option",["ordering"]]]],[11,"eq","","",136,[[["self"],["inputflags"]],["bool"]]],[11,"ne","","",136,[[["self"],["inputflags"]],["bool"]]],[11,"clone","","",136,[[["self"]],["inputflags"]]],[11,"partial_cmp","","",136,[[["self"],["inputflags"]],["option",["ordering"]]]],[11,"lt","","",136,[[["self"],["inputflags"]],["bool"]]],[11,"le","","",136,[[["self"],["inputflags"]],["bool"]]],[11,"gt","","",136,[[["self"],["inputflags"]],["bool"]]],[11,"ge","","",136,[[["self"],["inputflags"]],["bool"]]],[11,"cmp","","",136,[[["self"],["inputflags"]],["ordering"]]],[11,"hash","","",136,N],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[18,"IGNBRK","","",136,N],[18,"BRKINT","","",136,N],[18,"IGNPAR","","",136,N],[18,"PARMRK","","",136,N],[18,"INPCK","","",136,N],[18,"ISTRIP","","",136,N],[18,"INLCR","","",136,N],[18,"IGNCR","","",136,N],[18,"ICRNL","","",136,N],[18,"IXON","","",136,N],[18,"IXOFF","","",136,N],[18,"IXANY","","",136,N],[18,"IMAXBEL","","",136,N],[18,"IUTF8","","",136,N],[11,"empty","","Returns an empty set of flags.",136,[[],["inputflags"]]],[11,"all","","Returns the set containing all flags.",136,[[],["inputflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",136,[[["self"]],["tcflag_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",136,[[["tcflag_t"]],["option",["inputflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",136,[[["tcflag_t"]],["inputflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",136,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",136,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",136,[[["self"],["inputflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",136,[[["self"],["inputflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",136,[[["self"],["inputflags"]]]],[11,"remove","","Removes the specified flags in-place.",136,[[["self"],["inputflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",136,[[["self"],["inputflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",136,[[["self"],["inputflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",136,[[["self"],["inputflags"]],["inputflags"]]],[11,"bitor_assign","","Adds the set of flags.",136,[[["self"],["inputflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",136,[[["self"],["inputflags"]],["inputflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",136,[[["self"],["inputflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",136,[[["self"],["inputflags"]],["inputflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",136,[[["self"],["inputflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",136,[[["self"],["inputflags"]],["inputflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",136,[[["self"],["inputflags"]]]],[11,"not","","Returns the complement of this set of flags.",136,[[["self"]],["inputflags"]]],[11,"extend","","",136,[[["self"],["t"]]]],[11,"from_iter","","",136,[[["t"]],["inputflags"]]],[11,"eq","","",137,[[["self"],["outputflags"]],["bool"]]],[11,"ne","","",137,[[["self"],["outputflags"]],["bool"]]],[11,"clone","","",137,[[["self"]],["outputflags"]]],[11,"partial_cmp","","",137,[[["self"],["outputflags"]],["option",["ordering"]]]],[11,"lt","","",137,[[["self"],["outputflags"]],["bool"]]],[11,"le","","",137,[[["self"],["outputflags"]],["bool"]]],[11,"gt","","",137,[[["self"],["outputflags"]],["bool"]]],[11,"ge","","",137,[[["self"],["outputflags"]],["bool"]]],[11,"cmp","","",137,[[["self"],["outputflags"]],["ordering"]]],[11,"hash","","",137,N],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[18,"OPOST","","",137,N],[18,"OLCUC","","",137,N],[18,"ONLCR","","",137,N],[18,"OCRNL","","",137,N],[18,"ONOCR","","",137,N],[18,"ONLRET","","",137,N],[18,"OFILL","","",137,N],[18,"OFDEL","","",137,N],[18,"NL0","","",137,N],[18,"NL1","","",137,N],[18,"CR0","","",137,N],[18,"CR1","","",137,N],[18,"CR2","","",137,N],[18,"CR3","","",137,N],[18,"TAB0","","",137,N],[18,"TAB1","","",137,N],[18,"TAB2","","",137,N],[18,"TAB3","","",137,N],[18,"XTABS","","",137,N],[18,"BS0","","",137,N],[18,"BS1","","",137,N],[18,"VT0","","",137,N],[18,"VT1","","",137,N],[18,"FF0","","",137,N],[18,"FF1","","",137,N],[18,"NLDLY","","",137,N],[18,"CRDLY","","",137,N],[18,"TABDLY","","",137,N],[18,"BSDLY","","",137,N],[18,"VTDLY","","",137,N],[18,"FFDLY","","",137,N],[11,"empty","","Returns an empty set of flags.",137,[[],["outputflags"]]],[11,"all","","Returns the set containing all flags.",137,[[],["outputflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",137,[[["self"]],["tcflag_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",137,[[["tcflag_t"]],["option",["outputflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",137,[[["tcflag_t"]],["outputflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",137,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",137,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",137,[[["self"],["outputflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",137,[[["self"],["outputflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",137,[[["self"],["outputflags"]]]],[11,"remove","","Removes the specified flags in-place.",137,[[["self"],["outputflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",137,[[["self"],["outputflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",137,[[["self"],["outputflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",137,[[["self"],["outputflags"]],["outputflags"]]],[11,"bitor_assign","","Adds the set of flags.",137,[[["self"],["outputflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",137,[[["self"],["outputflags"]],["outputflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",137,[[["self"],["outputflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",137,[[["self"],["outputflags"]],["outputflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",137,[[["self"],["outputflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",137,[[["self"],["outputflags"]],["outputflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",137,[[["self"],["outputflags"]]]],[11,"not","","Returns the complement of this set of flags.",137,[[["self"]],["outputflags"]]],[11,"extend","","",137,[[["self"],["t"]]]],[11,"from_iter","","",137,[[["t"]],["outputflags"]]],[11,"eq","","",138,[[["self"],["controlflags"]],["bool"]]],[11,"ne","","",138,[[["self"],["controlflags"]],["bool"]]],[11,"clone","","",138,[[["self"]],["controlflags"]]],[11,"partial_cmp","","",138,[[["self"],["controlflags"]],["option",["ordering"]]]],[11,"lt","","",138,[[["self"],["controlflags"]],["bool"]]],[11,"le","","",138,[[["self"],["controlflags"]],["bool"]]],[11,"gt","","",138,[[["self"],["controlflags"]],["bool"]]],[11,"ge","","",138,[[["self"],["controlflags"]],["bool"]]],[11,"cmp","","",138,[[["self"],["controlflags"]],["ordering"]]],[11,"hash","","",138,N],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[18,"CS5","","",138,N],[18,"CS6","","",138,N],[18,"CS7","","",138,N],[18,"CS8","","",138,N],[18,"CSTOPB","","",138,N],[18,"CREAD","","",138,N],[18,"PARENB","","",138,N],[18,"PARODD","","",138,N],[18,"HUPCL","","",138,N],[18,"CLOCAL","","",138,N],[18,"CRTSCTS","","",138,N],[18,"CBAUD","","",138,N],[18,"CMSPAR","","",138,N],[18,"CIBAUD","","",138,N],[18,"CBAUDEX","","",138,N],[18,"CSIZE","","",138,N],[11,"empty","","Returns an empty set of flags.",138,[[],["controlflags"]]],[11,"all","","Returns the set containing all flags.",138,[[],["controlflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",138,[[["self"]],["tcflag_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",138,[[["tcflag_t"]],["option",["controlflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",138,[[["tcflag_t"]],["controlflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",138,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",138,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",138,[[["self"],["controlflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",138,[[["self"],["controlflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",138,[[["self"],["controlflags"]]]],[11,"remove","","Removes the specified flags in-place.",138,[[["self"],["controlflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",138,[[["self"],["controlflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",138,[[["self"],["controlflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",138,[[["self"],["controlflags"]],["controlflags"]]],[11,"bitor_assign","","Adds the set of flags.",138,[[["self"],["controlflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",138,[[["self"],["controlflags"]],["controlflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",138,[[["self"],["controlflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",138,[[["self"],["controlflags"]],["controlflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",138,[[["self"],["controlflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",138,[[["self"],["controlflags"]],["controlflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",138,[[["self"],["controlflags"]]]],[11,"not","","Returns the complement of this set of flags.",138,[[["self"]],["controlflags"]]],[11,"extend","","",138,[[["self"],["t"]]]],[11,"from_iter","","",138,[[["t"]],["controlflags"]]],[11,"eq","","",139,[[["self"],["localflags"]],["bool"]]],[11,"ne","","",139,[[["self"],["localflags"]],["bool"]]],[11,"clone","","",139,[[["self"]],["localflags"]]],[11,"partial_cmp","","",139,[[["self"],["localflags"]],["option",["ordering"]]]],[11,"lt","","",139,[[["self"],["localflags"]],["bool"]]],[11,"le","","",139,[[["self"],["localflags"]],["bool"]]],[11,"gt","","",139,[[["self"],["localflags"]],["bool"]]],[11,"ge","","",139,[[["self"],["localflags"]],["bool"]]],[11,"cmp","","",139,[[["self"],["localflags"]],["ordering"]]],[11,"hash","","",139,N],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[18,"ECHOKE","","",139,N],[18,"ECHOE","","",139,N],[18,"ECHOK","","",139,N],[18,"ECHO","","",139,N],[18,"ECHONL","","",139,N],[18,"ECHOPRT","","",139,N],[18,"ECHOCTL","","",139,N],[18,"ISIG","","",139,N],[18,"ICANON","","",139,N],[18,"IEXTEN","","",139,N],[18,"EXTPROC","","",139,N],[18,"TOSTOP","","",139,N],[18,"FLUSHO","","",139,N],[18,"PENDIN","","",139,N],[18,"NOFLSH","","",139,N],[11,"empty","","Returns an empty set of flags.",139,[[],["localflags"]]],[11,"all","","Returns the set containing all flags.",139,[[],["localflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",139,[[["self"]],["tcflag_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",139,[[["tcflag_t"]],["option",["localflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",139,[[["tcflag_t"]],["localflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",139,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",139,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",139,[[["self"],["localflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",139,[[["self"],["localflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",139,[[["self"],["localflags"]]]],[11,"remove","","Removes the specified flags in-place.",139,[[["self"],["localflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",139,[[["self"],["localflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",139,[[["self"],["localflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",139,[[["self"],["localflags"]],["localflags"]]],[11,"bitor_assign","","Adds the set of flags.",139,[[["self"],["localflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",139,[[["self"],["localflags"]],["localflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",139,[[["self"],["localflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",139,[[["self"],["localflags"]],["localflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",139,[[["self"],["localflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",139,[[["self"],["localflags"]],["localflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",139,[[["self"],["localflags"]]]],[11,"not","","Returns the complement of this set of flags.",139,[[["self"]],["localflags"]]],[11,"extend","","",139,[[["self"],["t"]]]],[11,"from_iter","","",139,[[["t"]],["localflags"]]],[0,"time","nix::sys","",N,N],[3,"TimeSpec","nix::sys::time","",N,N],[3,"TimeVal","","",N,N],[8,"TimeValLike","","",N,N],[11,"zero","","",140,[[],["self"]]],[11,"hours","","",140,[[["i64"]],["self"]]],[11,"minutes","","",140,[[["i64"]],["self"]]],[10,"seconds","","",140,[[["i64"]],["self"]]],[10,"milliseconds","","",140,[[["i64"]],["self"]]],[10,"microseconds","","",140,[[["i64"]],["self"]]],[10,"nanoseconds","","",140,[[["i64"]],["self"]]],[11,"num_hours","","",140,[[["self"]],["i64"]]],[11,"num_minutes","","",140,[[["self"]],["i64"]]],[10,"num_seconds","","",140,[[["self"]],["i64"]]],[10,"num_milliseconds","","",140,[[["self"]],["i64"]]],[10,"num_microseconds","","",140,[[["self"]],["i64"]]],[10,"num_nanoseconds","","",140,[[["self"]],["i64"]]],[11,"clone","","",141,[[["self"]],["timespec"]]],[11,"as_ref","","",141,[[["self"]],["timespec"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"eq","","",141,[[["self"],["timespec"]],["bool"]]],[11,"cmp","","",141,[[["self"],["timespec"]],["ordering"]]],[11,"partial_cmp","","",141,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"seconds","","",141,[[["i64"]],["timespec"]]],[11,"milliseconds","","",141,[[["i64"]],["timespec"]]],[11,"microseconds","","Makes a new `TimeSpec` with given number of microseconds.",141,[[["i64"]],["timespec"]]],[11,"nanoseconds","","Makes a new `TimeSpec` with given number of nanoseconds.",141,[[["i64"]],["timespec"]]],[11,"num_seconds","","",141,[[["self"]],["i64"]]],[11,"num_milliseconds","","",141,[[["self"]],["i64"]]],[11,"num_microseconds","","",141,[[["self"]],["i64"]]],[11,"num_nanoseconds","","",141,[[["self"]],["i64"]]],[11,"tv_sec","","",141,[[["self"]],["time_t"]]],[11,"tv_nsec","","",141,[[["self"]],["c_long"]]],[11,"neg","","",141,[[["self"]],["timespec"]]],[11,"add","","",141,[[["self"],["timespec"]],["timespec"]]],[11,"sub","","",141,[[["self"],["timespec"]],["timespec"]]],[11,"mul","","",141,[[["self"],["i32"]],["timespec"]]],[11,"div","","",141,[[["self"],["i32"]],["timespec"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"clone","","",142,[[["self"]],["timeval"]]],[11,"as_ref","","",142,[[["self"]],["timeval"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"eq","","",142,[[["self"],["timeval"]],["bool"]]],[11,"cmp","","",142,[[["self"],["timeval"]],["ordering"]]],[11,"partial_cmp","","",142,[[["self"],["timeval"]],["option",["ordering"]]]],[11,"seconds","","",142,[[["i64"]],["timeval"]]],[11,"milliseconds","","",142,[[["i64"]],["timeval"]]],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",142,[[["i64"]],["timeval"]]],[11,"nanoseconds","","Makes a new `TimeVal` with given number of nanoseconds.  Some precision will be lost",142,[[["i64"]],["timeval"]]],[11,"num_seconds","","",142,[[["self"]],["i64"]]],[11,"num_milliseconds","","",142,[[["self"]],["i64"]]],[11,"num_microseconds","","",142,[[["self"]],["i64"]]],[11,"num_nanoseconds","","",142,[[["self"]],["i64"]]],[11,"tv_sec","","",142,[[["self"]],["time_t"]]],[11,"tv_usec","","",142,[[["self"]],["suseconds_t"]]],[11,"neg","","",142,[[["self"]],["timeval"]]],[11,"add","","",142,[[["self"],["timeval"]],["timeval"]]],[11,"sub","","",142,[[["self"],["timeval"]],["timeval"]]],[11,"mul","","",142,[[["self"],["i32"]],["timeval"]]],[11,"div","","",142,[[["self"],["i32"]],["timeval"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[0,"uio","nix::sys","",N,N],[3,"RemoteIoVec","nix::sys::uio","A slice of memory in a remote process, starting at address `base` and consisting of `len` bytes.",N,N],[12,"base","","The starting address of this slice (`iov_base`).",143,N],[12,"len","","The number of bytes in this slice (`iov_len`).",143,N],[3,"IoVec","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"pwritev","","Write to `fd` at `offset` from buffers in `iov`.",N,N],[5,"preadv","","Read from `fd` at `offset` filling buffers in `iov`.",N,N],[5,"pwrite","","",N,N],[5,"pread","","",N,N],[5,"process_vm_writev","","Write data directly to another process's virtual memory (see [`process_vm_writev`(2)]).",N,N],[5,"process_vm_readv","","Read data directly from another process's virtual memory (see [`process_vm_readv`(2)]).",N,N],[11,"clone","","",143,[[["self"]],["remoteiovec"]]],[11,"as_slice","","",144,N],[11,"from_slice","","",144,N],[11,"from_mut_slice","","",144,N],[0,"utsname","nix::sys","",N,N],[3,"UtsName","nix::sys::utsname","",N,N],[5,"uname","","",N,[[],["utsname"]]],[11,"clone","","",145,[[["self"]],["utsname"]]],[11,"sysname","","",145,[[["self"]],["str"]]],[11,"nodename","","",145,[[["self"]],["str"]]],[11,"release","","",145,[[["self"]],["str"]]],[11,"version","","",145,[[["self"]],["str"]]],[11,"machine","","",145,[[["self"]],["str"]]],[0,"wait","nix::sys","",N,N],[3,"WaitPidFlag","nix::sys::wait","",N,N],[4,"WaitStatus","","Possible return values from `wait()` or `waitpid()`.",N,N],[13,"Exited","","The process exited normally (as with `exit()` or returning from `main`) with the given exit code. This case matches the C macro `WIFEXITED(status)`; the second field is `WEXITSTATUS(status)`.",146,N],[13,"Signaled","","The process was killed by the given signal. The third field indicates whether the signal generated a core dump. This case matches the C macro `WIFSIGNALED(status)`; the last two fields correspond to `WTERMSIG(status)` and `WCOREDUMP(status)`.",146,N],[13,"Stopped","","The process is alive, but was stopped by the given signal. This is only reported if `WaitPidFlag::WUNTRACED` was passed. This case matches the C macro `WIFSTOPPED(status)`; the second field is `WSTOPSIG(status)`.",146,N],[13,"PtraceEvent","","The traced process was stopped by a `PTRACE_EVENT_*` event. See [`nix::sys::ptrace`] and [`ptrace`(2)] for more information. All currently-defined events use `SIGTRAP` as the signal; the third field is the `PTRACE_EVENT_*` value of the event.",146,N],[13,"PtraceSyscall","","The traced process was stopped by execution of a system call, and `PTRACE_O_TRACESYSGOOD` is in effect. See [`ptrace`(2)] for more information.",146,N],[13,"Continued","","The process was previously stopped but has resumed execution after receiving a `SIGCONT` signal. This is only reported if `WaitPidFlag::WCONTINUED` was passed. This case matches the C macro `WIFCONTINUED(status)`.",146,N],[13,"StillAlive","","There are currently no state changes to report in any awaited child process. This is only returned if `WaitPidFlag::WNOHANG` was used (otherwise `wait()` or `waitpid()` would block until there was something to report).",146,N],[5,"waitpid","","",N,[[["p"],["option",["waitpidflag"]]],["result",["waitstatus"]]]],[5,"wait","","",N,[[],["result",["waitstatus"]]]],[11,"eq","","",147,[[["self"],["waitpidflag"]],["bool"]]],[11,"ne","","",147,[[["self"],["waitpidflag"]],["bool"]]],[11,"clone","","",147,[[["self"]],["waitpidflag"]]],[11,"partial_cmp","","",147,[[["self"],["waitpidflag"]],["option",["ordering"]]]],[11,"lt","","",147,[[["self"],["waitpidflag"]],["bool"]]],[11,"le","","",147,[[["self"],["waitpidflag"]],["bool"]]],[11,"gt","","",147,[[["self"],["waitpidflag"]],["bool"]]],[11,"ge","","",147,[[["self"],["waitpidflag"]],["bool"]]],[11,"cmp","","",147,[[["self"],["waitpidflag"]],["ordering"]]],[11,"hash","","",147,N],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[18,"WNOHANG","","",147,N],[18,"WUNTRACED","","",147,N],[18,"WEXITED","","",147,N],[18,"WCONTINUED","","",147,N],[18,"WSTOPPED","","",147,N],[18,"WNOWAIT","","Don't reap, just poll status.",147,N],[18,"__WNOTHREAD","","Don't wait on children of other threads in this group",147,N],[18,"__WALL","","Wait on all children, regardless of type",147,N],[18,"__WCLONE","","",147,N],[11,"empty","","Returns an empty set of flags.",147,[[],["waitpidflag"]]],[11,"all","","Returns the set containing all flags.",147,[[],["waitpidflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",147,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",147,[[["c_int"]],["option",["waitpidflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",147,[[["c_int"]],["waitpidflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",147,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",147,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",147,[[["self"],["waitpidflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",147,[[["self"],["waitpidflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",147,[[["self"],["waitpidflag"]]]],[11,"remove","","Removes the specified flags in-place.",147,[[["self"],["waitpidflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",147,[[["self"],["waitpidflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",147,[[["self"],["waitpidflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",147,[[["self"],["waitpidflag"]],["waitpidflag"]]],[11,"bitor_assign","","Adds the set of flags.",147,[[["self"],["waitpidflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",147,[[["self"],["waitpidflag"]],["waitpidflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",147,[[["self"],["waitpidflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",147,[[["self"],["waitpidflag"]],["waitpidflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",147,[[["self"],["waitpidflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",147,[[["self"],["waitpidflag"]],["waitpidflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",147,[[["self"],["waitpidflag"]]]],[11,"not","","Returns the complement of this set of flags.",147,[[["self"]],["waitpidflag"]]],[11,"extend","","",147,[[["self"],["t"]]]],[11,"from_iter","","",147,[[["t"]],["waitpidflag"]]],[11,"eq","","",146,[[["self"],["waitstatus"]],["bool"]]],[11,"ne","","",146,[[["self"],["waitstatus"]],["bool"]]],[11,"clone","","",146,[[["self"]],["waitstatus"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"pid","","Extracts the PID from the WaitStatus unless it equals StillAlive.",146,[[["self"]],["option",["pid"]]]],[11,"from_raw","","Convert a raw `wstatus` as returned by `waitpid`/`wait` into a `WaitStatus`",146,[[["pid"],["i32"]],["result",["waitstatus"]]]],[0,"ucontext","nix","",N,N],[3,"UContext","nix::ucontext","",N,N],[11,"clone","","",148,[[["self"]],["ucontext"]]],[11,"get","","",148,[[],["result",["ucontext"]]]],[11,"set","","",148,[[["self"]],["result"]]],[11,"sigmask_mut","","",148,[[["self"]],["sigset"]]],[11,"sigmask","","",148,[[["self"]],["sigset"]]],[0,"unistd","nix","Safe wrappers around functions found in libc \"unistd.h\" header",N,N],[3,"Uid","nix::unistd","User identifier",N,N],[3,"Gid","","Group identifier",N,N],[3,"Pid","","Process identifier",N,N],[4,"ForkResult","","Represents the successful result of calling `fork`",N,N],[13,"Parent","","",149,N],[12,"child","nix::unistd::ForkResult","",149,N],[13,"Child","nix::unistd","",149,N],[4,"Whence","","Directive that tells [`lseek`] and [`lseek64`] what the offset is relative to.",N,N],[13,"SeekSet","","Specify an offset relative to the start of the file.",150,N],[13,"SeekCur","","Specify an offset relative to the current file location.",150,N],[13,"SeekEnd","","Specify an offset relative to the end of the file.",150,N],[13,"SeekData","","Specify an offset relative to the next location in the file greater than or equal to offset that contains some data. If offset points to some data, then the file offset is set to offset.",150,N],[13,"SeekHole","","Specify an offset relative to the next hole in the file greater than or equal to offset. If offset points into the middle of a hole, then the file offset should be set to offset. If there is no hole past offset, then the file offset should be adjusted to the end of the file (i.e., there is an implicit hole at the end of any file).",150,N],[4,"PathconfVar","","Variable names for `pathconf`",N,N],[13,"FILESIZEBITS","","Minimum number of bits needed to represent, as a signed integer value, the maximum size of a regular file allowed in the specified directory.",151,N],[13,"LINK_MAX","","Maximum number of links to a single file.",151,N],[13,"MAX_CANON","","Maximum number of bytes in a terminal canonical input line.",151,N],[13,"MAX_INPUT","","Minimum number of bytes for which space is available in a terminal input queue; therefore, the maximum number of bytes a conforming application may require to be typed as input before reading them.",151,N],[13,"NAME_MAX","","Maximum number of bytes in a filename (not including the terminating null of a filename string).",151,N],[13,"PATH_MAX","","Maximum number of bytes the implementation will store as a pathname in a user-supplied buffer of unspecified size, including the terminating null character. Minimum number the implementation will accept as the maximum number of bytes in a pathname.",151,N],[13,"PIPE_BUF","","Maximum number of bytes that is guaranteed to be atomic when writing to a pipe.",151,N],[13,"POSIX2_SYMLINKS","","Symbolic links can be created.",151,N],[13,"POSIX_ALLOC_SIZE_MIN","","Minimum number of bytes of storage actually allocated for any portion of a file.",151,N],[13,"POSIX_REC_INCR_XFER_SIZE","","Recommended increment for file transfer sizes between the `POSIX_REC_MIN_XFER_SIZE` and `POSIX_REC_MAX_XFER_SIZE` values.",151,N],[13,"POSIX_REC_MAX_XFER_SIZE","","Maximum recommended file transfer size.",151,N],[13,"POSIX_REC_MIN_XFER_SIZE","","Minimum recommended file transfer size.",151,N],[13,"POSIX_REC_XFER_ALIGN","","Recommended file transfer buffer alignment.",151,N],[13,"SYMLINK_MAX","","Maximum number of bytes in a symbolic link.",151,N],[13,"_POSIX_CHOWN_RESTRICTED","","The use of `chown` and `fchown` is restricted to a process with appropriate privileges, and to changing the group ID of a file only to the effective group ID of the process or to one of its supplementary group IDs.",151,N],[13,"_POSIX_NO_TRUNC","","Pathname components longer than {NAME_MAX} generate an error.",151,N],[13,"_POSIX_VDISABLE","","This symbol shall be defined to be the value of a character that shall disable terminal special character handling.",151,N],[13,"_POSIX_ASYNC_IO","","Asynchronous input or output operations may be performed for the associated file.",151,N],[13,"_POSIX_PRIO_IO","","Prioritized input or output operations may be performed for the associated file.",151,N],[13,"_POSIX_SYNC_IO","","Synchronized input or output operations may be performed for the associated file.",151,N],[4,"SysconfVar","","Variable names for `sysconf`",N,N],[13,"AIO_LISTIO_MAX","","Maximum number of I/O operations in a single list I/O call supported by the implementation.",152,N],[13,"AIO_MAX","","Maximum number of outstanding asynchronous I/O operations supported by the implementation.",152,N],[13,"AIO_PRIO_DELTA_MAX","","The maximum amount by which a process can decrease its asynchronous I/O priority level from its own scheduling priority.",152,N],[13,"ARG_MAX","","Maximum length of argument to the exec functions including environment data.",152,N],[13,"ATEXIT_MAX","","Maximum number of functions that may be registered with `atexit`.",152,N],[13,"BC_BASE_MAX","","Maximum obase values allowed by the bc utility.",152,N],[13,"BC_DIM_MAX","","Maximum number of elements permitted in an array by the bc utility.",152,N],[13,"BC_SCALE_MAX","","Maximum scale value allowed by the bc utility.",152,N],[13,"BC_STRING_MAX","","Maximum length of a string constant accepted by the bc utility.",152,N],[13,"CHILD_MAX","","Maximum number of simultaneous processes per real user ID.",152,N],[13,"COLL_WEIGHTS_MAX","","Maximum number of weights that can be assigned to an entry of the LC_COLLATE order keyword in the locale definition file",152,N],[13,"DELAYTIMER_MAX","","Maximum number of timer expiration overruns.",152,N],[13,"EXPR_NEST_MAX","","Maximum number of expressions that can be nested within parentheses by the expr utility.",152,N],[13,"HOST_NAME_MAX","","Maximum length of a host name (not including the terminating null) as returned from the `gethostname` function",152,N],[13,"IOV_MAX","","Maximum number of iovec structures that one process has available for use with `readv` or `writev`.",152,N],[13,"LINE_MAX","","Unless otherwise noted, the maximum length, in bytes, of a utility's input line (either standard input or another file), when the utility is described as processing text files. The length includes room for the trailing .",152,N],[13,"LOGIN_NAME_MAX","","Maximum length of a login name.",152,N],[13,"NGROUPS_MAX","","Maximum number of simultaneous supplementary group IDs per process.",152,N],[13,"GETGR_R_SIZE_MAX","","Initial size of `getgrgid_r` and `getgrnam_r` data buffers",152,N],[13,"GETPW_R_SIZE_MAX","","Initial size of `getpwuid_r` and `getpwnam_r` data buffers",152,N],[13,"MQ_OPEN_MAX","","The maximum number of open message queue descriptors a process may hold.",152,N],[13,"MQ_PRIO_MAX","","The maximum number of message priorities supported by the implementation.",152,N],[13,"OPEN_MAX","","A value one greater than the maximum value that the system may assign to a newly-created file descriptor.",152,N],[13,"_POSIX_ADVISORY_INFO","","The implementation supports the Advisory Information option.",152,N],[13,"_POSIX_BARRIERS","","The implementation supports barriers.",152,N],[13,"_POSIX_ASYNCHRONOUS_IO","","The implementation supports asynchronous input and output.",152,N],[13,"_POSIX_CLOCK_SELECTION","","The implementation supports clock selection.",152,N],[13,"_POSIX_CPUTIME","","The implementation supports the Process CPU-Time Clocks option.",152,N],[13,"_POSIX_FSYNC","","The implementation supports the File Synchronization option.",152,N],[13,"_POSIX_IPV6","","The implementation supports the IPv6 option.",152,N],[13,"_POSIX_JOB_CONTROL","","The implementation supports job control.",152,N],[13,"_POSIX_MAPPED_FILES","","The implementation supports memory mapped Files.",152,N],[13,"_POSIX_MEMLOCK","","The implementation supports the Process Memory Locking option.",152,N],[13,"_POSIX_MEMLOCK_RANGE","","The implementation supports the Range Memory Locking option.",152,N],[13,"_POSIX_MEMORY_PROTECTION","","The implementation supports memory protection.",152,N],[13,"_POSIX_MESSAGE_PASSING","","The implementation supports the Message Passing option.",152,N],[13,"_POSIX_MONOTONIC_CLOCK","","The implementation supports the Monotonic Clock option.",152,N],[13,"_POSIX_PRIORITIZED_IO","","The implementation supports the Prioritized Input and Output option.",152,N],[13,"_POSIX_PRIORITY_SCHEDULING","","The implementation supports the Process Scheduling option.",152,N],[13,"_POSIX_RAW_SOCKETS","","The implementation supports the Raw Sockets option.",152,N],[13,"_POSIX_READER_WRITER_LOCKS","","The implementation supports read-write locks.",152,N],[13,"_POSIX_REALTIME_SIGNALS","","The implementation supports realtime signals.",152,N],[13,"_POSIX_REGEXP","","The implementation supports the Regular Expression Handling option.",152,N],[13,"_POSIX_SAVED_IDS","","Each process has a saved set-user-ID and a saved set-group-ID.",152,N],[13,"_POSIX_SEMAPHORES","","The implementation supports semaphores.",152,N],[13,"_POSIX_SHARED_MEMORY_OBJECTS","","The implementation supports the Shared Memory Objects option.",152,N],[13,"_POSIX_SHELL","","The implementation supports the POSIX shell.",152,N],[13,"_POSIX_SPAWN","","The implementation supports the Spawn option.",152,N],[13,"_POSIX_SPIN_LOCKS","","The implementation supports spin locks.",152,N],[13,"_POSIX_SPORADIC_SERVER","","The implementation supports the Process Sporadic Server option.",152,N],[13,"_POSIX_SS_REPL_MAX","","",152,N],[13,"_POSIX_SYNCHRONIZED_IO","","The implementation supports the Synchronized Input and Output option.",152,N],[13,"_POSIX_THREAD_ATTR_STACKADDR","","The implementation supports the Thread Stack Address Attribute option.",152,N],[13,"_POSIX_THREAD_ATTR_STACKSIZE","","The implementation supports the Thread Stack Size Attribute option.",152,N],[13,"_POSIX_THREAD_CPUTIME","","The implementation supports the Thread CPU-Time Clocks option.",152,N],[13,"_POSIX_THREAD_PRIO_INHERIT","","The implementation supports the Non-Robust Mutex Priority Inheritance option.",152,N],[13,"_POSIX_THREAD_PRIO_PROTECT","","The implementation supports the Non-Robust Mutex Priority Protection option.",152,N],[13,"_POSIX_THREAD_PRIORITY_SCHEDULING","","The implementation supports the Thread Execution Scheduling option.",152,N],[13,"_POSIX_THREAD_PROCESS_SHARED","","The implementation supports the Thread Process-Shared Synchronization option.",152,N],[13,"_POSIX_THREAD_ROBUST_PRIO_INHERIT","","The implementation supports the Robust Mutex Priority Inheritance option.",152,N],[13,"_POSIX_THREAD_ROBUST_PRIO_PROTECT","","The implementation supports the Robust Mutex Priority Protection option.",152,N],[13,"_POSIX_THREAD_SAFE_FUNCTIONS","","The implementation supports thread-safe functions.",152,N],[13,"_POSIX_THREAD_SPORADIC_SERVER","","The implementation supports the Thread Sporadic Server option.",152,N],[13,"_POSIX_THREADS","","The implementation supports threads.",152,N],[13,"_POSIX_TIMEOUTS","","The implementation supports timeouts.",152,N],[13,"_POSIX_TIMERS","","The implementation supports timers.",152,N],[13,"_POSIX_TRACE","","The implementation supports the Trace option.",152,N],[13,"_POSIX_TRACE_EVENT_FILTER","","The implementation supports the Trace Event Filter option.",152,N],[13,"_POSIX_TRACE_EVENT_NAME_MAX","","",152,N],[13,"_POSIX_TRACE_INHERIT","","The implementation supports the Trace Inherit option.",152,N],[13,"_POSIX_TRACE_LOG","","The implementation supports the Trace Log option.",152,N],[13,"_POSIX_TRACE_NAME_MAX","","",152,N],[13,"_POSIX_TRACE_SYS_MAX","","",152,N],[13,"_POSIX_TRACE_USER_EVENT_MAX","","",152,N],[13,"_POSIX_TYPED_MEMORY_OBJECTS","","The implementation supports the Typed Memory Objects option.",152,N],[13,"_POSIX_VERSION","","Integer value indicating version of this standard (C-language binding) to which the implementation conforms. For implementations conforming to POSIX.1-2008, the value shall be 200809L.",152,N],[13,"_POSIX_V6_ILP32_OFF32","","The implementation provides a C-language compilation environment with 32-bit `int`, `long`, `pointer`, and `off_t` types.",152,N],[13,"_POSIX_V6_ILP32_OFFBIG","","The implementation provides a C-language compilation environment with 32-bit `int`, `long`, and pointer types and an `off_t` type using at least 64 bits.",152,N],[13,"_POSIX_V6_LP64_OFF64","","The implementation provides a C-language compilation environment with 32-bit `int` and 64-bit `long`, `pointer`, and `off_t` types.",152,N],[13,"_POSIX_V6_LPBIG_OFFBIG","","The implementation provides a C-language compilation environment with an `int` type using at least 32 bits and `long`, pointer, and `off_t` types using at least 64 bits.",152,N],[13,"_POSIX2_C_BIND","","The implementation supports the C-Language Binding option.",152,N],[13,"_POSIX2_C_DEV","","The implementation supports the C-Language Development Utilities option.",152,N],[13,"_POSIX2_CHAR_TERM","","The implementation supports the Terminal Characteristics option.",152,N],[13,"_POSIX2_FORT_DEV","","The implementation supports the FORTRAN Development Utilities option.",152,N],[13,"_POSIX2_FORT_RUN","","The implementation supports the FORTRAN Runtime Utilities option.",152,N],[13,"_POSIX2_LOCALEDEF","","The implementation supports the creation of locales by the localedef utility.",152,N],[13,"_POSIX2_PBS","","The implementation supports the Batch Environment Services and Utilities option.",152,N],[13,"_POSIX2_PBS_ACCOUNTING","","The implementation supports the Batch Accounting option.",152,N],[13,"_POSIX2_PBS_CHECKPOINT","","The implementation supports the Batch Checkpoint/Restart option.",152,N],[13,"_POSIX2_PBS_LOCATE","","The implementation supports the Locate Batch Job Request option.",152,N],[13,"_POSIX2_PBS_MESSAGE","","The implementation supports the Batch Job Message Request option.",152,N],[13,"_POSIX2_PBS_TRACK","","The implementation supports the Track Batch Job Request option.",152,N],[13,"_POSIX2_SW_DEV","","The implementation supports the Software Development Utilities option.",152,N],[13,"_POSIX2_UPE","","The implementation supports the User Portability Utilities option.",152,N],[13,"_POSIX2_VERSION","","Integer value indicating version of the Shell and Utilities volume of POSIX.1 to which the implementation conforms.",152,N],[13,"PAGE_SIZE","","The size of a system page in bytes.",152,N],[13,"PTHREAD_DESTRUCTOR_ITERATIONS","","",152,N],[13,"PTHREAD_KEYS_MAX","","",152,N],[13,"PTHREAD_STACK_MIN","","",152,N],[13,"PTHREAD_THREADS_MAX","","",152,N],[13,"RE_DUP_MAX","","",152,N],[13,"RTSIG_MAX","","",152,N],[13,"SEM_NSEMS_MAX","","",152,N],[13,"SEM_VALUE_MAX","","",152,N],[13,"SIGQUEUE_MAX","","",152,N],[13,"STREAM_MAX","","",152,N],[13,"SYMLOOP_MAX","","",152,N],[13,"TIMER_MAX","","",152,N],[13,"TTY_NAME_MAX","","",152,N],[13,"TZNAME_MAX","","",152,N],[13,"_XOPEN_CRYPT","","The implementation supports the X/Open Encryption Option Group.",152,N],[13,"_XOPEN_ENH_I18N","","The implementation supports the Issue 4, Version 2 Enhanced Internationalization Option Group.",152,N],[13,"_XOPEN_LEGACY","","",152,N],[13,"_XOPEN_REALTIME","","The implementation supports the X/Open Realtime Option Group.",152,N],[13,"_XOPEN_REALTIME_THREADS","","The implementation supports the X/Open Realtime Threads Option Group.",152,N],[13,"_XOPEN_SHM","","The implementation supports the Issue 4, Version 2 Shared Memory Option Group.",152,N],[13,"_XOPEN_STREAMS","","The implementation supports the XSI STREAMS Option Group.",152,N],[13,"_XOPEN_UNIX","","The implementation supports the XSI option",152,N],[13,"_XOPEN_VERSION","","Integer value indicating version of the X/Open Portability Guide to which the implementation conforms.",152,N],[5,"pivot_root","","",N,[[["p1"],["p2"]],["result"]]],[5,"setresuid","","Sets the real, effective, and saved uid. (see setresuid(2))",N,[[["uid"],["uid"],["uid"]],["result"]]],[5,"setresgid","","Sets the real, effective, and saved gid. (see setresuid(2))",N,[[["gid"],["gid"],["gid"]],["result"]]],[5,"fork","","Create a new child process duplicating the parent process (see fork(2)).",N,[[],["result",["forkresult"]]]],[5,"getpid","","Get the pid of this process (see getpid(2)).",N,[[],["pid"]]],[5,"getppid","","Get the pid of this processes' parent (see getpid(2)).",N,[[],["pid"]]],[5,"setpgid","","Set a process group ID (see setpgid(2)).",N,[[["pid"],["pid"]],["result"]]],[5,"getpgid","","",N,[[["option",["pid"]]],["result",["pid"]]]],[5,"setsid","","Create new session and set process group id (see setsid(2)).",N,[[],["result",["pid"]]]],[5,"getsid","","Get the process group ID of a session leader getsid(2).",N,[[["option",["pid"]]],["result",["pid"]]]],[5,"tcgetpgrp","","Get the terminal foreground process group (see tcgetpgrp(3)).",N,[[["c_int"]],["result",["pid"]]]],[5,"tcsetpgrp","","Set the terminal foreground process group (see tcgetpgrp(3)).",N,[[["c_int"],["pid"]],["result"]]],[5,"getpgrp","","Get the group id of the calling process (see getpgrp(3)).",N,[[],["pid"]]],[5,"gettid","","Get the caller's thread ID (see gettid(2).",N,[[],["pid"]]],[5,"dup","","Create a copy of the specified file descriptor (see dup(2)).",N,[[["rawfd"]],["result",["rawfd"]]]],[5,"dup2","","Create a copy of the specified file descriptor using the specified fd (see dup(2)).",N,[[["rawfd"],["rawfd"]],["result",["rawfd"]]]],[5,"dup3","","Create a new copy of the specified file descriptor using the specified fd and flags (see dup(2)).",N,[[["rawfd"],["rawfd"],["oflag"]],["result",["rawfd"]]]],[5,"chdir","","Change the current working directory of the calling process (see chdir(2)).",N,[[["p"]],["result"]]],[5,"fchdir","","Change the current working directory of the process to the one given as an open file descriptor (see fchdir(2)).",N,[[["rawfd"]],["result"]]],[5,"mkdir","","Creates new directory `path` with access rights `mode`.  (see mkdir(2))",N,[[["p"],["mode"]],["result"]]],[5,"mkfifo","","Creates new fifo special file (named pipe) with path `path` and access rights `mode`.",N,[[["p"],["mode"]],["result"]]],[5,"getcwd","","Returns the current directory as a `PathBuf`",N,[[],["result",["pathbuf"]]]],[5,"chown","","Change the ownership of the file at `path` to be owned by the specified `owner` (user) and `group` (see chown(2)).",N,[[["p"],["option",["uid"]],["option",["gid"]]],["result"]]],[5,"execv","","Replace the current process image with a new one (see exec(3)).",N,N],[5,"execve","","Replace the current process image with a new one (see execve(2)).",N,N],[5,"execvp","","Replace the current process image with a new one and replicate shell `PATH` searching behavior (see exec(3)).",N,N],[5,"fexecve","","Replace the current process image with a new one (see fexecve(2)).",N,N],[5,"execveat","","Execute program relative to a directory file descriptor (see execveat(2)).",N,N],[5,"daemon","","Daemonize this process by detaching from the controlling terminal (see daemon(3)).",N,[[["bool"],["bool"]],["result"]]],[5,"sethostname","","Set the system host name (see sethostname(2)).",N,[[["s"]],["result"]]],[5,"gethostname","","Get the host name and store it in the provided buffer, returning a pointer the `CStr` in that buffer on success (see gethostname(2)).",N,N],[5,"close","","Close a raw file descriptor",N,[[["rawfd"]],["result"]]],[5,"read","","Read from a raw file descriptor.",N,N],[5,"write","","Write to a raw file descriptor.",N,N],[5,"lseek","","Move the read/write file offset.",N,[[["rawfd"],["off_t"],["whence"]],["result",["off_t"]]]],[5,"lseek64","","",N,[[["rawfd"],["off64_t"],["whence"]],["result",["off64_t"]]]],[5,"pipe","","Create an interprocess channel.",N,[[],["result"]]],[5,"pipe2","","Like `pipe`, but allows setting certain file descriptor flags.",N,[[["oflag"]],["result"]]],[5,"ftruncate","","Truncate a file to a specified length",N,[[["rawfd"],["off_t"]],["result"]]],[5,"isatty","","",N,[[["rawfd"]],["result",["bool"]]]],[5,"unlink","","Remove a directory entry",N,[[["p"]],["result"]]],[5,"chroot","","",N,[[["p"]],["result"]]],[5,"fsync","","Synchronize changes to a file",N,[[["rawfd"]],["result"]]],[5,"fdatasync","","Synchronize the data of a file",N,[[["rawfd"]],["result"]]],[5,"getuid","","Get a real user ID",N,[[],["uid"]]],[5,"geteuid","","Get the effective user ID",N,[[],["uid"]]],[5,"getgid","","Get the real group ID",N,[[],["gid"]]],[5,"getegid","","Get the effective group ID",N,[[],["gid"]]],[5,"setuid","","Set the user ID",N,[[["uid"]],["result"]]],[5,"setgid","","Set the user ID",N,[[["gid"]],["result"]]],[5,"getgroups","","Get the list of supplementary group IDs of the calling process.",N,[[],["result",["vec"]]]],[5,"setgroups","","Set the list of supplementary group IDs for the calling process.",N,N],[5,"getgrouplist","","Calculate the supplementary group access list.",N,[[["cstr"],["gid"]],["result",["vec"]]]],[5,"initgroups","","Initialize the supplementary group access list.",N,[[["cstr"],["gid"]],["result"]]],[5,"pause","","Suspend the thread until a signal is received.",N,[[]]],[5,"sleep","","Suspend execution for an interval of time",N,[[["c_uint"]],["c_uint"]]],[5,"mkstemp","","Creates a regular file which persists even after process termination",N,[[["p"]],["result"]]],[5,"fpathconf","","Like `pathconf`, but works with file descriptors instead of paths (see fpathconf(2))",N,[[["rawfd"],["pathconfvar"]],["result",["option"]]]],[5,"pathconf","","Get path-dependent configurable system variables (see pathconf(2))",N,[[["p"],["pathconfvar"]],["result",["option"]]]],[5,"sysconf","","Get configurable system variables (see sysconf(3))",N,[[["sysconfvar"]],["result",["option"]]]],[0,"alarm","","Alarm signal scheduling.",N,N],[5,"set","nix::unistd::alarm","Schedule an alarm signal.",N,[[["c_uint"]],["option",["c_uint"]]]],[5,"cancel","","Cancel an previously set alarm signal.",N,[[],["option",["c_uint"]]]],[17,"ROOT","nix::unistd","Constant for UID = 0",N,N],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"clone","","",153,[[["self"]],["uid"]]],[11,"eq","","",153,[[["self"],["uid"]],["bool"]]],[11,"ne","","",153,[[["self"],["uid"]],["bool"]]],[11,"hash","","",153,N],[11,"from_raw","","Creates `Uid` from raw `uid_t`.",153,[[["uid_t"]],["self"]]],[11,"current","","Returns Uid of calling process. This is practically a more Rusty alias for `getuid`.",153,[[],["self"]]],[11,"effective","","Returns effective Uid of calling process. This is practically a more Rusty alias for `geteuid`.",153,[[],["self"]]],[11,"is_root","","Returns true if the `Uid` represents privileged user - root. (If it equals zero.)",153,[[["self"]],["bool"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"clone","","",154,[[["self"]],["gid"]]],[11,"eq","","",154,[[["self"],["gid"]],["bool"]]],[11,"ne","","",154,[[["self"],["gid"]],["bool"]]],[11,"hash","","",154,N],[11,"from_raw","","Creates `Gid` from raw `gid_t`.",154,[[["gid_t"]],["self"]]],[11,"current","","Returns Gid of calling process. This is practically a more Rusty alias for `getgid`.",154,[[],["self"]]],[11,"effective","","Returns effective Gid of calling process. This is practically a more Rusty alias for `getgid`.",154,[[],["self"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"clone","","",155,[[["self"]],["pid"]]],[11,"eq","","",155,[[["self"],["pid"]],["bool"]]],[11,"ne","","",155,[[["self"],["pid"]],["bool"]]],[11,"hash","","",155,N],[11,"from_raw","","Creates `Pid` from raw `pid_t`.",155,[[["pid_t"]],["self"]]],[11,"this","","Returns PID of calling process",155,[[],["self"]]],[11,"parent","","Returns PID of parent of calling process",155,[[],["self"]]],[11,"from","","",156,[[["pid"]],["self"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"clone","","",149,[[["self"]],["forkresult"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"is_child","","Return `true` if this is the child process of the `fork()`",149,[[["self"]],["bool"]]],[11,"is_parent","","Returns `true` if this is the parent process of the `fork()`",149,[[["self"]],["bool"]]],[11,"clone","","",150,[[["self"]],["whence"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"clone","","",151,[[["self"]],["pathconfvar"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"hash","","",151,N],[11,"eq","","",151,[[["self"],["pathconfvar"]],["bool"]]],[11,"clone","","",152,[[["self"]],["sysconfvar"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"hash","","",152,N],[11,"eq","","",152,[[["self"],["sysconfvar"]],["bool"]]],[6,"Result","nix","Nix Result Type",N,N],[8,"NixPath","","",N,N],[10,"len","","",157,[[["self"]],["usize"]]],[10,"with_nix_path","","",157,[[["self"],["f"]],["result"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from_errno","","Create a nix Error from a given errno",0,[[["errno"]],["error"]]],[11,"last","","Get the current errno and convert it to a nix Error",0,[[],["error"]]],[11,"invalid_argument","","Create a new invalid argument error (`EINVAL`)",0,[[],["error"]]],[11,"from","","",0,[[["errno"]],["error"]]],[11,"from","","",0,[[["fromutf8error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"request_code_none","","Generate an ioctl request code for a command that passes no data.",N,N],[14,"request_code_read","","Generate an ioctl request code for a command that reads.",N,N],[14,"request_code_write","","Generate an ioctl request code for a command that writes.",N,N],[14,"request_code_readwrite","","Generate an ioctl request code for a command that reads and writes.",N,N],[14,"ioctl_none","","Generates a wrapper function for an ioctl that passes no data to the kernel.",N,N],[14,"ioctl_none_bad","","Generates a wrapper function for a \"bad\" ioctl that passes no data to the kernel.",N,N],[14,"ioctl_read","","Generates a wrapper function for an ioctl that reads data from the kernel.",N,N],[14,"ioctl_read_bad","","Generates a wrapper function for a \"bad\" ioctl that reads data from the kernel.",N,N],[14,"ioctl_write_ptr","","Generates a wrapper function for an ioctl that writes data through a pointer to the kernel.",N,N],[14,"ioctl_write_ptr_bad","","Generates a wrapper function for a \"bad\" ioctl that writes data through a pointer to the kernel.",N,N],[14,"ioctl_write_int","","Generates a wrapper function for a ioctl that writes an integer to the kernel.",N,N],[14,"ioctl_write_int_bad","","Generates a wrapper function for a \"bad\" ioctl that writes an integer to the kernel.",N,N],[14,"ioctl_readwrite","","Generates a wrapper function for an ioctl that reads and writes data to the kernel.",N,N],[14,"ioctl_readwrite_bad","","Generates a wrapper function for a \"bad\" ioctl that reads and writes data to the kernel.",N,N],[14,"ioctl_read_buf","","Generates a wrapper function for an ioctl that reads an array of elements from the kernel.",N,N],[14,"ioctl_write_buf","","Generates a wrapper function for an ioctl that writes an array of elements to the kernel.",N,N],[14,"ioctl_readwrite_buf","","Generates a wrapper function for an ioctl that reads and writes an array of elements to the kernel.",N,N],[11,"clone","nix::sys::stat","",124,[[["self"]],["stat"]]],[11,"clone","nix::sys::signalfd","",62,[[["self"]],["signalfd_siginfo"]]],[11,"clone","nix::pty","",21,[[["self"]],["winsize"]]],[11,"clone","nix::sys::socket","",69,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",68,[[["self"]],["sockaddr_in"]]],[11,"clone","","",65,[[["self"]],["cmsghdr"]]],[11,"clone","","",70,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",71,[[["self"]],["sockaddr_un"]]],[11,"clone","","",66,[[["self"]],["msghdr"]]],[11,"clone","","",67,[[["self"]],["sockaddr"]]]],"paths":[[4,"Error"],[4,"Errno"],[8,"ErrnoSentinel"],[4,"FcntlArg"],[4,"FlockArg"],[3,"AtFlags"],[3,"OFlag"],[3,"SealFlag"],[3,"FdFlag"],[3,"SpliceFFlags"],[3,"FallocateFlags"],[3,"InterfaceAddress"],[3,"InterfaceAddressIterator"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"InterfaceFlags"],[3,"PollFd"],[3,"EventFlags"],[3,"Winsize"],[3,"OpenptyResult"],[3,"PtyMaster"],[3,"CloneFlags"],[3,"CpuSet"],[3,"LioCb"],[4,"AioFsyncMode"],[4,"LioOpcode"],[4,"LioMode"],[4,"AioCancelStat"],[4,"Buffer"],[3,"AioCb"],[4,"EpollOp"],[3,"EpollFlags"],[3,"EpollCreateFlags"],[3,"EpollEvent"],[3,"EfdFlags"],[3,"MemFdCreateFlag"],[4,"MmapAdvise"],[3,"ProtFlags"],[3,"MapFlags"],[3,"MsFlags"],[3,"MlockAllFlags"],[4,"Request"],[4,"Event"],[3,"Options"],[4,"QuotaType"],[4,"QuotaFmt"],[3,"QuotaValidFlags"],[3,"Dqblk"],[4,"RebootMode"],[3,"FdSet"],[4,"Signal"],[4,"SigmaskHow"],[4,"SigHandler"],[4,"SigevNotify"],[3,"SigEvent"],[3,"SignalIterator"],[3,"SaFlags"],[3,"SigSet"],[3,"SigAction"],[3,"siginfo"],[3,"SfdFlags"],[3,"SignalFd"],[3,"cmsghdr"],[3,"msghdr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_storage"],[3,"sockaddr_un"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"LinkAddr"],[3,"NetlinkAddr"],[3,"RecvMsg"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"SockProtocol"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[3,"OriginalDst"],[3,"ReceiveTimestamp"],[3,"IpTransparent"],[3,"Mark"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"MsgFlags"],[3,"UnixCredentials"],[3,"IpMembershipRequest"],[3,"Ipv6MembershipRequest"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"FileStat"],[4,"FchmodatFlags"],[3,"SFlag"],[3,"Mode"],[3,"FsFlags"],[3,"Statvfs"],[3,"Termios"],[4,"BaudRate"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[4,"SpecialCharacterIndices"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[8,"TimeValLike"],[3,"TimeSpec"],[3,"TimeVal"],[3,"RemoteIoVec"],[3,"IoVec"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"UContext"],[4,"ForkResult"],[4,"Whence"],[4,"PathconfVar"],[4,"SysconfVar"],[3,"Uid"],[3,"Gid"],[3,"Pid"],[6,"SessionId"],[8,"NixPath"]]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"NoDrop"]]};
searchIndex["num"]={"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",N,N],[3,"BigUint","","A big unsigned integer type.",N,N],[3,"Complex","","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",2,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Bounded","","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,[[["self"],["self"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,[[["self"],["u32"]],["self"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[0,"cast","","",N,N],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[5,"cast","num","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"pow","","",N,N],[8,"Pow","num::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"pow","","Returns `self` to the power `rhs`.",17,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",18,[[],["self"]]],[10,"infinity","","Returns the infinite value.",18,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",18,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",18,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",18,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",18,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",18,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",18,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",18,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",18,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",18,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",18,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",18,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",18,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",18,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",18,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",18,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",18,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",18,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",18,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",18,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",18,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",18,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",18,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",18,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",18,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",18,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",18,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",18,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",18,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",18,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",18,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",18,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",18,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",18,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",18,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",18,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",18,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",18,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",18,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",18,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",18,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",18,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",18,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",18,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",18,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",18,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",18,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",18,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",18,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",18,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",18,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",18,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",18,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",18,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",18,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",18,N],[0,"bigint","","",N,N],[3,"ParseBigIntError","num::bigint","",N,N],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",N,N],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",19,[[["self"]],["option",["biguint"]]]],[3,"BigInt","","A big signed integer type.",N,N],[4,"Sign","","A Sign is a `BigInt`'s composing element.",N,N],[13,"Minus","","",20,N],[13,"NoSign","","",20,N],[13,"Plus","","",20,N],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",N,N],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",21,[[["self"]],["option",["bigint"]]]],[3,"BigUint","","A big unsigned integer type.",N,N],[0,"complex","num","",N,N],[3,"Complex","num::complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[3,"ParseComplexError","","",N,N],[0,"integer","num","",N,N],[8,"Integer","num::integer","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[3,"IterBinomial","","An iterator over binomial coefficients.",N,N],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",22,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",22,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",22,[[["self"]],["self"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[0,"iter","num","",N,N],[3,"Range","num::iter","An iterator over the range [start, stop)",N,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,N],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,N],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[0,"traits","num","",N,N],[0,"bounds","num::traits","",N,N],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[0,"cast","num::traits","",N,N],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[0,"float","num::traits","",N,N],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",23,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",23,[[],["self"]]],[10,"nan","","Returns NaN.",23,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",23,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",23,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",23,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",23,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",23,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",23,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",23,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",23,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",23,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",23,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",23,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",23,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",23,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",23,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",23,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",23,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",23,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",23,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",23,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",23,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",23,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",23,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",23,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",23,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",23,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",23,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",18,[[],["self"]]],[10,"infinity","","Returns the infinite value.",18,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",18,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",18,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",18,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",18,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",18,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",18,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",18,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",18,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",18,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",18,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",18,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",18,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",18,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",18,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",18,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",18,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",18,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",18,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",18,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",18,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",18,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",18,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",18,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",18,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",18,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",18,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",18,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",18,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",18,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",18,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",18,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",18,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",18,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",18,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",18,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",18,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",18,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",18,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",18,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",18,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",18,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",18,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",18,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",18,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",18,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",18,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",18,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",18,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",18,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",18,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",18,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",18,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",18,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",18,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",18,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",24,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",24,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",24,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",24,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",24,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",24,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",24,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",24,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",24,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",24,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",24,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",24,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",24,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",24,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",24,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",24,[[],["self"]]],[0,"identities","num::traits","",N,N],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"int","num::traits","",N,N],[8,"PrimInt","num::traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,[[["self"],["u32"]],["self"]]],[0,"ops","num::traits","",N,N],[0,"checked","num::traits::ops","",N,N],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",25,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",26,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",27,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",28,[[["self"],["u32"]],["option"]]],[0,"inv","num::traits::ops","",N,N],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",29,N],[10,"inv","","Returns the multiplicative inverse of `self`.",29,N],[0,"mul_add","num::traits::ops","",N,N],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",30,N],[10,"mul_add","","Performs the fused multiply-add operation.",30,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",31,N],[0,"saturating","num::traits::ops","",N,N],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,[[["self"],["self"]],["self"]]],[0,"wrapping","num::traits::ops","",N,N],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",32,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",33,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",34,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",35,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",36,[[["self"],["u32"]],["self"]]],[0,"pow","num::traits","",N,N],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"pow","","Returns `self` to the power `rhs`.",17,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[0,"real","num::traits","",N,N],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",37,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",37,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",37,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",37,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",37,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",37,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",37,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",37,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",37,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",37,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",37,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",37,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",37,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",37,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",37,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",37,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",37,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",37,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",37,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",37,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",37,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",37,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",37,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",37,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",37,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",37,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",37,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",37,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",37,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",37,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",37,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",37,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",37,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",37,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",37,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",37,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",37,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",37,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",37,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",37,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",37,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",37,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",37,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",37,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",37,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",37,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",37,[[["self"]],["self"]]],[0,"sign","num::traits","",N,N],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",2,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",38,N],[13,"Invalid","","",38,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",39,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"rational","num","",N,N],[3,"Ratio","num::rational","Represents the ratio between two numbers.",N,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",N,N],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[3,"ParseRatioError","","",N,N],[11,"new","num::bigint","Creates and initializes a BigInt.",40,[[["sign"],["vec",["u32"]]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",40,[[["sign"],["biguint"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",40,N],[11,"assign_from_slice","","Reinitializes a `BigInt`.",40,N],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",40,N],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",40,N],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",40,N],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",40,N],[11,"parse_bytes","","Creates and initializes a `BigInt`.",40,N],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,N],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",40,N],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",40,N],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",40,N],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",40,[[["self"]],["vec",["u8"]]]],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",40,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",40,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,N],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",40,N],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",40,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",40,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",40,[[["self"]],["option",["biguint"]]]],[11,"checked_add","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",40,[[["self"],["bigint"],["bigint"]],["bigint"]]],[11,"bitand","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitand","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitand","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitand","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"checked_sub","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",41,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"clone","","",40,[[["self"]],["bigint"]]],[11,"clone","","",20,[[["self"]],["sign"]]],[11,"clone","","",42,[[["self"]],["parsebiginterror"]]],[11,"clone","","",41,[[["self"]],["biguint"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"abs","","",40,[[["self"]],["bigint"]]],[11,"abs_sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"signum","","",40,[[["self"]],["bigint"]]],[11,"is_positive","","",40,[[["self"]],["bool"]]],[11,"is_negative","","",40,[[["self"]],["bool"]]],[11,"neg","","Negate Sign value.",20,[[["self"]],["sign"]]],[11,"neg","","",41,[[["self"]],["biguint"]]],[11,"neg","","",40,[[["self"]],["bigint"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",42,[[["self"]],["str"]]],[11,"sub","","",41,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",41,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",41,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",41,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",40,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",40,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",40,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",41,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",40,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",40,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"sub","","",40,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",40,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",41,[[["str"],["u32"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",40,[[["str"],["u32"]],["result",["bigint","parsebiginterror"]]]],[11,"cmp","","",41,[[["self"],["biguint"]],["ordering"]]],[11,"cmp","","",20,[[["self"],["sign"]],["ordering"]]],[11,"cmp","","",40,[[["self"],["bigint"]],["ordering"]]],[11,"from_str","","",41,[[["str"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str","","",40,[[["str"]],["result",["bigint","parsebiginterror"]]]],[11,"default","","",40,[[],["bigint"]]],[11,"default","","",41,[[],["biguint"]]],[11,"shr","","",40,[[["self"],["usize"]],["bigint"]]],[11,"shr","","",41,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",20,[[["self"],["sign"]],["sign"]]],[11,"mul","","",40,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",41,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",40,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",41,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",41,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",40,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",40,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",40,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",41,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",40,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",40,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",40,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",40,[[["self"],["isize"]],["bigint"]]],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",40,N],[11,"from_i64","","",40,[[["i64"]],["option",["bigint"]]]],[11,"from_i128","","",40,[[["i128"]],["option",["bigint"]]]],[11,"from_u64","","",40,[[["u64"]],["option",["bigint"]]]],[11,"from_u128","","",40,[[["u128"]],["option",["bigint"]]]],[11,"from_f64","","",40,[[["f64"]],["option",["bigint"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["biguint"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["biguint"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["biguint"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["biguint"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["biguint"]]]],[11,"to_biguint","","",41,[[["self"]],["option",["biguint"]]]],[11,"to_biguint","","",40,[[["self"]],["option",["biguint"]]]],[11,"checked_mul","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",41,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"div_rem","","",41,N],[11,"div_floor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"mod_floor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"div_mod_floor","","",41,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",41,[[["self"],["biguint"]],["biguint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",41,[[["self"],["biguint"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",41,[[["self"],["biguint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",41,[[["self"],["biguint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",41,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",41,[[["self"]],["bool"]]],[11,"div_rem","","",40,N],[11,"div_floor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"mod_floor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div_mod_floor","","",40,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",40,[[["self"],["bigint"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",40,[[["self"],["bigint"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",40,[[["self"],["bigint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",40,[[["self"],["bigint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",40,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",40,[[["self"]],["bool"]]],[11,"add_assign","","",41,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"add_assign","","",41,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"add_assign","","",41,N],[11,"add_assign","","",40,N],[11,"add_assign","","",40,N],[11,"add_assign","","",41,N],[11,"sum","","",40,[[["i"]],["bigint"]]],[11,"sum","","",41,[[["i"]],["biguint"]]],[11,"shl","","",40,[[["self"],["usize"]],["bigint"]]],[11,"shl","","",41,[[["self"],["usize"]],["biguint"]]],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",40,N],[11,"mul_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"sub_assign","","",40,N],[11,"add","","",40,[[["self"],["u64"]],["bigint"]]],[11,"add","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",40,[[["self"],["i32"]],["bigint"]]],[11,"add","","",41,[[["self"],["u32"]],["biguint"]]],[11,"add","","",40,[[["self"],["u64"]],["bigint"]]],[11,"add","","",40,[[["self"],["isize"]],["bigint"]]],[11,"add","","",41,[[["self"],["usize"]],["biguint"]]],[11,"add","","",41,[[["self"],["u16"]],["biguint"]]],[11,"add","","",40,[[["self"],["usize"]],["bigint"]]],[11,"add","","",40,[[["self"],["i64"]],["bigint"]]],[11,"add","","",40,[[["self"],["u16"]],["bigint"]]],[11,"add","","",40,[[["self"],["i16"]],["bigint"]]],[11,"add","","",40,[[["self"],["u32"]],["bigint"]]],[11,"add","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",41,[[["self"],["u8"]],["biguint"]]],[11,"add","","",41,[[["self"],["u64"]],["biguint"]]],[11,"add","","",40,[[["self"],["i16"]],["bigint"]]],[11,"add","","",40,[[["self"],["u32"]],["bigint"]]],[11,"add","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",41,[[["self"],["u16"]],["biguint"]]],[11,"add","","",40,[[["self"],["usize"]],["bigint"]]],[11,"add","","",40,[[["self"],["u8"]],["bigint"]]],[11,"add","","",40,[[["self"],["i32"]],["bigint"]]],[11,"add","","",40,[[["self"],["i8"]],["bigint"]]],[11,"add","","",41,[[["self"],["u64"]],["biguint"]]],[11,"add","","",40,[[["self"],["u8"]],["bigint"]]],[11,"add","","",41,[[["self"],["u8"]],["biguint"]]],[11,"add","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"add","","",40,[[["self"],["i64"]],["bigint"]]],[11,"add","","",41,[[["self"],["usize"]],["biguint"]]],[11,"add","","",40,[[["self"],["u16"]],["bigint"]]],[11,"add","","",40,[[["self"],["i8"]],["bigint"]]],[11,"add","","",40,[[["self"],["isize"]],["bigint"]]],[11,"add","","",41,[[["self"],["u32"]],["biguint"]]],[11,"to_bigint","","",41,[[["self"]],["option",["bigint"]]]],[11,"to_bigint","","",40,[[["self"]],["option",["bigint"]]]],[11,"partial_cmp","","",20,[[["self"],["sign"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["bigint"]],["option",["ordering"]]]],[11,"partial_cmp","","",41,[[["self"],["biguint"]],["option",["ordering"]]]],[11,"checked_add","","",41,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_add","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"bitand_assign","","",40,N],[11,"bitand_assign","","",41,N],[11,"bitand_assign","","",41,N],[11,"bitand_assign","","",40,N],[11,"shr_assign","","",40,N],[11,"shr_assign","","",41,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"zero","","",41,[[],["biguint"]]],[11,"is_zero","","",41,[[["self"]],["bool"]]],[11,"zero","","",40,[[],["bigint"]]],[11,"is_zero","","",40,[[["self"]],["bool"]]],[11,"bitor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"checked_div","","",40,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",41,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"rem","","",41,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",40,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",41,[[["self"],["u64"]],["biguint"]]],[11,"rem","","",40,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",40,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",41,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",41,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",41,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",40,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",40,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",40,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",40,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",41,[[["self"],["u64"]],["biguint"]]],[11,"rem","","",41,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",40,[[["self"],["i8"]],["bigint"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",41,N],[11,"hash","","",40,N],[11,"hash","","",20,N],[11,"one","","",40,[[],["bigint"]]],[11,"is_one","","",40,[[["self"]],["bool"]]],[11,"one","","",41,[[],["biguint"]]],[11,"is_one","","",41,[[["self"]],["bool"]]],[11,"bitxor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitxor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"bitxor","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"div_assign","","",41,N],[11,"div_assign","","",40,N],[11,"product","","",40,[[["i"]],["bigint"]]],[11,"product","","",41,[[["i"]],["biguint"]]],[11,"from","","",40,[[["i16"]],["bigint"]]],[11,"from","","",40,[[["usize"]],["bigint"]]],[11,"from","","",41,[[["u32"]],["biguint"]]],[11,"from","","",40,[[["i8"]],["bigint"]]],[11,"from","","",40,[[["u32"]],["bigint"]]],[11,"from","","",40,[[["biguint"]],["bigint"]]],[11,"from","","",40,[[["i64"]],["bigint"]]],[11,"from","","",41,[[["u8"]],["biguint"]]],[11,"from","","",40,[[["i128"]],["bigint"]]],[11,"from","","",41,[[["u16"]],["biguint"]]],[11,"from","","",41,[[["usize"]],["biguint"]]],[11,"from","","",40,[[["isize"]],["bigint"]]],[11,"from","","",40,[[["u64"]],["bigint"]]],[11,"from","","",40,[[["u16"]],["bigint"]]],[11,"from","","",40,[[["i32"]],["bigint"]]],[11,"from","","",40,[[["u128"]],["bigint"]]],[11,"from","","",41,[[["u64"]],["biguint"]]],[11,"from","","",40,[[["u8"]],["bigint"]]],[11,"from","","",41,[[["u128"]],["biguint"]]],[11,"to_i64","","",40,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",40,[[["self"]],["option",["i128"]]]],[11,"to_u64","","",40,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",40,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",40,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",40,[[["self"]],["option",["f64"]]]],[11,"to_i64","","",41,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",41,[[["self"]],["option",["i128"]]]],[11,"to_u64","","",41,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",41,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",41,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",41,[[["self"]],["option",["f64"]]]],[11,"not","","",40,[[["self"]],["bigint"]]],[11,"bitxor_assign","","",41,N],[11,"bitxor_assign","","",40,N],[11,"bitxor_assign","","",41,N],[11,"bitxor_assign","","",40,N],[11,"div","","",40,[[["self"],["u16"]],["bigint"]]],[11,"div","","",41,[[["self"],["u8"]],["biguint"]]],[11,"div","","",41,[[["self"],["usize"]],["biguint"]]],[11,"div","","",40,[[["self"],["i32"]],["bigint"]]],[11,"div","","",40,[[["self"],["u32"]],["bigint"]]],[11,"div","","",41,[[["self"],["usize"]],["biguint"]]],[11,"div","","",40,[[["self"],["isize"]],["bigint"]]],[11,"div","","",41,[[["self"],["u32"]],["biguint"]]],[11,"div","","",40,[[["self"],["u16"]],["bigint"]]],[11,"div","","",40,[[["self"],["i16"]],["bigint"]]],[11,"div","","",40,[[["self"],["i16"]],["bigint"]]],[11,"div","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",40,[[["self"],["i32"]],["bigint"]]],[11,"div","","",41,[[["self"],["u64"]],["biguint"]]],[11,"div","","",40,[[["self"],["u8"]],["bigint"]]],[11,"div","","",40,[[["self"],["i64"]],["bigint"]]],[11,"div","","",40,[[["self"],["isize"]],["bigint"]]],[11,"div","","",40,[[["self"],["u64"]],["bigint"]]],[11,"div","","",40,[[["self"],["u64"]],["bigint"]]],[11,"div","","",40,[[["self"],["u32"]],["bigint"]]],[11,"div","","",41,[[["self"],["u16"]],["biguint"]]],[11,"div","","",40,[[["self"],["i8"]],["bigint"]]],[11,"div","","",40,[[["self"],["i64"]],["bigint"]]],[11,"div","","",41,[[["self"],["u8"]],["biguint"]]],[11,"div","","",40,[[["self"],["i8"]],["bigint"]]],[11,"div","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",41,[[["self"],["u32"]],["biguint"]]],[11,"div","","",41,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",40,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",40,[[["self"],["u8"]],["bigint"]]],[11,"div","","",41,[[["self"],["u16"]],["biguint"]]],[11,"div","","",40,[[["self"],["usize"]],["bigint"]]],[11,"div","","",40,[[["self"],["usize"]],["bigint"]]],[11,"div","","",41,[[["self"],["u64"]],["biguint"]]],[11,"bitor_assign","","",40,N],[11,"bitor_assign","","",40,N],[11,"bitor_assign","","",41,N],[11,"bitor_assign","","",41,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",42,[[["self"],["parsebiginterror"]],["bool"]]],[11,"ne","","",42,[[["self"],["parsebiginterror"]],["bool"]]],[11,"eq","","",40,[[["self"],["bigint"]],["bool"]]],[11,"eq","","",20,[[["self"],["sign"]],["bool"]]],[11,"eq","","",41,[[["self"],["biguint"]],["bool"]]],[11,"shl_assign","","",41,N],[11,"shl_assign","","",40,N],[11,"next","num::integer","",43,[[["self"]],["option"]]],[11,"fmt","num::traits","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"one","num::complex","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"default","","",0,[[],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"]],["result",["complex"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",44,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",44,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"description","","",44,[[["self"]],["str"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"],["u32"]],["result",["complex"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"product","","",0,[[["i"]],["complex"]]],[11,"product","","",0,[[["i"]],["complex"]]],[11,"inv","","",0,[[["self"]],["complex"]]],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"sum","","",0,[[["i"]],["complex"]]],[11,"sum","","",0,[[["i"]],["complex"]]],[11,"clone","num::iter","",45,[[["self"]],["rangeinclusive"]]],[11,"clone","","",46,[[["self"]],["range"]]],[11,"clone","","",47,[[["self"]],["rangestep"]]],[11,"clone","","",48,[[["self"]],["rangestepinclusive"]]],[11,"next_back","","",46,[[["self"]],["option"]]],[11,"next_back","","",45,[[["self"]],["option"]]],[11,"next","","",48,[[["self"]],["option"]]],[11,"next","","",47,[[["self"]],["option"]]],[11,"next","","",46,[[["self"]],["option"]]],[11,"size_hint","","",46,N],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,N],[11,"from_i64","num::rational","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",49,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",49,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",49,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",49,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",49,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",49,[[["f64"]],["option",["ratio"]]]],[11,"mul","","",49,[[["self"],["t"]],["ratio"]]],[11,"mul","","",49,[[["self"],["t"]],["ratio"]]],[11,"mul","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"checked_mul","","",49,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"rem_assign","","",49,N],[11,"rem_assign","","",49,N],[11,"rem_assign","","",49,N],[11,"rem_assign","","",49,N],[11,"zero","","",49,[[],["ratio"]]],[11,"is_zero","","",49,[[["self"]],["bool"]]],[11,"checked_div","","",49,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"one","","",49,[[],["ratio"]]],[11,"is_one","","",49,[[["self"]],["bool"]]],[11,"cmp","","",49,[[["self"],["ratio"]],["ordering"]]],[11,"sub","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",49,[[["self"],["t"]],["ratio"]]],[11,"sub","","",49,[[["self"],["t"]],["ratio"]]],[11,"sub","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"description","","",50,[[["self"]],["str"]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",49,[[["str"]],["result",["ratio","parseratioerror"]]]],[11,"neg","","",49,[[["self"]],["ratio"]]],[11,"clone","","",50,[[["self"]],["parseratioerror"]]],[11,"clone","","",49,[[["self"]],["ratio"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",49,[[["self"],["ratio"]],["bool"]]],[11,"eq","","",50,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",50,[[["self"],["parseratioerror"]],["bool"]]],[11,"into","","",49,N],[11,"div","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",49,[[["self"],["t"]],["ratio"]]],[11,"div","","",49,[[["self"],["t"]],["ratio"]]],[11,"div","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"from","","",49,N],[11,"from","","",49,[[["t"]],["ratio"]]],[11,"product","","",49,[[["i"]],["ratio"]]],[11,"product","","",49,[[["i"]],["ratio"]]],[11,"div_assign","","",49,N],[11,"div_assign","","",49,N],[11,"div_assign","","",49,N],[11,"div_assign","","",49,N],[11,"hash","","",49,N],[11,"inv","","",49,[[["self"]],["ratio"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",49,[[["str"],["u32"]],["result",["ratio","parseratioerror"]]]],[11,"pow","","",49,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",49,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",49,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",49,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",49,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",49,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",49,[[["self"],["i16"]],["ratio"]]],[11,"rem","","",49,[[["self"],["t"]],["ratio"]]],[11,"rem","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",49,[[["self"],["t"]],["ratio"]]],[11,"checked_add","","",49,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_sub","","",49,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"abs","","",49,[[["self"]],["ratio"]]],[11,"abs_sub","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",49,[[["self"]],["ratio"]]],[11,"is_positive","","",49,[[["self"]],["bool"]]],[11,"is_negative","","",49,[[["self"]],["bool"]]],[11,"partial_cmp","","",49,[[["self"],["ratio"]],["option",["ordering"]]]],[11,"add","","",49,[[["self"],["t"]],["ratio"]]],[11,"add","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",49,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",49,[[["self"],["t"]],["ratio"]]],[11,"sub_assign","","",49,N],[11,"sub_assign","","",49,N],[11,"sub_assign","","",49,N],[11,"sub_assign","","",49,N],[11,"mul_assign","","",49,N],[11,"mul_assign","","",49,N],[11,"mul_assign","","",49,N],[11,"mul_assign","","",49,N],[11,"add_assign","","",49,N],[11,"add_assign","","",49,N],[11,"add_assign","","",49,N],[11,"add_assign","","",49,N],[11,"sum","","",49,[[["i"]],["ratio"]]],[11,"sum","","",49,[[["i"]],["ratio"]]],[11,"new","num::bigint","Creates and initializes a `BigUint`.",41,[[["vec",["u32"]]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",41,N],[11,"assign_from_slice","","Assign a value to a `BigUint`.",41,N],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",41,N],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",41,N],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",41,N],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",41,N],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",41,N],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",41,[[["self"]],["vec",["u8"]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",41,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",41,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",41,[[["self"],["u32"]],["vec",["u8"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",41,[[["self"],["u32"]],["vec",["u8"]]]],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",41,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",41,[[["self"],["biguint"],["biguint"]],["biguint"]]],[11,"new","num::complex","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",0,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",0,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,N],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",0,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",0,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",0,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",43,[[["t"]],["iterbinomial"]]],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",49,[[["t"],["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",49,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",49,[[["t"],["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",49,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",49,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",49,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",49,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",49,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",49,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",49,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",49,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",49,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",49,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",49,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",49,[[["self"],["i32"]],["ratio"]]],[11,"from_float","","Converts a float into a rational number.",49,[[["t"]],["option",["ratio"]]]],[11,"approximate_float","","",49,[[["f"]],["option",["ratio"]]]]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Float"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[8,"Roots"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"BigUint"],[3,"ParseBigIntError"],[3,"IterBinomial"],[3,"ParseComplexError"],[3,"RangeInclusive"],[3,"Range"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_bigint"]={"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"ParseBigIntError","num_bigint","",N,N],[3,"BigUint","","A big unsigned integer type.",N,N],[3,"BigInt","","A big signed integer type.",N,N],[4,"Sign","","A Sign is a `BigInt`'s composing element.",N,N],[13,"Minus","","",0,N],[13,"NoSign","","",0,N],[13,"Plus","","",0,N],[11,"clone","","",1,[[["self"]],["biguint"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"eq","","",1,[[["self"],["biguint"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["biguint"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["biguint"]],["ordering"]]],[11,"default","","",1,[[],["biguint"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["biguint","parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",1,[[["str"],["u32"]],["result",["biguint","parsebiginterror"]]]],[11,"bitand","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitand_assign","","",1,[[["self"],["biguint"]]]],[11,"bitand","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitand_assign","","",1,[[["self"],["biguint"]]]],[11,"bitor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitor_assign","","",1,[[["self"],["biguint"]]]],[11,"bitor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitor_assign","","",1,[[["self"],["biguint"]]]],[11,"bitxor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor_assign","","",1,[[["self"],["biguint"]]]],[11,"bitxor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"bitxor_assign","","",1,[[["self"],["biguint"]]]],[11,"shl","","",1,[[["self"],["usize"]],["biguint"]]],[11,"shl_assign","","",1,[[["self"],["usize"]]]],[11,"shr","","",1,[[["self"],["usize"]],["biguint"]]],[11,"shr_assign","","",1,[[["self"],["usize"]]]],[11,"zero","","",1,[[],["biguint"]]],[11,"is_zero","","",1,[[["self"]],["bool"]]],[11,"one","","",1,[[],["biguint"]]],[11,"is_one","","",1,[[["self"]],["bool"]]],[11,"add","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"add_assign","","",1,[[["self"],["biguint"]]]],[11,"add","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"add_assign","","",1,[[["self"],["biguint"]]]],[11,"add","","",1,[[["self"],["u8"]],["biguint"]]],[11,"add","","",1,[[["self"],["u8"]],["biguint"]]],[11,"add","","",1,[[["self"],["u16"]],["biguint"]]],[11,"add","","",1,[[["self"],["u16"]],["biguint"]]],[11,"add","","",1,[[["self"],["usize"]],["biguint"]]],[11,"add","","",1,[[["self"],["usize"]],["biguint"]]],[11,"add_assign","","",1,[[["self"],["u8"]]]],[11,"add_assign","","",1,[[["self"],["u16"]]]],[11,"add_assign","","",1,[[["self"],["usize"]]]],[11,"add","","",1,[[["self"],["u32"]],["biguint"]]],[11,"add","","",1,[[["self"],["u64"]],["biguint"]]],[11,"add","","",1,[[["self"],["u32"]],["biguint"]]],[11,"add_assign","","",1,[[["self"],["u32"]]]],[11,"add","","",1,[[["self"],["u64"]],["biguint"]]],[11,"add_assign","","",1,[[["self"],["u64"]]]],[11,"sub","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"sub_assign","","",1,[[["self"],["biguint"]]]],[11,"sub","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"sub_assign","","",1,[[["self"],["biguint"]]]],[11,"sub","","",1,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u8"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u16"]],["biguint"]]],[11,"sub","","",1,[[["self"],["usize"]],["biguint"]]],[11,"sub","","",1,[[["self"],["usize"]],["biguint"]]],[11,"sub_assign","","",1,[[["self"],["u8"]]]],[11,"sub_assign","","",1,[[["self"],["u16"]]]],[11,"sub_assign","","",1,[[["self"],["usize"]]]],[11,"sub","","",1,[[["self"],["u32"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u64"]],["biguint"]]],[11,"sub","","",1,[[["self"],["u32"]],["biguint"]]],[11,"sub_assign","","",1,[[["self"],["u32"]]]],[11,"sub","","",1,[[["self"],["u64"]],["biguint"]]],[11,"sub_assign","","",1,[[["self"],["u64"]]]],[11,"mul","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"mul","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"mul_assign","","",1,[[["self"],["biguint"]]]],[11,"mul_assign","","",1,[[["self"],["biguint"]]]],[11,"mul","","",1,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u8"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u16"]],["biguint"]]],[11,"mul","","",1,[[["self"],["usize"]],["biguint"]]],[11,"mul","","",1,[[["self"],["usize"]],["biguint"]]],[11,"mul_assign","","",1,[[["self"],["u8"]]]],[11,"mul_assign","","",1,[[["self"],["u16"]]]],[11,"mul_assign","","",1,[[["self"],["usize"]]]],[11,"mul","","",1,[[["self"],["u32"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u64"]],["biguint"]]],[11,"mul","","",1,[[["self"],["u32"]],["biguint"]]],[11,"mul_assign","","",1,[[["self"],["u32"]]]],[11,"mul","","",1,[[["self"],["u64"]],["biguint"]]],[11,"mul_assign","","",1,[[["self"],["u64"]]]],[11,"div","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"div","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"div_assign","","",1,[[["self"],["biguint"]]]],[11,"div_assign","","",1,[[["self"],["biguint"]]]],[11,"div","","",1,[[["self"],["u8"]],["biguint"]]],[11,"div","","",1,[[["self"],["u8"]],["biguint"]]],[11,"div","","",1,[[["self"],["u16"]],["biguint"]]],[11,"div","","",1,[[["self"],["u16"]],["biguint"]]],[11,"div","","",1,[[["self"],["usize"]],["biguint"]]],[11,"div","","",1,[[["self"],["usize"]],["biguint"]]],[11,"div_assign","","",1,[[["self"],["u8"]]]],[11,"div_assign","","",1,[[["self"],["u16"]]]],[11,"div_assign","","",1,[[["self"],["usize"]]]],[11,"div","","",1,[[["self"],["u32"]],["biguint"]]],[11,"div","","",1,[[["self"],["u64"]],["biguint"]]],[11,"div","","",1,[[["self"],["u32"]],["biguint"]]],[11,"div_assign","","",1,[[["self"],["u32"]]]],[11,"div","","",1,[[["self"],["u64"]],["biguint"]]],[11,"div_assign","","",1,[[["self"],["u64"]]]],[11,"rem","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"rem","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"rem_assign","","",1,[[["self"],["biguint"]]]],[11,"rem_assign","","",1,[[["self"],["biguint"]]]],[11,"rem","","",1,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u8"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u16"]],["biguint"]]],[11,"rem","","",1,[[["self"],["usize"]],["biguint"]]],[11,"rem","","",1,[[["self"],["usize"]],["biguint"]]],[11,"rem_assign","","",1,[[["self"],["u8"]]]],[11,"rem_assign","","",1,[[["self"],["u16"]]]],[11,"rem_assign","","",1,[[["self"],["usize"]]]],[11,"rem","","",1,[[["self"],["u32"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u64"]],["biguint"]]],[11,"rem","","",1,[[["self"],["u32"]],["biguint"]]],[11,"rem_assign","","",1,[[["self"],["u32"]]]],[11,"rem","","",1,[[["self"],["u64"]],["biguint"]]],[11,"rem_assign","","",1,[[["self"],["u64"]]]],[11,"neg","","",1,[[["self"]],["biguint"]]],[11,"checked_add","","",1,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_sub","","",1,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_mul","","",1,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"checked_div","","",1,[[["self"],["biguint"]],["option",["biguint"]]]],[11,"div_rem","","",1,N],[11,"div_floor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"mod_floor","","",1,[[["self"],["biguint"]],["biguint"]]],[11,"div_mod_floor","","",1,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",1,[[["self"],["self"]],["self"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",1,[[["self"],["biguint"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["biguint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,[[["self"],["biguint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,[[["self"]],["bool"]]],[11,"to_i64","","",1,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",1,[[["self"]],["option",["i128"]]]],[11,"to_u64","","",1,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",1,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",1,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",1,[[["self"]],["option",["f64"]]]],[11,"from_i64","","",1,[[["i64"]],["option",["biguint"]]]],[11,"from_i128","","",1,[[["i128"]],["option",["biguint"]]]],[11,"from_u64","","",1,[[["u64"]],["option",["biguint"]]]],[11,"from_u128","","",1,[[["u128"]],["option",["biguint"]]]],[11,"from_f64","","",1,[[["f64"]],["option",["biguint"]]]],[11,"from","","",1,[[["u64"]],["self"]]],[11,"from","","",1,[[["u128"]],["self"]]],[11,"from","","",1,[[["u8"]],["self"]]],[11,"from","","",1,[[["u16"]],["self"]]],[11,"from","","",1,[[["u32"]],["self"]]],[11,"from","","",1,[[["usize"]],["self"]]],[11,"to_biguint","","",1,[[["self"]],["option",["biguint"]]]],[11,"new","","Creates and initializes a `BigUint`.",1,[[["vec",["u32"]]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",1,N],[11,"assign_from_slice","","Assign a value to a `BigUint`.",1,N],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",1,N],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",1,N],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",1,N],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",1,N],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",1,N],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",1,[[["self"]],["vec",["u8"]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",1,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",1,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",1,[[["self"],["u32"]],["vec",["u8"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",1,[[["self"],["u32"]],["vec",["u8"]]]],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",1,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",1,[[["self"],["self"],["self"]],["self"]]],[11,"sum","","",1,[[["i"]],["self"]]],[11,"product","","",1,[[["i"]],["self"]]],[11,"eq","","",0,[[["self"],["sign"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["sign"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["sign"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["sign"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"neg","","Negate Sign value.",0,[[["self"]],["sign"]]],[11,"mul","","",0,[[["self"],["sign"]],["sign"]]],[11,"clone","","",2,[[["self"]],["bigint"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"eq","","",2,[[["self"],["bigint"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["bigint"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["bigint"]],["ordering"]]],[11,"default","","",2,[[],["bigint"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"not","","",2,[[["self"]],["bigint"]]],[11,"bitand","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitand","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitand_assign","","",2,[[["self"],["bigint"]]]],[11,"bitand_assign","","",2,[[["self"],["bigint"]]]],[11,"bitor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitor_assign","","",2,[[["self"],["bigint"]]]],[11,"bitor_assign","","",2,[[["self"],["bigint"]]]],[11,"bitxor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitxor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"bitxor_assign","","",2,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",2,[[["self"],["bigint"]]]],[11,"from_str","","",2,[[["str"]],["result",["bigint","parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",2,[[["str"],["u32"]],["result",["bigint","parsebiginterror"]]]],[11,"shl","","",2,[[["self"],["usize"]],["bigint"]]],[11,"shl_assign","","",2,[[["self"],["usize"]]]],[11,"shr","","",2,[[["self"],["usize"]],["bigint"]]],[11,"shr_assign","","",2,[[["self"],["usize"]]]],[11,"zero","","",2,[[],["bigint"]]],[11,"is_zero","","",2,[[["self"]],["bool"]]],[11,"one","","",2,[[],["bigint"]]],[11,"is_one","","",2,[[["self"]],["bool"]]],[11,"abs","","",2,[[["self"]],["bigint"]]],[11,"abs_sub","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"signum","","",2,[[["self"]],["bigint"]]],[11,"is_positive","","",2,[[["self"]],["bool"]]],[11,"is_negative","","",2,[[["self"]],["bool"]]],[11,"add","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"add","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"add_assign","","",2,[[["self"],["bigint"]]]],[11,"add_assign","","",2,[[["self"],["bigint"]]]],[11,"add","","",2,[[["self"],["u8"]],["bigint"]]],[11,"add","","",2,[[["self"],["u8"]],["bigint"]]],[11,"add","","",2,[[["self"],["u16"]],["bigint"]]],[11,"add","","",2,[[["self"],["u16"]],["bigint"]]],[11,"add","","",2,[[["self"],["usize"]],["bigint"]]],[11,"add","","",2,[[["self"],["usize"]],["bigint"]]],[11,"add","","",2,[[["self"],["i8"]],["bigint"]]],[11,"add","","",2,[[["self"],["i8"]],["bigint"]]],[11,"add","","",2,[[["self"],["i16"]],["bigint"]]],[11,"add","","",2,[[["self"],["i16"]],["bigint"]]],[11,"add","","",2,[[["self"],["isize"]],["bigint"]]],[11,"add","","",2,[[["self"],["isize"]],["bigint"]]],[11,"add_assign","","",2,[[["self"],["u8"]]]],[11,"add_assign","","",2,[[["self"],["u16"]]]],[11,"add_assign","","",2,[[["self"],["usize"]]]],[11,"add_assign","","",2,[[["self"],["i8"]]]],[11,"add_assign","","",2,[[["self"],["i16"]]]],[11,"add_assign","","",2,[[["self"],["isize"]]]],[11,"add","","",2,[[["self"],["u32"]],["bigint"]]],[11,"add","","",2,[[["self"],["u64"]],["bigint"]]],[11,"add","","",2,[[["self"],["u32"]],["bigint"]]],[11,"add_assign","","",2,[[["self"],["u32"]]]],[11,"add","","",2,[[["self"],["u64"]],["bigint"]]],[11,"add_assign","","",2,[[["self"],["u64"]]]],[11,"add","","",2,[[["self"],["i32"]],["bigint"]]],[11,"add","","",2,[[["self"],["i64"]],["bigint"]]],[11,"add","","",2,[[["self"],["i32"]],["bigint"]]],[11,"add_assign","","",2,[[["self"],["i32"]]]],[11,"add","","",2,[[["self"],["i64"]],["bigint"]]],[11,"add_assign","","",2,[[["self"],["i64"]]]],[11,"sub","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"sub","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"sub_assign","","",2,[[["self"],["bigint"]]]],[11,"sub_assign","","",2,[[["self"],["bigint"]]]],[11,"sub","","",2,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u8"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u16"]],["bigint"]]],[11,"sub","","",2,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",2,[[["self"],["usize"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i8"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i16"]],["bigint"]]],[11,"sub","","",2,[[["self"],["isize"]],["bigint"]]],[11,"sub","","",2,[[["self"],["isize"]],["bigint"]]],[11,"sub_assign","","",2,[[["self"],["u8"]]]],[11,"sub_assign","","",2,[[["self"],["u16"]]]],[11,"sub_assign","","",2,[[["self"],["usize"]]]],[11,"sub_assign","","",2,[[["self"],["i8"]]]],[11,"sub_assign","","",2,[[["self"],["i16"]]]],[11,"sub_assign","","",2,[[["self"],["isize"]]]],[11,"sub","","",2,[[["self"],["u32"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u64"]],["bigint"]]],[11,"sub","","",2,[[["self"],["u32"]],["bigint"]]],[11,"sub_assign","","",2,[[["self"],["u32"]]]],[11,"sub","","",2,[[["self"],["u64"]],["bigint"]]],[11,"sub_assign","","",2,[[["self"],["u64"]]]],[11,"sub","","",2,[[["self"],["i32"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i64"]],["bigint"]]],[11,"sub","","",2,[[["self"],["i32"]],["bigint"]]],[11,"sub_assign","","",2,[[["self"],["i32"]]]],[11,"sub","","",2,[[["self"],["i64"]],["bigint"]]],[11,"sub_assign","","",2,[[["self"],["i64"]]]],[11,"mul","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"mul","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"mul_assign","","",2,[[["self"],["bigint"]]]],[11,"mul_assign","","",2,[[["self"],["bigint"]]]],[11,"mul","","",2,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u8"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u16"]],["bigint"]]],[11,"mul","","",2,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",2,[[["self"],["usize"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i8"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i16"]],["bigint"]]],[11,"mul","","",2,[[["self"],["isize"]],["bigint"]]],[11,"mul","","",2,[[["self"],["isize"]],["bigint"]]],[11,"mul_assign","","",2,[[["self"],["u8"]]]],[11,"mul_assign","","",2,[[["self"],["u16"]]]],[11,"mul_assign","","",2,[[["self"],["usize"]]]],[11,"mul_assign","","",2,[[["self"],["i8"]]]],[11,"mul_assign","","",2,[[["self"],["i16"]]]],[11,"mul_assign","","",2,[[["self"],["isize"]]]],[11,"mul","","",2,[[["self"],["u32"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u64"]],["bigint"]]],[11,"mul","","",2,[[["self"],["u32"]],["bigint"]]],[11,"mul_assign","","",2,[[["self"],["u32"]]]],[11,"mul","","",2,[[["self"],["u64"]],["bigint"]]],[11,"mul_assign","","",2,[[["self"],["u64"]]]],[11,"mul","","",2,[[["self"],["i32"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i64"]],["bigint"]]],[11,"mul","","",2,[[["self"],["i32"]],["bigint"]]],[11,"mul_assign","","",2,[[["self"],["i32"]]]],[11,"mul","","",2,[[["self"],["i64"]],["bigint"]]],[11,"mul_assign","","",2,[[["self"],["i64"]]]],[11,"div","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"div","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"div_assign","","",2,[[["self"],["bigint"]]]],[11,"div_assign","","",2,[[["self"],["bigint"]]]],[11,"div","","",2,[[["self"],["u8"]],["bigint"]]],[11,"div","","",2,[[["self"],["u8"]],["bigint"]]],[11,"div","","",2,[[["self"],["u16"]],["bigint"]]],[11,"div","","",2,[[["self"],["u16"]],["bigint"]]],[11,"div","","",2,[[["self"],["usize"]],["bigint"]]],[11,"div","","",2,[[["self"],["usize"]],["bigint"]]],[11,"div","","",2,[[["self"],["i8"]],["bigint"]]],[11,"div","","",2,[[["self"],["i8"]],["bigint"]]],[11,"div","","",2,[[["self"],["i16"]],["bigint"]]],[11,"div","","",2,[[["self"],["i16"]],["bigint"]]],[11,"div","","",2,[[["self"],["isize"]],["bigint"]]],[11,"div","","",2,[[["self"],["isize"]],["bigint"]]],[11,"div_assign","","",2,[[["self"],["u8"]]]],[11,"div_assign","","",2,[[["self"],["u16"]]]],[11,"div_assign","","",2,[[["self"],["usize"]]]],[11,"div_assign","","",2,[[["self"],["i8"]]]],[11,"div_assign","","",2,[[["self"],["i16"]]]],[11,"div_assign","","",2,[[["self"],["isize"]]]],[11,"div","","",2,[[["self"],["u32"]],["bigint"]]],[11,"div","","",2,[[["self"],["u64"]],["bigint"]]],[11,"div","","",2,[[["self"],["u32"]],["bigint"]]],[11,"div_assign","","",2,[[["self"],["u32"]]]],[11,"div","","",2,[[["self"],["u64"]],["bigint"]]],[11,"div_assign","","",2,[[["self"],["u64"]]]],[11,"div","","",2,[[["self"],["i32"]],["bigint"]]],[11,"div","","",2,[[["self"],["i64"]],["bigint"]]],[11,"div","","",2,[[["self"],["i32"]],["bigint"]]],[11,"div_assign","","",2,[[["self"],["i32"]]]],[11,"div","","",2,[[["self"],["i64"]],["bigint"]]],[11,"div_assign","","",2,[[["self"],["i64"]]]],[11,"rem","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"rem","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"rem_assign","","",2,[[["self"],["bigint"]]]],[11,"rem_assign","","",2,[[["self"],["bigint"]]]],[11,"rem","","",2,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u8"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u16"]],["bigint"]]],[11,"rem","","",2,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",2,[[["self"],["usize"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i8"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i16"]],["bigint"]]],[11,"rem","","",2,[[["self"],["isize"]],["bigint"]]],[11,"rem","","",2,[[["self"],["isize"]],["bigint"]]],[11,"rem_assign","","",2,[[["self"],["u8"]]]],[11,"rem_assign","","",2,[[["self"],["u16"]]]],[11,"rem_assign","","",2,[[["self"],["usize"]]]],[11,"rem_assign","","",2,[[["self"],["i8"]]]],[11,"rem_assign","","",2,[[["self"],["i16"]]]],[11,"rem_assign","","",2,[[["self"],["isize"]]]],[11,"rem","","",2,[[["self"],["u32"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u64"]],["bigint"]]],[11,"rem","","",2,[[["self"],["u32"]],["bigint"]]],[11,"rem_assign","","",2,[[["self"],["u32"]]]],[11,"rem","","",2,[[["self"],["u64"]],["bigint"]]],[11,"rem_assign","","",2,[[["self"],["u64"]]]],[11,"rem","","",2,[[["self"],["i32"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i64"]],["bigint"]]],[11,"rem","","",2,[[["self"],["i32"]],["bigint"]]],[11,"rem_assign","","",2,[[["self"],["i32"]]]],[11,"rem","","",2,[[["self"],["i64"]],["bigint"]]],[11,"rem_assign","","",2,[[["self"],["i64"]]]],[11,"neg","","",2,[[["self"]],["bigint"]]],[11,"checked_add","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"div_rem","","",2,N],[11,"div_floor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"mod_floor","","",2,[[["self"],["bigint"]],["bigint"]]],[11,"div_mod_floor","","",2,N],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,[[["self"],["bigint"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,[[["self"],["bigint"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["self"],["bigint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,[[["self"],["bigint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,[[["self"]],["bool"]]],[11,"to_i64","","",2,[[["self"]],["option",["i64"]]]],[11,"to_i128","","",2,[[["self"]],["option",["i128"]]]],[11,"to_u64","","",2,[[["self"]],["option",["u64"]]]],[11,"to_u128","","",2,[[["self"]],["option",["u128"]]]],[11,"to_f32","","",2,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",2,[[["self"]],["option",["f64"]]]],[11,"from_i64","","",2,[[["i64"]],["option",["bigint"]]]],[11,"from_i128","","",2,[[["i128"]],["option",["bigint"]]]],[11,"from_u64","","",2,[[["u64"]],["option",["bigint"]]]],[11,"from_u128","","",2,[[["u128"]],["option",["bigint"]]]],[11,"from_f64","","",2,[[["f64"]],["option",["bigint"]]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["i128"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["u128"]],["self"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["biguint"]],["self"]]],[11,"to_bigint","","",2,[[["self"]],["option",["bigint"]]]],[11,"to_bigint","","",1,[[["self"]],["option",["bigint"]]]],[11,"to_biguint","","",2,[[["self"]],["option",["biguint"]]]],[11,"new","","Creates and initializes a BigInt.",2,[[["sign"],["vec",["u32"]]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",2,[[["sign"],["biguint"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",2,N],[11,"assign_from_slice","","Reinitializes a `BigInt`.",2,N],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",2,N],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",2,N],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",2,N],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",2,N],[11,"parse_bytes","","Creates and initializes a `BigInt`.",2,N],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,N],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,N],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",2,N],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",2,N],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",2,[[["self"]],["vec",["u8"]]]],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",2,[[["self"]],["vec",["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,[[["self"],["u32"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,N],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,N],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",2,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",2,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",2,[[["self"]],["option",["biguint"]]]],[11,"checked_add","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_sub","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_mul","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"checked_div","","",2,[[["self"],["bigint"]],["option",["bigint"]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",2,[[["self"],["self"],["self"]],["self"]]],[11,"sum","","",2,[[["i"]],["self"]]],[11,"product","","",2,[[["i"]],["self"]]],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",N,N],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",3,[[["self"]],["option",["biguint"]]]],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",N,N],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",4,[[["self"]],["option",["bigint"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["parsebiginterror"]]],[11,"eq","","",5,[[["self"],["parsebiginterror"]],["bool"]]],[11,"ne","","",5,[[["self"],["parsebiginterror"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]]],"paths":[[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[3,"ParseBigIntError"]]};
searchIndex["num_complex"]={"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[3,"ParseComplexError","","",N,N],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["complex"]]],[11,"new","","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",0,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",0,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,N],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",0,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",0,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",0,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["self"]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"inv","","",0,[[["self"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"]],["result"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,[[["str"],["u32"]],["result"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_derive"]={"doc":"Procedural macros to derive numeric traits in Rust.","items":[[5,"from_primitive","num_derive","Derives [`num_traits::FromPrimitive`][from] for simple enums.",N,[[["tokenstream"]],["tokenstream"]]],[5,"to_primitive","","Derives [`num_traits::ToPrimitive`][to] for simple enums.",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,[[["t"]],["iterbinomial"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"]={"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",N,N],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,N],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,N],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[11,"clone","","",0,[[["self"]],["range"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"clone","","",1,[[["self"]],["rangeinclusive"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"clone","","",2,[[["self"]],["rangestep"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"clone","","",3,[[["self"]],["rangestepinclusive"]]],[11,"next","","",3,[[["self"]],["option"]]]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"]={"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",N,N],[3,"ParseRatioError","","",N,N],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",N,N],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",N,N],[6,"BigRational","","Alias for arbitrary precision rationals.",N,N],[11,"clone","","",0,[[["self"]],["ratio"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[["t"],["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,[[["t"],["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",0,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",0,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",0,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",0,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",0,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["usize"]],["ratio"]]],[11,"from_float","","Converts a float into a rational number.",0,[[["t"]],["option",["bigrational"]]]],[11,"from","","",0,[[["t"]],["ratio"]]],[11,"from","","",0,N],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"mul","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",0,[[["self"],["t"]],["ratio"]]],[11,"mul","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",0,[[["self"],["t"]],["ratio"]]],[11,"div","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",0,[[["self"],["t"]],["ratio"]]],[11,"div","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",0,[[["self"],["t"]],["ratio"]]],[11,"add","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",0,[[["self"],["t"]],["ratio"]]],[11,"add","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",0,[[["self"],["t"]],["ratio"]]],[11,"sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",0,[[["self"],["t"]],["ratio"]]],[11,"sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",0,[[["self"],["t"]],["ratio"]]],[11,"rem","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",0,[[["self"],["t"]],["ratio"]]],[11,"rem","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",0,[[["self"],["t"]],["ratio"]]],[11,"checked_mul","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_div","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_add","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_sub","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"neg","","",0,[[["self"]],["ratio"]]],[11,"inv","","",0,[[["self"]],["ratio"]]],[11,"zero","","",0,[[],["ratio"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["ratio"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[["str"],["u32"]],["result",["ratio","parseratioerror"]]]],[11,"abs","","",0,[[["self"]],["ratio"]]],[11,"abs_sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",0,[[["self"]],["ratio"]]],[11,"is_positive","","",0,[[["self"]],["bool"]]],[11,"is_negative","","",0,[[["self"]],["bool"]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[["str"]],["result",["ratio","parseratioerror"]]]],[11,"into","","",0,N],[11,"clone","","",1,[[["self"]],["parseratioerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"approximate_float","","",0,[[["f"]],["option",["ratio"]]]]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",21,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",22,N],[13,"Invalid","","",22,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",23,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num_traits","",N,N],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"Float","num_traits::float","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",24,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",24,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",24,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",24,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",24,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",24,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",24,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",24,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",24,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",24,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",24,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",24,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",24,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",24,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",24,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",24,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",24,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",24,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",24,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",24,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",24,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",24,[[["self"]],["self"]]],[0,"cast","num_traits","",N,N],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[11,"fmt","num_traits","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ogg"]={"doc":"Ogg container decoder and encoder","items":[[3,"Packet","ogg","Ogg packet representation.",N,N],[12,"data","","The data the `Packet` contains",0,N],[12,"first_packet","","`true` iff this packet is the first one in the logical bitstream.",0,N],[12,"last_packet","","`true` iff this packet is the last one in the logical bitstream",0,N],[12,"absgp_page","","Absolute granule position of the last page the packet was in. The meaning of the absolute granule position is defined by the codec.",0,N],[12,"stream_serial","","Serial number. Uniquely identifying the logical bitstream.",0,N],[0,"reading","","Reading logic",N,N],[3,"OggPage","ogg::reading","Contains a fully parsed OGG page.",N,N],[3,"PageParser","","Helper struct for parsing pages",N,N],[3,"BasePacketReader","","Low level struct for reading from an Ogg stream.",N,N],[3,"PacketReader","","Reader for packets from an Ogg stream.",N,N],[4,"OggReadError","","Error that can be raised when decoding an Ogg transport.",N,N],[13,"NoCapturePatternFound","","The capture pattern for a new page was not found where one was expected.",1,N],[13,"InvalidStreamStructVer","","Invalid stream structure version, with the given one attached.",1,N],[13,"HashMismatch","","Mismatch of the hash value with (expected, calculated) value.",1,N],[13,"ReadError","","I/O error occured.",1,N],[13,"InvalidData","","Some constraint required by the spec was not met.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["fmterror"]]]],[11,"from","","",1,[[["error"]],["oggreaderror"]]],[11,"new","","Creates a new Page parser",2,N],[11,"parse_segments","","Parses the segments buffer, and returns the requested size of the packets content array.",2,[[["self"],["vec",["u8"]]],["usize"]]],[11,"parse_packet_data","","Parses the packets data and verifies the checksum.",2,[[["self"],["vec",["u8"]]],["result",["oggpage","oggreaderror"]]]],[11,"new","","Constructs a new blank `BasePacketReader`.",3,[[],["self"]]],[11,"read_packet","","Extracts a packet from the cache, if the cache contains valid packet data, otherwise it returns `None`.",3,[[["self"]],["option",["packet"]]]],[11,"push_page","","Pushes a given Ogg page, updating the internal structures with its contents.",3,[[["self"],["oggpage"]],["result",["oggreaderror"]]]],[11,"update_after_seek","","Reset the internal state after a seek",3,[[["self"]]]],[11,"new","","Constructs a new `PacketReader` with a given `Read`.",4,[[["t"]],["packetreader"]]],[11,"into_inner","","Returns the wrapped reader, consuming the `PacketReader`.",4,[[["self"]],["t"]]],[11,"read_packet","","Reads a packet, and returns it on success.",4,[[["self"]],["result",["option","oggreaderror"]]]],[11,"read_packet_expected","","Reads a packet, and returns it on success.",4,[[["self"]],["result",["packet","oggreaderror"]]]],[11,"seek_bytes","","Seeks the underlying reader",4,[[["self"],["seekfrom"]],["result",["u64","error"]]]],[11,"seek_absgp","","Seeks to absolute granule pos",4,[[["self"],["option",["u32"]],["u64"]],["result",["bool","oggreaderror"]]]],[0,"writing","ogg","Writing logic",N,N],[3,"PacketWriter","ogg::writing","Writer for packets into an Ogg stream.",N,N],[4,"PacketWriteEndInfo","","Specifies whether to end something with the write of the packet.",N,N],[13,"NormalPacket","","No ends here, just a normal packet",5,N],[13,"EndPage","","Force-end the current page",5,N],[13,"EndStream","","End the whole logical stream.",5,N],[11,"eq","","",5,[[["self"],["packetwriteendinfo"]],["bool"]]],[11,"clone","","",5,[[["self"]],["packetwriteendinfo"]]],[11,"new","","",6,[[["t"]],["self"]]],[11,"into_inner","","",6,[[["self"]],["t"]]],[11,"write_packet","","Write a packet",6,[[["self"],["box"],["u32"],["packetwriteendinfo"],["u64"]],["result",["error"]]]],[11,"get_current_offs","","",6,[[["self"]],["result",["u64","error"]]]]],"paths":[[3,"Packet"],[4,"OggReadError"],[3,"PageParser"],[3,"BasePacketReader"],[3,"PacketReader"],[4,"PacketWriteEndInfo"],[3,"PacketWriter"]]};
searchIndex["ordered_float"]={"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[12,"0","","",0,N],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["orderedfloat"]]],[11,"clone","","",0,[[["self"]],["orderedfloat"]]],[11,"into_inner","","Get the value out.",0,[[["self"]],["t"]]],[11,"as_ref","","",0,[[["self"]],["t"]]],[11,"as_mut","","",0,[[["self"]],["t"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"into","","",0,[[["self"]],["f32"]]],[11,"into","","",0,[[["self"]],["f64"]]],[11,"from","","",0,[[["t"]],["self"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"partial_cmp","","",1,[[["self"],["notnan"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"le","","",1,[[["self"],["notnan"]],["bool"]]],[11,"gt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ge","","",1,[[["self"],["notnan"]],["bool"]]],[11,"eq","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ne","","",1,[[["self"],["notnan"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["notnan"]]],[11,"clone","","",1,[[["self"]],["notnan"]]],[11,"new","","Create a NotNaN value.",1,[[["t"]],["result",["floatisnan"]]]],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,[[["t"]],["self"]]],[11,"into_inner","","Get the value out.",1,[[["self"]],["t"]]],[11,"as_ref","","",1,[[["self"]],["t"]]],[11,"cmp","","",1,[[["self"],["notnan"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into","","",1,[[["self"]],["f32"]]],[11,"into","","",1,[[["self"]],["f64"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"deref","","",1,N],[11,"add","","",1,[[["self"],["self"]],["self"]]],[11,"add","","",1,[[["self"],["t"]],["self"]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["f64"]]]],[11,"add_assign","","",1,[[["self"],["f32"]]]],[11,"sub","","",1,[[["self"],["self"]],["self"]]],[11,"sub","","",1,[[["self"],["t"]],["self"]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["f64"]]]],[11,"sub_assign","","",1,[[["self"],["f32"]]]],[11,"mul","","",1,[[["self"],["self"]],["self"]]],[11,"mul","","",1,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["f64"]]]],[11,"mul_assign","","",1,[[["self"],["f32"]]]],[11,"div","","",1,[[["self"],["self"]],["self"]]],[11,"div","","",1,[[["self"],["t"]],["self"]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["f64"]]]],[11,"div_assign","","",1,[[["self"],["f32"]]]],[11,"rem","","",1,[[["self"],["self"]],["self"]]],[11,"rem","","",1,[[["self"],["t"]],["self"]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["f64"]]]],[11,"rem_assign","","",1,[[["self"],["f32"]]]],[11,"neg","","",1,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["floatisnan"]]],[11,"eq","","",2,[[["self"],["floatisnan"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into","","",2,[[["self"]],["error"]]]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["osmesa_sys"]={"doc":"","items":[[3,"OsMesa","osmesa_sys","Symbols loaded from a shared library.",N,N],[12,"OSMesaColorClamp","","",0,N],[12,"OSMesaCreateContext","","",0,N],[12,"OSMesaCreateContextExt","","",0,N],[12,"OSMesaCreateContextAttribs","","",0,N],[12,"OSMesaDestroyContext","","",0,N],[12,"OSMesaGetColorBuffer","","",0,N],[12,"OSMesaGetCurrentContext","","",0,N],[12,"OSMesaGetDepthBuffer","","",0,N],[12,"OSMesaGetIntegerv","","",0,N],[12,"OSMesaGetProcAddress","","",0,N],[12,"OSMesaMakeCurrent","","",0,N],[12,"OSMesaPixelStore","","",0,N],[3,"osmesa_context","","",N,N],[5,"OSMesaColorClamp","","",N,N],[5,"OSMesaCreateContext","","",N,[[["c_uint"],["osmesacontext"]],["osmesacontext"]]],[5,"OSMesaCreateContextExt","","",N,[[["c_uint"],["c_int"],["c_int"],["c_int"],["osmesacontext"]],["osmesacontext"]]],[5,"OSMesaCreateContextAttribs","","",N,N],[5,"OSMesaDestroyContext","","",N,N],[5,"OSMesaGetColorBuffer","","",N,N],[5,"OSMesaGetCurrentContext","","",N,[[],["osmesacontext"]]],[5,"OSMesaGetDepthBuffer","","",N,N],[5,"OSMesaGetIntegerv","","",N,N],[5,"OSMesaGetProcAddress","","",N,N],[5,"OSMesaMakeCurrent","","",N,N],[5,"OSMesaPixelStore","","",N,N],[6,"OSMesaContext","","",N,N],[6,"OSMESAproc","","",N,N],[17,"OSMESA_BGRA","","",N,N],[17,"OSMESA_ARGB","","",N,N],[17,"OSMESA_BGR","","",N,N],[17,"OSMESA_RGB_565","","",N,N],[17,"OSMESA_COLOR_INDEX","","",N,N],[17,"OSMESA_RGB","","",N,N],[17,"OSMESA_RGBA","","",N,N],[17,"OSMESA_WIDTH","","",N,N],[17,"OSMESA_HEIGHT","","",N,N],[17,"OSMESA_FORMAT","","",N,N],[17,"OSMESA_TYPE","","",N,N],[17,"OSMESA_MAX_WIDTH","","",N,N],[17,"OSMESA_MAX_HEIGHT","","",N,N],[17,"OSMESA_ROW_LENGTH","","",N,N],[17,"OSMESA_Y_UP","","",N,N],[17,"OSMESA_DEPTH_BITS","","",N,N],[17,"OSMESA_STENCIL_BITS","","",N,N],[17,"OSMESA_ACCUM_BITS","","",N,N],[17,"OSMESA_PROFILE","","",N,N],[17,"OSMESA_CORE_PROFILE","","",N,N],[17,"OSMESA_COMPAT_PROFILE","","",N,N],[17,"OSMESA_CONTEXT_MAJOR_VERSION","","",N,N],[17,"OSMESA_CONTEXT_MINOR_VERSION","","",N,N],[11,"open","","Tries to open the dynamic library.",0,[[["path"]],["result",["osmesa","loadingerror"]]]],[11,"try_loading","","Try loading the static symbols linked to this library.",0,[[],["result",["osmesa","loadingerror"]]]]],"paths":[[3,"OsMesa"]]};
searchIndex["owning_ref"]={"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N],[3,"OwningRef","","An owning reference.",N,N],[3,"OwningRefMut","","An mutable owning reference.",N,N],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",N,N],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",N,N],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",N,N],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",N,N],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",N,N],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",N,N],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",N,N],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",N,N],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",N,N],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",N,N],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",N,N],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",N,N],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",N,N],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",N,N],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",N,N],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,N],[10,"into_erased","","Perform the type erasure.",0,N],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",N,N],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,N],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,N],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",N,N],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,N],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,N],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["owningref"]]],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["result",["owningref"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,[[["self"],["f"]],["owningref"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,[[["self"]],["owningref",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,[[["self"]],["owningref"]]],[11,"owner","","A getter for the underlying owner.",3,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",3,[[["self"]],["o"]]],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningref"]]],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningref"]]]],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningrefmut"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,[[["self"]],["owningrefmut",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,[[["self"]],["owningrefmut"]]],[11,"owner","","A getter for the underlying owner.",4,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",4,[[["self"]],["o"]]],[11,"deref","","",5,N],[11,"deref_mut","","",5,N],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,[[["o"]],["self"]]],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,[[["o"]],["self"]]],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["self"]]],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["result"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref_mut","","",4,[[["self"]],["t"]]],[11,"as_ref","","",3,[[["self"]],["t"]]],[11,"as_ref","","",4,[[["self"]],["t"]]],[11,"as_mut","","",4,[[["self"]],["t"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"from","","",3,[[["o"]],["self"]]],[11,"from","","",4,[[["o"]],["self"]]],[11,"from","","",3,[[["owningrefmut"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"]={"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Condvar","parking_lot","A Condition Variable",N,N],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",N,N],[3,"Once","","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",N,N],[3,"RawMutex","","Raw mutex type backed by the parking lot.",N,N],[3,"RawRwLock","","Raw reader-writer lock type backed by the parking lot.",N,N],[3,"RawThreadId","","Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.",N,N],[4,"OnceState","","Current state of a `Once`.",N,N],[13,"New","","A closure has not been executed yet",0,N],[13,"Poisoned","","A closure was executed but panicked.",0,N],[13,"InProgress","","A thread is currently executing a closure.",0,N],[13,"Done","","A closure has completed sucessfully.",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"clone","","",1,[[["self"]],["waittimeoutresult"]]],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,[[["self"]],["bool"]]],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,[[],["condvar"]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,[[["self"]]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,[[["self"]]]],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,[[["self"],["mutexguard"]]]],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,[[["self"],["mutexguard"],["instant"]],["waittimeoutresult"]]],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,[[["self"],["mutexguard"],["duration"]],["waittimeoutresult"]]],[11,"default","","",2,[[],["condvar"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["oncestate"]]],[11,"eq","","",0,[[["self"],["oncestate"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,[[["self"]],["bool"]]],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,[[["self"]],["bool"]]],[11,"new","","Creates a new `Once` value.",3,[[],["once"]]],[11,"state","","Returns the current state of this `Once`.",3,[[["self"]],["oncestate"]]],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",3,[[["self"],["f"]]]],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",3,[[["self"],["f"]]]],[11,"default","","",3,[[],["once"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"lock","","",4,[[["self"]]]],[11,"try_lock","","",4,[[["self"]],["bool"]]],[11,"unlock","","",4,[[["self"]]]],[11,"unlock_fair","","",4,[[["self"]]]],[11,"bump","","",4,[[["self"]]]],[11,"try_lock_until","","",4,[[["self"],["instant"]],["bool"]]],[11,"try_lock_for","","",4,[[["self"],["duration"]],["bool"]]],[11,"lock_exclusive","","",5,[[["self"]]]],[11,"try_lock_exclusive","","",5,[[["self"]],["bool"]]],[11,"unlock_exclusive","","",5,[[["self"]]]],[11,"lock_shared","","",5,[[["self"]]]],[11,"try_lock_shared","","",5,[[["self"]],["bool"]]],[11,"unlock_shared","","",5,[[["self"]]]],[11,"unlock_shared_fair","","",5,[[["self"]]]],[11,"unlock_exclusive_fair","","",5,[[["self"]]]],[11,"bump_shared","","",5,[[["self"]]]],[11,"bump_exclusive","","",5,[[["self"]]]],[11,"downgrade","","",5,[[["self"]]]],[11,"try_lock_shared_for","","",5,N],[11,"try_lock_shared_until","","",5,N],[11,"try_lock_exclusive_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_lock_exclusive_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"lock_shared_recursive","","",5,[[["self"]]]],[11,"try_lock_shared_recursive","","",5,[[["self"]],["bool"]]],[11,"try_lock_shared_recursive_for","","",5,N],[11,"try_lock_shared_recursive_until","","",5,N],[11,"lock_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable","","",5,[[["self"]]]],[11,"upgrade","","",5,[[["self"]]]],[11,"try_upgrade","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable_fair","","",5,[[["self"]]]],[11,"bump_upgradable","","",5,[[["self"]]]],[11,"downgrade_upgradable","","",5,[[["self"]]]],[11,"downgrade_to_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_lock_upgradable_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_upgrade_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_upgrade_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"nonzero_thread_id","","",6,[[["self"]],["usize"]]],[6,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[6,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[6,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"RwLock","","A reader-writer lock",N,N],[6,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[6,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[6,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[17,"ONCE_INIT","","Initialization value for static `Once` values.",N,N]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"]]};
searchIndex["parking_lot_core"]={"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",N,N],[12,"0","","",0,N],[3,"UnparkResult","","Result of an unpark operation.",N,N],[12,"unparked_threads","","The number of threads that were unparked.",1,N],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,N],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,N],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",N,N],[12,"0","","",2,N],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",N,N],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",N,N],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,N],[4,"ParkResult","","Result of a park operation.",N,N],[13,"Unparked","","We were unparked by another thread with the given token.",4,N],[13,"Invalid","","The validation callback returned false.",4,N],[13,"TimedOut","","The timeout expired.",4,N],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",N,N],[13,"Abort","","Abort the operation without doing anything.",5,N],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,N],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,N],[5,"park","","Parks the current thread in the queue associated with the given key.",N,[[["usize"],["v"],["b"],["t"],["parktoken"],["option",["instant"]]],["parkresult"]]],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",N,[[["usize"],["unparktoken"]],["usize"]]],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",N,[[["usize"],["f"],["c"]],["unparkresult"]]],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",N,[[["usize"],["c"]],["unparkresult"]]],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",N,[[["usize"],["usize"],["v"],["c"]],["unparkresult"]]],[11,"clone","","",4,[[["self"]],["parkresult"]]],[11,"eq","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"ne","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,[[["self"]],["bool"]]],[11,"clone","","",1,[[["self"]],["unparkresult"]]],[11,"eq","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["requeueop"]]],[11,"eq","","",5,[[["self"],["requeueop"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["filterop"]]],[11,"eq","","",3,[[["self"],["filterop"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["unparktoken"]]],[11,"eq","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"ne","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["parktoken"]]],[11,"eq","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"ne","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `SpinWait`.",6,[[],["spinwait"]]],[11,"reset","","Resets a `SpinWait` to its initial state.",6,[[["self"]]]],[11,"spin","","Spins until the sleep threshold has been reached.",6,[[["self"]],["bool"]]],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,[[["self"]]]],[11,"default","","",6,[[],["spinwait"]]],[0,"deadlock","","[Experimental] Deadlock detection",N,N],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",N,[[["usize"]]]],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",N,[[["usize"]]]],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",N,N],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",N,N]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["percent_encoding"]={"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",N,N],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",N,N],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",N,N],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",N,N],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",N,N],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",N,N],[3,"PercentDecode","","The return type of `percent_decode()`.",N,N],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",N,[[["u8"]],["str"]]],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",N,N],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",N,[[["str"],["e"]],["percentencode"]]],[5,"percent_decode","","Percent-decode the given bytes.",N,N],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",N,N],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,[[["self"],["u8"]],["bool"]]],[11,"clone","","",1,[[["self"]],["simple_encode_set"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"contains","","",1,[[["self"],["u8"]],["bool"]]],[11,"clone","","",2,[[["self"]],["query_encode_set"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"contains","","",2,[[["self"],["u8"]],["bool"]]],[11,"clone","","",3,[[["self"]],["default_encode_set"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"contains","","",3,[[["self"],["u8"]],["bool"]]],[11,"clone","","",4,[[["self"]],["path_segment_encode_set"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"contains","","",4,[[["self"],["u8"]],["bool"]]],[11,"clone","","",5,[[["self"]],["userinfo_encode_set"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"contains","","",5,[[["self"],["u8"]],["bool"]]],[11,"clone","","",6,[[["self"]],["percentencode"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option",["str"]]]],[11,"size_hint","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["percentdecode"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"next","","",7,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",7,N],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,[[["self"]],["option",["vec"]]]],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,[[["self"]],["result",["cow","utf8error"]]]],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,[[["self"]],["cow",["str"]]]],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",N,N]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["png"]={"doc":"PNG encoder and decoder This crate contains a PNG encoder and decoder. It supports reading of single lines or whole frames. ## The decoder The most important types for decoding purposes are `Decoder` and `Reader`. They both wrap a `std::io::Read`. `Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the image data is reached. ### Using the decoder     use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",N,N],[12,"xppu","","Pixels per unit, X axis",0,N],[12,"yppu","","Pixels per unit, Y axis",0,N],[12,"unit","","Either Meter or Unspecified",0,N],[3,"FrameControl","","Frame control information",N,N],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,N],[12,"width","","Width of the following frame",1,N],[12,"height","","Height of the following frame",1,N],[12,"x_offset","","X position at which to render the following frame",1,N],[12,"y_offset","","Y position at which to render the following frame",1,N],[12,"delay_num","","Frame delay fraction numerator",1,N],[12,"delay_den","","Frame delay fraction denominator",1,N],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,N],[12,"blend_op","","Type of frame area rendering for this frame",1,N],[3,"AnimationControl","","Animation control information",N,N],[12,"num_frames","","Number of frames",2,N],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,N],[3,"Info","","PNG info struct",N,N],[12,"width","","",3,N],[12,"height","","",3,N],[12,"bit_depth","","",3,N],[12,"color_type","","",3,N],[12,"interlaced","","",3,N],[12,"trns","","",3,N],[12,"pixel_dims","","",3,N],[12,"palette","","",3,N],[12,"frame_control","","",3,N],[12,"animation_control","","",3,N],[3,"Transformations","","Output transformations",N,N],[3,"Decoder","","PNG Decoder",N,N],[3,"Reader","","PNG reader (mostly high-level interface)",N,N],[3,"OutputInfo","","Output info",N,N],[12,"width","","",4,N],[12,"height","","",4,N],[12,"color_type","","",4,N],[12,"bit_depth","","",4,N],[12,"line_size","","",4,N],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",N,N],[3,"Encoder","","PNG Encoder",N,N],[3,"Writer","","PNG writer",N,N],[4,"ColorType","","",N,N],[13,"Grayscale","","",5,N],[13,"RGB","","",5,N],[13,"Indexed","","",5,N],[13,"GrayscaleAlpha","","",5,N],[13,"RGBA","","",5,N],[4,"BitDepth","","Bit depth of the png file",N,N],[13,"One","","",6,N],[13,"Two","","",6,N],[13,"Four","","",6,N],[13,"Eight","","",6,N],[13,"Sixteen","","",6,N],[4,"Unit","","Physical unit of the pixel dimensions",N,N],[13,"Unspecified","","",7,N],[13,"Meter","","",7,N],[4,"Decoded","","Result of the decoding process",N,N],[13,"Nothing","","Nothing decoded yet",8,N],[13,"Header","","",8,N],[13,"ChunkBegin","","",8,N],[13,"ChunkComplete","","",8,N],[13,"PixelDimensions","","",8,N],[13,"AnimationControl","","",8,N],[13,"FrameControl","","",8,N],[13,"ImageData","","Decoded raw image data.",8,N],[13,"PartialChunk","","",8,N],[13,"ImageEnd","","",8,N],[4,"DecodingError","","",N,N],[13,"IoError","","",9,N],[13,"Format","","",9,N],[13,"InvalidSignature","","",9,N],[13,"CrcMismatch","","",9,N],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,N],[12,"crc_val","","Stored CRC32 value",9,N],[12,"crc_sum","","Calculated CRC32 sum",9,N],[12,"chunk","","",9,N],[13,"Other","png","",9,N],[13,"CorruptFlateStream","","",9,N],[4,"EncodingError","","",N,N],[13,"IoError","","",10,N],[13,"Format","","",10,N],[0,"chunk","","Chunk types and functions",N,N],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",N,[[["chunktype"]],["bool"]]],[5,"is_private","","Returns true if the chunk is private.",N,[[["chunktype"]],["bool"]]],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set. If it is set the chunk name is invalid.",N,[[["chunktype"]],["bool"]]],[5,"safe_to_copy","","Returns true if the chunk is safe to copy if unknown.",N,[[["chunktype"]],["bool"]]],[6,"ChunkType","","",N,N],[17,"IHDR","","Image header",N,N],[17,"PLTE","","Palette",N,N],[17,"IDAT","","Image data",N,N],[17,"IEND","","Image trailer",N,N],[17,"tRNS","","Transparency",N,N],[17,"bKGD","","Background colour",N,N],[17,"tIME","","Image last-modification time",N,N],[17,"pHYs","","Physical pixel dimensions",N,N],[17,"acTL","","Animation control",N,N],[17,"fcTL","","Frame control",N,N],[17,"fdAT","","Frame data",N,N],[11,"fmt","png","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",9,[[["error"]],["decodingerror"]]],[11,"from","","",9,[[["string"]],["decodingerror"]]],[11,"new","","Creates a new StreamingDecoder",11,[[],["streamingdecoder"]]],[11,"reset","","Resets the StreamingDecoder",11,[[["self"]]]],[11,"update","","Low level StreamingDecoder interface.",11,N],[11,"set_param","","",12,[[["self"],["decoder"]]]],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,[[["self"]],["usize"]]],[11,"new","","",13,[[["r"]],["decoder"]]],[11,"read_info","","Reads all meta data until the first IDAT chunk",13,[[["self"]],["result",["decodingerror"]]]],[11,"info","","",14,[[["self"]],["info"]]],[11,"next_frame","","Decodes the next frame into `buf`",14,N],[11,"next_row","","Returns the next processed row of the image",14,[[["self"]],["result",["option","decodingerror"]]]],[11,"next_interlaced_row","","Returns the next processed row of the image",14,[[["self"]],["result",["option","decodingerror"]]]],[11,"output_color_type","","Returns the color type and the number of bits per sample of the data returned by `Reader::next_row` and Reader::frames`.",14,N],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame that is decoded using the given input transformations.",14,[[["self"]],["usize"]]],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",14,[[["self"],["u32"]],["usize"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",10,[[["error"]],["encodingerror"]]],[11,"new","","",15,[[["w"],["u32"],["u32"]],["encoder"]]],[11,"write_header","","",15,[[["self"]],["result",["writer","encodingerror"]]]],[11,"set_param","","",5,[[["self"],["encoder"]]]],[11,"set_param","","",6,[[["self"],["encoder"]]]],[11,"write_chunk","","",16,N],[11,"write_image_data","","Writes the image data.",16,N],[11,"drop","","",16,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["colortype"]]],[11,"eq","","",5,[[["self"],["colortype"]],["bool"]]],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,[[["self"]],["usize"]]],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,[[["u8"]],["option",["colortype"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["bitdepth"]]],[11,"eq","","",6,[[["self"],["bitdepth"]],["bool"]]],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",6,[[["u8"]],["option",["bitdepth"]]]],[11,"clone","","",0,[[["self"]],["pixeldimensions"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unit"]]],[11,"eq","","",7,[[["self"],["unit"]],["bool"]]],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",7,[[["u8"]],["option",["unit"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["animationcontrol"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["info"]]],[11,"size","","Size of the image",3,N],[11,"is_animated","","Returns true if the image is an APNG image.",3,[[["self"]],["bool"]]],[11,"animation_control","","Returns the frame control information of the image",3,[[["self"]],["option",["animationcontrol"]]]],[11,"frame_control","","Returns the frame control information of the current frame",3,[[["self"]],["option",["framecontrol"]]]],[11,"bits_per_pixel","","Returns the bits per pixel",3,[[["self"]],["usize"]]],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,[[["self"]],["usize"]]],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,[[["self"]],["usize"]]],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row ",3,[[["self"]],["usize"]]],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,[[["self"],["u32"]],["usize"]]],[11,"eq","","",12,[[["self"],["transformations"]],["bool"]]],[11,"ne","","",12,[[["self"],["transformations"]],["bool"]]],[11,"clone","","",12,[[["self"]],["transformations"]]],[11,"partial_cmp","","",12,[[["self"],["transformations"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["transformations"]],["bool"]]],[11,"le","","",12,[[["self"],["transformations"]],["bool"]]],[11,"gt","","",12,[[["self"],["transformations"]],["bool"]]],[11,"ge","","",12,[[["self"],["transformations"]],["bool"]]],[11,"cmp","","",12,[[["self"],["transformations"]],["ordering"]]],[11,"hash","","",12,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[18,"IDENTITY","","No transformation",12,N],[18,"STRIP_16","","Strip 16-bit samples to 8 bits",12,N],[18,"STRIP_ALPHA","","Discard the alpha channel",12,N],[18,"PACKING","","Expand 1; 2 and 4-bit samples to bytes",12,N],[18,"PACKSWAP","","Change order of packed pixels to LSB first",12,N],[18,"EXPAND","","Expand paletted images to RGB; expand grayscale images of less than 8-bit depth to 8-bit depth; and expand tRNS chunks to alpha channels.",12,N],[18,"INVERT_MONO","","Invert monochrome images",12,N],[18,"SHIFT","","Normalize pixels to the sBIT depth",12,N],[18,"BGR","","Flip RGB to BGR; RGBA to BGRA",12,N],[18,"SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",12,N],[18,"SWAP_ENDIAN","","Byte-swap 16-bit samples",12,N],[18,"INVERT_ALPHA","","Change alpha from opacity to transparency",12,N],[18,"STRIP_FILLER","","",12,N],[18,"STRIP_FILLER_BEFORE","","",12,N],[18,"STRIP_FILLER_AFTER","","",12,N],[18,"GRAY_TO_RGB","","",12,N],[18,"EXPAND_16","","",12,N],[18,"SCALE_16","","",12,N],[11,"empty","","Returns an empty set of flags.",12,[[],["transformations"]]],[11,"all","","Returns the set containing all flags.",12,[[],["transformations"]]],[11,"bits","","Returns the raw value of the flags currently stored.",12,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,[[["u32"]],["option",["transformations"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,[[["u32"]],["transformations"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",12,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,[[["self"],["transformations"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,[[["self"],["transformations"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",12,[[["self"],["transformations"]]]],[11,"remove","","Removes the specified flags in-place.",12,[[["self"],["transformations"]]]],[11,"toggle","","Toggles the specified flags in-place.",12,[[["self"],["transformations"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,[[["self"],["transformations"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",12,[[["self"],["transformations"]],["transformations"]]],[11,"bitor_assign","","Adds the set of flags.",12,[[["self"],["transformations"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,[[["self"],["transformations"]],["transformations"]]],[11,"bitxor_assign","","Toggles the set of flags.",12,[[["self"],["transformations"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",12,[[["self"],["transformations"]],["transformations"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",12,[[["self"],["transformations"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",12,[[["self"],["transformations"]],["transformations"]]],[11,"sub_assign","","Disables all flags enabled in the set.",12,[[["self"],["transformations"]]]],[11,"not","","Returns the complement of this set of flags.",12,[[["self"]],["transformations"]]],[11,"extend","","",12,[[["self"],["t"]]]],[11,"from_iter","","",12,[[["t"]],["transformations"]]],[8,"Parameter","","Configuration parameter trait",N,N],[10,"set_param","","",17,[[["self"],["object"]]]],[8,"HasParameters","","Object has parameters",N,N],[11,"set","","",18,[[["self"],["t"]],["self"]]],[11,"set","","",18,[[["self"],["t"]],["self"]]]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[11,"from","","",3,[[["span"]],["span"]]],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",4,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",5,[[["self"]],["intoiter"]]],[11,"clone","","",5,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",5,[[],["tokenstream"]]],[11,"empty","","",5,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",5,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"from_str","","",5,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",5,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",3,[[],["span"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"Span"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"isaac","","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",N,N],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",N,N],[0,"chacha","rand","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",N,N],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",N,N],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",N,N],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,N],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",N,N],[10,"reseed","","Reseed the given RNG.",1,N],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",N,N],[0,"os","rand","Interfaces to the operating system provided random number generators.",N,N],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",N,N],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",N,N],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",N,N],[8,"Rng","rand","A random number generator.",N,N],[10,"next_u32","","Return the next random u32.",2,[[["self"]],["u32"]]],[11,"next_u64","","Return the next random u64.",2,[[["self"]],["u64"]]],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f32"]]],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,[[["self"]],["f64"]]],[11,"fill_bytes","","Fill `dest` with random data.",2,N],[11,"gen","","Return a random value of a `Rand` type.",2,[[["self"]],["t"]]],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,[[["self"]],["generator"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,[[["self"],["t"],["t"]],["t"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,[[["self"]],["asciigenerator"]]],[11,"choose","","Return a random element from `values`.",2,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,N],[11,"shuffle","","Shuffle a mutable slice in place.",2,N],[8,"Rand","","A type that can be randomly generated using an `Rng`.",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,[[["r"]],["self"]]],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",N,N],[10,"reseed","","Reseed an RNG with the given seed.",4,N],[10,"from_seed","","Create a new RNG with the given seed.",4,[[["seed"]],["self"]]],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[3,"XorShiftRng","","An Xorshift[1] random number generator.",N,N],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",N,N],[12,"0","","",5,N],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",N,N],[12,"0","","",6,N],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",N,N],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",N,[[],["xorshiftrng"]]],[3,"ThreadRng","","The thread-local RNG.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",N,[[],["threadrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Sampling from random distributions.",N,N],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[0,"range","","Generating numbers between two others.",N,N],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",N,N],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",N,N],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,[[["self"],["self"]],["range"]]],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,[[["range"],["r"]],["self"]]],[0,"gamma","rand::distributions","The Gamma and derived distributions.",N,N],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[0,"normal","rand::distributions","The normal and derived distributions.",N,N],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",N,N],[12,"0","","",8,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[0,"exponential","rand::distributions","The exponential distribution.",N,N],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",N,N],[12,"0","","",9,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",11,[[["self"],["r"]],["support"]]],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",12,N],[12,"item","","The actual item which is being weighted",12,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[11,"new","rand::os","Create a new `OsRng`.",13,[[],["result",["osrng","error"]]]],[11,"clone","rand::distributions::normal","",8,[[["self"]],["standardnormal"]]],[11,"clone","rand","",14,[[["self"]],["xorshiftrng"]]],[11,"clone","rand::distributions::exponential","",9,[[["self"]],["exp1"]]],[11,"clone","rand::distributions","",12,[[["self"]],["weighted"]]],[11,"clone","rand","",15,[[["self"]],["threadrng"]]],[11,"clone","rand::reseeding","",16,[[["self"]],["reseedwithdefault"]]],[11,"clone","rand::distributions::gamma","",17,[[["self"]],["studentt"]]],[11,"clone","rand::distributions::range","",18,[[["self"]],["range"]]],[11,"clone","rand","",19,[[["self"]],["stdrng"]]],[11,"clone","rand::distributions::exponential","",20,[[["self"]],["exp"]]],[11,"clone","rand::isaac","",21,[[["self"]],["isaacrng"]]],[11,"clone","rand::distributions::gamma","",22,[[["self"]],["fisherf"]]],[11,"clone","rand::distributions","",23,[[["self"]],["randsample"]]],[11,"clone","rand::distributions::normal","",24,[[["self"]],["normal"]]],[11,"clone","rand::distributions::gamma","",25,[[["self"]],["gamma"]]],[11,"clone","rand::chacha","",26,[[["self"]],["chacharng"]]],[11,"clone","rand::isaac","",27,[[["self"]],["isaac64rng"]]],[11,"clone","rand::distributions::normal","",28,[[["self"]],["lognormal"]]],[11,"clone","rand::distributions::gamma","",29,[[["self"]],["chisquared"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::read","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::os","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::exponential","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::chacha","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::range","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::gamma","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::isaac","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::reseeding","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand::distributions::normal","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"reseed","rand::reseeding","",16,N],[11,"next_u32","rand::chacha","",26,[[["self"]],["u32"]]],[11,"next_u32","rand::isaac","",27,[[["self"]],["u32"]]],[11,"next_u64","","",27,[[["self"]],["u64"]]],[11,"next_u32","rand","",15,[[["self"]],["u32"]]],[11,"next_u64","","",15,[[["self"]],["u64"]]],[11,"fill_bytes","","",15,N],[11,"next_u32","rand::reseeding","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,N],[11,"next_u32","rand::read","",32,[[["self"]],["u32"]]],[11,"next_u64","","",32,[[["self"]],["u64"]]],[11,"fill_bytes","","",32,N],[11,"next_u32","rand::os","",13,[[["self"]],["u32"]]],[11,"next_u64","","",13,[[["self"]],["u64"]]],[11,"fill_bytes","","",13,N],[11,"next_u32","rand::isaac","",21,[[["self"]],["u32"]]],[11,"next_u32","rand","",14,[[["self"]],["u32"]]],[11,"next_u32","","",19,[[["self"]],["u32"]]],[11,"next_u64","","",19,[[["self"]],["u64"]]],[11,"default","rand::reseeding","",16,[[],["reseedwithdefault"]]],[11,"ind_sample","rand::distributions::range","",18,[[["self"],["r"]],["sup"]]],[11,"ind_sample","rand::distributions::gamma","",25,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",22,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::normal","",28,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::gamma","",17,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::normal","",24,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions::exponential","",20,[[["self"],["r"]],["f64"]]],[11,"ind_sample","rand::distributions","",23,[[["self"],["r"]],["sup"]]],[11,"ind_sample","","",30,[[["self"],["r"]],["t"]]],[11,"ind_sample","rand::distributions::gamma","",29,[[["self"],["r"]],["f64"]]],[11,"rand","rand::chacha","",26,[[["r"]],["chacharng"]]],[11,"rand","rand","",14,[[["r"]],["xorshiftrng"]]],[11,"rand","","",6,[[["r"]],["closed01",["f32"]]]],[11,"rand","rand::isaac","",21,[[["r"]],["isaacrng"]]],[11,"rand","rand::distributions::normal","",8,[[["r"]],["standardnormal"]]],[11,"rand","rand::distributions::exponential","",9,[[["r"]],["exp1"]]],[11,"rand","rand","",6,[[["r"]],["closed01",["f64"]]]],[11,"rand","","",5,[[["r"]],["open01",["f32"]]]],[11,"rand","rand::isaac","",27,[[["r"]],["isaac64rng"]]],[11,"rand","rand","",5,[[["r"]],["open01",["f64"]]]],[11,"reseed","rand::reseeding","",0,N],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,N],[11,"reseed","rand","",19,N],[11,"from_seed","","",19,N],[11,"reseed","rand::isaac","",27,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,N],[11,"reseed","","",21,N],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",21,N],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",14,N],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",14,N],[11,"reseed","rand::chacha","",26,N],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",26,N],[11,"sample","rand::distributions","",23,[[["self"],["r"]],["sup"]]],[11,"sample","","",30,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::normal","",24,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::exponential","",20,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::normal","",28,[[["self"],["r"]],["f64"]]],[11,"sample","rand::distributions::range","",18,[[["self"],["r"]],["sup"]]],[11,"sample","rand::distributions::gamma","",22,[[["self"],["r"]],["f64"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"sample","","",25,[[["self"],["r"]],["f64"]]],[11,"sample","","",29,[[["self"],["r"]],["f64"]]],[11,"next","rand","",31,[[["self"]],["option"]]],[11,"next","","",33,[[["self"]],["option",["char"]]]],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",21,[[],["isaacrng"]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,[[],["isaac64rng"]]],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",26,[[],["chacharng"]]],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",26,N],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,[[["r"],["u64"],["rsdr"]],["reseedingrng"]]],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,N],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",32,[[["r"]],["readrng"]]],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",14,[[],["xorshiftrng"]]],[11,"new","","Create a randomly seeded instance of `StdRng`.",19,[[],["result",["stdrng","error"]]]],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",18,[[["x"],["x"]],["range"]]],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",25,[[["f64"],["f64"]],["gamma"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",29,[[["f64"]],["chisquared"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",22,[[["f64"],["f64"]],["fisherf"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",17,[[["f64"]],["studentt"]]],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",24,[[["f64"],["f64"]],["normal"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",28,[[["f64"],["f64"]],["lognormal"]]],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",20,[[["f64"]],["exp"]]],[11,"new","rand::distributions","",23,[[],["randsample"]]],[11,"new","","Create a new `WeightedChoice`.",30,N]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"XorShiftRng"],[3,"ThreadRng"],[3,"ReseedWithDefault"],[3,"StudentT"],[3,"Range"],[3,"StdRng"],[3,"Exp"],[3,"IsaacRng"],[3,"FisherF"],[3,"RandSample"],[3,"Normal"],[3,"Gamma"],[3,"ChaChaRng"],[3,"Isaac64Rng"],[3,"LogNormal"],[3,"ChiSquared"],[3,"WeightedChoice"],[3,"Generator"],[3,"ReadRng"],[3,"AsciiGenerator"]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","items":[[3,"Error","rand_core","Error type of random number generators",N,N],[12,"kind","","The error kind",0,N],[12,"msg","","The error message",0,N],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",1,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",1,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",1,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",1,N],[11,"eq","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["errorkind"]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",1,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",1,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",1,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new instance, with specified kind and a message.",0,[[["errorkind"],["str"]],["self"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",0,[[["errorkind"],["str"],["e"]],["self"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",0,[[["self"]],["option",["box"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["stderror"]]]],[0,"block","","The `BlockRngCore` trait and implementation helpers",N,N],[3,"BlockRng","rand_core::block","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",2,N],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,N],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",N,N],[16,"Item","","Results element type, e.g. `u32`.",4,N],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",4,N],[10,"generate","","Generate a new block of results.",4,N],[11,"clone","","",2,[[["self"]],["blockrng"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",2,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",2,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",2,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",2,[[["self"],["usize"]]]],[11,"next_u32","","",2,[[["self"]],["u32"]]],[11,"next_u64","","",2,[[["self"]],["u64"]]],[11,"fill_bytes","","",2,N],[11,"try_fill_bytes","","",2,N],[11,"from_seed","","",2,N],[11,"from_rng","","",2,[[["s"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["blockrng64"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",3,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,[[["self"],["usize"]]]],[11,"next_u32","","",3,[[["self"]],["u32"]]],[11,"next_u64","","",3,[[["self"]],["u64"]]],[11,"fill_bytes","","",3,N],[11,"try_fill_bytes","","",3,N],[11,"from_seed","","",3,N],[11,"from_rng","","",3,[[["s"]],["result",["error"]]]],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",N,N],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[8,"RngCore","rand_core","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",5,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",5,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",5,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,N],[10,"from_seed","","Create a new PRNG using the given seed.",6,N],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,[[["r"]],["result",["error"]]]],[11,"read","","",5,N]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"BlockRng"],[3,"BlockRng64"],[8,"BlockRngCore"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["rayon"]={"doc":"Data-parallelism library that makes it easy to convert sequential computations into parallel","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",N,[[],["usize"]]],[3,"ThreadPool","","Represents a user created [thread-pool].",N,N],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",N,N],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",N,N],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",N,N],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",N,N],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",N,N],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",N,[[["op"]],["r"]]],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",N,N],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",N,N],[0,"collections","","Parallel iterator types for [standard collections][std::collections]",N,N],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",0,N],[11,"opt_len","","",0,[[["self"]],["option",["usize"]]]],[11,"drive","","",0,N],[11,"len","","",0,[[["self"]],["usize"]]],[11,"with_producer","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"drive_unindexed","","",1,N],[11,"opt_len","","",1,[[["self"]],["option",["usize"]]]],[11,"drive","","",1,N],[11,"len","","",1,[[["self"]],["usize"]]],[11,"with_producer","","",1,N],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",2,N],[11,"opt_len","","",2,[[["self"]],["option",["usize"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"drive_unindexed","","",3,N],[11,"opt_len","","",3,[[["self"]],["option",["usize"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",4,N],[11,"opt_len","","",4,[[["self"]],["option",["usize"]]]],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",N,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",5,N],[11,"opt_len","","",5,[[["self"]],["option",["usize"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"drive_unindexed","","",6,N],[11,"opt_len","","",6,[[["self"]],["option",["usize"]]]],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",N,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",7,N],[11,"opt_len","","",7,[[["self"]],["option",["usize"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"drive_unindexed","","",8,N],[11,"opt_len","","",8,[[["self"]],["option",["usize"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",9,N],[11,"opt_len","","",9,[[["self"]],["option",["usize"]]]],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",N,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",10,N],[11,"opt_len","","",10,[[["self"]],["option",["usize"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"drive_unindexed","","",11,N],[11,"opt_len","","",11,[[["self"]],["option",["usize"]]]],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",N,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",12,N],[11,"opt_len","","",12,[[["self"]],["option",["usize"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"drive_unindexed","","",13,N],[11,"opt_len","","",13,[[["self"]],["option",["usize"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",14,N],[11,"opt_len","","",14,[[["self"]],["option",["usize"]]]],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",N,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",15,N],[11,"opt_len","","",15,[[["self"]],["option",["usize"]]]],[11,"drive","","",15,N],[11,"len","","",15,[[["self"]],["usize"]]],[11,"with_producer","","",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"drive_unindexed","","",16,N],[11,"opt_len","","",16,[[["self"]],["option",["usize"]]]],[11,"drive","","",16,N],[11,"len","","",16,[[["self"]],["usize"]]],[11,"with_producer","","",16,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",17,N],[11,"opt_len","","",17,[[["self"]],["option",["usize"]]]],[11,"drive","","",17,N],[11,"len","","",17,[[["self"]],["usize"]]],[11,"with_producer","","",17,N],[0,"iter","rayon","Traits for writing parallel programs using an iterator-style interface",N,N],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",18,N],[13,"Right","","A value of type `R`.",18,N],[3,"IterBridge","","`IterBridge` is a parallel iterator that wraps a sequential iterator.",N,N],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",N,N],[3,"Chunks","","`Chunks` is an iterator that groups elements of an underlying iterator.",N,N],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]",N,N],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",N,N],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",N,N],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",N,N],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",N,N],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",N,N],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",N,N],[3,"TryFold","","`TryFold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold()`] method on [`ParallelIterator`]",N,N],[3,"TryFoldWith","","`TryFoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]",N,N],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]",N,N],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",N,N],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`IndexedParallelIterator`]",N,N],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",N,N],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",N,N],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",N,N],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",N,N],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",N,N],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",N,N],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",N,N],[3,"Update","","`Update` is an iterator that mutates the elements of an underlying iterator before they are yielded.",N,N],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",N,N],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",N,N],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",N,N],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",N,N],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",N,N],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",N,N],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",N,N],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",N,N],[3,"Empty","","Iterator adaptor for the `empty()` function.",N,N],[3,"Once","","Iterator adaptor for the `once()` function.",N,N],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",N,[[["d"],["s"]],["split"]]],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",N,[[["t"]],["repeat"]]],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",N,[[["t"],["usize"]],["repeatn"]]],[5,"empty","","Creates a parallel iterator that produces nothing.",N,[[],["empty"]]],[5,"once","","Creates a parallel iterator that produces an element exactly once.",N,[[["t"]],["once"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["iterbridge"]]],[11,"drive_unindexed","","",19,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["chain"]]],[11,"drive_unindexed","","",20,N],[11,"opt_len","","",20,[[["self"]],["option",["usize"]]]],[11,"drive","","",20,N],[11,"len","","",20,[[["self"]],["usize"]]],[11,"with_producer","","",20,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["chunks"]]],[11,"drive_unindexed","","",21,N],[11,"opt_len","","",21,[[["self"]],["option",["usize"]]]],[11,"drive","","",21,N],[11,"len","","",21,[[["self"]],["usize"]]],[11,"with_producer","","",21,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["enumerate"]]],[11,"drive_unindexed","","",22,N],[11,"opt_len","","",22,[[["self"]],["option",["usize"]]]],[11,"drive","","",22,N],[11,"len","","",22,[[["self"]],["usize"]]],[11,"with_producer","","",22,N],[11,"clone","","",23,[[["self"]],["filter"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",23,N],[11,"clone","","",24,[[["self"]],["filtermap"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",24,N],[11,"clone","","",25,[[["self"]],["flatmap"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",25,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["flatten"]]],[11,"drive_unindexed","","",26,N],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See [the `plumbing` README][r] for a high-level overview.",N,N],[5,"bridge","rayon::iter::plumbing","This helper function is used to \"connect\" a parallel iterator to a consumer. It will convert the `par_iter` into a producer P and then pull items from P and feed them to `consumer`, splitting and creating parallel threads as needed.",N,N],[5,"bridge_producer_consumer","","This helper function is used to \"connect\" a producer and a consumer. You may prefer to call [`bridge`], which wraps this function. This function will draw items from `producer` and feed them to `consumer`, splitting and creating parallel tasks when needed.",N,N],[5,"bridge_unindexed","","A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.",N,N],[8,"ProducerCallback","","The `ProducerCallback` trait is a kind of generic closure, [analogous to `FnOnce`][FnOnce]. See [the corresponding section in the plumbing README][r] for more details.",N,N],[16,"Output","","The type of value returned by this callback. Analogous to [`Output` from the `FnOnce` trait][Output].",27,N],[10,"callback","","Invokes the callback with the given producer as argument. The key point of this trait is that this method is generic over `P`, and hence implementors must be defined for any producer.",27,N],[8,"Producer","","A `Producer` is effectively a \"splittable `IntoIterator`\". That is, a producer is a value which can be converted into an iterator at any time: at that point, it simply produces items on demand, like any iterator. But what makes a `Producer` special is that, before we convert to an iterator, we can also split it at a particular point using the `split_at` method. This will yield up two producers, one producing the items before that point, and one producing the items after that point (these two producers can then independently be split further, or be converted into iterators). In Rayon, this splitting is used to divide between threads. See [the `plumbing` README][r] for further details.",N,N],[16,"Item","","The type of item that will be produced by this producer once it is converted into an iterator.",28,N],[16,"IntoIter","","The type of iterator we will become.",28,N],[10,"into_iter","","Convert `self` into an iterator; at this point, no more parallel splits are possible.",28,N],[11,"min_len","","The minimum number of items that we will process sequentially. Defaults to 1, which means that we will split all the way down to a single item. This can be raised higher using the [`with_min_len`] method, which will force us to create sequential tasks at a larger granularity. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,[[["self"]],["usize"]]],[11,"max_len","","The maximum number of items that we will process sequentially. Defaults to MAX, which means that we can choose not to split at all. This can be lowered using the [`with_max_len`] method, which will force us to create more parallel tasks. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,[[["self"]],["usize"]]],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",28,N],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",28,[[["self"],["f"]],["f"]]],[8,"Consumer","","A consumer is effectively a [generalized \"fold\" operation][fold], and in fact each consumer will eventually be converted into a [`Folder`]. What makes a consumer special is that, like a [`Producer`], it can be split into multiple consumers using the `split_at` method. When a consumer is split, it produces two consumers, as well as a reducer. The two consumers can be fed items independently, and when they are done the reducer is used to combine their two results into one. See [the `plumbing` README][r] for further details.",N,N],[16,"Folder","","The type of folder that this consumer can be converted into.",29,N],[16,"Reducer","","The type of reducer that is produced if this consumer is split.",29,N],[16,"Result","","The type of result that this consumer will ultimately produce.",29,N],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",29,N],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",29,N],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",29,[[["self"]],["bool"]]],[8,"Folder","","The `Folder` trait encapsulates [the standard fold operation][fold].  It can be fed many items using the `consume` method. At the end, once all items have been consumed, it can then be converted (using `complete`) into a final value.",N,N],[16,"Result","","The type of result that will ultimately be produced by the folder.",30,N],[10,"consume","","Consume next item and return new sequential state.",30,[[["self"],["item"]],["self"]]],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",30,[[["self"],["i"]],["self"]]],[10,"complete","","Finish consuming items, produce final result.",30,N],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",30,[[["self"]],["bool"]]],[8,"Reducer","","The reducer is the final step of a `Consumer` -- after a consumer has been split into two parts, and each of those parts has been fully processed, we are left with two results. The reducer is then used to combine those two results into one. See [the `plumbing` README][r] for further details.",N,N],[10,"reduce","","Reduce two final results into one; this is executed after a split.",31,[[["self"],["result"],["result"]],["result"]]],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These consumers can be used like regular consumers, but they also support a `split_off_left` method that does not take an index to split, but simply splits at some arbitrary point (`for_each`, for example, produces an unindexed consumer).",N,N],[10,"split_off_left","","Splits off a \"left\" consumer and returns it. The `self` consumer should then be used to consume the \"right\" portion of the data. (The ordering matters for methods like find_first -- values produced by the returned value are given precedence over values produced by `self`.) Once the left and right halves have been fully consumed, you should reduce the results with the result of `to_reducer`.",32,[[["self"]],["self"]]],[10,"to_reducer","","Creates a reducer that can be used to combine the results from a split consumer.",32,N],[8,"UnindexedProducer","","A variant on `Producer` which does not know its exact length or cannot represent it in a `usize`. These producers act like ordinary producers except that they cannot be told to split at a particular point. Instead, you just ask them to split 'somewhere'.",N,N],[16,"Item","","The type of item returned by this producer.",33,N],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",33,N],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",33,[[["self"],["f"]],["f"]]],[11,"clone","rayon::iter","",34,[[["self"]],["fold"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",34,N],[11,"clone","","",35,[[["self"]],["foldwith"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",35,N],[11,"clone","","",36,[[["self"]],["tryfold"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",36,N],[11,"clone","","",37,[[["self"]],["tryfoldwith"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",37,N],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["skip"]]],[11,"drive_unindexed","","",38,N],[11,"opt_len","","",38,[[["self"]],["option",["usize"]]]],[11,"len","","",38,[[["self"]],["usize"]]],[11,"drive","","",38,N],[11,"with_producer","","",38,N],[11,"clone","","",39,[[["self"]],["split"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",39,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["take"]]],[11,"drive_unindexed","","",40,N],[11,"opt_len","","",40,[[["self"]],["option",["usize"]]]],[11,"len","","",40,[[["self"]],["usize"]]],[11,"drive","","",40,N],[11,"with_producer","","",40,N],[11,"clone","","",41,[[["self"]],["map"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",41,N],[11,"opt_len","","",41,[[["self"]],["option",["usize"]]]],[11,"drive","","",41,N],[11,"len","","",41,[[["self"]],["usize"]]],[11,"with_producer","","",41,N],[11,"clone","","",42,[[["self"]],["mapwith"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",42,N],[11,"opt_len","","",42,[[["self"]],["option",["usize"]]]],[11,"drive","","",42,N],[11,"len","","",42,[[["self"]],["usize"]]],[11,"with_producer","","",42,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["zip"]]],[11,"drive_unindexed","","",43,N],[11,"opt_len","","",43,[[["self"]],["option",["usize"]]]],[11,"drive","","",43,N],[11,"len","","",43,[[["self"]],["usize"]]],[11,"with_producer","","",43,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["zipeq"]]],[11,"drive_unindexed","","",44,N],[11,"opt_len","","",44,[[["self"]],["option",["usize"]]]],[11,"drive","","",44,N],[11,"len","","",44,[[["self"]],["usize"]]],[11,"with_producer","","",44,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["interleave"]]],[11,"drive_unindexed","","",45,N],[11,"opt_len","","",45,[[["self"]],["option",["usize"]]]],[11,"drive","","",45,N],[11,"len","","",45,[[["self"]],["usize"]]],[11,"with_producer","","",45,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["interleaveshortest"]]],[11,"drive_unindexed","","",46,N],[11,"opt_len","","",46,[[["self"]],["option",["usize"]]]],[11,"drive","","",46,N],[11,"len","","",46,[[["self"]],["usize"]]],[11,"with_producer","","",46,N],[11,"clone","","",47,[[["self"]],["intersperse"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",47,N],[11,"opt_len","","",47,[[["self"]],["option",["usize"]]]],[11,"drive","","",47,N],[11,"len","","",47,[[["self"]],["usize"]]],[11,"with_producer","","",47,N],[11,"clone","","",48,[[["self"]],["update"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",48,N],[11,"opt_len","","",48,[[["self"]],["option",["usize"]]]],[11,"drive","","",48,N],[11,"len","","",48,[[["self"]],["usize"]]],[11,"with_producer","","",48,N],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["rev"]]],[11,"drive_unindexed","","",49,N],[11,"opt_len","","",49,[[["self"]],["option",["usize"]]]],[11,"drive","","",49,N],[11,"len","","",49,[[["self"]],["usize"]]],[11,"with_producer","","",49,N],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["minlen"]]],[11,"drive_unindexed","","",50,N],[11,"opt_len","","",50,[[["self"]],["option",["usize"]]]],[11,"drive","","",50,N],[11,"len","","",50,[[["self"]],["usize"]]],[11,"with_producer","","",50,N],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["maxlen"]]],[11,"drive_unindexed","","",51,N],[11,"opt_len","","",51,[[["self"]],["option",["usize"]]]],[11,"drive","","",51,N],[11,"len","","",51,[[["self"]],["usize"]]],[11,"with_producer","","",51,N],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",52,[[["self"]],["cloned"]]],[11,"drive_unindexed","","",52,N],[11,"opt_len","","",52,[[["self"]],["option",["usize"]]]],[11,"drive","","",52,N],[11,"len","","",52,[[["self"]],["usize"]]],[11,"with_producer","","",52,N],[11,"clone","","",53,[[["self"]],["inspect"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",53,N],[11,"opt_len","","",53,[[["self"]],["option",["usize"]]]],[11,"drive","","",53,N],[11,"len","","",53,[[["self"]],["usize"]]],[11,"with_producer","","",53,N],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"clone","","",54,[[["self"]],["whilesome"]]],[11,"drive_unindexed","","",54,N],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"clone","","",55,[[["self"]],["repeat"]]],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",55,[[["self"],["usize"]],["repeatn"]]],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",55,[[["self"],["z"]],["zip",["repeatn"]]]],[11,"drive_unindexed","","",55,N],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",56,[[["self"]],["repeatn"]]],[11,"drive_unindexed","","",56,N],[11,"opt_len","","",56,[[["self"]],["option",["usize"]]]],[11,"drive","","",56,N],[11,"with_producer","","",56,N],[11,"len","","",56,[[["self"]],["usize"]]],[11,"clone","","",57,[[["self"]],["self"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",57,N],[11,"opt_len","","",57,[[["self"]],["option",["usize"]]]],[11,"drive","","",57,N],[11,"len","","",57,[[["self"]],["usize"]]],[11,"with_producer","","",57,N],[11,"clone","","",58,[[["self"]],["once"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",58,N],[11,"opt_len","","",58,[[["self"]],["option",["usize"]]]],[11,"drive","","",58,N],[11,"len","","",58,[[["self"]],["usize"]]],[11,"with_producer","","",58,N],[8,"ParallelBridge","","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",N,N],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,[[["self"]],["iterbridge"]]],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",N,N],[16,"Iter","","The parallel iterator type that will be created.",60,N],[16,"Item","","The type of item that the parallel iterator will produce.",60,N],[10,"into_par_iter","","Converts `self` into a parallel iterator.",60,N],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",N,N],[16,"Iter","","The type of the parallel iterator that will be returned.",61,N],[16,"Item","","The type of item that the parallel iterator will produce. This will typically be an `&'data T` reference type.",61,N],[10,"par_iter","","Converts `self` into a parallel iterator.",61,N],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",N,N],[16,"Iter","","The type of iterator that will be created.",62,N],[16,"Item","","The type of item that will be produced; this is typically an `&'data mut T` reference.",62,N],[10,"par_iter_mut","","Creates the parallel iterator from `self`.",62,N],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",N,N],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",63,N],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",63,[[["self"],["op"]]]],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,[[["self"],["t"],["op"]]]],[11,"try_for_each","","Executes a fallible `OP` on each item produced by the iterator, in parallel.",63,[[["self"],["op"]],["r"]]],[11,"try_for_each_with","","Executes a fallible `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,[[["self"],["t"],["op"]],["r"]]],[11,"count","","Counts the number of items in this parallel iterator.",63,[[["self"]],["usize"]]],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",63,[[["self"],["f"]],["map"]]],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",63,[[["self"],["t"],["f"]],["mapwith"]]],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",63,[[["self"]],["cloned"]]],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",63,[[["self"],["op"]],["inspect"]]],[11,"update","","Mutates each item of this iterator before yielding it.",63,[[["self"],["f"]],["update"]]],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",63,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",63,[[["self"],["p"]],["filtermap"]]],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",63,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",63,[[["self"]],["flatten"]]],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",63,N],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",63,[[["self"],["op"]],["option"]]],[11,"try_reduce","","Reduces the items in the iterator into one item using a fallible `op`. The `identity` argument is used the same way as in [`reduce()`].",63,N],[11,"try_reduce_with","","Reduces the items in the iterator into one item using a fallible `op`.",63,[[["self"],["op"]],["option"]]],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",63,[[["self"],["id"],["f"]],["fold"]]],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",63,[[["self"],["t"],["f"]],["foldwith"]]],[11,"try_fold","","Perform a fallible parallel fold.",63,[[["self"],["id"],["f"]],["tryfold"]]],[11,"try_fold_with","","Perform a fallible parallel fold with a cloneable `init` value.",63,[[["self"],["t"],["f"]],["tryfoldwith"]]],[11,"sum","","Sums up the items in the iterator.",63,[[["self"]],["s"]]],[11,"product","","Multiplies all the items in the iterator.",63,[[["self"]],["p"]]],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"]],["option"]]],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",63,[[["self"]],["option"]]],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"chain","","Takes two iterators and creates a new iterator over both.",63,[[["self"],["c"]],["chain"]]],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",63,[[["self"],["p"]],["option"]]],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",63,[[["self"],["p"]],["option"]]],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",63,[[["self"],["p"]],["option"]]],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",63,[[["self"],["p"]],["bool"]]],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",63,[[["self"],["p"]],["bool"]]],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",63,[[["self"]],["whilesome"]]],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",63,[[["self"]],["c"]]],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",63,N],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",63,N],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",63,N],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",63,N],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,N],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,[[["self"]],["option",["usize"]]]],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",N,N],[11,"collect_into_vec","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",64,[[["self"],["vec"]]]],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",64,[[["self"],["vec"],["vec"]]]],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",64,[[["self"],["z"]],["zip"]]],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",64,[[["self"],["z"]],["zipeq"]]],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",64,[[["self"],["i"]],["interleave"]]],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",64,[[["self"],["i"]],["interleaveshortest"]]],[11,"chunks","","Split an iterator up into fixed-size chunks.",64,[[["self"],["usize"]],["chunks"]]],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",64,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",64,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",64,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",64,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,[[["self"],["i"]],["bool"]]],[11,"enumerate","","Yields an index along with each item.",64,[[["self"]],["enumerate"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",64,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields the first `n` elements.",64,[[["self"],["usize"]],["take"]]],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",64,[[["self"]],["rev"]]],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",64,[[["self"],["usize"]],["minlen"]]],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",64,[[["self"],["usize"]],["maxlen"]]],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",64,[[["self"]],["usize"]]],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,N],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,N],[8,"FromParallelIterator","","`FromParallelIterator` implements the creation of a collection from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a given type, you define how it will be created from an iterator.",N,N],[10,"from_par_iter","","Creates an instance of the collection from the parallel iterator `par_iter`.",65,[[["i"]],["self"]]],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",N,N],[10,"par_extend","","Extends an instance of the collection with the elements drawn from the parallel iterator `par_iter`.",66,[[["self"],["i"]]]],[0,"option","rayon","Parallel iterator types for [options][std::option]",N,N],[3,"IntoIter","rayon::option","A parallel iterator over the value in [`Some`] variant of an [`Option`].",N,N],[3,"Iter","","A parallel iterator over a reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IterMut","","A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].",N,N],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",67,N],[11,"opt_len","","",67,[[["self"]],["option",["usize"]]]],[11,"drive","","",67,N],[11,"len","","",67,[[["self"]],["usize"]]],[11,"with_producer","","",67,N],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["self"]]],[11,"drive_unindexed","","",68,N],[11,"opt_len","","",68,[[["self"]],["option",["usize"]]]],[11,"drive","","",68,N],[11,"len","","",68,[[["self"]],["usize"]]],[11,"with_producer","","",68,N],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",69,N],[11,"opt_len","","",69,[[["self"]],["option",["usize"]]]],[11,"drive","","",69,N],[11,"len","","",69,[[["self"]],["usize"]]],[11,"with_producer","","",69,N],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",N,N],[8,"ParallelBridge","rayon::prelude","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",N,N],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,[[["self"]],["iterbridge"]]],[0,"range","rayon","Parallel iterator types for [ranges][std::range], the type for values created by `a..b` expressions",N,N],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",N,N],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["iter"]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[0,"result","rayon","Parallel iterator types for [results][std::result]",N,N],[3,"IntoIter","rayon::result","Parallel iterator over a result",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a result",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a result",N,N],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",71,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",71,N],[11,"opt_len","","",71,[[["self"]],["option",["usize"]]]],[11,"drive","","",71,N],[11,"len","","",71,[[["self"]],["usize"]]],[11,"with_producer","","",71,N],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["self"]]],[11,"drive_unindexed","","",72,N],[11,"opt_len","","",72,[[["self"]],["option",["usize"]]]],[11,"drive","","",72,N],[11,"len","","",72,[[["self"]],["usize"]]],[11,"with_producer","","",72,N],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",73,N],[11,"opt_len","","",73,[[["self"]],["option",["usize"]]]],[11,"drive","","",73,N],[11,"len","","",73,[[["self"]],["usize"]]],[11,"with_producer","","",73,N],[0,"slice","rayon","Parallel iterator types for [slices][std::slice]",N,N],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",N,N],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",N,N],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",N,N],[3,"IterMut","","Parallel iterator over mutable items in a slice",N,N],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",N,N],[3,"Split","","Parallel iterator over slices separated by a predicate",N,N],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",N,N],[8,"ParallelSlice","","Parallel extensions for slices.",N,N],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",74,N],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",74,[[["self"],["p"]],["split"]]],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `window_size`. The windows overlap.",74,[[["self"],["usize"]],["windows"]]],[11,"par_chunks","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks do not overlap.",74,[[["self"],["usize"]],["chunks"]]],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",N,N],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",75,N],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",75,[[["self"],["p"]],["splitmut"]]],[11,"par_chunks_mut","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks are mutable and do not overlap.",75,[[["self"],["usize"]],["chunksmut"]]],[11,"par_sort","","Sorts the slice in parallel.",75,[[["self"]]]],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",75,[[["self"],["f"]]]],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",75,[[["self"],["f"]]]],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",75,[[["self"]]]],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",75,[[["self"],["f"]]]],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",75,[[["self"],["f"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"clone","","",76,[[["self"]],["self"]]],[11,"drive_unindexed","","",76,N],[11,"opt_len","","",76,[[["self"]],["option",["usize"]]]],[11,"drive","","",76,N],[11,"len","","",76,[[["self"]],["usize"]]],[11,"with_producer","","",76,N],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["self"]]],[11,"drive_unindexed","","",77,N],[11,"opt_len","","",77,[[["self"]],["option",["usize"]]]],[11,"drive","","",77,N],[11,"len","","",77,[[["self"]],["usize"]]],[11,"with_producer","","",77,N],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["self"]]],[11,"drive_unindexed","","",78,N],[11,"opt_len","","",78,[[["self"]],["option",["usize"]]]],[11,"drive","","",78,N],[11,"len","","",78,[[["self"]],["usize"]]],[11,"with_producer","","",78,N],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",79,N],[11,"opt_len","","",79,[[["self"]],["option",["usize"]]]],[11,"drive","","",79,N],[11,"len","","",79,[[["self"]],["usize"]]],[11,"with_producer","","",79,N],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",80,N],[11,"opt_len","","",80,[[["self"]],["option",["usize"]]]],[11,"drive","","",80,N],[11,"len","","",80,[[["self"]],["usize"]]],[11,"with_producer","","",80,N],[11,"clone","","",81,[[["self"]],["self"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",81,N],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",82,N],[0,"str","rayon","Parallel iterator types for [strings][std::str]",N,N],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",N,N],[3,"CharIndices","","Parallel iterator over the characters of a string, with their positions",N,N],[3,"Bytes","","Parallel iterator over the bytes of a string",N,N],[3,"EncodeUtf16","","Parallel iterator over a string encoded as UTF-16",N,N],[3,"Split","","Parallel iterator over substrings separated by a pattern",N,N],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",N,N],[3,"Lines","","Parallel iterator over lines in a string",N,N],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",N,N],[3,"Matches","","Parallel iterator over substrings that match a pattern",N,N],[3,"MatchIndices","","Parallel iterator over substrings that match a pattern, with their positions",N,N],[8,"ParallelString","","Parallel extensions for strings.",N,N],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",83,[[["self"]],["str"]]],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",83,[[["self"]],["chars"]]],[11,"par_char_indices","","Returns a parallel iterator over the characters of a string, with their positions.",83,[[["self"]],["charindices"]]],[11,"par_bytes","","Returns a parallel iterator over the bytes of a string.",83,[[["self"]],["bytes"]]],[11,"par_encode_utf16","","Returns a parallel iterator over a string encoded as UTF-16.",83,[[["self"]],["encodeutf16"]]],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",83,[[["self"],["p"]],["split"]]],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",83,[[["self"],["p"]],["splitterminator"]]],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",83,[[["self"]],["lines"]]],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",83,[[["self"]],["splitwhitespace"]]],[11,"par_matches","","Returns a parallel iterator over substrings that match a given character or predicate, similar to `str::matches`.",83,[[["self"],["p"]],["matches"]]],[11,"par_match_indices","","Returns a parallel iterator over substrings that match a given character or predicate, with their positions, similar to `str::match_indices`.",83,[[["self"],["p"]],["matchindices"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",84,[[["self"]],["chars"]]],[11,"drive_unindexed","","",84,N],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["charindices"]]],[11,"drive_unindexed","","",85,N],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",86,[[["self"]],["bytes"]]],[11,"drive_unindexed","","",86,N],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",87,[[["self"]],["encodeutf16"]]],[11,"drive_unindexed","","",87,N],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["split"]]],[11,"drive_unindexed","","",88,N],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["splitterminator"]]],[11,"drive_unindexed","","",89,N],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"clone","","",90,[[["self"]],["lines"]]],[11,"drive_unindexed","","",90,N],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"clone","","",91,[[["self"]],["splitwhitespace"]]],[11,"drive_unindexed","","",91,N],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"clone","","",92,[[["self"]],["matches"]]],[11,"drive_unindexed","","",92,N],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["matchindices"]]],[11,"drive_unindexed","","",93,N],[0,"vec","rayon","Parallel iterator types for [vectors][std::vec] (`Vec<T>`)",N,N],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",N,N],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",94,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",94,N],[11,"opt_len","","",94,[[["self"]],["option",["usize"]]]],[11,"drive","","",94,N],[11,"len","","",94,[[["self"]],["usize"]]],[11,"with_producer","","",94,N],[11,"drive_unindexed","rayon::iter","",18,N],[11,"opt_len","","",18,[[["self"]],["option",["usize"]]]],[11,"drive","","",18,N],[11,"len","","",18,[[["self"]],["usize"]]],[11,"with_producer","","",18,N],[11,"par_extend","","",18,[[["self"],["i"]]]],[11,"new","rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",95,[[["configuration"]],["result",["threadpool","box"]]]],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",95,[[["self"],["op"]],["r"]]],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",95,[[["self"]],["usize"]]],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",95,[[["self"]],["option",["usize"]]]],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",95,[[["self"]],["option",["bool"]]]],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",95,N],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",95,[[["self"],["op"]],["r"]]],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",95,N],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",95,N],[11,"description","","",98,[[["self"]],["str"]]],[11,"default","","",99,[[],["threadpoolbuilder"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"extend","rayon::iter","",18,N],[11,"from","","",18,[[["result"]],["either"]]],[11,"as_ref","","",18,[[["self"]],["target"]]],[11,"deref","","",18,N],[11,"as_mut","","",18,[[["self"]],["target"]]],[11,"hash","","",18,N],[11,"deref_mut","","",18,N],[11,"cmp","","",18,[[["self"],["either"]],["ordering"]]],[11,"partial_cmp","","",18,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["either"]],["bool"]]],[11,"le","","",18,[[["self"],["either"]],["bool"]]],[11,"gt","","",18,[[["self"],["either"]],["bool"]]],[11,"ge","","",18,[[["self"],["either"]],["bool"]]],[11,"clone","","",18,[[["self"]],["either"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"fold","","",18,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",18,[[["self"]],["usize"]]],[11,"last","","",18,[[["self"]],["option"]]],[11,"nth","","",18,[[["self"],["usize"]],["option"]]],[11,"collect","","",18,[[["self"]],["b"]]],[11,"all","","",18,[[["self"],["f"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",18,[[["self"],["either"]],["bool"]]],[11,"ne","","",18,[[["self"],["either"]],["bool"]]],[11,"into","","",18,[[["self"]],["result"]]],[11,"new","rayon","Creates and returns a valid rayon thread pool builder, but does not initialize it.",99,[[],["threadpoolbuilder"]]],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",99,[[["self"]],["result",["threadpool","threadpoolbuilderror"]]]],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",99,[[["self"]],["result",["threadpoolbuilderror"]]]],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",99,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",99,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",99,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"stack_size","","Set the stack size of the worker threads",99,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",99,[[["self"]],["threadpoolbuilder"]]],[11,"start_handler","","Set a callback to be invoked on thread start.",99,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"exit_handler","","Set a callback to be invoked on thread exit.",99,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",96,[[["self"]],["bool"]]],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",97,N],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",18,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",18,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",18,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,[[["self"]],["t"]]]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"IterBridge"],[3,"Chain"],[3,"Chunks"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Update"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"ParallelBridge"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"IntoIter"],[3,"ThreadPool"],[3,"FnContext"],[3,"Scope"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"]]};
searchIndex["rayon_core"]={"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",N,N],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",N,N],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",N,N],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",N,N],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",N,N],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",N,N],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",N,[[],["option",["usize"]]]],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",N,[[],["option",["bool"]]]],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",N,N],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",N,N],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",N,[[["op"]],["r"]]],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",N,[[["f"]]]],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",N,[[],["usize"]]],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",N,[[["configuration"]],["result",["box"]]]],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,[[["self"],["body"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,[[["configuration"]],["result",["threadpool","box"]]]],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,[[["self"],["op"]],["r"]]],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,[[["self"]],["usize"]]],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,[[["self"]],["option",["usize"]]]],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,[[["self"]],["option",["bool"]]]],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,N],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,[[["self"],["op"]],["r"]]],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,[[["self"],["op"]]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["threadpoolbuilder"]]],[11,"default","","",4,[[],["configuration"]]],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,[[],["threadpoolbuilder"]]],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,[[["self"]],["result",["threadpool","threadpoolbuilderror"]]]],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,[[["self"]],["result",["threadpoolbuilderror"]]]],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,[[["self"],["f"]],["self"]]],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"stack_size","","Set the stack size of the worker threads",3,[[["self"],["usize"]],["self"]]],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,[[["self"]],["self"]]],[11,"start_handler","","Set a callback to be invoked on thread start.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,[[],["configuration"]]],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,[[["self"]],["result",["threadpool","box"]]]],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,[[["self"],["f"]],["self"]]],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,[[["self"],["usize"]],["configuration"]]],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,[[["self"],["usize"]],["self"]]],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,[[["self"]],["self"]]],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,[[["self"]],["bool"]]]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["rodio"]={"doc":"Audio playback library.","items":[[5,"default_input_device","rodio","The default input audio device on the system.",N,[[],["option",["device"]]]],[5,"default_output_device","","The default output audio device on the system.",N,[[],["option",["device"]]]],[5,"devices","","An iterator yielding all `Device`s currently available to the system.",N,[[],["devices"]]],[5,"input_devices","","An iterator yielding all `Device`s currently available to the system that support one or more input stream formats.",N,[[],["filter",["devices"]]]],[5,"output_devices","","An iterator yielding all `Device`s currently available to the system that support one or more output stream formats.",N,[[],["filter",["devices"]]]],[3,"Device","","An opaque type that identifies a device that is capable of either audio input or output.",N,N],[3,"Sink","","Handle to an device that outputs sounds.",N,N],[3,"SpatialSink","","",N,N],[5,"play_raw","","Plays a source with a device until it ends.",N,[[["device"],["s"]]]],[5,"play_once","","Plays a sound once. Returns a `Sink` that can be used to control the sound.",N,[[["device"],["r"]],["result",["sink","decodererror"]]]],[11,"new","","Builds a new `Sink`.",0,[[["device"]],["sink"]]],[11,"append","","Appends a sound to the queue of sounds to play.",0,[[["self"],["s"]]]],[11,"volume","","The value `1.0` is the \"normal\" volume (unfiltered input). Any value other than 1.0 will multiply each sample by this value.",0,[[["self"]],["f32"]]],[11,"set_volume","","Changes the volume of the sound.",0,[[["self"],["f32"]]]],[11,"play","","Resumes playback of a paused sink.",0,[[["self"]]]],[11,"pause","","Pauses playback of this sink.",0,[[["self"]]]],[11,"is_paused","","Gets if a sink is paused",0,[[["self"]],["bool"]]],[11,"stop","","Stops the sink by emptying the queue.",0,[[["self"]]]],[11,"detach","","Destroys the sink without stopping the sounds that are still playing.",0,[[["self"]]]],[11,"sleep_until_end","","Sleeps the current thread until the sound ends.",0,[[["self"]]]],[11,"empty","","Returns true if this sink has no more sounds to play.",0,[[["self"]],["bool"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Builds a new `SpatialSink`.",1,N],[11,"set_emitter_position","","Sets the position of the sound emitter in 3 dimensional space.",1,N],[11,"set_left_ear_position","","Sets the position of the left ear in 3 dimensional space.",1,N],[11,"set_right_ear_position","","Sets the position of the right ear in 3 dimensional space.",1,N],[11,"append","","Appends a sound to the queue of sounds to play.",1,[[["self"],["s"]]]],[11,"volume","","The value `1.0` is the \"normal\" volume (unfiltered input). Any value other than 1.0 will multiply each sample by this value.",1,[[["self"]],["f32"]]],[11,"set_volume","","Changes the volume of the sound.",1,[[["self"],["f32"]]]],[11,"play","","Resumes playback of a paused sound.",1,[[["self"]]]],[11,"pause","","Pauses playback of this sink.",1,[[["self"]]]],[11,"is_paused","","Gets if a sound is paused",1,[[["self"]],["bool"]]],[11,"detach","","Destroys the sink without stopping the sounds that are still playing.",1,[[["self"]]]],[11,"sleep_until_end","","Sleeps the current thread until the sound ends.",1,[[["self"]]]],[11,"empty","","Returns true if this sink has no more sounds to play.",1,[[["self"]],["bool"]]],[0,"buffer","","A simple source of samples coming from a buffer.",N,N],[3,"SamplesBuffer","rodio::buffer","A buffer of samples treated as a source.",N,N],[11,"new","","Builds a new `SamplesBuffer`.",2,[[["u16"],["u32"],["d"]],["samplesbuffer"]]],[11,"current_frame_len","","",2,[[["self"]],["option",["usize"]]]],[11,"channels","","",2,[[["self"]],["u16"]]],[11,"sample_rate","","",2,[[["self"]],["u32"]]],[11,"total_duration","","",2,[[["self"]],["option",["duration"]]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[0,"decoder","rodio","Decodes samples from an audio file.",N,N],[3,"Decoder","rodio::decoder","Source of audio samples from decoding a file.",N,N],[4,"DecoderError","","Error that can happen when creating a decoder.",N,N],[13,"UnrecognizedFormat","","The format of the data has not been recognized.",3,N],[11,"new","","Builds a new decoder.",4,[[["r"]],["result",["decoder","decodererror"]]]],[11,"next","","",4,[[["self"]],["option",["i16"]]]],[11,"size_hint","","",4,N],[11,"current_frame_len","","",4,[[["self"]],["option",["usize"]]]],[11,"channels","","",4,[[["self"]],["u16"]]],[11,"sample_rate","","",4,[[["self"]],["u32"]]],[11,"total_duration","","",4,[[["self"]],["option",["duration"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["decodererror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[0,"dynamic_mixer","rodio","Mixer that plays multiple sounds at the same time.",N,N],[3,"DynamicMixerController","rodio::dynamic_mixer","The input of the mixer.",N,N],[3,"DynamicMixer","","The output of the mixer. Implements `Source`.",N,N],[5,"mixer","","Builds a new mixer.",N,N],[11,"add","","Adds a new source to mix to the existing ones.",5,[[["self"],["t"]]]],[11,"current_frame_len","","",6,[[["self"]],["option",["usize"]]]],[11,"channels","","",6,[[["self"]],["u16"]]],[11,"sample_rate","","",6,[[["self"]],["u32"]]],[11,"total_duration","","",6,[[["self"]],["option",["duration"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[0,"queue","rodio","Queue that plays sounds one after the other.",N,N],[3,"SourcesQueueInput","rodio::queue","The input of the queue.",N,N],[3,"SourcesQueueOutput","","The output of the queue. Implements `Source`.",N,N],[5,"queue","","Builds a new queue. It consists of an input and an output.",N,N],[11,"append","","Adds a new source to the end of the queue.",7,[[["self"],["t"]]]],[11,"append_with_signal","","Adds a new source to the end of the queue.",7,[[["self"],["t"]],["receiver"]]],[11,"set_keep_alive_if_empty","","Sets whether the queue stays alive if there's no more sound to play.",7,[[["self"],["bool"]]]],[11,"current_frame_len","","",8,[[["self"]],["option",["usize"]]]],[11,"channels","","",8,[[["self"]],["u16"]]],[11,"sample_rate","","",8,[[["self"]],["u32"]]],[11,"total_duration","","",8,[[["self"]],["option",["duration"]]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[0,"source","rodio","Sources of sound and various filters.",N,N],[3,"Amplify","rodio::source","Filter that modifies each sample by a given value.",N,N],[3,"BltFilter","","",N,N],[3,"Buffered","","Iterator that at the same time extracts data from the iterator and stores it in a buffer.",N,N],[3,"ChannelVolume","","Combines channels in input into a single mono source, then plays that mono sound to each channel at the volume given for that channel.",N,N],[3,"Delay","","A source that delays the given source by a certain amount.",N,N],[3,"Done","","When the inner source is empty this decrements an AtomicUsize",N,N],[3,"Empty","","An empty source.",N,N],[3,"FadeIn","","Filter that modifies each sample by a given value.",N,N],[3,"FromFactoryIter","","Internal type used by `from_factory`.",N,N],[3,"FromIter","","A source that chains sources provided by an iterator.",N,N],[3,"Mix","","Filter that modifies each sample by a given value.",N,N],[3,"Pausable","","",N,N],[3,"PeriodicAccess","","Calls a function on a source every time a period elapsed.",N,N],[3,"Repeat","","A source that repeats the given source.",N,N],[3,"SamplesConverter","","An iterator that reads from a `Source` and converts the samples to a specific rate and channels count.",N,N],[3,"SineWave","","An infinite source that produces a sine.",N,N],[3,"Spatial","","Combines channels in input into a single mono source, then plays that mono sound to each channel at the volume given for that channel.",N,N],[3,"Speed","","Filter that modifies each sample by a given value.",N,N],[3,"Stoppable","","",N,N],[3,"TakeDuration","","A source that repeats the given source.",N,N],[3,"UniformSourceIterator","","An iterator that reads from a `Source` and converts the samples to a specific rate and channels count.",N,N],[3,"Zero","","An infinite source that produces zero.",N,N],[5,"from_factory","","Builds a source that chains sources built from a factory.",N,[[["f"]],["fromiter",["fromfactoryiter"]]]],[5,"from_iter","","Builds a source that chains sources provided by an iterator.",N,[[["i"]],["fromiter"]]],[11,"clone","","",9,[[["self"]],["amplify"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"set_factor","","Modifies the amplification factor.",9,[[["self"],["f32"]]]],[11,"inner","","Returns a reference to the inner source.",9,[[["self"]],["i"]]],[11,"inner_mut","","Returns a mutable reference to the inner source.",9,[[["self"]],["i"]]],[11,"into_inner","","Returns the inner source.",9,[[["self"]],["i"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"current_frame_len","","",9,[[["self"]],["option",["usize"]]]],[11,"channels","","",9,[[["self"]],["u16"]]],[11,"sample_rate","","",9,[[["self"]],["u32"]]],[11,"total_duration","","",9,[[["self"]],["option",["duration"]]]],[11,"clone","","",10,[[["self"]],["bltfilter"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"to_low_pass","","Modifies this filter so that it becomes a low-pass filter.",10,[[["self"],["u32"]]]],[11,"inner","","Returns a reference to the inner source.",10,[[["self"]],["i"]]],[11,"inner_mut","","Returns a mutable reference to the inner source.",10,[[["self"]],["i"]]],[11,"into_inner","","Returns the inner source.",10,[[["self"]],["i"]]],[11,"next","","",10,[[["self"]],["option",["f32"]]]],[11,"size_hint","","",10,N],[11,"current_frame_len","","",10,[[["self"]],["option",["usize"]]]],[11,"channels","","",10,[[["self"]],["u16"]]],[11,"sample_rate","","",10,[[["self"]],["u32"]]],[11,"total_duration","","",10,[[["self"]],["option",["duration"]]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"current_frame_len","","",11,[[["self"]],["option",["usize"]]]],[11,"channels","","",11,[[["self"]],["u16"]]],[11,"sample_rate","","",11,[[["self"]],["u32"]]],[11,"total_duration","","",11,[[["self"]],["option",["duration"]]]],[11,"clone","","",11,[[["self"]],["buffered"]]],[11,"clone","","",12,[[["self"]],["channelvolume"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","",12,[[["i"],["vec",["f32"]]],["channelvolume"]]],[11,"set_volume","","Sets the volume for a given channel number.  Will panic if channel number was invalid.",12,[[["self"],["usize"],["f32"]]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"current_frame_len","","",12,[[["self"]],["option",["usize"]]]],[11,"channels","","",12,[[["self"]],["u16"]]],[11,"sample_rate","","",12,[[["self"]],["u32"]]],[11,"total_duration","","",12,[[["self"]],["option",["duration"]]]],[11,"clone","","",13,[[["self"]],["delay"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"current_frame_len","","",13,[[["self"]],["option",["usize"]]]],[11,"channels","","",13,[[["self"]],["u16"]]],[11,"sample_rate","","",13,[[["self"]],["u32"]]],[11,"total_duration","","",13,[[["self"]],["option",["duration"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["done"]]],[11,"new","","",14,[[["i"],["arc",["atomicusize"]]],["done"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"current_frame_len","","",14,[[["self"]],["option",["usize"]]]],[11,"channels","","",14,[[["self"]],["u16"]]],[11,"sample_rate","","",14,[[["self"]],["u32"]]],[11,"total_duration","","",14,[[["self"]],["option",["duration"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["empty"]]],[11,"new","","",15,[[],["empty"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"current_frame_len","","",15,[[["self"]],["option",["usize"]]]],[11,"channels","","",15,[[["self"]],["u16"]]],[11,"sample_rate","","",15,[[["self"]],["u32"]]],[11,"total_duration","","",15,[[["self"]],["option",["duration"]]]],[11,"clone","","",16,[[["self"]],["fadein"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"current_frame_len","","",16,[[["self"]],["option",["usize"]]]],[11,"channels","","",16,[[["self"]],["u16"]]],[11,"sample_rate","","",16,[[["self"]],["u32"]]],[11,"total_duration","","",16,[[["self"]],["option",["duration"]]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"clone","","",18,[[["self"]],["fromiter"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"current_frame_len","","",18,[[["self"]],["option",["usize"]]]],[11,"channels","","",18,[[["self"]],["u16"]]],[11,"sample_rate","","",18,[[["self"]],["u32"]]],[11,"total_duration","","",18,[[["self"]],["option",["duration"]]]],[11,"clone","","",19,[[["self"]],["mix"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"current_frame_len","","",19,[[["self"]],["option",["usize"]]]],[11,"channels","","",19,[[["self"]],["u16"]]],[11,"sample_rate","","",19,[[["self"]],["u32"]]],[11,"total_duration","","",19,[[["self"]],["option",["duration"]]]],[11,"clone","","",20,[[["self"]],["pausable"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"set_paused","","Sets whether the filter applies.",20,[[["self"],["bool"]]]],[11,"inner","","Returns a reference to the inner source.",20,[[["self"]],["i"]]],[11,"inner_mut","","Returns a mutable reference to the inner source.",20,[[["self"]],["i"]]],[11,"into_inner","","Returns the inner source.",20,[[["self"]],["i"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"current_frame_len","","",20,[[["self"]],["option",["usize"]]]],[11,"channels","","",20,[[["self"]],["u16"]]],[11,"sample_rate","","",20,[[["self"]],["u32"]]],[11,"total_duration","","",20,[[["self"]],["option",["duration"]]]],[11,"clone","","",21,[[["self"]],["periodicaccess"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"next","","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,N],[11,"current_frame_len","","",21,[[["self"]],["option",["usize"]]]],[11,"channels","","",21,[[["self"]],["u16"]]],[11,"sample_rate","","",21,[[["self"]],["u32"]]],[11,"total_duration","","",21,[[["self"]],["option",["duration"]]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,N],[11,"current_frame_len","","",22,[[["self"]],["option",["usize"]]]],[11,"channels","","",22,[[["self"]],["u16"]]],[11,"sample_rate","","",22,[[["self"]],["u32"]]],[11,"total_duration","","",22,[[["self"]],["option",["duration"]]]],[11,"clone","","",22,[[["self"]],["repeat"]]],[11,"clone","","",23,[[["self"]],["samplesconverter"]]],[11,"new","","",23,[[["i"]],["samplesconverter"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"size_hint","","",23,N],[11,"current_frame_len","","",23,[[["self"]],["option",["usize"]]]],[11,"channels","","",23,[[["self"]],["u16"]]],[11,"sample_rate","","",23,[[["self"]],["u32"]]],[11,"total_duration","","",23,[[["self"]],["option",["duration"]]]],[11,"clone","","",24,[[["self"]],["sinewave"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","The frequency of the sine.",24,[[["u32"]],["sinewave"]]],[11,"next","","",24,[[["self"]],["option",["f32"]]]],[11,"current_frame_len","","",24,[[["self"]],["option",["usize"]]]],[11,"channels","","",24,[[["self"]],["u16"]]],[11,"sample_rate","","",24,[[["self"]],["u32"]]],[11,"total_duration","","",24,[[["self"]],["option",["duration"]]]],[11,"clone","","",25,[[["self"]],["spatial"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","",25,N],[11,"set_positions","","Sets the position of the emitter and ears in the 3D world.",25,N],[11,"next","","",25,[[["self"]],["option"]]],[11,"size_hint","","",25,N],[11,"current_frame_len","","",25,[[["self"]],["option",["usize"]]]],[11,"channels","","",25,[[["self"]],["u16"]]],[11,"sample_rate","","",25,[[["self"]],["u32"]]],[11,"total_duration","","",25,[[["self"]],["option",["duration"]]]],[11,"clone","","",26,[[["self"]],["speed"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,N],[11,"current_frame_len","","",26,[[["self"]],["option",["usize"]]]],[11,"channels","","",26,[[["self"]],["u16"]]],[11,"sample_rate","","",26,[[["self"]],["u32"]]],[11,"total_duration","","",26,[[["self"]],["option",["duration"]]]],[11,"clone","","",27,[[["self"]],["stoppable"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"stop","","Stops the sound.",27,[[["self"]]]],[11,"inner","","Returns a reference to the inner source.",27,[[["self"]],["i"]]],[11,"inner_mut","","Returns a mutable reference to the inner source.",27,[[["self"]],["i"]]],[11,"into_inner","","Returns the inner source.",27,[[["self"]],["i"]]],[11,"next","","",27,[[["self"]],["option"]]],[11,"size_hint","","",27,N],[11,"current_frame_len","","",27,[[["self"]],["option",["usize"]]]],[11,"channels","","",27,[[["self"]],["u16"]]],[11,"sample_rate","","",27,[[["self"]],["u32"]]],[11,"total_duration","","",27,[[["self"]],["option",["duration"]]]],[11,"clone","","",28,[[["self"]],["takeduration"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"current_frame_len","","",28,[[["self"]],["option",["usize"]]]],[11,"channels","","",28,[[["self"]],["u16"]]],[11,"sample_rate","","",28,[[["self"]],["u32"]]],[11,"total_duration","","",28,[[["self"]],["option",["duration"]]]],[11,"clone","","",29,[[["self"]],["uniformsourceiterator"]]],[11,"new","","",29,[[["i"],["u16"],["u32"]],["uniformsourceiterator"]]],[11,"next","","",29,[[["self"]],["option"]]],[11,"size_hint","","",29,N],[11,"current_frame_len","","",29,[[["self"]],["option",["usize"]]]],[11,"channels","","",29,[[["self"]],["u16"]]],[11,"sample_rate","","",29,[[["self"]],["u32"]]],[11,"total_duration","","",29,[[["self"]],["option",["duration"]]]],[11,"clone","","",30,[[["self"]],["zero"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"new","","",30,[[["u16"],["u32"]],["zero"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"current_frame_len","","",30,[[["self"]],["option",["usize"]]]],[11,"channels","","",30,[[["self"]],["u16"]]],[11,"sample_rate","","",30,[[["self"]],["u32"]]],[11,"total_duration","","",30,[[["self"]],["option",["duration"]]]],[8,"Source","","A source of samples.",N,N],[10,"current_frame_len","","Returns the number of samples before the current frame ends. `None` means \"infinite\" or \"until the sound ends\". Should never return 0 unless there's no more data.",31,[[["self"]],["option",["usize"]]]],[10,"channels","","Returns the number of channels. Channels are always interleaved.",31,[[["self"]],["u16"]]],[10,"sample_rate","","Returns the rate at which the source should be played. In number of samples per second.",31,[[["self"]],["u32"]]],[10,"total_duration","","Returns the total duration of this source, if known.",31,[[["self"]],["option",["duration"]]]],[11,"buffered","","Stores the source in a buffer in addition to returning it. This iterator can be cloned.",31,[[["self"]],["buffered"]]],[11,"mix","","Mixes this source with another one.",31,[[["self"],["s"]],["mix"]]],[11,"repeat_infinite","","Repeats this source forever.",31,[[["self"]],["repeat"]]],[11,"take_duration","","Takes a certain duration of this source and then stops.",31,[[["self"],["duration"]],["takeduration"]]],[11,"delay","","Delays the sound by a certain duration.",31,[[["self"],["duration"]],["delay"]]],[11,"amplify","","Amplifies the sound by the given value.",31,[[["self"],["f32"]],["amplify"]]],[11,"fade_in","","Fades in the sound.",31,[[["self"],["duration"]],["fadein"]]],[11,"periodic_access","","Calls the `access` closure on `Self` every time `period` elapsed.",31,[[["self"],["duration"],["f"]],["periodicaccess"]]],[11,"speed","","Changes the play speed of the sound. Does not adjust the samples, only the play speed.",31,[[["self"],["f32"]],["speed"]]],[11,"reverb","","Adds a basic reverb effect.",31,[[["self"],["duration"],["f32"]],["mix",["delay"]]]],[11,"convert_samples","","Converts the samples of this source to another type.",31,[[["self"]],["samplesconverter"]]],[11,"pausable","","Makes the sound pausable.",31,[[["self"],["bool"]],["pausable"]]],[11,"stoppable","","Makes the sound stoppable.",31,[[["self"]],["stoppable"]]],[11,"low_pass","","Applies a low-pass filter to the source. Warning: Probably buggy.",31,[[["self"],["u32"]],["bltfilter"]]],[0,"static_buffer","rodio","A simple source of samples coming from a static buffer.",N,N],[3,"StaticSamplesBuffer","rodio::static_buffer","A buffer of samples treated as a source.",N,N],[11,"clone","","",32,[[["self"]],["staticsamplesbuffer"]]],[11,"new","","Builds a new `StaticSamplesBuffer`.",32,N],[11,"current_frame_len","","",32,[[["self"]],["option",["usize"]]]],[11,"channels","","",32,[[["self"]],["u16"]]],[11,"sample_rate","","",32,[[["self"]],["u32"]]],[11,"total_duration","","",32,[[["self"]],["option",["duration"]]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"size_hint","","",32,N],[8,"Sample","rodio","Represents a value of a single sample.",N,N],[10,"lerp","","Linear interpolation between two samples.",33,[[["self"],["self"],["u32"],["u32"]],["self"]]],[10,"amplify","","Multiplies the value of this sample by the given amount.",33,[[["self"],["f32"]],["self"]]],[10,"saturating_add","","Calls `saturating_add` on the sample.",33,[[["self"],["self"]],["self"]]],[10,"zero_value","","Returns the value corresponding to the absence of sound.",33,[[],["self"]]],[11,"name","","The human-readable name of the device.",34,[[["self"]],["string"]]],[11,"supported_input_formats","","An iterator yielding formats that are supported by the backend.",34,[[["self"]],["result",["supportedinputformats","formatsenumerationerror"]]]],[11,"supported_output_formats","","An iterator yielding output stream formats that are supported by the device.",34,[[["self"]],["result",["supportedoutputformats","formatsenumerationerror"]]]],[11,"default_input_format","","The default input stream format for the device.",34,[[["self"]],["result",["format","defaultformaterror"]]]],[11,"default_output_format","","The default output stream format for the device.",34,[[["self"]],["result",["format","defaultformaterror"]]]],[11,"clone","","",34,[[["self"]],["device"]]],[11,"eq","","",34,[[["self"],["device"]],["bool"]]],[11,"ne","","",34,[[["self"],["device"]],["bool"]]]],"paths":[[3,"Sink"],[3,"SpatialSink"],[3,"SamplesBuffer"],[4,"DecoderError"],[3,"Decoder"],[3,"DynamicMixerController"],[3,"DynamicMixer"],[3,"SourcesQueueInput"],[3,"SourcesQueueOutput"],[3,"Amplify"],[3,"BltFilter"],[3,"Buffered"],[3,"ChannelVolume"],[3,"Delay"],[3,"Done"],[3,"Empty"],[3,"FadeIn"],[3,"FromFactoryIter"],[3,"FromIter"],[3,"Mix"],[3,"Pausable"],[3,"PeriodicAccess"],[3,"Repeat"],[3,"SamplesConverter"],[3,"SineWave"],[3,"Spatial"],[3,"Speed"],[3,"Stoppable"],[3,"TakeDuration"],[3,"UniformSourceIterator"],[3,"Zero"],[8,"Source"],[3,"StaticSamplesBuffer"],[8,"Sample"],[3,"Device"]]};
searchIndex["ron"]={"doc":"RON is a simple config format which looks similar to Rust syntax.","items":[[0,"de","ron","",N,N],[3,"Position","ron::de","",N,N],[12,"col","","",0,N],[12,"line","","",0,N],[3,"Deserializer","","The RON deserializer.",N,N],[4,"Error","","",N,N],[13,"IoError","","",1,N],[13,"Message","","",1,N],[13,"Parser","","",1,N],[4,"ParseError","","",N,N],[13,"Base64Error","","",2,N],[13,"Eof","","",2,N],[13,"ExpectedArray","","",2,N],[13,"ExpectedArrayEnd","","",2,N],[13,"ExpectedAttribute","","",2,N],[13,"ExpectedAttributeEnd","","",2,N],[13,"ExpectedBoolean","","",2,N],[13,"ExpectedComma","","",2,N],[13,"ExpectedEnum","","",2,N],[13,"ExpectedChar","","",2,N],[13,"ExpectedFloat","","",2,N],[13,"ExpectedInteger","","",2,N],[13,"ExpectedOption","","",2,N],[13,"ExpectedOptionEnd","","",2,N],[13,"ExpectedMap","","",2,N],[13,"ExpectedMapColon","","",2,N],[13,"ExpectedMapEnd","","",2,N],[13,"ExpectedStruct","","",2,N],[13,"ExpectedStructEnd","","",2,N],[13,"ExpectedUnit","","",2,N],[13,"ExpectedStructName","","",2,N],[13,"ExpectedString","","",2,N],[13,"ExpectedStringEnd","","",2,N],[13,"ExpectedIdentifier","","",2,N],[13,"InvalidEscape","","",2,N],[13,"NoSuchExtension","","",2,N],[13,"UnclosedBlockComment","","",2,N],[13,"UnexpectedByte","","",2,N],[13,"Utf8Error","","",2,N],[13,"TrailingCharacters","","",2,N],[5,"from_reader","","A convenience function for reading data from a reader and feeding into a deserializer.",N,[[["r"]],["result"]]],[5,"from_str","","A convenience function for building a deserializer and deserializing a value of type `T` from a string.",N,[[["str"]],["result"]]],[5,"from_bytes","","A convenience function for building a deserializer and deserializing a value of type `T` from bytes.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"from","","",2,[[["utf8error"]],["self"]]],[11,"from","","",2,[[["fromutf8error"]],["self"]]],[11,"from","","",1,[[["utf8error"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[6,"Result","","Deserialization result.",N,N],[11,"from_str","","",3,[[["str"]],["result"]]],[11,"from_bytes","","",3,N],[11,"remainder","","",3,[[["self"]],["cow",["str"]]]],[11,"end","","Check if the remaining bytes are whitespace only, otherwise return an error.",3,[[["self"]],["result"]]],[0,"ser","ron","",N,N],[3,"PrettyConfig","ron::ser","Pretty serializer configuration",N,N],[12,"depth_limit","","Limit the pretty-ness up to the given depth.",4,N],[12,"new_line","","New line string",4,N],[12,"indentor","","Indentation string",4,N],[12,"separate_tuple_members","","Separate tuple members with indentation",4,N],[12,"enumerate_arrays","","Enumerate array items in comments",4,N],[3,"Serializer","","The RON serializer.",N,N],[4,"Error","","Serialization error.",N,N],[13,"Message","","A custom error emitted by a serialized value.",5,N],[5,"to_string","","Serializes `value` and returns it as string.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serializes `value` in the recommended RON layout in a pretty way.",N,[[["t"],["prettyconfig"]],["result",["string"]]]],[6,"Result","","Serialization result.",N,N],[11,"clone","","",5,[[["self"]],["error"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["error"]],["bool"]]],[11,"ne","","",5,[[["self"],["error"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["fmtresult"]]],[11,"custom","","",5,[[["t"]],["self"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"clone","","",4,[[["self"]],["prettyconfig"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["self"]]],[11,"new","","Creates a new `Serializer`.",6,[[["option",["prettyconfig"]],["bool"]],["self"]]],[11,"into_output_string","","Consumes `self` and returns the built `String`.",6,[[["self"]],["string"]]],[0,"value","ron","Value module.",N,N],[3,"Number","ron::value","A wrapper for `f64` which guarantees that the inner value is finite and thus implements `Eq`, `Hash` and `Ord`.",N,N],[4,"Value","","",N,N],[13,"Bool","","",7,N],[13,"Char","","",7,N],[13,"Map","","",7,N],[13,"Number","","",7,N],[13,"Option","","",7,N],[13,"String","","",7,N],[13,"Seq","","",7,N],[13,"Unit","","",7,N],[11,"clone","","",8,[[["self"]],["number"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",8,[[["self"],["number"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["number"]],["bool"]]],[11,"le","","",8,[[["self"],["number"]],["bool"]]],[11,"gt","","",8,[[["self"],["number"]],["bool"]]],[11,"ge","","",8,[[["self"],["number"]],["bool"]]],[11,"eq","","",8,[[["self"],["number"]],["bool"]]],[11,"ne","","",8,[[["self"],["number"]],["bool"]]],[11,"new","","Panics if `v` is not a real number (infinity, NaN, ..).",8,[[["f64"]],["self"]]],[11,"get","","Returns the wrapped float.",8,[[["self"]],["f64"]]],[11,"hash","","",8,[[["self"],["h"]]]],[11,"cmp","","",8,[[["self"],["self"]],["ordering"]]],[11,"clone","","",7,[[["self"]],["value"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"hash","","",7,N],[11,"cmp","","",7,[[["self"],["value"]],["ordering"]]],[11,"eq","","",7,[[["self"],["value"]],["bool"]]],[11,"ne","","",7,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["value"]],["bool"]]],[11,"le","","",7,[[["self"],["value"]],["bool"]]],[11,"gt","","",7,[[["self"],["value"]],["bool"]]],[11,"ge","","",7,[[["self"],["value"]],["bool"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"clone","ron::de","",0,[[["self"]],["position"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["position"]],["bool"]]],[11,"ne","","",0,[[["self"],["position"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["fmtresult"]]],[11,"from_str","ron::value","Creates a value from a string reference.",7,[[["str"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]]],"paths":[[3,"Position"],[4,"Error"],[4,"ParseError"],[3,"Deserializer"],[3,"PrettyConfig"],[4,"Error"],[3,"Serializer"],[4,"Value"],[3,"Number"]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",N,N],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",N,N],[5,"demangle","","De-mangles a Rust symbol into a more readable version",N,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",N,[[["str"]],["result",["demangle","trydemangleerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["trydemangleerror"]]],[11,"as_str","","Returns the underlying string that's being demangled.",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_hash"]={"doc":"Fast, non-cryptographic hash used by rustc and Firefox.","items":[[3,"FxHasher","rustc_hash","A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we use a fast non-cryptographic hash.",N,N],[6,"FxHashMap","","Type alias for a hashmap using the `fx` hash algorithm.",N,N],[6,"FxHashSet","","Type alias for a hashmap using the `fx` hash algorithm.",N,N],[11,"default","","",0,[[],["fxhasher"]]],[11,"write","","",0,N],[11,"write_u8","","",0,[[["self"],["u8"]]]],[11,"write_u16","","",0,[[["self"],["u16"]]]],[11,"write_u32","","",0,[[["self"],["u32"]]]],[11,"write_u64","","",0,[[["self"],["u64"]]]],[11,"write_usize","","",0,[[["self"],["usize"]]]],[11,"finish","","",0,[[["self"]],["u64"]]]],"paths":[[3,"FxHasher"]]};
searchIndex["rustc_version"]={"doc":"Simple library for getting the version information of a `rustc` compiler.","items":[[3,"VersionMeta","rustc_version","Rustc version plus metada like git short hash and build date.",N,N],[12,"semver","","Version of the compiler",0,N],[12,"commit_hash","","Git short hash of the build of the compiler",0,N],[12,"commit_date","","Commit date of the compiler",0,N],[12,"build_date","","Build date of the compiler; this was removed between Rust 1.0.0 and 1.1.0.",0,N],[12,"channel","","Release channel of the compiler",0,N],[12,"host","","Host target triple of the compiler",0,N],[12,"short_version_string","","Short version string of the compiler",0,N],[4,"Channel","","Release channel of the compiler.",N,N],[13,"Dev","","Development release channel",1,N],[13,"Nightly","","Nightly release channel",1,N],[13,"Beta","","Beta release channel",1,N],[13,"Stable","","Stable release channel",1,N],[5,"version","","Returns the `rustc` SemVer version.",N,[[],["version"]]],[5,"version_meta","","Returns the `rustc` SemVer version and additional metadata like the git short hash and build date.",N,[[],["versionmeta"]]],[5,"version_meta_for","","Parses a \"rustc -vV\" output string and returns the SemVer version and additional metadata like the git short hash and build date.",N,[[["str"]],["versionmeta"]]],[5,"version_matches","","Check wether the `rustc` version matches the given SemVer version requirement.",N,[[["str"]],["bool"]]],[11,"clone","","",1,[[["self"]],["channel"]]],[11,"eq","","",1,[[["self"],["channel"]],["bool"]]],[11,"cmp","","",1,[[["self"],["channel"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["channel"]],["option",["ordering"]]]],[11,"hash","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["versionmeta"]]],[11,"eq","","",0,[[["self"],["versionmeta"]],["bool"]]],[11,"ne","","",0,[[["self"],["versionmeta"]],["bool"]]],[11,"cmp","","",0,[[["self"],["versionmeta"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["versionmeta"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["versionmeta"]],["bool"]]],[11,"le","","",0,[[["self"],["versionmeta"]],["bool"]]],[11,"gt","","",0,[[["self"],["versionmeta"]],["bool"]]],[11,"ge","","",0,[[["self"],["versionmeta"]],["bool"]]],[11,"hash","","",0,N]],"paths":[[3,"VersionMeta"],[4,"Channel"]]};
searchIndex["rustc_version_runtime"]={"doc":"Simple library for getting the version information of a `rustc` compiler in runtime.","items":[[5,"version_meta","rustc_version_runtime","Returns the `rustc` SemVer version and additional metadata like the git short hash and build date.",N,[[],["versionmeta"]]],[5,"version","","Returns the `rustc` SemVer version.",N,[[],["version"]]],[5,"version_matches","","Check wether the `rustc` version matches the given SemVer version requirement.",N,[[["str"]],["bool"]]]],"paths":[]};
searchIndex["rusttype"]={"doc":"RustType is a pure Rust alternative to libraries like FreeType.","items":[[3,"Curve","rusttype","A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control point `p[1]`.",N,N],[12,"p","","",0,N],[3,"Line","","A straight line between two points, `p[0]` and `p[1]`",N,N],[12,"p","","",1,N],[3,"Point","","A point in 2-dimensional space, with each dimension of type `N`.",N,N],[12,"x","","",2,N],[12,"y","","",2,N],[3,"Rect","","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`.",N,N],[12,"min","","",3,N],[12,"max","","",3,N],[3,"Vector","","A vector in 2-dimensional space, with each dimension of type `N`.",N,N],[12,"x","","",4,N],[12,"y","","",4,N],[3,"FontCollection","","A collection of fonts read straight from a font file's data. The data in the collection is not validated. This structure may or may not own the font data.",N,N],[3,"Font","","A single font. This may or may not own the font data.",N,N],[3,"Codepoint","","Represents a Unicode code point.",N,N],[12,"0","","",5,N],[3,"GlyphId","","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from.",N,N],[12,"0","","",6,N],[3,"Glyph","","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it.",N,N],[3,"SharedGlyphData","","",N,N],[12,"id","","",7,N],[12,"extents","","",7,N],[12,"scale_for_1_pixel","","",7,N],[12,"unit_h_metrics","","",7,N],[12,"shape","","",7,N],[3,"HMetrics","","The \"horizontal metrics\" of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally.",N,N],[12,"advance_width","","The horizontal offset that the origin of the next glyph should be from the origin of this glyph.",8,N],[12,"left_side_bearing","","The horizontal offset between the origin of this glyph and the leftmost edge/point of the glyph.",8,N],[3,"VMetrics","","The \"vertical metrics\" of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines.",N,N],[12,"ascent","","The highest point that any glyph in the font extends to above the baseline. Typically positive.",9,N],[12,"descent","","The lowest point that any glyph in the font extends to below the baseline. Typically negative.",9,N],[12,"line_gap","","The gap to leave between the descent of one line and the ascent of the next. This is of course only a guideline given by the font's designers.",9,N],[3,"ScaledGlyph","","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph.",N,N],[3,"PositionedGlyph","","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph.",N,N],[3,"Scale","","Defines the size of a rendered face of a font, in pixels, horizontally and vertically. A vertical scale of `y` pixels means that the distance betwen the ascent and descent lines (see `VMetrics`) of the face will be `y` pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling by a factor f in the horizontal direction is achieved by setting `x` equal to f times `y`.",N,N],[12,"x","","Horizontal scale, in pixels.",10,N],[12,"y","","Vertical scale, in pixels.",10,N],[3,"IntoFontsIter","","",N,N],[3,"GlyphIter","","",N,N],[3,"LayoutIter","","",N,N],[3,"Contour","","A closed loop consisting of a sequence of `Segment`s.",N,N],[12,"segments","","",11,N],[4,"SharedBytes","","`SharedBytes` handles the lifetime of font data used in RustType. The data is either a shared reference to externally owned data, or managed by reference counting. `SharedBytes` can be conveniently used with `From` and `Into`, and dereferences to the contained bytes.",N,N],[13,"ByRef","","",12,N],[13,"ByArc","","",12,N],[4,"Segment","","Part of a `Contour`, either a `Line` or a `Curve`.",N,N],[13,"Line","","",13,N],[13,"Curve","","",13,N],[4,"Error","","The type for errors returned by rusttype.",N,N],[13,"UnrecognizedFormat","","Font data presented to rusttype is not in a format that the library recognizes.",14,N],[13,"IllFormed","","Font data presented to rusttype was ill-formed (lacking necessary tables, for example).",14,N],[13,"CollectionIndexOutOfBounds","","The caller tried to access the `i`'th font from a `FontCollection`, but the collection doesn't contain that many fonts.",14,N],[13,"CollectionContainsMultipleFonts","","The caller tried to convert a `FontCollection` into a font via `into_font`, but the `FontCollection` contains more than one font.",14,N],[5,"point","","A convenience function for generating `Point`s.",N,[[["n"],["n"]],["point"]]],[5,"vector","","A convenience function for generating `Vector`s.",N,[[["n"],["n"]],["vector"]]],[11,"clone","","",2,[[["self"]],["point"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",2,[[["self"],["point"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["point"]],["bool"]]],[11,"le","","",2,[[["self"],["point"]],["bool"]]],[11,"gt","","",2,[[["self"],["point"]],["bool"]]],[11,"ge","","",2,[[["self"],["point"]],["bool"]]],[11,"cmp","","",2,[[["self"],["point"]],["ordering"]]],[11,"eq","","",2,[[["self"],["point"]],["bool"]]],[11,"ne","","",2,[[["self"],["point"]],["bool"]]],[11,"hash","","",2,N],[11,"clone","","",4,[[["self"]],["vector"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",4,[[["self"],["vector"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["vector"]],["bool"]]],[11,"le","","",4,[[["self"],["vector"]],["bool"]]],[11,"gt","","",4,[[["self"],["vector"]],["bool"]]],[11,"ge","","",4,[[["self"],["vector"]],["bool"]]],[11,"cmp","","",4,[[["self"],["vector"]],["ordering"]]],[11,"eq","","",4,[[["self"],["vector"]],["bool"]]],[11,"ne","","",4,[[["self"],["vector"]],["bool"]]],[11,"hash","","",4,N],[11,"sub","","",2,[[["self"],["point"]],["vector"]]],[11,"add","","",4,[[["self"],["vector"]],["vector"]]],[11,"sub","","",4,[[["self"],["vector"]],["vector"]]],[11,"mul","","",4,[[["self"],["f32"]],["vector",["f32"]]]],[11,"mul","","",4,[[["self"],["f64"]],["vector",["f64"]]]],[11,"div","","",4,[[["self"],["f32"]],["vector",["f32"]]]],[11,"div","","",4,[[["self"],["f64"]],["vector",["f64"]]]],[11,"add","","",2,[[["self"],["vector"]],["point"]]],[11,"sub","","",2,[[["self"],["vector"]],["point"]]],[11,"add","","",4,[[["self"],["point"]],["point"]]],[11,"clone","","",1,[[["self"]],["line"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["line"]],["bool"]]],[11,"ne","","",1,[[["self"],["line"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["line"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["line"]],["bool"]]],[11,"le","","",1,[[["self"],["line"]],["bool"]]],[11,"gt","","",1,[[["self"],["line"]],["bool"]]],[11,"ge","","",1,[[["self"],["line"]],["bool"]]],[11,"clone","","",0,[[["self"]],["curve"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["curve"]],["bool"]]],[11,"ne","","",0,[[["self"],["curve"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["curve"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["curve"]],["bool"]]],[11,"le","","",0,[[["self"],["curve"]],["bool"]]],[11,"gt","","",0,[[["self"],["curve"]],["bool"]]],[11,"ge","","",0,[[["self"],["curve"]],["bool"]]],[11,"clone","","",3,[[["self"]],["rect"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["rect"]],["bool"]]],[11,"ne","","",3,[[["self"],["rect"]],["bool"]]],[11,"hash","","",3,N],[11,"partial_cmp","","",3,[[["self"],["rect"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["rect"]],["bool"]]],[11,"le","","",3,[[["self"],["rect"]],["bool"]]],[11,"gt","","",3,[[["self"],["rect"]],["bool"]]],[11,"ge","","",3,[[["self"],["rect"]],["bool"]]],[11,"cmp","","",3,[[["self"],["rect"]],["ordering"]]],[11,"width","","",3,[[["self"]],["n"]]],[11,"height","","",3,[[["self"]],["n"]]],[0,"gpu_cache","","This module provides capabilities for managing a cache of rendered glyphs in GPU memory, with the goal of minimisng the size and frequency of glyph uploads to GPU memory from the CPU.",N,N],[3,"Cache","rusttype::gpu_cache","An implementation of a dynamic GPU glyph cache. See the module documentation for more information.",N,N],[3,"CacheBuilder","","Builder & rebuilder for `Cache`.",N,N],[4,"CacheReadErr","","Returned from `Cache::rect_for`.",N,N],[13,"GlyphNotCached","","Indicates that the requested glyph is not present in the cache",15,N],[4,"CacheWriteErr","","Returned from `Cache::cache_queued`.",N,N],[13,"GlyphTooLarge","","At least one of the queued glyphs is too big to fit into the cache, even if all other glyphs are removed.",16,N],[13,"NoRoomForWholeQueue","","Not all of the requested glyphs can fit into the cache, even if the cache is completely cleared before the attempt.",16,N],[6,"TextureCoords","","Texture coordinates (floating point) of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at.",N,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["cachebuilder"]]],[11,"default","","",17,[[],["self"]]],[11,"dimensions","","`width` & `height` dimensions of the 2D texture that will hold the cache contents on the GPU.",17,[[["self"],["u32"],["u32"]],["self"]]],[11,"scale_tolerance","","Specifies the tolerances (maximum allowed difference) for judging whether an existing glyph in the cache is close enough to the requested glyph in scale to be used in its place. Due to floating point inaccuracies a min value of `0.001` is enforced.",17,[[["self"],["v"]],["self"]]],[11,"position_tolerance","","Specifies the tolerances (maximum allowed difference) for judging whether an existing glyph in the cache is close enough to the requested glyph in subpixel offset to be used in its place. Due to floating point inaccuracies a min value of `0.001` is enforced.",17,[[["self"],["v"]],["self"]]],[11,"pad_glyphs","","Pack glyphs in texture with a padding of a single zero alpha pixel to avoid bleeding from interpolated shader texture lookups near edges.",17,[[["self"],["bool"]],["self"]]],[11,"multithread","","When multiple CPU cores are available spread rasterization work across all cores.",17,[[["self"],["bool"]],["self"]]],[11,"build","","Constructs a new cache. Note that this is just the CPU side of the cache. The GPU texture is managed by the user.",17,[[["self"]],["cache"]]],[11,"rebuild","","Rebuilds a cache with new attributes. Carries over the existing cache queue unmodified.",17,[[["self"],["cache"]]]],[11,"clone","","",15,[[["self"]],["cachereaderr"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["cachereaderr"]],["bool"]]],[11,"partial_cmp","","",15,[[["self"],["cachereaderr"]],["option",["ordering"]]]],[11,"cmp","","",15,[[["self"],["cachereaderr"]],["ordering"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"description","","",15,[[["self"]],["str"]]],[11,"clone","","",16,[[["self"]],["cachewriteerr"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["cachewriteerr"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["cachewriteerr"]],["option",["ordering"]]]],[11,"cmp","","",16,[[["self"],["cachewriteerr"]],["ordering"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"description","","",16,[[["self"]],["str"]]],[11,"builder","","Returns a default `CacheBuilder`.",18,[[],["cachebuilder"]]],[11,"scale_tolerance","","Returns the current scale tolerance for the cache.",18,[[["self"]],["f32"]]],[11,"position_tolerance","","Returns the current subpixel position tolerance for the cache.",18,[[["self"]],["f32"]]],[11,"dimensions","","Returns the cache texture dimensions assumed by the cache. For proper operation this should match the dimensions of the used GPU texture.",18,N],[11,"queue_glyph","","Queue a glyph for caching by the next call to `cache_queued`. `font_id` is used to disambiguate glyphs from different fonts. The user should ensure that `font_id` is unique to the font the glyph is from.",18,[[["self"],["usize"],["positionedglyph"]]]],[11,"clear","","Clears the cache. Does not affect the glyph queue.",18,[[["self"]]]],[11,"clear_queue","","Clears the glyph queue.",18,[[["self"]]]],[11,"to_builder","","Returns a `CacheBuilder` with this cache's attributes.",18,[[["self"]],["cachebuilder"]]],[11,"cache_queued","","Caches the queued glyphs. If this is unsuccessful, the queue is untouched. Any glyphs cached by previous calls to this function may be removed from the cache to make room for the newly queued glyphs. Thus if you want to ensure that a glyph is in the cache, the most recently cached queue must have contained that glyph.",18,[[["self"],["f"]],["result",["cachewriteerr"]]]],[11,"rect_for","","Retrieves the (floating point) texture coordinates of the quad for a glyph in the cache, as well as the pixel-space (integer) coordinates that this region should be drawn at. These pixel-space coordinates assume an origin at the top left of the quad. In the majority of cases these pixel-space coordinates should be identical to the bounding box of the input glyph. They only differ if the cache has returned a substitute glyph that is deemed close enough to the requested glyph as specified by the cache tolerance parameters.",18,[[["self"],["usize"],["positionedglyph"]],["result",["option","cachereaderr"]]]],[8,"IntoGlyphId","rusttype","A trait for types that can be converted into a `GlyphId`, in the context of a specific font.",N,N],[10,"into_glyph_id","","Convert `self` into a `GlyphId`, consulting the index map of `font` if necessary.",19,[[["self"],["font"]],["glyphid"]]],[11,"clone","","",20,[[["self"]],["fontcollection"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["font"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["sharedbytes"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"deref","","",12,N],[11,"from","","",12,N],[11,"from","","",12,[[["arc"]],["sharedbytes"]]],[11,"from","","",12,[[["box"]],["sharedbytes"]]],[11,"from","","",12,[[["vec",["u8"]]],["sharedbytes"]]],[11,"from","","",12,[[["t"]],["sharedbytes"]]],[11,"clone","","",5,[[["self"]],["codepoint"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"ne","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"hash","","",5,N],[11,"partial_cmp","","",5,[[["self"],["codepoint"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"le","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"gt","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"ge","","",5,[[["self"],["codepoint"]],["bool"]]],[11,"cmp","","",5,[[["self"],["codepoint"]],["ordering"]]],[11,"clone","","",6,[[["self"]],["glyphid"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"ne","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"hash","","",6,N],[11,"partial_cmp","","",6,[[["self"],["glyphid"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"le","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"gt","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"ge","","",6,[[["self"],["glyphid"]],["bool"]]],[11,"cmp","","",6,[[["self"],["glyphid"]],["ordering"]]],[11,"clone","","",22,[[["self"]],["glyph"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["hmetrics"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"ne","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["hmetrics"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"le","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"gt","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"ge","","",8,[[["self"],["hmetrics"]],["bool"]]],[11,"clone","","",9,[[["self"]],["vmetrics"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"ne","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["vmetrics"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"le","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"gt","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"ge","","",9,[[["self"],["vmetrics"]],["bool"]]],[11,"from","","",9,[[["vmetrics"]],["self"]]],[11,"mul","","",9,[[["self"],["f32"]],["self"]]],[11,"clone","","",23,[[["self"]],["scaledglyph"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["positionedglyph"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["scale"]]],[11,"eq","","",10,[[["self"],["scale"]],["bool"]]],[11,"ne","","",10,[[["self"],["scale"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["scale"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["scale"]],["bool"]]],[11,"le","","",10,[[["self"],["scale"]],["bool"]]],[11,"gt","","",10,[[["self"],["scale"]],["bool"]]],[11,"ge","","",10,[[["self"],["scale"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"uniform","","Uniform scaling, equivalent to `Scale { x: s, y: s }`.",10,[[["f32"]],["scale"]]],[11,"into_glyph_id","","",5,[[["self"],["font"]],["glyphid"]]],[11,"into_glyph_id","","",6,[[["self"],["font"]],["glyphid"]]],[11,"from_bytes","","Constructs a font collection from an array of bytes, typically loaded from a font file, which may be a single font or a TrueType Collection holding a number of fonts. This array may be owned (e.g. `Vec<u8>`), or borrowed (`&[u8]`). As long as `From<T>` is implemented for `Bytes` for some type `T`, `T` can be used as input.",20,[[["b"]],["result",["fontcollection","error"]]]],[11,"into_font","","If this `FontCollection` holds a single font, or a TrueType Collection containing only one font, return that as a `Font`. The `FontCollection` is consumed.",20,[[["self"]],["result",["font","error"]]]],[11,"font_at","","Gets the font at index `i` in the font collection, if it exists and is valid. The produced font borrows the font data that is either borrowed or owned by this font collection.",20,[[["self"],["usize"]],["result",["font","error"]]]],[11,"into_fonts","","Converts `self` into an `Iterator` yielding each `Font` that exists within the collection.",20,[[["self"]],["intofontsiter"]]],[11,"next","","",25,[[["self"]],["option"]]],[11,"from_bytes","","Constructs a font from an array of bytes, this is a shortcut for `FontCollection::from_bytes` for collections comprised of a single font.",21,[[["b"]],["result",["font","error"]]]],[11,"v_metrics","","The \"vertical metrics\" for this font at a given scale. These metrics are shared by all of the glyphs in the font. See `VMetrics` for more detail.",21,[[["self"],["scale"]],["vmetrics"]]],[11,"v_metrics_unscaled","","Get the unscaled VMetrics for this font, shared by all glyphs. See `VMetrics` for more detail.",21,[[["self"]],["vmetrics"]]],[11,"units_per_em","","Returns the units per EM square of this font",21,[[["self"]],["u16"]]],[11,"glyph_count","","The number of glyphs present in this font. Glyph identifiers for this font will always be in the range `0..self.glyph_count()`",21,[[["self"]],["usize"]]],[11,"glyph","","Returns the corresponding glyph for a Unicode code point or a glyph id for this font.",21,[[["self"],["c"]],["glyph"]]],[11,"glyphs_for","","A convenience function.",21,[[["self"],["i"]],["glyphiter"]]],[11,"font_name_strings","","Returns an iterator over the names for this font.",21,[[["self"]],["fontnameiter",["sharedbytes"]]]],[11,"layout","","A convenience function for laying out glyphs for a string horizontally. It does not take control characters like line breaks into account, as treatment of these is likely to depend on the application.",21,[[["self"],["str"],["scale"],["point",["f32"]]],["layoutiter"]]],[11,"pair_kerning","","Returns additional kerning to apply as well as that given by HMetrics for a particular pair of glyphs.",21,[[["self"],["scale"],["a"],["b"]],["f32"]]],[11,"clone","","",26,[[["self"]],["glyphiter"]]],[11,"next","","",26,[[["self"]],["option",["glyph"]]]],[11,"clone","","",27,[[["self"]],["layoutiter"]]],[11,"next","","",27,[[["self"]],["option",["positionedglyph"]]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",22,[[["self"]],["option",["font"]]]],[11,"id","","The glyph identifier for this glyph.",22,[[["self"]],["glyphid"]]],[11,"scaled","","Augments this glyph with scaling information, making methods that depend on the scale of the glyph available.",22,[[["self"],["scale"]],["scaledglyph"]]],[11,"standalone","","Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that owns its resources, extracted from the font. This glyph can outlive the font that it comes from.",22,[[["self"]],["glyph"]]],[11,"get_data","","Get the data from this glyph (such as width, extents, vertices, etc.). Only possible if the glyph is a shared glyph.",22,[[["self"]],["option",["arc"]]]],[11,"clone","","",13,[[["self"]],["segment"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["contour"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"id","","The glyph identifier for this glyph.",23,[[["self"]],["glyphid"]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",23,[[["self"]],["option",["font"]]]],[11,"into_unscaled","","A reference to this glyph without the scaling",23,[[["self"]],["glyph"]]],[11,"unscaled","","Removes the scaling from this glyph",23,[[["self"]],["glyph"]]],[11,"positioned","","Augments this glyph with positioning information, making methods that depend on the position of the glyph available.",23,[[["self"],["point",["f32"]]],["positionedglyph"]]],[11,"scale","","",23,[[["self"]],["scale"]]],[11,"h_metrics","","Retrieves the \"horizontal metrics\" of this glyph. See `HMetrics` for more detail.",23,[[["self"]],["hmetrics"]]],[11,"shape","","Produces a list of the contours that make up the shape of this glyph. Each contour consists of a sequence of segments. Each segment is either a straight `Line` or a `Curve`.",23,[[["self"]],["option",["vec"]]]],[11,"exact_bounding_box","","The bounding box of the shape of this glyph, not to be confused with `pixel_bounding_box`, the conservative pixel-boundary bounding box. The coordinates are relative to the glyph's origin.",23,[[["self"]],["option",["rect"]]]],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",23,[[["self"]],["scaledglyph"]]],[11,"id","","The glyph identifier for this glyph.",24,[[["self"]],["glyphid"]]],[11,"font","","The font to which this glyph belongs. If the glyph is a standalone glyph that owns its resources, it no longer has a reference to the font which it was created from (using `standalone()`). In which case, `None` is returned.",24,[[["self"]],["option",["font"]]]],[11,"unpositioned","","A reference to this glyph without positioning",24,[[["self"]],["scaledglyph"]]],[11,"into_unpositioned","","Removes the positioning from this glyph",24,[[["self"]],["scaledglyph"]]],[11,"pixel_bounding_box","","The conservative pixel-boundary bounding box for this glyph. This is the smallest rectangle aligned to pixel boundaries that encloses the shape of this glyph at this position. Note that the origin of the glyph, at pixel-space coordinates (0, 0), is at the top left of the bounding box.",24,[[["self"]],["option",["rect"]]]],[11,"shape","","Similar to `ScaledGlyph::shape()`, but with the position of the glyph taken into account.",24,[[["self"]],["option",["vec"]]]],[11,"scale","","",24,[[["self"]],["scale"]]],[11,"position","","",24,[[["self"]],["point",["f32"]]]],[11,"draw","","Rasterises this glyph. For each pixel in the rect given by `pixel_bounding_box()`, `o` is called:",24,[[["self"],["o"]]]],[11,"standalone","","Constructs a glyph that owns its data from this glyph. This is similar to `Glyph::standalone`. See that function for more details.",24,[[["self"]],["positionedglyph"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",14,[[["self"]],["str"]]]],"paths":[[3,"Curve"],[3,"Line"],[3,"Point"],[3,"Rect"],[3,"Vector"],[3,"Codepoint"],[3,"GlyphId"],[3,"SharedGlyphData"],[3,"HMetrics"],[3,"VMetrics"],[3,"Scale"],[3,"Contour"],[4,"SharedBytes"],[4,"Segment"],[4,"Error"],[4,"CacheReadErr"],[4,"CacheWriteErr"],[3,"CacheBuilder"],[3,"Cache"],[8,"IntoGlyphId"],[3,"FontCollection"],[3,"Font"],[3,"Glyph"],[3,"ScaledGlyph"],[3,"PositionedGlyph"],[3,"IntoFontsIter"],[3,"GlyphIter"],[3,"LayoutIter"]]};
searchIndex["ryu"]={"doc":"Pure Rust implementation of Ryū, an algorithm to quickly convert floating point numbers to decimal strings.","items":[[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",N,N],[11,"clone","","",0,[[["self"]],["buffer"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["self"]]],[11,"format","","Print a floating point number into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["f"]],["str"]]],[11,"default","","",0,[[],["self"]]],[0,"raw","","Unsafe functions that exactly mirror the API of the C implementation of Ryū.",N,N],[5,"d2s_buffered_n","ryu::raw","Print f64 to the given buffer and return number of bytes written.",N,N],[5,"f2s_buffered_n","","Print f32 to the given buffer and return number of bytes written.",N,N],[8,"Float","ryu","A floating point number, f32 or f64, that can be written into a [`ryu::Buffer`][Buffer].",N,N]],"paths":[[3,"Buffer"]]};
searchIndex["safemem"]={"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",N,N],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",N,N],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",N,N]],"paths":[]};
searchIndex["scoped_threadpool"]={"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number of threads spawned at construction.",N,N],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",N,N],[11,"drop","","",0,[[["self"]]]],[11,"new","","Construct a threadpool with the given number of threads. Minimum value is `1`.",0,[[["u32"]],["pool"]]],[11,"scoped","","Borrows the pool and allows executing jobs on other threads during that scope via the argument of the closure.",0,[[["self"],["f"]],["r"]]],[11,"thread_count","","Returns the number of threads inside this pool.",0,[[["self"]],["u32"]]],[11,"execute","","Execute a job on the threadpool.",1,[[["self"],["f"]]]],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,[[["self"]]]],[11,"drop","","",1,[[["self"]]]]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",N,N],[4,"Always","","Always run on scope exit.",N,N],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",N,[[["t"],["f"]],["scopeguard",["always"]]]],[8,"Strategy","","",N,N],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,[[],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"should_run","","",1,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,[[["t"],["f"]],["scopeguard"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",N,N],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",N,N]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["seahash"]={"doc":"SeaHash: A blazingly fast, portable hash function with proven statistical guarantees.","items":[[3,"State","seahash","A SeaHash state.",N,N],[3,"SeaHasher","","The streaming version of the algorithm.",N,N],[5,"hash","","Hash some buffer.",N,N],[5,"hash_seeded","","Hash some buffer according to a chosen seed.",N,N],[0,"reference","","A slow, but clear reference implementation of SeaHash.",N,N],[5,"hash","seahash::reference","A reference implementation of SeaHash.",N,N],[5,"hash_seeded","","The seeded version of the reference implementation.",N,N],[11,"clone","seahash","",0,[[["self"]],["state"]]],[11,"new","","Create a new state vector with some initial values.",0,[[["u64"],["u64"],["u64"],["u64"]],["state"]]],[11,"hash","","Hash a buffer with some seed.",0,N],[11,"push","","Write another 64-bit integer into the state.",0,[[["self"],["u64"]]]],[11,"finalize","","Finalize the state.",0,[[["self"]],["u64"]]],[11,"default","","",1,[[],["seahasher"]]],[11,"new","","Create a new `SeaHasher` with default state.",1,[[],["seahasher"]]],[11,"with_seeds","","Construct a new `SeaHasher` given some seed.",1,[[["u64"],["u64"],["u64"],["u64"]],["seahasher"]]],[11,"finish","","",1,[[["self"]],["u64"]]],[11,"write","","",1,N],[11,"write_u64","","",1,[[["self"],["u64"]]]],[11,"write_u8","","",1,[[["self"],["u8"]]]],[11,"write_u16","","",1,[[["self"],["u16"]]]],[11,"write_u32","","",1,[[["self"],["u32"]]]],[11,"write_usize","","",1,[[["self"],["usize"]]]],[11,"write_i64","","",1,[[["self"],["i64"]]]],[11,"write_i8","","",1,[[["self"],["i8"]]]],[11,"write_i16","","",1,[[["self"],["i16"]]]],[11,"write_i32","","",1,[[["self"],["i32"]]]],[11,"write_isize","","",1,[[["self"],["isize"]]]]],"paths":[[3,"State"],[3,"SeaHasher"]]};
searchIndex["semver"]={"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",N,N],[12,"major","","The major version, to be incremented on incompatible changes.",0,N],[12,"minor","","The minor version, to be incremented when functionality is added in a backwards-compatible manner.",0,N],[12,"patch","","The patch version, to be incremented when backwards-compatible bug fixes are made.",0,N],[12,"pre","","The pre-release version identifier, if one exists.",0,N],[12,"build","","The build metadata, ignored when determining version precedence.",0,N],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version numbers. Matching operations can then be done with the `VersionReq` against a particular version to see if it satisfies some or all of the constraints.",N,N],[4,"Identifier","","An identifier in the pre-release or build metadata.",N,N],[13,"Numeric","","An identifier that's solely numbers.",1,N],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,N],[4,"ParseError","","A `ParseError` is returned as the `Err` side of a `Result` when a version is attempted to be parsed.",N,N],[13,"NonAsciiIdentifier","","All identifiers must be ASCII.",2,N],[13,"IncorrectParse","","The version was mis-parsed.",2,N],[13,"GenericFailure","","Any other failure.",2,N],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each enumeration is one of the possible errors that can occur.",N,N],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,N],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,N],[13,"InvalidSigil","","The sigil you have written is not correct.",3,N],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,N],[13,"MajorVersionRequired","","At least a major version is required.",3,N],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,N],[11,"clone","","",1,[[["self"]],["identifier"]]],[11,"eq","","",1,[[["self"],["identifier"]],["bool"]]],[11,"ne","","",1,[[["self"],["identifier"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["identifier"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["identifier"]],["bool"]]],[11,"le","","",1,[[["self"],["identifier"]],["bool"]]],[11,"gt","","",1,[[["self"],["identifier"]],["bool"]]],[11,"ge","","",1,[[["self"],["identifier"]],["bool"]]],[11,"cmp","","",1,[[["self"],["identifier"]],["ordering"]]],[11,"hash","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["version"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",2,[[["self"],["parseerror"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"le","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"gt","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ge","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"parse","","Parse a string into a semver object.",0,[[["str"]],["result",["version","parseerror"]]]],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,[[["self"]]]],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,[[["self"]]]],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["version"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["version"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["version"]],["ordering"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"ne","","",4,[[["self"],["versionreq"]],["bool"]]],[11,"clone","","",4,[[["self"]],["versionreq"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["reqparseerror"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["reqparseerror"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other words, any version will match against it.",4,[[],["versionreq"]]],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It turns a string like `\"^1.2.3\"` and turns it into a `VersionReq` that matches that particular constraint.",4,[[["str"]],["result",["versionreq","reqparseerror"]]]],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,[[["version"]],["versionreq"]]],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,[[["self"],["version"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Version"],[4,"Identifier"],[4,"ParseError"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"from_str","serde_json","",2,[[["str"]],["result"]]],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option",["result"]]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",5,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,[[["self"]],["bool"]]],[11,"clone","","",4,[[["self"]],["category"]]],[11,"eq","","",4,[[["self"],["category"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"invalid_type","","",5,[[["unexpected"],["expected"]],["self"]]],[11,"custom","","",5,[[["t"]],["error"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",6,N],[13,"Occupied","","An occupied Entry.",6,N],[11,"new","","Makes a new empty Map.",7,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",7,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",7,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",7,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",7,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",7,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",7,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,[[["self"]],["valuesmut"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"index","","",7,[[["self"],["q"]],["value"]]],[11,"index_mut","","",7,[[["self"],["q"]],["value"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"from_iter","","",7,[[["t"]],["self"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"key","","Returns a reference to this entry's key.",6,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",9,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,[[["self"]],["value"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"into_iter","","",7,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",16,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,N],[13,"Solidus","","An escaped solidus `/`",16,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",17,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",17,[[["self"],["w"]],["result"]]],[11,"new","","Creates a new JSON serializer.",18,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",18,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,[[["self"]],["w"]]],[11,"clone","","",19,[[["self"]],["compactformatter"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["prettyformatter"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,N],[11,"default","","",20,[[],["self"]]],[11,"begin_array","","",20,[[["self"],["w"]],["result"]]],[11,"end_array","","",20,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object","","",20,[[["self"],["w"]],["result"]]],[11,"end_object","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",20,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",20,[[["self"],["w"]],["result"]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"clone","","",0,[[["self"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"clone","serde_json","",2,[[["self"]],["number"]]],[11,"eq","","",2,[[["self"],["number"]],["bool"]]],[11,"ne","","",2,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,[[["f64"]],["option",["number"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,[[["r"]],["self"]]],[11,"next","","",21,[[["self"]],["result",["option"]]]],[11,"peek","","",21,[[["self"]],["result",["option"]]]],[11,"discard","","",21,[[["self"]]]],[11,"position","","",21,[[["self"]],["position"]]],[11,"peek_position","","",21,[[["self"]],["position"]]],[11,"byte_offset","","",21,[[["self"]],["usize"]]],[11,"parse_str","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",21,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,N],[11,"next","","",22,[[["self"]],["result",["option"]]]],[11,"peek","","",22,[[["self"]],["result",["option"]]]],[11,"discard","","",22,[[["self"]]]],[11,"position","","",22,[[["self"]],["position"]]],[11,"peek_position","","",22,[[["self"]],["position"]]],[11,"byte_offset","","",22,[[["self"]],["usize"]]],[11,"parse_str","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",22,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,[[["str"]],["self"]]],[11,"next","","",23,[[["self"]],["result",["option"]]]],[11,"peek","","",23,[[["self"]],["result",["option"]]]],[11,"discard","","",23,[[["self"]]]],[11,"position","","",23,[[["self"]],["position"]]],[11,"peek_position","","",23,[[["self"]],["position"]]],[11,"byte_offset","","",23,[[["self"]],["usize"]]],[11,"parse_str","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",23,[[["self"]],["result"]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["shared_library"]={"doc":"","items":[[4,"LoadingError","shared_library","Error that can happen while loading the shared library.",N,N],[13,"LibraryNotFound","","",0,N],[12,"descr","shared_library::LoadingError","",0,N],[13,"SymbolNotFound","shared_library","One of the symbols could not be found in the library.",0,N],[12,"symbol","shared_library::LoadingError","The symbol.",0,N],[0,"dynamic_library","shared_library","Dynamic library facilities.",N,N],[3,"DynamicLibrary","shared_library::dynamic_library","",N,N],[4,"SpecialHandles","","Special handles to be used with the `symbol_special` function. These are  provided by a GNU only extension and are not included as part of the POSIX  standard. ",N,N],[13,"Next","","",1,N],[13,"Default","","",1,N],[11,"drop","","",2,[[["self"]]]],[11,"open","","Lazily loads the dynamic library named `filename` into memory and  then returns an opaque \"handle\" for that dynamic library.",2,[[["option",["path"]]],["result",["string"]]]],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",2,[[["path"]]]],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an environment variable for this platforms dylib search path.",2,N],[11,"envvar","","Returns the environment variable for this process's dynamic library search path",2,[[],["str"]]],[11,"search_path","","Returns the current search path for dynamic libraries being used by this process",2,[[],["vec",["pathbuf"]]]],[11,"symbol","","Returns the address of where symbol `symbol` was loaded into memory.",2,[[["self"],["str"]],["result",["string"]]]],[11,"symbol_special","","Returns the address of the first occurance of symbol `symbol` using the  default library search order if you use `SpecialHandles::Default`.",2,[[["specialhandles"],["str"]],["result",["string"]]]],[11,"fmt","shared_library","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["loadingerror"]]],[14,"shared_library","","",N,N]],"paths":[[4,"LoadingError"],[4,"SpecialHandles"],[3,"DynamicLibrary"]]};
searchIndex["shred"]={"doc":"Shared resource dispatcher","items":[[3,"AsyncDispatcher","shred","Like, `Dispatcher` but works asynchronously.",N,N],[3,"Dispatcher","","The dispatcher struct, allowing systems to be executed in parallel.",N,N],[3,"DispatcherBuilder","","Builder for the [`Dispatcher`].",N,N],[3,"Par","","Runs two tasks in parallel. These two tasks are called `head` and `tail` in the following documentation.",N,N],[3,"ParSeq","","A dispatcher intended to be used with `Par` and `Seq`  structures.",N,N],[3,"Seq","","Runs two tasks sequentially. These two tasks are called `head` and `tail` in the following documentation.",N,N],[3,"MetaIter","","An iterator for the `MetaTable`.",N,N],[3,"MetaIterMut","","A mutable iterator for the `MetaTable`.",N,N],[3,"MetaTable","","The `MetaTable` which allows to store object-safe trait implementations for resources.",N,N],[3,"DefaultProvider","","A `SetupHandler` that simply uses the default implementation.",N,N],[3,"Entry","","An entry to a resource of the `Resources` struct. This is similar to the Entry API found in the standard library.",N,N],[3,"Fetch","","Allows to fetch a resource in a system immutably.",N,N],[3,"FetchMut","","Allows to fetch a resource in a system mutably.",N,N],[3,"PanicHandler","","A setup handler that simply does nothing and thus will cause a panic on fetching. The panic will provide the type name if the `nightly` feature of shred is enabled.",N,N],[3,"Read","","Allows to fetch a resource in a system immutably.",N,N],[3,"ResourceId","","The id of a [`Resource`], which is a tuple struct with a type id and an additional resource id (represented with a `usize`).",N,N],[12,"0","","",0,N],[3,"Resources","","A resource container, which provides methods to access to the contained resources.",N,N],[3,"Write","","Allows to fetch a resource in a system mutably.",N,N],[3,"StaticAccessor","","The static accessor that is used for `SystemData`.",N,N],[4,"AccessorCow","","Either an `Accessor` of the system `T` or a reference to it.",N,N],[13,"Ref","","A reference to an accessor.",1,N],[13,"Owned","","An owned accessor.",1,N],[4,"RunningTime","","",N,N],[13,"VeryShort","","",2,N],[13,"Short","","",2,N],[13,"Average","","",2,N],[13,"Long","","",2,N],[13,"VeryLong","","",2,N],[0,"cell","","Helper module for some internals, most users don't need to interact with it.",N,N],[3,"InvalidBorrow","shred::cell","Marker struct for an invalid borrow error",N,N],[3,"Ref","","An immutable reference to data in a `TrustCell`.",N,N],[3,"RefMut","","A mutable reference to data in a `TrustCell`.",N,N],[3,"TrustCell","","A custom cell container that is a `RefCell` with thread-safety.",N,N],[11,"clone","","",3,[[["self"]],["invalidborrow"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["invalidborrow"]],["bool"]]],[11,"cmp","","",3,[[["self"],["invalidborrow"]],["ordering"]]],[11,"partial_cmp","","",3,[[["self"],["invalidborrow"]],["option",["ordering"]]]],[11,"hash","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["formaterror"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"drop","","",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"deref_mut","","",5,[[["self"]],["t"]]],[11,"drop","","",5,[[["self"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new cell, similar to `RefCell::new`",6,[[["t"]],["self"]]],[11,"borrow","","Get an immutable reference to the inner data.",6,[[["self"]],["ref"]]],[11,"try_borrow","","Get an immutable reference to the inner data.",6,[[["self"]],["result",["ref","invalidborrow"]]]],[11,"borrow_mut","","Get a mutable reference to the inner data.",6,[[["self"]],["refmut"]]],[11,"try_borrow_mut","","Get a mutable reference to the inner data.",6,[[["self"]],["result",["refmut","invalidborrow"]]]],[11,"get_mut","","Gets exclusive access to the inner value, bypassing the Cell.",6,[[["self"]],["t"]]],[11,"default","","",6,[[],["self"]]],[11,"dispatch","shred","Dispatches the systems asynchronously. Does not execute thread local systems.",7,[[["self"]]]],[11,"wait","","Waits for all the asynchronously dispatched systems to finish and executes thread local systems (if there are any).",7,[[["self"]]]],[11,"wait_without_tl","","Waits for all the asynchronously dispatched systems to finish without executing thread local systems.",7,[[["self"]]]],[11,"running","","Checks if any of the asynchronously dispatched systems are running.",7,[[["self"]],["bool"]]],[11,"res","","Returns the resources.",7,[[["self"]],["r"]]],[11,"mut_res","","Returns the resources mutable.",7,[[["self"]],["r"]]],[11,"default","","",8,[[],["dispatcherbuilder"]]],[11,"new","","Creates a new `DispatcherBuilder` by using the `Default` implementation.",8,[[],["self"]]],[11,"with","","Adds a new system with a given name and a list of dependencies. Please note that the dependency should be added before you add the depending system.",8,N],[11,"add","","Adds a new system with a given name and a list of dependencies. Please note that the dependency should be added before you add the depending system.",8,N],[11,"with_thread_local","","Adds a new thread local system.",8,[[["self"],["t"]],["self"]]],[11,"add_thread_local","","Adds a new thread local system.",8,[[["self"],["t"]]]],[11,"with_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",8,[[["self"]],["self"]]],[11,"add_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",8,[[["self"]]]],[11,"with_pool","","Attach a rayon thread pool to the builder and use that instead of creating one.",8,[[["self"],["arc",["threadpool"]]],["self"]]],[11,"add_pool","","Attach a rayon thread pool to the builder and use that instead of creating one.",8,[[["self"],["arc",["threadpool"]]]]],[11,"print_par_seq","","Prints the equivalent system graph that can be easily used to get the graph using the `seq!` and `par!` macros. This is only recommended for advanced users.",8,[[["self"]]]],[11,"build","","Builds the `Dispatcher`.",8,[[["self"]],["dispatcher"]]],[11,"build_async","","Builds an async dispatcher.",8,[[["self"],["r"]],["asyncdispatcher"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"setup","","Sets up all the systems which means they are gonna add default values for the resources they need.",9,[[["self"],["resources"]]]],[11,"dispatch","","Dispatch all the systems with given resources and context and then run thread local systems.",9,[[["self"],["resources"]]]],[11,"dispatch_par","","Dispatches the systems (except thread local systems) in parallel given the resources to operate on.",9,[[["self"],["resources"]]]],[11,"dispatch_seq","","Dispatches the systems (except thread local systems) sequentially.",9,[[["self"],["resources"]]]],[11,"dispatch_thread_local","","Dispatch only thread local systems sequentially.",9,[[["self"],["resources"]]]],[11,"run_now","","",9,[[["self"],["resources"]]]],[11,"setup","","",9,[[["self"],["resources"]]]],[11,"new","","Creates a new `Par` struct, with the tail being a no-op.",10,[[["h"]],["self"]]],[11,"with","","Adds `sys` as the second job and returns a new `Par` struct with the previous struct as head and a no-op tail.",10,[[["self"],["t"]],["par",["par","nil"]]]],[11,"new","","Creates a new `ParSeq` dispatcher. `run` is usually created by using the `par!` / `seq!` macros.",11,[[["t"],["p"]],["self"]]],[11,"setup","","Sets up `res` for `dispatch`ing. This will add default values for required resources by calling `System::setup`.",11,[[["self"],["resources"]]]],[11,"dispatch","","Dispatches the systems using `res`. This doesn't call any virtual functions.",11,[[["self"],["resources"]]]],[11,"run_now","","",11,[[["self"],["resources"]]]],[11,"setup","","",11,[[["self"],["resources"]]]],[11,"setup","","",10,[[["self"],["resources"]]]],[11,"run","","",10,[[["self"],["resources"],["threadpool"]]]],[11,"reads","","",10,[[["self"],["vec"]]]],[11,"writes","","",10,[[["self"],["vec"]]]],[11,"new","","Creates a new `Seq` struct, with the tail being a no-op.",12,[[["h"]],["self"]]],[11,"with","","Adds `sys` as the second job and returns a new `Seq` struct with the previous struct as head and a no-op tail.",12,[[["self"],["t"]],["seq",["seq","nil"]]]],[11,"setup","","",12,[[["self"],["resources"]]]],[11,"run","","",12,[[["self"],["resources"],["threadpool"]]]],[11,"reads","","",12,[[["self"],["vec"]]]],[11,"writes","","",12,[[["self"],["vec"]]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"new","","Creates a new `MetaTable`.",15,[[],["self"]]],[11,"register","","Registers a resource `R` that implements the trait `T`. This just needs some instance of type `R` to retrieve the vtable. It doesn't have to be the same object you're calling `get` with later.",15,[[["self"],["r"]]]],[11,"get","","Tries to convert `res` to a trait object of type `&T`. If `res` doesn't have an implementation for `T` (or it wasn't registered), this will return `None`.",15,[[["self"],["resource"]],["option"]]],[11,"get_mut","","Tries to convert `res` to a trait object of type `&mut T`. If `res` doesn't have an implementation for `T` (or it wasn't registered), this will return `None`.",15,[[["self"],["resource"]],["option"]]],[11,"iter","","Iterates all resources that implement `T` and were registered.",15,[[["self"],["resources"]],["metaiter"]]],[11,"iter_mut","","Iterates all resources that implement `T` and were registered mutably.",15,[[["self"],["resources"]],["metaitermut"]]],[11,"default","","",15,[[],["self"]]],[11,"deref","","",16,[[["self"]],["t"]]],[11,"from","","",16,[[["fetch"]],["self"]]],[11,"setup","","",16,[[["resources"]]]],[11,"fetch","","",16,[[["resources"]],["self"]]],[11,"reads","","",16,[[],["vec",["resourceid"]]]],[11,"writes","","",16,[[],["vec",["resourceid"]]]],[11,"deref","","",17,[[["self"]],["t"]]],[11,"deref_mut","","",17,[[["self"]],["t"]]],[11,"from","","",17,[[["fetchmut"]],["self"]]],[11,"setup","","",17,[[["resources"]]]],[11,"fetch","","",17,[[["resources"]],["self"]]],[11,"reads","","",17,[[],["vec",["resourceid"]]]],[11,"writes","","",17,[[],["vec",["resourceid"]]]],[11,"or_insert","","Returns this entry's value, inserts and returns `v` otherwise.",18,[[["self"],["t"]],["fetchmut"]]],[11,"or_insert_with","","Returns this entry's value, inserts and returns the return value of `f` otherwise.",18,[[["self"],["f"]],["fetchmut"]]],[11,"setup","","",19,[[["resources"]]]],[11,"setup","","",20,[[["resources"]]]],[11,"deref","","",21,[[["self"]],["t"]]],[11,"deref","","",22,[[["self"]],["t"]]],[11,"deref_mut","","",22,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["resourceid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"cmp","","",0,[[["self"],["resourceid"]],["ordering"]]],[11,"eq","","",0,[[["self"],["resourceid"]],["bool"]]],[11,"ne","","",0,[[["self"],["resourceid"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["resourceid"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["resourceid"]],["bool"]]],[11,"le","","",0,[[["self"],["resourceid"]],["bool"]]],[11,"gt","","",0,[[["self"],["resourceid"]],["bool"]]],[11,"ge","","",0,[[["self"],["resourceid"]],["bool"]]],[11,"new","","Creates a new resource id from a given type.",0,[[],["self"]]],[11,"default","","",23,[[],["resources"]]],[11,"new","","Creates a new, empty resource container.",23,[[],["self"]]],[11,"insert","","Inserts a resource into this container. If the resource existed before, it will be overwritten.",23,[[["self"],["r"]]]],[11,"has_value","","Returns true if the specified resource type `R` exists in `self`.",23,[[["self"]],["bool"]]],[11,"has_value_raw","","Returns true if the specified resource type exists in `self`.",23,[[["self"],["resourceid"]],["bool"]]],[11,"entry","","Returns an entry for the resource with type `R`.",23,[[["self"]],["entry"]]],[11,"fetch","","Fetches the resource with the specified type `T` or panics if it doesn't exist.",23,[[["self"]],["fetch"]]],[11,"try_fetch","","Like `fetch`, but returns an `Option` instead of inserting a default value in case the resource does not exist.",23,[[["self"]],["option",["fetch"]]]],[11,"fetch_mut","","Fetches the resource with the specified type `T` mutably.",23,[[["self"]],["fetchmut"]]],[11,"try_fetch_mut","","Like `fetch_mut`, but returns an `Option` instead of inserting a default value in case the resource does not exist.",23,[[["self"]],["option",["fetchmut"]]]],[11,"try_fetch_internal","","Internal function for fetching resources, should only be used if you know what you're doing.",23,[[["self"],["typeid"]],["option",["trustcell"]]]],[11,"get_mut","","Retrieves a resource without fetching, which is cheaper, but only available with `&mut self`.",23,[[["self"]],["option"]]],[11,"get_mut_raw","","Retrieves a resource without fetching, which is cheaper, but only available with `&mut self`.",23,[[["self"],["typeid"]],["option",["resource"]]]],[11,"deref","","",1,N],[11,"clone","","",2,[[["self"]],["runningtime"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",24,[[],["staticaccessor"]]],[11,"try_new","","",24,[[],["option"]]],[11,"reads","","",24,[[["self"]],["vec",["resourceid"]]]],[11,"writes","","",24,[[["self"]],["vec",["resourceid"]]]],[6,"ReadExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Read` or `Option<Read>` is therefore recommended.",N,N],[6,"WriteExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Write` or `Option<Write>` is therefore recommended.",N,N],[8,"RunWithPool","","Similar to `RunNow` except additionally taking in a rayon::ThreadPool for parallelism.",N,N],[10,"setup","","Sets up `Resources` for a later call to `run`.",25,[[["self"],["resources"]]]],[10,"run","","Runs the system/group of systems. Possibly in parallel depending on how the structure is set up.",25,[[["self"],["resources"],["threadpool"]]]],[10,"reads","","Accumulates the necessary read/shared resources from the systems in this group.",25,[[["self"],["vec"]]]],[10,"writes","","Accumulates the necessary write/exclusive resources from the systems in this group.",25,[[["self"],["vec"]]]],[8,"CastFrom","","Helper trait for the `MetaTable`. This trait is required to be implemented for a trait to be compatible with the meta table.",N,N],[10,"cast","","Casts an immutable `T` reference to a trait object.",26,[[["t"]],["self"]]],[10,"cast_mut","","Casts a mutable `T` reference to a trait object.",26,[[["t"]],["self"]]],[8,"Resource","","A resource defines a set of data which can only be accessed according to Rust's typical borrowing model (one writer xor multiple readers).",N,N],[8,"SetupHandler","","A setup handler performing the fetching of `T`.",N,N],[10,"setup","","Sets up `Resources` for fetching `T`.",27,[[["resources"]]]],[8,"Accessor","","A trait for accessing read/write multiple resources from a system. This can be used to create dynamic systems that don't specify what they fetch at compile-time.",N,N],[10,"try_new","","Tries to create a new instance of this type. This one returns `Some` in case there is a default, otherwise the system needs to override `System::accessor`.",28,[[],["option"]]],[10,"reads","","A list of [`ResourceId`]s the bundle needs read access to in order to build the target resource bundle.",28,[[["self"]],["vec",["resourceid"]]]],[10,"writes","","A list of [`ResourceId`]s the bundle needs write access to in order to build the target resource bundle.",28,[[["self"]],["vec",["resourceid"]]]],[8,"RunNow","","Trait for fetching data and running systems. Automatically implemented for systems.",N,N],[10,"run_now","","Runs the system now.",29,[[["self"],["resources"]]]],[10,"setup","","Sets up `Resources` for a later call to `run_now`.",29,[[["self"],["resources"]]]],[8,"SystemData","","A static system data that can specify its dependencies at statically (at compile-time). Most system data is a `SystemData`, the `DynamicSystemData` type is only needed for very special setups.",N,N],[10,"setup","","Sets up the system data for fetching it from the `Resources`.",30,[[["resources"]]]],[10,"fetch","","Fetches the system data from `Resources`. Note that this is only specified for one concrete lifetime `'a`, you need to implement the `SystemData` trait for every possible lifetime.",30,[[["resources"]],["self"]]],[10,"reads","","Returns all read dependencies as fetched from `Self::fetch`.",30,[[],["vec",["resourceid"]]]],[10,"writes","","Returns all write dependencies as fetched from `Self::fetch`.",30,[[],["vec",["resourceid"]]]],[8,"System","","A `System`, executed with a set of required [`Resource`]s.",N,N],[16,"SystemData","","The resource bundle required to execute this system.",31,N],[10,"run","","Executes the system with the required system data.",31,N],[11,"running_time","","Returns a hint how long the system needs for running. This is used to optimize the way they're executed (might allow more parallelization).",31,[[["self"]],["runningtime"]]],[11,"accessor","","Return the accessor from the [`SystemData`].",31,[[["self"]],["accessorcow"]]],[11,"setup","","Sets up the `Resources` using `Self::SystemData::setup`.",31,[[["self"],["resources"]]]],[8,"DynamicSystemData","","A struct implementing system data indicates that it bundles some resources which are required for the execution.",N,N],[16,"Accessor","","The accessor of the `SystemData`, which specifies the read and write dependencies and does the fetching.",32,N],[10,"setup","","Sets up `Resources` for fetching this system data.",32,N],[10,"fetch","","Creates a new resource bundle by fetching the required resources from the [`Resources`] struct.",32,N],[14,"par","","The `par!` macro may be used to easily create a structure which runs things in parallel.",N,N],[14,"seq","","The `seq!` macro may be used to easily create a structure which runs things sequentially.",N,N],[11,"is","","Returns true if the boxed type is the same as `T`",33,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",33,[[["self"]],["option"]]],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",33,[[["self"]],["t"]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",33,[[["self"]],["option"]]],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",33,[[["self"]],["t"]]],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",33,[[["box"]],["result",["box","box"]]]],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",33,[[["box"]],["box"]]],[11,"running_time","","Returns a hint how long the system needs for running. This is used to optimize the way they're executed (might allow more parallelization).",31,[[["self"]],["runningtime"]]],[11,"accessor","","Return the accessor from the [`SystemData`].",31,[[["self"]],["accessorcow"]]],[11,"setup","","Sets up the `Resources` using `Self::SystemData::setup`.",31,[[["self"],["resources"]]]]],"paths":[[3,"ResourceId"],[4,"AccessorCow"],[4,"RunningTime"],[3,"InvalidBorrow"],[3,"Ref"],[3,"RefMut"],[3,"TrustCell"],[3,"AsyncDispatcher"],[3,"DispatcherBuilder"],[3,"Dispatcher"],[3,"Par"],[3,"ParSeq"],[3,"Seq"],[3,"MetaIter"],[3,"MetaIterMut"],[3,"MetaTable"],[3,"Read"],[3,"Write"],[3,"Entry"],[3,"DefaultProvider"],[3,"PanicHandler"],[3,"Fetch"],[3,"FetchMut"],[3,"Resources"],[3,"StaticAccessor"],[8,"RunWithPool"],[8,"CastFrom"],[8,"SetupHandler"],[8,"Accessor"],[8,"RunNow"],[8,"SystemData"],[8,"System"],[8,"DynamicSystemData"],[8,"Resource"]]};
searchIndex["shred_derive"]={"doc":"","items":[[5,"system_data","shred_derive","Used to `#[derive]` the trait `SystemData`.",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["shrev"]={"doc":"Event channel, pull based, that use a ringbuffer for internal storage, to make it possible to do immutable reads.","items":[[3,"ReaderId","shrev","The reader id is used by readers to tell the storage where the last read ended.",N,N],[3,"EventIterator","","Iterator over a slice of data in `RingBufferStorage`.",N,N],[3,"EventChannel","","Event channel",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"drop","","",0,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"len","","",1,[[["self"]],["usize"]]],[8,"Event","","Marker trait for data to use with the EventChannel.",N,N],[11,"default","","",2,[[],["self"]]],[11,"new","","Create a new EventChannel with a default size of 50",2,[[],["self"]]],[11,"with_capacity","","Create a new EventChannel with the given starting capacity.",2,[[["usize"]],["self"]]],[11,"register_reader","","Register a reader.",2,[[["self"]],["readerid"]]],[11,"slice_write","","Write a slice of events into storage",2,N],[11,"iter_write","","Write an iterator of events into storage",2,[[["self"],["i"]]]],[11,"drain_vec_write","","Drain a vector of events into storage.",2,[[["self"],["vec"]]]],[11,"single_write","","Write a single event into storage.",2,[[["self"],["e"]]]],[11,"read","","Read any events that have been written to storage since the readers last read.",2,[[["self"],["readerid"]],["eventiterator"]]]],"paths":[[3,"ReaderId"],[3,"EventIterator"],[3,"EventChannel"]]};
searchIndex["slice_deque"]={"doc":"A double-ended queue that `Deref`s into a slice.","items":[[3,"Buffer","slice_deque","Mirrored memory buffer of length `len`.",N,N],[3,"SliceDeque","","A double-ended queue that derefs into a slice.",N,N],[3,"Drain","","A draining iterator for `SliceDeque<T>`.",N,N],[3,"IntoIter","","An iterator that moves out of a deque.",N,N],[3,"Splice","","A splicing iterator for `SliceDeque`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on `SliceDeque`.",N,N],[11,"len","","Number of elements in the buffer.",0,[[["self"]],["usize"]]],[11,"is_empty","","Is the buffer empty?",0,[[["self"]],["bool"]]],[11,"ptr","","Pointer to the first element in the buffer.",0,N],[11,"as_slice","","Interprets contents as a slice.",0,N],[11,"as_mut_slice","","Interprets contents as a mut slice.",0,N],[11,"get","","Interprets content as a slice and access the `i`-th element.",0,[[["self"],["usize"]],["t"]]],[11,"get_mut","","Interprets content as a mut slice and access the `i`-th element.",0,[[["self"],["usize"]],["t"]]],[11,"new","","Creates a new empty `Buffer`.",0,[[],["self"]]],[11,"from_raw_parts","","Creates a new empty `Buffer` from a `ptr` and a `len`.",0,N],[11,"uninitialized","","Create a mirrored buffer containing `len` `T`s where the first half of the buffer is mirrored into the second half.",0,[[["usize"]],["result"]]],[11,"drop","","",0,[[["self"]]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"default","","",0,[[],["self"]]],[11,"new","","Creates a new empty deque.",1,[[],["self"]]],[11,"from_raw_parts","","Creates a SliceDeque from its raw components.",1,N],[11,"with_capacity","","Create an empty deque with capacity to hold `n` elements.",1,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements that the deque can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"len","","Number of elements in the ring buffer.",1,[[["self"]],["usize"]]],[11,"is_full","","Is the ring buffer full ?",1,[[["self"]],["bool"]]],[11,"as_slice","","Extracts a slice containing the entire deque.",1,N],[11,"as_mut_slice","","Extracts a mutable slice containing the entire deque.",1,N],[11,"as_slices","","Returns a pair of slices, where the first slice contains the contents of the deque and the second one is empty.",1,N],[11,"as_mut_slices","","Returns a pair of slices, where the first slice contains the contents of the deque and the second one is empty.",1,N],[11,"tail_head_slice","","Returns the slice of uninitialized memory between the `tail` and the `head`.",1,N],[11,"reserve","","Reserves capacity for inserting at least `additional` elements without reallocating. Does nothing if the capacity is already sufficient.",1,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `SliceDeq<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",1,[[["self"],["usize"]]]],[11,"move_head_unchecked","","Moves the deque head by `x`.",1,[[["self"],["isize"]]]],[11,"move_head","","Moves the deque head by `x`.",1,[[["self"],["isize"]]]],[11,"move_tail_unchecked","","Moves the deque tail by `x`.",1,[[["self"],["isize"]]]],[11,"move_tail","","Moves the deque tail by `x`.",1,[[["self"],["isize"]]]],[11,"steal_from_slice","","Steal the elements from the slice `s`. You should `mem::forget` the slice afterwards.",1,N],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",1,[[["self"],["self"]]]],[11,"front","","Provides a reference to the first element, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"front_mut","","Provides a mutable reference to the first element, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"back","","Provides a reference to the last element, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"back_mut","","Provides a mutable reference to the last element, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"push_front","","Prepends `value` to the deque.",1,[[["self"],["t"]]]],[11,"push_back","","Appends `value` to the deque.",1,[[["self"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element from the deque and returns it, or `None` if it is empty.",1,[[["self"]],["option"]]],[11,"shrink_to_fit","","Shrinks the capacity of the deque as much as possible.",1,[[["self"]]]],[11,"truncate_back","","Shortens the deque by removing excess elements from the back.",1,[[["self"],["usize"]]]],[11,"truncate","","Shortens the deque by removing excess elements from the back.",1,[[["self"],["usize"]]]],[11,"truncate_front","","Shortens the deque by removing excess elements from the front.",1,[[["self"],["usize"]]]],[11,"clear","","Removes all values from the deque.",1,[[["self"]]]],[11,"swap_remove_back","","Removes the element at `index` and return it in `O(1)` by swapping the last element into its place.",1,[[["self"],["usize"]],["option"]]],[11,"swap_remove_front","","Removes the element at `index` and returns it in `O(1)` by swapping the first element into its place.",1,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an `element` at `index` within the deque, shifting all elements with indices greater than or equal to `index` towards the back.",1,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at position `index` within the deque, shifting all elements after it to the front.",1,[[["self"],["usize"]],["t"]]],[11,"split_off","","Splits the collection into two at the given index.",1,[[["self"],["usize"]],["self"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the deque that resolve to the same key.",1,[[["self"],["f"]]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the deque satisfying a given equality relation.",1,[[["self"],["f"]]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",1,[[["self"],["f"]],["drainfilter"]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `SliceDeque`.",1,N],[11,"resize","","Modifies the `SliceDeque` in-place so that `len()` is equal to `new_len`, either by removing excess elements or by appending clones of `value` to the back.",1,[[["self"],["usize"],["t"]]]],[11,"resize_default","","Resizes the `SliceDeque` in-place so that `len` is equal to `new_len`.",1,[[["self"],["usize"]]]],[11,"dedup","","Removes consecutive repeated elements in the deque.",1,[[["self"]]]],[11,"remove_item","","Removes the first instance of `item` from the deque if the item exists.",1,[[["self"],["t"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",1,[[["self"]]]],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"default","","",1,[[],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone_from","","",1,[[["self"],["self"]]]],[11,"from","","",1,N],[11,"from","","",1,N],[11,"hash","","",1,[[["self"],["h"]]]],[11,"eq","","",1,[[["self"],["slicedeque"]],["bool"]]],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,[[["self"],["vec"]],["bool"]]],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",3,N],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",3,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"count","","",3,[[["self"]],["usize"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"drop","","",3,[[["self"]]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the deque (from start to end). The deque cannot be used after calling this.",1,[[["self"]],["intoiter"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"drop","","",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"drop","","",5,[[["self"]]]],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[14,"sdeq","","Creates a [`SliceDeque`] containing the arguments.",N,N]],"paths":[[3,"Buffer"],[3,"SliceDeque"],[3,"Drain"],[3,"IntoIter"],[3,"Splice"],[3,"DrainFilter"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",N,N],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",N,N],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",2,N],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"drop","","",3,[[["self"]]]],[11,"new","","Construct an empty vector",4,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",4,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length, which must be less or equal to the size of `buf`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",4,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",4,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",4,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",4,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",4,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",4,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,N],[11,"clear","","Remove all elements from the vector.",4,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,[[["self"],["usize"],["i"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,[[["self"]],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.",4,[[["self"]],["result"]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"dedup","","Removes consecutive duplicate elements.",4,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,[[["self"],["f"]]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"write","","",4,N],[11,"write_all","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"serialize","","",4,[[["self"],["s"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"from","","",4,N],[11,"from","","",4,[[["vec"]],["smallvec"]]],[11,"from","","",4,[[["a"]],["smallvec"]]],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"extend_from_slice","","",4,N],[11,"push","","",4,N],[11,"from_iter","","",4,[[["i"]],["smallvec"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["smallvec"]]],[11,"drop","","",4,[[["self"]]]],[11,"clone","","",4,[[["self"]],["smallvec"]]],[11,"eq","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["smallvec"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"into_iter","","",4,N],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",N,N]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["smithay_client_toolkit"]={"doc":"","items":[[3,"Environment","smithay_client_toolkit","A convenience for global management",N,N],[12,"manager","","The underlying GlobalManager wrapping your registry",0,N],[12,"compositor","","The compositor global, used to create surfaces",0,N],[12,"subcompositor","","The subcompositor global, used to create subsurfaces",0,N],[12,"shell","","The shell global, used make your surfaces into windows",0,N],[12,"shm","","The SHM global, to create shared memory buffers",0,N],[12,"data_device_manager","","The data device manager, used to handle drag&drop and selection copy/paste",0,N],[12,"outputs","","A manager for handling the advertized outputs",0,N],[12,"decorations_mgr","","The decoration manager, if the server supports server-side decorations",0,N],[4,"Shell","","Possible shell globals",N,N],[13,"Xdg","","Using xdg_shell protocol, the standart",1,N],[13,"Zxdg","","Old version of xdg_shell, for compatiblity",1,N],[13,"Wl","","Using wl_shell, deprecated, compatibility mode",1,N],[0,"reexports","","Re-exports of some crates, for convenience",N,N],[0,"cursor","smithay_client_toolkit::reexports::client","Cursor utilities",N,N],[5,"is_available","smithay_client_toolkit::reexports::client::cursor","Checks if the wayland-cursor lib is available and can be used",N,[[],["bool"]]],[3,"CursorTheme","","Represents a cursor theme loaded from the system.",N,N],[5,"load_theme","","Attempts to load a cursor theme from given name.",N,[[["option",["str"]],["u32"],["proxy"]],["cursortheme"]]],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",N,N],[3,"CursorImageBuffer","","A buffer containing a cursor image.",N,N],[0,"egl","smithay_client_toolkit::reexports::client","EGL utilities",N,N],[5,"is_available","smithay_client_toolkit::reexports::client::egl","Checks if the wayland-egl lib is available and can be used",N,[[],["bool"]]],[3,"WlEglSurface","","EGL surface",N,N],[0,"commons","smithay_client_toolkit::reexports::client","Re-export of wayland-commons",N,N],[8,"Implementation","smithay_client_toolkit::reexports::client::commons","Trait representing implementations for wayland objects",N,N],[10,"receive","","Receive a message",2,N],[8,"Interface","","The description of a wayland interface",N,N],[16,"Request","","Set of requests associated to this interface",3,N],[16,"Event","","Set of events associated to this interface",3,N],[18,"NAME","","Name of this interface",3,N],[10,"c_interface","","Pointer to the C representation of this interface",3,N],[3,"AnonymousObject","","Anonymous interface",N,N],[8,"MessageGroup","","A group of messages",N,N],[10,"is_destructor","","Whether this message is a destructor",4,[[["self"]],["bool"]]],[10,"from_raw_c","","Construct a message of this group from its C representation",4,N],[10,"as_raw_c_in","","Build a C representation of this message",4,[[["self"],["f"]],["t"]]],[4,"NoMessage","","An empty enum representing a MessageGroup with no messages",N,N],[5,"downcast_impl","","Attempt to downcast a boxed `Implementation` trait object.",N,[[["box",["implementation"]]],["result",["box","box"]]]],[0,"sys","smithay_client_toolkit::reexports::client","C-associated types",N,N],[0,"client","smithay_client_toolkit::reexports::client::sys","Bindings to the client library `libwayland-client.so`",N,N],[4,"wl_proxy","smithay_client_toolkit::reexports::client::sys::client","",N,N],[4,"wl_display","","",N,N],[4,"wl_event_queue","","",N,N],[3,"WaylandClient","","",N,N],[12,"wl_display_connect_to_fd","","",5,N],[12,"wl_display_connect","","",5,N],[12,"wl_display_disconnect","","",5,N],[12,"wl_display_get_fd","","",5,N],[12,"wl_display_roundtrip","","",5,N],[12,"wl_display_read_events","","",5,N],[12,"wl_display_prepare_read","","",5,N],[12,"wl_display_cancel_read","","",5,N],[12,"wl_display_dispatch","","",5,N],[12,"wl_display_dispatch_pending","","",5,N],[12,"wl_display_get_error","","",5,N],[12,"wl_display_get_protocol_error","","",5,N],[12,"wl_display_flush","","",5,N],[12,"wl_event_queue_destroy","","",5,N],[12,"wl_display_create_queue","","",5,N],[12,"wl_display_roundtrip_queue","","",5,N],[12,"wl_display_prepare_read_queue","","",5,N],[12,"wl_display_dispatch_queue","","",5,N],[12,"wl_display_dispatch_queue_pending","","",5,N],[12,"wl_proxy_create","","",5,N],[12,"wl_proxy_destroy","","",5,N],[12,"wl_proxy_add_listener","","",5,N],[12,"wl_proxy_get_listener","","",5,N],[12,"wl_proxy_add_dispatcher","","",5,N],[12,"wl_proxy_marshal_array_constructor","","",5,N],[12,"wl_proxy_marshal_array_constructor_versioned","","",5,N],[12,"wl_proxy_marshal_array","","",5,N],[12,"wl_proxy_set_user_data","","",5,N],[12,"wl_proxy_get_user_data","","",5,N],[12,"wl_proxy_get_id","","",5,N],[12,"wl_proxy_get_class","","",5,N],[12,"wl_proxy_set_queue","","",5,N],[12,"wl_proxy_get_version","","",5,N],[12,"wl_proxy_create_wrapper","","",5,N],[12,"wl_proxy_wrapper_destroy","","",5,N],[12,"wl_log_set_handler_client","","",5,N],[12,"wl_list_init","","",5,N],[12,"wl_list_insert","","",5,N],[12,"wl_list_remove","","",5,N],[12,"wl_list_length","","",5,N],[12,"wl_list_empty","","",5,N],[12,"wl_list_insert_list","","",5,N],[12,"wl_array_init","","",5,N],[12,"wl_array_release","","",5,N],[12,"wl_array_add","","",5,N],[12,"wl_array_copy","","",5,N],[12,"wl_proxy_marshal_constructor","","",5,N],[12,"wl_proxy_marshal_constructor_versioned","","",5,N],[12,"wl_proxy_marshal","","",5,N],[3,"WAYLAND_CLIENT_OPTION","","",N,N],[3,"WAYLAND_CLIENT_HANDLE","","",N,N],[5,"is_lib_available","","",N,[[],["bool"]]],[0,"common","smithay_client_toolkit::reexports::client::sys","Various types and functions that are used by both the client and the server libraries.",N,N],[3,"wl_message","smithay_client_toolkit::reexports::client::sys::common","",N,N],[12,"name","","",6,N],[12,"signature","","",6,N],[12,"types","","",6,N],[3,"wl_interface","","",N,N],[12,"name","","",7,N],[12,"version","","",7,N],[12,"request_count","","",7,N],[12,"requests","","",7,N],[12,"event_count","","",7,N],[12,"events","","",7,N],[3,"wl_list","","",N,N],[12,"prev","","",8,N],[12,"next","","",8,N],[3,"wl_array","","",N,N],[12,"size","","",9,N],[12,"alloc","","",9,N],[12,"data","","",9,N],[6,"wl_fixed_t","","",N,N],[5,"wl_fixed_to_double","","",N,[[["i32"]],["f64"]]],[5,"wl_fixed_from_double","","",N,[[["f64"]],["i32"]]],[5,"wl_fixed_to_int","","",N,[[["i32"]],["i32"]]],[5,"wl_fixed_from_int","","",N,[[["i32"]],["i32"]]],[19,"wl_argument","","",N,N],[12,"i","","",10,N],[12,"u","","",10,N],[12,"f","","",10,N],[12,"s","","",10,N],[12,"o","","",10,N],[12,"n","","",10,N],[12,"a","","",10,N],[12,"h","","",10,N],[6,"wl_dispatcher_func_t","","",N,N],[6,"wl_log_func_t","","",N,N],[0,"protocol_interfaces","smithay_client_toolkit::reexports::client::sys","",N,N],[7,"wl_display_requests","smithay_client_toolkit::reexports::client::sys::protocol_interfaces","",N,N],[7,"wl_display_events","","",N,N],[7,"wl_display_interface","","",N,N],[7,"wl_registry_requests","","",N,N],[7,"wl_registry_events","","",N,N],[7,"wl_registry_interface","","",N,N],[7,"wl_callback_events","","",N,N],[7,"wl_callback_interface","","",N,N],[7,"wl_compositor_requests","","",N,N],[7,"wl_compositor_interface","","",N,N],[7,"wl_shm_pool_requests","","",N,N],[7,"wl_shm_pool_interface","","",N,N],[7,"wl_shm_requests","","",N,N],[7,"wl_shm_events","","",N,N],[7,"wl_shm_interface","","",N,N],[7,"wl_buffer_requests","","",N,N],[7,"wl_buffer_events","","",N,N],[7,"wl_buffer_interface","","",N,N],[7,"wl_data_offer_requests","","",N,N],[7,"wl_data_offer_events","","",N,N],[7,"wl_data_offer_interface","","",N,N],[7,"wl_data_source_requests","","",N,N],[7,"wl_data_source_events","","",N,N],[7,"wl_data_source_interface","","",N,N],[7,"wl_data_device_requests","","",N,N],[7,"wl_data_device_events","","",N,N],[7,"wl_data_device_interface","","",N,N],[7,"wl_data_device_manager_requests","","",N,N],[7,"wl_data_device_manager_interface","","",N,N],[7,"wl_shell_requests","","",N,N],[7,"wl_shell_interface","","",N,N],[7,"wl_shell_surface_requests","","",N,N],[7,"wl_shell_surface_events","","",N,N],[7,"wl_shell_surface_interface","","",N,N],[7,"wl_surface_requests","","",N,N],[7,"wl_surface_events","","",N,N],[7,"wl_surface_interface","","",N,N],[7,"wl_seat_requests","","",N,N],[7,"wl_seat_events","","",N,N],[7,"wl_seat_interface","","",N,N],[7,"wl_pointer_requests","","",N,N],[7,"wl_pointer_events","","",N,N],[7,"wl_pointer_interface","","",N,N],[7,"wl_keyboard_requests","","",N,N],[7,"wl_keyboard_events","","",N,N],[7,"wl_keyboard_interface","","",N,N],[7,"wl_touch_requests","","",N,N],[7,"wl_touch_events","","",N,N],[7,"wl_touch_interface","","",N,N],[7,"wl_output_requests","","",N,N],[7,"wl_output_events","","",N,N],[7,"wl_output_interface","","",N,N],[7,"wl_region_requests","","",N,N],[7,"wl_region_interface","","",N,N],[7,"wl_subcompositor_requests","","",N,N],[7,"wl_subcompositor_interface","","",N,N],[7,"wl_subsurface_requests","","",N,N],[7,"wl_subsurface_interface","","",N,N],[0,"protocol","smithay_client_toolkit::reexports::client","Generated interfaces for the core wayland protocol",N,N],[0,"wl_callback","smithay_client_toolkit::reexports::client::protocol","callback object",N,N],[4,"Request","smithay_client_toolkit::reexports::client::protocol::wl_callback","",N,N],[4,"Event","","",N,N],[13,"Done","","done event",11,N],[12,"callback_data","smithay_client_toolkit::reexports::client::protocol::wl_callback::Event","",11,N],[3,"WlCallback","smithay_client_toolkit::reexports::client::protocol::wl_callback","",N,N],[8,"RequestsTrait","","",N,N],[0,"wl_compositor","smithay_client_toolkit::reexports::client::protocol","the compositor singleton",N,N],[4,"Request","smithay_client_toolkit::reexports::client::protocol::wl_compositor","",N,N],[13,"CreateSurface","","create new surface",12,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_compositor::Request","",12,N],[13,"CreateRegion","smithay_client_toolkit::reexports::client::protocol::wl_compositor","create new region",12,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_compositor::Request","",12,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_compositor","",N,N],[3,"WlCompositor","","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_surface","","create new surface",13,[[["self"]],["result",["newproxy"]]]],[10,"create_region","","create new region",13,[[["self"]],["result",["newproxy"]]]],[0,"wl_data_source","smithay_client_toolkit::reexports::client::protocol","offer to transfer data",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",N,N],[13,"InvalidActionMask","","action mask contains invalid values",14,N],[13,"InvalidSource","","source doesn't accept this request",14,N],[4,"Request","","",N,N],[13,"Offer","","add an offered mime type",15,N],[12,"mime_type","smithay_client_toolkit::reexports::client::protocol::wl_data_source::Request","",15,N],[13,"Destroy","smithay_client_toolkit::reexports::client::protocol::wl_data_source","destroy the data source",15,N],[13,"SetActions","","set the available drag-and-drop actions",15,N],[12,"dnd_actions","smithay_client_toolkit::reexports::client::protocol::wl_data_source::Request","",15,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",N,N],[13,"Target","","a target accepts an offered mime type",16,N],[12,"mime_type","smithay_client_toolkit::reexports::client::protocol::wl_data_source::Event","",16,N],[13,"Send","smithay_client_toolkit::reexports::client::protocol::wl_data_source","send the data",16,N],[12,"mime_type","smithay_client_toolkit::reexports::client::protocol::wl_data_source::Event","",16,N],[12,"fd","","",16,N],[13,"Cancelled","smithay_client_toolkit::reexports::client::protocol::wl_data_source","selection was cancelled",16,N],[13,"DndDropPerformed","","the drag-and-drop operation physically finished",16,N],[13,"DndFinished","","the drag-and-drop operation concluded",16,N],[13,"Action","","notify the selected action",16,N],[12,"dnd_action","smithay_client_toolkit::reexports::client::protocol::wl_data_source::Event","",16,N],[3,"WlDataSource","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",N,N],[8,"RequestsTrait","","",N,N],[10,"offer","","add an offered mime type",17,N],[10,"destroy","","destroy the data source",17,N],[10,"set_actions","","set the available drag-and-drop actions",17,N],[0,"wl_keyboard","smithay_client_toolkit::reexports::client::protocol","keyboard input device",N,N],[4,"KeymapFormat","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","keyboard mapping format",N,N],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",18,N],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",18,N],[4,"KeyState","","physical key state",N,N],[13,"Released","","key is not pressed",19,N],[13,"Pressed","","key is pressed",19,N],[4,"Request","","",N,N],[13,"Release","","release the keyboard object",20,N],[4,"Event","","",N,N],[13,"Keymap","","keyboard mapping",21,N],[12,"format","smithay_client_toolkit::reexports::client::protocol::wl_keyboard::Event","",21,N],[12,"fd","","",21,N],[12,"size","","",21,N],[13,"Enter","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","enter event",21,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_keyboard::Event","",21,N],[12,"surface","","",21,N],[12,"keys","","",21,N],[13,"Leave","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","leave event",21,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_keyboard::Event","",21,N],[12,"surface","","",21,N],[13,"Key","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","key event",21,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_keyboard::Event","",21,N],[12,"time","","",21,N],[12,"key","","",21,N],[12,"state","","",21,N],[13,"Modifiers","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","modifier and group state",21,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_keyboard::Event","",21,N],[12,"mods_depressed","","",21,N],[12,"mods_latched","","",21,N],[12,"mods_locked","","",21,N],[12,"group","","",21,N],[13,"RepeatInfo","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","repeat rate and delay",21,N],[12,"rate","smithay_client_toolkit::reexports::client::protocol::wl_keyboard::Event","",21,N],[12,"delay","","",21,N],[3,"WlKeyboard","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","",N,N],[8,"RequestsTrait","","",N,N],[10,"release","","release the keyboard object",22,N],[0,"wl_region","smithay_client_toolkit::reexports::client::protocol","region interface",N,N],[4,"Request","smithay_client_toolkit::reexports::client::protocol::wl_region","",N,N],[13,"Destroy","","destroy region",23,N],[13,"Add","","add rectangle to region",23,N],[12,"x","smithay_client_toolkit::reexports::client::protocol::wl_region::Request","",23,N],[12,"y","","",23,N],[12,"width","","",23,N],[12,"height","","",23,N],[13,"Subtract","smithay_client_toolkit::reexports::client::protocol::wl_region","subtract rectangle from region",23,N],[12,"x","smithay_client_toolkit::reexports::client::protocol::wl_region::Request","",23,N],[12,"y","","",23,N],[12,"width","","",23,N],[12,"height","","",23,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_region","",N,N],[3,"WlRegion","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy region",24,N],[10,"add","","add rectangle to region",24,N],[10,"subtract","","subtract rectangle from region",24,N],[0,"wl_data_device_manager","smithay_client_toolkit::reexports::client::protocol","data transfer interface",N,N],[3,"DndAction","smithay_client_toolkit::reexports::client::protocol::wl_data_device_manager","drag and drop actions",N,N],[4,"Request","","",N,N],[13,"CreateDataSource","","create a new data source",25,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_data_device_manager::Request","",25,N],[13,"GetDataDevice","smithay_client_toolkit::reexports::client::protocol::wl_data_device_manager","create a new data device",25,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_data_device_manager::Request","",25,N],[12,"seat","","",25,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_data_device_manager","",N,N],[3,"WlDataDeviceManager","","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_data_source","","create a new data source",26,[[["self"]],["result",["newproxy"]]]],[10,"get_data_device","","create a new data device",26,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"wl_shell_surface","smithay_client_toolkit::reexports::client::protocol","desktop-style metadata interface",N,N],[3,"Resize","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","edge values for resizing",N,N],[3,"Transient","","details of transient behaviour",N,N],[4,"FullscreenMethod","","different method to set the surface fullscreen",N,N],[13,"Default","","no preference, apply default policy",27,N],[13,"Scale","","scale, preserve the surface's aspect ratio and center on output",27,N],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",27,N],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",27,N],[4,"Request","","",N,N],[13,"Pong","","respond to a ping event",28,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[13,"Move","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","start an interactive move",28,N],[12,"seat","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[12,"serial","","",28,N],[13,"Resize","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","start an interactive resize",28,N],[12,"seat","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[12,"serial","","",28,N],[12,"edges","","",28,N],[13,"SetToplevel","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","make the surface a toplevel surface",28,N],[13,"SetTransient","","make the surface a transient surface",28,N],[12,"parent","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[12,"x","","",28,N],[12,"y","","",28,N],[12,"flags","","",28,N],[13,"SetFullscreen","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","make the surface a fullscreen surface",28,N],[12,"method","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[12,"framerate","","",28,N],[12,"output","","",28,N],[13,"SetPopup","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","make the surface a popup surface",28,N],[12,"seat","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[12,"serial","","",28,N],[12,"parent","","",28,N],[12,"x","","",28,N],[12,"y","","",28,N],[12,"flags","","",28,N],[13,"SetMaximized","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","make the surface a maximized surface",28,N],[12,"output","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[13,"SetTitle","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","set surface title",28,N],[12,"title","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[13,"SetClass","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","set surface class",28,N],[12,"class_","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Request","",28,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",N,N],[13,"Ping","","ping client",29,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Event","",29,N],[13,"Configure","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","suggest resize",29,N],[12,"edges","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface::Event","",29,N],[12,"width","","",29,N],[12,"height","","",29,N],[13,"PopupDone","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","popup interaction is done",29,N],[3,"WlShellSurface","","",N,N],[8,"RequestsTrait","","",N,N],[10,"pong","","respond to a ping event",30,N],[10,"_move","","start an interactive move",30,N],[10,"resize","","start an interactive resize",30,N],[10,"set_toplevel","","make the surface a toplevel surface",30,N],[10,"set_transient","","make the surface a transient surface",30,N],[10,"set_fullscreen","","make the surface a fullscreen surface",30,N],[10,"set_popup","","make the surface a popup surface",30,N],[10,"set_maximized","","make the surface a maximized surface",30,N],[10,"set_title","","set surface title",30,N],[10,"set_class","","set surface class",30,N],[0,"wl_touch","smithay_client_toolkit::reexports::client::protocol","touchscreen input device",N,N],[4,"Request","smithay_client_toolkit::reexports::client::protocol::wl_touch","",N,N],[13,"Release","","release the touch object",31,N],[4,"Event","","",N,N],[13,"Down","","touch down event and beginning of a touch sequence",32,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_touch::Event","",32,N],[12,"time","","",32,N],[12,"surface","","",32,N],[12,"id","","",32,N],[12,"x","","",32,N],[12,"y","","",32,N],[13,"Up","smithay_client_toolkit::reexports::client::protocol::wl_touch","end of a touch event sequence",32,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_touch::Event","",32,N],[12,"time","","",32,N],[12,"id","","",32,N],[13,"Motion","smithay_client_toolkit::reexports::client::protocol::wl_touch","update of touch point coordinates",32,N],[12,"time","smithay_client_toolkit::reexports::client::protocol::wl_touch::Event","",32,N],[12,"id","","",32,N],[12,"x","","",32,N],[12,"y","","",32,N],[13,"Frame","smithay_client_toolkit::reexports::client::protocol::wl_touch","end of touch frame event",32,N],[13,"Cancel","","touch session cancelled",32,N],[3,"WlTouch","","",N,N],[8,"RequestsTrait","","",N,N],[10,"release","","release the touch object",33,N],[0,"wl_subsurface","smithay_client_toolkit::reexports::client::protocol","sub-surface interface to a wl_surface",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","",N,N],[13,"BadSurface","","wl_surface is not a sibling or the parent",34,N],[4,"Request","","",N,N],[13,"Destroy","","remove sub-surface interface",35,N],[13,"SetPosition","","reposition the sub-surface",35,N],[12,"x","smithay_client_toolkit::reexports::client::protocol::wl_subsurface::Request","",35,N],[12,"y","","",35,N],[13,"PlaceAbove","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","restack the sub-surface",35,N],[12,"sibling","smithay_client_toolkit::reexports::client::protocol::wl_subsurface::Request","",35,N],[13,"PlaceBelow","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","restack the sub-surface",35,N],[12,"sibling","smithay_client_toolkit::reexports::client::protocol::wl_subsurface::Request","",35,N],[13,"SetSync","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","set sub-surface to synchronized mode",35,N],[13,"SetDesync","","set sub-surface to desynchronized mode",35,N],[4,"Event","","",N,N],[3,"WlSubsurface","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove sub-surface interface",36,N],[10,"set_position","","reposition the sub-surface",36,N],[10,"place_above","","restack the sub-surface",36,N],[10,"place_below","","restack the sub-surface",36,N],[10,"set_sync","","set sub-surface to synchronized mode",36,N],[10,"set_desync","","set sub-surface to desynchronized mode",36,N],[0,"wl_buffer","smithay_client_toolkit::reexports::client::protocol","content for a wl_surface",N,N],[4,"Request","smithay_client_toolkit::reexports::client::protocol::wl_buffer","",N,N],[13,"Destroy","","destroy a buffer",37,N],[4,"Event","","",N,N],[13,"Release","","compositor releases buffer",38,N],[3,"WlBuffer","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy a buffer",39,N],[0,"wl_output","smithay_client_toolkit::reexports::client::protocol","compositor output region",N,N],[4,"Subpixel","smithay_client_toolkit::reexports::client::protocol::wl_output","subpixel geometry information",N,N],[13,"Unknown","","unknown geometry",40,N],[13,"None","","no geometry",40,N],[13,"HorizontalRgb","","horizontal RGB",40,N],[13,"HorizontalBgr","","horizontal BGR",40,N],[13,"VerticalRgb","","vertical RGB",40,N],[13,"VerticalBgr","","vertical BGR",40,N],[4,"Transform","","transform from framebuffer to output",N,N],[13,"Normal","","no transform",41,N],[13,"_90","","90 degrees counter-clockwise",41,N],[13,"_180","","180 degrees counter-clockwise",41,N],[13,"_270","","270 degrees counter-clockwise",41,N],[13,"Flipped","","180 degree flip around a vertical axis",41,N],[13,"Flipped90","","flip and rotate 90 degrees counter-clockwise",41,N],[13,"Flipped180","","flip and rotate 180 degrees counter-clockwise",41,N],[13,"Flipped270","","flip and rotate 270 degrees counter-clockwise",41,N],[3,"Mode","","mode information",N,N],[4,"Request","","",N,N],[13,"Release","","release the output object",42,N],[4,"Event","","",N,N],[13,"Geometry","","properties of the output",43,N],[12,"x","smithay_client_toolkit::reexports::client::protocol::wl_output::Event","",43,N],[12,"y","","",43,N],[12,"physical_width","","",43,N],[12,"physical_height","","",43,N],[12,"subpixel","","",43,N],[12,"make","","",43,N],[12,"model","","",43,N],[12,"transform","","",43,N],[13,"Mode","smithay_client_toolkit::reexports::client::protocol::wl_output","advertise available modes for the output",43,N],[12,"flags","smithay_client_toolkit::reexports::client::protocol::wl_output::Event","",43,N],[12,"width","","",43,N],[12,"height","","",43,N],[12,"refresh","","",43,N],[13,"Done","smithay_client_toolkit::reexports::client::protocol::wl_output","sent all information about output",43,N],[13,"Scale","","output scaling properties",43,N],[12,"factor","smithay_client_toolkit::reexports::client::protocol::wl_output::Event","",43,N],[3,"WlOutput","smithay_client_toolkit::reexports::client::protocol::wl_output","",N,N],[8,"RequestsTrait","","",N,N],[10,"release","","release the output object",44,N],[0,"wl_shell","smithay_client_toolkit::reexports::client::protocol","create desktop-style surfaces",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_shell","",N,N],[13,"Role","","given wl_surface has another role",45,N],[4,"Request","","",N,N],[13,"GetShellSurface","","create a shell surface from a surface",46,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_shell::Request","",46,N],[12,"surface","","",46,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_shell","",N,N],[3,"WlShell","","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_shell_surface","","create a shell surface from a surface",47,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"wl_shm_pool","smithay_client_toolkit::reexports::client::protocol","a shared memory pool",N,N],[4,"Request","smithay_client_toolkit::reexports::client::protocol::wl_shm_pool","",N,N],[13,"CreateBuffer","","create a buffer from the pool",48,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_shm_pool::Request","",48,N],[12,"offset","","",48,N],[12,"width","","",48,N],[12,"height","","",48,N],[12,"stride","","",48,N],[12,"format","","",48,N],[13,"Destroy","smithay_client_toolkit::reexports::client::protocol::wl_shm_pool","destroy the pool",48,N],[13,"Resize","","change the size of the pool mapping",48,N],[12,"size","smithay_client_toolkit::reexports::client::protocol::wl_shm_pool::Request","",48,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_shm_pool","",N,N],[3,"WlShmPool","","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_buffer","","create a buffer from the pool",49,[[["self"],["i32"],["i32"],["i32"],["i32"],["format"]],["result",["newproxy"]]]],[10,"destroy","","destroy the pool",49,N],[10,"resize","","change the size of the pool mapping",49,N],[0,"wl_display","smithay_client_toolkit::reexports::client::protocol","core global object",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_display","global error values",N,N],[13,"InvalidObject","","server couldn't find object",50,N],[13,"InvalidMethod","","method doesn't exist on the specified interface",50,N],[13,"NoMemory","","server is out of memory",50,N],[4,"Request","","",N,N],[13,"Sync","","asynchronous roundtrip",51,N],[12,"callback","smithay_client_toolkit::reexports::client::protocol::wl_display::Request","",51,N],[13,"GetRegistry","smithay_client_toolkit::reexports::client::protocol::wl_display","get global registry object",51,N],[12,"registry","smithay_client_toolkit::reexports::client::protocol::wl_display::Request","",51,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_display","",N,N],[13,"Error","","fatal error event",52,N],[12,"object_id","smithay_client_toolkit::reexports::client::protocol::wl_display::Event","",52,N],[12,"code","","",52,N],[12,"message","","",52,N],[13,"DeleteId","smithay_client_toolkit::reexports::client::protocol::wl_display","acknowledge object ID deletion",52,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_display::Event","",52,N],[3,"WlDisplay","smithay_client_toolkit::reexports::client::protocol::wl_display","",N,N],[8,"RequestsTrait","","",N,N],[10,"sync","","asynchronous roundtrip",53,[[["self"]],["result",["newproxy"]]]],[10,"get_registry","","get global registry object",53,[[["self"]],["result",["newproxy"]]]],[0,"wl_subcompositor","smithay_client_toolkit::reexports::client::protocol","sub-surface compositing",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",N,N],[13,"BadSurface","","the to-be sub-surface is invalid",54,N],[4,"Request","","",N,N],[13,"Destroy","","unbind from the subcompositor interface",55,N],[13,"GetSubsurface","","give a surface the role sub-surface",55,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor::Request","",55,N],[12,"surface","","",55,N],[12,"parent","","",55,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",N,N],[3,"WlSubcompositor","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","unbind from the subcompositor interface",56,N],[10,"get_subsurface","","give a surface the role sub-surface",56,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[0,"wl_registry","smithay_client_toolkit::reexports::client::protocol","global registry object",N,N],[4,"Request","smithay_client_toolkit::reexports::client::protocol::wl_registry","",N,N],[13,"Bind","","bind an object to the display",57,N],[12,"name","smithay_client_toolkit::reexports::client::protocol::wl_registry::Request","",57,N],[12,"id","","",57,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_registry","",N,N],[13,"Global","","announce global object",58,N],[12,"name","smithay_client_toolkit::reexports::client::protocol::wl_registry::Event","",58,N],[12,"interface","","",58,N],[12,"version","","",58,N],[13,"GlobalRemove","smithay_client_toolkit::reexports::client::protocol::wl_registry","announce removal of global object",58,N],[12,"name","smithay_client_toolkit::reexports::client::protocol::wl_registry::Event","",58,N],[3,"WlRegistry","smithay_client_toolkit::reexports::client::protocol::wl_registry","",N,N],[8,"RequestsTrait","","",N,N],[10,"bind","","bind an object to the display",59,[[["self"],["u32"],["u32"]],["result",["newproxy"]]]],[0,"wl_shm","smithay_client_toolkit::reexports::client::protocol","shared memory support",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_shm","wl_shm error values",N,N],[13,"InvalidFormat","","buffer format is not known",60,N],[13,"InvalidStride","","invalid size or stride during pool or buffer creation",60,N],[13,"InvalidFd","","mmapping the file descriptor failed",60,N],[4,"Format","","pixel formats",N,N],[13,"Argb8888","","32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian",61,N],[13,"Xrgb8888","","32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian",61,N],[13,"C8","","8-bit color index format, [7:0] C",61,N],[13,"Rgb332","","8-bit RGB format, [7:0] R:G:B 3:3:2",61,N],[13,"Bgr233","","8-bit BGR format, [7:0] B:G:R 2:3:3",61,N],[13,"Xrgb4444","","16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian",61,N],[13,"Xbgr4444","","16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian",61,N],[13,"Rgbx4444","","16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian",61,N],[13,"Bgrx4444","","16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian",61,N],[13,"Argb4444","","16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian",61,N],[13,"Abgr4444","","16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian",61,N],[13,"Rgba4444","","16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian",61,N],[13,"Bgra4444","","16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian",61,N],[13,"Xrgb1555","","16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian",61,N],[13,"Xbgr1555","","16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian",61,N],[13,"Rgbx5551","","16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian",61,N],[13,"Bgrx5551","","16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian",61,N],[13,"Argb1555","","16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian",61,N],[13,"Abgr1555","","16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian",61,N],[13,"Rgba5551","","16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian",61,N],[13,"Bgra5551","","16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian",61,N],[13,"Rgb565","","16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian",61,N],[13,"Bgr565","","16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian",61,N],[13,"Rgb888","","24-bit RGB format, [23:0] R:G:B little endian",61,N],[13,"Bgr888","","24-bit BGR format, [23:0] B:G:R little endian",61,N],[13,"Xbgr8888","","32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian",61,N],[13,"Rgbx8888","","32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian",61,N],[13,"Bgrx8888","","32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian",61,N],[13,"Abgr8888","","32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian",61,N],[13,"Rgba8888","","32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian",61,N],[13,"Bgra8888","","32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian",61,N],[13,"Xrgb2101010","","32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian",61,N],[13,"Xbgr2101010","","32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian",61,N],[13,"Rgbx1010102","","32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian",61,N],[13,"Bgrx1010102","","32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian",61,N],[13,"Argb2101010","","32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian",61,N],[13,"Abgr2101010","","32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian",61,N],[13,"Rgba1010102","","32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian",61,N],[13,"Bgra1010102","","32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian",61,N],[13,"Yuyv","","packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian",61,N],[13,"Yvyu","","packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian",61,N],[13,"Uyvy","","packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian",61,N],[13,"Vyuy","","packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian",61,N],[13,"Ayuv","","packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian",61,N],[13,"Nv12","","2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane",61,N],[13,"Nv21","","2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane",61,N],[13,"Nv16","","2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane",61,N],[13,"Nv61","","2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane",61,N],[13,"Yuv410","","3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes",61,N],[13,"Yvu410","","3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes",61,N],[13,"Yuv411","","3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes",61,N],[13,"Yvu411","","3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes",61,N],[13,"Yuv420","","3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes",61,N],[13,"Yvu420","","3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes",61,N],[13,"Yuv422","","3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes",61,N],[13,"Yvu422","","3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes",61,N],[13,"Yuv444","","3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes",61,N],[13,"Yvu444","","3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes",61,N],[4,"Request","","",N,N],[13,"CreatePool","","create a shm pool",62,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_shm::Request","",62,N],[12,"fd","","",62,N],[12,"size","","",62,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_shm","",N,N],[13,"Format","","pixel format description",63,N],[12,"format","smithay_client_toolkit::reexports::client::protocol::wl_shm::Event","",63,N],[3,"WlShm","smithay_client_toolkit::reexports::client::protocol::wl_shm","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_pool","","create a shm pool",64,[[["self"],["i32"],["i32"]],["result",["newproxy"]]]],[0,"wl_surface","smithay_client_toolkit::reexports::client::protocol","an onscreen surface",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_surface","wl_surface error values",N,N],[13,"InvalidScale","","buffer scale value is invalid",65,N],[13,"InvalidTransform","","buffer transform value is invalid",65,N],[4,"Request","","",N,N],[13,"Destroy","","delete surface",66,N],[13,"Attach","","set the surface contents",66,N],[12,"buffer","smithay_client_toolkit::reexports::client::protocol::wl_surface::Request","",66,N],[12,"x","","",66,N],[12,"y","","",66,N],[13,"Damage","smithay_client_toolkit::reexports::client::protocol::wl_surface","mark part of the surface damaged",66,N],[12,"x","smithay_client_toolkit::reexports::client::protocol::wl_surface::Request","",66,N],[12,"y","","",66,N],[12,"width","","",66,N],[12,"height","","",66,N],[13,"Frame","smithay_client_toolkit::reexports::client::protocol::wl_surface","request a frame throttling hint",66,N],[12,"callback","smithay_client_toolkit::reexports::client::protocol::wl_surface::Request","",66,N],[13,"SetOpaqueRegion","smithay_client_toolkit::reexports::client::protocol::wl_surface","set opaque region",66,N],[12,"region","smithay_client_toolkit::reexports::client::protocol::wl_surface::Request","",66,N],[13,"SetInputRegion","smithay_client_toolkit::reexports::client::protocol::wl_surface","set input region",66,N],[12,"region","smithay_client_toolkit::reexports::client::protocol::wl_surface::Request","",66,N],[13,"Commit","smithay_client_toolkit::reexports::client::protocol::wl_surface","commit pending surface state",66,N],[13,"SetBufferTransform","","sets the buffer transformation",66,N],[12,"transform","smithay_client_toolkit::reexports::client::protocol::wl_surface::Request","",66,N],[13,"SetBufferScale","smithay_client_toolkit::reexports::client::protocol::wl_surface","sets the buffer scaling factor",66,N],[12,"scale","smithay_client_toolkit::reexports::client::protocol::wl_surface::Request","",66,N],[13,"DamageBuffer","smithay_client_toolkit::reexports::client::protocol::wl_surface","mark part of the surface damaged using buffer coordinates",66,N],[12,"x","smithay_client_toolkit::reexports::client::protocol::wl_surface::Request","",66,N],[12,"y","","",66,N],[12,"width","","",66,N],[12,"height","","",66,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_surface","",N,N],[13,"Enter","","surface enters an output",67,N],[12,"output","smithay_client_toolkit::reexports::client::protocol::wl_surface::Event","",67,N],[13,"Leave","smithay_client_toolkit::reexports::client::protocol::wl_surface","surface leaves an output",67,N],[12,"output","smithay_client_toolkit::reexports::client::protocol::wl_surface::Event","",67,N],[3,"WlSurface","smithay_client_toolkit::reexports::client::protocol::wl_surface","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","delete surface",68,N],[10,"attach","","set the surface contents",68,N],[10,"damage","","mark part of the surface damaged",68,N],[10,"frame","","request a frame throttling hint",68,[[["self"]],["result",["newproxy"]]]],[10,"set_opaque_region","","set opaque region",68,N],[10,"set_input_region","","set input region",68,N],[10,"commit","","commit pending surface state",68,N],[10,"set_buffer_transform","","sets the buffer transformation",68,N],[10,"set_buffer_scale","","sets the buffer scaling factor",68,N],[10,"damage_buffer","","mark part of the surface damaged using buffer coordinates",68,N],[0,"wl_seat","smithay_client_toolkit::reexports::client::protocol","group of input devices",N,N],[3,"Capability","smithay_client_toolkit::reexports::client::protocol::wl_seat","seat capability bitmask",N,N],[4,"Request","","",N,N],[13,"GetPointer","","return pointer object",69,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_seat::Request","",69,N],[13,"GetKeyboard","smithay_client_toolkit::reexports::client::protocol::wl_seat","return keyboard object",69,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_seat::Request","",69,N],[13,"GetTouch","smithay_client_toolkit::reexports::client::protocol::wl_seat","return touch object",69,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_seat::Request","",69,N],[13,"Release","smithay_client_toolkit::reexports::client::protocol::wl_seat","release the seat object",69,N],[4,"Event","","",N,N],[13,"Capabilities","","seat capabilities changed",70,N],[12,"capabilities","smithay_client_toolkit::reexports::client::protocol::wl_seat::Event","",70,N],[13,"Name","smithay_client_toolkit::reexports::client::protocol::wl_seat","unique identifier for this seat",70,N],[12,"name","smithay_client_toolkit::reexports::client::protocol::wl_seat::Event","",70,N],[3,"WlSeat","smithay_client_toolkit::reexports::client::protocol::wl_seat","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_pointer","","return pointer object",71,[[["self"]],["result",["newproxy"]]]],[10,"get_keyboard","","return keyboard object",71,[[["self"]],["result",["newproxy"]]]],[10,"get_touch","","return touch object",71,[[["self"]],["result",["newproxy"]]]],[10,"release","","release the seat object",71,N],[0,"wl_data_device","smithay_client_toolkit::reexports::client::protocol","data transfer device",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",N,N],[13,"Role","","given wl_surface has another role",72,N],[4,"Request","","",N,N],[13,"StartDrag","","start drag-and-drop operation",73,N],[12,"source","smithay_client_toolkit::reexports::client::protocol::wl_data_device::Request","",73,N],[12,"origin","","",73,N],[12,"icon","","",73,N],[12,"serial","","",73,N],[13,"SetSelection","smithay_client_toolkit::reexports::client::protocol::wl_data_device","copy data to the selection",73,N],[12,"source","smithay_client_toolkit::reexports::client::protocol::wl_data_device::Request","",73,N],[12,"serial","","",73,N],[13,"Release","smithay_client_toolkit::reexports::client::protocol::wl_data_device","destroy data device",73,N],[4,"Event","","",N,N],[13,"DataOffer","","introduce a new wl_data_offer",74,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_data_device::Event","",74,N],[13,"Enter","smithay_client_toolkit::reexports::client::protocol::wl_data_device","initiate drag-and-drop session",74,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_data_device::Event","",74,N],[12,"surface","","",74,N],[12,"x","","",74,N],[12,"y","","",74,N],[12,"id","","",74,N],[13,"Leave","smithay_client_toolkit::reexports::client::protocol::wl_data_device","end drag-and-drop session",74,N],[13,"Motion","","drag-and-drop session motion",74,N],[12,"time","smithay_client_toolkit::reexports::client::protocol::wl_data_device::Event","",74,N],[12,"x","","",74,N],[12,"y","","",74,N],[13,"Drop","smithay_client_toolkit::reexports::client::protocol::wl_data_device","end drag-and-drop session successfully",74,N],[13,"Selection","","advertise new selection",74,N],[12,"id","smithay_client_toolkit::reexports::client::protocol::wl_data_device::Event","",74,N],[3,"WlDataDevice","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",N,N],[8,"RequestsTrait","","",N,N],[10,"start_drag","","start drag-and-drop operation",75,N],[10,"set_selection","","copy data to the selection",75,N],[10,"release","","destroy data device",75,N],[0,"wl_data_offer","smithay_client_toolkit::reexports::client::protocol","offer to transfer data",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",N,N],[13,"InvalidFinish","","finish request was called untimely",76,N],[13,"InvalidActionMask","","action mask contains invalid values",76,N],[13,"InvalidAction","","action argument has an invalid value",76,N],[13,"InvalidOffer","","offer doesn't accept this request",76,N],[4,"Request","","",N,N],[13,"Accept","","accept one of the offered mime types",77,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_data_offer::Request","",77,N],[12,"mime_type","","",77,N],[13,"Receive","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","request that the data is transferred",77,N],[12,"mime_type","smithay_client_toolkit::reexports::client::protocol::wl_data_offer::Request","",77,N],[12,"fd","","",77,N],[13,"Destroy","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","destroy data offer",77,N],[13,"Finish","","the offer will no longer be used",77,N],[13,"SetActions","","set the available/preferred drag-and-drop actions",77,N],[12,"dnd_actions","smithay_client_toolkit::reexports::client::protocol::wl_data_offer::Request","",77,N],[12,"preferred_action","","",77,N],[4,"Event","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",N,N],[13,"Offer","","advertise offered mime type",78,N],[12,"mime_type","smithay_client_toolkit::reexports::client::protocol::wl_data_offer::Event","",78,N],[13,"SourceActions","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","notify the source-side available actions",78,N],[12,"source_actions","smithay_client_toolkit::reexports::client::protocol::wl_data_offer::Event","",78,N],[13,"Action","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","notify the selected action",78,N],[12,"dnd_action","smithay_client_toolkit::reexports::client::protocol::wl_data_offer::Event","",78,N],[3,"WlDataOffer","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",N,N],[8,"RequestsTrait","","",N,N],[10,"accept","","accept one of the offered mime types",79,N],[10,"receive","","request that the data is transferred",79,N],[10,"destroy","","destroy data offer",79,N],[10,"finish","","the offer will no longer be used",79,N],[10,"set_actions","","set the available/preferred drag-and-drop actions",79,N],[0,"wl_pointer","smithay_client_toolkit::reexports::client::protocol","pointer input device",N,N],[4,"Error","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",N,N],[13,"Role","","given wl_surface has another role",80,N],[4,"ButtonState","","physical button state",N,N],[13,"Released","","the button is not pressed",81,N],[13,"Pressed","","the button is pressed",81,N],[4,"Axis","","axis types",N,N],[13,"VerticalScroll","","vertical axis",82,N],[13,"HorizontalScroll","","horizontal axis",82,N],[4,"AxisSource","","axis source types",N,N],[13,"Wheel","","a physical wheel",83,N],[13,"Finger","","finger on a touch surface",83,N],[13,"Continuous","","continuous coordinate space",83,N],[4,"Request","","",N,N],[13,"SetCursor","","set the pointer surface",84,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Request","",84,N],[12,"surface","","",84,N],[12,"hotspot_x","","",84,N],[12,"hotspot_y","","",84,N],[13,"Release","smithay_client_toolkit::reexports::client::protocol::wl_pointer","release the pointer object",84,N],[4,"Event","","",N,N],[13,"Enter","","enter event",85,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Event","",85,N],[12,"surface","","",85,N],[12,"surface_x","","",85,N],[12,"surface_y","","",85,N],[13,"Leave","smithay_client_toolkit::reexports::client::protocol::wl_pointer","leave event",85,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Event","",85,N],[12,"surface","","",85,N],[13,"Motion","smithay_client_toolkit::reexports::client::protocol::wl_pointer","pointer motion event",85,N],[12,"time","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Event","",85,N],[12,"surface_x","","",85,N],[12,"surface_y","","",85,N],[13,"Button","smithay_client_toolkit::reexports::client::protocol::wl_pointer","pointer button event",85,N],[12,"serial","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Event","",85,N],[12,"time","","",85,N],[12,"button","","",85,N],[12,"state","","",85,N],[13,"Axis","smithay_client_toolkit::reexports::client::protocol::wl_pointer","axis event",85,N],[12,"time","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Event","",85,N],[12,"axis","","",85,N],[12,"value","","",85,N],[13,"Frame","smithay_client_toolkit::reexports::client::protocol::wl_pointer","end of a pointer event sequence",85,N],[13,"AxisSource","","axis source event",85,N],[12,"axis_source","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Event","",85,N],[13,"AxisStop","smithay_client_toolkit::reexports::client::protocol::wl_pointer","axis stop event",85,N],[12,"time","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Event","",85,N],[12,"axis","","",85,N],[13,"AxisDiscrete","smithay_client_toolkit::reexports::client::protocol::wl_pointer","axis click event",85,N],[12,"axis","smithay_client_toolkit::reexports::client::protocol::wl_pointer::Event","",85,N],[12,"discrete","","",85,N],[3,"WlPointer","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",N,N],[8,"RequestsTrait","","",N,N],[10,"set_cursor","","set the pointer surface",86,N],[10,"release","","release the pointer object",86,N],[14,"global_filter","smithay_client_toolkit::reexports::client","Convenience macro to create a `GlobalManager` callback",N,N],[3,"QueueToken","","A token representing this event queue",N,N],[3,"Display","","A connection to a wayland server",N,N],[4,"GlobalError","","An error that occured trying to bind a global",N,N],[13,"Missing","","The requested global was missing",87,N],[13,"VersionTooLow","","The global abvertized by the server has a lower version number than the one requested",87,N],[3,"GlobalManager","","An utility to manage global objects",N,N],[4,"ConnectError","","Enum representing the possible reasons why connecting to the wayland server failed",N,N],[13,"NoWaylandLib","","The library was compiled with the `dlopen` feature, and the `libwayland-client.so` library could not be found at runtime",88,N],[13,"NoCompositorListening","","Any needed library was found, but the listening socket of the server could not be found.",88,N],[13,"InvalidName","","The provided socket name is invalid",88,N],[3,"EventQueue","","An event queue for protocol messages",N,N],[3,"Proxy","","An handle to a wayland proxy",N,N],[4,"GlobalEvent","","Event provided to the user callback of GlobalManager",N,N],[13,"New","","A new global was created",89,N],[12,"id","smithay_client_toolkit::reexports::client::GlobalEvent","Id of the new global",89,N],[12,"interface","","Interface of the new global",89,N],[12,"version","","Maximum supported version of the new global",89,N],[13,"Removed","smithay_client_toolkit::reexports::client","A global was removed",89,N],[12,"id","smithay_client_toolkit::reexports::client::GlobalEvent","Id of the removed global",89,N],[12,"interface","","Interface of the removed global",89,N],[3,"ReadEventsGuard","smithay_client_toolkit::reexports::client","A guard over a read intention.",N,N],[3,"NewProxy","","A newly-created proxy that needs implementation",N,N],[0,"unstable","smithay_client_toolkit::reexports::protocols","Unstable protocols from wayland-protocols",N,N],[0,"fullscreen_shell","smithay_client_toolkit::reexports::protocols::unstable","Fullscreen shell protocol",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1","C interfaces for this protocol",N,N],[7,"zwp_fullscreen_shell_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::c_interfaces","",N,N],[7,"zwp_fullscreen_shell_v1_events","","",N,N],[7,"zwp_fullscreen_shell_v1_interface","","",N,N],[7,"zwp_fullscreen_shell_mode_feedback_v1_events","","",N,N],[7,"zwp_fullscreen_shell_mode_feedback_v1_interface","","",N,N],[7,"wl_surface_interface","","",N,N],[7,"wl_output_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1","Client-side API of this protocol",N,N],[0,"zwp_fullscreen_shell_v1","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client","displays a single surface per output",N,N],[4,"Capability","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","capabilities advertised by the compositor",N,N],[13,"ArbitraryModes","","compositor is capable of almost any output mode",90,N],[13,"CursorPlane","","compositor has a separate cursor plane",90,N],[4,"PresentMethod","","different method to set the surface fullscreen",N,N],[13,"Default","","no preference, apply default policy",91,N],[13,"Center","","center the surface on the output",91,N],[13,"Zoom","","scale the surface, preserving aspect ratio, to the largest size that will fit on the output",91,N],[13,"ZoomCrop","","scale the surface, preserving aspect ratio, to fully fill the output cropping if needed",91,N],[13,"Stretch","","scale the surface to the size of the output ignoring aspect ratio",91,N],[4,"Error","","wl_fullscreen_shell error values",N,N],[13,"InvalidMethod","","present_method is not known",92,N],[4,"Request","","",N,N],[13,"Release","","release the wl_fullscreen_shell interface",93,N],[13,"PresentSurface","","present surface for display",93,N],[12,"surface","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Request","",93,N],[12,"method","","",93,N],[12,"output","","",93,N],[13,"PresentSurfaceForMode","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","present surface for display at a particular mode",93,N],[12,"surface","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Request","",93,N],[12,"output","","",93,N],[12,"framerate","","",93,N],[12,"feedback","","",93,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",N,N],[13,"Capability","","advertises a capability of the compositor",94,N],[12,"capability","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Event","",94,N],[3,"ZwpFullscreenShellV1","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"release","","release the wl_fullscreen_shell interface",95,N],[10,"present_surface","","present surface for display",95,N],[10,"present_surface_for_mode","","present surface for display at a particular mode",95,[[["self"],["proxy"],["proxy"],["i32"]],["result",["newproxy"]]]],[0,"zwp_fullscreen_shell_mode_feedback_v1","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client","",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",N,N],[4,"Event","","",N,N],[13,"ModeSuccessful","","mode switch succeeded",96,N],[13,"ModeFailed","","mode switch failed",96,N],[13,"PresentCancelled","","mode switch cancelled",96,N],[3,"ZwpFullscreenShellModeFeedbackV1","","",N,N],[8,"RequestsTrait","","",N,N],[0,"idle_inhibit","smithay_client_toolkit::reexports::protocols::unstable","Screensaver inhibition protocol",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1","C interfaces for this protocol",N,N],[7,"zwp_idle_inhibit_manager_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::c_interfaces","",N,N],[7,"zwp_idle_inhibit_manager_v1_interface","","",N,N],[7,"zwp_idle_inhibitor_v1_requests","","",N,N],[7,"zwp_idle_inhibitor_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1","Client-side API of this protocol",N,N],[0,"zwp_idle_inhibit_manager_v1","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client","control behavior when display idles",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",N,N],[13,"Destroy","","destroy the idle inhibitor object",97,N],[13,"CreateInhibitor","","create a new inhibitor object",97,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1::Request","",97,N],[12,"surface","","",97,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",N,N],[3,"ZwpIdleInhibitManagerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the idle inhibitor object",98,N],[10,"create_inhibitor","","create a new inhibitor object",98,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_idle_inhibitor_v1","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client","context object for inhibiting idle behavior",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",N,N],[13,"Destroy","","destroy the idle inhibitor object",99,N],[4,"Event","","",N,N],[3,"ZwpIdleInhibitorV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the idle inhibitor object",100,N],[0,"input_method","smithay_client_toolkit::reexports::protocols::unstable","Input method protocol",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::input_method","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1","C interfaces for this protocol",N,N],[7,"zwp_input_method_context_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::c_interfaces","",N,N],[7,"zwp_input_method_context_v1_events","","",N,N],[7,"zwp_input_method_context_v1_interface","","",N,N],[7,"zwp_input_method_v1_events","","",N,N],[7,"zwp_input_method_v1_interface","","",N,N],[7,"zwp_input_panel_v1_requests","","",N,N],[7,"zwp_input_panel_v1_interface","","",N,N],[7,"zwp_input_panel_surface_v1_requests","","",N,N],[7,"zwp_input_panel_surface_v1_interface","","",N,N],[7,"wl_keyboard_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1","Client-side API of this protocol",N,N],[0,"zwp_input_method_context_v1","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client","input method context",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",N,N],[13,"Destroy","","This is a destructor, once sent this object cannot be used any longer.",101,N],[13,"CommitString","","commit string",101,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"text","","",101,N],[13,"PreeditString","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit string",101,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"text","","",101,N],[12,"commit","","",101,N],[13,"PreeditStyling","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit styling",101,N],[12,"index","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"length","","",101,N],[12,"style","","",101,N],[13,"PreeditCursor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit cursor",101,N],[12,"index","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[13,"DeleteSurroundingText","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","delete text",101,N],[12,"index","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"length","","",101,N],[13,"CursorPosition","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","set cursor to a new position",101,N],[12,"index","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"anchor","","",101,N],[13,"ModifiersMap","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",101,N],[12,"map","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[13,"Keysym","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","keysym",101,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"time","","",101,N],[12,"sym","","",101,N],[12,"state","","",101,N],[12,"modifiers","","",101,N],[13,"GrabKeyboard","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","grab hardware keyboard",101,N],[12,"keyboard","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[13,"Key","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","forward key event",101,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"time","","",101,N],[12,"key","","",101,N],[12,"state","","",101,N],[13,"Modifiers","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","forward modifiers event",101,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"mods_depressed","","",101,N],[12,"mods_latched","","",101,N],[12,"mods_locked","","",101,N],[12,"group","","",101,N],[13,"Language","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",101,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"language","","",101,N],[13,"TextDirection","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",101,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",101,N],[12,"direction","","",101,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",N,N],[13,"SurroundingText","","surrounding text event",102,N],[12,"text","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",102,N],[12,"cursor","","",102,N],[12,"anchor","","",102,N],[13,"Reset","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",102,N],[13,"ContentType","","",102,N],[12,"hint","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",102,N],[12,"purpose","","",102,N],[13,"InvokeAction","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",102,N],[12,"button","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",102,N],[12,"index","","",102,N],[13,"CommitState","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",102,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",102,N],[13,"PreferredLanguage","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",102,N],[12,"language","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",102,N],[3,"ZwpInputMethodContextV1","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","This is a destructor, you cannot send requests to this object any longer once this method is called.",103,N],[10,"commit_string","","commit string",103,N],[10,"preedit_string","","pre-edit string",103,N],[10,"preedit_styling","","pre-edit styling",103,N],[10,"preedit_cursor","","pre-edit cursor",103,N],[10,"delete_surrounding_text","","delete text",103,N],[10,"cursor_position","","set cursor to a new position",103,N],[10,"modifiers_map","","",103,N],[10,"keysym","","keysym",103,N],[10,"grab_keyboard","","grab hardware keyboard",103,[[["self"]],["result",["newproxy"]]]],[10,"key","","forward key event",103,N],[10,"modifiers","","forward modifiers event",103,N],[10,"language","","",103,N],[10,"text_direction","","",103,N],[0,"zwp_input_method_v1","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client","input method",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_v1","",N,N],[4,"Event","","",N,N],[13,"Activate","","activate event",104,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_v1::Event","",104,N],[13,"Deactivate","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_v1","deactivate event",104,N],[12,"context","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_v1::Event","",104,N],[3,"ZwpInputMethodV1","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_v1","",N,N],[8,"RequestsTrait","","",N,N],[0,"zwp_input_panel_v1","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client","interface for implementing keyboards",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",N,N],[13,"GetInputPanelSurface","","",105,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_v1::Request","",105,N],[12,"surface","","",105,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",N,N],[3,"ZwpInputPanelV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_input_panel_surface","","",106,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_input_panel_surface_v1","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client","",N,N],[4,"Position","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",N,N],[13,"CenterBottom","","",107,N],[4,"Request","","",N,N],[13,"SetToplevel","","set the surface type as a keyboard",108,N],[12,"output","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1::Request","",108,N],[12,"position","","",108,N],[13,"SetOverlayPanel","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","set the surface type as an overlay panel",108,N],[4,"Event","","",N,N],[3,"ZwpInputPanelSurfaceV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"set_toplevel","","set the surface type as a keyboard",109,N],[10,"set_overlay_panel","","set the surface type as an overlay panel",109,N],[0,"keyboard_shortcuts_inhibit","smithay_client_toolkit::reexports::protocols::unstable","Protocol for inhibiting the compositor keyboard shortcuts",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1","C interfaces for this protocol",N,N],[7,"zwp_keyboard_shortcuts_inhibit_manager_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::c_interfaces","",N,N],[7,"zwp_keyboard_shortcuts_inhibit_manager_v1_interface","","",N,N],[7,"zwp_keyboard_shortcuts_inhibitor_v1_requests","","",N,N],[7,"zwp_keyboard_shortcuts_inhibitor_v1_events","","",N,N],[7,"zwp_keyboard_shortcuts_inhibitor_v1_interface","","",N,N],[7,"wl_seat_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1","Client-side API of this protocol",N,N],[0,"zwp_keyboard_shortcuts_inhibit_manager_v1","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard grab_manager",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",N,N],[13,"AlreadyInhibited","","the shortcuts are already inhibited for this surface",110,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the keyboard shortcuts inhibitor object",111,N],[13,"InhibitShortcuts","","create a new keyboard shortcuts inhibitor object",111,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1::Request","",111,N],[12,"surface","","",111,N],[12,"seat","","",111,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",N,N],[3,"ZwpKeyboardShortcutsInhibitManagerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the keyboard shortcuts inhibitor object",112,N],[10,"inhibit_shortcuts","","create a new keyboard shortcuts inhibitor object",112,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_keyboard_shortcuts_inhibitor_v1","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard shortcuts inhibitor",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",N,N],[13,"Destroy","","destroy the keyboard shortcuts inhibitor object",113,N],[4,"Event","","",N,N],[13,"Active","","shortcuts are inhibited",114,N],[13,"Inactive","","shortcuts are restored",114,N],[3,"ZwpKeyboardShortcutsInhibitorV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the keyboard shortcuts inhibitor object",115,N],[0,"linux_dmabuf","smithay_client_toolkit::reexports::protocols::unstable","Linux DMA-BUF protocol",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1","C interfaces for this protocol",N,N],[7,"zwp_linux_dmabuf_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::c_interfaces","",N,N],[7,"zwp_linux_dmabuf_v1_events","","",N,N],[7,"zwp_linux_dmabuf_v1_interface","","",N,N],[7,"zwp_linux_buffer_params_v1_requests","","",N,N],[7,"zwp_linux_buffer_params_v1_events","","",N,N],[7,"zwp_linux_buffer_params_v1_interface","","",N,N],[7,"wl_buffer_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1","Client-side API of this protocol",N,N],[0,"zwp_linux_dmabuf_v1","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client","factory for creating dmabuf-based wl_buffers",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",N,N],[13,"Destroy","","unbind the factory",116,N],[13,"CreateParams","","create a temporary object for buffer parameters",116,N],[12,"params_id","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Request","",116,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",N,N],[13,"Format","","supported buffer format",117,N],[12,"format","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Event","",117,N],[13,"Modifier","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","supported buffer format modifier",117,N],[12,"format","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Event","",117,N],[12,"modifier_hi","","",117,N],[12,"modifier_lo","","",117,N],[3,"ZwpLinuxDmabufV1","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","unbind the factory",118,N],[10,"create_params","","create a temporary object for buffer parameters",118,[[["self"]],["result",["newproxy"]]]],[0,"zwp_linux_buffer_params_v1","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client","parameters for creating a dmabuf-based wl_buffer",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",N,N],[13,"AlreadyUsed","","the dmabuf_batch object has already been used to create a wl_buffer",119,N],[13,"PlaneIdx","","plane index out of bounds",119,N],[13,"PlaneSet","","the plane index was already set",119,N],[13,"Incomplete","","missing or too many planes to create a buffer",119,N],[13,"InvalidFormat","","format not supported",119,N],[13,"InvalidDimensions","","invalid width or height",119,N],[13,"OutOfBounds","","offset + stride * height goes out of dmabuf bounds",119,N],[13,"InvalidWlBuffer","","invalid wl_buffer resulted from importing dmabufs via the create_immed request on given buffer_params",119,N],[4,"Flags","","",N,N],[13,"YInvert","","contents are y-inverted",120,N],[13,"Interlaced","","content is interlaced",120,N],[13,"BottomFirst","","bottom field first",120,N],[4,"Request","","",N,N],[13,"Destroy","","delete this object, used or not",121,N],[13,"Add","","add a dmabuf to the temporary set",121,N],[12,"fd","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",121,N],[12,"plane_idx","","",121,N],[12,"offset","","",121,N],[12,"stride","","",121,N],[12,"modifier_hi","","",121,N],[12,"modifier_lo","","",121,N],[13,"Create","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","create a wl_buffer from the given dmabufs",121,N],[12,"width","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",121,N],[12,"height","","",121,N],[12,"format","","",121,N],[12,"flags","","",121,N],[13,"CreateImmed","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","immediately create a wl_buffer from the given dmabufs",121,N],[12,"buffer_id","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",121,N],[12,"width","","",121,N],[12,"height","","",121,N],[12,"format","","",121,N],[12,"flags","","",121,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",N,N],[13,"Created","","buffer creation succeeded",122,N],[12,"buffer","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Event","",122,N],[13,"Failed","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","buffer creation failed",122,N],[3,"ZwpLinuxBufferParamsV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","delete this object, used or not",123,N],[10,"add","","add a dmabuf to the temporary set",123,N],[10,"create","","create a wl_buffer from the given dmabufs",123,N],[10,"create_immed","","immediately create a wl_buffer from the given dmabufs",123,[[["self"],["i32"],["i32"],["u32"],["u32"]],["result",["newproxy"]]]],[0,"pointer_constraints","smithay_client_toolkit::reexports::protocols::unstable","protocol for constraining pointer motions",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1","C interfaces for this protocol",N,N],[7,"zwp_pointer_constraints_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::c_interfaces","",N,N],[7,"zwp_pointer_constraints_v1_interface","","",N,N],[7,"zwp_locked_pointer_v1_requests","","",N,N],[7,"zwp_locked_pointer_v1_events","","",N,N],[7,"zwp_locked_pointer_v1_interface","","",N,N],[7,"zwp_confined_pointer_v1_requests","","",N,N],[7,"zwp_confined_pointer_v1_events","","",N,N],[7,"zwp_confined_pointer_v1_interface","","",N,N],[7,"wl_region_interface","","",N,N],[7,"wl_pointer_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1","Client-side API of this protocol",N,N],[0,"zwp_pointer_constraints_v1","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client","constrain the movement of a pointer",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","wp_pointer_constraints error values",N,N],[13,"AlreadyConstrained","","pointer constraint already requested on that surface",124,N],[4,"Lifetime","","constraint lifetime",N,N],[13,"Oneshot","","the pointer constraint is defunct once deactivated",125,N],[13,"Persistent","","the pointer constraint may reactivate",125,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the pointer constraints manager object",126,N],[13,"LockPointer","","lock pointer to a position",126,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1::Request","",126,N],[12,"surface","","",126,N],[12,"pointer","","",126,N],[12,"region","","",126,N],[12,"lifetime","","",126,N],[13,"ConfinePointer","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","confine pointer to a region",126,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1::Request","",126,N],[12,"surface","","",126,N],[12,"pointer","","",126,N],[12,"region","","",126,N],[12,"lifetime","","",126,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",N,N],[3,"ZwpPointerConstraintsV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the pointer constraints manager object",127,N],[10,"lock_pointer","","lock pointer to a position",127,[[["self"],["proxy"],["proxy"],["option",["proxy"]],["u32"]],["result",["newproxy"]]]],[10,"confine_pointer","","confine pointer to a region",127,[[["self"],["proxy"],["proxy"],["option",["proxy"]],["u32"]],["result",["newproxy"]]]],[0,"zwp_locked_pointer_v1","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client","receive relative pointer motion events",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",N,N],[13,"Destroy","","destroy the locked pointer object",128,N],[13,"SetCursorPositionHint","","set the pointer cursor position hint",128,N],[12,"surface_x","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1::Request","",128,N],[12,"surface_y","","",128,N],[13,"SetRegion","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","set a new lock region",128,N],[12,"region","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1::Request","",128,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",N,N],[13,"Locked","","lock activation event",129,N],[13,"Unlocked","","lock deactivation event",129,N],[3,"ZwpLockedPointerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the locked pointer object",130,N],[10,"set_cursor_position_hint","","set the pointer cursor position hint",130,N],[10,"set_region","","set a new lock region",130,N],[0,"zwp_confined_pointer_v1","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client","confined pointer object",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",N,N],[13,"Destroy","","destroy the confined pointer object",131,N],[13,"SetRegion","","set a new confine region",131,N],[12,"region","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1::Request","",131,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",N,N],[13,"Confined","","pointer confined",132,N],[13,"Unconfined","","pointer unconfined",132,N],[3,"ZwpConfinedPointerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the confined pointer object",133,N],[10,"set_region","","set a new confine region",133,N],[0,"pointer_gestures","smithay_client_toolkit::reexports::protocols::unstable","Pointer gestures protocol",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1","C interfaces for this protocol",N,N],[7,"zwp_pointer_gestures_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::c_interfaces","",N,N],[7,"zwp_pointer_gestures_v1_interface","","",N,N],[7,"zwp_pointer_gesture_swipe_v1_requests","","",N,N],[7,"zwp_pointer_gesture_swipe_v1_events","","",N,N],[7,"zwp_pointer_gesture_swipe_v1_interface","","",N,N],[7,"zwp_pointer_gesture_pinch_v1_requests","","",N,N],[7,"zwp_pointer_gesture_pinch_v1_events","","",N,N],[7,"zwp_pointer_gesture_pinch_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1","Client-side API of this protocol",N,N],[0,"zwp_pointer_gestures_v1","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client","touchpad gestures",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",N,N],[13,"GetSwipeGesture","","get swipe gesture",134,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1::Request","",134,N],[12,"pointer","","",134,N],[13,"GetPinchGesture","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","get pinch gesture",134,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1::Request","",134,N],[12,"pointer","","",134,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",N,N],[3,"ZwpPointerGesturesV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_swipe_gesture","","get swipe gesture",135,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"get_pinch_gesture","","get pinch gesture",135,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_pointer_gesture_swipe_v1","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client","a swipe gesture object",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",N,N],[13,"Destroy","","destroy the pointer swipe gesture object",136,N],[4,"Event","","",N,N],[13,"Begin","","multi-finger swipe begin",137,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",137,N],[12,"time","","",137,N],[12,"surface","","",137,N],[12,"fingers","","",137,N],[13,"Update","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","multi-finger swipe motion",137,N],[12,"time","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",137,N],[12,"dx","","",137,N],[12,"dy","","",137,N],[13,"End","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","multi-finger swipe end",137,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",137,N],[12,"time","","",137,N],[12,"cancelled","","",137,N],[3,"ZwpPointerGestureSwipeV1","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the pointer swipe gesture object",138,N],[0,"zwp_pointer_gesture_pinch_v1","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client","a pinch gesture object",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",N,N],[13,"Destroy","","destroy the pinch gesture object",139,N],[4,"Event","","",N,N],[13,"Begin","","multi-finger pinch begin",140,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",140,N],[12,"time","","",140,N],[12,"surface","","",140,N],[12,"fingers","","",140,N],[13,"Update","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","multi-finger pinch motion",140,N],[12,"time","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",140,N],[12,"dx","","",140,N],[12,"dy","","",140,N],[12,"scale","","",140,N],[12,"rotation","","",140,N],[13,"End","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","multi-finger pinch end",140,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",140,N],[12,"time","","",140,N],[12,"cancelled","","",140,N],[3,"ZwpPointerGesturePinchV1","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the pinch gesture object",141,N],[0,"relative_pointer","smithay_client_toolkit::reexports::protocols::unstable","protocol for relative pointer motion events",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1","C interfaces for this protocol",N,N],[7,"zwp_relative_pointer_manager_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::c_interfaces","",N,N],[7,"zwp_relative_pointer_manager_v1_interface","","",N,N],[7,"zwp_relative_pointer_v1_requests","","",N,N],[7,"zwp_relative_pointer_v1_events","","",N,N],[7,"zwp_relative_pointer_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1","Client-side API of this protocol",N,N],[0,"zwp_relative_pointer_manager_v1","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client","get relative pointer objects",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",N,N],[13,"Destroy","","destroy the relative pointer manager object",142,N],[13,"GetRelativePointer","","get a relative pointer object",142,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1::Request","",142,N],[12,"pointer","","",142,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",N,N],[3,"ZwpRelativePointerManagerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the relative pointer manager object",143,N],[10,"get_relative_pointer","","get a relative pointer object",143,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_relative_pointer_v1","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client","relative pointer object",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",N,N],[13,"Destroy","","release the relative pointer object",144,N],[4,"Event","","",N,N],[13,"RelativeMotion","","relative pointer motion",145,N],[12,"utime_hi","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1::Event","",145,N],[12,"utime_lo","","",145,N],[12,"dx","","",145,N],[12,"dy","","",145,N],[12,"dx_unaccel","","",145,N],[12,"dy_unaccel","","",145,N],[3,"ZwpRelativePointerV1","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","release the relative pointer object",146,N],[0,"tablet","smithay_client_toolkit::reexports::protocols::unstable","Wayland protocol for graphics tablets",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::tablet","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1","C interfaces for this protocol",N,N],[7,"zwp_tablet_manager_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::c_interfaces","",N,N],[7,"zwp_tablet_manager_v1_interface","","",N,N],[7,"zwp_tablet_seat_v1_requests","","",N,N],[7,"zwp_tablet_seat_v1_events","","",N,N],[7,"zwp_tablet_seat_v1_interface","","",N,N],[7,"zwp_tablet_tool_v1_requests","","",N,N],[7,"zwp_tablet_tool_v1_events","","",N,N],[7,"zwp_tablet_tool_v1_interface","","",N,N],[7,"zwp_tablet_v1_requests","","",N,N],[7,"zwp_tablet_v1_events","","",N,N],[7,"zwp_tablet_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1","Client-side API of this protocol",N,N],[0,"zwp_tablet_manager_v1","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client","controller object for graphic tablet devices",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",N,N],[13,"GetTabletSeat","","get the tablet seat",147,N],[12,"tablet_seat","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1::Request","",147,N],[12,"seat","","",147,N],[13,"Destroy","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","release the memory for the tablet manager object",147,N],[4,"Event","","",N,N],[3,"ZwpTabletManagerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_tablet_seat","","get the tablet seat",148,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"destroy","","release the memory for the tablet manager object",148,N],[0,"zwp_tablet_seat_v1","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client","controller object for graphic tablet devices of a seat",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",N,N],[13,"Destroy","","release the memory for the tablet seat object",149,N],[4,"Event","","",N,N],[13,"TabletAdded","","new device notification",150,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1::Event","",150,N],[13,"ToolAdded","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","a new tool has been used with a tablet",150,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1::Event","",150,N],[3,"ZwpTabletSeatV1","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","release the memory for the tablet seat object",151,N],[0,"zwp_tablet_tool_v1","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client","a physical tablet tool",N,N],[4,"Type","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","a physical tool type",N,N],[13,"Pen","","Pen",152,N],[13,"Eraser","","Eraser",152,N],[13,"Brush","","Brush",152,N],[13,"Pencil","","Pencil",152,N],[13,"Airbrush","","Airbrush",152,N],[13,"Finger","","Finger",152,N],[13,"Mouse","","Mouse",152,N],[13,"Lens","","Lens",152,N],[4,"Capability","","capability flags for a tool",N,N],[13,"Tilt","","Tilt axes",153,N],[13,"Pressure","","Pressure axis",153,N],[13,"Distance","","Distance axis",153,N],[13,"Rotation","","Z-rotation axis",153,N],[13,"Slider","","Slider axis",153,N],[13,"Wheel","","Wheel axis",153,N],[4,"ButtonState","","physical button state",N,N],[13,"Released","","button is not pressed",154,N],[13,"Pressed","","button is pressed",154,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",155,N],[4,"Request","","",N,N],[13,"SetCursor","","set the tablet tool's surface",156,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Request","",156,N],[12,"surface","","",156,N],[12,"hotspot_x","","",156,N],[12,"hotspot_y","","",156,N],[13,"Destroy","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","destroy the tool object",156,N],[4,"Event","","",N,N],[13,"Type","","tool type",157,N],[12,"tool_type","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[13,"HardwareSerial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","unique hardware serial number of the tool",157,N],[12,"hardware_serial_hi","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[12,"hardware_serial_lo","","",157,N],[13,"HardwareIdWacom","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","hardware id notification in Wacom's format",157,N],[12,"hardware_id_hi","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[12,"hardware_id_lo","","",157,N],[13,"Capability","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tool capability notification",157,N],[12,"capability","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[13,"Done","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tool description events sequence complete",157,N],[13,"Removed","","tool removed",157,N],[13,"ProximityIn","","proximity in event",157,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[12,"tablet","","",157,N],[12,"surface","","",157,N],[13,"ProximityOut","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","proximity out event",157,N],[13,"Down","","tablet tool is making contact",157,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[13,"Up","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tablet tool is no longer making contact",157,N],[13,"Motion","","motion event",157,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[12,"y","","",157,N],[13,"Pressure","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","pressure change event",157,N],[12,"pressure","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[13,"Distance","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","distance change event",157,N],[12,"distance","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[13,"Tilt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tilt change event",157,N],[12,"tilt_x","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[12,"tilt_y","","",157,N],[13,"Rotation","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","z-rotation change event",157,N],[12,"degrees","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[13,"Slider","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","Slider position change event",157,N],[12,"position","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[13,"Wheel","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","Wheel delta event",157,N],[12,"degrees","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[12,"clicks","","",157,N],[13,"Button","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","button event",157,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[12,"button","","",157,N],[12,"state","","",157,N],[13,"Frame","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","frame event",157,N],[12,"time","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",157,N],[3,"ZwpTabletToolV1","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"set_cursor","","set the tablet tool's surface",158,N],[10,"destroy","","destroy the tool object",158,N],[0,"zwp_tablet_v1","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client","graphics tablet device",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1","",N,N],[13,"Destroy","","destroy the tablet object",159,N],[4,"Event","","",N,N],[13,"Name","","tablet device name",160,N],[12,"name","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",160,N],[13,"Id","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1","tablet device USB vendor/product id",160,N],[12,"vid","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",160,N],[12,"pid","","",160,N],[13,"Path","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1","path to the device",160,N],[12,"path","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",160,N],[13,"Done","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1","tablet description events sequence complete",160,N],[13,"Removed","","tablet removed event",160,N],[3,"ZwpTabletV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the tablet object",161,N],[0,"v2","smithay_client_toolkit::reexports::protocols::unstable::tablet","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2","C interfaces for this protocol",N,N],[7,"zwp_tablet_manager_v2_requests","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::c_interfaces","",N,N],[7,"zwp_tablet_manager_v2_interface","","",N,N],[7,"zwp_tablet_seat_v2_requests","","",N,N],[7,"zwp_tablet_seat_v2_events","","",N,N],[7,"zwp_tablet_seat_v2_interface","","",N,N],[7,"zwp_tablet_tool_v2_requests","","",N,N],[7,"zwp_tablet_tool_v2_events","","",N,N],[7,"zwp_tablet_tool_v2_interface","","",N,N],[7,"zwp_tablet_v2_requests","","",N,N],[7,"zwp_tablet_v2_events","","",N,N],[7,"zwp_tablet_v2_interface","","",N,N],[7,"zwp_tablet_pad_ring_v2_requests","","",N,N],[7,"zwp_tablet_pad_ring_v2_events","","",N,N],[7,"zwp_tablet_pad_ring_v2_interface","","",N,N],[7,"zwp_tablet_pad_strip_v2_requests","","",N,N],[7,"zwp_tablet_pad_strip_v2_events","","",N,N],[7,"zwp_tablet_pad_strip_v2_interface","","",N,N],[7,"zwp_tablet_pad_group_v2_requests","","",N,N],[7,"zwp_tablet_pad_group_v2_events","","",N,N],[7,"zwp_tablet_pad_group_v2_interface","","",N,N],[7,"zwp_tablet_pad_v2_requests","","",N,N],[7,"zwp_tablet_pad_v2_events","","",N,N],[7,"zwp_tablet_pad_v2_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2","Client-side API of this protocol",N,N],[0,"zwp_tablet_manager_v2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client","controller object for graphic tablet devices",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",N,N],[13,"GetTabletSeat","","get the tablet seat",162,N],[12,"tablet_seat","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2::Request","",162,N],[12,"seat","","",162,N],[13,"Destroy","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","release the memory for the tablet manager object",162,N],[4,"Event","","",N,N],[3,"ZwpTabletManagerV2","","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_tablet_seat","","get the tablet seat",163,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"destroy","","release the memory for the tablet manager object",163,N],[0,"zwp_tablet_seat_v2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client","controller object for graphic tablet devices of a seat",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",N,N],[13,"Destroy","","release the memory for the tablet seat object",164,N],[4,"Event","","",N,N],[13,"TabletAdded","","new device notification",165,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",165,N],[13,"ToolAdded","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","a new tool has been used with a tablet",165,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",165,N],[13,"PadAdded","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","new pad notification",165,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",165,N],[3,"ZwpTabletSeatV2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","release the memory for the tablet seat object",166,N],[0,"zwp_tablet_tool_v2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client","a physical tablet tool",N,N],[4,"Type","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","a physical tool type",N,N],[13,"Pen","","Pen",167,N],[13,"Eraser","","Eraser",167,N],[13,"Brush","","Brush",167,N],[13,"Pencil","","Pencil",167,N],[13,"Airbrush","","Airbrush",167,N],[13,"Finger","","Finger",167,N],[13,"Mouse","","Mouse",167,N],[13,"Lens","","Lens",167,N],[4,"Capability","","capability flags for a tool",N,N],[13,"Tilt","","Tilt axes",168,N],[13,"Pressure","","Pressure axis",168,N],[13,"Distance","","Distance axis",168,N],[13,"Rotation","","Z-rotation axis",168,N],[13,"Slider","","Slider axis",168,N],[13,"Wheel","","Wheel axis",168,N],[4,"ButtonState","","physical button state",N,N],[13,"Released","","button is not pressed",169,N],[13,"Pressed","","button is pressed",169,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",170,N],[4,"Request","","",N,N],[13,"SetCursor","","set the tablet tool's surface",171,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Request","",171,N],[12,"surface","","",171,N],[12,"hotspot_x","","",171,N],[12,"hotspot_y","","",171,N],[13,"Destroy","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","destroy the tool object",171,N],[4,"Event","","",N,N],[13,"Type","","tool type",172,N],[12,"tool_type","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[13,"HardwareSerial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","unique hardware serial number of the tool",172,N],[12,"hardware_serial_hi","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[12,"hardware_serial_lo","","",172,N],[13,"HardwareIdWacom","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","hardware id notification in Wacom's format",172,N],[12,"hardware_id_hi","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[12,"hardware_id_lo","","",172,N],[13,"Capability","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tool capability notification",172,N],[12,"capability","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[13,"Done","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tool description events sequence complete",172,N],[13,"Removed","","tool removed",172,N],[13,"ProximityIn","","proximity in event",172,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[12,"tablet","","",172,N],[12,"surface","","",172,N],[13,"ProximityOut","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","proximity out event",172,N],[13,"Down","","tablet tool is making contact",172,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[13,"Up","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tablet tool is no longer making contact",172,N],[13,"Motion","","motion event",172,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[12,"y","","",172,N],[13,"Pressure","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","pressure change event",172,N],[12,"pressure","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[13,"Distance","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","distance change event",172,N],[12,"distance","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[13,"Tilt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tilt change event",172,N],[12,"tilt_x","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[12,"tilt_y","","",172,N],[13,"Rotation","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","z-rotation change event",172,N],[12,"degrees","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[13,"Slider","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","Slider position change event",172,N],[12,"position","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[13,"Wheel","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","Wheel delta event",172,N],[12,"degrees","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[12,"clicks","","",172,N],[13,"Button","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","button event",172,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[12,"button","","",172,N],[12,"state","","",172,N],[13,"Frame","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","frame event",172,N],[12,"time","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",172,N],[3,"ZwpTabletToolV2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",N,N],[8,"RequestsTrait","","",N,N],[10,"set_cursor","","set the tablet tool's surface",173,N],[10,"destroy","","destroy the tool object",173,N],[0,"zwp_tablet_v2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client","graphics tablet device",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2","",N,N],[13,"Destroy","","destroy the tablet object",174,N],[4,"Event","","",N,N],[13,"Name","","tablet device name",175,N],[12,"name","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",175,N],[13,"Id","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2","tablet device USB vendor/product id",175,N],[12,"vid","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",175,N],[12,"pid","","",175,N],[13,"Path","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2","path to the device",175,N],[12,"path","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",175,N],[13,"Done","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2","tablet description events sequence complete",175,N],[13,"Removed","","tablet removed event",175,N],[3,"ZwpTabletV2","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the tablet object",176,N],[0,"zwp_tablet_pad_ring_v2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client","pad ring",N,N],[4,"Source","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","ring axis source",N,N],[13,"Finger","","finger",177,N],[4,"Request","","",N,N],[13,"SetFeedback","","set compositor feedback",178,N],[12,"description","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Request","",178,N],[12,"serial","","",178,N],[13,"Destroy","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","destroy the ring object",178,N],[4,"Event","","",N,N],[13,"Source","","ring event source",179,N],[12,"source","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",179,N],[13,"Angle","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","angle changed",179,N],[12,"degrees","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",179,N],[13,"Stop","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","interaction stopped",179,N],[13,"Frame","","end of a ring event sequence",179,N],[12,"time","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",179,N],[3,"ZwpTabletPadRingV2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",N,N],[8,"RequestsTrait","","",N,N],[10,"set_feedback","","set compositor feedback",180,N],[10,"destroy","","destroy the ring object",180,N],[0,"zwp_tablet_pad_strip_v2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client","pad strip",N,N],[4,"Source","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","strip axis source",N,N],[13,"Finger","","finger",181,N],[4,"Request","","",N,N],[13,"SetFeedback","","set compositor feedback",182,N],[12,"description","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Request","",182,N],[12,"serial","","",182,N],[13,"Destroy","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","destroy the strip object",182,N],[4,"Event","","",N,N],[13,"Source","","strip event source",183,N],[12,"source","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",183,N],[13,"Position","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","position changed",183,N],[12,"position","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",183,N],[13,"Stop","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","interaction stopped",183,N],[13,"Frame","","end of a strip event sequence",183,N],[12,"time","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",183,N],[3,"ZwpTabletPadStripV2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",N,N],[8,"RequestsTrait","","",N,N],[10,"set_feedback","","set compositor feedback",184,N],[10,"destroy","","destroy the strip object",184,N],[0,"zwp_tablet_pad_group_v2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",N,N],[13,"Destroy","","destroy the pad object",185,N],[4,"Event","","",N,N],[13,"Buttons","","buttons announced",186,N],[12,"buttons","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",186,N],[13,"Ring","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","ring announced",186,N],[12,"ring","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",186,N],[13,"Strip","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","strip announced",186,N],[12,"strip","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",186,N],[13,"Modes","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","mode-switch ability announced",186,N],[12,"modes","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",186,N],[13,"Done","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","tablet group description events sequence complete",186,N],[13,"ModeSwitch","","mode switch event",186,N],[12,"time","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",186,N],[12,"serial","","",186,N],[12,"mode","","",186,N],[3,"ZwpTabletPadGroupV2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the pad object",187,N],[0,"zwp_tablet_pad_v2","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",N,N],[4,"ButtonState","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","physical button state",N,N],[13,"Released","","the button is not pressed",188,N],[13,"Pressed","","the button is pressed",188,N],[4,"Request","","",N,N],[13,"SetFeedback","","set compositor feedback",189,N],[12,"button","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Request","",189,N],[12,"description","","",189,N],[12,"serial","","",189,N],[13,"Destroy","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","destroy the pad object",189,N],[4,"Event","","",N,N],[13,"Group","","group announced",190,N],[12,"pad_group","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",190,N],[13,"Path","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","path to the device",190,N],[12,"path","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",190,N],[13,"Buttons","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","buttons announced",190,N],[12,"buttons","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",190,N],[13,"Done","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","pad description event sequence complete",190,N],[13,"Button","","physical button state",190,N],[12,"time","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",190,N],[12,"button","","",190,N],[12,"state","","",190,N],[13,"Enter","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","enter event",190,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",190,N],[12,"tablet","","",190,N],[12,"surface","","",190,N],[13,"Leave","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","enter event",190,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",190,N],[12,"surface","","",190,N],[13,"Removed","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","pad removed event",190,N],[3,"ZwpTabletPadV2","","",N,N],[8,"RequestsTrait","","",N,N],[10,"set_feedback","","set compositor feedback",191,N],[10,"destroy","","destroy the pad object",191,N],[0,"text_input","smithay_client_toolkit::reexports::protocols::unstable","Text input protocol",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::text_input","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1","C interfaces for this protocol",N,N],[7,"zwp_text_input_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::c_interfaces","",N,N],[7,"zwp_text_input_v1_events","","",N,N],[7,"zwp_text_input_v1_interface","","",N,N],[7,"zwp_text_input_manager_v1_requests","","",N,N],[7,"zwp_text_input_manager_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1","Client-side API of this protocol",N,N],[0,"zwp_text_input_v1","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client","text input",N,N],[4,"ContentHint","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","content hint",N,N],[13,"None","","no special behaviour",192,N],[13,"Default","","auto completion, correction and capitalization",192,N],[13,"Password","","hidden and sensitive text",192,N],[13,"AutoCompletion","","suggest word completions",192,N],[13,"AutoCorrection","","suggest word corrections",192,N],[13,"AutoCapitalization","","switch to uppercase letters at the start of a sentence",192,N],[13,"Lowercase","","prefer lowercase letters",192,N],[13,"Uppercase","","prefer uppercase letters",192,N],[13,"Titlecase","","prefer casing for titles and headings (can be language dependent)",192,N],[13,"HiddenText","","characters should be hidden",192,N],[13,"SensitiveData","","typed text should not be stored",192,N],[13,"Latin","","just latin characters should be entered",192,N],[13,"Multiline","","the text input is multiline",192,N],[4,"ContentPurpose","","content purpose",N,N],[13,"Normal","","default input, allowing all characters",193,N],[13,"Alpha","","allow only alphabetic characters",193,N],[13,"Digits","","allow only digits",193,N],[13,"Number","","input a number (including decimal separator and sign)",193,N],[13,"Phone","","input a phone number",193,N],[13,"Url","","input an URL",193,N],[13,"Email","","input an email address",193,N],[13,"Name","","input a name of a person",193,N],[13,"Password","","input a password (combine with password or sensitive_data hint)",193,N],[13,"Date","","input a date",193,N],[13,"Time","","input a time",193,N],[13,"Datetime","","input a date and time",193,N],[13,"Terminal","","input for a terminal",193,N],[4,"PreeditStyle","","",N,N],[13,"Default","","default style for composing text",194,N],[13,"None","","style should be the same as in non-composing text",194,N],[13,"Active","","",194,N],[13,"Inactive","","",194,N],[13,"Highlight","","",194,N],[13,"Underline","","",194,N],[13,"Selection","","",194,N],[13,"Incorrect","","",194,N],[4,"TextDirection","","",N,N],[13,"Auto","","automatic text direction based on text and language",195,N],[13,"Ltr","","left-to-right",195,N],[13,"Rtl","","right-to-left",195,N],[4,"Request","","",N,N],[13,"Activate","","request activation",196,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",196,N],[12,"surface","","",196,N],[13,"Deactivate","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","request deactivation",196,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",196,N],[13,"ShowInputPanel","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","show input panels",196,N],[13,"HideInputPanel","","hide input panels",196,N],[13,"Reset","","reset",196,N],[13,"SetSurroundingText","","sets the surrounding text",196,N],[12,"text","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",196,N],[12,"cursor","","",196,N],[12,"anchor","","",196,N],[13,"SetContentType","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","set content purpose and hint",196,N],[12,"hint","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",196,N],[12,"purpose","","",196,N],[13,"SetCursorRectangle","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",196,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",196,N],[12,"y","","",196,N],[12,"width","","",196,N],[12,"height","","",196,N],[13,"SetPreferredLanguage","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","sets preferred language",196,N],[12,"language","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",196,N],[13,"CommitState","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",196,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",196,N],[13,"InvokeAction","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",196,N],[12,"button","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",196,N],[12,"index","","",196,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",N,N],[13,"Enter","","enter event",197,N],[12,"surface","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[13,"Leave","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","leave event",197,N],[13,"ModifiersMap","","modifiers map",197,N],[12,"map","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[13,"InputPanelState","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","state of the input panel",197,N],[12,"state","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[13,"PreeditString","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit",197,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[12,"text","","",197,N],[12,"commit","","",197,N],[13,"PreeditStyling","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit styling",197,N],[12,"index","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[12,"length","","",197,N],[12,"style","","",197,N],[13,"PreeditCursor","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit cursor",197,N],[12,"index","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[13,"CommitString","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","commit",197,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[12,"text","","",197,N],[13,"CursorPosition","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","set cursor to new position",197,N],[12,"index","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[12,"anchor","","",197,N],[13,"DeleteSurroundingText","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","delete surrounding text",197,N],[12,"index","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[12,"length","","",197,N],[13,"Keysym","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","keysym",197,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[12,"time","","",197,N],[12,"sym","","",197,N],[12,"state","","",197,N],[12,"modifiers","","",197,N],[13,"Language","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","language",197,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[12,"language","","",197,N],[13,"TextDirection","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","text direction",197,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",197,N],[12,"direction","","",197,N],[3,"ZwpTextInputV1","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"activate","","request activation",198,N],[10,"deactivate","","request deactivation",198,N],[10,"show_input_panel","","show input panels",198,N],[10,"hide_input_panel","","hide input panels",198,N],[10,"reset","","reset",198,N],[10,"set_surrounding_text","","sets the surrounding text",198,N],[10,"set_content_type","","set content purpose and hint",198,N],[10,"set_cursor_rectangle","","",198,N],[10,"set_preferred_language","","sets preferred language",198,N],[10,"commit_state","","",198,N],[10,"invoke_action","","",198,N],[0,"zwp_text_input_manager_v1","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client","text input manager",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",N,N],[13,"CreateTextInput","","create text input",199,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1::Request","",199,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",N,N],[3,"ZwpTextInputManagerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_text_input","","create text input",200,[[["self"]],["result",["newproxy"]]]],[0,"xdg_decoration","smithay_client_toolkit::reexports::protocols::unstable","This interface allows a compositor to announce support for server-side decorations. A window decoration is a set of window controls as deemed appropriate by the party managing them, such as user interface components used to move, resize and change a window's state. A client can use this protocol to request being decorated by a supporting compositor. If compositor and client do not negotiate the use of a server-side decoration using this protocol, clients continue to self-decorate as they see fit.",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1","C interfaces for this protocol",N,N],[7,"zxdg_decoration_manager_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::c_interfaces","",N,N],[7,"zxdg_decoration_manager_v1_interface","","",N,N],[7,"zxdg_toplevel_decoration_v1_requests","","",N,N],[7,"zxdg_toplevel_decoration_v1_events","","",N,N],[7,"zxdg_toplevel_decoration_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1","Client-side API of this protocol",N,N],[0,"zxdg_decoration_manager_v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client","window decoration manager",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1","",N,N],[13,"Destroy","","destroy the decoration manager object",201,N],[13,"GetToplevelDecoration","","create a new toplevel decoration object",201,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1::Request","",201,N],[12,"toplevel","","",201,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1","",N,N],[3,"ZxdgDecorationManagerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the decoration manager object",202,N],[10,"get_toplevel_decoration","","create a new toplevel decoration object",202,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zxdg_toplevel_decoration_v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client","decoration object for a toplevel surface",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",N,N],[13,"UnconfiguredBuffer","","xdg_toplevel has a buffer attached before configure",203,N],[13,"AlreadyConstructed","","xdg_toplevel already has a decoration object",203,N],[13,"Orphaned","","xdg_toplevel destroyed before the decoration object",203,N],[4,"Mode","","window decoration modes",N,N],[13,"ClientSide","","no server-side window decoration",204,N],[13,"ServerSide","","server-side window decoration",204,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the decoration object",205,N],[13,"SetMode","","set the decoration mode",205,N],[12,"mode","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1::Request","",205,N],[13,"UnsetMode","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","unset the decoration mode",205,N],[4,"Event","","",N,N],[13,"Configure","","suggest a surface change",206,N],[12,"mode","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1::Event","",206,N],[3,"ZxdgToplevelDecorationV1","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the decoration object",207,N],[10,"set_mode","","set the decoration mode",207,N],[10,"unset_mode","","unset the decoration mode",207,N],[0,"xdg_foreign","smithay_client_toolkit::reexports::protocols::unstable","Protocol for exporting xdg surface handles",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1","C interfaces for this protocol",N,N],[7,"zxdg_exporter_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::c_interfaces","",N,N],[7,"zxdg_exporter_v1_interface","","",N,N],[7,"zxdg_importer_v1_requests","","",N,N],[7,"zxdg_importer_v1_interface","","",N,N],[7,"zxdg_exported_v1_requests","","",N,N],[7,"zxdg_exported_v1_events","","",N,N],[7,"zxdg_exported_v1_interface","","",N,N],[7,"zxdg_imported_v1_requests","","",N,N],[7,"zxdg_imported_v1_events","","",N,N],[7,"zxdg_imported_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1","Client-side API of this protocol",N,N],[0,"zxdg_exporter_v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client","interface for exporting surfaces",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",N,N],[13,"Destroy","","destroy the xdg_exporter object",208,N],[13,"Export","","export a surface",208,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1::Request","",208,N],[12,"surface","","",208,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",N,N],[3,"ZxdgExporterV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_exporter object",209,N],[10,"export","","export a surface",209,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zxdg_importer_v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client","interface for importing surfaces",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",N,N],[13,"Destroy","","destroy the xdg_importer object",210,N],[13,"Import","","import a surface",210,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1::Request","",210,N],[12,"handle","","",210,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",N,N],[3,"ZxdgImporterV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_importer object",211,N],[10,"import","","import a surface",211,[[["self"],["string"]],["result",["newproxy"]]]],[0,"zxdg_exported_v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client","an exported surface handle",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",N,N],[13,"Destroy","","unexport the exported surface",212,N],[4,"Event","","",N,N],[13,"Handle","","the exported surface handle",213,N],[12,"handle","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1::Event","",213,N],[3,"ZxdgExportedV1","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","unexport the exported surface",214,N],[0,"zxdg_imported_v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client","an imported surface handle",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",N,N],[13,"Destroy","","destroy the xdg_imported object",215,N],[13,"SetParentOf","","set as the parent of some surface",215,N],[12,"surface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1::Request","",215,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",N,N],[13,"Destroyed","","the imported surface handle has been destroyed",216,N],[3,"ZxdgImportedV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_imported object",217,N],[10,"set_parent_of","","set as the parent of some surface",217,N],[0,"v2","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2","C interfaces for this protocol",N,N],[7,"zxdg_exporter_v2_requests","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::c_interfaces","",N,N],[7,"zxdg_exporter_v2_interface","","",N,N],[7,"zxdg_importer_v2_requests","","",N,N],[7,"zxdg_importer_v2_interface","","",N,N],[7,"zxdg_exported_v2_requests","","",N,N],[7,"zxdg_exported_v2_events","","",N,N],[7,"zxdg_exported_v2_interface","","",N,N],[7,"zxdg_imported_v2_requests","","",N,N],[7,"zxdg_imported_v2_events","","",N,N],[7,"zxdg_imported_v2_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2","Client-side API of this protocol",N,N],[0,"zxdg_exporter_v2","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client","interface for exporting surfaces",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",N,N],[13,"Destroy","","destroy the xdg_exporter object",218,N],[13,"ExportToplevel","","export a toplevel surface",218,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2::Request","",218,N],[12,"surface","","",218,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",N,N],[3,"ZxdgExporterV2","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_exporter object",219,N],[10,"export_toplevel","","export a toplevel surface",219,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zxdg_importer_v2","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client","interface for importing surfaces",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",N,N],[13,"Destroy","","destroy the xdg_importer object",220,N],[13,"ImportToplevel","","import a toplevel surface",220,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2::Request","",220,N],[12,"handle","","",220,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",N,N],[3,"ZxdgImporterV2","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_importer object",221,N],[10,"import_toplevel","","import a toplevel surface",221,[[["self"],["string"]],["result",["newproxy"]]]],[0,"zxdg_exported_v2","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client","an exported surface handle",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",N,N],[13,"Destroy","","unexport the exported surface",222,N],[4,"Event","","",N,N],[13,"Handle","","the exported surface handle",223,N],[12,"handle","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2::Event","",223,N],[3,"ZxdgExportedV2","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","unexport the exported surface",224,N],[0,"zxdg_imported_v2","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client","an imported surface handle",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",N,N],[13,"Destroy","","destroy the xdg_imported object",225,N],[13,"SetParentOf","","set as the parent of some surface",225,N],[12,"surface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2::Request","",225,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",N,N],[13,"Destroyed","","the imported surface handle has been destroyed",226,N],[3,"ZxdgImportedV2","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_imported object",227,N],[10,"set_parent_of","","set as the parent of some surface",227,N],[0,"xdg_output","smithay_client_toolkit::reexports::protocols::unstable","Protocol to describe output regions",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_output","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1","C interfaces for this protocol",N,N],[7,"zxdg_output_manager_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::c_interfaces","",N,N],[7,"zxdg_output_manager_v1_interface","","",N,N],[7,"zxdg_output_v1_requests","","",N,N],[7,"zxdg_output_v1_events","","",N,N],[7,"zxdg_output_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1","Client-side API of this protocol",N,N],[0,"zxdg_output_manager_v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client","manage xdg_output objects",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",N,N],[13,"Destroy","","destroy the xdg_output_manager object",228,N],[13,"GetXdgOutput","","create an xdg output from a wl_output",228,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1::Request","",228,N],[12,"output","","",228,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",N,N],[3,"ZxdgOutputManagerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_output_manager object",229,N],[10,"get_xdg_output","","create an xdg output from a wl_output",229,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zxdg_output_v1","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client","compositor logical output region",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",N,N],[13,"Destroy","","destroy the xdg_output object",230,N],[4,"Event","","",N,N],[13,"LogicalPosition","","position of the output within the global compositor space",231,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",231,N],[12,"y","","",231,N],[13,"LogicalSize","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1","size of the output in the global compositor space",231,N],[12,"width","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",231,N],[12,"height","","",231,N],[13,"Done","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1","all information about the output have been sent",231,N],[13,"Name","","name of this output",231,N],[12,"name","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",231,N],[13,"Description","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1","human-readable description of this output",231,N],[12,"description","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",231,N],[3,"ZxdgOutputV1","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_output object",232,N],[0,"xdg_shell","smithay_client_toolkit::reexports::protocols::unstable","XDG Shell protocol",N,N],[0,"v5","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5","C interfaces for this protocol",N,N],[7,"xdg_shell_requests","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::c_interfaces","",N,N],[7,"xdg_shell_events","","",N,N],[7,"xdg_shell_interface","","",N,N],[7,"xdg_surface_requests","","",N,N],[7,"xdg_surface_events","","",N,N],[7,"xdg_surface_interface","","",N,N],[7,"xdg_popup_requests","","",N,N],[7,"xdg_popup_events","","",N,N],[7,"xdg_popup_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5","Client-side API of this protocol",N,N],[0,"xdg_shell","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client","create desktop-style surfaces",N,N],[4,"Version","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","latest protocol version",N,N],[13,"Current","","Always the latest version",233,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",234,N],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",234,N],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",234,N],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",234,N],[4,"Request","","",N,N],[13,"Destroy","","destroy xdg_shell",235,N],[13,"UseUnstableVersion","","enable use of this unstable version",235,N],[12,"version","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",235,N],[13,"GetXdgSurface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","create a shell surface from a surface",235,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",235,N],[12,"surface","","",235,N],[13,"GetXdgPopup","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","create a popup for a surface",235,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",235,N],[12,"surface","","",235,N],[12,"parent","","",235,N],[12,"seat","","",235,N],[12,"serial","","",235,N],[12,"x","","",235,N],[12,"y","","",235,N],[13,"Pong","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","respond to a ping event",235,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",235,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",N,N],[13,"Ping","","check if the client is alive",236,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell::Event","",236,N],[3,"XdgShell","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy xdg_shell",237,N],[10,"use_unstable_version","","enable use of this unstable version",237,N],[10,"get_xdg_surface","","create a shell surface from a surface",237,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"get_xdg_popup","","create a popup for a surface",237,[[["self"],["proxy"],["proxy"],["proxy"],["u32"],["i32"],["i32"]],["result",["newproxy"]]]],[10,"pong","","respond to a ping event",237,N],[0,"xdg_surface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client","A desktop window",N,N],[4,"ResizeEdge","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","edge values for resizing",N,N],[13,"None","","",238,N],[13,"Top","","",238,N],[13,"Bottom","","",238,N],[13,"Left","","",238,N],[13,"TopLeft","","",238,N],[13,"BottomLeft","","",238,N],[13,"Right","","",238,N],[13,"TopRight","","",238,N],[13,"BottomRight","","",238,N],[4,"State","","types of state on the surface",N,N],[13,"Maximized","","the surface is maximized",239,N],[13,"Fullscreen","","the surface is fullscreen",239,N],[13,"Resizing","","the surface is being resized",239,N],[13,"Activated","","the surface is now activated",239,N],[4,"Request","","",N,N],[13,"Destroy","","Destroy the xdg_surface",240,N],[13,"SetParent","","set the parent of this surface",240,N],[12,"parent","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[13,"SetTitle","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","set surface title",240,N],[12,"title","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[13,"SetAppId","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","set application ID",240,N],[12,"app_id","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[13,"ShowWindowMenu","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","show the window menu",240,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[12,"serial","","",240,N],[12,"x","","",240,N],[12,"y","","",240,N],[13,"Move","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","start an interactive move",240,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[12,"serial","","",240,N],[13,"Resize","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","start an interactive resize",240,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[12,"serial","","",240,N],[12,"edges","","",240,N],[13,"AckConfigure","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","ack a configure event",240,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[13,"SetWindowGeometry","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","set the new window geometry",240,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[12,"y","","",240,N],[12,"width","","",240,N],[12,"height","","",240,N],[13,"SetMaximized","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","maximize the window",240,N],[13,"UnsetMaximized","","unmaximize the window",240,N],[13,"SetFullscreen","","set the window as fullscreen on a monitor",240,N],[12,"output","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",240,N],[13,"UnsetFullscreen","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",240,N],[13,"SetMinimized","","set the window as minimized",240,N],[4,"Event","","",N,N],[13,"Configure","","suggest a surface change",241,N],[12,"width","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface::Event","",241,N],[12,"height","","",241,N],[12,"states","","",241,N],[12,"serial","","",241,N],[13,"Close","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","surface wants to be closed",241,N],[3,"XdgSurface","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","Destroy the xdg_surface",242,N],[10,"set_parent","","set the parent of this surface",242,N],[10,"set_title","","set surface title",242,N],[10,"set_app_id","","set application ID",242,N],[10,"show_window_menu","","show the window menu",242,N],[10,"_move","","start an interactive move",242,N],[10,"resize","","start an interactive resize",242,N],[10,"ack_configure","","ack a configure event",242,N],[10,"set_window_geometry","","set the new window geometry",242,N],[10,"set_maximized","","maximize the window",242,N],[10,"unset_maximized","","unmaximize the window",242,N],[10,"set_fullscreen","","set the window as fullscreen on a monitor",242,N],[10,"unset_fullscreen","","",242,N],[10,"set_minimized","","set the window as minimized",242,N],[0,"xdg_popup","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client","short-lived, popup surfaces for menus",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_popup","",N,N],[13,"Destroy","","remove xdg_popup interface",243,N],[4,"Event","","",N,N],[13,"PopupDone","","popup interaction is done",244,N],[3,"XdgPopup","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove xdg_popup interface",245,N],[0,"v6","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6","C interfaces for this protocol",N,N],[7,"zxdg_shell_v6_requests","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::c_interfaces","",N,N],[7,"zxdg_shell_v6_events","","",N,N],[7,"zxdg_shell_v6_interface","","",N,N],[7,"zxdg_positioner_v6_requests","","",N,N],[7,"zxdg_positioner_v6_interface","","",N,N],[7,"zxdg_surface_v6_requests","","",N,N],[7,"zxdg_surface_v6_events","","",N,N],[7,"zxdg_surface_v6_interface","","",N,N],[7,"zxdg_toplevel_v6_requests","","",N,N],[7,"zxdg_toplevel_v6_events","","",N,N],[7,"zxdg_toplevel_v6_interface","","",N,N],[7,"zxdg_popup_v6_requests","","",N,N],[7,"zxdg_popup_v6_events","","",N,N],[7,"zxdg_popup_v6_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6","Client-side API of this protocol",N,N],[0,"zxdg_shell_v6","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client","create desktop-style surfaces",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",N,N],[13,"Role","","given wl_surface has another role",246,N],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",246,N],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",246,N],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",246,N],[13,"InvalidSurfaceState","","the client provided an invalid surface state",246,N],[13,"InvalidPositioner","","the client provided an invalid positioner",246,N],[4,"Request","","",N,N],[13,"Destroy","","destroy xdg_shell",247,N],[13,"CreatePositioner","","create a positioner object",247,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",247,N],[13,"GetXdgSurface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","create a shell surface from a surface",247,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",247,N],[12,"surface","","",247,N],[13,"Pong","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","respond to a ping event",247,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",247,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",N,N],[13,"Ping","","check if the client is alive",248,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Event","",248,N],[3,"ZxdgShellV6","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy xdg_shell",249,N],[10,"create_positioner","","create a positioner object",249,[[["self"]],["result",["newproxy"]]]],[10,"get_xdg_surface","","create a shell surface from a surface",249,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"pong","","respond to a ping event",249,N],[0,"zxdg_positioner_v6","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client","child surface positioner",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",N,N],[13,"InvalidInput","","invalid input provided",250,N],[3,"Anchor","","",N,N],[3,"Gravity","","",N,N],[3,"ConstraintAdjustment","","constraint adjustments",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_positioner object",251,N],[13,"SetSize","","set the size of the to-be positioned rectangle",251,N],[12,"width","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",251,N],[12,"height","","",251,N],[13,"SetAnchorRect","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set the anchor rectangle within the parent surface",251,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",251,N],[12,"y","","",251,N],[12,"width","","",251,N],[12,"height","","",251,N],[13,"SetAnchor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set anchor rectangle anchor edges",251,N],[12,"anchor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",251,N],[13,"SetGravity","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set child surface gravity",251,N],[12,"gravity","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",251,N],[13,"SetConstraintAdjustment","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set the adjustment to be done when constrained",251,N],[12,"constraint_adjustment","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",251,N],[13,"SetOffset","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set surface position offset",251,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",251,N],[12,"y","","",251,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",N,N],[3,"ZxdgPositionerV6","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_positioner object",252,N],[10,"set_size","","set the size of the to-be positioned rectangle",252,N],[10,"set_anchor_rect","","set the anchor rectangle within the parent surface",252,N],[10,"set_anchor","","set anchor rectangle anchor edges",252,N],[10,"set_gravity","","set child surface gravity",252,N],[10,"set_constraint_adjustment","","set the adjustment to be done when constrained",252,N],[10,"set_offset","","set surface position offset",252,N],[0,"zxdg_surface_v6","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client","desktop user interface surface base interface",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",N,N],[13,"NotConstructed","","",253,N],[13,"AlreadyConstructed","","",253,N],[13,"UnconfiguredBuffer","","",253,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_surface",254,N],[13,"GetToplevel","","assign the xdg_toplevel surface role",254,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",254,N],[13,"GetPopup","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","assign the xdg_popup surface role",254,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",254,N],[12,"parent","","",254,N],[12,"positioner","","",254,N],[13,"SetWindowGeometry","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","set the new window geometry",254,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",254,N],[12,"y","","",254,N],[12,"width","","",254,N],[12,"height","","",254,N],[13,"AckConfigure","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","ack a configure event",254,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",254,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",N,N],[13,"Configure","","suggest a surface change",255,N],[12,"serial","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Event","",255,N],[3,"ZxdgSurfaceV6","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_surface",256,N],[10,"get_toplevel","","assign the xdg_toplevel surface role",256,[[["self"]],["result",["newproxy"]]]],[10,"get_popup","","assign the xdg_popup surface role",256,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[10,"set_window_geometry","","set the new window geometry",256,N],[10,"ack_configure","","ack a configure event",256,N],[0,"zxdg_toplevel_v6","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client","toplevel surface",N,N],[4,"ResizeEdge","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","edge values for resizing",N,N],[13,"None","","",257,N],[13,"Top","","",257,N],[13,"Bottom","","",257,N],[13,"Left","","",257,N],[13,"TopLeft","","",257,N],[13,"BottomLeft","","",257,N],[13,"Right","","",257,N],[13,"TopRight","","",257,N],[13,"BottomRight","","",257,N],[4,"State","","types of state on the surface",N,N],[13,"Maximized","","the surface is maximized",258,N],[13,"Fullscreen","","the surface is fullscreen",258,N],[13,"Resizing","","the surface is being resized",258,N],[13,"Activated","","the surface is now activated",258,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_toplevel",259,N],[13,"SetParent","","set the parent of this surface",259,N],[12,"parent","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[13,"SetTitle","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set surface title",259,N],[12,"title","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[13,"SetAppId","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set application ID",259,N],[12,"app_id","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[13,"ShowWindowMenu","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","show the window menu",259,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[12,"serial","","",259,N],[12,"x","","",259,N],[12,"y","","",259,N],[13,"Move","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","start an interactive move",259,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[12,"serial","","",259,N],[13,"Resize","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","start an interactive resize",259,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[12,"serial","","",259,N],[12,"edges","","",259,N],[13,"SetMaxSize","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set the maximum size",259,N],[12,"width","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[12,"height","","",259,N],[13,"SetMinSize","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set the minimum size",259,N],[12,"width","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[12,"height","","",259,N],[13,"SetMaximized","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","maximize the window",259,N],[13,"UnsetMaximized","","unmaximize the window",259,N],[13,"SetFullscreen","","set the window as fullscreen on a monitor",259,N],[12,"output","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",259,N],[13,"UnsetFullscreen","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",259,N],[13,"SetMinimized","","set the window as minimized",259,N],[4,"Event","","",N,N],[13,"Configure","","suggest a surface change",260,N],[12,"width","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Event","",260,N],[12,"height","","",260,N],[12,"states","","",260,N],[13,"Close","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","surface wants to be closed",260,N],[3,"ZxdgToplevelV6","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_toplevel",261,N],[10,"set_parent","","set the parent of this surface",261,N],[10,"set_title","","set surface title",261,N],[10,"set_app_id","","set application ID",261,N],[10,"show_window_menu","","show the window menu",261,N],[10,"_move","","start an interactive move",261,N],[10,"resize","","start an interactive resize",261,N],[10,"set_max_size","","set the maximum size",261,N],[10,"set_min_size","","set the minimum size",261,N],[10,"set_maximized","","maximize the window",261,N],[10,"unset_maximized","","unmaximize the window",261,N],[10,"set_fullscreen","","set the window as fullscreen on a monitor",261,N],[10,"unset_fullscreen","","",261,N],[10,"set_minimized","","set the window as minimized",261,N],[0,"zxdg_popup_v6","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client","short-lived, popup surfaces for menus",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",N,N],[13,"InvalidGrab","","tried to grab after being mapped",262,N],[4,"Request","","",N,N],[13,"Destroy","","remove xdg_popup interface",263,N],[13,"Grab","","make the popup take an explicit grab",263,N],[12,"seat","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6::Request","",263,N],[12,"serial","","",263,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",N,N],[13,"Configure","","configure the popup surface",264,N],[12,"x","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6::Event","",264,N],[12,"y","","",264,N],[12,"width","","",264,N],[12,"height","","",264,N],[13,"PopupDone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","popup interaction is done",264,N],[3,"ZxdgPopupV6","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove xdg_popup interface",265,N],[10,"grab","","make the popup take an explicit grab",265,N],[0,"xwayland_keyboard_grab","smithay_client_toolkit::reexports::protocols::unstable","Protocol for grabbing the keyboard from Xwayland",N,N],[0,"v1","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab","",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1","C interfaces for this protocol",N,N],[7,"zwp_xwayland_keyboard_grab_manager_v1_requests","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::c_interfaces","",N,N],[7,"zwp_xwayland_keyboard_grab_manager_v1_interface","","",N,N],[7,"zwp_xwayland_keyboard_grab_v1_requests","","",N,N],[7,"zwp_xwayland_keyboard_grab_v1_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1","Client-side API of this protocol",N,N],[0,"zwp_xwayland_keyboard_grab_manager_v1","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client","context object for keyboard grab manager",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",N,N],[13,"Destroy","","destroy the keyboard grab manager",266,N],[13,"GrabKeyboard","","grab the keyboard to a surface",266,N],[12,"id","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1::Request","",266,N],[12,"surface","","",266,N],[12,"seat","","",266,N],[4,"Event","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",N,N],[3,"ZwpXwaylandKeyboardGrabManagerV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the keyboard grab manager",267,N],[10,"grab_keyboard","","grab the keyboard to a surface",267,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_xwayland_keyboard_grab_v1","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client","interface for grabbing the keyboard",N,N],[4,"Request","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",N,N],[13,"Destroy","","destroy the grabbed keyboard object",268,N],[4,"Event","","",N,N],[3,"ZwpXwaylandKeyboardGrabV1","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the grabbed keyboard object",269,N],[0,"xdg_shell","smithay_client_toolkit::reexports::protocols","XDG Shell protocol",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::xdg_shell","C interfaces for this protocol",N,N],[7,"xdg_wm_base_requests","smithay_client_toolkit::reexports::protocols::xdg_shell::c_interfaces","",N,N],[7,"xdg_wm_base_events","","",N,N],[7,"xdg_wm_base_interface","","",N,N],[7,"xdg_positioner_requests","","",N,N],[7,"xdg_positioner_interface","","",N,N],[7,"xdg_surface_requests","","",N,N],[7,"xdg_surface_events","","",N,N],[7,"xdg_surface_interface","","",N,N],[7,"xdg_toplevel_requests","","",N,N],[7,"xdg_toplevel_events","","",N,N],[7,"xdg_toplevel_interface","","",N,N],[7,"xdg_popup_requests","","",N,N],[7,"xdg_popup_events","","",N,N],[7,"xdg_popup_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::xdg_shell","Client-side API of this protocol",N,N],[0,"xdg_wm_base","smithay_client_toolkit::reexports::protocols::xdg_shell::client","create desktop-style surfaces",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base","",N,N],[13,"Role","","given wl_surface has another role",270,N],[13,"DefunctSurfaces","","xdg_wm_base was destroyed before children",270,N],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",270,N],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",270,N],[13,"InvalidSurfaceState","","the client provided an invalid surface state",270,N],[13,"InvalidPositioner","","the client provided an invalid positioner",270,N],[4,"Request","","",N,N],[13,"Destroy","","destroy xdg_wm_base",271,N],[13,"CreatePositioner","","create a positioner object",271,N],[12,"id","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base::Request","",271,N],[13,"GetXdgSurface","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base","create a shell surface from a surface",271,N],[12,"id","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base::Request","",271,N],[12,"surface","","",271,N],[13,"Pong","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base","respond to a ping event",271,N],[12,"serial","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base::Request","",271,N],[4,"Event","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base","",N,N],[13,"Ping","","check if the client is alive",272,N],[12,"serial","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base::Event","",272,N],[3,"XdgWmBase","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_wm_base","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy xdg_wm_base",273,N],[10,"create_positioner","","create a positioner object",273,[[["self"]],["result",["newproxy"]]]],[10,"get_xdg_surface","","create a shell surface from a surface",273,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"pong","","respond to a ping event",273,N],[0,"xdg_positioner","smithay_client_toolkit::reexports::protocols::xdg_shell::client","child surface positioner",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner","",N,N],[13,"InvalidInput","","invalid input provided",274,N],[4,"Anchor","","",N,N],[13,"None","","",275,N],[13,"Top","","",275,N],[13,"Bottom","","",275,N],[13,"Left","","",275,N],[13,"Right","","",275,N],[13,"TopLeft","","",275,N],[13,"BottomLeft","","",275,N],[13,"TopRight","","",275,N],[13,"BottomRight","","",275,N],[4,"Gravity","","",N,N],[13,"None","","",276,N],[13,"Top","","",276,N],[13,"Bottom","","",276,N],[13,"Left","","",276,N],[13,"Right","","",276,N],[13,"TopLeft","","",276,N],[13,"BottomLeft","","",276,N],[13,"TopRight","","",276,N],[13,"BottomRight","","",276,N],[3,"ConstraintAdjustment","","constraint adjustments",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_positioner object",277,N],[13,"SetSize","","set the size of the to-be positioned rectangle",277,N],[12,"width","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner::Request","",277,N],[12,"height","","",277,N],[13,"SetAnchorRect","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner","set the anchor rectangle within the parent surface",277,N],[12,"x","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner::Request","",277,N],[12,"y","","",277,N],[12,"width","","",277,N],[12,"height","","",277,N],[13,"SetAnchor","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner","set anchor rectangle anchor",277,N],[12,"anchor","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner::Request","",277,N],[13,"SetGravity","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner","set child surface gravity",277,N],[12,"gravity","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner::Request","",277,N],[13,"SetConstraintAdjustment","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner","set the adjustment to be done when constrained",277,N],[12,"constraint_adjustment","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner::Request","",277,N],[13,"SetOffset","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner","set surface position offset",277,N],[12,"x","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner::Request","",277,N],[12,"y","","",277,N],[4,"Event","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_positioner","",N,N],[3,"XdgPositioner","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_positioner object",278,N],[10,"set_size","","set the size of the to-be positioned rectangle",278,N],[10,"set_anchor_rect","","set the anchor rectangle within the parent surface",278,N],[10,"set_anchor","","set anchor rectangle anchor",278,N],[10,"set_gravity","","set child surface gravity",278,N],[10,"set_constraint_adjustment","","set the adjustment to be done when constrained",278,N],[10,"set_offset","","set surface position offset",278,N],[0,"xdg_surface","smithay_client_toolkit::reexports::protocols::xdg_shell::client","desktop user interface surface base interface",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface","",N,N],[13,"NotConstructed","","",279,N],[13,"AlreadyConstructed","","",279,N],[13,"UnconfiguredBuffer","","",279,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_surface",280,N],[13,"GetToplevel","","assign the xdg_toplevel surface role",280,N],[12,"id","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface::Request","",280,N],[13,"GetPopup","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface","assign the xdg_popup surface role",280,N],[12,"id","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface::Request","",280,N],[12,"parent","","",280,N],[12,"positioner","","",280,N],[13,"SetWindowGeometry","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface","set the new window geometry",280,N],[12,"x","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface::Request","",280,N],[12,"y","","",280,N],[12,"width","","",280,N],[12,"height","","",280,N],[13,"AckConfigure","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface","ack a configure event",280,N],[12,"serial","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface::Request","",280,N],[4,"Event","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface","",N,N],[13,"Configure","","suggest a surface change",281,N],[12,"serial","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface::Event","",281,N],[3,"XdgSurface","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_surface","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_surface",282,N],[10,"get_toplevel","","assign the xdg_toplevel surface role",282,[[["self"]],["result",["newproxy"]]]],[10,"get_popup","","assign the xdg_popup surface role",282,[[["self"],["option",["proxy"]],["proxy"]],["result",["newproxy"]]]],[10,"set_window_geometry","","set the new window geometry",282,N],[10,"ack_configure","","ack a configure event",282,N],[0,"xdg_toplevel","smithay_client_toolkit::reexports::protocols::xdg_shell::client","toplevel surface",N,N],[4,"ResizeEdge","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","edge values for resizing",N,N],[13,"None","","",283,N],[13,"Top","","",283,N],[13,"Bottom","","",283,N],[13,"Left","","",283,N],[13,"TopLeft","","",283,N],[13,"BottomLeft","","",283,N],[13,"Right","","",283,N],[13,"TopRight","","",283,N],[13,"BottomRight","","",283,N],[4,"State","","types of state on the surface",N,N],[13,"Maximized","","the surface is maximized",284,N],[13,"Fullscreen","","the surface is fullscreen",284,N],[13,"Resizing","","the surface is being resized",284,N],[13,"Activated","","the surface is now activated",284,N],[13,"TiledLeft","","the surface is tiled",284,N],[13,"TiledRight","","the surface is tiled",284,N],[13,"TiledTop","","the surface is tiled",284,N],[13,"TiledBottom","","the surface is tiled",284,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_toplevel",285,N],[13,"SetParent","","set the parent of this surface",285,N],[12,"parent","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[13,"SetTitle","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","set surface title",285,N],[12,"title","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[13,"SetAppId","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","set application ID",285,N],[12,"app_id","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[13,"ShowWindowMenu","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","show the window menu",285,N],[12,"seat","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[12,"serial","","",285,N],[12,"x","","",285,N],[12,"y","","",285,N],[13,"Move","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","start an interactive move",285,N],[12,"seat","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[12,"serial","","",285,N],[13,"Resize","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","start an interactive resize",285,N],[12,"seat","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[12,"serial","","",285,N],[12,"edges","","",285,N],[13,"SetMaxSize","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","set the maximum size",285,N],[12,"width","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[12,"height","","",285,N],[13,"SetMinSize","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","set the minimum size",285,N],[12,"width","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[12,"height","","",285,N],[13,"SetMaximized","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","maximize the window",285,N],[13,"UnsetMaximized","","unmaximize the window",285,N],[13,"SetFullscreen","","set the window as fullscreen on an output",285,N],[12,"output","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Request","",285,N],[13,"UnsetFullscreen","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","unset the window as fullscreen",285,N],[13,"SetMinimized","","set the window as minimized",285,N],[4,"Event","","",N,N],[13,"Configure","","suggest a surface change",286,N],[12,"width","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel::Event","",286,N],[12,"height","","",286,N],[12,"states","","",286,N],[13,"Close","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_toplevel","surface wants to be closed",286,N],[3,"XdgToplevel","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_toplevel",287,N],[10,"set_parent","","set the parent of this surface",287,N],[10,"set_title","","set surface title",287,N],[10,"set_app_id","","set application ID",287,N],[10,"show_window_menu","","show the window menu",287,N],[10,"_move","","start an interactive move",287,N],[10,"resize","","start an interactive resize",287,N],[10,"set_max_size","","set the maximum size",287,N],[10,"set_min_size","","set the minimum size",287,N],[10,"set_maximized","","maximize the window",287,N],[10,"unset_maximized","","unmaximize the window",287,N],[10,"set_fullscreen","","set the window as fullscreen on an output",287,N],[10,"unset_fullscreen","","unset the window as fullscreen",287,N],[10,"set_minimized","","set the window as minimized",287,N],[0,"xdg_popup","smithay_client_toolkit::reexports::protocols::xdg_shell::client","short-lived, popup surfaces for menus",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_popup","",N,N],[13,"InvalidGrab","","tried to grab after being mapped",288,N],[4,"Request","","",N,N],[13,"Destroy","","remove xdg_popup interface",289,N],[13,"Grab","","make the popup take an explicit grab",289,N],[12,"seat","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_popup::Request","",289,N],[12,"serial","","",289,N],[4,"Event","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_popup","",N,N],[13,"Configure","","configure the popup surface",290,N],[12,"x","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_popup::Event","",290,N],[12,"y","","",290,N],[12,"width","","",290,N],[12,"height","","",290,N],[13,"PopupDone","smithay_client_toolkit::reexports::protocols::xdg_shell::client::xdg_popup","popup interaction is done",290,N],[3,"XdgPopup","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove xdg_popup interface",291,N],[10,"grab","","make the popup take an explicit grab",291,N],[0,"viewporter","smithay_client_toolkit::reexports::protocols","Viewporter protocol",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::viewporter","C interfaces for this protocol",N,N],[7,"wp_viewporter_requests","smithay_client_toolkit::reexports::protocols::viewporter::c_interfaces","",N,N],[7,"wp_viewporter_interface","","",N,N],[7,"wp_viewport_requests","","",N,N],[7,"wp_viewport_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::viewporter","Client-side API of this protocol",N,N],[0,"wp_viewporter","smithay_client_toolkit::reexports::protocols::viewporter::client","surface cropping and scaling",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::viewporter::client::wp_viewporter","",N,N],[13,"ViewportExists","","the surface already has a viewport object associated",292,N],[4,"Request","","",N,N],[13,"Destroy","","unbind from the cropping and scaling interface",293,N],[13,"GetViewport","","extend surface interface for crop and scale",293,N],[12,"id","smithay_client_toolkit::reexports::protocols::viewporter::client::wp_viewporter::Request","",293,N],[12,"surface","","",293,N],[4,"Event","smithay_client_toolkit::reexports::protocols::viewporter::client::wp_viewporter","",N,N],[3,"WpViewporter","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","unbind from the cropping and scaling interface",294,N],[10,"get_viewport","","extend surface interface for crop and scale",294,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"wp_viewport","smithay_client_toolkit::reexports::protocols::viewporter::client","crop and scale interface to a wl_surface",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::viewporter::client::wp_viewport","",N,N],[13,"BadValue","","negative or zero values in width or height",295,N],[13,"BadSize","","destination size is not integer",295,N],[13,"OutOfBuffer","","source rectangle extends outside of the content area",295,N],[13,"NoSurface","","the wl_surface was destroyed",295,N],[4,"Request","","",N,N],[13,"Destroy","","remove scaling and cropping from the surface",296,N],[13,"SetSource","","set the source rectangle for cropping",296,N],[12,"x","smithay_client_toolkit::reexports::protocols::viewporter::client::wp_viewport::Request","",296,N],[12,"y","","",296,N],[12,"width","","",296,N],[12,"height","","",296,N],[13,"SetDestination","smithay_client_toolkit::reexports::protocols::viewporter::client::wp_viewport","set the surface size for scaling",296,N],[12,"width","smithay_client_toolkit::reexports::protocols::viewporter::client::wp_viewport::Request","",296,N],[12,"height","","",296,N],[4,"Event","smithay_client_toolkit::reexports::protocols::viewporter::client::wp_viewport","",N,N],[3,"WpViewport","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove scaling and cropping from the surface",297,N],[10,"set_source","","set the source rectangle for cropping",297,N],[10,"set_destination","","set the surface size for scaling",297,N],[0,"presentation_time","smithay_client_toolkit::reexports::protocols","Presentation time protocol",N,N],[0,"c_interfaces","smithay_client_toolkit::reexports::protocols::presentation_time","C interfaces for this protocol",N,N],[7,"wp_presentation_requests","smithay_client_toolkit::reexports::protocols::presentation_time::c_interfaces","",N,N],[7,"wp_presentation_events","","",N,N],[7,"wp_presentation_interface","","",N,N],[7,"wp_presentation_feedback_events","","",N,N],[7,"wp_presentation_feedback_interface","","",N,N],[0,"client","smithay_client_toolkit::reexports::protocols::presentation_time","Client-side API of this protocol",N,N],[0,"wp_presentation","smithay_client_toolkit::reexports::protocols::presentation_time::client","timed presentation related wl_surface requests",N,N],[4,"Error","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation","fatal presentation errors",N,N],[13,"InvalidTimestamp","","invalid value in tv_nsec",298,N],[13,"InvalidFlag","","invalid flag",298,N],[4,"Request","","",N,N],[13,"Destroy","","unbind from the presentation interface",299,N],[13,"Feedback","","request presentation feedback information",299,N],[12,"surface","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation::Request","",299,N],[12,"callback","","",299,N],[4,"Event","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation","",N,N],[13,"ClockId","","clock ID for timestamps",300,N],[12,"clk_id","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation::Event","",300,N],[3,"WpPresentation","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","unbind from the presentation interface",301,N],[10,"feedback","","request presentation feedback information",301,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"wp_presentation_feedback","smithay_client_toolkit::reexports::protocols::presentation_time::client","presentation time feedback event",N,N],[4,"Kind","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation_feedback","bitmask of flags in presented event",N,N],[13,"Vsync","","presentation was vsync'd",302,N],[13,"HwClock","","hardware provided the presentation timestamp",302,N],[13,"HwCompletion","","hardware signalled the start of the presentation",302,N],[13,"ZeroCopy","","presentation was done zero-copy",302,N],[4,"Request","","",N,N],[4,"Event","","",N,N],[13,"SyncOutput","","presentation synchronized to this output",303,N],[12,"output","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation_feedback::Event","",303,N],[13,"Presented","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation_feedback","the content update was displayed",303,N],[12,"tv_sec_hi","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation_feedback::Event","",303,N],[12,"tv_sec_lo","","",303,N],[12,"tv_nsec","","",303,N],[12,"refresh","","",303,N],[12,"seq_hi","","",303,N],[12,"seq_lo","","",303,N],[12,"flags","","",303,N],[13,"Discarded","smithay_client_toolkit::reexports::protocols::presentation_time::client::wp_presentation_feedback","the content update was not displayed",303,N],[3,"WpPresentationFeedback","","",N,N],[8,"RequestsTrait","","",N,N],[0,"data_device","smithay_client_toolkit","Helpers to handle data device related actions",N,N],[3,"DndAction","smithay_client_toolkit::data_device","drag and drop actions",N,N],[3,"DataDevice","","Handle to support data exchange on a given seat",N,N],[3,"DataOffer","","A data offer for receiving data though copy/paste or drag and drop",N,N],[3,"ReadPipe","","A file descriptor that can only be written to",N,N],[3,"DataSource","","A data source for sending data though copy/paste or drag and drop",N,N],[3,"WritePipe","","A file descriptor that can only be written to",N,N],[4,"DndEvent","","Possible events generated during a drag'n'drop session",N,N],[13,"Enter","","A new drag'n'drop entered your surfaces",304,N],[12,"offer","smithay_client_toolkit::data_device::DndEvent","The associated data offer",304,N],[12,"serial","","A serial associated with the entry of this dnd",304,N],[12,"surface","","The entered surface",304,N],[12,"x","","horizontal location on the surface",304,N],[12,"y","","vertical location on the surface",304,N],[13,"Motion","smithay_client_toolkit::data_device","The drag'n'drop offer moved on the surface",304,N],[12,"offer","smithay_client_toolkit::data_device::DndEvent","The associated data offer",304,N],[12,"time","","The time of this motion",304,N],[12,"x","","new horizontal location",304,N],[12,"y","","new vertical location",304,N],[13,"Leave","smithay_client_toolkit::data_device","The drag'n'drop offer left your surface",304,N],[13,"Drop","","The drag'n'drop was dropped on your surface",304,N],[12,"offer","smithay_client_toolkit::data_device::DndEvent","The associated data offer",304,N],[4,"DataSourceEvent","smithay_client_toolkit::data_device","Possible events a data source needs to react to",N,N],[13,"Send","","Write the offered data for selected mime type",305,N],[12,"mime_type","smithay_client_toolkit::data_device::DataSourceEvent","Requested mime type",305,N],[12,"pipe","","Pipe to write into",305,N],[13,"Target","smithay_client_toolkit::data_device","Target mime type",305,N],[12,"mime_type","smithay_client_toolkit::data_device::DataSourceEvent","The type accepted by the target",305,N],[13,"Action","smithay_client_toolkit::data_device","Notifies of the current selected action for the drag'n'drop",305,N],[12,"action","smithay_client_toolkit::data_device::DataSourceEvent","The action chosen by the target",305,N],[13,"Cancelled","smithay_client_toolkit::data_device","The action using this data source was cancelled.",305,N],[13,"Dropped","","The user performed the \"drop\" during a drag'n'drop",305,N],[13,"Finished","","The action is finished, this data source will not be used any more",305,N],[11,"init_for_seat","","Create the DataDevice helper for this seat.",306,[[["proxy"],["proxy"],["impl"]],["datadevice"]]],[11,"init_for_seat_nonsend","","Create the DataDevice helper for this seat.",306,[[["proxy"],["proxy"],["impl"],["queuetoken"]],["datadevice"]]],[11,"start_drag","","Start a drag'n'drop offer",306,[[["self"],["proxy"],["option",["datasource"]],["dndaction"],["option",["proxy"]],["u32"]]]],[11,"set_selection","","Provide a data source as the new content for the selection",306,[[["self"],["option",["datasource"]],["u32"]]]],[11,"with_selection","","Access the `DataOffer` currently associated with the selection buffer",306,[[["self"],["f"]],["t"]]],[11,"drop","","",306,[[["self"]]]],[11,"with_mime_types","","Access the list of mime types proposed by this offer",307,[[["self"],["f"]],["t"]]],[11,"get_available_actions","","Get the list of available actions for this offer",307,[[["self"]],["dndaction"]]],[11,"get_current_action","","Get the currently set final action for this offer",307,[[["self"]],["dndaction"]]],[11,"accept","","Accept a mime type for receiving data through this offer",307,[[["self"],["option",["string"]]]]],[11,"receive","","Request to receive the data of a given mime type",307,[[["self"],["string"]],["result",["readpipe"]]]],[11,"set_actions","","Notify the send and compositor of the dnd actions you accept",307,[[["self"],["dndaction"],["dndaction"]]]],[11,"finish","","Notify that you are finished with this offer, and will no longer be using it",307,[[["self"]]]],[11,"drop","","",307,[[["self"]]]],[11,"read","","",308,N],[11,"from_raw_fd","","",308,[[["rawfd"]],["readpipe"]]],[11,"as_raw_fd","","",308,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",308,[[["self"]],["rawfd"]]],[11,"new","","Create a new data source",309,N],[11,"new_nonsend","","Create a data source",309,N],[11,"write","","",310,N],[11,"flush","","",310,[[["self"]],["result"]]],[11,"from_raw_fd","","",310,[[["rawfd"]],["writepipe"]]],[11,"as_raw_fd","","",310,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",310,[[["self"]],["rawfd"]]],[0,"keyboard","smithay_client_toolkit","Utilities for keymap interpretation of keyboard input",N,N],[4,"KeyState","smithay_client_toolkit::keyboard","physical key state",N,N],[13,"Released","","key is not pressed",19,N],[13,"Pressed","","key is pressed",19,N],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",N,N],[12,"ctrl","","The \"control\" key",311,N],[12,"alt","","The \"alt\" key",311,N],[12,"shift","","The \"shift\" key",311,N],[12,"caps_lock","","The \"Caps lock\" key",311,N],[12,"logo","","The \"logo\" key",311,N],[12,"num_lock","","The \"Num lock\" key",311,N],[3,"RMLVO","","The RMLVO description of a keymap",N,N],[12,"rules","","The rules file to use",312,N],[12,"model","","The keyboard model by which to interpret keycodes and LEDs",312,N],[12,"layout","","A comma seperated list of layouts (languages) to include in the keymap",312,N],[12,"variant","","A comma seperated list of variants, one per layout, which may modify or augment the respective layout in various ways",312,N],[12,"options","","A comma seprated list of options, through which the user specifies non-layout related preferences, like which key combinations are used for switching layouts, or which key is the Compose key.",312,N],[3,"KeyRepeatEvent","","An event sent at repeated intervals for certain keys determined by xkb_keymap_key_repeats",N,N],[12,"time","","time at which the keypress occured",313,N],[12,"modifiers","","current state of the modifiers",313,N],[12,"rawkey","","raw value of the key",313,N],[12,"keysym","","interpreted symbol of the key",313,N],[12,"utf8","","utf8 interpretation of the entered text",313,N],[4,"KeyRepeatKind","","Determines the behaviour of key repetition",N,N],[13,"Fixed","","keys will be repeated at a set rate and delay",314,N],[12,"rate","smithay_client_toolkit::keyboard::KeyRepeatKind","rate (in milliseconds) at which the repetition should occur",314,N],[12,"delay","","delay (in milliseconds) between a key press and the start of repetition",314,N],[13,"System","smithay_client_toolkit::keyboard","keys will be repeated at a rate and delay set by the wayland server",314,N],[4,"Error","","An error that occured while trying to initialize a mapped keyboard",N,N],[13,"XKBNotFound","","libxkbcommon is not available",315,N],[13,"BadNames","","Provided RMLVO sepcified a keymap that would not be loaded",315,N],[4,"Event","","Events received from a mapped keyboard",N,N],[13,"Enter","","The keyboard focus has entered a surface",316,N],[12,"serial","smithay_client_toolkit::keyboard::Event","serial number of the event",316,N],[12,"surface","","surface that was entered",316,N],[12,"modifiers","","current state of the modifiers",316,N],[12,"rawkeys","","raw values of the currently pressed keys",316,N],[12,"keysyms","","interpreted symbols of the currently pressed keys",316,N],[13,"Leave","smithay_client_toolkit::keyboard","The keyboard focus has left a surface",316,N],[12,"serial","smithay_client_toolkit::keyboard::Event","serial number of the event",316,N],[12,"surface","","surface that was left",316,N],[13,"Key","smithay_client_toolkit::keyboard","A key event occured",316,N],[12,"serial","smithay_client_toolkit::keyboard::Event","serial number of the event",316,N],[12,"time","","time at which the keypress occured",316,N],[12,"modifiers","","current state of the modifiers",316,N],[12,"rawkey","","raw value of the key",316,N],[12,"keysym","","interpreted symbol of the key",316,N],[12,"state","","new state of the key",316,N],[12,"utf8","","utf8 interpretation of the entered text",316,N],[13,"RepeatInfo","smithay_client_toolkit::keyboard","Repetition information advertizing",316,N],[12,"rate","smithay_client_toolkit::keyboard::Event","rate (in milisecond) at which the repetition should occur",316,N],[12,"delay","","delay (in milisecond) between a key press and the start of repetition",316,N],[5,"map_keyboard_auto","smithay_client_toolkit::keyboard","Implement a keyboard to automatically detect the keymap",N,[[["newproxy",["wlkeyboard"]],["impl"]],["result",["proxy"]]]],[5,"map_keyboard_rmlvo","","Implement a keyboard for a predefined keymap",N,[[["newproxy",["wlkeyboard"]],["rmlvo"],["impl"]],["result",["proxy"]]]],[5,"map_keyboard_auto_with_repeat","","Implement a keyboard to automatically detect the keymap and send KeyRepeatEvents at set intervals",N,[[["newproxy",["wlkeyboard"]],["keyrepeatkind"],["impl"],["repeatimpl"]],["result",["proxy"]]]],[5,"map_keyboard_rmlvo_with_repeat","","Implement a keyboard for a predefined keymap and send KeyRepeatEvents at set intervals",N,[[["newproxy",["wlkeyboard"]],["rmlvo"],["keyrepeatkind"],["impl"],["repeatimpl"]],["result",["proxy"]]]],[0,"keysyms","","",N,N],[17,"XKB_KEY_VoidSymbol","smithay_client_toolkit::keyboard::keysyms","",N,N],[17,"XKB_KEY_BackSpace","","",N,N],[17,"XKB_KEY_Tab","","",N,N],[17,"XKB_KEY_Linefeed","","",N,N],[17,"XKB_KEY_Clear","","",N,N],[17,"XKB_KEY_Return","","",N,N],[17,"XKB_KEY_Pause","","",N,N],[17,"XKB_KEY_Scroll_Lock","","",N,N],[17,"XKB_KEY_Sys_Req","","",N,N],[17,"XKB_KEY_Escape","","",N,N],[17,"XKB_KEY_Delete","","",N,N],[17,"XKB_KEY_Multi_key","","",N,N],[17,"XKB_KEY_Codeinput","","",N,N],[17,"XKB_KEY_SingleCandidate","","",N,N],[17,"XKB_KEY_MultipleCandidate","","",N,N],[17,"XKB_KEY_PreviousCandidate","","",N,N],[17,"XKB_KEY_Kanji","","",N,N],[17,"XKB_KEY_Muhenkan","","",N,N],[17,"XKB_KEY_Henkan_Mode","","",N,N],[17,"XKB_KEY_Henkan","","",N,N],[17,"XKB_KEY_Romaji","","",N,N],[17,"XKB_KEY_Hiragana","","",N,N],[17,"XKB_KEY_Katakana","","",N,N],[17,"XKB_KEY_Hiragana_Katakana","","",N,N],[17,"XKB_KEY_Zenkaku","","",N,N],[17,"XKB_KEY_Hankaku","","",N,N],[17,"XKB_KEY_Zenkaku_Hankaku","","",N,N],[17,"XKB_KEY_Touroku","","",N,N],[17,"XKB_KEY_Massyo","","",N,N],[17,"XKB_KEY_Kana_Lock","","",N,N],[17,"XKB_KEY_Kana_Shift","","",N,N],[17,"XKB_KEY_Eisu_Shift","","",N,N],[17,"XKB_KEY_Eisu_toggle","","",N,N],[17,"XKB_KEY_Kanji_Bangou","","",N,N],[17,"XKB_KEY_Zen_Koho","","",N,N],[17,"XKB_KEY_Mae_Koho","","",N,N],[17,"XKB_KEY_Home","","",N,N],[17,"XKB_KEY_Left","","",N,N],[17,"XKB_KEY_Up","","",N,N],[17,"XKB_KEY_Right","","",N,N],[17,"XKB_KEY_Down","","",N,N],[17,"XKB_KEY_Prior","","",N,N],[17,"XKB_KEY_Page_Up","","",N,N],[17,"XKB_KEY_Next","","",N,N],[17,"XKB_KEY_Page_Down","","",N,N],[17,"XKB_KEY_End","","",N,N],[17,"XKB_KEY_Begin","","",N,N],[17,"XKB_KEY_Select","","",N,N],[17,"XKB_KEY_Print","","",N,N],[17,"XKB_KEY_Execute","","",N,N],[17,"XKB_KEY_Insert","","",N,N],[17,"XKB_KEY_Undo","","",N,N],[17,"XKB_KEY_Redo","","",N,N],[17,"XKB_KEY_Menu","","",N,N],[17,"XKB_KEY_Find","","",N,N],[17,"XKB_KEY_Cancel","","",N,N],[17,"XKB_KEY_Help","","",N,N],[17,"XKB_KEY_Break","","",N,N],[17,"XKB_KEY_Mode_switch","","",N,N],[17,"XKB_KEY_script_switch","","",N,N],[17,"XKB_KEY_Num_Lock","","",N,N],[17,"XKB_KEY_KP_Space","","",N,N],[17,"XKB_KEY_KP_Tab","","",N,N],[17,"XKB_KEY_KP_Enter","","",N,N],[17,"XKB_KEY_KP_F1","","",N,N],[17,"XKB_KEY_KP_F2","","",N,N],[17,"XKB_KEY_KP_F3","","",N,N],[17,"XKB_KEY_KP_F4","","",N,N],[17,"XKB_KEY_KP_Home","","",N,N],[17,"XKB_KEY_KP_Left","","",N,N],[17,"XKB_KEY_KP_Up","","",N,N],[17,"XKB_KEY_KP_Right","","",N,N],[17,"XKB_KEY_KP_Down","","",N,N],[17,"XKB_KEY_KP_Prior","","",N,N],[17,"XKB_KEY_KP_Page_Up","","",N,N],[17,"XKB_KEY_KP_Next","","",N,N],[17,"XKB_KEY_KP_Page_Down","","",N,N],[17,"XKB_KEY_KP_End","","",N,N],[17,"XKB_KEY_KP_Begin","","",N,N],[17,"XKB_KEY_KP_Insert","","",N,N],[17,"XKB_KEY_KP_Delete","","",N,N],[17,"XKB_KEY_KP_Equal","","",N,N],[17,"XKB_KEY_KP_Multiply","","",N,N],[17,"XKB_KEY_KP_Add","","",N,N],[17,"XKB_KEY_KP_Separator","","",N,N],[17,"XKB_KEY_KP_Subtract","","",N,N],[17,"XKB_KEY_KP_Decimal","","",N,N],[17,"XKB_KEY_KP_Divide","","",N,N],[17,"XKB_KEY_KP_0","","",N,N],[17,"XKB_KEY_KP_1","","",N,N],[17,"XKB_KEY_KP_2","","",N,N],[17,"XKB_KEY_KP_3","","",N,N],[17,"XKB_KEY_KP_4","","",N,N],[17,"XKB_KEY_KP_5","","",N,N],[17,"XKB_KEY_KP_6","","",N,N],[17,"XKB_KEY_KP_7","","",N,N],[17,"XKB_KEY_KP_8","","",N,N],[17,"XKB_KEY_KP_9","","",N,N],[17,"XKB_KEY_F1","","",N,N],[17,"XKB_KEY_F2","","",N,N],[17,"XKB_KEY_F3","","",N,N],[17,"XKB_KEY_F4","","",N,N],[17,"XKB_KEY_F5","","",N,N],[17,"XKB_KEY_F6","","",N,N],[17,"XKB_KEY_F7","","",N,N],[17,"XKB_KEY_F8","","",N,N],[17,"XKB_KEY_F9","","",N,N],[17,"XKB_KEY_F10","","",N,N],[17,"XKB_KEY_F11","","",N,N],[17,"XKB_KEY_L1","","",N,N],[17,"XKB_KEY_F12","","",N,N],[17,"XKB_KEY_L2","","",N,N],[17,"XKB_KEY_F13","","",N,N],[17,"XKB_KEY_L3","","",N,N],[17,"XKB_KEY_F14","","",N,N],[17,"XKB_KEY_L4","","",N,N],[17,"XKB_KEY_F15","","",N,N],[17,"XKB_KEY_L5","","",N,N],[17,"XKB_KEY_F16","","",N,N],[17,"XKB_KEY_L6","","",N,N],[17,"XKB_KEY_F17","","",N,N],[17,"XKB_KEY_L7","","",N,N],[17,"XKB_KEY_F18","","",N,N],[17,"XKB_KEY_L8","","",N,N],[17,"XKB_KEY_F19","","",N,N],[17,"XKB_KEY_L9","","",N,N],[17,"XKB_KEY_F20","","",N,N],[17,"XKB_KEY_L10","","",N,N],[17,"XKB_KEY_F21","","",N,N],[17,"XKB_KEY_R1","","",N,N],[17,"XKB_KEY_F22","","",N,N],[17,"XKB_KEY_R2","","",N,N],[17,"XKB_KEY_F23","","",N,N],[17,"XKB_KEY_R3","","",N,N],[17,"XKB_KEY_F24","","",N,N],[17,"XKB_KEY_R4","","",N,N],[17,"XKB_KEY_F25","","",N,N],[17,"XKB_KEY_R5","","",N,N],[17,"XKB_KEY_F26","","",N,N],[17,"XKB_KEY_R6","","",N,N],[17,"XKB_KEY_F27","","",N,N],[17,"XKB_KEY_R7","","",N,N],[17,"XKB_KEY_F28","","",N,N],[17,"XKB_KEY_R8","","",N,N],[17,"XKB_KEY_F29","","",N,N],[17,"XKB_KEY_R9","","",N,N],[17,"XKB_KEY_F30","","",N,N],[17,"XKB_KEY_R10","","",N,N],[17,"XKB_KEY_F31","","",N,N],[17,"XKB_KEY_R11","","",N,N],[17,"XKB_KEY_F32","","",N,N],[17,"XKB_KEY_R12","","",N,N],[17,"XKB_KEY_F33","","",N,N],[17,"XKB_KEY_R13","","",N,N],[17,"XKB_KEY_F34","","",N,N],[17,"XKB_KEY_R14","","",N,N],[17,"XKB_KEY_F35","","",N,N],[17,"XKB_KEY_R15","","",N,N],[17,"XKB_KEY_Shift_L","","",N,N],[17,"XKB_KEY_Shift_R","","",N,N],[17,"XKB_KEY_Control_L","","",N,N],[17,"XKB_KEY_Control_R","","",N,N],[17,"XKB_KEY_Caps_Lock","","",N,N],[17,"XKB_KEY_Shift_Lock","","",N,N],[17,"XKB_KEY_Meta_L","","",N,N],[17,"XKB_KEY_Meta_R","","",N,N],[17,"XKB_KEY_Alt_L","","",N,N],[17,"XKB_KEY_Alt_R","","",N,N],[17,"XKB_KEY_Super_L","","",N,N],[17,"XKB_KEY_Super_R","","",N,N],[17,"XKB_KEY_Hyper_L","","",N,N],[17,"XKB_KEY_Hyper_R","","",N,N],[17,"XKB_KEY_ISO_Lock","","",N,N],[17,"XKB_KEY_ISO_Level2_Latch","","",N,N],[17,"XKB_KEY_ISO_Level3_Shift","","",N,N],[17,"XKB_KEY_ISO_Level3_Latch","","",N,N],[17,"XKB_KEY_ISO_Level3_Lock","","",N,N],[17,"XKB_KEY_ISO_Level5_Shift","","",N,N],[17,"XKB_KEY_ISO_Level5_Latch","","",N,N],[17,"XKB_KEY_ISO_Level5_Lock","","",N,N],[17,"XKB_KEY_ISO_Group_Shift","","",N,N],[17,"XKB_KEY_ISO_Group_Latch","","",N,N],[17,"XKB_KEY_ISO_Group_Lock","","",N,N],[17,"XKB_KEY_ISO_Next_Group","","",N,N],[17,"XKB_KEY_ISO_Next_Group_Lock","","",N,N],[17,"XKB_KEY_ISO_Prev_Group","","",N,N],[17,"XKB_KEY_ISO_Prev_Group_Lock","","",N,N],[17,"XKB_KEY_ISO_First_Group","","",N,N],[17,"XKB_KEY_ISO_First_Group_Lock","","",N,N],[17,"XKB_KEY_ISO_Last_Group","","",N,N],[17,"XKB_KEY_ISO_Last_Group_Lock","","",N,N],[17,"XKB_KEY_ISO_Left_Tab","","",N,N],[17,"XKB_KEY_ISO_Move_Line_Up","","",N,N],[17,"XKB_KEY_ISO_Move_Line_Down","","",N,N],[17,"XKB_KEY_ISO_Partial_Line_Up","","",N,N],[17,"XKB_KEY_ISO_Partial_Line_Down","","",N,N],[17,"XKB_KEY_ISO_Partial_Space_Left","","",N,N],[17,"XKB_KEY_ISO_Partial_Space_Right","","",N,N],[17,"XKB_KEY_ISO_Set_Margin_Left","","",N,N],[17,"XKB_KEY_ISO_Set_Margin_Right","","",N,N],[17,"XKB_KEY_ISO_Release_Margin_Left","","",N,N],[17,"XKB_KEY_ISO_Release_Margin_Right","","",N,N],[17,"XKB_KEY_ISO_Release_Both_Margins","","",N,N],[17,"XKB_KEY_ISO_Fast_Cursor_Left","","",N,N],[17,"XKB_KEY_ISO_Fast_Cursor_Right","","",N,N],[17,"XKB_KEY_ISO_Fast_Cursor_Up","","",N,N],[17,"XKB_KEY_ISO_Fast_Cursor_Down","","",N,N],[17,"XKB_KEY_ISO_Continuous_Underline","","",N,N],[17,"XKB_KEY_ISO_Discontinuous_Underline","","",N,N],[17,"XKB_KEY_ISO_Emphasize","","",N,N],[17,"XKB_KEY_ISO_Center_Object","","",N,N],[17,"XKB_KEY_ISO_Enter","","",N,N],[17,"XKB_KEY_dead_grave","","",N,N],[17,"XKB_KEY_dead_acute","","",N,N],[17,"XKB_KEY_dead_circumflex","","",N,N],[17,"XKB_KEY_dead_tilde","","",N,N],[17,"XKB_KEY_dead_perispomeni","","",N,N],[17,"XKB_KEY_dead_macron","","",N,N],[17,"XKB_KEY_dead_breve","","",N,N],[17,"XKB_KEY_dead_abovedot","","",N,N],[17,"XKB_KEY_dead_diaeresis","","",N,N],[17,"XKB_KEY_dead_abovering","","",N,N],[17,"XKB_KEY_dead_doubleacute","","",N,N],[17,"XKB_KEY_dead_caron","","",N,N],[17,"XKB_KEY_dead_cedilla","","",N,N],[17,"XKB_KEY_dead_ogonek","","",N,N],[17,"XKB_KEY_dead_iota","","",N,N],[17,"XKB_KEY_dead_voiced_sound","","",N,N],[17,"XKB_KEY_dead_semivoiced_sound","","",N,N],[17,"XKB_KEY_dead_belowdot","","",N,N],[17,"XKB_KEY_dead_hook","","",N,N],[17,"XKB_KEY_dead_horn","","",N,N],[17,"XKB_KEY_dead_stroke","","",N,N],[17,"XKB_KEY_dead_abovecomma","","",N,N],[17,"XKB_KEY_dead_psili","","",N,N],[17,"XKB_KEY_dead_abovereversedcomma","","",N,N],[17,"XKB_KEY_dead_dasia","","",N,N],[17,"XKB_KEY_dead_doublegrave","","",N,N],[17,"XKB_KEY_dead_belowring","","",N,N],[17,"XKB_KEY_dead_belowmacron","","",N,N],[17,"XKB_KEY_dead_belowcircumflex","","",N,N],[17,"XKB_KEY_dead_belowtilde","","",N,N],[17,"XKB_KEY_dead_belowbreve","","",N,N],[17,"XKB_KEY_dead_belowdiaeresis","","",N,N],[17,"XKB_KEY_dead_invertedbreve","","",N,N],[17,"XKB_KEY_dead_belowcomma","","",N,N],[17,"XKB_KEY_dead_currency","","",N,N],[17,"XKB_KEY_dead_lowline","","",N,N],[17,"XKB_KEY_dead_aboveverticalline","","",N,N],[17,"XKB_KEY_dead_belowverticalline","","",N,N],[17,"XKB_KEY_dead_longsolidusoverlay","","",N,N],[17,"XKB_KEY_dead_a","","",N,N],[17,"XKB_KEY_dead_A","","",N,N],[17,"XKB_KEY_dead_e","","",N,N],[17,"XKB_KEY_dead_E","","",N,N],[17,"XKB_KEY_dead_i","","",N,N],[17,"XKB_KEY_dead_I","","",N,N],[17,"XKB_KEY_dead_o","","",N,N],[17,"XKB_KEY_dead_O","","",N,N],[17,"XKB_KEY_dead_u","","",N,N],[17,"XKB_KEY_dead_U","","",N,N],[17,"XKB_KEY_dead_small_schwa","","",N,N],[17,"XKB_KEY_dead_capital_schwa","","",N,N],[17,"XKB_KEY_dead_greek","","",N,N],[17,"XKB_KEY_First_Virtual_Screen","","",N,N],[17,"XKB_KEY_Prev_Virtual_Screen","","",N,N],[17,"XKB_KEY_Next_Virtual_Screen","","",N,N],[17,"XKB_KEY_Last_Virtual_Screen","","",N,N],[17,"XKB_KEY_Terminate_Server","","",N,N],[17,"XKB_KEY_AccessX_Enable","","",N,N],[17,"XKB_KEY_AccessX_Feedback_Enable","","",N,N],[17,"XKB_KEY_RepeatKeys_Enable","","",N,N],[17,"XKB_KEY_SlowKeys_Enable","","",N,N],[17,"XKB_KEY_BounceKeys_Enable","","",N,N],[17,"XKB_KEY_StickyKeys_Enable","","",N,N],[17,"XKB_KEY_MouseKeys_Enable","","",N,N],[17,"XKB_KEY_MouseKeys_Accel_Enable","","",N,N],[17,"XKB_KEY_Overlay1_Enable","","",N,N],[17,"XKB_KEY_Overlay2_Enable","","",N,N],[17,"XKB_KEY_AudibleBell_Enable","","",N,N],[17,"XKB_KEY_Pointer_Left","","",N,N],[17,"XKB_KEY_Pointer_Right","","",N,N],[17,"XKB_KEY_Pointer_Up","","",N,N],[17,"XKB_KEY_Pointer_Down","","",N,N],[17,"XKB_KEY_Pointer_UpLeft","","",N,N],[17,"XKB_KEY_Pointer_UpRight","","",N,N],[17,"XKB_KEY_Pointer_DownLeft","","",N,N],[17,"XKB_KEY_Pointer_DownRight","","",N,N],[17,"XKB_KEY_Pointer_Button_Dflt","","",N,N],[17,"XKB_KEY_Pointer_Button1","","",N,N],[17,"XKB_KEY_Pointer_Button2","","",N,N],[17,"XKB_KEY_Pointer_Button3","","",N,N],[17,"XKB_KEY_Pointer_Button4","","",N,N],[17,"XKB_KEY_Pointer_Button5","","",N,N],[17,"XKB_KEY_Pointer_DblClick_Dflt","","",N,N],[17,"XKB_KEY_Pointer_DblClick1","","",N,N],[17,"XKB_KEY_Pointer_DblClick2","","",N,N],[17,"XKB_KEY_Pointer_DblClick3","","",N,N],[17,"XKB_KEY_Pointer_DblClick4","","",N,N],[17,"XKB_KEY_Pointer_DblClick5","","",N,N],[17,"XKB_KEY_Pointer_Drag_Dflt","","",N,N],[17,"XKB_KEY_Pointer_Drag1","","",N,N],[17,"XKB_KEY_Pointer_Drag2","","",N,N],[17,"XKB_KEY_Pointer_Drag3","","",N,N],[17,"XKB_KEY_Pointer_Drag4","","",N,N],[17,"XKB_KEY_Pointer_Drag5","","",N,N],[17,"XKB_KEY_Pointer_EnableKeys","","",N,N],[17,"XKB_KEY_Pointer_Accelerate","","",N,N],[17,"XKB_KEY_Pointer_DfltBtnNext","","",N,N],[17,"XKB_KEY_Pointer_DfltBtnPrev","","",N,N],[17,"XKB_KEY_ch","","",N,N],[17,"XKB_KEY_Ch","","",N,N],[17,"XKB_KEY_CH","","",N,N],[17,"XKB_KEY_c_h","","",N,N],[17,"XKB_KEY_C_h","","",N,N],[17,"XKB_KEY_C_H","","",N,N],[17,"XKB_KEY_3270_Duplicate","","",N,N],[17,"XKB_KEY_3270_FieldMark","","",N,N],[17,"XKB_KEY_3270_Right2","","",N,N],[17,"XKB_KEY_3270_Left2","","",N,N],[17,"XKB_KEY_3270_BackTab","","",N,N],[17,"XKB_KEY_3270_EraseEOF","","",N,N],[17,"XKB_KEY_3270_EraseInput","","",N,N],[17,"XKB_KEY_3270_Reset","","",N,N],[17,"XKB_KEY_3270_Quit","","",N,N],[17,"XKB_KEY_3270_PA1","","",N,N],[17,"XKB_KEY_3270_PA2","","",N,N],[17,"XKB_KEY_3270_PA3","","",N,N],[17,"XKB_KEY_3270_Test","","",N,N],[17,"XKB_KEY_3270_Attn","","",N,N],[17,"XKB_KEY_3270_CursorBlink","","",N,N],[17,"XKB_KEY_3270_AltCursor","","",N,N],[17,"XKB_KEY_3270_KeyClick","","",N,N],[17,"XKB_KEY_3270_Jump","","",N,N],[17,"XKB_KEY_3270_Ident","","",N,N],[17,"XKB_KEY_3270_Rule","","",N,N],[17,"XKB_KEY_3270_Copy","","",N,N],[17,"XKB_KEY_3270_Play","","",N,N],[17,"XKB_KEY_3270_Setup","","",N,N],[17,"XKB_KEY_3270_Record","","",N,N],[17,"XKB_KEY_3270_ChangeScreen","","",N,N],[17,"XKB_KEY_3270_DeleteWord","","",N,N],[17,"XKB_KEY_3270_ExSelect","","",N,N],[17,"XKB_KEY_3270_CursorSelect","","",N,N],[17,"XKB_KEY_3270_PrintScreen","","",N,N],[17,"XKB_KEY_3270_Enter","","",N,N],[17,"XKB_KEY_space","","",N,N],[17,"XKB_KEY_exclam","","",N,N],[17,"XKB_KEY_quotedbl","","",N,N],[17,"XKB_KEY_numbersign","","",N,N],[17,"XKB_KEY_dollar","","",N,N],[17,"XKB_KEY_percent","","",N,N],[17,"XKB_KEY_ampersand","","",N,N],[17,"XKB_KEY_apostrophe","","",N,N],[17,"XKB_KEY_quoteright","","",N,N],[17,"XKB_KEY_parenleft","","",N,N],[17,"XKB_KEY_parenright","","",N,N],[17,"XKB_KEY_asterisk","","",N,N],[17,"XKB_KEY_plus","","",N,N],[17,"XKB_KEY_comma","","",N,N],[17,"XKB_KEY_minus","","",N,N],[17,"XKB_KEY_period","","",N,N],[17,"XKB_KEY_slash","","",N,N],[17,"XKB_KEY_0","","",N,N],[17,"XKB_KEY_1","","",N,N],[17,"XKB_KEY_2","","",N,N],[17,"XKB_KEY_3","","",N,N],[17,"XKB_KEY_4","","",N,N],[17,"XKB_KEY_5","","",N,N],[17,"XKB_KEY_6","","",N,N],[17,"XKB_KEY_7","","",N,N],[17,"XKB_KEY_8","","",N,N],[17,"XKB_KEY_9","","",N,N],[17,"XKB_KEY_colon","","",N,N],[17,"XKB_KEY_semicolon","","",N,N],[17,"XKB_KEY_less","","",N,N],[17,"XKB_KEY_equal","","",N,N],[17,"XKB_KEY_greater","","",N,N],[17,"XKB_KEY_question","","",N,N],[17,"XKB_KEY_at","","",N,N],[17,"XKB_KEY_A","","",N,N],[17,"XKB_KEY_B","","",N,N],[17,"XKB_KEY_C","","",N,N],[17,"XKB_KEY_D","","",N,N],[17,"XKB_KEY_E","","",N,N],[17,"XKB_KEY_F","","",N,N],[17,"XKB_KEY_G","","",N,N],[17,"XKB_KEY_H","","",N,N],[17,"XKB_KEY_I","","",N,N],[17,"XKB_KEY_J","","",N,N],[17,"XKB_KEY_K","","",N,N],[17,"XKB_KEY_L","","",N,N],[17,"XKB_KEY_M","","",N,N],[17,"XKB_KEY_N","","",N,N],[17,"XKB_KEY_O","","",N,N],[17,"XKB_KEY_P","","",N,N],[17,"XKB_KEY_Q","","",N,N],[17,"XKB_KEY_R","","",N,N],[17,"XKB_KEY_S","","",N,N],[17,"XKB_KEY_T","","",N,N],[17,"XKB_KEY_U","","",N,N],[17,"XKB_KEY_V","","",N,N],[17,"XKB_KEY_W","","",N,N],[17,"XKB_KEY_X","","",N,N],[17,"XKB_KEY_Y","","",N,N],[17,"XKB_KEY_Z","","",N,N],[17,"XKB_KEY_bracketleft","","",N,N],[17,"XKB_KEY_backslash","","",N,N],[17,"XKB_KEY_bracketright","","",N,N],[17,"XKB_KEY_asciicircum","","",N,N],[17,"XKB_KEY_underscore","","",N,N],[17,"XKB_KEY_grave","","",N,N],[17,"XKB_KEY_quoteleft","","",N,N],[17,"XKB_KEY_a","","",N,N],[17,"XKB_KEY_b","","",N,N],[17,"XKB_KEY_c","","",N,N],[17,"XKB_KEY_d","","",N,N],[17,"XKB_KEY_e","","",N,N],[17,"XKB_KEY_f","","",N,N],[17,"XKB_KEY_g","","",N,N],[17,"XKB_KEY_h","","",N,N],[17,"XKB_KEY_i","","",N,N],[17,"XKB_KEY_j","","",N,N],[17,"XKB_KEY_k","","",N,N],[17,"XKB_KEY_l","","",N,N],[17,"XKB_KEY_m","","",N,N],[17,"XKB_KEY_n","","",N,N],[17,"XKB_KEY_o","","",N,N],[17,"XKB_KEY_p","","",N,N],[17,"XKB_KEY_q","","",N,N],[17,"XKB_KEY_r","","",N,N],[17,"XKB_KEY_s","","",N,N],[17,"XKB_KEY_t","","",N,N],[17,"XKB_KEY_u","","",N,N],[17,"XKB_KEY_v","","",N,N],[17,"XKB_KEY_w","","",N,N],[17,"XKB_KEY_x","","",N,N],[17,"XKB_KEY_y","","",N,N],[17,"XKB_KEY_z","","",N,N],[17,"XKB_KEY_braceleft","","",N,N],[17,"XKB_KEY_bar","","",N,N],[17,"XKB_KEY_braceright","","",N,N],[17,"XKB_KEY_asciitilde","","",N,N],[17,"XKB_KEY_nobreakspace","","",N,N],[17,"XKB_KEY_exclamdown","","",N,N],[17,"XKB_KEY_cent","","",N,N],[17,"XKB_KEY_sterling","","",N,N],[17,"XKB_KEY_currency","","",N,N],[17,"XKB_KEY_yen","","",N,N],[17,"XKB_KEY_brokenbar","","",N,N],[17,"XKB_KEY_section","","",N,N],[17,"XKB_KEY_diaeresis","","",N,N],[17,"XKB_KEY_copyright","","",N,N],[17,"XKB_KEY_ordfeminine","","",N,N],[17,"XKB_KEY_guillemotleft","","",N,N],[17,"XKB_KEY_notsign","","",N,N],[17,"XKB_KEY_hyphen","","",N,N],[17,"XKB_KEY_registered","","",N,N],[17,"XKB_KEY_macron","","",N,N],[17,"XKB_KEY_degree","","",N,N],[17,"XKB_KEY_plusminus","","",N,N],[17,"XKB_KEY_twosuperior","","",N,N],[17,"XKB_KEY_threesuperior","","",N,N],[17,"XKB_KEY_acute","","",N,N],[17,"XKB_KEY_mu","","",N,N],[17,"XKB_KEY_paragraph","","",N,N],[17,"XKB_KEY_periodcentered","","",N,N],[17,"XKB_KEY_cedilla","","",N,N],[17,"XKB_KEY_onesuperior","","",N,N],[17,"XKB_KEY_masculine","","",N,N],[17,"XKB_KEY_guillemotright","","",N,N],[17,"XKB_KEY_onequarter","","",N,N],[17,"XKB_KEY_onehalf","","",N,N],[17,"XKB_KEY_threequarters","","",N,N],[17,"XKB_KEY_questiondown","","",N,N],[17,"XKB_KEY_Agrave","","",N,N],[17,"XKB_KEY_Aacute","","",N,N],[17,"XKB_KEY_Acircumflex","","",N,N],[17,"XKB_KEY_Atilde","","",N,N],[17,"XKB_KEY_Adiaeresis","","",N,N],[17,"XKB_KEY_Aring","","",N,N],[17,"XKB_KEY_AE","","",N,N],[17,"XKB_KEY_Ccedilla","","",N,N],[17,"XKB_KEY_Egrave","","",N,N],[17,"XKB_KEY_Eacute","","",N,N],[17,"XKB_KEY_Ecircumflex","","",N,N],[17,"XKB_KEY_Ediaeresis","","",N,N],[17,"XKB_KEY_Igrave","","",N,N],[17,"XKB_KEY_Iacute","","",N,N],[17,"XKB_KEY_Icircumflex","","",N,N],[17,"XKB_KEY_Idiaeresis","","",N,N],[17,"XKB_KEY_ETH","","",N,N],[17,"XKB_KEY_Eth","","",N,N],[17,"XKB_KEY_Ntilde","","",N,N],[17,"XKB_KEY_Ograve","","",N,N],[17,"XKB_KEY_Oacute","","",N,N],[17,"XKB_KEY_Ocircumflex","","",N,N],[17,"XKB_KEY_Otilde","","",N,N],[17,"XKB_KEY_Odiaeresis","","",N,N],[17,"XKB_KEY_multiply","","",N,N],[17,"XKB_KEY_Oslash","","",N,N],[17,"XKB_KEY_Ooblique","","",N,N],[17,"XKB_KEY_Ugrave","","",N,N],[17,"XKB_KEY_Uacute","","",N,N],[17,"XKB_KEY_Ucircumflex","","",N,N],[17,"XKB_KEY_Udiaeresis","","",N,N],[17,"XKB_KEY_Yacute","","",N,N],[17,"XKB_KEY_THORN","","",N,N],[17,"XKB_KEY_Thorn","","",N,N],[17,"XKB_KEY_ssharp","","",N,N],[17,"XKB_KEY_agrave","","",N,N],[17,"XKB_KEY_aacute","","",N,N],[17,"XKB_KEY_acircumflex","","",N,N],[17,"XKB_KEY_atilde","","",N,N],[17,"XKB_KEY_adiaeresis","","",N,N],[17,"XKB_KEY_aring","","",N,N],[17,"XKB_KEY_ae","","",N,N],[17,"XKB_KEY_ccedilla","","",N,N],[17,"XKB_KEY_egrave","","",N,N],[17,"XKB_KEY_eacute","","",N,N],[17,"XKB_KEY_ecircumflex","","",N,N],[17,"XKB_KEY_ediaeresis","","",N,N],[17,"XKB_KEY_igrave","","",N,N],[17,"XKB_KEY_iacute","","",N,N],[17,"XKB_KEY_icircumflex","","",N,N],[17,"XKB_KEY_idiaeresis","","",N,N],[17,"XKB_KEY_eth","","",N,N],[17,"XKB_KEY_ntilde","","",N,N],[17,"XKB_KEY_ograve","","",N,N],[17,"XKB_KEY_oacute","","",N,N],[17,"XKB_KEY_ocircumflex","","",N,N],[17,"XKB_KEY_otilde","","",N,N],[17,"XKB_KEY_odiaeresis","","",N,N],[17,"XKB_KEY_division","","",N,N],[17,"XKB_KEY_oslash","","",N,N],[17,"XKB_KEY_ooblique","","",N,N],[17,"XKB_KEY_ugrave","","",N,N],[17,"XKB_KEY_uacute","","",N,N],[17,"XKB_KEY_ucircumflex","","",N,N],[17,"XKB_KEY_udiaeresis","","",N,N],[17,"XKB_KEY_yacute","","",N,N],[17,"XKB_KEY_thorn","","",N,N],[17,"XKB_KEY_ydiaeresis","","",N,N],[17,"XKB_KEY_Aogonek","","",N,N],[17,"XKB_KEY_breve","","",N,N],[17,"XKB_KEY_Lstroke","","",N,N],[17,"XKB_KEY_Lcaron","","",N,N],[17,"XKB_KEY_Sacute","","",N,N],[17,"XKB_KEY_Scaron","","",N,N],[17,"XKB_KEY_Scedilla","","",N,N],[17,"XKB_KEY_Tcaron","","",N,N],[17,"XKB_KEY_Zacute","","",N,N],[17,"XKB_KEY_Zcaron","","",N,N],[17,"XKB_KEY_Zabovedot","","",N,N],[17,"XKB_KEY_aogonek","","",N,N],[17,"XKB_KEY_ogonek","","",N,N],[17,"XKB_KEY_lstroke","","",N,N],[17,"XKB_KEY_lcaron","","",N,N],[17,"XKB_KEY_sacute","","",N,N],[17,"XKB_KEY_caron","","",N,N],[17,"XKB_KEY_scaron","","",N,N],[17,"XKB_KEY_scedilla","","",N,N],[17,"XKB_KEY_tcaron","","",N,N],[17,"XKB_KEY_zacute","","",N,N],[17,"XKB_KEY_doubleacute","","",N,N],[17,"XKB_KEY_zcaron","","",N,N],[17,"XKB_KEY_zabovedot","","",N,N],[17,"XKB_KEY_Racute","","",N,N],[17,"XKB_KEY_Abreve","","",N,N],[17,"XKB_KEY_Lacute","","",N,N],[17,"XKB_KEY_Cacute","","",N,N],[17,"XKB_KEY_Ccaron","","",N,N],[17,"XKB_KEY_Eogonek","","",N,N],[17,"XKB_KEY_Ecaron","","",N,N],[17,"XKB_KEY_Dcaron","","",N,N],[17,"XKB_KEY_Dstroke","","",N,N],[17,"XKB_KEY_Nacute","","",N,N],[17,"XKB_KEY_Ncaron","","",N,N],[17,"XKB_KEY_Odoubleacute","","",N,N],[17,"XKB_KEY_Rcaron","","",N,N],[17,"XKB_KEY_Uring","","",N,N],[17,"XKB_KEY_Udoubleacute","","",N,N],[17,"XKB_KEY_Tcedilla","","",N,N],[17,"XKB_KEY_racute","","",N,N],[17,"XKB_KEY_abreve","","",N,N],[17,"XKB_KEY_lacute","","",N,N],[17,"XKB_KEY_cacute","","",N,N],[17,"XKB_KEY_ccaron","","",N,N],[17,"XKB_KEY_eogonek","","",N,N],[17,"XKB_KEY_ecaron","","",N,N],[17,"XKB_KEY_dcaron","","",N,N],[17,"XKB_KEY_dstroke","","",N,N],[17,"XKB_KEY_nacute","","",N,N],[17,"XKB_KEY_ncaron","","",N,N],[17,"XKB_KEY_odoubleacute","","",N,N],[17,"XKB_KEY_rcaron","","",N,N],[17,"XKB_KEY_uring","","",N,N],[17,"XKB_KEY_udoubleacute","","",N,N],[17,"XKB_KEY_tcedilla","","",N,N],[17,"XKB_KEY_abovedot","","",N,N],[17,"XKB_KEY_Hstroke","","",N,N],[17,"XKB_KEY_Hcircumflex","","",N,N],[17,"XKB_KEY_Iabovedot","","",N,N],[17,"XKB_KEY_Gbreve","","",N,N],[17,"XKB_KEY_Jcircumflex","","",N,N],[17,"XKB_KEY_hstroke","","",N,N],[17,"XKB_KEY_hcircumflex","","",N,N],[17,"XKB_KEY_idotless","","",N,N],[17,"XKB_KEY_gbreve","","",N,N],[17,"XKB_KEY_jcircumflex","","",N,N],[17,"XKB_KEY_Cabovedot","","",N,N],[17,"XKB_KEY_Ccircumflex","","",N,N],[17,"XKB_KEY_Gabovedot","","",N,N],[17,"XKB_KEY_Gcircumflex","","",N,N],[17,"XKB_KEY_Ubreve","","",N,N],[17,"XKB_KEY_Scircumflex","","",N,N],[17,"XKB_KEY_cabovedot","","",N,N],[17,"XKB_KEY_ccircumflex","","",N,N],[17,"XKB_KEY_gabovedot","","",N,N],[17,"XKB_KEY_gcircumflex","","",N,N],[17,"XKB_KEY_ubreve","","",N,N],[17,"XKB_KEY_scircumflex","","",N,N],[17,"XKB_KEY_kra","","",N,N],[17,"XKB_KEY_kappa","","",N,N],[17,"XKB_KEY_Rcedilla","","",N,N],[17,"XKB_KEY_Itilde","","",N,N],[17,"XKB_KEY_Lcedilla","","",N,N],[17,"XKB_KEY_Emacron","","",N,N],[17,"XKB_KEY_Gcedilla","","",N,N],[17,"XKB_KEY_Tslash","","",N,N],[17,"XKB_KEY_rcedilla","","",N,N],[17,"XKB_KEY_itilde","","",N,N],[17,"XKB_KEY_lcedilla","","",N,N],[17,"XKB_KEY_emacron","","",N,N],[17,"XKB_KEY_gcedilla","","",N,N],[17,"XKB_KEY_tslash","","",N,N],[17,"XKB_KEY_ENG","","",N,N],[17,"XKB_KEY_eng","","",N,N],[17,"XKB_KEY_Amacron","","",N,N],[17,"XKB_KEY_Iogonek","","",N,N],[17,"XKB_KEY_Eabovedot","","",N,N],[17,"XKB_KEY_Imacron","","",N,N],[17,"XKB_KEY_Ncedilla","","",N,N],[17,"XKB_KEY_Omacron","","",N,N],[17,"XKB_KEY_Kcedilla","","",N,N],[17,"XKB_KEY_Uogonek","","",N,N],[17,"XKB_KEY_Utilde","","",N,N],[17,"XKB_KEY_Umacron","","",N,N],[17,"XKB_KEY_amacron","","",N,N],[17,"XKB_KEY_iogonek","","",N,N],[17,"XKB_KEY_eabovedot","","",N,N],[17,"XKB_KEY_imacron","","",N,N],[17,"XKB_KEY_ncedilla","","",N,N],[17,"XKB_KEY_omacron","","",N,N],[17,"XKB_KEY_kcedilla","","",N,N],[17,"XKB_KEY_uogonek","","",N,N],[17,"XKB_KEY_utilde","","",N,N],[17,"XKB_KEY_umacron","","",N,N],[17,"XKB_KEY_Wcircumflex","","",N,N],[17,"XKB_KEY_wcircumflex","","",N,N],[17,"XKB_KEY_Ycircumflex","","",N,N],[17,"XKB_KEY_ycircumflex","","",N,N],[17,"XKB_KEY_Babovedot","","",N,N],[17,"XKB_KEY_babovedot","","",N,N],[17,"XKB_KEY_Dabovedot","","",N,N],[17,"XKB_KEY_dabovedot","","",N,N],[17,"XKB_KEY_Fabovedot","","",N,N],[17,"XKB_KEY_fabovedot","","",N,N],[17,"XKB_KEY_Mabovedot","","",N,N],[17,"XKB_KEY_mabovedot","","",N,N],[17,"XKB_KEY_Pabovedot","","",N,N],[17,"XKB_KEY_pabovedot","","",N,N],[17,"XKB_KEY_Sabovedot","","",N,N],[17,"XKB_KEY_sabovedot","","",N,N],[17,"XKB_KEY_Tabovedot","","",N,N],[17,"XKB_KEY_tabovedot","","",N,N],[17,"XKB_KEY_Wgrave","","",N,N],[17,"XKB_KEY_wgrave","","",N,N],[17,"XKB_KEY_Wacute","","",N,N],[17,"XKB_KEY_wacute","","",N,N],[17,"XKB_KEY_Wdiaeresis","","",N,N],[17,"XKB_KEY_wdiaeresis","","",N,N],[17,"XKB_KEY_Ygrave","","",N,N],[17,"XKB_KEY_ygrave","","",N,N],[17,"XKB_KEY_OE","","",N,N],[17,"XKB_KEY_oe","","",N,N],[17,"XKB_KEY_Ydiaeresis","","",N,N],[17,"XKB_KEY_overline","","",N,N],[17,"XKB_KEY_kana_fullstop","","",N,N],[17,"XKB_KEY_kana_openingbracket","","",N,N],[17,"XKB_KEY_kana_closingbracket","","",N,N],[17,"XKB_KEY_kana_comma","","",N,N],[17,"XKB_KEY_kana_conjunctive","","",N,N],[17,"XKB_KEY_kana_middledot","","",N,N],[17,"XKB_KEY_kana_WO","","",N,N],[17,"XKB_KEY_kana_a","","",N,N],[17,"XKB_KEY_kana_i","","",N,N],[17,"XKB_KEY_kana_u","","",N,N],[17,"XKB_KEY_kana_e","","",N,N],[17,"XKB_KEY_kana_o","","",N,N],[17,"XKB_KEY_kana_ya","","",N,N],[17,"XKB_KEY_kana_yu","","",N,N],[17,"XKB_KEY_kana_yo","","",N,N],[17,"XKB_KEY_kana_tsu","","",N,N],[17,"XKB_KEY_kana_tu","","",N,N],[17,"XKB_KEY_prolongedsound","","",N,N],[17,"XKB_KEY_kana_A","","",N,N],[17,"XKB_KEY_kana_I","","",N,N],[17,"XKB_KEY_kana_U","","",N,N],[17,"XKB_KEY_kana_E","","",N,N],[17,"XKB_KEY_kana_O","","",N,N],[17,"XKB_KEY_kana_KA","","",N,N],[17,"XKB_KEY_kana_KI","","",N,N],[17,"XKB_KEY_kana_KU","","",N,N],[17,"XKB_KEY_kana_KE","","",N,N],[17,"XKB_KEY_kana_KO","","",N,N],[17,"XKB_KEY_kana_SA","","",N,N],[17,"XKB_KEY_kana_SHI","","",N,N],[17,"XKB_KEY_kana_SU","","",N,N],[17,"XKB_KEY_kana_SE","","",N,N],[17,"XKB_KEY_kana_SO","","",N,N],[17,"XKB_KEY_kana_TA","","",N,N],[17,"XKB_KEY_kana_CHI","","",N,N],[17,"XKB_KEY_kana_TI","","",N,N],[17,"XKB_KEY_kana_TSU","","",N,N],[17,"XKB_KEY_kana_TU","","",N,N],[17,"XKB_KEY_kana_TE","","",N,N],[17,"XKB_KEY_kana_TO","","",N,N],[17,"XKB_KEY_kana_NA","","",N,N],[17,"XKB_KEY_kana_NI","","",N,N],[17,"XKB_KEY_kana_NU","","",N,N],[17,"XKB_KEY_kana_NE","","",N,N],[17,"XKB_KEY_kana_NO","","",N,N],[17,"XKB_KEY_kana_HA","","",N,N],[17,"XKB_KEY_kana_HI","","",N,N],[17,"XKB_KEY_kana_FU","","",N,N],[17,"XKB_KEY_kana_HU","","",N,N],[17,"XKB_KEY_kana_HE","","",N,N],[17,"XKB_KEY_kana_HO","","",N,N],[17,"XKB_KEY_kana_MA","","",N,N],[17,"XKB_KEY_kana_MI","","",N,N],[17,"XKB_KEY_kana_MU","","",N,N],[17,"XKB_KEY_kana_ME","","",N,N],[17,"XKB_KEY_kana_MO","","",N,N],[17,"XKB_KEY_kana_YA","","",N,N],[17,"XKB_KEY_kana_YU","","",N,N],[17,"XKB_KEY_kana_YO","","",N,N],[17,"XKB_KEY_kana_RA","","",N,N],[17,"XKB_KEY_kana_RI","","",N,N],[17,"XKB_KEY_kana_RU","","",N,N],[17,"XKB_KEY_kana_RE","","",N,N],[17,"XKB_KEY_kana_RO","","",N,N],[17,"XKB_KEY_kana_WA","","",N,N],[17,"XKB_KEY_kana_N","","",N,N],[17,"XKB_KEY_voicedsound","","",N,N],[17,"XKB_KEY_semivoicedsound","","",N,N],[17,"XKB_KEY_kana_switch","","",N,N],[17,"XKB_KEY_Farsi_0","","",N,N],[17,"XKB_KEY_Farsi_1","","",N,N],[17,"XKB_KEY_Farsi_2","","",N,N],[17,"XKB_KEY_Farsi_3","","",N,N],[17,"XKB_KEY_Farsi_4","","",N,N],[17,"XKB_KEY_Farsi_5","","",N,N],[17,"XKB_KEY_Farsi_6","","",N,N],[17,"XKB_KEY_Farsi_7","","",N,N],[17,"XKB_KEY_Farsi_8","","",N,N],[17,"XKB_KEY_Farsi_9","","",N,N],[17,"XKB_KEY_Arabic_percent","","",N,N],[17,"XKB_KEY_Arabic_superscript_alef","","",N,N],[17,"XKB_KEY_Arabic_tteh","","",N,N],[17,"XKB_KEY_Arabic_peh","","",N,N],[17,"XKB_KEY_Arabic_tcheh","","",N,N],[17,"XKB_KEY_Arabic_ddal","","",N,N],[17,"XKB_KEY_Arabic_rreh","","",N,N],[17,"XKB_KEY_Arabic_comma","","",N,N],[17,"XKB_KEY_Arabic_fullstop","","",N,N],[17,"XKB_KEY_Arabic_0","","",N,N],[17,"XKB_KEY_Arabic_1","","",N,N],[17,"XKB_KEY_Arabic_2","","",N,N],[17,"XKB_KEY_Arabic_3","","",N,N],[17,"XKB_KEY_Arabic_4","","",N,N],[17,"XKB_KEY_Arabic_5","","",N,N],[17,"XKB_KEY_Arabic_6","","",N,N],[17,"XKB_KEY_Arabic_7","","",N,N],[17,"XKB_KEY_Arabic_8","","",N,N],[17,"XKB_KEY_Arabic_9","","",N,N],[17,"XKB_KEY_Arabic_semicolon","","",N,N],[17,"XKB_KEY_Arabic_question_mark","","",N,N],[17,"XKB_KEY_Arabic_hamza","","",N,N],[17,"XKB_KEY_Arabic_maddaonalef","","",N,N],[17,"XKB_KEY_Arabic_hamzaonalef","","",N,N],[17,"XKB_KEY_Arabic_hamzaonwaw","","",N,N],[17,"XKB_KEY_Arabic_hamzaunderalef","","",N,N],[17,"XKB_KEY_Arabic_hamzaonyeh","","",N,N],[17,"XKB_KEY_Arabic_alef","","",N,N],[17,"XKB_KEY_Arabic_beh","","",N,N],[17,"XKB_KEY_Arabic_tehmarbuta","","",N,N],[17,"XKB_KEY_Arabic_teh","","",N,N],[17,"XKB_KEY_Arabic_theh","","",N,N],[17,"XKB_KEY_Arabic_jeem","","",N,N],[17,"XKB_KEY_Arabic_hah","","",N,N],[17,"XKB_KEY_Arabic_khah","","",N,N],[17,"XKB_KEY_Arabic_dal","","",N,N],[17,"XKB_KEY_Arabic_thal","","",N,N],[17,"XKB_KEY_Arabic_ra","","",N,N],[17,"XKB_KEY_Arabic_zain","","",N,N],[17,"XKB_KEY_Arabic_seen","","",N,N],[17,"XKB_KEY_Arabic_sheen","","",N,N],[17,"XKB_KEY_Arabic_sad","","",N,N],[17,"XKB_KEY_Arabic_dad","","",N,N],[17,"XKB_KEY_Arabic_tah","","",N,N],[17,"XKB_KEY_Arabic_zah","","",N,N],[17,"XKB_KEY_Arabic_ain","","",N,N],[17,"XKB_KEY_Arabic_ghain","","",N,N],[17,"XKB_KEY_Arabic_tatweel","","",N,N],[17,"XKB_KEY_Arabic_feh","","",N,N],[17,"XKB_KEY_Arabic_qaf","","",N,N],[17,"XKB_KEY_Arabic_kaf","","",N,N],[17,"XKB_KEY_Arabic_lam","","",N,N],[17,"XKB_KEY_Arabic_meem","","",N,N],[17,"XKB_KEY_Arabic_noon","","",N,N],[17,"XKB_KEY_Arabic_ha","","",N,N],[17,"XKB_KEY_Arabic_heh","","",N,N],[17,"XKB_KEY_Arabic_waw","","",N,N],[17,"XKB_KEY_Arabic_alefmaksura","","",N,N],[17,"XKB_KEY_Arabic_yeh","","",N,N],[17,"XKB_KEY_Arabic_fathatan","","",N,N],[17,"XKB_KEY_Arabic_dammatan","","",N,N],[17,"XKB_KEY_Arabic_kasratan","","",N,N],[17,"XKB_KEY_Arabic_fatha","","",N,N],[17,"XKB_KEY_Arabic_damma","","",N,N],[17,"XKB_KEY_Arabic_kasra","","",N,N],[17,"XKB_KEY_Arabic_shadda","","",N,N],[17,"XKB_KEY_Arabic_sukun","","",N,N],[17,"XKB_KEY_Arabic_madda_above","","",N,N],[17,"XKB_KEY_Arabic_hamza_above","","",N,N],[17,"XKB_KEY_Arabic_hamza_below","","",N,N],[17,"XKB_KEY_Arabic_jeh","","",N,N],[17,"XKB_KEY_Arabic_veh","","",N,N],[17,"XKB_KEY_Arabic_keheh","","",N,N],[17,"XKB_KEY_Arabic_gaf","","",N,N],[17,"XKB_KEY_Arabic_noon_ghunna","","",N,N],[17,"XKB_KEY_Arabic_heh_doachashmee","","",N,N],[17,"XKB_KEY_Farsi_yeh","","",N,N],[17,"XKB_KEY_Arabic_farsi_yeh","","",N,N],[17,"XKB_KEY_Arabic_yeh_baree","","",N,N],[17,"XKB_KEY_Arabic_heh_goal","","",N,N],[17,"XKB_KEY_Arabic_switch","","",N,N],[17,"XKB_KEY_Cyrillic_GHE_bar","","",N,N],[17,"XKB_KEY_Cyrillic_ghe_bar","","",N,N],[17,"XKB_KEY_Cyrillic_ZHE_descender","","",N,N],[17,"XKB_KEY_Cyrillic_zhe_descender","","",N,N],[17,"XKB_KEY_Cyrillic_KA_descender","","",N,N],[17,"XKB_KEY_Cyrillic_ka_descender","","",N,N],[17,"XKB_KEY_Cyrillic_KA_vertstroke","","",N,N],[17,"XKB_KEY_Cyrillic_ka_vertstroke","","",N,N],[17,"XKB_KEY_Cyrillic_EN_descender","","",N,N],[17,"XKB_KEY_Cyrillic_en_descender","","",N,N],[17,"XKB_KEY_Cyrillic_U_straight","","",N,N],[17,"XKB_KEY_Cyrillic_u_straight","","",N,N],[17,"XKB_KEY_Cyrillic_U_straight_bar","","",N,N],[17,"XKB_KEY_Cyrillic_u_straight_bar","","",N,N],[17,"XKB_KEY_Cyrillic_HA_descender","","",N,N],[17,"XKB_KEY_Cyrillic_ha_descender","","",N,N],[17,"XKB_KEY_Cyrillic_CHE_descender","","",N,N],[17,"XKB_KEY_Cyrillic_che_descender","","",N,N],[17,"XKB_KEY_Cyrillic_CHE_vertstroke","","",N,N],[17,"XKB_KEY_Cyrillic_che_vertstroke","","",N,N],[17,"XKB_KEY_Cyrillic_SHHA","","",N,N],[17,"XKB_KEY_Cyrillic_shha","","",N,N],[17,"XKB_KEY_Cyrillic_SCHWA","","",N,N],[17,"XKB_KEY_Cyrillic_schwa","","",N,N],[17,"XKB_KEY_Cyrillic_I_macron","","",N,N],[17,"XKB_KEY_Cyrillic_i_macron","","",N,N],[17,"XKB_KEY_Cyrillic_O_bar","","",N,N],[17,"XKB_KEY_Cyrillic_o_bar","","",N,N],[17,"XKB_KEY_Cyrillic_U_macron","","",N,N],[17,"XKB_KEY_Cyrillic_u_macron","","",N,N],[17,"XKB_KEY_Serbian_dje","","",N,N],[17,"XKB_KEY_Macedonia_gje","","",N,N],[17,"XKB_KEY_Cyrillic_io","","",N,N],[17,"XKB_KEY_Ukrainian_ie","","",N,N],[17,"XKB_KEY_Ukranian_je","","",N,N],[17,"XKB_KEY_Macedonia_dse","","",N,N],[17,"XKB_KEY_Ukrainian_i","","",N,N],[17,"XKB_KEY_Ukranian_i","","",N,N],[17,"XKB_KEY_Ukrainian_yi","","",N,N],[17,"XKB_KEY_Ukranian_yi","","",N,N],[17,"XKB_KEY_Cyrillic_je","","",N,N],[17,"XKB_KEY_Serbian_je","","",N,N],[17,"XKB_KEY_Cyrillic_lje","","",N,N],[17,"XKB_KEY_Serbian_lje","","",N,N],[17,"XKB_KEY_Cyrillic_nje","","",N,N],[17,"XKB_KEY_Serbian_nje","","",N,N],[17,"XKB_KEY_Serbian_tshe","","",N,N],[17,"XKB_KEY_Macedonia_kje","","",N,N],[17,"XKB_KEY_Ukrainian_ghe_with_upturn","","",N,N],[17,"XKB_KEY_Byelorussian_shortu","","",N,N],[17,"XKB_KEY_Cyrillic_dzhe","","",N,N],[17,"XKB_KEY_Serbian_dze","","",N,N],[17,"XKB_KEY_numerosign","","",N,N],[17,"XKB_KEY_Serbian_DJE","","",N,N],[17,"XKB_KEY_Macedonia_GJE","","",N,N],[17,"XKB_KEY_Cyrillic_IO","","",N,N],[17,"XKB_KEY_Ukrainian_IE","","",N,N],[17,"XKB_KEY_Ukranian_JE","","",N,N],[17,"XKB_KEY_Macedonia_DSE","","",N,N],[17,"XKB_KEY_Ukrainian_I","","",N,N],[17,"XKB_KEY_Ukranian_I","","",N,N],[17,"XKB_KEY_Ukrainian_YI","","",N,N],[17,"XKB_KEY_Ukranian_YI","","",N,N],[17,"XKB_KEY_Cyrillic_JE","","",N,N],[17,"XKB_KEY_Serbian_JE","","",N,N],[17,"XKB_KEY_Cyrillic_LJE","","",N,N],[17,"XKB_KEY_Serbian_LJE","","",N,N],[17,"XKB_KEY_Cyrillic_NJE","","",N,N],[17,"XKB_KEY_Serbian_NJE","","",N,N],[17,"XKB_KEY_Serbian_TSHE","","",N,N],[17,"XKB_KEY_Macedonia_KJE","","",N,N],[17,"XKB_KEY_Ukrainian_GHE_WITH_UPTURN","","",N,N],[17,"XKB_KEY_Byelorussian_SHORTU","","",N,N],[17,"XKB_KEY_Cyrillic_DZHE","","",N,N],[17,"XKB_KEY_Serbian_DZE","","",N,N],[17,"XKB_KEY_Cyrillic_yu","","",N,N],[17,"XKB_KEY_Cyrillic_a","","",N,N],[17,"XKB_KEY_Cyrillic_be","","",N,N],[17,"XKB_KEY_Cyrillic_tse","","",N,N],[17,"XKB_KEY_Cyrillic_de","","",N,N],[17,"XKB_KEY_Cyrillic_ie","","",N,N],[17,"XKB_KEY_Cyrillic_ef","","",N,N],[17,"XKB_KEY_Cyrillic_ghe","","",N,N],[17,"XKB_KEY_Cyrillic_ha","","",N,N],[17,"XKB_KEY_Cyrillic_i","","",N,N],[17,"XKB_KEY_Cyrillic_shorti","","",N,N],[17,"XKB_KEY_Cyrillic_ka","","",N,N],[17,"XKB_KEY_Cyrillic_el","","",N,N],[17,"XKB_KEY_Cyrillic_em","","",N,N],[17,"XKB_KEY_Cyrillic_en","","",N,N],[17,"XKB_KEY_Cyrillic_o","","",N,N],[17,"XKB_KEY_Cyrillic_pe","","",N,N],[17,"XKB_KEY_Cyrillic_ya","","",N,N],[17,"XKB_KEY_Cyrillic_er","","",N,N],[17,"XKB_KEY_Cyrillic_es","","",N,N],[17,"XKB_KEY_Cyrillic_te","","",N,N],[17,"XKB_KEY_Cyrillic_u","","",N,N],[17,"XKB_KEY_Cyrillic_zhe","","",N,N],[17,"XKB_KEY_Cyrillic_ve","","",N,N],[17,"XKB_KEY_Cyrillic_softsign","","",N,N],[17,"XKB_KEY_Cyrillic_yeru","","",N,N],[17,"XKB_KEY_Cyrillic_ze","","",N,N],[17,"XKB_KEY_Cyrillic_sha","","",N,N],[17,"XKB_KEY_Cyrillic_e","","",N,N],[17,"XKB_KEY_Cyrillic_shcha","","",N,N],[17,"XKB_KEY_Cyrillic_che","","",N,N],[17,"XKB_KEY_Cyrillic_hardsign","","",N,N],[17,"XKB_KEY_Cyrillic_YU","","",N,N],[17,"XKB_KEY_Cyrillic_A","","",N,N],[17,"XKB_KEY_Cyrillic_BE","","",N,N],[17,"XKB_KEY_Cyrillic_TSE","","",N,N],[17,"XKB_KEY_Cyrillic_DE","","",N,N],[17,"XKB_KEY_Cyrillic_IE","","",N,N],[17,"XKB_KEY_Cyrillic_EF","","",N,N],[17,"XKB_KEY_Cyrillic_GHE","","",N,N],[17,"XKB_KEY_Cyrillic_HA","","",N,N],[17,"XKB_KEY_Cyrillic_I","","",N,N],[17,"XKB_KEY_Cyrillic_SHORTI","","",N,N],[17,"XKB_KEY_Cyrillic_KA","","",N,N],[17,"XKB_KEY_Cyrillic_EL","","",N,N],[17,"XKB_KEY_Cyrillic_EM","","",N,N],[17,"XKB_KEY_Cyrillic_EN","","",N,N],[17,"XKB_KEY_Cyrillic_O","","",N,N],[17,"XKB_KEY_Cyrillic_PE","","",N,N],[17,"XKB_KEY_Cyrillic_YA","","",N,N],[17,"XKB_KEY_Cyrillic_ER","","",N,N],[17,"XKB_KEY_Cyrillic_ES","","",N,N],[17,"XKB_KEY_Cyrillic_TE","","",N,N],[17,"XKB_KEY_Cyrillic_U","","",N,N],[17,"XKB_KEY_Cyrillic_ZHE","","",N,N],[17,"XKB_KEY_Cyrillic_VE","","",N,N],[17,"XKB_KEY_Cyrillic_SOFTSIGN","","",N,N],[17,"XKB_KEY_Cyrillic_YERU","","",N,N],[17,"XKB_KEY_Cyrillic_ZE","","",N,N],[17,"XKB_KEY_Cyrillic_SHA","","",N,N],[17,"XKB_KEY_Cyrillic_E","","",N,N],[17,"XKB_KEY_Cyrillic_SHCHA","","",N,N],[17,"XKB_KEY_Cyrillic_CHE","","",N,N],[17,"XKB_KEY_Cyrillic_HARDSIGN","","",N,N],[17,"XKB_KEY_Greek_ALPHAaccent","","",N,N],[17,"XKB_KEY_Greek_EPSILONaccent","","",N,N],[17,"XKB_KEY_Greek_ETAaccent","","",N,N],[17,"XKB_KEY_Greek_IOTAaccent","","",N,N],[17,"XKB_KEY_Greek_IOTAdieresis","","",N,N],[17,"XKB_KEY_Greek_IOTAdiaeresis","","",N,N],[17,"XKB_KEY_Greek_OMICRONaccent","","",N,N],[17,"XKB_KEY_Greek_UPSILONaccent","","",N,N],[17,"XKB_KEY_Greek_UPSILONdieresis","","",N,N],[17,"XKB_KEY_Greek_OMEGAaccent","","",N,N],[17,"XKB_KEY_Greek_accentdieresis","","",N,N],[17,"XKB_KEY_Greek_horizbar","","",N,N],[17,"XKB_KEY_Greek_alphaaccent","","",N,N],[17,"XKB_KEY_Greek_epsilonaccent","","",N,N],[17,"XKB_KEY_Greek_etaaccent","","",N,N],[17,"XKB_KEY_Greek_iotaaccent","","",N,N],[17,"XKB_KEY_Greek_iotadieresis","","",N,N],[17,"XKB_KEY_Greek_iotaaccentdieresis","","",N,N],[17,"XKB_KEY_Greek_omicronaccent","","",N,N],[17,"XKB_KEY_Greek_upsilonaccent","","",N,N],[17,"XKB_KEY_Greek_upsilondieresis","","",N,N],[17,"XKB_KEY_Greek_upsilonaccentdieresis","","",N,N],[17,"XKB_KEY_Greek_omegaaccent","","",N,N],[17,"XKB_KEY_Greek_ALPHA","","",N,N],[17,"XKB_KEY_Greek_BETA","","",N,N],[17,"XKB_KEY_Greek_GAMMA","","",N,N],[17,"XKB_KEY_Greek_DELTA","","",N,N],[17,"XKB_KEY_Greek_EPSILON","","",N,N],[17,"XKB_KEY_Greek_ZETA","","",N,N],[17,"XKB_KEY_Greek_ETA","","",N,N],[17,"XKB_KEY_Greek_THETA","","",N,N],[17,"XKB_KEY_Greek_IOTA","","",N,N],[17,"XKB_KEY_Greek_KAPPA","","",N,N],[17,"XKB_KEY_Greek_LAMDA","","",N,N],[17,"XKB_KEY_Greek_LAMBDA","","",N,N],[17,"XKB_KEY_Greek_MU","","",N,N],[17,"XKB_KEY_Greek_NU","","",N,N],[17,"XKB_KEY_Greek_XI","","",N,N],[17,"XKB_KEY_Greek_OMICRON","","",N,N],[17,"XKB_KEY_Greek_PI","","",N,N],[17,"XKB_KEY_Greek_RHO","","",N,N],[17,"XKB_KEY_Greek_SIGMA","","",N,N],[17,"XKB_KEY_Greek_TAU","","",N,N],[17,"XKB_KEY_Greek_UPSILON","","",N,N],[17,"XKB_KEY_Greek_PHI","","",N,N],[17,"XKB_KEY_Greek_CHI","","",N,N],[17,"XKB_KEY_Greek_PSI","","",N,N],[17,"XKB_KEY_Greek_OMEGA","","",N,N],[17,"XKB_KEY_Greek_alpha","","",N,N],[17,"XKB_KEY_Greek_beta","","",N,N],[17,"XKB_KEY_Greek_gamma","","",N,N],[17,"XKB_KEY_Greek_delta","","",N,N],[17,"XKB_KEY_Greek_epsilon","","",N,N],[17,"XKB_KEY_Greek_zeta","","",N,N],[17,"XKB_KEY_Greek_eta","","",N,N],[17,"XKB_KEY_Greek_theta","","",N,N],[17,"XKB_KEY_Greek_iota","","",N,N],[17,"XKB_KEY_Greek_kappa","","",N,N],[17,"XKB_KEY_Greek_lamda","","",N,N],[17,"XKB_KEY_Greek_lambda","","",N,N],[17,"XKB_KEY_Greek_mu","","",N,N],[17,"XKB_KEY_Greek_nu","","",N,N],[17,"XKB_KEY_Greek_xi","","",N,N],[17,"XKB_KEY_Greek_omicron","","",N,N],[17,"XKB_KEY_Greek_pi","","",N,N],[17,"XKB_KEY_Greek_rho","","",N,N],[17,"XKB_KEY_Greek_sigma","","",N,N],[17,"XKB_KEY_Greek_finalsmallsigma","","",N,N],[17,"XKB_KEY_Greek_tau","","",N,N],[17,"XKB_KEY_Greek_upsilon","","",N,N],[17,"XKB_KEY_Greek_phi","","",N,N],[17,"XKB_KEY_Greek_chi","","",N,N],[17,"XKB_KEY_Greek_psi","","",N,N],[17,"XKB_KEY_Greek_omega","","",N,N],[17,"XKB_KEY_Greek_switch","","",N,N],[17,"XKB_KEY_leftradical","","",N,N],[17,"XKB_KEY_topleftradical","","",N,N],[17,"XKB_KEY_horizconnector","","",N,N],[17,"XKB_KEY_topintegral","","",N,N],[17,"XKB_KEY_botintegral","","",N,N],[17,"XKB_KEY_vertconnector","","",N,N],[17,"XKB_KEY_topleftsqbracket","","",N,N],[17,"XKB_KEY_botleftsqbracket","","",N,N],[17,"XKB_KEY_toprightsqbracket","","",N,N],[17,"XKB_KEY_botrightsqbracket","","",N,N],[17,"XKB_KEY_topleftparens","","",N,N],[17,"XKB_KEY_botleftparens","","",N,N],[17,"XKB_KEY_toprightparens","","",N,N],[17,"XKB_KEY_botrightparens","","",N,N],[17,"XKB_KEY_leftmiddlecurlybrace","","",N,N],[17,"XKB_KEY_rightmiddlecurlybrace","","",N,N],[17,"XKB_KEY_topleftsummation","","",N,N],[17,"XKB_KEY_botleftsummation","","",N,N],[17,"XKB_KEY_topvertsummationconnector","","",N,N],[17,"XKB_KEY_botvertsummationconnector","","",N,N],[17,"XKB_KEY_toprightsummation","","",N,N],[17,"XKB_KEY_botrightsummation","","",N,N],[17,"XKB_KEY_rightmiddlesummation","","",N,N],[17,"XKB_KEY_lessthanequal","","",N,N],[17,"XKB_KEY_notequal","","",N,N],[17,"XKB_KEY_greaterthanequal","","",N,N],[17,"XKB_KEY_integral","","",N,N],[17,"XKB_KEY_therefore","","",N,N],[17,"XKB_KEY_variation","","",N,N],[17,"XKB_KEY_infinity","","",N,N],[17,"XKB_KEY_nabla","","",N,N],[17,"XKB_KEY_approximate","","",N,N],[17,"XKB_KEY_similarequal","","",N,N],[17,"XKB_KEY_ifonlyif","","",N,N],[17,"XKB_KEY_implies","","",N,N],[17,"XKB_KEY_identical","","",N,N],[17,"XKB_KEY_radical","","",N,N],[17,"XKB_KEY_includedin","","",N,N],[17,"XKB_KEY_includes","","",N,N],[17,"XKB_KEY_intersection","","",N,N],[17,"XKB_KEY_union","","",N,N],[17,"XKB_KEY_logicaland","","",N,N],[17,"XKB_KEY_logicalor","","",N,N],[17,"XKB_KEY_partialderivative","","",N,N],[17,"XKB_KEY_function","","",N,N],[17,"XKB_KEY_leftarrow","","",N,N],[17,"XKB_KEY_uparrow","","",N,N],[17,"XKB_KEY_rightarrow","","",N,N],[17,"XKB_KEY_downarrow","","",N,N],[17,"XKB_KEY_blank","","",N,N],[17,"XKB_KEY_soliddiamond","","",N,N],[17,"XKB_KEY_checkerboard","","",N,N],[17,"XKB_KEY_ht","","",N,N],[17,"XKB_KEY_ff","","",N,N],[17,"XKB_KEY_cr","","",N,N],[17,"XKB_KEY_lf","","",N,N],[17,"XKB_KEY_nl","","",N,N],[17,"XKB_KEY_vt","","",N,N],[17,"XKB_KEY_lowrightcorner","","",N,N],[17,"XKB_KEY_uprightcorner","","",N,N],[17,"XKB_KEY_upleftcorner","","",N,N],[17,"XKB_KEY_lowleftcorner","","",N,N],[17,"XKB_KEY_crossinglines","","",N,N],[17,"XKB_KEY_horizlinescan1","","",N,N],[17,"XKB_KEY_horizlinescan3","","",N,N],[17,"XKB_KEY_horizlinescan5","","",N,N],[17,"XKB_KEY_horizlinescan7","","",N,N],[17,"XKB_KEY_horizlinescan9","","",N,N],[17,"XKB_KEY_leftt","","",N,N],[17,"XKB_KEY_rightt","","",N,N],[17,"XKB_KEY_bott","","",N,N],[17,"XKB_KEY_topt","","",N,N],[17,"XKB_KEY_vertbar","","",N,N],[17,"XKB_KEY_emspace","","",N,N],[17,"XKB_KEY_enspace","","",N,N],[17,"XKB_KEY_em3space","","",N,N],[17,"XKB_KEY_em4space","","",N,N],[17,"XKB_KEY_digitspace","","",N,N],[17,"XKB_KEY_punctspace","","",N,N],[17,"XKB_KEY_thinspace","","",N,N],[17,"XKB_KEY_hairspace","","",N,N],[17,"XKB_KEY_emdash","","",N,N],[17,"XKB_KEY_endash","","",N,N],[17,"XKB_KEY_signifblank","","",N,N],[17,"XKB_KEY_ellipsis","","",N,N],[17,"XKB_KEY_doubbaselinedot","","",N,N],[17,"XKB_KEY_onethird","","",N,N],[17,"XKB_KEY_twothirds","","",N,N],[17,"XKB_KEY_onefifth","","",N,N],[17,"XKB_KEY_twofifths","","",N,N],[17,"XKB_KEY_threefifths","","",N,N],[17,"XKB_KEY_fourfifths","","",N,N],[17,"XKB_KEY_onesixth","","",N,N],[17,"XKB_KEY_fivesixths","","",N,N],[17,"XKB_KEY_careof","","",N,N],[17,"XKB_KEY_figdash","","",N,N],[17,"XKB_KEY_leftanglebracket","","",N,N],[17,"XKB_KEY_decimalpoint","","",N,N],[17,"XKB_KEY_rightanglebracket","","",N,N],[17,"XKB_KEY_marker","","",N,N],[17,"XKB_KEY_oneeighth","","",N,N],[17,"XKB_KEY_threeeighths","","",N,N],[17,"XKB_KEY_fiveeighths","","",N,N],[17,"XKB_KEY_seveneighths","","",N,N],[17,"XKB_KEY_trademark","","",N,N],[17,"XKB_KEY_signaturemark","","",N,N],[17,"XKB_KEY_trademarkincircle","","",N,N],[17,"XKB_KEY_leftopentriangle","","",N,N],[17,"XKB_KEY_rightopentriangle","","",N,N],[17,"XKB_KEY_emopencircle","","",N,N],[17,"XKB_KEY_emopenrectangle","","",N,N],[17,"XKB_KEY_leftsinglequotemark","","",N,N],[17,"XKB_KEY_rightsinglequotemark","","",N,N],[17,"XKB_KEY_leftdoublequotemark","","",N,N],[17,"XKB_KEY_rightdoublequotemark","","",N,N],[17,"XKB_KEY_prescription","","",N,N],[17,"XKB_KEY_permille","","",N,N],[17,"XKB_KEY_minutes","","",N,N],[17,"XKB_KEY_seconds","","",N,N],[17,"XKB_KEY_latincross","","",N,N],[17,"XKB_KEY_hexagram","","",N,N],[17,"XKB_KEY_filledrectbullet","","",N,N],[17,"XKB_KEY_filledlefttribullet","","",N,N],[17,"XKB_KEY_filledrighttribullet","","",N,N],[17,"XKB_KEY_emfilledcircle","","",N,N],[17,"XKB_KEY_emfilledrect","","",N,N],[17,"XKB_KEY_enopencircbullet","","",N,N],[17,"XKB_KEY_enopensquarebullet","","",N,N],[17,"XKB_KEY_openrectbullet","","",N,N],[17,"XKB_KEY_opentribulletup","","",N,N],[17,"XKB_KEY_opentribulletdown","","",N,N],[17,"XKB_KEY_openstar","","",N,N],[17,"XKB_KEY_enfilledcircbullet","","",N,N],[17,"XKB_KEY_enfilledsqbullet","","",N,N],[17,"XKB_KEY_filledtribulletup","","",N,N],[17,"XKB_KEY_filledtribulletdown","","",N,N],[17,"XKB_KEY_leftpointer","","",N,N],[17,"XKB_KEY_rightpointer","","",N,N],[17,"XKB_KEY_club","","",N,N],[17,"XKB_KEY_diamond","","",N,N],[17,"XKB_KEY_heart","","",N,N],[17,"XKB_KEY_maltesecross","","",N,N],[17,"XKB_KEY_dagger","","",N,N],[17,"XKB_KEY_doubledagger","","",N,N],[17,"XKB_KEY_checkmark","","",N,N],[17,"XKB_KEY_ballotcross","","",N,N],[17,"XKB_KEY_musicalsharp","","",N,N],[17,"XKB_KEY_musicalflat","","",N,N],[17,"XKB_KEY_malesymbol","","",N,N],[17,"XKB_KEY_femalesymbol","","",N,N],[17,"XKB_KEY_telephone","","",N,N],[17,"XKB_KEY_telephonerecorder","","",N,N],[17,"XKB_KEY_phonographcopyright","","",N,N],[17,"XKB_KEY_caret","","",N,N],[17,"XKB_KEY_singlelowquotemark","","",N,N],[17,"XKB_KEY_doublelowquotemark","","",N,N],[17,"XKB_KEY_cursor","","",N,N],[17,"XKB_KEY_leftcaret","","",N,N],[17,"XKB_KEY_rightcaret","","",N,N],[17,"XKB_KEY_downcaret","","",N,N],[17,"XKB_KEY_upcaret","","",N,N],[17,"XKB_KEY_overbar","","",N,N],[17,"XKB_KEY_downtack","","",N,N],[17,"XKB_KEY_upshoe","","",N,N],[17,"XKB_KEY_downstile","","",N,N],[17,"XKB_KEY_underbar","","",N,N],[17,"XKB_KEY_jot","","",N,N],[17,"XKB_KEY_quad","","",N,N],[17,"XKB_KEY_uptack","","",N,N],[17,"XKB_KEY_circle","","",N,N],[17,"XKB_KEY_upstile","","",N,N],[17,"XKB_KEY_downshoe","","",N,N],[17,"XKB_KEY_rightshoe","","",N,N],[17,"XKB_KEY_leftshoe","","",N,N],[17,"XKB_KEY_lefttack","","",N,N],[17,"XKB_KEY_righttack","","",N,N],[17,"XKB_KEY_hebrew_doublelowline","","",N,N],[17,"XKB_KEY_hebrew_aleph","","",N,N],[17,"XKB_KEY_hebrew_bet","","",N,N],[17,"XKB_KEY_hebrew_beth","","",N,N],[17,"XKB_KEY_hebrew_gimel","","",N,N],[17,"XKB_KEY_hebrew_gimmel","","",N,N],[17,"XKB_KEY_hebrew_dalet","","",N,N],[17,"XKB_KEY_hebrew_daleth","","",N,N],[17,"XKB_KEY_hebrew_he","","",N,N],[17,"XKB_KEY_hebrew_waw","","",N,N],[17,"XKB_KEY_hebrew_zain","","",N,N],[17,"XKB_KEY_hebrew_zayin","","",N,N],[17,"XKB_KEY_hebrew_chet","","",N,N],[17,"XKB_KEY_hebrew_het","","",N,N],[17,"XKB_KEY_hebrew_tet","","",N,N],[17,"XKB_KEY_hebrew_teth","","",N,N],[17,"XKB_KEY_hebrew_yod","","",N,N],[17,"XKB_KEY_hebrew_finalkaph","","",N,N],[17,"XKB_KEY_hebrew_kaph","","",N,N],[17,"XKB_KEY_hebrew_lamed","","",N,N],[17,"XKB_KEY_hebrew_finalmem","","",N,N],[17,"XKB_KEY_hebrew_mem","","",N,N],[17,"XKB_KEY_hebrew_finalnun","","",N,N],[17,"XKB_KEY_hebrew_nun","","",N,N],[17,"XKB_KEY_hebrew_samech","","",N,N],[17,"XKB_KEY_hebrew_samekh","","",N,N],[17,"XKB_KEY_hebrew_ayin","","",N,N],[17,"XKB_KEY_hebrew_finalpe","","",N,N],[17,"XKB_KEY_hebrew_pe","","",N,N],[17,"XKB_KEY_hebrew_finalzade","","",N,N],[17,"XKB_KEY_hebrew_finalzadi","","",N,N],[17,"XKB_KEY_hebrew_zade","","",N,N],[17,"XKB_KEY_hebrew_zadi","","",N,N],[17,"XKB_KEY_hebrew_qoph","","",N,N],[17,"XKB_KEY_hebrew_kuf","","",N,N],[17,"XKB_KEY_hebrew_resh","","",N,N],[17,"XKB_KEY_hebrew_shin","","",N,N],[17,"XKB_KEY_hebrew_taw","","",N,N],[17,"XKB_KEY_hebrew_taf","","",N,N],[17,"XKB_KEY_Hebrew_switch","","",N,N],[17,"XKB_KEY_Thai_kokai","","",N,N],[17,"XKB_KEY_Thai_khokhai","","",N,N],[17,"XKB_KEY_Thai_khokhuat","","",N,N],[17,"XKB_KEY_Thai_khokhwai","","",N,N],[17,"XKB_KEY_Thai_khokhon","","",N,N],[17,"XKB_KEY_Thai_khorakhang","","",N,N],[17,"XKB_KEY_Thai_ngongu","","",N,N],[17,"XKB_KEY_Thai_chochan","","",N,N],[17,"XKB_KEY_Thai_choching","","",N,N],[17,"XKB_KEY_Thai_chochang","","",N,N],[17,"XKB_KEY_Thai_soso","","",N,N],[17,"XKB_KEY_Thai_chochoe","","",N,N],[17,"XKB_KEY_Thai_yoying","","",N,N],[17,"XKB_KEY_Thai_dochada","","",N,N],[17,"XKB_KEY_Thai_topatak","","",N,N],[17,"XKB_KEY_Thai_thothan","","",N,N],[17,"XKB_KEY_Thai_thonangmontho","","",N,N],[17,"XKB_KEY_Thai_thophuthao","","",N,N],[17,"XKB_KEY_Thai_nonen","","",N,N],[17,"XKB_KEY_Thai_dodek","","",N,N],[17,"XKB_KEY_Thai_totao","","",N,N],[17,"XKB_KEY_Thai_thothung","","",N,N],[17,"XKB_KEY_Thai_thothahan","","",N,N],[17,"XKB_KEY_Thai_thothong","","",N,N],[17,"XKB_KEY_Thai_nonu","","",N,N],[17,"XKB_KEY_Thai_bobaimai","","",N,N],[17,"XKB_KEY_Thai_popla","","",N,N],[17,"XKB_KEY_Thai_phophung","","",N,N],[17,"XKB_KEY_Thai_fofa","","",N,N],[17,"XKB_KEY_Thai_phophan","","",N,N],[17,"XKB_KEY_Thai_fofan","","",N,N],[17,"XKB_KEY_Thai_phosamphao","","",N,N],[17,"XKB_KEY_Thai_moma","","",N,N],[17,"XKB_KEY_Thai_yoyak","","",N,N],[17,"XKB_KEY_Thai_rorua","","",N,N],[17,"XKB_KEY_Thai_ru","","",N,N],[17,"XKB_KEY_Thai_loling","","",N,N],[17,"XKB_KEY_Thai_lu","","",N,N],[17,"XKB_KEY_Thai_wowaen","","",N,N],[17,"XKB_KEY_Thai_sosala","","",N,N],[17,"XKB_KEY_Thai_sorusi","","",N,N],[17,"XKB_KEY_Thai_sosua","","",N,N],[17,"XKB_KEY_Thai_hohip","","",N,N],[17,"XKB_KEY_Thai_lochula","","",N,N],[17,"XKB_KEY_Thai_oang","","",N,N],[17,"XKB_KEY_Thai_honokhuk","","",N,N],[17,"XKB_KEY_Thai_paiyannoi","","",N,N],[17,"XKB_KEY_Thai_saraa","","",N,N],[17,"XKB_KEY_Thai_maihanakat","","",N,N],[17,"XKB_KEY_Thai_saraaa","","",N,N],[17,"XKB_KEY_Thai_saraam","","",N,N],[17,"XKB_KEY_Thai_sarai","","",N,N],[17,"XKB_KEY_Thai_saraii","","",N,N],[17,"XKB_KEY_Thai_saraue","","",N,N],[17,"XKB_KEY_Thai_sarauee","","",N,N],[17,"XKB_KEY_Thai_sarau","","",N,N],[17,"XKB_KEY_Thai_sarauu","","",N,N],[17,"XKB_KEY_Thai_phinthu","","",N,N],[17,"XKB_KEY_Thai_maihanakat_maitho","","",N,N],[17,"XKB_KEY_Thai_baht","","",N,N],[17,"XKB_KEY_Thai_sarae","","",N,N],[17,"XKB_KEY_Thai_saraae","","",N,N],[17,"XKB_KEY_Thai_sarao","","",N,N],[17,"XKB_KEY_Thai_saraaimaimuan","","",N,N],[17,"XKB_KEY_Thai_saraaimaimalai","","",N,N],[17,"XKB_KEY_Thai_lakkhangyao","","",N,N],[17,"XKB_KEY_Thai_maiyamok","","",N,N],[17,"XKB_KEY_Thai_maitaikhu","","",N,N],[17,"XKB_KEY_Thai_maiek","","",N,N],[17,"XKB_KEY_Thai_maitho","","",N,N],[17,"XKB_KEY_Thai_maitri","","",N,N],[17,"XKB_KEY_Thai_maichattawa","","",N,N],[17,"XKB_KEY_Thai_thanthakhat","","",N,N],[17,"XKB_KEY_Thai_nikhahit","","",N,N],[17,"XKB_KEY_Thai_leksun","","",N,N],[17,"XKB_KEY_Thai_leknung","","",N,N],[17,"XKB_KEY_Thai_leksong","","",N,N],[17,"XKB_KEY_Thai_leksam","","",N,N],[17,"XKB_KEY_Thai_leksi","","",N,N],[17,"XKB_KEY_Thai_lekha","","",N,N],[17,"XKB_KEY_Thai_lekhok","","",N,N],[17,"XKB_KEY_Thai_lekchet","","",N,N],[17,"XKB_KEY_Thai_lekpaet","","",N,N],[17,"XKB_KEY_Thai_lekkao","","",N,N],[17,"XKB_KEY_Hangul","","",N,N],[17,"XKB_KEY_Hangul_Start","","",N,N],[17,"XKB_KEY_Hangul_End","","",N,N],[17,"XKB_KEY_Hangul_Hanja","","",N,N],[17,"XKB_KEY_Hangul_Jamo","","",N,N],[17,"XKB_KEY_Hangul_Romaja","","",N,N],[17,"XKB_KEY_Hangul_Codeinput","","",N,N],[17,"XKB_KEY_Hangul_Jeonja","","",N,N],[17,"XKB_KEY_Hangul_Banja","","",N,N],[17,"XKB_KEY_Hangul_PreHanja","","",N,N],[17,"XKB_KEY_Hangul_PostHanja","","",N,N],[17,"XKB_KEY_Hangul_SingleCandidate","","",N,N],[17,"XKB_KEY_Hangul_MultipleCandidate","","",N,N],[17,"XKB_KEY_Hangul_PreviousCandidate","","",N,N],[17,"XKB_KEY_Hangul_Special","","",N,N],[17,"XKB_KEY_Hangul_switch","","",N,N],[17,"XKB_KEY_Hangul_Kiyeog","","",N,N],[17,"XKB_KEY_Hangul_SsangKiyeog","","",N,N],[17,"XKB_KEY_Hangul_KiyeogSios","","",N,N],[17,"XKB_KEY_Hangul_Nieun","","",N,N],[17,"XKB_KEY_Hangul_NieunJieuj","","",N,N],[17,"XKB_KEY_Hangul_NieunHieuh","","",N,N],[17,"XKB_KEY_Hangul_Dikeud","","",N,N],[17,"XKB_KEY_Hangul_SsangDikeud","","",N,N],[17,"XKB_KEY_Hangul_Rieul","","",N,N],[17,"XKB_KEY_Hangul_RieulKiyeog","","",N,N],[17,"XKB_KEY_Hangul_RieulMieum","","",N,N],[17,"XKB_KEY_Hangul_RieulPieub","","",N,N],[17,"XKB_KEY_Hangul_RieulSios","","",N,N],[17,"XKB_KEY_Hangul_RieulTieut","","",N,N],[17,"XKB_KEY_Hangul_RieulPhieuf","","",N,N],[17,"XKB_KEY_Hangul_RieulHieuh","","",N,N],[17,"XKB_KEY_Hangul_Mieum","","",N,N],[17,"XKB_KEY_Hangul_Pieub","","",N,N],[17,"XKB_KEY_Hangul_SsangPieub","","",N,N],[17,"XKB_KEY_Hangul_PieubSios","","",N,N],[17,"XKB_KEY_Hangul_Sios","","",N,N],[17,"XKB_KEY_Hangul_SsangSios","","",N,N],[17,"XKB_KEY_Hangul_Ieung","","",N,N],[17,"XKB_KEY_Hangul_Jieuj","","",N,N],[17,"XKB_KEY_Hangul_SsangJieuj","","",N,N],[17,"XKB_KEY_Hangul_Cieuc","","",N,N],[17,"XKB_KEY_Hangul_Khieuq","","",N,N],[17,"XKB_KEY_Hangul_Tieut","","",N,N],[17,"XKB_KEY_Hangul_Phieuf","","",N,N],[17,"XKB_KEY_Hangul_Hieuh","","",N,N],[17,"XKB_KEY_Hangul_A","","",N,N],[17,"XKB_KEY_Hangul_AE","","",N,N],[17,"XKB_KEY_Hangul_YA","","",N,N],[17,"XKB_KEY_Hangul_YAE","","",N,N],[17,"XKB_KEY_Hangul_EO","","",N,N],[17,"XKB_KEY_Hangul_E","","",N,N],[17,"XKB_KEY_Hangul_YEO","","",N,N],[17,"XKB_KEY_Hangul_YE","","",N,N],[17,"XKB_KEY_Hangul_O","","",N,N],[17,"XKB_KEY_Hangul_WA","","",N,N],[17,"XKB_KEY_Hangul_WAE","","",N,N],[17,"XKB_KEY_Hangul_OE","","",N,N],[17,"XKB_KEY_Hangul_YO","","",N,N],[17,"XKB_KEY_Hangul_U","","",N,N],[17,"XKB_KEY_Hangul_WEO","","",N,N],[17,"XKB_KEY_Hangul_WE","","",N,N],[17,"XKB_KEY_Hangul_WI","","",N,N],[17,"XKB_KEY_Hangul_YU","","",N,N],[17,"XKB_KEY_Hangul_EU","","",N,N],[17,"XKB_KEY_Hangul_YI","","",N,N],[17,"XKB_KEY_Hangul_I","","",N,N],[17,"XKB_KEY_Hangul_J_Kiyeog","","",N,N],[17,"XKB_KEY_Hangul_J_SsangKiyeog","","",N,N],[17,"XKB_KEY_Hangul_J_KiyeogSios","","",N,N],[17,"XKB_KEY_Hangul_J_Nieun","","",N,N],[17,"XKB_KEY_Hangul_J_NieunJieuj","","",N,N],[17,"XKB_KEY_Hangul_J_NieunHieuh","","",N,N],[17,"XKB_KEY_Hangul_J_Dikeud","","",N,N],[17,"XKB_KEY_Hangul_J_Rieul","","",N,N],[17,"XKB_KEY_Hangul_J_RieulKiyeog","","",N,N],[17,"XKB_KEY_Hangul_J_RieulMieum","","",N,N],[17,"XKB_KEY_Hangul_J_RieulPieub","","",N,N],[17,"XKB_KEY_Hangul_J_RieulSios","","",N,N],[17,"XKB_KEY_Hangul_J_RieulTieut","","",N,N],[17,"XKB_KEY_Hangul_J_RieulPhieuf","","",N,N],[17,"XKB_KEY_Hangul_J_RieulHieuh","","",N,N],[17,"XKB_KEY_Hangul_J_Mieum","","",N,N],[17,"XKB_KEY_Hangul_J_Pieub","","",N,N],[17,"XKB_KEY_Hangul_J_PieubSios","","",N,N],[17,"XKB_KEY_Hangul_J_Sios","","",N,N],[17,"XKB_KEY_Hangul_J_SsangSios","","",N,N],[17,"XKB_KEY_Hangul_J_Ieung","","",N,N],[17,"XKB_KEY_Hangul_J_Jieuj","","",N,N],[17,"XKB_KEY_Hangul_J_Cieuc","","",N,N],[17,"XKB_KEY_Hangul_J_Khieuq","","",N,N],[17,"XKB_KEY_Hangul_J_Tieut","","",N,N],[17,"XKB_KEY_Hangul_J_Phieuf","","",N,N],[17,"XKB_KEY_Hangul_J_Hieuh","","",N,N],[17,"XKB_KEY_Hangul_RieulYeorinHieuh","","",N,N],[17,"XKB_KEY_Hangul_SunkyeongeumMieum","","",N,N],[17,"XKB_KEY_Hangul_SunkyeongeumPieub","","",N,N],[17,"XKB_KEY_Hangul_PanSios","","",N,N],[17,"XKB_KEY_Hangul_KkogjiDalrinIeung","","",N,N],[17,"XKB_KEY_Hangul_SunkyeongeumPhieuf","","",N,N],[17,"XKB_KEY_Hangul_YeorinHieuh","","",N,N],[17,"XKB_KEY_Hangul_AraeA","","",N,N],[17,"XKB_KEY_Hangul_AraeAE","","",N,N],[17,"XKB_KEY_Hangul_J_PanSios","","",N,N],[17,"XKB_KEY_Hangul_J_KkogjiDalrinIeung","","",N,N],[17,"XKB_KEY_Hangul_J_YeorinHieuh","","",N,N],[17,"XKB_KEY_Korean_Won","","",N,N],[17,"XKB_KEY_Armenian_ligature_ew","","",N,N],[17,"XKB_KEY_Armenian_full_stop","","",N,N],[17,"XKB_KEY_Armenian_verjaket","","",N,N],[17,"XKB_KEY_Armenian_separation_mark","","",N,N],[17,"XKB_KEY_Armenian_but","","",N,N],[17,"XKB_KEY_Armenian_hyphen","","",N,N],[17,"XKB_KEY_Armenian_yentamna","","",N,N],[17,"XKB_KEY_Armenian_exclam","","",N,N],[17,"XKB_KEY_Armenian_amanak","","",N,N],[17,"XKB_KEY_Armenian_accent","","",N,N],[17,"XKB_KEY_Armenian_shesht","","",N,N],[17,"XKB_KEY_Armenian_question","","",N,N],[17,"XKB_KEY_Armenian_paruyk","","",N,N],[17,"XKB_KEY_Armenian_AYB","","",N,N],[17,"XKB_KEY_Armenian_ayb","","",N,N],[17,"XKB_KEY_Armenian_BEN","","",N,N],[17,"XKB_KEY_Armenian_ben","","",N,N],[17,"XKB_KEY_Armenian_GIM","","",N,N],[17,"XKB_KEY_Armenian_gim","","",N,N],[17,"XKB_KEY_Armenian_DA","","",N,N],[17,"XKB_KEY_Armenian_da","","",N,N],[17,"XKB_KEY_Armenian_YECH","","",N,N],[17,"XKB_KEY_Armenian_yech","","",N,N],[17,"XKB_KEY_Armenian_ZA","","",N,N],[17,"XKB_KEY_Armenian_za","","",N,N],[17,"XKB_KEY_Armenian_E","","",N,N],[17,"XKB_KEY_Armenian_e","","",N,N],[17,"XKB_KEY_Armenian_AT","","",N,N],[17,"XKB_KEY_Armenian_at","","",N,N],[17,"XKB_KEY_Armenian_TO","","",N,N],[17,"XKB_KEY_Armenian_to","","",N,N],[17,"XKB_KEY_Armenian_ZHE","","",N,N],[17,"XKB_KEY_Armenian_zhe","","",N,N],[17,"XKB_KEY_Armenian_INI","","",N,N],[17,"XKB_KEY_Armenian_ini","","",N,N],[17,"XKB_KEY_Armenian_LYUN","","",N,N],[17,"XKB_KEY_Armenian_lyun","","",N,N],[17,"XKB_KEY_Armenian_KHE","","",N,N],[17,"XKB_KEY_Armenian_khe","","",N,N],[17,"XKB_KEY_Armenian_TSA","","",N,N],[17,"XKB_KEY_Armenian_tsa","","",N,N],[17,"XKB_KEY_Armenian_KEN","","",N,N],[17,"XKB_KEY_Armenian_ken","","",N,N],[17,"XKB_KEY_Armenian_HO","","",N,N],[17,"XKB_KEY_Armenian_ho","","",N,N],[17,"XKB_KEY_Armenian_DZA","","",N,N],[17,"XKB_KEY_Armenian_dza","","",N,N],[17,"XKB_KEY_Armenian_GHAT","","",N,N],[17,"XKB_KEY_Armenian_ghat","","",N,N],[17,"XKB_KEY_Armenian_TCHE","","",N,N],[17,"XKB_KEY_Armenian_tche","","",N,N],[17,"XKB_KEY_Armenian_MEN","","",N,N],[17,"XKB_KEY_Armenian_men","","",N,N],[17,"XKB_KEY_Armenian_HI","","",N,N],[17,"XKB_KEY_Armenian_hi","","",N,N],[17,"XKB_KEY_Armenian_NU","","",N,N],[17,"XKB_KEY_Armenian_nu","","",N,N],[17,"XKB_KEY_Armenian_SHA","","",N,N],[17,"XKB_KEY_Armenian_sha","","",N,N],[17,"XKB_KEY_Armenian_VO","","",N,N],[17,"XKB_KEY_Armenian_vo","","",N,N],[17,"XKB_KEY_Armenian_CHA","","",N,N],[17,"XKB_KEY_Armenian_cha","","",N,N],[17,"XKB_KEY_Armenian_PE","","",N,N],[17,"XKB_KEY_Armenian_pe","","",N,N],[17,"XKB_KEY_Armenian_JE","","",N,N],[17,"XKB_KEY_Armenian_je","","",N,N],[17,"XKB_KEY_Armenian_RA","","",N,N],[17,"XKB_KEY_Armenian_ra","","",N,N],[17,"XKB_KEY_Armenian_SE","","",N,N],[17,"XKB_KEY_Armenian_se","","",N,N],[17,"XKB_KEY_Armenian_VEV","","",N,N],[17,"XKB_KEY_Armenian_vev","","",N,N],[17,"XKB_KEY_Armenian_TYUN","","",N,N],[17,"XKB_KEY_Armenian_tyun","","",N,N],[17,"XKB_KEY_Armenian_RE","","",N,N],[17,"XKB_KEY_Armenian_re","","",N,N],[17,"XKB_KEY_Armenian_TSO","","",N,N],[17,"XKB_KEY_Armenian_tso","","",N,N],[17,"XKB_KEY_Armenian_VYUN","","",N,N],[17,"XKB_KEY_Armenian_vyun","","",N,N],[17,"XKB_KEY_Armenian_PYUR","","",N,N],[17,"XKB_KEY_Armenian_pyur","","",N,N],[17,"XKB_KEY_Armenian_KE","","",N,N],[17,"XKB_KEY_Armenian_ke","","",N,N],[17,"XKB_KEY_Armenian_O","","",N,N],[17,"XKB_KEY_Armenian_o","","",N,N],[17,"XKB_KEY_Armenian_FE","","",N,N],[17,"XKB_KEY_Armenian_fe","","",N,N],[17,"XKB_KEY_Armenian_apostrophe","","",N,N],[17,"XKB_KEY_Georgian_an","","",N,N],[17,"XKB_KEY_Georgian_ban","","",N,N],[17,"XKB_KEY_Georgian_gan","","",N,N],[17,"XKB_KEY_Georgian_don","","",N,N],[17,"XKB_KEY_Georgian_en","","",N,N],[17,"XKB_KEY_Georgian_vin","","",N,N],[17,"XKB_KEY_Georgian_zen","","",N,N],[17,"XKB_KEY_Georgian_tan","","",N,N],[17,"XKB_KEY_Georgian_in","","",N,N],[17,"XKB_KEY_Georgian_kan","","",N,N],[17,"XKB_KEY_Georgian_las","","",N,N],[17,"XKB_KEY_Georgian_man","","",N,N],[17,"XKB_KEY_Georgian_nar","","",N,N],[17,"XKB_KEY_Georgian_on","","",N,N],[17,"XKB_KEY_Georgian_par","","",N,N],[17,"XKB_KEY_Georgian_zhar","","",N,N],[17,"XKB_KEY_Georgian_rae","","",N,N],[17,"XKB_KEY_Georgian_san","","",N,N],[17,"XKB_KEY_Georgian_tar","","",N,N],[17,"XKB_KEY_Georgian_un","","",N,N],[17,"XKB_KEY_Georgian_phar","","",N,N],[17,"XKB_KEY_Georgian_khar","","",N,N],[17,"XKB_KEY_Georgian_ghan","","",N,N],[17,"XKB_KEY_Georgian_qar","","",N,N],[17,"XKB_KEY_Georgian_shin","","",N,N],[17,"XKB_KEY_Georgian_chin","","",N,N],[17,"XKB_KEY_Georgian_can","","",N,N],[17,"XKB_KEY_Georgian_jil","","",N,N],[17,"XKB_KEY_Georgian_cil","","",N,N],[17,"XKB_KEY_Georgian_char","","",N,N],[17,"XKB_KEY_Georgian_xan","","",N,N],[17,"XKB_KEY_Georgian_jhan","","",N,N],[17,"XKB_KEY_Georgian_hae","","",N,N],[17,"XKB_KEY_Georgian_he","","",N,N],[17,"XKB_KEY_Georgian_hie","","",N,N],[17,"XKB_KEY_Georgian_we","","",N,N],[17,"XKB_KEY_Georgian_har","","",N,N],[17,"XKB_KEY_Georgian_hoe","","",N,N],[17,"XKB_KEY_Georgian_fi","","",N,N],[17,"XKB_KEY_Xabovedot","","",N,N],[17,"XKB_KEY_Ibreve","","",N,N],[17,"XKB_KEY_Zstroke","","",N,N],[17,"XKB_KEY_Gcaron","","",N,N],[17,"XKB_KEY_Ocaron","","",N,N],[17,"XKB_KEY_Obarred","","",N,N],[17,"XKB_KEY_xabovedot","","",N,N],[17,"XKB_KEY_ibreve","","",N,N],[17,"XKB_KEY_zstroke","","",N,N],[17,"XKB_KEY_gcaron","","",N,N],[17,"XKB_KEY_ocaron","","",N,N],[17,"XKB_KEY_obarred","","",N,N],[17,"XKB_KEY_SCHWA","","",N,N],[17,"XKB_KEY_schwa","","",N,N],[17,"XKB_KEY_EZH","","",N,N],[17,"XKB_KEY_ezh","","",N,N],[17,"XKB_KEY_Lbelowdot","","",N,N],[17,"XKB_KEY_lbelowdot","","",N,N],[17,"XKB_KEY_Abelowdot","","",N,N],[17,"XKB_KEY_abelowdot","","",N,N],[17,"XKB_KEY_Ahook","","",N,N],[17,"XKB_KEY_ahook","","",N,N],[17,"XKB_KEY_Acircumflexacute","","",N,N],[17,"XKB_KEY_acircumflexacute","","",N,N],[17,"XKB_KEY_Acircumflexgrave","","",N,N],[17,"XKB_KEY_acircumflexgrave","","",N,N],[17,"XKB_KEY_Acircumflexhook","","",N,N],[17,"XKB_KEY_acircumflexhook","","",N,N],[17,"XKB_KEY_Acircumflextilde","","",N,N],[17,"XKB_KEY_acircumflextilde","","",N,N],[17,"XKB_KEY_Acircumflexbelowdot","","",N,N],[17,"XKB_KEY_acircumflexbelowdot","","",N,N],[17,"XKB_KEY_Abreveacute","","",N,N],[17,"XKB_KEY_abreveacute","","",N,N],[17,"XKB_KEY_Abrevegrave","","",N,N],[17,"XKB_KEY_abrevegrave","","",N,N],[17,"XKB_KEY_Abrevehook","","",N,N],[17,"XKB_KEY_abrevehook","","",N,N],[17,"XKB_KEY_Abrevetilde","","",N,N],[17,"XKB_KEY_abrevetilde","","",N,N],[17,"XKB_KEY_Abrevebelowdot","","",N,N],[17,"XKB_KEY_abrevebelowdot","","",N,N],[17,"XKB_KEY_Ebelowdot","","",N,N],[17,"XKB_KEY_ebelowdot","","",N,N],[17,"XKB_KEY_Ehook","","",N,N],[17,"XKB_KEY_ehook","","",N,N],[17,"XKB_KEY_Etilde","","",N,N],[17,"XKB_KEY_etilde","","",N,N],[17,"XKB_KEY_Ecircumflexacute","","",N,N],[17,"XKB_KEY_ecircumflexacute","","",N,N],[17,"XKB_KEY_Ecircumflexgrave","","",N,N],[17,"XKB_KEY_ecircumflexgrave","","",N,N],[17,"XKB_KEY_Ecircumflexhook","","",N,N],[17,"XKB_KEY_ecircumflexhook","","",N,N],[17,"XKB_KEY_Ecircumflextilde","","",N,N],[17,"XKB_KEY_ecircumflextilde","","",N,N],[17,"XKB_KEY_Ecircumflexbelowdot","","",N,N],[17,"XKB_KEY_ecircumflexbelowdot","","",N,N],[17,"XKB_KEY_Ihook","","",N,N],[17,"XKB_KEY_ihook","","",N,N],[17,"XKB_KEY_Ibelowdot","","",N,N],[17,"XKB_KEY_ibelowdot","","",N,N],[17,"XKB_KEY_Obelowdot","","",N,N],[17,"XKB_KEY_obelowdot","","",N,N],[17,"XKB_KEY_Ohook","","",N,N],[17,"XKB_KEY_ohook","","",N,N],[17,"XKB_KEY_Ocircumflexacute","","",N,N],[17,"XKB_KEY_ocircumflexacute","","",N,N],[17,"XKB_KEY_Ocircumflexgrave","","",N,N],[17,"XKB_KEY_ocircumflexgrave","","",N,N],[17,"XKB_KEY_Ocircumflexhook","","",N,N],[17,"XKB_KEY_ocircumflexhook","","",N,N],[17,"XKB_KEY_Ocircumflextilde","","",N,N],[17,"XKB_KEY_ocircumflextilde","","",N,N],[17,"XKB_KEY_Ocircumflexbelowdot","","",N,N],[17,"XKB_KEY_ocircumflexbelowdot","","",N,N],[17,"XKB_KEY_Ohornacute","","",N,N],[17,"XKB_KEY_ohornacute","","",N,N],[17,"XKB_KEY_Ohorngrave","","",N,N],[17,"XKB_KEY_ohorngrave","","",N,N],[17,"XKB_KEY_Ohornhook","","",N,N],[17,"XKB_KEY_ohornhook","","",N,N],[17,"XKB_KEY_Ohorntilde","","",N,N],[17,"XKB_KEY_ohorntilde","","",N,N],[17,"XKB_KEY_Ohornbelowdot","","",N,N],[17,"XKB_KEY_ohornbelowdot","","",N,N],[17,"XKB_KEY_Ubelowdot","","",N,N],[17,"XKB_KEY_ubelowdot","","",N,N],[17,"XKB_KEY_Uhook","","",N,N],[17,"XKB_KEY_uhook","","",N,N],[17,"XKB_KEY_Uhornacute","","",N,N],[17,"XKB_KEY_uhornacute","","",N,N],[17,"XKB_KEY_Uhorngrave","","",N,N],[17,"XKB_KEY_uhorngrave","","",N,N],[17,"XKB_KEY_Uhornhook","","",N,N],[17,"XKB_KEY_uhornhook","","",N,N],[17,"XKB_KEY_Uhorntilde","","",N,N],[17,"XKB_KEY_uhorntilde","","",N,N],[17,"XKB_KEY_Uhornbelowdot","","",N,N],[17,"XKB_KEY_uhornbelowdot","","",N,N],[17,"XKB_KEY_Ybelowdot","","",N,N],[17,"XKB_KEY_ybelowdot","","",N,N],[17,"XKB_KEY_Yhook","","",N,N],[17,"XKB_KEY_yhook","","",N,N],[17,"XKB_KEY_Ytilde","","",N,N],[17,"XKB_KEY_ytilde","","",N,N],[17,"XKB_KEY_Ohorn","","",N,N],[17,"XKB_KEY_ohorn","","",N,N],[17,"XKB_KEY_Uhorn","","",N,N],[17,"XKB_KEY_uhorn","","",N,N],[17,"XKB_KEY_EcuSign","","",N,N],[17,"XKB_KEY_ColonSign","","",N,N],[17,"XKB_KEY_CruzeiroSign","","",N,N],[17,"XKB_KEY_FFrancSign","","",N,N],[17,"XKB_KEY_LiraSign","","",N,N],[17,"XKB_KEY_MillSign","","",N,N],[17,"XKB_KEY_NairaSign","","",N,N],[17,"XKB_KEY_PesetaSign","","",N,N],[17,"XKB_KEY_RupeeSign","","",N,N],[17,"XKB_KEY_WonSign","","",N,N],[17,"XKB_KEY_NewSheqelSign","","",N,N],[17,"XKB_KEY_DongSign","","",N,N],[17,"XKB_KEY_EuroSign","","",N,N],[17,"XKB_KEY_zerosuperior","","",N,N],[17,"XKB_KEY_foursuperior","","",N,N],[17,"XKB_KEY_fivesuperior","","",N,N],[17,"XKB_KEY_sixsuperior","","",N,N],[17,"XKB_KEY_sevensuperior","","",N,N],[17,"XKB_KEY_eightsuperior","","",N,N],[17,"XKB_KEY_ninesuperior","","",N,N],[17,"XKB_KEY_zerosubscript","","",N,N],[17,"XKB_KEY_onesubscript","","",N,N],[17,"XKB_KEY_twosubscript","","",N,N],[17,"XKB_KEY_threesubscript","","",N,N],[17,"XKB_KEY_foursubscript","","",N,N],[17,"XKB_KEY_fivesubscript","","",N,N],[17,"XKB_KEY_sixsubscript","","",N,N],[17,"XKB_KEY_sevensubscript","","",N,N],[17,"XKB_KEY_eightsubscript","","",N,N],[17,"XKB_KEY_ninesubscript","","",N,N],[17,"XKB_KEY_partdifferential","","",N,N],[17,"XKB_KEY_emptyset","","",N,N],[17,"XKB_KEY_elementof","","",N,N],[17,"XKB_KEY_notelementof","","",N,N],[17,"XKB_KEY_containsas","","",N,N],[17,"XKB_KEY_squareroot","","",N,N],[17,"XKB_KEY_cuberoot","","",N,N],[17,"XKB_KEY_fourthroot","","",N,N],[17,"XKB_KEY_dintegral","","",N,N],[17,"XKB_KEY_tintegral","","",N,N],[17,"XKB_KEY_because","","",N,N],[17,"XKB_KEY_approxeq","","",N,N],[17,"XKB_KEY_notapproxeq","","",N,N],[17,"XKB_KEY_notidentical","","",N,N],[17,"XKB_KEY_stricteq","","",N,N],[17,"XKB_KEY_braille_dot_1","","",N,N],[17,"XKB_KEY_braille_dot_2","","",N,N],[17,"XKB_KEY_braille_dot_3","","",N,N],[17,"XKB_KEY_braille_dot_4","","",N,N],[17,"XKB_KEY_braille_dot_5","","",N,N],[17,"XKB_KEY_braille_dot_6","","",N,N],[17,"XKB_KEY_braille_dot_7","","",N,N],[17,"XKB_KEY_braille_dot_8","","",N,N],[17,"XKB_KEY_braille_dot_9","","",N,N],[17,"XKB_KEY_braille_dot_10","","",N,N],[17,"XKB_KEY_braille_blank","","",N,N],[17,"XKB_KEY_braille_dots_1","","",N,N],[17,"XKB_KEY_braille_dots_2","","",N,N],[17,"XKB_KEY_braille_dots_12","","",N,N],[17,"XKB_KEY_braille_dots_3","","",N,N],[17,"XKB_KEY_braille_dots_13","","",N,N],[17,"XKB_KEY_braille_dots_23","","",N,N],[17,"XKB_KEY_braille_dots_123","","",N,N],[17,"XKB_KEY_braille_dots_4","","",N,N],[17,"XKB_KEY_braille_dots_14","","",N,N],[17,"XKB_KEY_braille_dots_24","","",N,N],[17,"XKB_KEY_braille_dots_124","","",N,N],[17,"XKB_KEY_braille_dots_34","","",N,N],[17,"XKB_KEY_braille_dots_134","","",N,N],[17,"XKB_KEY_braille_dots_234","","",N,N],[17,"XKB_KEY_braille_dots_1234","","",N,N],[17,"XKB_KEY_braille_dots_5","","",N,N],[17,"XKB_KEY_braille_dots_15","","",N,N],[17,"XKB_KEY_braille_dots_25","","",N,N],[17,"XKB_KEY_braille_dots_125","","",N,N],[17,"XKB_KEY_braille_dots_35","","",N,N],[17,"XKB_KEY_braille_dots_135","","",N,N],[17,"XKB_KEY_braille_dots_235","","",N,N],[17,"XKB_KEY_braille_dots_1235","","",N,N],[17,"XKB_KEY_braille_dots_45","","",N,N],[17,"XKB_KEY_braille_dots_145","","",N,N],[17,"XKB_KEY_braille_dots_245","","",N,N],[17,"XKB_KEY_braille_dots_1245","","",N,N],[17,"XKB_KEY_braille_dots_345","","",N,N],[17,"XKB_KEY_braille_dots_1345","","",N,N],[17,"XKB_KEY_braille_dots_2345","","",N,N],[17,"XKB_KEY_braille_dots_12345","","",N,N],[17,"XKB_KEY_braille_dots_6","","",N,N],[17,"XKB_KEY_braille_dots_16","","",N,N],[17,"XKB_KEY_braille_dots_26","","",N,N],[17,"XKB_KEY_braille_dots_126","","",N,N],[17,"XKB_KEY_braille_dots_36","","",N,N],[17,"XKB_KEY_braille_dots_136","","",N,N],[17,"XKB_KEY_braille_dots_236","","",N,N],[17,"XKB_KEY_braille_dots_1236","","",N,N],[17,"XKB_KEY_braille_dots_46","","",N,N],[17,"XKB_KEY_braille_dots_146","","",N,N],[17,"XKB_KEY_braille_dots_246","","",N,N],[17,"XKB_KEY_braille_dots_1246","","",N,N],[17,"XKB_KEY_braille_dots_346","","",N,N],[17,"XKB_KEY_braille_dots_1346","","",N,N],[17,"XKB_KEY_braille_dots_2346","","",N,N],[17,"XKB_KEY_braille_dots_12346","","",N,N],[17,"XKB_KEY_braille_dots_56","","",N,N],[17,"XKB_KEY_braille_dots_156","","",N,N],[17,"XKB_KEY_braille_dots_256","","",N,N],[17,"XKB_KEY_braille_dots_1256","","",N,N],[17,"XKB_KEY_braille_dots_356","","",N,N],[17,"XKB_KEY_braille_dots_1356","","",N,N],[17,"XKB_KEY_braille_dots_2356","","",N,N],[17,"XKB_KEY_braille_dots_12356","","",N,N],[17,"XKB_KEY_braille_dots_456","","",N,N],[17,"XKB_KEY_braille_dots_1456","","",N,N],[17,"XKB_KEY_braille_dots_2456","","",N,N],[17,"XKB_KEY_braille_dots_12456","","",N,N],[17,"XKB_KEY_braille_dots_3456","","",N,N],[17,"XKB_KEY_braille_dots_13456","","",N,N],[17,"XKB_KEY_braille_dots_23456","","",N,N],[17,"XKB_KEY_braille_dots_123456","","",N,N],[17,"XKB_KEY_braille_dots_7","","",N,N],[17,"XKB_KEY_braille_dots_17","","",N,N],[17,"XKB_KEY_braille_dots_27","","",N,N],[17,"XKB_KEY_braille_dots_127","","",N,N],[17,"XKB_KEY_braille_dots_37","","",N,N],[17,"XKB_KEY_braille_dots_137","","",N,N],[17,"XKB_KEY_braille_dots_237","","",N,N],[17,"XKB_KEY_braille_dots_1237","","",N,N],[17,"XKB_KEY_braille_dots_47","","",N,N],[17,"XKB_KEY_braille_dots_147","","",N,N],[17,"XKB_KEY_braille_dots_247","","",N,N],[17,"XKB_KEY_braille_dots_1247","","",N,N],[17,"XKB_KEY_braille_dots_347","","",N,N],[17,"XKB_KEY_braille_dots_1347","","",N,N],[17,"XKB_KEY_braille_dots_2347","","",N,N],[17,"XKB_KEY_braille_dots_12347","","",N,N],[17,"XKB_KEY_braille_dots_57","","",N,N],[17,"XKB_KEY_braille_dots_157","","",N,N],[17,"XKB_KEY_braille_dots_257","","",N,N],[17,"XKB_KEY_braille_dots_1257","","",N,N],[17,"XKB_KEY_braille_dots_357","","",N,N],[17,"XKB_KEY_braille_dots_1357","","",N,N],[17,"XKB_KEY_braille_dots_2357","","",N,N],[17,"XKB_KEY_braille_dots_12357","","",N,N],[17,"XKB_KEY_braille_dots_457","","",N,N],[17,"XKB_KEY_braille_dots_1457","","",N,N],[17,"XKB_KEY_braille_dots_2457","","",N,N],[17,"XKB_KEY_braille_dots_12457","","",N,N],[17,"XKB_KEY_braille_dots_3457","","",N,N],[17,"XKB_KEY_braille_dots_13457","","",N,N],[17,"XKB_KEY_braille_dots_23457","","",N,N],[17,"XKB_KEY_braille_dots_123457","","",N,N],[17,"XKB_KEY_braille_dots_67","","",N,N],[17,"XKB_KEY_braille_dots_167","","",N,N],[17,"XKB_KEY_braille_dots_267","","",N,N],[17,"XKB_KEY_braille_dots_1267","","",N,N],[17,"XKB_KEY_braille_dots_367","","",N,N],[17,"XKB_KEY_braille_dots_1367","","",N,N],[17,"XKB_KEY_braille_dots_2367","","",N,N],[17,"XKB_KEY_braille_dots_12367","","",N,N],[17,"XKB_KEY_braille_dots_467","","",N,N],[17,"XKB_KEY_braille_dots_1467","","",N,N],[17,"XKB_KEY_braille_dots_2467","","",N,N],[17,"XKB_KEY_braille_dots_12467","","",N,N],[17,"XKB_KEY_braille_dots_3467","","",N,N],[17,"XKB_KEY_braille_dots_13467","","",N,N],[17,"XKB_KEY_braille_dots_23467","","",N,N],[17,"XKB_KEY_braille_dots_123467","","",N,N],[17,"XKB_KEY_braille_dots_567","","",N,N],[17,"XKB_KEY_braille_dots_1567","","",N,N],[17,"XKB_KEY_braille_dots_2567","","",N,N],[17,"XKB_KEY_braille_dots_12567","","",N,N],[17,"XKB_KEY_braille_dots_3567","","",N,N],[17,"XKB_KEY_braille_dots_13567","","",N,N],[17,"XKB_KEY_braille_dots_23567","","",N,N],[17,"XKB_KEY_braille_dots_123567","","",N,N],[17,"XKB_KEY_braille_dots_4567","","",N,N],[17,"XKB_KEY_braille_dots_14567","","",N,N],[17,"XKB_KEY_braille_dots_24567","","",N,N],[17,"XKB_KEY_braille_dots_124567","","",N,N],[17,"XKB_KEY_braille_dots_34567","","",N,N],[17,"XKB_KEY_braille_dots_134567","","",N,N],[17,"XKB_KEY_braille_dots_234567","","",N,N],[17,"XKB_KEY_braille_dots_1234567","","",N,N],[17,"XKB_KEY_braille_dots_8","","",N,N],[17,"XKB_KEY_braille_dots_18","","",N,N],[17,"XKB_KEY_braille_dots_28","","",N,N],[17,"XKB_KEY_braille_dots_128","","",N,N],[17,"XKB_KEY_braille_dots_38","","",N,N],[17,"XKB_KEY_braille_dots_138","","",N,N],[17,"XKB_KEY_braille_dots_238","","",N,N],[17,"XKB_KEY_braille_dots_1238","","",N,N],[17,"XKB_KEY_braille_dots_48","","",N,N],[17,"XKB_KEY_braille_dots_148","","",N,N],[17,"XKB_KEY_braille_dots_248","","",N,N],[17,"XKB_KEY_braille_dots_1248","","",N,N],[17,"XKB_KEY_braille_dots_348","","",N,N],[17,"XKB_KEY_braille_dots_1348","","",N,N],[17,"XKB_KEY_braille_dots_2348","","",N,N],[17,"XKB_KEY_braille_dots_12348","","",N,N],[17,"XKB_KEY_braille_dots_58","","",N,N],[17,"XKB_KEY_braille_dots_158","","",N,N],[17,"XKB_KEY_braille_dots_258","","",N,N],[17,"XKB_KEY_braille_dots_1258","","",N,N],[17,"XKB_KEY_braille_dots_358","","",N,N],[17,"XKB_KEY_braille_dots_1358","","",N,N],[17,"XKB_KEY_braille_dots_2358","","",N,N],[17,"XKB_KEY_braille_dots_12358","","",N,N],[17,"XKB_KEY_braille_dots_458","","",N,N],[17,"XKB_KEY_braille_dots_1458","","",N,N],[17,"XKB_KEY_braille_dots_2458","","",N,N],[17,"XKB_KEY_braille_dots_12458","","",N,N],[17,"XKB_KEY_braille_dots_3458","","",N,N],[17,"XKB_KEY_braille_dots_13458","","",N,N],[17,"XKB_KEY_braille_dots_23458","","",N,N],[17,"XKB_KEY_braille_dots_123458","","",N,N],[17,"XKB_KEY_braille_dots_68","","",N,N],[17,"XKB_KEY_braille_dots_168","","",N,N],[17,"XKB_KEY_braille_dots_268","","",N,N],[17,"XKB_KEY_braille_dots_1268","","",N,N],[17,"XKB_KEY_braille_dots_368","","",N,N],[17,"XKB_KEY_braille_dots_1368","","",N,N],[17,"XKB_KEY_braille_dots_2368","","",N,N],[17,"XKB_KEY_braille_dots_12368","","",N,N],[17,"XKB_KEY_braille_dots_468","","",N,N],[17,"XKB_KEY_braille_dots_1468","","",N,N],[17,"XKB_KEY_braille_dots_2468","","",N,N],[17,"XKB_KEY_braille_dots_12468","","",N,N],[17,"XKB_KEY_braille_dots_3468","","",N,N],[17,"XKB_KEY_braille_dots_13468","","",N,N],[17,"XKB_KEY_braille_dots_23468","","",N,N],[17,"XKB_KEY_braille_dots_123468","","",N,N],[17,"XKB_KEY_braille_dots_568","","",N,N],[17,"XKB_KEY_braille_dots_1568","","",N,N],[17,"XKB_KEY_braille_dots_2568","","",N,N],[17,"XKB_KEY_braille_dots_12568","","",N,N],[17,"XKB_KEY_braille_dots_3568","","",N,N],[17,"XKB_KEY_braille_dots_13568","","",N,N],[17,"XKB_KEY_braille_dots_23568","","",N,N],[17,"XKB_KEY_braille_dots_123568","","",N,N],[17,"XKB_KEY_braille_dots_4568","","",N,N],[17,"XKB_KEY_braille_dots_14568","","",N,N],[17,"XKB_KEY_braille_dots_24568","","",N,N],[17,"XKB_KEY_braille_dots_124568","","",N,N],[17,"XKB_KEY_braille_dots_34568","","",N,N],[17,"XKB_KEY_braille_dots_134568","","",N,N],[17,"XKB_KEY_braille_dots_234568","","",N,N],[17,"XKB_KEY_braille_dots_1234568","","",N,N],[17,"XKB_KEY_braille_dots_78","","",N,N],[17,"XKB_KEY_braille_dots_178","","",N,N],[17,"XKB_KEY_braille_dots_278","","",N,N],[17,"XKB_KEY_braille_dots_1278","","",N,N],[17,"XKB_KEY_braille_dots_378","","",N,N],[17,"XKB_KEY_braille_dots_1378","","",N,N],[17,"XKB_KEY_braille_dots_2378","","",N,N],[17,"XKB_KEY_braille_dots_12378","","",N,N],[17,"XKB_KEY_braille_dots_478","","",N,N],[17,"XKB_KEY_braille_dots_1478","","",N,N],[17,"XKB_KEY_braille_dots_2478","","",N,N],[17,"XKB_KEY_braille_dots_12478","","",N,N],[17,"XKB_KEY_braille_dots_3478","","",N,N],[17,"XKB_KEY_braille_dots_13478","","",N,N],[17,"XKB_KEY_braille_dots_23478","","",N,N],[17,"XKB_KEY_braille_dots_123478","","",N,N],[17,"XKB_KEY_braille_dots_578","","",N,N],[17,"XKB_KEY_braille_dots_1578","","",N,N],[17,"XKB_KEY_braille_dots_2578","","",N,N],[17,"XKB_KEY_braille_dots_12578","","",N,N],[17,"XKB_KEY_braille_dots_3578","","",N,N],[17,"XKB_KEY_braille_dots_13578","","",N,N],[17,"XKB_KEY_braille_dots_23578","","",N,N],[17,"XKB_KEY_braille_dots_123578","","",N,N],[17,"XKB_KEY_braille_dots_4578","","",N,N],[17,"XKB_KEY_braille_dots_14578","","",N,N],[17,"XKB_KEY_braille_dots_24578","","",N,N],[17,"XKB_KEY_braille_dots_124578","","",N,N],[17,"XKB_KEY_braille_dots_34578","","",N,N],[17,"XKB_KEY_braille_dots_134578","","",N,N],[17,"XKB_KEY_braille_dots_234578","","",N,N],[17,"XKB_KEY_braille_dots_1234578","","",N,N],[17,"XKB_KEY_braille_dots_678","","",N,N],[17,"XKB_KEY_braille_dots_1678","","",N,N],[17,"XKB_KEY_braille_dots_2678","","",N,N],[17,"XKB_KEY_braille_dots_12678","","",N,N],[17,"XKB_KEY_braille_dots_3678","","",N,N],[17,"XKB_KEY_braille_dots_13678","","",N,N],[17,"XKB_KEY_braille_dots_23678","","",N,N],[17,"XKB_KEY_braille_dots_123678","","",N,N],[17,"XKB_KEY_braille_dots_4678","","",N,N],[17,"XKB_KEY_braille_dots_14678","","",N,N],[17,"XKB_KEY_braille_dots_24678","","",N,N],[17,"XKB_KEY_braille_dots_124678","","",N,N],[17,"XKB_KEY_braille_dots_34678","","",N,N],[17,"XKB_KEY_braille_dots_134678","","",N,N],[17,"XKB_KEY_braille_dots_234678","","",N,N],[17,"XKB_KEY_braille_dots_1234678","","",N,N],[17,"XKB_KEY_braille_dots_5678","","",N,N],[17,"XKB_KEY_braille_dots_15678","","",N,N],[17,"XKB_KEY_braille_dots_25678","","",N,N],[17,"XKB_KEY_braille_dots_125678","","",N,N],[17,"XKB_KEY_braille_dots_35678","","",N,N],[17,"XKB_KEY_braille_dots_135678","","",N,N],[17,"XKB_KEY_braille_dots_235678","","",N,N],[17,"XKB_KEY_braille_dots_1235678","","",N,N],[17,"XKB_KEY_braille_dots_45678","","",N,N],[17,"XKB_KEY_braille_dots_145678","","",N,N],[17,"XKB_KEY_braille_dots_245678","","",N,N],[17,"XKB_KEY_braille_dots_1245678","","",N,N],[17,"XKB_KEY_braille_dots_345678","","",N,N],[17,"XKB_KEY_braille_dots_1345678","","",N,N],[17,"XKB_KEY_braille_dots_2345678","","",N,N],[17,"XKB_KEY_braille_dots_12345678","","",N,N],[17,"XKB_KEY_Sinh_ng","","",N,N],[17,"XKB_KEY_Sinh_h2","","",N,N],[17,"XKB_KEY_Sinh_a","","",N,N],[17,"XKB_KEY_Sinh_aa","","",N,N],[17,"XKB_KEY_Sinh_ae","","",N,N],[17,"XKB_KEY_Sinh_aee","","",N,N],[17,"XKB_KEY_Sinh_i","","",N,N],[17,"XKB_KEY_Sinh_ii","","",N,N],[17,"XKB_KEY_Sinh_u","","",N,N],[17,"XKB_KEY_Sinh_uu","","",N,N],[17,"XKB_KEY_Sinh_ri","","",N,N],[17,"XKB_KEY_Sinh_rii","","",N,N],[17,"XKB_KEY_Sinh_lu","","",N,N],[17,"XKB_KEY_Sinh_luu","","",N,N],[17,"XKB_KEY_Sinh_e","","",N,N],[17,"XKB_KEY_Sinh_ee","","",N,N],[17,"XKB_KEY_Sinh_ai","","",N,N],[17,"XKB_KEY_Sinh_o","","",N,N],[17,"XKB_KEY_Sinh_oo","","",N,N],[17,"XKB_KEY_Sinh_au","","",N,N],[17,"XKB_KEY_Sinh_ka","","",N,N],[17,"XKB_KEY_Sinh_kha","","",N,N],[17,"XKB_KEY_Sinh_ga","","",N,N],[17,"XKB_KEY_Sinh_gha","","",N,N],[17,"XKB_KEY_Sinh_ng2","","",N,N],[17,"XKB_KEY_Sinh_nga","","",N,N],[17,"XKB_KEY_Sinh_ca","","",N,N],[17,"XKB_KEY_Sinh_cha","","",N,N],[17,"XKB_KEY_Sinh_ja","","",N,N],[17,"XKB_KEY_Sinh_jha","","",N,N],[17,"XKB_KEY_Sinh_nya","","",N,N],[17,"XKB_KEY_Sinh_jnya","","",N,N],[17,"XKB_KEY_Sinh_nja","","",N,N],[17,"XKB_KEY_Sinh_tta","","",N,N],[17,"XKB_KEY_Sinh_ttha","","",N,N],[17,"XKB_KEY_Sinh_dda","","",N,N],[17,"XKB_KEY_Sinh_ddha","","",N,N],[17,"XKB_KEY_Sinh_nna","","",N,N],[17,"XKB_KEY_Sinh_ndda","","",N,N],[17,"XKB_KEY_Sinh_tha","","",N,N],[17,"XKB_KEY_Sinh_thha","","",N,N],[17,"XKB_KEY_Sinh_dha","","",N,N],[17,"XKB_KEY_Sinh_dhha","","",N,N],[17,"XKB_KEY_Sinh_na","","",N,N],[17,"XKB_KEY_Sinh_ndha","","",N,N],[17,"XKB_KEY_Sinh_pa","","",N,N],[17,"XKB_KEY_Sinh_pha","","",N,N],[17,"XKB_KEY_Sinh_ba","","",N,N],[17,"XKB_KEY_Sinh_bha","","",N,N],[17,"XKB_KEY_Sinh_ma","","",N,N],[17,"XKB_KEY_Sinh_mba","","",N,N],[17,"XKB_KEY_Sinh_ya","","",N,N],[17,"XKB_KEY_Sinh_ra","","",N,N],[17,"XKB_KEY_Sinh_la","","",N,N],[17,"XKB_KEY_Sinh_va","","",N,N],[17,"XKB_KEY_Sinh_sha","","",N,N],[17,"XKB_KEY_Sinh_ssha","","",N,N],[17,"XKB_KEY_Sinh_sa","","",N,N],[17,"XKB_KEY_Sinh_ha","","",N,N],[17,"XKB_KEY_Sinh_lla","","",N,N],[17,"XKB_KEY_Sinh_fa","","",N,N],[17,"XKB_KEY_Sinh_al","","",N,N],[17,"XKB_KEY_Sinh_aa2","","",N,N],[17,"XKB_KEY_Sinh_ae2","","",N,N],[17,"XKB_KEY_Sinh_aee2","","",N,N],[17,"XKB_KEY_Sinh_i2","","",N,N],[17,"XKB_KEY_Sinh_ii2","","",N,N],[17,"XKB_KEY_Sinh_u2","","",N,N],[17,"XKB_KEY_Sinh_uu2","","",N,N],[17,"XKB_KEY_Sinh_ru2","","",N,N],[17,"XKB_KEY_Sinh_e2","","",N,N],[17,"XKB_KEY_Sinh_ee2","","",N,N],[17,"XKB_KEY_Sinh_ai2","","",N,N],[17,"XKB_KEY_Sinh_o2","","",N,N],[17,"XKB_KEY_Sinh_oo2","","",N,N],[17,"XKB_KEY_Sinh_au2","","",N,N],[17,"XKB_KEY_Sinh_lu2","","",N,N],[17,"XKB_KEY_Sinh_ruu2","","",N,N],[17,"XKB_KEY_Sinh_luu2","","",N,N],[17,"XKB_KEY_Sinh_kunddaliya","","",N,N],[17,"XKB_KEY_XF86ModeLock","","",N,N],[17,"XKB_KEY_XF86MonBrightnessUp","","",N,N],[17,"XKB_KEY_XF86MonBrightnessDown","","",N,N],[17,"XKB_KEY_XF86KbdLightOnOff","","",N,N],[17,"XKB_KEY_XF86KbdBrightnessUp","","",N,N],[17,"XKB_KEY_XF86KbdBrightnessDown","","",N,N],[17,"XKB_KEY_XF86Standby","","",N,N],[17,"XKB_KEY_XF86AudioLowerVolume","","",N,N],[17,"XKB_KEY_XF86AudioMute","","",N,N],[17,"XKB_KEY_XF86AudioRaiseVolume","","",N,N],[17,"XKB_KEY_XF86AudioPlay","","",N,N],[17,"XKB_KEY_XF86AudioStop","","",N,N],[17,"XKB_KEY_XF86AudioPrev","","",N,N],[17,"XKB_KEY_XF86AudioNext","","",N,N],[17,"XKB_KEY_XF86HomePage","","",N,N],[17,"XKB_KEY_XF86Mail","","",N,N],[17,"XKB_KEY_XF86Start","","",N,N],[17,"XKB_KEY_XF86Search","","",N,N],[17,"XKB_KEY_XF86AudioRecord","","",N,N],[17,"XKB_KEY_XF86Calculator","","",N,N],[17,"XKB_KEY_XF86Memo","","",N,N],[17,"XKB_KEY_XF86ToDoList","","",N,N],[17,"XKB_KEY_XF86Calendar","","",N,N],[17,"XKB_KEY_XF86PowerDown","","",N,N],[17,"XKB_KEY_XF86ContrastAdjust","","",N,N],[17,"XKB_KEY_XF86RockerUp","","",N,N],[17,"XKB_KEY_XF86RockerDown","","",N,N],[17,"XKB_KEY_XF86RockerEnter","","",N,N],[17,"XKB_KEY_XF86Back","","",N,N],[17,"XKB_KEY_XF86Forward","","",N,N],[17,"XKB_KEY_XF86Stop","","",N,N],[17,"XKB_KEY_XF86Refresh","","",N,N],[17,"XKB_KEY_XF86PowerOff","","",N,N],[17,"XKB_KEY_XF86WakeUp","","",N,N],[17,"XKB_KEY_XF86Eject","","",N,N],[17,"XKB_KEY_XF86ScreenSaver","","",N,N],[17,"XKB_KEY_XF86WWW","","",N,N],[17,"XKB_KEY_XF86Sleep","","",N,N],[17,"XKB_KEY_XF86Favorites","","",N,N],[17,"XKB_KEY_XF86AudioPause","","",N,N],[17,"XKB_KEY_XF86AudioMedia","","",N,N],[17,"XKB_KEY_XF86MyComputer","","",N,N],[17,"XKB_KEY_XF86VendorHome","","",N,N],[17,"XKB_KEY_XF86LightBulb","","",N,N],[17,"XKB_KEY_XF86Shop","","",N,N],[17,"XKB_KEY_XF86History","","",N,N],[17,"XKB_KEY_XF86OpenURL","","",N,N],[17,"XKB_KEY_XF86AddFavorite","","",N,N],[17,"XKB_KEY_XF86HotLinks","","",N,N],[17,"XKB_KEY_XF86BrightnessAdjust","","",N,N],[17,"XKB_KEY_XF86Finance","","",N,N],[17,"XKB_KEY_XF86Community","","",N,N],[17,"XKB_KEY_XF86AudioRewind","","",N,N],[17,"XKB_KEY_XF86BackForward","","",N,N],[17,"XKB_KEY_XF86Launch0","","",N,N],[17,"XKB_KEY_XF86Launch1","","",N,N],[17,"XKB_KEY_XF86Launch2","","",N,N],[17,"XKB_KEY_XF86Launch3","","",N,N],[17,"XKB_KEY_XF86Launch4","","",N,N],[17,"XKB_KEY_XF86Launch5","","",N,N],[17,"XKB_KEY_XF86Launch6","","",N,N],[17,"XKB_KEY_XF86Launch7","","",N,N],[17,"XKB_KEY_XF86Launch8","","",N,N],[17,"XKB_KEY_XF86Launch9","","",N,N],[17,"XKB_KEY_XF86LaunchA","","",N,N],[17,"XKB_KEY_XF86LaunchB","","",N,N],[17,"XKB_KEY_XF86LaunchC","","",N,N],[17,"XKB_KEY_XF86LaunchD","","",N,N],[17,"XKB_KEY_XF86LaunchE","","",N,N],[17,"XKB_KEY_XF86LaunchF","","",N,N],[17,"XKB_KEY_XF86ApplicationLeft","","",N,N],[17,"XKB_KEY_XF86ApplicationRight","","",N,N],[17,"XKB_KEY_XF86Book","","",N,N],[17,"XKB_KEY_XF86CD","","",N,N],[17,"XKB_KEY_XF86Calculater","","",N,N],[17,"XKB_KEY_XF86Clear","","",N,N],[17,"XKB_KEY_XF86Close","","",N,N],[17,"XKB_KEY_XF86Copy","","",N,N],[17,"XKB_KEY_XF86Cut","","",N,N],[17,"XKB_KEY_XF86Display","","",N,N],[17,"XKB_KEY_XF86DOS","","",N,N],[17,"XKB_KEY_XF86Documents","","",N,N],[17,"XKB_KEY_XF86Excel","","",N,N],[17,"XKB_KEY_XF86Explorer","","",N,N],[17,"XKB_KEY_XF86Game","","",N,N],[17,"XKB_KEY_XF86Go","","",N,N],[17,"XKB_KEY_XF86iTouch","","",N,N],[17,"XKB_KEY_XF86LogOff","","",N,N],[17,"XKB_KEY_XF86Market","","",N,N],[17,"XKB_KEY_XF86Meeting","","",N,N],[17,"XKB_KEY_XF86MenuKB","","",N,N],[17,"XKB_KEY_XF86MenuPB","","",N,N],[17,"XKB_KEY_XF86MySites","","",N,N],[17,"XKB_KEY_XF86New","","",N,N],[17,"XKB_KEY_XF86News","","",N,N],[17,"XKB_KEY_XF86OfficeHome","","",N,N],[17,"XKB_KEY_XF86Open","","",N,N],[17,"XKB_KEY_XF86Option","","",N,N],[17,"XKB_KEY_XF86Paste","","",N,N],[17,"XKB_KEY_XF86Phone","","",N,N],[17,"XKB_KEY_XF86Q","","",N,N],[17,"XKB_KEY_XF86Reply","","",N,N],[17,"XKB_KEY_XF86Reload","","",N,N],[17,"XKB_KEY_XF86RotateWindows","","",N,N],[17,"XKB_KEY_XF86RotationPB","","",N,N],[17,"XKB_KEY_XF86RotationKB","","",N,N],[17,"XKB_KEY_XF86Save","","",N,N],[17,"XKB_KEY_XF86ScrollUp","","",N,N],[17,"XKB_KEY_XF86ScrollDown","","",N,N],[17,"XKB_KEY_XF86ScrollClick","","",N,N],[17,"XKB_KEY_XF86Send","","",N,N],[17,"XKB_KEY_XF86Spell","","",N,N],[17,"XKB_KEY_XF86SplitScreen","","",N,N],[17,"XKB_KEY_XF86Support","","",N,N],[17,"XKB_KEY_XF86TaskPane","","",N,N],[17,"XKB_KEY_XF86Terminal","","",N,N],[17,"XKB_KEY_XF86Tools","","",N,N],[17,"XKB_KEY_XF86Travel","","",N,N],[17,"XKB_KEY_XF86UserPB","","",N,N],[17,"XKB_KEY_XF86User1KB","","",N,N],[17,"XKB_KEY_XF86User2KB","","",N,N],[17,"XKB_KEY_XF86Video","","",N,N],[17,"XKB_KEY_XF86WheelButton","","",N,N],[17,"XKB_KEY_XF86Word","","",N,N],[17,"XKB_KEY_XF86Xfer","","",N,N],[17,"XKB_KEY_XF86ZoomIn","","",N,N],[17,"XKB_KEY_XF86ZoomOut","","",N,N],[17,"XKB_KEY_XF86Away","","",N,N],[17,"XKB_KEY_XF86Messenger","","",N,N],[17,"XKB_KEY_XF86WebCam","","",N,N],[17,"XKB_KEY_XF86MailForward","","",N,N],[17,"XKB_KEY_XF86Pictures","","",N,N],[17,"XKB_KEY_XF86Music","","",N,N],[17,"XKB_KEY_XF86Battery","","",N,N],[17,"XKB_KEY_XF86Bluetooth","","",N,N],[17,"XKB_KEY_XF86WLAN","","",N,N],[17,"XKB_KEY_XF86UWB","","",N,N],[17,"XKB_KEY_XF86AudioForward","","",N,N],[17,"XKB_KEY_XF86AudioRepeat","","",N,N],[17,"XKB_KEY_XF86AudioRandomPlay","","",N,N],[17,"XKB_KEY_XF86Subtitle","","",N,N],[17,"XKB_KEY_XF86AudioCycleTrack","","",N,N],[17,"XKB_KEY_XF86CycleAngle","","",N,N],[17,"XKB_KEY_XF86FrameBack","","",N,N],[17,"XKB_KEY_XF86FrameForward","","",N,N],[17,"XKB_KEY_XF86Time","","",N,N],[17,"XKB_KEY_XF86Select","","",N,N],[17,"XKB_KEY_XF86View","","",N,N],[17,"XKB_KEY_XF86TopMenu","","",N,N],[17,"XKB_KEY_XF86Red","","",N,N],[17,"XKB_KEY_XF86Green","","",N,N],[17,"XKB_KEY_XF86Yellow","","",N,N],[17,"XKB_KEY_XF86Blue","","",N,N],[17,"XKB_KEY_XF86Suspend","","",N,N],[17,"XKB_KEY_XF86Hibernate","","",N,N],[17,"XKB_KEY_XF86TouchpadToggle","","",N,N],[17,"XKB_KEY_XF86TouchpadOn","","",N,N],[17,"XKB_KEY_XF86TouchpadOff","","",N,N],[17,"XKB_KEY_XF86AudioMicMute","","",N,N],[17,"XKB_KEY_XF86Switch_VT_1","","",N,N],[17,"XKB_KEY_XF86Switch_VT_2","","",N,N],[17,"XKB_KEY_XF86Switch_VT_3","","",N,N],[17,"XKB_KEY_XF86Switch_VT_4","","",N,N],[17,"XKB_KEY_XF86Switch_VT_5","","",N,N],[17,"XKB_KEY_XF86Switch_VT_6","","",N,N],[17,"XKB_KEY_XF86Switch_VT_7","","",N,N],[17,"XKB_KEY_XF86Switch_VT_8","","",N,N],[17,"XKB_KEY_XF86Switch_VT_9","","",N,N],[17,"XKB_KEY_XF86Switch_VT_10","","",N,N],[17,"XKB_KEY_XF86Switch_VT_11","","",N,N],[17,"XKB_KEY_XF86Switch_VT_12","","",N,N],[17,"XKB_KEY_XF86Ungrab","","",N,N],[17,"XKB_KEY_XF86ClearGrab","","",N,N],[17,"XKB_KEY_XF86Next_VMode","","",N,N],[17,"XKB_KEY_XF86Prev_VMode","","",N,N],[17,"XKB_KEY_XF86LogWindowTree","","",N,N],[17,"XKB_KEY_XF86LogGrabInfo","","",N,N],[17,"XKB_KEY_SunFA_Grave","","",N,N],[17,"XKB_KEY_SunFA_Circum","","",N,N],[17,"XKB_KEY_SunFA_Tilde","","",N,N],[17,"XKB_KEY_SunFA_Acute","","",N,N],[17,"XKB_KEY_SunFA_Diaeresis","","",N,N],[17,"XKB_KEY_SunFA_Cedilla","","",N,N],[17,"XKB_KEY_SunF36","","",N,N],[17,"XKB_KEY_SunF37","","",N,N],[17,"XKB_KEY_SunSys_Req","","",N,N],[17,"XKB_KEY_SunPrint_Screen","","",N,N],[17,"XKB_KEY_SunCompose","","",N,N],[17,"XKB_KEY_SunAltGraph","","",N,N],[17,"XKB_KEY_SunPageUp","","",N,N],[17,"XKB_KEY_SunPageDown","","",N,N],[17,"XKB_KEY_SunUndo","","",N,N],[17,"XKB_KEY_SunAgain","","",N,N],[17,"XKB_KEY_SunFind","","",N,N],[17,"XKB_KEY_SunStop","","",N,N],[17,"XKB_KEY_SunProps","","",N,N],[17,"XKB_KEY_SunFront","","",N,N],[17,"XKB_KEY_SunCopy","","",N,N],[17,"XKB_KEY_SunOpen","","",N,N],[17,"XKB_KEY_SunPaste","","",N,N],[17,"XKB_KEY_SunCut","","",N,N],[17,"XKB_KEY_SunPowerSwitch","","",N,N],[17,"XKB_KEY_SunAudioLowerVolume","","",N,N],[17,"XKB_KEY_SunAudioMute","","",N,N],[17,"XKB_KEY_SunAudioRaiseVolume","","",N,N],[17,"XKB_KEY_SunVideoDegauss","","",N,N],[17,"XKB_KEY_SunVideoLowerBrightness","","",N,N],[17,"XKB_KEY_SunVideoRaiseBrightness","","",N,N],[17,"XKB_KEY_SunPowerSwitchShift","","",N,N],[17,"XKB_KEY_Dring_accent","","",N,N],[17,"XKB_KEY_Dcircumflex_accent","","",N,N],[17,"XKB_KEY_Dcedilla_accent","","",N,N],[17,"XKB_KEY_Dacute_accent","","",N,N],[17,"XKB_KEY_Dgrave_accent","","",N,N],[17,"XKB_KEY_Dtilde","","",N,N],[17,"XKB_KEY_Ddiaeresis","","",N,N],[17,"XKB_KEY_DRemove","","",N,N],[17,"XKB_KEY_hpClearLine","","",N,N],[17,"XKB_KEY_hpInsertLine","","",N,N],[17,"XKB_KEY_hpDeleteLine","","",N,N],[17,"XKB_KEY_hpInsertChar","","",N,N],[17,"XKB_KEY_hpDeleteChar","","",N,N],[17,"XKB_KEY_hpBackTab","","",N,N],[17,"XKB_KEY_hpKP_BackTab","","",N,N],[17,"XKB_KEY_hpModelock1","","",N,N],[17,"XKB_KEY_hpModelock2","","",N,N],[17,"XKB_KEY_hpReset","","",N,N],[17,"XKB_KEY_hpSystem","","",N,N],[17,"XKB_KEY_hpUser","","",N,N],[17,"XKB_KEY_hpmute_acute","","",N,N],[17,"XKB_KEY_hpmute_grave","","",N,N],[17,"XKB_KEY_hpmute_asciicircum","","",N,N],[17,"XKB_KEY_hpmute_diaeresis","","",N,N],[17,"XKB_KEY_hpmute_asciitilde","","",N,N],[17,"XKB_KEY_hplira","","",N,N],[17,"XKB_KEY_hpguilder","","",N,N],[17,"XKB_KEY_hpYdiaeresis","","",N,N],[17,"XKB_KEY_hpIO","","",N,N],[17,"XKB_KEY_hplongminus","","",N,N],[17,"XKB_KEY_hpblock","","",N,N],[17,"XKB_KEY_osfCopy","","",N,N],[17,"XKB_KEY_osfCut","","",N,N],[17,"XKB_KEY_osfPaste","","",N,N],[17,"XKB_KEY_osfBackTab","","",N,N],[17,"XKB_KEY_osfBackSpace","","",N,N],[17,"XKB_KEY_osfClear","","",N,N],[17,"XKB_KEY_osfEscape","","",N,N],[17,"XKB_KEY_osfAddMode","","",N,N],[17,"XKB_KEY_osfPrimaryPaste","","",N,N],[17,"XKB_KEY_osfQuickPaste","","",N,N],[17,"XKB_KEY_osfPageLeft","","",N,N],[17,"XKB_KEY_osfPageUp","","",N,N],[17,"XKB_KEY_osfPageDown","","",N,N],[17,"XKB_KEY_osfPageRight","","",N,N],[17,"XKB_KEY_osfActivate","","",N,N],[17,"XKB_KEY_osfMenuBar","","",N,N],[17,"XKB_KEY_osfLeft","","",N,N],[17,"XKB_KEY_osfUp","","",N,N],[17,"XKB_KEY_osfRight","","",N,N],[17,"XKB_KEY_osfDown","","",N,N],[17,"XKB_KEY_osfEndLine","","",N,N],[17,"XKB_KEY_osfBeginLine","","",N,N],[17,"XKB_KEY_osfEndData","","",N,N],[17,"XKB_KEY_osfBeginData","","",N,N],[17,"XKB_KEY_osfPrevMenu","","",N,N],[17,"XKB_KEY_osfNextMenu","","",N,N],[17,"XKB_KEY_osfPrevField","","",N,N],[17,"XKB_KEY_osfNextField","","",N,N],[17,"XKB_KEY_osfSelect","","",N,N],[17,"XKB_KEY_osfInsert","","",N,N],[17,"XKB_KEY_osfUndo","","",N,N],[17,"XKB_KEY_osfMenu","","",N,N],[17,"XKB_KEY_osfCancel","","",N,N],[17,"XKB_KEY_osfHelp","","",N,N],[17,"XKB_KEY_osfSelectAll","","",N,N],[17,"XKB_KEY_osfDeselectAll","","",N,N],[17,"XKB_KEY_osfReselect","","",N,N],[17,"XKB_KEY_osfExtend","","",N,N],[17,"XKB_KEY_osfRestore","","",N,N],[17,"XKB_KEY_osfDelete","","",N,N],[17,"XKB_KEY_Reset","","",N,N],[17,"XKB_KEY_System","","",N,N],[17,"XKB_KEY_User","","",N,N],[17,"XKB_KEY_ClearLine","","",N,N],[17,"XKB_KEY_InsertLine","","",N,N],[17,"XKB_KEY_DeleteLine","","",N,N],[17,"XKB_KEY_InsertChar","","",N,N],[17,"XKB_KEY_DeleteChar","","",N,N],[17,"XKB_KEY_BackTab","","",N,N],[17,"XKB_KEY_KP_BackTab","","",N,N],[17,"XKB_KEY_Ext16bit_L","","",N,N],[17,"XKB_KEY_Ext16bit_R","","",N,N],[17,"XKB_KEY_mute_acute","","",N,N],[17,"XKB_KEY_mute_grave","","",N,N],[17,"XKB_KEY_mute_asciicircum","","",N,N],[17,"XKB_KEY_mute_diaeresis","","",N,N],[17,"XKB_KEY_mute_asciitilde","","",N,N],[17,"XKB_KEY_lira","","",N,N],[17,"XKB_KEY_guilder","","",N,N],[17,"XKB_KEY_IO","","",N,N],[17,"XKB_KEY_longminus","","",N,N],[17,"XKB_KEY_block","","",N,N],[11,"clone","smithay_client_toolkit::keyboard","",311,[[["self"]],["modifiersstate"]]],[11,"fmt","","",311,[[["self"],["formatter"]],["result"]]],[11,"default","","",311,[[],["modifiersstate"]]],[11,"eq","","",314,[[["self"],["keyrepeatkind"]],["bool"]]],[11,"ne","","",314,[[["self"],["keyrepeatkind"]],["bool"]]],[11,"fmt","","",315,[[["self"],["formatter"]],["result"]]],[0,"output","smithay_client_toolkit","Types related to `wl_output` handling",N,N],[4,"Subpixel","smithay_client_toolkit::output","subpixel geometry information",N,N],[13,"Unknown","","unknown geometry",40,N],[13,"None","","no geometry",40,N],[13,"HorizontalRgb","","horizontal RGB",40,N],[13,"HorizontalBgr","","horizontal BGR",40,N],[13,"VerticalRgb","","vertical RGB",40,N],[13,"VerticalBgr","","vertical BGR",40,N],[4,"Transform","","transform from framebuffer to output",N,N],[13,"Normal","","no transform",41,N],[13,"_90","","90 degrees counter-clockwise",41,N],[13,"_180","","180 degrees counter-clockwise",41,N],[13,"_270","","270 degrees counter-clockwise",41,N],[13,"Flipped","","180 degree flip around a vertical axis",41,N],[13,"Flipped90","","flip and rotate 90 degrees counter-clockwise",41,N],[13,"Flipped180","","flip and rotate 180 degrees counter-clockwise",41,N],[13,"Flipped270","","flip and rotate 270 degrees counter-clockwise",41,N],[3,"Mode","","A possible mode for an output",N,N],[12,"dimensions","","Number of pixels of this mode in format `(width, height)`",317,N],[12,"refresh_rate","","Refresh rate for this mode, in mHz",317,N],[12,"is_current","","Whether this is the current mode for this output",317,N],[12,"is_preferred","","Whether this is the preferred mode for this output",317,N],[3,"OutputInfo","","Compiled information about an output",N,N],[12,"model","","The model name of this output as advertized by the server",318,N],[12,"make","","The make name of this output as advertized by the server",318,N],[12,"location","","Location of the top-left corner of this output in compositor space",318,N],[12,"physical_size","","Physical dimensions of this output, in unspecified units",318,N],[12,"subpixel","","The subpixel layout for this output",318,N],[12,"transform","","The current transformation applied to this output",318,N],[12,"scale_factor","","The scaling factor of this output",318,N],[12,"modes","","Possible modes for an output",318,N],[3,"OutputMgr","","An utility tracking the available outputs and their capabilities",N,N],[11,"clone","","",317,[[["self"]],["mode"]]],[11,"fmt","","",317,[[["self"],["formatter"]],["result"]]],[11,"clone","","",318,[[["self"]],["outputinfo"]]],[11,"fmt","","",318,[[["self"],["formatter"]],["result"]]],[11,"clone","","",319,[[["self"]],["outputmgr"]]],[11,"find_id","","Access the information of a specific output from its global id",319,[[["self"],["u32"],["f"]],["option"]]],[11,"with_info","","Access the information of a specific output",319,[[["self"],["proxy"],["f"]],["option"]]],[11,"with_all","","Access all output information",319,[[["self"],["f"]],["t"]]],[0,"pointer","smithay_client_toolkit","Utilities to work with pointers and their icons",N,N],[3,"ThemeManager","smithay_client_toolkit::pointer","Wrapper managing a system theme for pointer images",N,N],[3,"ThemedPointer","","Wrapper of a themed pointer",N,N],[4,"AutoThemer","","Wrapper to gracefully handle a missing `libwayland-cursor`",N,N],[13,"Themed","","The theme could be loaded",320,N],[13,"UnThemed","","`libwayland-cursor.so` is not available",320,N],[4,"AutoPointer","","A pointer wrapper to gracefully handle a missing `libwayland-cursor`",N,N],[13,"Themed","","The `ThemedPointer`",321,N],[13,"UnThemed","","The regular pointer if theme capability is not available",321,N],[11,"init","","Load a system pointer theme",322,[[["option",["str"]],["proxy",["wlcompositor"]],["proxy",["wlshm"]]],["result",["thememanager"]]]],[11,"theme_pointer","","Wrap a pointer to theme it",322,[[["self"],["proxy",["wlpointer"]]],["themedpointer"]]],[11,"theme_pointer_with_impl","","Initialize a new pointer as a ThemedPointer with an adapter implementation",322,[[["self"],["newproxy",["wlpointer"]],["impl"]],["themedpointer"]]],[11,"theme_pointer_with_nonsend_impl","","Initialize a new pointer as a ThemedPointer with an adapter implementation",322,[[["self"],["newproxy",["wlpointer"]],["impl"],["queuetoken"]],["themedpointer"]]],[11,"set_cursor","","Change the cursor to the given cursor name",323,[[["self"],["str"],["option",["u32"]]],["result"]]],[11,"clone","","",323,[[["self"]],["themedpointer"]]],[11,"deref","","",323,[[["self"]],["proxy"]]],[11,"init","","Load a system pointer theme",320,[[["option",["str"]],["proxy",["wlcompositor"]],["proxy",["wlshm"]]],["autothemer"]]],[11,"theme_pointer","","Wrap a pointer to theme it",320,[[["self"],["proxy",["wlpointer"]]],["autopointer"]]],[11,"theme_pointer_with_impl","","Initialize a new pointer as a ThemedPointer with an adapter implementation",320,[[["self"],["newproxy",["wlpointer"]],["impl"]],["autopointer"]]],[11,"theme_pointer_with_nonsend_impl","","Initialize a new pointer as a ThemedPointer with an adapter implementation",320,[[["self"],["newproxy",["wlpointer"]],["impl"],["queuetoken"]],["autopointer"]]],[11,"set_cursor","","Change the cursor to the given cursor name",321,[[["self"],["str"],["option",["u32"]]],["result"]]],[11,"deref","","",321,[[["self"]],["proxy"]]],[11,"clone","","",321,[[["self"]],["autopointer"]]],[0,"utils","smithay_client_toolkit","Various small utilities helping you to write clients",N,N],[3,"DoubleMemPool","smithay_client_toolkit::utils","A Double memory pool, for convenient double-buffering",N,N],[3,"MemPool","","A wrapper handling an SHM memory pool backed by a shared memory file",N,N],[11,"new","","Create a double memory pool",324,[[["proxy"],["impl"]],["result",["doublemempool"]]]],[11,"pool","","This method checks both its internal memory pools and returns one if that pool does not contain any buffers that are still in use by the server. If both the memory pools contain buffers that are currently in use by the server None will be returned.",324,[[["self"]],["option",["mempool"]]]],[11,"new","","Create a new memory pool associated with given shm",325,[[["proxy"],["impl"]],["result",["mempool"]]]],[11,"resize","","Resize the memory pool",325,[[["self"],["usize"]],["result"]]],[11,"buffer","","Create a new buffer to this pool",325,[[["self"],["i32"],["i32"],["i32"],["i32"],["format"]],["proxy",["wlbuffer"]]]],[11,"is_used","","Retuns true if the pool contains buffers that are currently in use by the server otherwise it returns false",325,[[["self"]],["bool"]]],[11,"drop","","",325,[[["self"]]]],[11,"write","","",325,N],[11,"flush","","",325,[[["self"]],["result"]]],[11,"seek","","",325,[[["self"],["seekfrom"]],["result",["u64"]]]],[0,"window","smithay_client_toolkit","",N,N],[4,"State","smithay_client_toolkit::window","types of state on the surface",N,N],[13,"Maximized","","the surface is maximized",284,N],[13,"Fullscreen","","the surface is fullscreen",284,N],[13,"Resizing","","the surface is being resized",284,N],[13,"Activated","","the surface is now activated",284,N],[13,"TiledLeft","","the surface is tiled",284,N],[13,"TiledRight","","the surface is tiled",284,N],[13,"TiledTop","","the surface is tiled",284,N],[13,"TiledBottom","","the surface is tiled",284,N],[3,"BasicFrame","","A minimalistic set of decorations",N,N],[3,"Window","","A window",N,N],[4,"Event","","Possible events generated by a window that you need to handle",N,N],[13,"Configure","","The state of your window has been changed",326,N],[12,"new_size","smithay_client_toolkit::window::Event","Optionnal new size for your inner surface",326,N],[12,"states","","New combination of states of your window",326,N],[13,"Close","smithay_client_toolkit::window","A close request has been received",326,N],[13,"Refresh","","The decorations need to be refreshed",326,N],[4,"FrameRequest","","Request generated by a Frame",N,N],[13,"Minimize","","The window should be minimized",327,N],[13,"Maximize","","The window should be maximized",327,N],[13,"UnMaximize","","The window should be unmaximized",327,N],[13,"Close","","The window should be closed",327,N],[13,"Move","","An interactive move should be started",327,N],[13,"Resize","","An interactive resize should be started",327,N],[13,"Refresh","","The frame requests to be refreshed",327,N],[11,"init","","",328,[[["proxy"],["proxy"],["proxy"],["proxy"],["box",["implementation"]]],["result",["basicframe","error"]]]],[11,"new_seat","","",328,[[["self"],["proxy"]]]],[11,"set_active","","",328,[[["self"],["bool"]],["bool"]]],[11,"set_hidden","","",328,[[["self"],["bool"]]]],[11,"set_maximized","","",328,[[["self"],["bool"]],["bool"]]],[11,"set_resizable","","",328,[[["self"],["bool"]]]],[11,"resize","","",328,N],[11,"redraw","","",328,[[["self"]]]],[11,"subtract_borders","","",328,N],[11,"add_borders","","",328,N],[11,"location","","",328,N],[11,"drop","","",328,[[["self"]]]],[8,"Frame","","Interface for defining the drawing of decorations",N,N],[16,"Error","","Type of errors that may occur when attempting to create a frame",329,N],[10,"init","","Initialize the Frame",329,[[["proxy"],["proxy"],["proxy"],["proxy"],["box",["implementation"]]],["result"]]],[10,"set_active","","Set whether the decorations should be drawn as active or not",329,[[["self"],["bool"]],["bool"]]],[10,"set_maximized","","Set whether the decorations should be drawn as maximized or not",329,[[["self"],["bool"]],["bool"]]],[10,"set_hidden","","Hide or show the decorations",329,[[["self"],["bool"]]]],[10,"set_resizable","","Set whether interactive resize hints should be displayed and reacted to",329,[[["self"],["bool"]]]],[10,"new_seat","","Notify that a new wl_seat should be handled",329,[[["self"],["proxy"]]]],[10,"resize","","Change the size of the decorations",329,N],[10,"redraw","","Redraw the decorations",329,[[["self"]]]],[10,"subtract_borders","","Subtracts the border dimensions from the given dimensions.",329,N],[10,"add_borders","","Adds the border dimensions to the given dimensions.",329,N],[11,"location","","Returns the coordinates of the top-left corner of the borders relative to the content",329,N],[11,"clone","","",326,[[["self"]],["event"]]],[11,"fmt","","",326,[[["self"],["formatter"]],["result"]]],[11,"init_from_env","","Create a new window wrapping a given wayland surface as its main content and following the compositor's preference regarding server-side decorations.",330,N],[11,"init","","Create a new window wrapping a given wayland surface as its main content",330,N],[11,"init_with_decorations","","Create a new window wrapping a given wayland surface as its main content and following the compositor's preference regarding server-side decorations",330,N],[11,"new_seat","","Notify this window that a new seat is accessible",330,[[["self"],["proxy"]]]],[11,"surface","","Access the surface wrapped in this Window",330,[[["self"]],["proxy"]]],[11,"refresh","","Refreshes the frame",330,[[["self"]]]],[11,"set_title","","Set a short title for the window.",330,[[["self"],["string"]]]],[11,"set_app_id","","Set an app id for the surface.",330,[[["self"],["string"]]]],[11,"set_decorate","","Set whether the window should be decorated or not",330,[[["self"],["bool"]]]],[11,"set_resizable","","Set whether the window should be resizeable by the user",330,[[["self"],["bool"]]]],[11,"resize","","Resize the decorations",330,[[["self"],["u32"],["u32"]]]],[11,"set_maximized","","Request the window to be maximized",330,[[["self"]]]],[11,"unset_maximized","","Request the window to be un-maximized",330,[[["self"]]]],[11,"set_minimized","","Request the window to be minimized",330,[[["self"]]]],[11,"set_fullscreen","","Request the window to be set fullscreen",330,[[["self"],["option",["proxy"]]]]],[11,"unset_fullscreen","","Request the window to quit fullscreen mode",330,[[["self"]]]],[11,"set_min_size","","Sets the minimum possible size for this window",330,[[["self"],["option"]]]],[11,"set_max_size","","Sets the maximum possible size for this window",330,[[["self"],["option"]]]],[11,"drop","","",330,[[["self"]]]],[11,"needs_configure","smithay_client_toolkit","Check whether you need to wait for a configure before drawing to your surfaces",1,[[["self"]],["bool"]]],[11,"from_registry","","Create an environment wrapping a new registry",0,[[["newproxy",["wlregistry"]],["eventqueue"]],["result",["environment"]]]],[11,"from_registry_with_cb","","Create an environment wrapping a new registry",0,[[["newproxy",["wlregistry"]],["eventqueue"],["impl"]],["result",["environment"]]]],[11,"shm_formats","","Retrive the accepted SHM formats of the server",0,[[["self"]],["vec",["format"]]]],[11,"get_cursor","smithay_client_toolkit::reexports::client::cursor","Retrieve a cursor from the theme.",331,[[["self"],["str"]],["option",["cursor"]]]],[11,"bitand","smithay_client_toolkit::data_device","Returns the intersection between the two sets of flags.",332,[[["self"],["dndaction"]],["dndaction"]]],[11,"bitand","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Returns the intersection between the two sets of flags.",333,[[["self"],["transient"]],["transient"]]],[11,"bitand","smithay_client_toolkit::reexports::client::protocol::wl_seat","Returns the intersection between the two sets of flags.",334,[[["self"],["capability"]],["capability"]]],[11,"bitand","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Returns the intersection between the two sets of flags.",335,[[["self"],["resize"]],["resize"]]],[11,"bitand","smithay_client_toolkit::reexports::client::protocol::wl_output","Returns the intersection between the two sets of flags.",336,[[["self"],["mode"]],["mode"]]],[11,"release","smithay_client_toolkit::reexports::client","",337,N],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::data_device","",332,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["self"],["formatter"]],["result",["error"]]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"attach","","",337,N],[11,"damage","","",337,N],[11,"frame","","",337,[[["self"]],["result",["newproxy"]]]],[11,"set_opaque_region","","",337,N],[11,"set_input_region","","",337,N],[11,"commit","","",337,N],[11,"set_buffer_transform","","",337,N],[11,"set_buffer_scale","","",337,N],[11,"damage_buffer","","",337,N],[11,"create_data_source","","",337,[[["self"]],["result",["newproxy"]]]],[11,"get_data_device","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"bind","","",337,[[["self"],["u32"],["u32"]],["result",["newproxy"]]]],[11,"get_shell_surface","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"get_subsurface","","",337,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[11,"drop","","",338,N],[11,"drop","","",337,N],[11,"drop","smithay_client_toolkit::reexports::client::egl","",339,N],[11,"drop","smithay_client_toolkit::reexports::client::cursor","",331,N],[11,"start_drag","smithay_client_toolkit::reexports::client","",337,N],[11,"set_selection","","",337,N],[11,"release","","",337,N],[11,"bitor","smithay_client_toolkit::reexports::client::protocol::wl_output","Returns the union of the two sets of flags.",336,[[["self"],["mode"]],["mode"]]],[11,"bitor","smithay_client_toolkit::data_device","Returns the union of the two sets of flags.",332,[[["self"],["dndaction"]],["dndaction"]]],[11,"bitor","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Returns the union of the two sets of flags.",335,[[["self"],["resize"]],["resize"]]],[11,"bitor","smithay_client_toolkit::reexports::client::protocol::wl_seat","Returns the union of the two sets of flags.",334,[[["self"],["capability"]],["capability"]]],[11,"bitor","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Returns the union of the two sets of flags.",333,[[["self"],["transient"]],["transient"]]],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_surface","",340,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_shm","",341,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_shm_pool","",342,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_registry","",343,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",344,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_touch","",345,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_region","",346,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","",347,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",348,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_seat","",349,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_shell","",350,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_data_device_manager","",351,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",352,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",353,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_callback","",354,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_output","",355,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_buffer","",356,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_compositor","",357,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_display","",358,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","",359,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",360,N],[11,"c_interface","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",361,N],[11,"fmt","","",335,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::data_device","",332,[[["self"],["formatter"]],["result",["error"]]]],[11,"send","smithay_client_toolkit::reexports::client","Send a request through this object",337,N],[11,"is_alive","","Check if the object associated with this proxy is still alive",337,[[["self"]],["bool"]]],[11,"version","","Retrieve the interface version of this wayland object instance",337,[[["self"]],["u32"]]],[11,"set_user_data","","Associate an arbitrary payload to this object",337,N],[11,"get_user_data","","Retrieve the arbitrary payload associated to this object",337,N],[11,"is_external","","Check whether this proxy is managed by the library or not",337,[[["self"]],["bool"]]],[11,"equals","","Check if the other proxy refers to the same underlying wayland object",337,[[["self"],["proxy"]],["bool"]]],[11,"c_ptr","","Get a raw pointer to the underlying wayland object",337,N],[11,"from_c_ptr","","Create a `Proxy` instance from a C pointer",337,N],[11,"make_wrapper","","Create a wrapper for this object for queue management",337,[[["self"],["queuetoken"]],["result",["proxy"]]]],[11,"child","","Create a new child object",337,[[["self"]],["newproxy"]]],[11,"is_implemented_with","","Check whether this proxy has been implemented with given type",337,[[["self"]],["bool"]]],[11,"deref","","",362,[[["self"]],["proxy"]]],[11,"deref","smithay_client_toolkit::reexports::client::cursor","",363,[[["self"]],["proxy"]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::data_device","",332,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"],["formatter"]],["result",["error"]]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"set_position","","",337,N],[11,"place_above","","",337,N],[11,"place_below","","",337,N],[11,"set_sync","","",337,N],[11,"set_desync","","",337,N],[11,"accept","","",337,N],[11,"receive","","",337,N],[11,"destroy","","",337,N],[11,"finish","","",337,N],[11,"set_actions","","",337,N],[11,"create_pool","","",337,[[["self"],["i32"],["i32"]],["result",["newproxy"]]]],[11,"extend","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,N],[11,"extend","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,N],[11,"extend","smithay_client_toolkit::data_device","",332,N],[11,"extend","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,N],[11,"extend","","",335,N],[11,"bitxor_assign","smithay_client_toolkit::reexports::client::protocol::wl_seat","Toggles the set of flags.",334,N],[11,"bitxor_assign","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Toggles the set of flags.",335,N],[11,"bitxor_assign","smithay_client_toolkit::reexports::client::protocol::wl_output","Toggles the set of flags.",336,N],[11,"bitxor_assign","smithay_client_toolkit::data_device","Toggles the set of flags.",332,N],[11,"bitxor_assign","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Toggles the set of flags.",333,N],[11,"bitor_assign","smithay_client_toolkit::data_device","Adds the set of flags.",332,N],[11,"bitor_assign","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Adds the set of flags.",335,N],[11,"bitor_assign","smithay_client_toolkit::reexports::client::protocol::wl_seat","Adds the set of flags.",334,N],[11,"bitor_assign","smithay_client_toolkit::reexports::client::protocol::wl_output","Adds the set of flags.",336,N],[11,"bitor_assign","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Adds the set of flags.",333,N],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"add","","",337,N],[11,"subtract","","",337,N],[11,"get_pointer","","",337,[[["self"]],["result",["newproxy"]]]],[11,"get_keyboard","","",337,[[["self"]],["result",["newproxy"]]]],[11,"get_touch","","",337,[[["self"]],["result",["newproxy"]]]],[11,"release","","",337,N],[11,"create_surface","","",337,[[["self"]],["result",["newproxy"]]]],[11,"create_region","","",337,[[["self"]],["result",["newproxy"]]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",14,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","",18,[[["self"]],["keymapformat"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",83,[[["self"]],["axissource"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",54,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",27,[[["self"]],["fullscreenmethod"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",81,[[["self"]],["buttonstate"]]],[11,"clone","smithay_client_toolkit::keyboard","",19,[[["self"]],["keystate"]]],[11,"clone","smithay_client_toolkit::output","",40,[[["self"]],["subpixel"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",82,[[["self"]],["axis"]]],[11,"clone","smithay_client_toolkit::reexports::client","",337,[[["self"]],["proxy"]]],[11,"clone","","",364,[[["self"]],["globalmanager"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["self"]],["resize"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_shm","",61,[[["self"]],["format"]]],[11,"clone","smithay_client_toolkit::output","",41,[[["self"]],["transform"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_shm","",60,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::data_device","",332,[[["self"]],["dndaction"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",80,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"]],["mode"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_display","",50,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",72,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,[[["self"]],["transient"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",76,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","",34,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_surface","",65,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"]],["capability"]]],[11,"clone","smithay_client_toolkit::reexports::client::protocol::wl_shell","",45,[[["self"]],["error"]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",335,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_surface","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::output","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_display","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::data_device","",332,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shm","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shm","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::keyboard","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::output","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"release","smithay_client_toolkit::reexports::client","",337,N],[11,"offer","","",337,N],[11,"destroy","","",337,N],[11,"set_actions","","",337,N],[11,"cmp","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"],["capability"]],["ordering"]]],[11,"cmp","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["self"],["resize"]],["ordering"]]],[11,"cmp","","",333,[[["self"],["transient"]],["ordering"]]],[11,"cmp","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"],["mode"]],["ordering"]]],[11,"cmp","smithay_client_toolkit::data_device","",332,[[["self"],["dndaction"]],["ordering"]]],[11,"sub","smithay_client_toolkit::reexports::client::protocol::wl_seat","Returns the set difference of the two sets of flags.",334,[[["self"],["capability"]],["capability"]]],[11,"sub","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Returns the set difference of the two sets of flags.",335,[[["self"],["resize"]],["resize"]]],[11,"sub","","Returns the set difference of the two sets of flags.",333,[[["self"],["transient"]],["transient"]]],[11,"sub","smithay_client_toolkit::reexports::client::protocol::wl_output","Returns the set difference of the two sets of flags.",336,[[["self"],["mode"]],["mode"]]],[11,"sub","smithay_client_toolkit::data_device","Returns the set difference of the two sets of flags.",332,[[["self"],["dndaction"]],["dndaction"]]],[11,"from_iter","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["t"]],["capability"]]],[11,"from_iter","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,[[["t"]],["transient"]]],[11,"from_iter","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["t"]],["mode"]]],[11,"from_iter","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["t"]],["resize"]]],[11,"from_iter","smithay_client_toolkit::data_device","",332,[[["t"]],["dndaction"]]],[11,"create_buffer","smithay_client_toolkit::reexports::client","",337,[[["self"],["i32"],["i32"],["i32"],["i32"],["format"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"resize","","",337,N],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_compositor","",365,[[["self"]],["bool"]]],[11,"from_raw_c","","",365,N],[11,"as_raw_c_in","","",365,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_region","",366,[[["self"]],["bool"]]],[11,"from_raw_c","","",366,N],[11,"as_raw_c_in","","",366,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",29,[[["self"]],["bool"]]],[11,"from_raw_c","","",29,N],[11,"as_raw_c_in","","",29,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",84,[[["self"]],["bool"]]],[11,"from_raw_c","","",84,N],[11,"as_raw_c_in","","",84,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_display","",52,[[["self"]],["bool"]]],[11,"from_raw_c","","",52,N],[11,"as_raw_c_in","","",52,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_surface","",66,[[["self"]],["bool"]]],[11,"from_raw_c","","",66,N],[11,"as_raw_c_in","","",66,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_buffer","",37,[[["self"]],["bool"]]],[11,"from_raw_c","","",37,N],[11,"as_raw_c_in","","",37,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_compositor","",12,[[["self"]],["bool"]]],[11,"from_raw_c","","",12,N],[11,"as_raw_c_in","","",12,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","",20,[[["self"]],["bool"]]],[11,"from_raw_c","","",20,N],[11,"as_raw_c_in","","",20,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_registry","",57,[[["self"]],["bool"]]],[11,"from_raw_c","","",57,N],[11,"as_raw_c_in","","",57,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",85,[[["self"]],["bool"]]],[11,"from_raw_c","","",85,N],[11,"as_raw_c_in","","",85,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_shm_pool","",367,[[["self"]],["bool"]]],[11,"from_raw_c","","",367,N],[11,"as_raw_c_in","","",367,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_registry","",58,[[["self"]],["bool"]]],[11,"from_raw_c","","",58,N],[11,"as_raw_c_in","","",58,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_data_device_manager","",368,[[["self"]],["bool"]]],[11,"from_raw_c","","",368,N],[11,"as_raw_c_in","","",368,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",73,[[["self"]],["bool"]]],[11,"from_raw_c","","",73,N],[11,"as_raw_c_in","","",73,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_display","",51,[[["self"]],["bool"]]],[11,"from_raw_c","","",51,N],[11,"as_raw_c_in","","",51,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",55,[[["self"]],["bool"]]],[11,"from_raw_c","","",55,N],[11,"as_raw_c_in","","",55,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_output","",42,[[["self"]],["bool"]]],[11,"from_raw_c","","",42,N],[11,"as_raw_c_in","","",42,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",43,[[["self"]],["bool"]]],[11,"from_raw_c","","",43,N],[11,"as_raw_c_in","","",43,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",74,[[["self"]],["bool"]]],[11,"from_raw_c","","",74,N],[11,"as_raw_c_in","","",74,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_touch","",32,[[["self"]],["bool"]]],[11,"from_raw_c","","",32,N],[11,"as_raw_c_in","","",32,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_shell","",369,[[["self"]],["bool"]]],[11,"from_raw_c","","",369,N],[11,"as_raw_c_in","","",369,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_data_device_manager","",25,[[["self"]],["bool"]]],[11,"from_raw_c","","",25,N],[11,"as_raw_c_in","","",25,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_shm_pool","",48,[[["self"]],["bool"]]],[11,"from_raw_c","","",48,N],[11,"as_raw_c_in","","",48,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","",21,[[["self"]],["bool"]]],[11,"from_raw_c","","",21,N],[11,"as_raw_c_in","","",21,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_callback","",370,[[["self"]],["bool"]]],[11,"from_raw_c","","",370,N],[11,"as_raw_c_in","","",370,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","",371,[[["self"]],["bool"]]],[11,"from_raw_c","","",371,N],[11,"as_raw_c_in","","",371,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_buffer","",38,[[["self"]],["bool"]]],[11,"from_raw_c","","",38,N],[11,"as_raw_c_in","","",38,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",78,[[["self"]],["bool"]]],[11,"from_raw_c","","",78,N],[11,"as_raw_c_in","","",78,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","",35,[[["self"]],["bool"]]],[11,"from_raw_c","","",35,N],[11,"as_raw_c_in","","",35,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_shm","",62,[[["self"]],["bool"]]],[11,"from_raw_c","","",62,N],[11,"as_raw_c_in","","",62,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_seat","",69,[[["self"]],["bool"]]],[11,"from_raw_c","","",69,N],[11,"as_raw_c_in","","",69,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_callback","",11,[[["self"]],["bool"]]],[11,"from_raw_c","","",11,N],[11,"as_raw_c_in","","",11,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",372,[[["self"]],["bool"]]],[11,"from_raw_c","","",372,N],[11,"as_raw_c_in","","",372,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",77,[[["self"]],["bool"]]],[11,"from_raw_c","","",77,N],[11,"as_raw_c_in","","",77,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_region","",23,[[["self"]],["bool"]]],[11,"from_raw_c","","",23,N],[11,"as_raw_c_in","","",23,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",15,[[["self"]],["bool"]]],[11,"from_raw_c","","",15,N],[11,"as_raw_c_in","","",15,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_surface","",67,[[["self"]],["bool"]]],[11,"from_raw_c","","",67,N],[11,"as_raw_c_in","","",67,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",16,[[["self"]],["bool"]]],[11,"from_raw_c","","",16,N],[11,"as_raw_c_in","","",16,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_shell","",46,[[["self"]],["bool"]]],[11,"from_raw_c","","",46,N],[11,"as_raw_c_in","","",46,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_seat","",70,[[["self"]],["bool"]]],[11,"from_raw_c","","",70,N],[11,"as_raw_c_in","","",70,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_touch","",31,[[["self"]],["bool"]]],[11,"from_raw_c","","",31,N],[11,"as_raw_c_in","","",31,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",28,[[["self"]],["bool"]]],[11,"from_raw_c","","",28,N],[11,"as_raw_c_in","","",28,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::protocol::wl_shm","",63,[[["self"]],["bool"]]],[11,"from_raw_c","","",63,N],[11,"as_raw_c_in","","",63,[[["self"],["f"]],["t"]]],[11,"pong","smithay_client_toolkit::reexports::client","",337,N],[11,"_move","","",337,N],[11,"resize","","",337,N],[11,"set_toplevel","","",337,N],[11,"set_transient","","",337,N],[11,"set_fullscreen","","",337,N],[11,"set_popup","","",337,N],[11,"set_maximized","","",337,N],[11,"set_title","","",337,N],[11,"set_class","","",337,N],[11,"sub_assign","smithay_client_toolkit::reexports::client::protocol::wl_seat","Disables all flags enabled in the set.",334,N],[11,"sub_assign","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Disables all flags enabled in the set.",333,N],[11,"sub_assign","smithay_client_toolkit::reexports::client::protocol::wl_output","Disables all flags enabled in the set.",336,N],[11,"sub_assign","smithay_client_toolkit::data_device","Disables all flags enabled in the set.",332,N],[11,"sub_assign","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Disables all flags enabled in the set.",335,N],[11,"partial_cmp","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"],["capability"]],["option",["ordering"]]]],[11,"lt","","",334,[[["self"],["capability"]],["bool"]]],[11,"le","","",334,[[["self"],["capability"]],["bool"]]],[11,"gt","","",334,[[["self"],["capability"]],["bool"]]],[11,"ge","","",334,[[["self"],["capability"]],["bool"]]],[11,"partial_cmp","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["self"],["resize"]],["option",["ordering"]]]],[11,"lt","","",335,[[["self"],["resize"]],["bool"]]],[11,"le","","",335,[[["self"],["resize"]],["bool"]]],[11,"gt","","",335,[[["self"],["resize"]],["bool"]]],[11,"ge","","",335,[[["self"],["resize"]],["bool"]]],[11,"partial_cmp","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"],["mode"]],["option",["ordering"]]]],[11,"lt","","",336,[[["self"],["mode"]],["bool"]]],[11,"le","","",336,[[["self"],["mode"]],["bool"]]],[11,"gt","","",336,[[["self"],["mode"]],["bool"]]],[11,"ge","","",336,[[["self"],["mode"]],["bool"]]],[11,"partial_cmp","smithay_client_toolkit::data_device","",332,[[["self"],["dndaction"]],["option",["ordering"]]]],[11,"lt","","",332,[[["self"],["dndaction"]],["bool"]]],[11,"le","","",332,[[["self"],["dndaction"]],["bool"]]],[11,"gt","","",332,[[["self"],["dndaction"]],["bool"]]],[11,"ge","","",332,[[["self"],["dndaction"]],["bool"]]],[11,"partial_cmp","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,[[["self"],["transient"]],["option",["ordering"]]]],[11,"lt","","",333,[[["self"],["transient"]],["bool"]]],[11,"le","","",333,[[["self"],["transient"]],["bool"]]],[11,"gt","","",333,[[["self"],["transient"]],["bool"]]],[11,"ge","","",333,[[["self"],["transient"]],["bool"]]],[11,"bitand_assign","smithay_client_toolkit::reexports::client::protocol::wl_output","Disables all flags disabled in the set.",336,N],[11,"bitand_assign","smithay_client_toolkit::data_device","Disables all flags disabled in the set.",332,N],[11,"bitand_assign","smithay_client_toolkit::reexports::client::protocol::wl_seat","Disables all flags disabled in the set.",334,N],[11,"bitand_assign","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Disables all flags disabled in the set.",335,N],[11,"bitand_assign","","Disables all flags disabled in the set.",333,N],[11,"fmt","","",333,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::data_device","",332,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",336,N],[11,"hash","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,N],[11,"hash","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,N],[11,"hash","smithay_client_toolkit::data_device","",332,N],[11,"hash","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,N],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",333,[[["self"],["transient"]],["transient"]]],[11,"bitxor","smithay_client_toolkit::data_device","Returns the left flags, but with all the right flags toggled.",332,[[["self"],["dndaction"]],["dndaction"]]],[11,"bitxor","smithay_client_toolkit::reexports::client::protocol::wl_seat","Returns the left flags, but with all the right flags toggled.",334,[[["self"],["capability"]],["capability"]]],[11,"bitxor","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Returns the left flags, but with all the right flags toggled.",335,[[["self"],["resize"]],["resize"]]],[11,"bitxor","smithay_client_toolkit::reexports::client::protocol::wl_output","Returns the left flags, but with all the right flags toggled.",336,[[["self"],["mode"]],["mode"]]],[11,"set_cursor","smithay_client_toolkit::reexports::client","",337,N],[11,"release","","",337,N],[11,"destroy","","",337,N],[11,"not","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","Returns the complement of this set of flags.",333,[[["self"]],["transient"]]],[11,"not","","Returns the complement of this set of flags.",335,[[["self"]],["resize"]]],[11,"not","smithay_client_toolkit::reexports::client::protocol::wl_seat","Returns the complement of this set of flags.",334,[[["self"]],["capability"]]],[11,"not","smithay_client_toolkit::data_device","Returns the complement of this set of flags.",332,[[["self"]],["dndaction"]]],[11,"not","smithay_client_toolkit::reexports::client::protocol::wl_output","Returns the complement of this set of flags.",336,[[["self"]],["mode"]]],[11,"eq","smithay_client_toolkit::data_device","",332,[[["self"],["dndaction"]],["bool"]]],[11,"ne","","",332,[[["self"],["dndaction"]],["bool"]]],[11,"eq","smithay_client_toolkit::output","",41,[[["self"],["transform"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["self"],["resize"]],["bool"]]],[11,"ne","","",335,[[["self"],["resize"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",81,[[["self"],["buttonstate"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["self"],["mode"]],["bool"]]],[11,"ne","","",336,[[["self"],["mode"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_shell","",45,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",83,[[["self"],["axissource"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",54,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["self"],["capability"]],["bool"]]],[11,"ne","","",334,[[["self"],["capability"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",27,[[["self"],["fullscreenmethod"]],["bool"]]],[11,"eq","smithay_client_toolkit::output","",40,[[["self"],["subpixel"]],["bool"]]],[11,"eq","smithay_client_toolkit::keyboard","",19,[[["self"],["keystate"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",333,[[["self"],["transient"]],["bool"]]],[11,"ne","","",333,[[["self"],["transient"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_shm","",61,[[["self"],["format"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","",18,[[["self"],["keymapformat"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_shm","",60,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_surface","",65,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","",34,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",76,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",80,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client","",337,[[["self"],["proxy"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",14,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_display","",50,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",82,[[["self"],["axis"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",72,[[["self"],["error"]],["bool"]]],[11,"release","smithay_client_toolkit::reexports::client","",337,N],[11,"sync","","",337,[[["self"]],["result",["newproxy"]]]],[11,"get_registry","","",337,[[["self"]],["result",["newproxy"]]]],[11,"is_destructor","smithay_client_toolkit::reexports::client::commons","",373,[[["self"]],["bool"]]],[11,"from_raw_c","","",373,N],[11,"as_raw_c_in","","",373,[[["self"],["f"]],["t"]]],[11,"c_interface","","",374,N],[11,"deref","smithay_client_toolkit::reexports::client::sys::client","",375,[[["self"]],["waylandclient"]]],[11,"deref","","",376,[[["self"]],["option"]]],[11,"initialize","","",375,N],[11,"initialize","","",376,N],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",192,[[["self"],["contenthint"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",155,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",195,[[["self"],["textdirection"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",125,[[["self"],["lifetime"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",154,[[["self"],["buttonstate"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",262,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",377,[[["self"],["constraintadjustment"]],["bool"]]],[11,"ne","","",377,[[["self"],["constraintadjustment"]],["bool"]]],[11,"eq","","",378,[[["self"],["anchor"]],["bool"]]],[11,"ne","","",378,[[["self"],["anchor"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",90,[[["self"],["capability"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",170,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",124,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",92,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",181,[[["self"],["source"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",246,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",153,[[["self"],["capability"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",168,[[["self"],["capability"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",204,[[["self"],["mode"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",234,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",253,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",152,[[["self"],["type"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",193,[[["self"],["contentpurpose"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",233,[[["self"],["version"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",238,[[["self"],["resizeedge"]],["bool"]]],[11,"eq","","",239,[[["self"],["state"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",107,[[["self"],["position"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",91,[[["self"],["presentmethod"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",169,[[["self"],["buttonstate"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",250,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",257,[[["self"],["resizeedge"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",188,[[["self"],["buttonstate"]],["bool"]]],[11,"eq","smithay_client_toolkit::window","",284,[[["self"],["state"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",110,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",120,[[["self"],["flags"]],["bool"]]],[11,"eq","","",119,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",258,[[["self"],["state"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",203,[[["self"],["error"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",379,[[["self"],["gravity"]],["bool"]]],[11,"ne","","",379,[[["self"],["gravity"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",177,[[["self"],["source"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",167,[[["self"],["type"]],["bool"]]],[11,"eq","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",194,[[["self"],["preeditstyle"]],["bool"]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"grab","","",337,N],[11,"destroy","","",337,N],[11,"export_toplevel","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"set_toplevel","","",337,N],[11,"set_overlay_panel","","",337,N],[11,"bitand","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","Returns the intersection between the two sets of flags.",378,[[["self"],["anchor"]],["anchor"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",377,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",379,[[["self"],["gravity"]],["gravity"]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"set_parent_of","","",337,N],[11,"destroy","","",337,N],[11,"create_positioner","","",337,[[["self"]],["result",["newproxy"]]]],[11,"get_xdg_surface","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"pong","","",337,N],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",377,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",378,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",379,[[["self"],["formatter"]],["result",["error"]]]],[11,"set_feedback","smithay_client_toolkit::reexports::client","",337,N],[11,"destroy","","",337,N],[11,"destroy","","",337,N],[11,"set_cursor_position_hint","","",337,N],[11,"set_region","","",337,N],[11,"destroy","","",337,N],[11,"import_toplevel","","",337,[[["self"],["string"]],["result",["newproxy"]]]],[11,"release","","",337,N],[11,"present_surface","","",337,N],[11,"present_surface_for_mode","","",337,[[["self"],["proxy"],["proxy"],["i32"]],["result",["newproxy"]]]],[11,"set_cursor","","",337,N],[11,"destroy","","",337,N],[11,"destroy","","",337,N],[11,"use_unstable_version","","",337,N],[11,"get_xdg_surface","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"get_xdg_popup","","",337,[[["self"],["proxy"],["proxy"],["proxy"],["u32"],["i32"],["i32"]],["result",["newproxy"]]]],[11,"pong","","",337,N],[11,"destroy","","",337,N],[11,"create_inhibitor","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"destroy","","",337,N],[11,"export","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"inhibit_shortcuts","","",337,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[11,"set_cursor","","",337,N],[11,"destroy","","",337,N],[11,"destroy","","",337,N],[11,"set_parent","","",337,N],[11,"set_title","","",337,N],[11,"set_app_id","","",337,N],[11,"show_window_menu","","",337,N],[11,"_move","","",337,N],[11,"resize","","",337,N],[11,"ack_configure","","",337,N],[11,"set_window_geometry","","",337,N],[11,"set_maximized","","",337,N],[11,"unset_maximized","","",337,N],[11,"set_fullscreen","","",337,N],[11,"unset_fullscreen","","",337,N],[11,"set_minimized","","",337,N],[11,"destroy","","",337,N],[11,"lock_pointer","","",337,[[["self"],["proxy"],["proxy"],["option",["proxy"]],["u32"]],["result",["newproxy"]]]],[11,"confine_pointer","","",337,[[["self"],["proxy"],["proxy"],["option",["proxy"]],["u32"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"destroy","","",337,N],[11,"bitor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","Returns the union of the two sets of flags.",377,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"bitor","","Returns the union of the two sets of flags.",378,[[["self"],["anchor"]],["anchor"]]],[11,"bitor","","Returns the union of the two sets of flags.",379,[[["self"],["gravity"]],["gravity"]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",378,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",379,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",377,[[["self"],["formatter"]],["result",["error"]]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"destroy","","",337,N],[11,"create_params","","",337,[[["self"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"import","","",337,[[["self"],["string"]],["result",["newproxy"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",378,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",379,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",377,[[["self"],["formatter"]],["result",["error"]]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"destroy","","",337,N],[11,"extend","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",378,N],[11,"extend","","",379,N],[11,"extend","","",377,N],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"set_size","","",337,N],[11,"set_anchor_rect","","",337,N],[11,"set_anchor","","",337,N],[11,"set_gravity","","",337,N],[11,"set_constraint_adjustment","","",337,N],[11,"set_offset","","",337,N],[11,"bitxor_assign","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","Toggles the set of flags.",379,N],[11,"bitxor_assign","","Toggles the set of flags.",377,N],[11,"bitxor_assign","","Toggles the set of flags.",378,N],[11,"bitor_assign","","Adds the set of flags.",378,N],[11,"bitor_assign","","Adds the set of flags.",377,N],[11,"bitor_assign","","Adds the set of flags.",379,N],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"destroy","","",337,N],[11,"add","","",337,N],[11,"create","","",337,N],[11,"create_immed","","",337,[[["self"],["i32"],["i32"],["u32"],["u32"]],["result",["newproxy"]]]],[11,"get_input_panel_surface","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",125,[[["self"]],["lifetime"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",120,[[["self"]],["flags"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",110,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",194,[[["self"]],["preeditstyle"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",204,[[["self"]],["mode"]]],[11,"clone","","",203,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",377,[[["self"]],["constraintadjustment"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",154,[[["self"]],["buttonstate"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",257,[[["self"]],["resizeedge"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",181,[[["self"]],["source"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",155,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",177,[[["self"]],["source"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",233,[[["self"]],["version"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",246,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",124,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",195,[[["self"]],["textdirection"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",168,[[["self"]],["capability"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",253,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",238,[[["self"]],["resizeedge"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",90,[[["self"]],["capability"]]],[11,"clone","","",92,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",119,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",107,[[["self"]],["position"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",153,[[["self"]],["capability"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",239,[[["self"]],["state"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",234,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",152,[[["self"]],["type"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",170,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",193,[[["self"]],["contentpurpose"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",262,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",167,[[["self"]],["type"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",379,[[["self"]],["gravity"]]],[11,"clone","","",250,[[["self"]],["error"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",258,[[["self"]],["state"]]],[11,"clone","smithay_client_toolkit::window","",284,[[["self"]],["state"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",192,[[["self"]],["contenthint"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",91,[[["self"]],["presentmethod"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",188,[[["self"]],["buttonstate"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",169,[[["self"]],["buttonstate"]]],[11,"clone","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",378,[[["self"]],["anchor"]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",257,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",238,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",203,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",233,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",378,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::window","",284,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",234,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",246,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",258,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",379,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",377,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",204,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",250,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",253,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",262,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",239,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",380,[[["self"]],["bool"]]],[11,"from_raw_c","","",380,N],[11,"as_raw_c_in","","",380,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",247,[[["self"]],["bool"]]],[11,"from_raw_c","","",247,N],[11,"as_raw_c_in","","",247,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",190,[[["self"]],["bool"]]],[11,"from_raw_c","","",190,N],[11,"as_raw_c_in","","",190,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",96,[[["self"]],["bool"]]],[11,"from_raw_c","","",96,N],[11,"as_raw_c_in","","",96,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",182,[[["self"]],["bool"]]],[11,"from_raw_c","","",182,N],[11,"as_raw_c_in","","",182,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",164,[[["self"]],["bool"]]],[11,"from_raw_c","","",164,N],[11,"as_raw_c_in","","",164,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",179,[[["self"]],["bool"]]],[11,"from_raw_c","","",179,N],[11,"as_raw_c_in","","",179,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",99,[[["self"]],["bool"]]],[11,"from_raw_c","","",99,N],[11,"as_raw_c_in","","",99,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_v1","",104,[[["self"]],["bool"]]],[11,"from_raw_c","","",104,N],[11,"as_raw_c_in","","",104,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",94,[[["self"]],["bool"]]],[11,"from_raw_c","","",94,N],[11,"as_raw_c_in","","",94,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",206,[[["self"]],["bool"]]],[11,"from_raw_c","","",206,N],[11,"as_raw_c_in","","",206,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",381,[[["self"]],["bool"]]],[11,"from_raw_c","","",381,N],[11,"as_raw_c_in","","",381,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",218,[[["self"]],["bool"]]],[11,"from_raw_c","","",218,N],[11,"as_raw_c_in","","",218,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",226,[[["self"]],["bool"]]],[11,"from_raw_c","","",226,N],[11,"as_raw_c_in","","",226,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",259,[[["self"]],["bool"]]],[11,"from_raw_c","","",259,N],[11,"as_raw_c_in","","",259,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",382,[[["self"]],["bool"]]],[11,"from_raw_c","","",382,N],[11,"as_raw_c_in","","",382,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",157,[[["self"]],["bool"]]],[11,"from_raw_c","","",157,N],[11,"as_raw_c_in","","",157,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",383,[[["self"]],["bool"]]],[11,"from_raw_c","","",383,N],[11,"as_raw_c_in","","",383,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",384,[[["self"]],["bool"]]],[11,"from_raw_c","","",384,N],[11,"as_raw_c_in","","",384,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",117,[[["self"]],["bool"]]],[11,"from_raw_c","","",117,N],[11,"as_raw_c_in","","",117,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",137,[[["self"]],["bool"]]],[11,"from_raw_c","","",137,N],[11,"as_raw_c_in","","",137,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",215,[[["self"]],["bool"]]],[11,"from_raw_c","","",215,N],[11,"as_raw_c_in","","",215,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",385,[[["self"]],["bool"]]],[11,"from_raw_c","","",385,N],[11,"as_raw_c_in","","",385,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",183,[[["self"]],["bool"]]],[11,"from_raw_c","","",183,N],[11,"as_raw_c_in","","",183,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",236,[[["self"]],["bool"]]],[11,"from_raw_c","","",236,N],[11,"as_raw_c_in","","",236,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",251,[[["self"]],["bool"]]],[11,"from_raw_c","","",251,N],[11,"as_raw_c_in","","",251,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",102,[[["self"]],["bool"]]],[11,"from_raw_c","","",102,N],[11,"as_raw_c_in","","",102,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",178,[[["self"]],["bool"]]],[11,"from_raw_c","","",178,N],[11,"as_raw_c_in","","",178,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",386,[[["self"]],["bool"]]],[11,"from_raw_c","","",386,N],[11,"as_raw_c_in","","",386,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2","",174,[[["self"]],["bool"]]],[11,"from_raw_c","","",174,N],[11,"as_raw_c_in","","",174,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",225,[[["self"]],["bool"]]],[11,"from_raw_c","","",225,N],[11,"as_raw_c_in","","",225,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",93,[[["self"]],["bool"]]],[11,"from_raw_c","","",93,N],[11,"as_raw_c_in","","",93,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2","",175,[[["self"]],["bool"]]],[11,"from_raw_c","","",175,N],[11,"as_raw_c_in","","",175,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",387,[[["self"]],["bool"]]],[11,"from_raw_c","","",387,N],[11,"as_raw_c_in","","",387,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",122,[[["self"]],["bool"]]],[11,"from_raw_c","","",122,N],[11,"as_raw_c_in","","",122,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",388,[[["self"]],["bool"]]],[11,"from_raw_c","","",388,N],[11,"as_raw_c_in","","",388,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_popup","",244,[[["self"]],["bool"]]],[11,"from_raw_c","","",244,N],[11,"as_raw_c_in","","",244,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",231,[[["self"]],["bool"]]],[11,"from_raw_c","","",231,N],[11,"as_raw_c_in","","",231,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_popup","",243,[[["self"]],["bool"]]],[11,"from_raw_c","","",243,N],[11,"as_raw_c_in","","",243,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",189,[[["self"]],["bool"]]],[11,"from_raw_c","","",189,N],[11,"as_raw_c_in","","",189,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",105,[[["self"]],["bool"]]],[11,"from_raw_c","","",105,N],[11,"as_raw_c_in","","",105,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",156,[[["self"]],["bool"]]],[11,"from_raw_c","","",156,N],[11,"as_raw_c_in","","",156,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",134,[[["self"]],["bool"]]],[11,"from_raw_c","","",134,N],[11,"as_raw_c_in","","",134,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",205,[[["self"]],["bool"]]],[11,"from_raw_c","","",205,N],[11,"as_raw_c_in","","",205,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",228,[[["self"]],["bool"]]],[11,"from_raw_c","","",228,N],[11,"as_raw_c_in","","",228,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",111,[[["self"]],["bool"]]],[11,"from_raw_c","","",111,N],[11,"as_raw_c_in","","",111,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",264,[[["self"]],["bool"]]],[11,"from_raw_c","","",264,N],[11,"as_raw_c_in","","",264,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",186,[[["self"]],["bool"]]],[11,"from_raw_c","","",186,N],[11,"as_raw_c_in","","",186,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",389,[[["self"]],["bool"]]],[11,"from_raw_c","","",389,N],[11,"as_raw_c_in","","",389,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",101,[[["self"]],["bool"]]],[11,"from_raw_c","","",101,N],[11,"as_raw_c_in","","",101,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",197,[[["self"]],["bool"]]],[11,"from_raw_c","","",197,N],[11,"as_raw_c_in","","",197,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",145,[[["self"]],["bool"]]],[11,"from_raw_c","","",145,N],[11,"as_raw_c_in","","",145,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",390,[[["self"]],["bool"]]],[11,"from_raw_c","","",390,N],[11,"as_raw_c_in","","",390,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",248,[[["self"]],["bool"]]],[11,"from_raw_c","","",248,N],[11,"as_raw_c_in","","",248,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",391,[[["self"]],["bool"]]],[11,"from_raw_c","","",391,N],[11,"as_raw_c_in","","",391,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",392,[[["self"]],["bool"]]],[11,"from_raw_c","","",392,N],[11,"as_raw_c_in","","",392,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1","",159,[[["self"]],["bool"]]],[11,"from_raw_c","","",159,N],[11,"as_raw_c_in","","",159,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",128,[[["self"]],["bool"]]],[11,"from_raw_c","","",128,N],[11,"as_raw_c_in","","",128,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",208,[[["self"]],["bool"]]],[11,"from_raw_c","","",208,N],[11,"as_raw_c_in","","",208,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",199,[[["self"]],["bool"]]],[11,"from_raw_c","","",199,N],[11,"as_raw_c_in","","",199,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",185,[[["self"]],["bool"]]],[11,"from_raw_c","","",185,N],[11,"as_raw_c_in","","",185,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",393,[[["self"]],["bool"]]],[11,"from_raw_c","","",393,N],[11,"as_raw_c_in","","",393,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",212,[[["self"]],["bool"]]],[11,"from_raw_c","","",212,N],[11,"as_raw_c_in","","",212,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",129,[[["self"]],["bool"]]],[11,"from_raw_c","","",129,N],[11,"as_raw_c_in","","",129,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",140,[[["self"]],["bool"]]],[11,"from_raw_c","","",140,N],[11,"as_raw_c_in","","",140,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",171,[[["self"]],["bool"]]],[11,"from_raw_c","","",171,N],[11,"as_raw_c_in","","",171,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",268,[[["self"]],["bool"]]],[11,"from_raw_c","","",268,N],[11,"as_raw_c_in","","",268,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",97,[[["self"]],["bool"]]],[11,"from_raw_c","","",97,N],[11,"as_raw_c_in","","",97,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",394,[[["self"]],["bool"]]],[11,"from_raw_c","","",394,N],[11,"as_raw_c_in","","",394,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",222,[[["self"]],["bool"]]],[11,"from_raw_c","","",222,N],[11,"as_raw_c_in","","",222,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",395,[[["self"]],["bool"]]],[11,"from_raw_c","","",395,N],[11,"as_raw_c_in","","",395,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",235,[[["self"]],["bool"]]],[11,"from_raw_c","","",235,N],[11,"as_raw_c_in","","",235,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",396,[[["self"]],["bool"]]],[11,"from_raw_c","","",396,N],[11,"as_raw_c_in","","",396,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",230,[[["self"]],["bool"]]],[11,"from_raw_c","","",230,N],[11,"as_raw_c_in","","",230,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",196,[[["self"]],["bool"]]],[11,"from_raw_c","","",196,N],[11,"as_raw_c_in","","",196,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",263,[[["self"]],["bool"]]],[11,"from_raw_c","","",263,N],[11,"as_raw_c_in","","",263,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",113,[[["self"]],["bool"]]],[11,"from_raw_c","","",113,N],[11,"as_raw_c_in","","",113,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",260,[[["self"]],["bool"]]],[11,"from_raw_c","","",260,N],[11,"as_raw_c_in","","",260,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",223,[[["self"]],["bool"]]],[11,"from_raw_c","","",223,N],[11,"as_raw_c_in","","",223,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",397,[[["self"]],["bool"]]],[11,"from_raw_c","","",397,N],[11,"as_raw_c_in","","",397,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",165,[[["self"]],["bool"]]],[11,"from_raw_c","","",165,N],[11,"as_raw_c_in","","",165,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",142,[[["self"]],["bool"]]],[11,"from_raw_c","","",142,N],[11,"as_raw_c_in","","",142,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",216,[[["self"]],["bool"]]],[11,"from_raw_c","","",216,N],[11,"as_raw_c_in","","",216,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",220,[[["self"]],["bool"]]],[11,"from_raw_c","","",220,N],[11,"as_raw_c_in","","",220,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",255,[[["self"]],["bool"]]],[11,"from_raw_c","","",255,N],[11,"as_raw_c_in","","",255,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",132,[[["self"]],["bool"]]],[11,"from_raw_c","","",132,N],[11,"as_raw_c_in","","",132,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",126,[[["self"]],["bool"]]],[11,"from_raw_c","","",126,N],[11,"as_raw_c_in","","",126,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",136,[[["self"]],["bool"]]],[11,"from_raw_c","","",136,N],[11,"as_raw_c_in","","",136,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",162,[[["self"]],["bool"]]],[11,"from_raw_c","","",162,N],[11,"as_raw_c_in","","",162,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1","",201,[[["self"]],["bool"]]],[11,"from_raw_c","","",201,N],[11,"as_raw_c_in","","",201,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_v1","",398,[[["self"]],["bool"]]],[11,"from_raw_c","","",398,N],[11,"as_raw_c_in","","",398,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",139,[[["self"]],["bool"]]],[11,"from_raw_c","","",139,N],[11,"as_raw_c_in","","",139,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",147,[[["self"]],["bool"]]],[11,"from_raw_c","","",147,N],[11,"as_raw_c_in","","",147,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",121,[[["self"]],["bool"]]],[11,"from_raw_c","","",121,N],[11,"as_raw_c_in","","",121,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",399,[[["self"]],["bool"]]],[11,"from_raw_c","","",399,N],[11,"as_raw_c_in","","",399,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",400,[[["self"]],["bool"]]],[11,"from_raw_c","","",400,N],[11,"as_raw_c_in","","",400,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",116,[[["self"]],["bool"]]],[11,"from_raw_c","","",116,N],[11,"as_raw_c_in","","",116,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",108,[[["self"]],["bool"]]],[11,"from_raw_c","","",108,N],[11,"as_raw_c_in","","",108,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",241,[[["self"]],["bool"]]],[11,"from_raw_c","","",241,N],[11,"as_raw_c_in","","",241,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1","",160,[[["self"]],["bool"]]],[11,"from_raw_c","","",160,N],[11,"as_raw_c_in","","",160,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",114,[[["self"]],["bool"]]],[11,"from_raw_c","","",114,N],[11,"as_raw_c_in","","",114,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",213,[[["self"]],["bool"]]],[11,"from_raw_c","","",213,N],[11,"as_raw_c_in","","",213,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",150,[[["self"]],["bool"]]],[11,"from_raw_c","","",150,N],[11,"as_raw_c_in","","",150,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",240,[[["self"]],["bool"]]],[11,"from_raw_c","","",240,N],[11,"as_raw_c_in","","",240,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",254,[[["self"]],["bool"]]],[11,"from_raw_c","","",254,N],[11,"as_raw_c_in","","",254,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",172,[[["self"]],["bool"]]],[11,"from_raw_c","","",172,N],[11,"as_raw_c_in","","",172,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",210,[[["self"]],["bool"]]],[11,"from_raw_c","","",210,N],[11,"as_raw_c_in","","",210,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",149,[[["self"]],["bool"]]],[11,"from_raw_c","","",149,N],[11,"as_raw_c_in","","",149,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",131,[[["self"]],["bool"]]],[11,"from_raw_c","","",131,N],[11,"as_raw_c_in","","",131,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",144,[[["self"]],["bool"]]],[11,"from_raw_c","","",144,N],[11,"as_raw_c_in","","",144,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",266,[[["self"]],["bool"]]],[11,"from_raw_c","","",266,N],[11,"as_raw_c_in","","",266,[[["self"],["f"]],["t"]]],[11,"is_destructor","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1","",401,[[["self"]],["bool"]]],[11,"from_raw_c","","",401,N],[11,"as_raw_c_in","","",401,[[["self"],["f"]],["t"]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"get_toplevel_decoration","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"get_tablet_seat","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"cmp","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",379,[[["self"],["gravity"]],["ordering"]]],[11,"cmp","","",377,[[["self"],["constraintadjustment"]],["ordering"]]],[11,"cmp","","",378,[[["self"],["anchor"]],["ordering"]]],[11,"sub","","Returns the set difference of the two sets of flags.",379,[[["self"],["gravity"]],["gravity"]]],[11,"sub","","Returns the set difference of the two sets of flags.",378,[[["self"],["anchor"]],["anchor"]]],[11,"sub","","Returns the set difference of the two sets of flags.",377,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"from_iter","","",377,[[["t"]],["constraintadjustment"]]],[11,"from_iter","","",378,[[["t"]],["anchor"]]],[11,"from_iter","","",379,[[["t"]],["gravity"]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"commit_string","","",337,N],[11,"preedit_string","","",337,N],[11,"preedit_styling","","",337,N],[11,"preedit_cursor","","",337,N],[11,"delete_surrounding_text","","",337,N],[11,"cursor_position","","",337,N],[11,"modifiers_map","","",337,N],[11,"keysym","","",337,N],[11,"grab_keyboard","","",337,[[["self"]],["result",["newproxy"]]]],[11,"key","","",337,N],[11,"modifiers","","",337,N],[11,"language","","",337,N],[11,"text_direction","","",337,N],[11,"activate","","",337,N],[11,"deactivate","","",337,N],[11,"show_input_panel","","",337,N],[11,"hide_input_panel","","",337,N],[11,"reset","","",337,N],[11,"set_surrounding_text","","",337,N],[11,"set_content_type","","",337,N],[11,"set_cursor_rectangle","","",337,N],[11,"set_preferred_language","","",337,N],[11,"commit_state","","",337,N],[11,"invoke_action","","",337,N],[11,"destroy","","",337,N],[11,"set_mode","","",337,N],[11,"unset_mode","","",337,N],[11,"get_tablet_seat","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"set_feedback","","",337,N],[11,"destroy","","",337,N],[11,"create_text_input","","",337,[[["self"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"sub_assign","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","Disables all flags enabled in the set.",377,N],[11,"sub_assign","","Disables all flags enabled in the set.",378,N],[11,"sub_assign","","Disables all flags enabled in the set.",379,N],[11,"partial_cmp","","",379,[[["self"],["gravity"]],["option",["ordering"]]]],[11,"lt","","",379,[[["self"],["gravity"]],["bool"]]],[11,"le","","",379,[[["self"],["gravity"]],["bool"]]],[11,"gt","","",379,[[["self"],["gravity"]],["bool"]]],[11,"ge","","",379,[[["self"],["gravity"]],["bool"]]],[11,"partial_cmp","","",378,[[["self"],["anchor"]],["option",["ordering"]]]],[11,"lt","","",378,[[["self"],["anchor"]],["bool"]]],[11,"le","","",378,[[["self"],["anchor"]],["bool"]]],[11,"gt","","",378,[[["self"],["anchor"]],["bool"]]],[11,"ge","","",378,[[["self"],["anchor"]],["bool"]]],[11,"partial_cmp","","",377,[[["self"],["constraintadjustment"]],["option",["ordering"]]]],[11,"lt","","",377,[[["self"],["constraintadjustment"]],["bool"]]],[11,"le","","",377,[[["self"],["constraintadjustment"]],["bool"]]],[11,"gt","","",377,[[["self"],["constraintadjustment"]],["bool"]]],[11,"ge","","",377,[[["self"],["constraintadjustment"]],["bool"]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"grab_keyboard","","",337,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[11,"bitand_assign","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","Disables all flags disabled in the set.",379,N],[11,"bitand_assign","","Disables all flags disabled in the set.",378,N],[11,"bitand_assign","","Disables all flags disabled in the set.",377,N],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"get_relative_pointer","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"get_xdg_output","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"destroy","","",337,N],[11,"set_parent_of","","",337,N],[11,"get_swipe_gesture","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"get_pinch_gesture","","",337,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"fmt","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",377,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",378,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",379,[[["self"],["formatter"]],["result",["error"]]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",402,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",403,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",404,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",405,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",406,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",407,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",408,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",409,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",410,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",411,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",412,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",413,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",414,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",415,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_v2","",416,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",417,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",418,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",419,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",420,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",421,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",422,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",423,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",424,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",425,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",426,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",427,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",428,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",429,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",430,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1","",431,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",432,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",433,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",434,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",435,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",436,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",437,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",438,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",439,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_v1","",440,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",441,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",442,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",443,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",444,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_method_v1","",445,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",446,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_popup","",447,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",448,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",449,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",450,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",451,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",452,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",453,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",454,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",455,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",456,N],[11,"c_interface","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",457,N],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"get_toplevel","","",337,[[["self"]],["result",["newproxy"]]]],[11,"get_popup","","",337,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[11,"set_window_geometry","","",337,N],[11,"ack_configure","","",337,N],[11,"hash","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",379,N],[11,"hash","","",378,N],[11,"hash","","",377,N],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",379,[[["self"],["gravity"]],["gravity"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",378,[[["self"],["anchor"]],["anchor"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",377,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"set_feedback","smithay_client_toolkit::reexports::client","",337,N],[11,"destroy","","",337,N],[11,"destroy","","",337,N],[11,"set_region","","",337,N],[11,"destroy","","",337,N],[11,"not","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","Returns the complement of this set of flags.",379,[[["self"]],["gravity"]]],[11,"not","","Returns the complement of this set of flags.",377,[[["self"]],["constraintadjustment"]]],[11,"not","","Returns the complement of this set of flags.",378,[[["self"]],["anchor"]]],[11,"destroy","smithay_client_toolkit::reexports::client","",337,N],[11,"destroy","","",337,N],[11,"destroy","","",337,N],[11,"set_parent","","",337,N],[11,"set_title","","",337,N],[11,"set_app_id","","",337,N],[11,"show_window_menu","","",337,N],[11,"_move","","",337,N],[11,"resize","","",337,N],[11,"set_max_size","","",337,N],[11,"set_min_size","","",337,N],[11,"set_maximized","","",337,N],[11,"unset_maximized","","",337,N],[11,"set_fullscreen","","",337,N],[11,"unset_fullscreen","","",337,N],[11,"set_minimized","","",337,N],[11,"destroy","","",337,N],[11,"name","smithay_client_toolkit::reexports::client::cursor","Retrieve the name of this cursor.",458,[[["self"]],["string"]]],[11,"image_count","","Retrieve the number of images contained in this animated cursor",458,[[["self"]],["usize"]]],[11,"frame","","Retrieve the image number of cursor animation.",458,[[["self"],["u32"]],["usize"]]],[11,"frame_and_duration","","Retrieve the image number and its duration.",458,N],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",458,[[["self"],["usize"]],["option",["cursorimagebuffer"]]]],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",458,[[["self"],["usize"]],["option"]]],[11,"new","smithay_client_toolkit::reexports::client::egl","Create an EGL surface from a wayland surface",339,[[["proxy"],["i32"],["i32"]],["wleglsurface"]]],[11,"new_from_raw","","Create an EGL surface from a raw pointer to a wayland surface",339,N],[11,"get_size","","Fetch current size of the EGL surface",339,N],[11,"resize","","Resize the EGL surface",339,N],[11,"ptr","","Raw pointer to the EGL surface",339,N],[11,"is","smithay_client_toolkit::reexports::client::commons","Returns true if the trait object wraps an object of type `__T`.",2,[[["self"]],["bool"]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the underlying object is of type `__T`. Returns the original boxed trait if it isn't.",2,[[["box",["implementation"]]],["result",["box","box"]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object if it is of type `__T`, or `None` if it isn't.",2,[[["self"]],["option"]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait object if it is of type `__T`, or `None` if it isn't.",2,[[["self"]],["option"]]],[11,"open","smithay_client_toolkit::reexports::client::sys::client","",5,[[["str"]],["result",["waylandclient","dlerror"]]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_data_source","",14,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",14,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_keyboard","",18,[[["u32"]],["option",["keymapformat"]]]],[11,"to_raw","","",18,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::keyboard","",19,[[["u32"]],["option",["keystate"]]]],[11,"to_raw","","",19,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::data_device","",332,[[["u32"]],["option",["dndaction"]]]],[11,"to_raw","","",332,[[["self"]],["u32"]]],[18,"None","","no action",332,N],[18,"Copy","","copy action",332,N],[18,"Move","","move action",332,N],[18,"Ask","","ask action",332,N],[11,"empty","","Returns an empty set of flags.",332,[[],["dndaction"]]],[11,"all","","Returns the set containing all flags.",332,[[],["dndaction"]]],[11,"bits","","Returns the raw value of the flags currently stored.",332,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",332,[[["u32"]],["option",["dndaction"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",332,[[["u32"]],["dndaction"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",332,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",332,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",332,[[["self"],["dndaction"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",332,[[["self"],["dndaction"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",332,N],[11,"remove","","Removes the specified flags in-place.",332,N],[11,"toggle","","Toggles the specified flags in-place.",332,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",332,N],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_shell_surface","",335,[[["u32"]],["option",["resize"]]]],[11,"to_raw","","",335,[[["self"]],["u32"]]],[18,"None","","no edge",335,N],[18,"Top","","top edge",335,N],[18,"Bottom","","bottom edge",335,N],[18,"Left","","left edge",335,N],[18,"TopLeft","","top and left edges",335,N],[18,"BottomLeft","","bottom and left edges",335,N],[18,"Right","","right edge",335,N],[18,"TopRight","","top and right edges",335,N],[18,"BottomRight","","bottom and right edges",335,N],[11,"empty","","Returns an empty set of flags.",335,[[],["resize"]]],[11,"all","","Returns the set containing all flags.",335,[[],["resize"]]],[11,"bits","","Returns the raw value of the flags currently stored.",335,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",335,[[["u32"]],["option",["resize"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",335,[[["u32"]],["resize"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",335,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",335,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",335,[[["self"],["resize"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",335,[[["self"],["resize"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",335,N],[11,"remove","","Removes the specified flags in-place.",335,N],[11,"toggle","","Toggles the specified flags in-place.",335,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",335,N],[11,"from_raw","","",333,[[["u32"]],["option",["transient"]]]],[11,"to_raw","","",333,[[["self"]],["u32"]]],[18,"Inactive","","do not set keyboard focus",333,N],[11,"empty","","Returns an empty set of flags.",333,[[],["transient"]]],[11,"all","","Returns the set containing all flags.",333,[[],["transient"]]],[11,"bits","","Returns the raw value of the flags currently stored.",333,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",333,[[["u32"]],["option",["transient"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",333,[[["u32"]],["transient"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",333,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",333,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",333,[[["self"],["transient"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",333,[[["self"],["transient"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",333,N],[11,"remove","","Removes the specified flags in-place.",333,N],[11,"toggle","","Toggles the specified flags in-place.",333,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",333,N],[11,"from_raw","","",27,[[["u32"]],["option",["fullscreenmethod"]]]],[11,"to_raw","","",27,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_subsurface","",34,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",34,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::output","",40,[[["u32"]],["option",["subpixel"]]]],[11,"to_raw","","",40,[[["self"]],["u32"]]],[11,"from_raw","","",41,[[["u32"]],["option",["transform"]]]],[11,"to_raw","","",41,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_output","",336,[[["u32"]],["option",["mode"]]]],[11,"to_raw","","",336,[[["self"]],["u32"]]],[18,"Current","","indicates this is the current mode",336,N],[18,"Preferred","","indicates this is the preferred mode",336,N],[11,"empty","","Returns an empty set of flags.",336,[[],["mode"]]],[11,"all","","Returns the set containing all flags.",336,[[],["mode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",336,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",336,[[["u32"]],["option",["mode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",336,[[["u32"]],["mode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",336,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",336,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",336,[[["self"],["mode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",336,[[["self"],["mode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",336,N],[11,"remove","","Removes the specified flags in-place.",336,N],[11,"toggle","","Toggles the specified flags in-place.",336,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",336,N],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_shell","",45,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",45,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_display","",50,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",50,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_subcompositor","",54,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",54,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_shm","",60,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",60,[[["self"]],["u32"]]],[11,"from_raw","","",61,[[["u32"]],["option",["format"]]]],[11,"to_raw","","",61,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_surface","",65,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",65,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_seat","",334,[[["u32"]],["option",["capability"]]]],[11,"to_raw","","",334,[[["self"]],["u32"]]],[18,"Pointer","","the seat has pointer devices",334,N],[18,"Keyboard","","the seat has one or more keyboards",334,N],[18,"Touch","","the seat has touch devices",334,N],[11,"empty","","Returns an empty set of flags.",334,[[],["capability"]]],[11,"all","","Returns the set containing all flags.",334,[[],["capability"]]],[11,"bits","","Returns the raw value of the flags currently stored.",334,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",334,[[["u32"]],["option",["capability"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",334,[[["u32"]],["capability"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",334,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",334,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",334,[[["self"],["capability"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",334,[[["self"],["capability"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",334,N],[11,"remove","","Removes the specified flags in-place.",334,N],[11,"toggle","","Toggles the specified flags in-place.",334,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",334,N],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_data_device","",72,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",72,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_data_offer","",76,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",76,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::client::protocol::wl_pointer","",80,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",80,[[["self"]],["u32"]]],[11,"from_raw","","",81,[[["u32"]],["option",["buttonstate"]]]],[11,"to_raw","","",81,[[["self"]],["u32"]]],[11,"from_raw","","",82,[[["u32"]],["option",["axis"]]]],[11,"to_raw","","",82,[[["self"]],["u32"]]],[11,"from_raw","","",83,[[["u32"]],["option",["axissource"]]]],[11,"to_raw","","",83,[[["self"]],["u32"]]],[11,"from_external_display","smithay_client_toolkit::reexports::client","Create a Display and Event Queue from an external display",362,N],[11,"get_display_ptr","","Retrieve the `wl_display` pointer",362,N],[11,"connect_to_env","","Attempt to connect to a wayland server using the contents of the environment variables",362,[[],["result",["connecterror"]]]],[11,"connect_to_name","","Attempt to connect to a wayland server socket with given name",362,[[["s"]],["result",["connecterror"]]]],[11,"flush","","Non-blocking write to the server",362,[[["self"]],["result",["i32","error"]]]],[11,"create_event_queue","","Create a new event queue associated with this wayland connection",362,[[["self"]],["eventqueue"]]],[11,"new","","Create a global manager handling a registry",364,[[["newproxy",["wlregistry"]]],["globalmanager"]]],[11,"new_with_cb","","Create a global manager handling a registry with a callback",364,[[["newproxy",["wlregistry"]],["impl"]],["globalmanager"]]],[11,"instantiate_auto","","Instanciate a global with highest available version",364,[[["self"]],["result",["newproxy","globalerror"]]]],[11,"instantiate_exact","","Instanciate a global with a specific version",364,[[["self"],["u32"]],["result",["newproxy","globalerror"]]]],[11,"list","","Retrieve the list of currently known globals",364,[[["self"]],["vec"]]],[11,"dispatch","","Dispatches events from the internal buffer.",459,[[["self"]],["result",["u32","error"]]]],[11,"dispatch_pending","","Dispatches pending events from the internal buffer.",459,[[["self"]],["result",["u32","error"]]]],[11,"sync_roundtrip","","Synchronous roundtrip",459,[[["self"]],["result",["i32","error"]]]],[11,"get_token","","Create a new token associated with this event queue",459,[[["self"]],["queuetoken"]]],[11,"prepare_read","","Prepare an conccurent read",459,[[["self"]],["option",["readeventsguard"]]]],[11,"read_events","","Read events",338,[[["self"]],["result",["i32","error"]]]],[11,"cancel","","Cancel the read",338,N],[11,"implement","","Implement this proxy using given function and implementation data.",460,[[["self"],["impl"]],["proxy"]]],[11,"implement_nonsend","","Implement this proxy using given function and implementation data.",460,[[["self"],["impl"],["queuetoken"]],["proxy"]]],[11,"c_ptr","","Get a raw pointer to the underlying wayland object",460,N],[11,"from_c_ptr","","Create a `NewProxy` instance from a C pointer.",460,N],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",90,[[["u32"]],["option",["capability"]]]],[11,"to_raw","","",90,[[["self"]],["u32"]]],[11,"from_raw","","",91,[[["u32"]],["option",["presentmethod"]]]],[11,"to_raw","","",91,[[["self"]],["u32"]]],[11,"from_raw","","",92,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",92,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",107,[[["u32"]],["option",["position"]]]],[11,"to_raw","","",107,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",110,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",110,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",119,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",119,[[["self"]],["u32"]]],[11,"from_raw","","",120,[[["u32"]],["option",["flags"]]]],[11,"to_raw","","",120,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",124,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",124,[[["self"]],["u32"]]],[11,"from_raw","","",125,[[["u32"]],["option",["lifetime"]]]],[11,"to_raw","","",125,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",152,[[["u32"]],["option",["type"]]]],[11,"to_raw","","",152,[[["self"]],["u32"]]],[11,"from_raw","","",153,[[["u32"]],["option",["capability"]]]],[11,"to_raw","","",153,[[["self"]],["u32"]]],[11,"from_raw","","",154,[[["u32"]],["option",["buttonstate"]]]],[11,"to_raw","","",154,[[["self"]],["u32"]]],[11,"from_raw","","",155,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",155,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",167,[[["u32"]],["option",["type"]]]],[11,"to_raw","","",167,[[["self"]],["u32"]]],[11,"from_raw","","",168,[[["u32"]],["option",["capability"]]]],[11,"to_raw","","",168,[[["self"]],["u32"]]],[11,"from_raw","","",169,[[["u32"]],["option",["buttonstate"]]]],[11,"to_raw","","",169,[[["self"]],["u32"]]],[11,"from_raw","","",170,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",170,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",177,[[["u32"]],["option",["source"]]]],[11,"to_raw","","",177,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",181,[[["u32"]],["option",["source"]]]],[11,"to_raw","","",181,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",188,[[["u32"]],["option",["buttonstate"]]]],[11,"to_raw","","",188,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::text_input::v1::client::zwp_text_input_v1","",192,[[["u32"]],["option",["contenthint"]]]],[11,"to_raw","","",192,[[["self"]],["u32"]]],[11,"from_raw","","",193,[[["u32"]],["option",["contentpurpose"]]]],[11,"to_raw","","",193,[[["self"]],["u32"]]],[11,"from_raw","","",194,[[["u32"]],["option",["preeditstyle"]]]],[11,"to_raw","","",194,[[["self"]],["u32"]]],[11,"from_raw","","",195,[[["u32"]],["option",["textdirection"]]]],[11,"to_raw","","",195,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",203,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",203,[[["self"]],["u32"]]],[11,"from_raw","","",204,[[["u32"]],["option",["mode"]]]],[11,"to_raw","","",204,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_shell","",233,[[["u32"]],["option",["version"]]]],[11,"to_raw","","",233,[[["self"]],["u32"]]],[11,"from_raw","","",234,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",234,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v5::client::xdg_surface","",238,[[["u32"]],["option",["resizeedge"]]]],[11,"to_raw","","",238,[[["self"]],["u32"]]],[11,"from_raw","","",239,[[["u32"]],["option",["state"]]]],[11,"to_raw","","",239,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",246,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",246,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",250,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",250,[[["self"]],["u32"]]],[11,"from_raw","","",378,[[["u32"]],["option",["anchor"]]]],[11,"to_raw","","",378,[[["self"]],["u32"]]],[18,"None","","the center of the anchor rectangle",378,N],[18,"Top","","the top edge of the anchor rectangle",378,N],[18,"Bottom","","the bottom edge of the anchor rectangle",378,N],[18,"Left","","the left edge of the anchor rectangle",378,N],[18,"Right","","the right edge of the anchor rectangle",378,N],[11,"empty","","Returns an empty set of flags.",378,[[],["anchor"]]],[11,"all","","Returns the set containing all flags.",378,[[],["anchor"]]],[11,"bits","","Returns the raw value of the flags currently stored.",378,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",378,[[["u32"]],["option",["anchor"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",378,[[["u32"]],["anchor"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",378,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",378,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",378,[[["self"],["anchor"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",378,[[["self"],["anchor"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",378,N],[11,"remove","","Removes the specified flags in-place.",378,N],[11,"toggle","","Toggles the specified flags in-place.",378,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",378,N],[11,"from_raw","","",379,[[["u32"]],["option",["gravity"]]]],[11,"to_raw","","",379,[[["self"]],["u32"]]],[18,"None","","center over the anchor edge",379,N],[18,"Top","","position above the anchor edge",379,N],[18,"Bottom","","position below the anchor edge",379,N],[18,"Left","","position to the left of the anchor edge",379,N],[18,"Right","","position to the right of the anchor edge",379,N],[11,"empty","","Returns an empty set of flags.",379,[[],["gravity"]]],[11,"all","","Returns the set containing all flags.",379,[[],["gravity"]]],[11,"bits","","Returns the raw value of the flags currently stored.",379,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",379,[[["u32"]],["option",["gravity"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",379,[[["u32"]],["gravity"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",379,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",379,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",379,[[["self"],["gravity"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",379,[[["self"],["gravity"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",379,N],[11,"remove","","Removes the specified flags in-place.",379,N],[11,"toggle","","Toggles the specified flags in-place.",379,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",379,N],[11,"from_raw","","",377,[[["u32"]],["option",["constraintadjustment"]]]],[11,"to_raw","","",377,[[["self"]],["u32"]]],[18,"None","","don't move the child surface when constrained",377,N],[18,"SlideX","","move along the x axis until unconstrained",377,N],[18,"SlideY","","move along the y axis until unconstrained",377,N],[18,"FlipX","","invert the anchor and gravity on the x axis",377,N],[18,"FlipY","","invert the anchor and gravity on the y axis",377,N],[18,"ResizeX","","horizontally resize the surface",377,N],[18,"ResizeY","","vertically resize the surface",377,N],[11,"empty","","Returns an empty set of flags.",377,[[],["constraintadjustment"]]],[11,"all","","Returns the set containing all flags.",377,[[],["constraintadjustment"]]],[11,"bits","","Returns the raw value of the flags currently stored.",377,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",377,[[["u32"]],["option",["constraintadjustment"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",377,[[["u32"]],["constraintadjustment"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",377,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",377,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",377,[[["self"],["constraintadjustment"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",377,[[["self"],["constraintadjustment"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",377,N],[11,"remove","","Removes the specified flags in-place.",377,N],[11,"toggle","","Toggles the specified flags in-place.",377,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",377,N],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",253,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",253,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",257,[[["u32"]],["option",["resizeedge"]]]],[11,"to_raw","","",257,[[["self"]],["u32"]]],[11,"from_raw","","",258,[[["u32"]],["option",["state"]]]],[11,"to_raw","","",258,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::reexports::protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",262,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",262,[[["self"]],["u32"]]],[11,"from_raw","smithay_client_toolkit::window","",284,[[["u32"]],["option",["state"]]]],[11,"to_raw","","",284,[[["self"]],["u32"]]]],"paths":[[3,"Environment"],[4,"Shell"],[8,"Implementation"],[8,"Interface"],[8,"MessageGroup"],[3,"WaylandClient"],[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[19,"wl_argument"],[4,"Event"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"KeymapFormat"],[4,"KeyState"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"FullscreenMethod"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Subpixel"],[4,"Transform"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Format"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"ButtonState"],[4,"Axis"],[4,"AxisSource"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"GlobalError"],[4,"ConnectError"],[4,"GlobalEvent"],[4,"Capability"],[4,"PresentMethod"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[4,"Request"],[8,"RequestsTrait"],[4,"Position"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Flags"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Lifetime"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Source"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Source"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ButtonState"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ContentHint"],[4,"ContentPurpose"],[4,"PreeditStyle"],[4,"TextDirection"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Mode"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Version"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Anchor"],[4,"Gravity"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Kind"],[4,"Event"],[4,"DndEvent"],[4,"DataSourceEvent"],[3,"DataDevice"],[3,"DataOffer"],[3,"ReadPipe"],[3,"DataSource"],[3,"WritePipe"],[3,"ModifiersState"],[3,"RMLVO"],[3,"KeyRepeatEvent"],[4,"KeyRepeatKind"],[4,"Error"],[4,"Event"],[3,"Mode"],[3,"OutputInfo"],[3,"OutputMgr"],[4,"AutoThemer"],[4,"AutoPointer"],[3,"ThemeManager"],[3,"ThemedPointer"],[3,"DoubleMemPool"],[3,"MemPool"],[4,"Event"],[4,"FrameRequest"],[3,"BasicFrame"],[8,"Frame"],[3,"Window"],[3,"CursorTheme"],[3,"DndAction"],[3,"Transient"],[3,"Capability"],[3,"Resize"],[3,"Mode"],[3,"Proxy"],[3,"ReadEventsGuard"],[3,"WlEglSurface"],[3,"WlSurface"],[3,"WlShm"],[3,"WlShmPool"],[3,"WlRegistry"],[3,"WlSubcompositor"],[3,"WlTouch"],[3,"WlRegion"],[3,"WlKeyboard"],[3,"WlPointer"],[3,"WlSeat"],[3,"WlShell"],[3,"WlDataDeviceManager"],[3,"WlDataDevice"],[3,"WlDataOffer"],[3,"WlCallback"],[3,"WlOutput"],[3,"WlBuffer"],[3,"WlCompositor"],[3,"WlDisplay"],[3,"WlSubsurface"],[3,"WlDataSource"],[3,"WlShellSurface"],[3,"Display"],[3,"CursorImageBuffer"],[3,"GlobalManager"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Event"],[4,"NoMessage"],[3,"AnonymousObject"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WAYLAND_CLIENT_OPTION"],[3,"ConstraintAdjustment"],[3,"Anchor"],[3,"Gravity"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Event"],[4,"Event"],[3,"ZwpInputMethodContextV1"],[3,"ZxdgImporterV1"],[3,"XdgShell"],[3,"ZwpFullscreenShellV1"],[3,"ZxdgExporterV2"],[3,"ZwpKeyboardShortcutsInhibitManagerV1"],[3,"ZwpXwaylandKeyboardGrabV1"],[3,"ZwpPointerGesturePinchV1"],[3,"ZwpConfinedPointerV1"],[3,"ZwpTabletManagerV2"],[3,"ZwpLinuxDmabufV1"],[3,"ZwpPointerConstraintsV1"],[3,"ZxdgToplevelV6"],[3,"ZwpIdleInhibitManagerV1"],[3,"ZwpTabletV2"],[3,"ZwpInputPanelSurfaceV1"],[3,"ZwpRelativePointerManagerV1"],[3,"ZwpTabletToolV2"],[3,"ZwpInputPanelV1"],[3,"ZxdgOutputV1"],[3,"ZwpTabletSeatV2"],[3,"ZwpTabletPadGroupV2"],[3,"ZxdgImporterV2"],[3,"ZwpKeyboardShortcutsInhibitorV1"],[3,"ZwpFullscreenShellModeFeedbackV1"],[3,"ZwpPointerGesturesV1"],[3,"ZwpPointerGestureSwipeV1"],[3,"ZxdgExportedV1"],[3,"ZxdgOutputManagerV1"],[3,"ZxdgDecorationManagerV1"],[3,"ZxdgImportedV2"],[3,"ZxdgPopupV6"],[3,"ZxdgImportedV1"],[3,"ZxdgExporterV1"],[3,"ZwpTabletManagerV1"],[3,"ZxdgSurfaceV6"],[3,"ZxdgShellV6"],[3,"ZwpTextInputManagerV1"],[3,"ZwpTabletV1"],[3,"ZwpTabletPadRingV2"],[3,"ZwpRelativePointerV1"],[3,"ZwpLockedPointerV1"],[3,"ZxdgPositionerV6"],[3,"ZwpInputMethodV1"],[3,"ZwpTabletPadV2"],[3,"XdgPopup"],[3,"ZwpTabletPadStripV2"],[3,"ZwpTabletSeatV1"],[3,"ZwpLinuxBufferParamsV1"],[3,"XdgSurface"],[3,"ZxdgToplevelDecorationV1"],[3,"ZwpXwaylandKeyboardGrabManagerV1"],[3,"ZxdgExportedV2"],[3,"ZwpTabletToolV1"],[3,"ZwpIdleInhibitorV1"],[3,"ZwpTextInputV1"],[3,"Cursor"],[3,"EventQueue"],[3,"NewProxy"]]};
searchIndex["specs"]={"doc":"SPECS Parallel ECS","items":[[3,"BitSet","specs","A `BitSet` is a simple set designed to track which indices are placed into it.",N,N],[8,"Accessor","","A trait for accessing read/write multiple resources from a system. This can be used to create dynamic systems that don't specify what they fetch at compile-time.",N,N],[10,"try_new","","Tries to create a new instance of this type. This one returns `Some` in case there is a default, otherwise the system needs to override `System::accessor`.",0,[[],["option"]]],[10,"reads","","A list of [`ResourceId`]s the bundle needs read access to in order to build the target resource bundle.",0,[[["self"]],["vec",["resourceid"]]]],[10,"writes","","A list of [`ResourceId`]s the bundle needs write access to in order to build the target resource bundle.",0,[[["self"]],["vec",["resourceid"]]]],[3,"Dispatcher","","The dispatcher struct, allowing systems to be executed in parallel.",N,N],[3,"DispatcherBuilder","","Builder for the [`Dispatcher`].",N,N],[3,"Read","","Allows to fetch a resource in a system immutably.",N,N],[6,"ReadExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Read` or `Option<Read>` is therefore recommended.",N,N],[3,"Resources","","A resource container, which provides methods to access to the contained resources.",N,N],[8,"RunNow","","Trait for fetching data and running systems. Automatically implemented for systems.",N,N],[10,"run_now","","Runs the system now.",1,N],[10,"setup","","Sets up `Resources` for a later call to `run_now`.",1,N],[3,"StaticAccessor","","The static accessor that is used for `SystemData`.",N,N],[8,"System","","A `System`, executed with a set of required [`Resource`]s.",N,N],[16,"SystemData","","The resource bundle required to execute this system.",2,N],[10,"run","","Executes the system with the required system data.",2,N],[11,"running_time","","Returns a hint how long the system needs for running. This is used to optimize the way they're executed (might allow more parallelization).",2,[[["self"]],["runningtime"]]],[11,"accessor","","Return the accessor from the [`SystemData`].",2,[[["self"]],["accessorcow"]]],[11,"setup","","Sets up the `Resources` using `Self::SystemData::setup`.",2,N],[8,"SystemData","","A static system data that can specify its dependencies at statically (at compile-time). Most system data is a `SystemData`, the `DynamicSystemData` type is only needed for very special setups.",N,N],[10,"setup","","Sets up the system data for fetching it from the `Resources`.",3,N],[10,"fetch","","Fetches the system data from `Resources`. Note that this is only specified for one concrete lifetime `'a`, you need to implement the `SystemData` trait for every possible lifetime.",3,[[["resources"]],["self"]]],[10,"reads","","Returns all read dependencies as fetched from `Self::fetch`.",3,[[],["vec",["resourceid"]]]],[10,"writes","","Returns all write dependencies as fetched from `Self::fetch`.",3,[[],["vec",["resourceid"]]]],[3,"Write","","Allows to fetch a resource in a system mutably.",N,N],[6,"WriteExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Write` or `Option<Write>` is therefore recommended.",N,N],[3,"ReaderId","","The reader id is used by readers to tell the storage where the last read ended.",N,N],[3,"AsyncDispatcher","","Like, `Dispatcher` but works asynchronously.",N,N],[3,"DenseVecStorage","","Dense vector storage. Has a redirection 2-way table between entities and components, allowing to leave no gaps within the data.",N,N],[3,"FlaggedStorage","","Wrapper storage that tracks modifications, insertions, and removals of components  through an `EventChannel`.",N,N],[3,"HashMapStorage","","HashMap-based storage. Best suited for rare components.",N,N],[3,"InsertedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"ModifiedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"NullStorage","","A null storage type, used for cases where the component doesn't contain any data and instead works as a simple flag.",N,N],[3,"RemovedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"VecStorage","","Vector storage. Uses a simple `Vec`. Supposed to have maximum performance for the components mostly present in entities.",N,N],[3,"Entity","","`Entity` type, as seen by the user.",N,N],[3,"LazyUpdate","","Lazy updates can be used for world updates that need to borrow a lot of resources and as such should better be done at the end. They work lazily in the sense that they are dispatched when calling `world.maintain()`.",N,N],[0,"common","","Common functionality between crates using specs.",N,N],[3,"DrainErrors","specs::common","A draining iterator for `Errors`. This is the return value of `Errors::drain`.",N,N],[3,"Errors","","A resource you can use to store errors that occurred outside of the ECS but were catched inside, therefore should be handled by the user.",N,N],[3,"Merge","","A system which merges `Ready` futures into the persistent storage. Please note that your `World` has to contain a component storage for `F` and `F::Item`.",N,N],[6,"BoxedFuture","","A boxed, thread-safe future with `T` as item and `BoxedErr` as error type.",N,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["self"]]],[11,"new","","Creates a new instance of `Errors`.",5,[[],["self"]]],[11,"add","","Add an error to the error collection.",5,[[["self"],["boxederr"]]]],[11,"execute","","A convenience method which allows nicer error handling.",5,[[["self"],["f"]]]],[11,"has_error","","Checks if the queue contains at least one error.",5,[[["self"]],["bool"]]],[11,"pop_err","","Removes the first error from the queue.",5,[[["self"]],["option",["boxederr"]]]],[11,"drain","","Returns a draining iterator, removing elements on each call to `Iterator::next`.",5,[[["self"]],["drainerrors"]]],[11,"collect","","Collect all errors into a `Vec`.",5,[[["self"]],["vec",["boxederr"]]]],[11,"print_and_exit","","Prints all errors and exits in case there's been an error. Useful for debugging.",5,[[["self"]]]],[11,"default","","",6,[[],["self"]]],[11,"new","","Creates a new merge system.",6,[[],["self"]]],[11,"run","","",6,N],[11,"running_time","","",6,[[["self"]],["runningtime"]]],[11,"open","specs","",7,N],[11,"get","","",7,N],[0,"changeset","","Provides a changeset that can be collected from an iterator.",N,N],[3,"ChangeSet","specs::changeset","Change set that can be collected from an iterator, and joined on for easy application to components.",N,N],[11,"default","","",8,[[],["self"]]],[11,"new","","Create a new change set",8,[[],["self"]]],[11,"add","","Add a value to the change set. If the entity already have a value in the change set, the incoming value will be added to that.",8,[[["self"],["entity"],["t"]]]],[11,"clear","","Clear the changeset",8,[[["self"]]]],[11,"from_iter","","",8,[[["i"]],["self"]]],[11,"extend","","",8,[[["self"],["i"]]]],[11,"open","","",8,N],[11,"get","","",8,N],[0,"error","specs","Specs errors",N,N],[3,"BoxedErr","specs::error","A boxed error implementing `Debug`, `Display` and `Error`.",N,N],[12,"0","","",9,N],[3,"WrongGeneration","","Wrong generation error.",N,N],[12,"action","","The action that failed because of the wrong generation.",10,N],[12,"actual_gen","","The actual generation of this id.",10,N],[12,"entity","","The entity that has been passed, containing the id and the invalid generation.",10,N],[4,"Error","","The Specs error type. This is an enum which is able to represent all error types of this library.",N,N],[13,"Custom","","A custom, boxed error.",11,N],[13,"WrongGeneration","","Wrong generation error.",11,N],[4,"NoError","","An error type which cannot be instantiated. Used as a placeholder for associated error types if something cannot fail.",N,N],[11,"new","","Creates a new boxed error.",9,[[["t"]],["self"]]],[11,"as_ref","","",9,[[["self"]],["stderror"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["fmtresult"]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["fmtresult"]]],[11,"from","","",11,[[["noerror"]],["self"]]],[11,"from","","",11,[[["wronggeneration"]],["self"]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"cause","","",11,[[["self"]],["option",["stderror"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["wronggeneration"]],["bool"]]],[11,"ne","","",10,[[["self"],["wronggeneration"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["fmtresult"]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["noerror"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["fmtresult"]]],[11,"description","","",12,[[["self"]],["str"]]],[0,"join","specs","Joining of components for iteration over entities with specific components.",N,N],[3,"MaybeJoin","specs::join","A `Join`-able structure that yields all indices, returning `None` for all missing elements and `Some(T)` for found elements.",N,N],[12,"0","","",13,N],[3,"JoinIter","","`JoinIter` is an `Iterator` over a group of `Storages`.",N,N],[3,"JoinParIter","","`JoinParIter` is a `ParallelIterator` over a group of `Storages`.",N,N],[8,"BitAnd","","`BitAnd` is a helper method to & bitsets together resulting in a tree.",N,N],[16,"Value","","The combined bitsets.",14,N],[10,"and","","Combines `Self` into a single `BitSetLike` through `BitSetAnd`.",14,N],[8,"Join","","The purpose of the `Join` trait is to provide a way to access multiple storages at the same time with the merged bit set.",N,N],[16,"Type","","Type of joined components.",15,N],[16,"Value","","Type of joined storages.",15,N],[16,"Mask","","Type of joined bit mask.",15,N],[11,"join","","Create a joined iterator over the contents.",15,[[["self"]],["joiniter"]]],[11,"maybe","","Returns a `Join`-able structure that yields all indices, returning `None` for all missing elements and `Some(T)` for found elements.",15,[[["self"]],["maybejoin"]]],[10,"open","","Open this join by returning the mask and the storages.",15,N],[10,"get","","Get a joined component value by a given index.",15,N],[11,"is_unconstrained","","If this `Join` typically returns all indices in the mask, then iterating over only it or combined with other joins that are also dangerous will cause the `JoinIter`/`ParJoin` to go through all indices which is usually not what is wanted and will kill performance.",15,[[],["bool"]]],[8,"ParJoin","","The purpose of the `ParJoin` trait is to provide a way to access multiple storages in parallel at the same time with the merged bit set.",N,N],[11,"par_join","","Create a joined parallel iterator over the contents.",16,[[["self"]],["joinpariter"]]],[11,"open","","",13,N],[11,"get","","",13,N],[11,"is_unconstrained","","",13,[[],["bool"]]],[11,"new","","Create a new join iterator.",17,[[["j"]],["self"]]],[11,"get","","Allows getting joined values for specific entity.",17,[[["self"],["entity"],["entities"]],["option"]]],[11,"get_unchecked","","Allows getting joined values for specific raw index.",17,[[["self"],["index"]],["option"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"drive_unindexed","","",18,N],[0,"prelude","specs","Prelude module",N,N],[3,"BitSet","specs::prelude","A `BitSet` is a simple set designed to track which indices are placed into it.",N,N],[8,"Accessor","","A trait for accessing read/write multiple resources from a system. This can be used to create dynamic systems that don't specify what they fetch at compile-time.",N,N],[10,"try_new","","Tries to create a new instance of this type. This one returns `Some` in case there is a default, otherwise the system needs to override `System::accessor`.",0,[[],["option"]]],[10,"reads","","A list of [`ResourceId`]s the bundle needs read access to in order to build the target resource bundle.",0,[[["self"]],["vec",["resourceid"]]]],[10,"writes","","A list of [`ResourceId`]s the bundle needs write access to in order to build the target resource bundle.",0,[[["self"]],["vec",["resourceid"]]]],[3,"Dispatcher","","The dispatcher struct, allowing systems to be executed in parallel.",N,N],[3,"DispatcherBuilder","","Builder for the [`Dispatcher`].",N,N],[3,"Read","","Allows to fetch a resource in a system immutably.",N,N],[6,"ReadExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Read` or `Option<Read>` is therefore recommended.",N,N],[3,"Resources","","A resource container, which provides methods to access to the contained resources.",N,N],[8,"RunNow","","Trait for fetching data and running systems. Automatically implemented for systems.",N,N],[10,"run_now","","Runs the system now.",1,N],[10,"setup","","Sets up `Resources` for a later call to `run_now`.",1,N],[3,"StaticAccessor","","The static accessor that is used for `SystemData`.",N,N],[8,"System","","A `System`, executed with a set of required [`Resource`]s.",N,N],[16,"SystemData","","The resource bundle required to execute this system.",2,N],[10,"run","","Executes the system with the required system data.",2,N],[11,"running_time","","Returns a hint how long the system needs for running. This is used to optimize the way they're executed (might allow more parallelization).",2,[[["self"]],["runningtime"]]],[11,"accessor","","Return the accessor from the [`SystemData`].",2,[[["self"]],["accessorcow"]]],[11,"setup","","Sets up the `Resources` using `Self::SystemData::setup`.",2,N],[8,"SystemData","","A static system data that can specify its dependencies at statically (at compile-time). Most system data is a `SystemData`, the `DynamicSystemData` type is only needed for very special setups.",N,N],[10,"setup","","Sets up the system data for fetching it from the `Resources`.",3,N],[10,"fetch","","Fetches the system data from `Resources`. Note that this is only specified for one concrete lifetime `'a`, you need to implement the `SystemData` trait for every possible lifetime.",3,[[["resources"]],["self"]]],[10,"reads","","Returns all read dependencies as fetched from `Self::fetch`.",3,[[],["vec",["resourceid"]]]],[10,"writes","","Returns all write dependencies as fetched from `Self::fetch`.",3,[[],["vec",["resourceid"]]]],[3,"Write","","Allows to fetch a resource in a system mutably.",N,N],[6,"WriteExpect","","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Write` or `Option<Write>` is therefore recommended.",N,N],[3,"ReaderId","","The reader id is used by readers to tell the storage where the last read ended.",N,N],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",N,N],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",19,N],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",19,N],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",19,N],[11,"try_for_each","","Executes a fallible `OP` on each item produced by the iterator, in parallel.",19,[[["self"],["op"]],["r"]]],[11,"try_for_each_with","","Executes a fallible `OP` on the given `init` value with each item produced by the iterator, in parallel.",19,[[["self"],["t"],["op"]],["r"]]],[11,"count","","Counts the number of items in this parallel iterator.",19,[[["self"]],["usize"]]],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",19,[[["self"],["f"]],["map"]]],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",19,[[["self"],["t"],["f"]],["mapwith"]]],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",19,[[["self"]],["cloned"]]],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",19,[[["self"],["op"]],["inspect"]]],[11,"update","","Mutates each item of this iterator before yielding it.",19,[[["self"],["f"]],["update"]]],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",19,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",19,[[["self"],["p"]],["filtermap"]]],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",19,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",19,[[["self"]],["flatten"]]],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",19,N],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",19,[[["self"],["op"]],["option"]]],[11,"try_reduce","","Reduces the items in the iterator into one item using a fallible `op`. The `identity` argument is used the same way as in [`reduce()`].",19,N],[11,"try_reduce_with","","Reduces the items in the iterator into one item using a fallible `op`.",19,[[["self"],["op"]],["option"]]],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",19,[[["self"],["id"],["f"]],["fold"]]],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",19,[[["self"],["t"],["f"]],["foldwith"]]],[11,"try_fold","","Perform a fallible parallel fold.",19,[[["self"],["id"],["f"]],["tryfold"]]],[11,"try_fold_with","","Perform a fallible parallel fold with a cloneable `init` value.",19,[[["self"],["t"],["f"]],["tryfoldwith"]]],[11,"sum","","Sums up the items in the iterator.",19,[[["self"]],["s"]]],[11,"product","","Multiplies all the items in the iterator.",19,[[["self"]],["p"]]],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",19,[[["self"]],["option"]]],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",19,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",19,[[["self"],["f"]],["option"]]],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",19,[[["self"]],["option"]]],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",19,[[["self"],["f"]],["option"]]],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",19,[[["self"],["f"]],["option"]]],[11,"chain","","Takes two iterators and creates a new iterator over both.",19,[[["self"],["c"]],["chain"]]],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",19,[[["self"],["p"]],["option"]]],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",19,[[["self"],["p"]],["option"]]],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",19,[[["self"],["p"]],["option"]]],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",19,[[["self"],["p"]],["bool"]]],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",19,[[["self"],["p"]],["bool"]]],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",19,[[["self"]],["whilesome"]]],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",19,[[["self"]],["c"]]],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",19,N],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",19,N],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",19,N],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",19,N],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",19,N],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",19,[[["self"]],["option",["usize"]]]],[3,"AsyncDispatcher","","Like, `Dispatcher` but works asynchronously.",N,N],[3,"DenseVecStorage","","Dense vector storage. Has a redirection 2-way table between entities and components, allowing to leave no gaps within the data.",N,N],[3,"FlaggedStorage","","Wrapper storage that tracks modifications, insertions, and removals of components  through an `EventChannel`.",N,N],[3,"HashMapStorage","","HashMap-based storage. Best suited for rare components.",N,N],[3,"InsertedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"ModifiedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"NullStorage","","A null storage type, used for cases where the component doesn't contain any data and instead works as a simple flag.",N,N],[3,"RemovedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"VecStorage","","Vector storage. Uses a simple `Vec`. Supposed to have maximum performance for the components mostly present in entities.",N,N],[3,"Entity","","`Entity` type, as seen by the user.",N,N],[3,"LazyUpdate","","Lazy updates can be used for world updates that need to borrow a lot of resources and as such should better be done at the end. They work lazily in the sense that they are dispatched when calling `world.maintain()`.",N,N],[6,"ReadStorage","","A storage with read access.",N,N],[6,"WriteStorage","","A storage with read and write access.",N,N],[6,"Entities","","A wrapper for a read `Entities` resource. Note that this is just `Read<Entities>`, so you can easily use it in your system:",N,N],[8,"Tracked","","`UnprotectedStorage`s that track modifications, insertions, and removals of components.",N,N],[10,"channels","","Event channels tracking modified/inserted/removed components.",20,[[["self"]],["trackchannels"]]],[10,"channels_mut","","Mutable event channels tracking modified/inserted/removed components.",20,[[["self"]],["trackchannels"]]],[8,"Component","","Abstract component type. Doesn't have to be Copy or even Clone.",N,N],[16,"Storage","","Associated storage type for this component.",21,N],[0,"storage","specs","Component storage types, implementations for component joins, etc.",N,N],[3,"FlaggedStorage","specs::storage","Wrapper storage that tracks modifications, insertions, and removals of components  through an `EventChannel`.",N,N],[3,"RestrictedStorage","","Similar to a `MaskedStorage` and a `Storage` combined, but restricts usage to only getting and modifying the components. That means nothing that would modify the inner bitset so the iteration cannot be invalidated. For example, no insertion or removal is allowed.",N,N],[3,"BTreeStorage","","BTreeMap-based storage.",N,N],[3,"DenseVecStorage","","Dense vector storage. Has a redirection 2-way table between entities and components, allowing to leave no gaps within the data.",N,N],[3,"HashMapStorage","","HashMap-based storage. Best suited for rare components.",N,N],[3,"NullStorage","","A null storage type, used for cases where the component doesn't contain any data and instead works as a simple flag.",N,N],[3,"VecStorage","","Vector storage. Uses a simple `Vec`. Supposed to have maximum performance for the components mostly present in entities.",N,N],[3,"InsertedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"ModifiedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"RemovedFlag","","Flag with additional type safety against which kind of operations were done.",N,N],[3,"TrackChannels","","All three types of tracked modifications to components.",N,N],[12,"modify","","Modifications event channel.",22,N],[12,"insert","","Insertions event channel.",22,N],[12,"remove","","Removed event channel.",22,N],[3,"AntiStorage","","An inverted storage type, only useful to iterate entities that do not have a particular component type.",N,N],[3,"MaskedStorage","","The `UnprotectedStorage` together with the `BitSet` that knows about which elements are stored, and which are not.",N,N],[3,"Storage","","A wrapper around the masked storage and the generations vector. Can be used for safe lookup of components, insertions and removes. This is what `World::read/write` fetches for the user.",N,N],[3,"OccupiedEntry","","An entry to a storage which has a component associated to the entity.",N,N],[3,"VacantEntry","","An entry to a storage which does not have a component associated to the entity.",N,N],[4,"ImmutableParallelRestriction","","Specifies that the `RestrictedStorage` can run in parallel immutably.",N,N],[4,"MutableParallelRestriction","","Specifies that the `RestrictedStorage` can run in parallel mutably.",N,N],[4,"SequentialRestriction","","Specifies that the `RestrictedStorage` cannot run in parallel.",N,N],[4,"StorageEntry","","Entry to a storage for convenient filling of components or removal based on whether the entity has a component.",N,N],[13,"Occupied","","Entry variant that is returned if the entity does has a component.",23,N],[13,"Vacant","","Entry variant that is returned if the entity does not have a component.",23,N],[11,"setup","specs::storage::data","",24,[[["resources"]]]],[11,"fetch","","",24,[[["resources"]],["self"]]],[11,"reads","","",24,[[],["vec",["resourceid"]]]],[11,"writes","","",24,[[],["vec",["resourceid"]]]],[11,"setup","","",25,[[["resources"]]]],[11,"fetch","","",25,[[["resources"]],["self"]]],[11,"reads","","",25,[[],["vec",["resourceid"]]]],[11,"writes","","",25,[[],["vec",["resourceid"]]]],[11,"default","specs","",26,[[],["self"]]],[11,"clean","","",26,[[["self"],["b"]]]],[11,"get","","",26,[[["self"],["index"]],["c"]]],[11,"get_mut","","",26,[[["self"],["index"]],["c"]]],[11,"insert","","",26,[[["self"],["index"],["c"]]]],[11,"remove","","",26,[[["self"],["index"]],["c"]]],[11,"channels","","",26,[[["self"]],["trackchannels"]]],[11,"channels_mut","","",26,[[["self"]],["trackchannels"]]],[11,"get","specs::storage::generic","",24,[[["self"],["entity"]],["option"]]],[11,"_private","","",24,[[],["seal"]]],[11,"get","","",25,[[["self"],["entity"]],["option"]]],[11,"_private","","",25,[[],["seal"]]],[11,"get_mut","","",25,[[["self"],["entity"]],["option"]]],[11,"insert","","",25,N],[11,"remove","","",25,[[["self"],["entity"]]]],[11,"_private","","",25,[[],["seal"]]],[11,"restrict","specs::storage","Builds an immutable `RestrictedStorage` out of a `Storage`. Allows deferred unchecked access to the entity's component.",27,[[["self"]],["restrictedstorage",["bitset","immutableparallelrestriction"]]]],[11,"restrict_mut","","Builds a mutable `RestrictedStorage` out of a `Storage`. Allows restricted access to the inner components without allowing invalidating the bitset for iteration in `Join`.",27,[[["self"]],["restrictedstorage",["bitset","sequentialrestriction"]]]],[11,"par_restrict_mut","","Builds a mutable, parallel `RestrictedStorage`, does not allow mutably getting other components aside from the current iteration.",27,[[["self"]],["restrictedstorage",["bitset","mutableparallelrestriction"]]]],[11,"default","","",28,[[],["self"]]],[11,"clean","","",28,[[["self"],["b"]]]],[11,"get","","",28,[[["self"],["index"]],["t"]]],[11,"get_mut","","",28,[[["self"],["index"]],["t"]]],[11,"insert","","",28,[[["self"],["index"],["t"]]]],[11,"remove","","",28,[[["self"],["index"]],["t"]]],[11,"default","specs","",29,[[],["self"]]],[11,"clean","","",29,[[["self"],["b"]]]],[11,"get","","",29,[[["self"],["index"]],["t"]]],[11,"get_mut","","",29,[[["self"],["index"]],["t"]]],[11,"insert","","",29,[[["self"],["index"],["t"]]]],[11,"remove","","",29,[[["self"],["index"]],["t"]]],[11,"default","","",30,[[],["self"]]],[11,"clean","","",30,[[["self"],["b"]]]],[11,"get","","",30,[[["self"],["index"]],["t"]]],[11,"get_mut","","",30,[[["self"],["index"]],["t"]]],[11,"insert","","",30,[[["self"],["index"],["t"]]]],[11,"remove","","",30,[[["self"],["index"]],["t"]]],[11,"clean","","",31,[[["self"],["b"]]]],[11,"get","","",31,[[["self"],["index"]],["t"]]],[11,"get_mut","","",31,[[["self"],["index"]],["t"]]],[11,"insert","","",31,[[["self"],["index"],["t"]]]],[11,"remove","","",31,[[["self"],["index"]],["t"]]],[11,"default","","",31,[[],["self"]]],[11,"default","","",32,[[],["self"]]],[11,"clean","","",32,[[["self"],["b"]]]],[11,"get","","",32,[[["self"],["index"]],["t"]]],[11,"get_mut","","",32,[[["self"],["index"]],["t"]]],[11,"insert","","",32,[[["self"],["index"],["t"]]]],[11,"remove","","",32,[[["self"],["index"]],["t"]]],[11,"new","specs::storage","Creates a new structure that holds all types of component modification events.",22,[[],["self"]]],[11,"default","","",22,[[],["self"]]],[11,"channels","","Returns the event channel tracking modified components.",27,[[["self"]],["trackchannels"]]],[11,"modified","","Returns the event channel tracking modified components.",27,[[["self"]],["eventchannel"]]],[11,"inserted","","Returns the event channel tracking inserted components.",27,[[["self"]],["eventchannel"]]],[11,"removed","","Returns the event channel tracking removed components.",27,[[["self"]],["eventchannel"]]],[11,"populate_modified","","Reads events from the modified `EventChannel` and populates a structure using the events.",27,[[["self"],["readerid"],["e"]]]],[11,"populate_inserted","","Reads events from the inserted `EventChannel` and populates a structure using the events.",27,[[["self"],["readerid"],["e"]]]],[11,"populate_removed","","Reads events from the removed `EventChannel` and populates a structure using the events.",27,[[["self"],["readerid"],["e"]]]],[11,"channels_mut","","Returns all of the event channels for this component.",27,[[["self"]],["trackchannels"]]],[11,"modified_mut","","Returns the event channel tracking modified components mutably.",27,[[["self"]],["eventchannel"]]],[11,"inserted_mut","","Returns the event channel tracking inserted components mutably.",27,[[["self"]],["eventchannel"]]],[11,"removed_mut","","Returns the event channel tracking removed components mutably.",27,[[["self"]],["eventchannel"]]],[11,"track_modified","","Starts tracking modified events.",27,[[["self"]],["readerid",["modifiedflag"]]]],[11,"track_inserted","","Starts tracking inserted events.",27,[[["self"]],["readerid",["insertedflag"]]]],[11,"track_removed","","Starts tracking removed events.",27,[[["self"]],["readerid",["removedflag"]]]],[11,"flag_modified","","Flags an index as modified.",27,[[["self"],["index"]]]],[11,"flag_inserted","","Flags an index as inserted.",27,[[["self"],["index"]]]],[11,"flag_removed","","Flags an index as removed.",27,[[["self"],["index"]]]],[11,"clone","specs","",33,[[["self"]],["modifiedflag"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["modifiedflag"]],["bool"]]],[11,"ne","","",33,[[["self"],["modifiedflag"]],["bool"]]],[11,"deref","","",33,N],[11,"as_ref","","",33,[[["self"]],["index"]]],[11,"from","","",33,[[["index"]],["self"]]],[11,"clone","","",34,[[["self"]],["insertedflag"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["insertedflag"]],["bool"]]],[11,"ne","","",34,[[["self"],["insertedflag"]],["bool"]]],[11,"deref","","",34,N],[11,"as_ref","","",34,[[["self"]],["index"]]],[11,"from","","",34,[[["index"]],["self"]]],[11,"clone","","",35,[[["self"]],["removedflag"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["removedflag"]],["bool"]]],[11,"ne","","",35,[[["self"],["removedflag"]],["bool"]]],[11,"deref","","",35,N],[11,"as_ref","","",35,[[["self"]],["index"]]],[11,"from","","",35,[[["index"]],["self"]]],[6,"ReadStorage","specs::storage","A storage with read access.",N,N],[6,"WriteStorage","","A storage with read and write access.",N,N],[6,"InsertResult","","The status of an `insert()`ion into a storage. If the insertion was successful then the Ok value will contain the component that was replaced (if any).",N,N],[8,"GenericReadStorage","","Provides generic read access to both `ReadStorage` and `WriteStorage`",N,N],[16,"Component","","The component type of the storage",36,N],[10,"get","","Get immutable access to an `Entity`s component",36,[[["self"],["entity"]],["option"]]],[10,"_private","","Private function to seal the trait",36,[[],["seal"]]],[8,"GenericWriteStorage","","Provides generic write access to `WriteStorage`, both as a value and a mutable reference.",N,N],[16,"Component","","The component type of the storage",37,N],[10,"get_mut","","Get mutable access to an `Entity`s component",37,[[["self"],["entity"]],["option"]]],[10,"insert","","Insert a component for an `Entity`",37,N],[10,"remove","","Remove the component for an `Entity`",37,[[["self"],["entity"]]]],[10,"_private","","Private function to seal the trait",37,[[],["seal"]]],[8,"Tracked","","`UnprotectedStorage`s that track modifications, insertions, and removals of components.",N,N],[10,"channels","","Event channels tracking modified/inserted/removed components.",20,[[["self"]],["trackchannels"]]],[10,"channels_mut","","Mutable event channels tracking modified/inserted/removed components.",20,[[["self"]],["trackchannels"]]],[8,"AnyStorage","","A dynamic storage.",N,N],[10,"drop","","Drop components of given entities.",38,N],[8,"DistinctStorage","","This is a marker trait which requires you to uphold the following guarantee:",N,N],[8,"TryDefault","","Tries to create a default value, returns an `Err` with the name of the storage and/or component if there's no default.",N,N],[10,"try_default","","Tries to create the default.",39,[[],["result",["string"]]]],[11,"unwrap_default","","Calls `try_default` and panics on an error case.",39,[[],["self"]]],[8,"UnprotectedStorage","","Used by the framework to quickly join components.",N,N],[10,"clean","","Clean the storage given a bitset with bits set for valid indices. Allows us to safely drop the storage.",40,[[["self"],["b"]]]],[10,"get","","Tries reading the data associated with an `Index`. This is unsafe because the external set used to protect this storage is absent.",40,[[["self"],["index"]],["t"]]],[10,"get_mut","","Tries mutating the data associated with an `Index`. This is unsafe because the external set used to protect this storage is absent.",40,[[["self"],["index"]],["t"]]],[10,"insert","","Inserts new data for a given `Index`.",40,[[["self"],["index"],["t"]]]],[10,"remove","","Removes the data associated with an `Index`.",40,[[["self"],["index"]],["t"]]],[11,"drop","","Drops the data associated with an `Index`.",40,[[["self"],["index"]]]],[11,"open","","",41,N],[11,"get","","",41,N],[11,"cast","","",38,[[["t"]],["self"]]],[11,"cast_mut","","",38,[[["t"]],["self"]]],[11,"drop","","",42,N],[11,"default","","",42,[[],["self"]]],[11,"new","","Creates a new `MaskedStorage`. This is called when you register a new component type within the world.",42,N],[11,"clear","","Clear the contents of this storage.",42,[[["self"]]]],[11,"remove","","Remove an element by a given index.",42,[[["self"],["index"]],["option"]]],[11,"drop","","Drop an element by a given index.",42,[[["self"],["index"]]]],[11,"drop","","",42,[[["self"]]]],[11,"new","","Create a new `Storage`",27,[[["fetch",["entitiesres"]],["d"]],["storage"]]],[11,"unprotected_storage","","Gets the wrapped storage.",27,N],[11,"get","","Tries to read the data associated with an `Entity`.",27,[[["self"],["entity"]],["option"]]],[11,"contains","","Returns true if the storage has a component for this entity, and that entity is alive.",27,[[["self"],["entity"]],["bool"]]],[11,"mask","","Returns a reference to the bitset of this storage which allows filtering by the component type without actually getting the component.",27,[[["self"]],["bitset"]]],[11,"get","","Get a reference to the component associated with the entity.",43,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the component associated with the entity.",43,[[["self"]],["t"]]],[11,"into_mut","","Converts the `OccupiedEntry` into a mutable reference bounded by the storage's lifetime.",43,[[["self"]],["t"]]],[11,"insert","","Inserts a value into the storage and returns the old one.",43,[[["self"],["t"]],["t"]]],[11,"remove","","Removes the component from the storage and returns it.",43,[[["self"]],["t"]]],[11,"insert","","Inserts a value into the storage.",44,[[["self"],["t"]],["t"]]],[11,"or_insert","","Inserts a component if the entity does not contain a component.",23,[[["self"],["t"]],["t"]]],[11,"or_insert_with","","Inserts a component using a lazily called function that is only called when inserting the component.",23,[[["self"],["f"]],["t"]]],[11,"unprotected_storage_mut","","Gets mutable access to the wrapped storage.",27,N],[11,"get_mut","","Tries to mutate the data associated with an `Entity`.",27,[[["self"],["entity"]],["option"]]],[11,"entry","","Returns an entry to the component associated to the entity.",27,[[["self"],["entity"]],["result",["storageentry","wronggeneration"]]]],[11,"insert","","Inserts new data for a given `Entity`. Returns the result of the operation as a `InsertResult<T>`",27,[[["self"],["entity"],["t"]],["insertresult"]]],[11,"remove","","Removes the data associated with an `Entity`.",27,[[["self"],["entity"]],["option"]]],[11,"clear","","Clears the contents of the storage.",27,[[["self"]]]],[11,"drain","","Creates a draining storage wrapper which can be `.join`ed to get a draining iterator.",27,[[["self"]],["drain"]]],[0,"world","specs","Entities, resources, components, and general world management.",N,N],[3,"CreateIterAtomic","specs::world","An iterator for entity creation. Please note that you have to consume it because iterators are lazy.",N,N],[3,"EntitiesRes","","The entities of this ECS. This is a resource, stored in the `World`. If you just want to access it in your system, you can also use the `Entities` type def.",N,N],[3,"Entity","","`Entity` type, as seen by the user.",N,N],[3,"EntityResBuilder","","An entity builder from `EntitiesRes`.  Allows building an entity with its components if you have mutable access to the component storages.",N,N],[12,"entity","","The entity being built",45,N],[12,"entities","","The active borrow to `EntitiesRes`, used to delete the entity if the builder is dropped without called `build()`.",45,N],[3,"Generation","","Index generation. When a new entity is placed at an old index, it bumps the `Generation` by 1. This allows to avoid using components from the entities that were deleted.",N,N],[3,"LazyBuilder","","Like `EntityBuilder`, but inserts the component lazily, meaning on `maintain`. If you need those components to exist immediately, you have to insert them into the storages yourself.",N,N],[12,"entity","","The entity that we're inserting components for.",46,N],[12,"lazy","","The lazy update reference.",46,N],[3,"LazyUpdate","","Lazy updates can be used for world updates that need to borrow a lot of resources and as such should better be done at the end. They work lazily in the sense that they are dispatched when calling `world.maintain()`.",N,N],[3,"CreateIter","","An iterator for entity creation. Please note that you have to consume it because iterators are lazy.",N,N],[3,"EntityBuilder","","The entity builder, allowing to build an entity together with its components.",N,N],[12,"entity","","The (already created) entity for which components will be inserted.",47,N],[12,"world","","A reference to the `World` for component insertions.",47,N],[3,"World","","The `World` struct contains the component storages and other resources.",N,N],[12,"res","","The resources used for this world.",48,N],[11,"next","","",49,[[["self"]],["option",["entity"]]]],[11,"clone","specs","",50,[[["self"]],["entity"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"hash","","",50,N],[11,"cmp","","",50,[[["self"],["entity"]],["ordering"]]],[11,"eq","","",50,[[["self"],["entity"]],["bool"]]],[11,"ne","","",50,[[["self"],["entity"]],["bool"]]],[11,"partial_cmp","","",50,[[["self"],["entity"]],["option",["ordering"]]]],[11,"lt","","",50,[[["self"],["entity"]],["bool"]]],[11,"le","","",50,[[["self"],["entity"]],["bool"]]],[11,"gt","","",50,[[["self"],["entity"]],["bool"]]],[11,"ge","","",50,[[["self"],["entity"]],["bool"]]],[11,"id","","Returns the index of the `Entity`.",50,[[["self"]],["index"]]],[11,"gen","","Returns the `Generation` of the `Entity`.",50,[[["self"]],["generation"]]],[11,"fmt","specs::world","",51,[[["self"],["formatter"]],["result"]]],[11,"default","","",51,[[],["entitiesres"]]],[11,"create","","Creates a new entity atomically. This will be persistent as soon as you call `World::maintain`.",51,[[["self"]],["entity"]]],[11,"create_iter","","Returns an iterator which creates new entities atomically. They will be persistent as soon as you call `World::maintain`.",51,[[["self"]],["createiteratomic"]]],[11,"build_entity","","Similar to the `create` method above this creates an entity atomically, and then returns a builder which can be used to insert components into various storages if available.",51,[[["self"]],["entityresbuilder"]]],[11,"delete","","Deletes an entity atomically. The associated components will be deleted as soon as you call `World::maintain`.",51,[[["self"],["entity"]],["result",["wronggeneration"]]]],[11,"entity","","Returns an entity with a given `id`. There's no guarantee for validity, meaning the entity could be not alive.",51,[[["self"],["index"]],["entity"]]],[11,"is_alive","","Returns `true` if the specified entity is alive.",51,[[["self"],["entity"]],["bool"]]],[11,"with","","Appends a component and associates it with the entity.",45,[[["self"],["t"],["writestorage"]],["self"]]],[11,"build","","Finishes the building and returns the entity.",45,[[["self"]],["entity"]]],[11,"drop","","",45,[[["self"]]]],[11,"clone","","",52,[[["self"]],["generation"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"hash","","",52,N],[11,"cmp","","",52,[[["self"],["generation"]],["ordering"]]],[11,"eq","","",52,[[["self"],["generation"]],["bool"]]],[11,"ne","","",52,[[["self"],["generation"]],["bool"]]],[11,"partial_cmp","","",52,[[["self"],["generation"]],["option",["ordering"]]]],[11,"lt","","",52,[[["self"],["generation"]],["bool"]]],[11,"le","","",52,[[["self"],["generation"]],["bool"]]],[11,"gt","","",52,[[["self"],["generation"]],["bool"]]],[11,"ge","","",52,[[["self"],["generation"]],["bool"]]],[11,"id","","Returns the id of the generation.",52,[[["self"]],["i32"]]],[11,"is_alive","","Returns `true` if entities of this `Generation` are alive.",52,[[["self"]],["bool"]]],[11,"with","","Inserts a component using [`LazyUpdate`].",46,[[["self"],["c"]],["self"]]],[11,"build","","Finishes the building and returns the built entity. Please note that no component is associated to this entity until you call [`World::maintain`].",46,[[["self"]],["entity"]]],[11,"default","specs","",53,[[],["self"]]],[11,"create_entity","","Creates a new `LazyBuilder` which inserts components using `LazyUpdate`. This means that the components won't be available immediately, but only after a `maintain` on `World` is performed.",53,[[["self"],["entitiesres"]],["lazybuilder"]]],[11,"insert","","Lazily inserts a component for an entity.",53,[[["self"],["entity"],["c"]]]],[11,"insert_all","","Lazily inserts components for entities.",53,[[["self"],["i"]]]],[11,"remove","","Lazily removes a component.",53,[[["self"],["entity"]]]],[11,"exec","","Lazily executes a closure with world access.",53,[[["self"],["f"]]]],[11,"exec_mut","","Lazily executes a closure with mutable world access.",53,[[["self"],["f"]]]],[11,"drop","","",53,[[["self"]]]],[6,"Entities","specs::world","A wrapper for a read `Entities` resource. Note that this is just `Read<Entities>`, so you can easily use it in your system:",N,N],[6,"Index","","An index is basically the id of an `Entity`.",N,N],[8,"Component","","Abstract component type. Doesn't have to be Copy or even Clone.",N,N],[16,"Storage","","Associated storage type for this component.",21,N],[8,"Builder","","A common trait for `EntityBuilder` and `LazyBuilder`, allowing either to be used. Entity is definitely alive, but the components may or may not exist before a call to `World::maintain`.",N,N],[10,"with","","Appends a component and associates it with the entity.",54,[[["self"],["c"]],["self"]]],[10,"build","","Finishes the building and returns the entity.",54,[[["self"]],["entity"]]],[8,"Bundle","","Trait used to bundle up resources/components for easy registration with `World`.",N,N],[10,"add_to_world","","Add resources/components to `world`.",55,[[["self"],["world"]]]],[11,"next","","",56,[[["self"]],["option",["entity"]]]],[11,"with","","",47,[[["self"],["t"]],["self"]]],[11,"build","","Finishes the building and returns the entity. As opposed to `LazyBuilder`, the components are available immediately.",47,[[["self"]],["entity"]]],[11,"drop","","",47,[[["self"]]]],[11,"new","","Creates a new empty `World`.",48,[[],["world"]]],[11,"register","","Registers a new component, adding the component storage.",48,[[["self"]]]],[11,"register_with_storage","","Registers a new component with a given storage.",48,[[["self"],["f"]]]],[11,"system_data","","Gets `SystemData` `T` from the `World`.",48,[[["self"]],["t"]]],[11,"setup","","Sets up system data `T` for fetching afterwards.",48,[[["self"]]]],[11,"exec","","Executes `f` once, right now with the specified system data.",48,[[["self"],["f"]],["r"]]],[11,"add_resource","","Adds a resource to the world.",48,[[["self"],["t"]]]],[11,"read_storage","","Fetches a component's storage for reading.",48,[[["self"]],["readstorage"]]],[11,"write_storage","","Fetches a component's storage for writing.",48,[[["self"]],["writestorage"]]],[11,"read_resource","","Fetches a resource for reading.",48,[[["self"]],["fetch"]]],[11,"write_resource","","Fetches a resource for writing.",48,[[["self"]],["fetchmut"]]],[11,"entities","","Convenience method for fetching entities.",48,[[["self"]],["read",["entitiesres"]]]],[11,"create_entity","","Allows building an entity with its components.",48,[[["self"]],["entitybuilder"]]],[11,"create_entity_unchecked","","Allows building an entity with its components.",48,[[["self"]],["entitybuilder"]]],[11,"create_iter","","Returns an iterator for entity creation. This makes it easy to create a whole collection of them.",48,[[["self"]],["createiter"]]],[11,"delete_entity","","Deletes an entity and its components.",48,[[["self"],["entity"]],["result",["wronggeneration"]]]],[11,"delete_entities","","Deletes the specified entities and their components.",48,N],[11,"delete_all","","Deletes all entities and their components.",48,[[["self"]]]],[11,"is_alive","","Checks if an entity is alive. Please note that atomically created or deleted entities (the ones created / deleted with the `Entities` struct) are not handled by this method. Therefore, you should have called `maintain()` before using this method.",48,[[["self"],["entity"]],["bool"]]],[11,"maintain","","Merges in the appendix, recording all the dynamically created and deleted entities into the persistent generations vector. Also removes all the abandoned components.",48,[[["self"]]]],[11,"add_bundle","","Adds the given bundle of resources/components.",48,[[["self"],["b"]]]],[11,"borrow","","",48,[[["self"]],["resources"]]],[11,"default","","",48,[[],["self"]]],[6,"ReadStorage","specs","A storage with read access.",N,N],[6,"WriteStorage","","A storage with read and write access.",N,N],[6,"Entities","","A wrapper for a read `Entities` resource. Note that this is just `Read<Entities>`, so you can easily use it in your system:",N,N],[8,"Tracked","","`UnprotectedStorage`s that track modifications, insertions, and removals of components.",N,N],[10,"channels","","Event channels tracking modified/inserted/removed components.",20,[[["self"]],["trackchannels"]]],[10,"channels_mut","","Mutable event channels tracking modified/inserted/removed components.",20,[[["self"]],["trackchannels"]]],[8,"Component","","Abstract component type. Doesn't have to be Copy or even Clone.",N,N],[16,"Storage","","Associated storage type for this component.",21,N],[11,"new","specs::prelude","Creates an empty `BitSet`.",7,[[],["bitset"]]],[11,"with_capacity","","Creates an empty `BitSet`, preallocated for up to `max` indices.",7,[[["u32"]],["bitset"]]],[11,"add","","Adds `id` to the `BitSet`. Returns `true` if the value was already in the set.",7,[[["self"],["u32"]],["bool"]]],[11,"remove","","Removes `id` from the set, returns `true` if the value was removed, and `false` if the value was not set to begin with.",7,[[["self"],["u32"]],["bool"]]],[11,"contains","","Returns `true` if `id` is in the set.",7,[[["self"],["u32"]],["bool"]]],[11,"clear","","Completely wipes out the bit set.",7,N],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"try_new","","",58,[[],["option",["staticaccessor"]]]],[11,"reads","","",58,[[["self"]],["vec",["resourceid"]]]],[11,"writes","","",58,[[["self"]],["vec",["resourceid"]]]],[11,"default","","",58,[[],["staticaccessor"]]],[11,"default","","",57,[[],["dispatcherbuilder"]]],[11,"default","","",59,[[],["resources"]]],[11,"setup","","",60,N],[11,"fetch","","",60,[[["resources"]],["write"]]],[11,"reads","","",60,[[],["vec",["resourceid"]]]],[11,"writes","","",60,[[],["vec",["resourceid"]]]],[11,"setup","","",61,N],[11,"fetch","","",61,[[["resources"]],["read"]]],[11,"reads","","",61,[[],["vec",["resourceid"]]]],[11,"writes","","",61,[[],["vec",["resourceid"]]]],[11,"deref_mut","","",60,[[["self"]],["t"]]],[11,"deref","","",60,[[["self"]],["t"]]],[11,"deref","","",61,[[["self"]],["t"]]],[11,"run_now","","",62,N],[11,"setup","","",62,N],[11,"from","","",60,[[["fetchmut"]],["write"]]],[11,"from","","",61,[[["fetch"]],["read"]]],[11,"bitand","","",7,N],[11,"clone","","",7,[[["self"]],["bitset"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitand_assign","","",7,N],[11,"into_iter","","",7,N],[11,"bitor","","",7,N],[11,"default","","",7,[[],["bitset"]]],[11,"from_iter","","",7,[[["t"]],["bitset"]]],[11,"from_iter","","",7,[[["t"]],["bitset"]]],[11,"bitxor","","",7,N],[11,"remove","","",7,[[["self"],["u32"]],["bool"]]],[11,"extend","","",7,N],[11,"extend","","",7,N],[11,"not","","",7,N],[11,"bitxor_assign","","",7,N],[11,"bitor_assign","","",7,N],[11,"layer3","","",7,[[["self"]],["usize"]]],[11,"layer2","","",7,[[["self"],["usize"]],["usize"]]],[11,"layer1","","",7,[[["self"],["usize"]],["usize"]]],[11,"layer0","","",7,[[["self"],["usize"]],["usize"]]],[11,"contains","","",7,[[["self"],["u32"]],["bool"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",63,N],[11,"setup","","Sets up all the systems which means they are gonna add default values for the resources they need.",62,N],[11,"dispatch","","Dispatch all the systems with given resources and context and then run thread local systems.",62,N],[11,"dispatch_par","","Dispatches the systems (except thread local systems) in parallel given the resources to operate on.",62,N],[11,"dispatch_seq","","Dispatches the systems (except thread local systems) sequentially.",62,N],[11,"dispatch_thread_local","","Dispatch only thread local systems sequentially.",62,N],[11,"new","","Creates a new `DispatcherBuilder` by using the `Default` implementation.",57,[[],["dispatcherbuilder"]]],[11,"with","","Adds a new system with a given name and a list of dependencies. Please note that the dependency should be added before you add the depending system.",57,N],[11,"add","","Adds a new system with a given name and a list of dependencies. Please note that the dependency should be added before you add the depending system.",57,N],[11,"with_thread_local","","Adds a new thread local system.",57,[[["self"],["t"]],["dispatcherbuilder"]]],[11,"add_thread_local","","Adds a new thread local system.",57,N],[11,"with_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",57,[[["self"]],["dispatcherbuilder"]]],[11,"add_barrier","","Inserts a barrier which assures that all systems added before the barrier are executed before the ones after this barrier.",57,N],[11,"with_pool","","Attach a rayon thread pool to the builder and use that instead of creating one.",57,[[["self"],["arc",["threadpool"]]],["dispatcherbuilder"]]],[11,"add_pool","","Attach a rayon thread pool to the builder and use that instead of creating one.",57,N],[11,"print_par_seq","","Prints the equivalent system graph that can be easily used to get the graph using the `seq!` and `par!` macros. This is only recommended for advanced users.",57,N],[11,"build","","Builds the `Dispatcher`.",57,[[["self"]],["dispatcher"]]],[11,"build_async","","Builds an async dispatcher.",57,[[["self"],["r"]],["asyncdispatcher"]]],[11,"new","","Creates a new, empty resource container.",59,[[],["resources"]]],[11,"insert","","Inserts a resource into this container. If the resource existed before, it will be overwritten.",59,N],[11,"has_value","","Returns true if the specified resource type `R` exists in `self`.",59,[[["self"]],["bool"]]],[11,"has_value_raw","","Returns true if the specified resource type exists in `self`.",59,[[["self"],["resourceid"]],["bool"]]],[11,"entry","","Returns an entry for the resource with type `R`.",59,[[["self"]],["entry"]]],[11,"fetch","","Fetches the resource with the specified type `T` or panics if it doesn't exist.",59,[[["self"]],["fetch"]]],[11,"try_fetch","","Like `fetch`, but returns an `Option` instead of inserting a default value in case the resource does not exist.",59,[[["self"]],["option",["fetch"]]]],[11,"fetch_mut","","Fetches the resource with the specified type `T` mutably.",59,[[["self"]],["fetchmut"]]],[11,"try_fetch_mut","","Like `fetch_mut`, but returns an `Option` instead of inserting a default value in case the resource does not exist.",59,[[["self"]],["option",["fetchmut"]]]],[11,"try_fetch_internal","","Internal function for fetching resources, should only be used if you know what you're doing.",59,[[["self"],["typeid"]],["option",["trustcell"]]]],[11,"get_mut","","Retrieves a resource without fetching, which is cheaper, but only available with `&mut self`.",59,[[["self"]],["option"]]],[11,"get_mut_raw","","Retrieves a resource without fetching, which is cheaper, but only available with `&mut self`.",59,[[["self"],["typeid"]],["option",["resource"]]]],[11,"dispatch","","Dispatches the systems asynchronously. Does not execute thread local systems.",64,N],[11,"wait","","Waits for all the asynchronously dispatched systems to finish and executes thread local systems (if there are any).",64,N],[11,"wait_without_tl","","Waits for all the asynchronously dispatched systems to finish without executing thread local systems.",64,N],[11,"running","","Checks if any of the asynchronously dispatched systems are running.",64,[[["self"]],["bool"]]],[11,"res","","Returns the resources.",64,[[["self"]],["r"]]],[11,"mut_res","","Returns the resources mutable.",64,[[["self"]],["r"]]]],"paths":[[8,"Accessor"],[8,"RunNow"],[8,"System"],[8,"SystemData"],[3,"DrainErrors"],[3,"Errors"],[3,"Merge"],[3,"BitSet"],[3,"ChangeSet"],[3,"BoxedErr"],[3,"WrongGeneration"],[4,"Error"],[4,"NoError"],[3,"MaybeJoin"],[8,"BitAnd"],[8,"Join"],[8,"ParJoin"],[3,"JoinIter"],[3,"JoinParIter"],[8,"ParallelIterator"],[8,"Tracked"],[8,"Component"],[3,"TrackChannels"],[4,"StorageEntry"],[6,"ReadStorage"],[6,"WriteStorage"],[3,"FlaggedStorage"],[3,"Storage"],[3,"BTreeStorage"],[3,"HashMapStorage"],[3,"DenseVecStorage"],[3,"NullStorage"],[3,"VecStorage"],[3,"ModifiedFlag"],[3,"InsertedFlag"],[3,"RemovedFlag"],[8,"GenericReadStorage"],[8,"GenericWriteStorage"],[8,"AnyStorage"],[8,"TryDefault"],[8,"UnprotectedStorage"],[3,"AntiStorage"],[3,"MaskedStorage"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"EntityResBuilder"],[3,"LazyBuilder"],[3,"EntityBuilder"],[3,"World"],[3,"CreateIterAtomic"],[3,"Entity"],[3,"EntitiesRes"],[3,"Generation"],[3,"LazyUpdate"],[8,"Builder"],[8,"Bundle"],[3,"CreateIter"],[3,"DispatcherBuilder"],[3,"StaticAccessor"],[3,"Resources"],[3,"Write"],[3,"Read"],[3,"Dispatcher"],[3,"ReaderId"],[3,"AsyncDispatcher"]]};
searchIndex["specs_hierarchy"]={"doc":"","items":[[3,"Hierarchy","specs_hierarchy","Scene graph type hierarchy.",N,N],[3,"SubHierarchyIterator","","",N,N],[3,"HierarchySetupHandler","","Specs `SetupHandler` for the `Hierarchy` resource.",N,N],[3,"ParentData","","Utility struct for the data needed by the `Hierarchy` maintain.",N,N],[3,"HierarchySystem","","System for maintaining a `Hierarchy` resource.",N,N],[4,"HierarchyEvent","","Hierarchy events.",N,N],[13,"Modified","","`Entity` was either inserted or modified in the `Hierarchy`",0,N],[13,"Removed","","`Entity` was removed from the `Hierarchy`. Note that this does not mean the `Parent` component was removed from the component storage, just that the `Entity` will no longer be considered to be a part of the `Hierarchy`.",0,N],[8,"Parent","","Bound for the parent component of your crate. Your `Parent` component usually just contains the `Entity` that's the parent you're linking to.",N,N],[10,"parent_entity","","Retrieves the parent `Entity`.",1,[[["self"]],["entity"]]],[11,"new","","Create a new hierarchy object.",2,[[["readerid",["modifiedflag"]],["readerid",["insertedflag"]],["readerid",["removedflag"]]],["self"]]],[11,"all","","Get all entities that contain parents, in sorted order, where parents are guaranteed to be before their children.",2,N],[11,"children","","Get the immediate children of a specific entity.",2,N],[11,"all_children","","Get all children of this entity recursively as a `BitSet`",2,[[["self"],["entity"]],["bitset"]]],[11,"all_children_iter","","Returns an iterator over all of the recursive children of this entity.",2,[[["self"],["entity"]],["subhierarchyiterator"]]],[11,"parent","","Get the parent of a specific entity",2,[[["self"],["entity"]],["option",["entity"]]]],[11,"track","","Get a token for tracking the modification events from the hierarchy",2,[[["self"]],["readerid",["hierarchyevent"]]]],[11,"changed","","Get the `EventChannel` for the modification events for reading",2,[[["self"]],["eventchannel"]]],[11,"maintain","","Maintain the hierarchy, usually only called by `HierarchySystem`.",2,[[["self"],["parentdata"]]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"setup","","",4,[[["resources"]]]],[11,"setup","","",5,[[["resources"]]]],[11,"fetch","","",5,[[["resources"]],["self"]]],[11,"reads","","",5,[[],["vec",["resourceid"]]]],[11,"writes","","",5,[[],["vec",["resourceid"]]]],[11,"new","","",6,[[],["self"]]],[11,"run","","",6,N]],"paths":[[4,"HierarchyEvent"],[8,"Parent"],[3,"Hierarchy"],[3,"SubHierarchyIterator"],[3,"HierarchySetupHandler"],[3,"ParentData"],[3,"HierarchySystem"]]};
searchIndex["stable_deref_trait"]={"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N]],"paths":[]};
searchIndex["stb_truetype"]={"doc":"","items":[[3,"FontInfo","stb_truetype","",N,N],[3,"Vertex","","",N,N],[12,"x","","",0,N],[12,"y","","",0,N],[12,"cx","","",0,N],[12,"cy","","",0,N],[3,"Rect","","",N,N],[12,"x0","","",1,N],[12,"y0","","",1,N],[12,"x1","","",1,N],[12,"y1","","",1,N],[3,"HMetrics","","",N,N],[12,"advance_width","","",2,N],[12,"left_side_bearing","","",2,N],[3,"VMetrics","","",N,N],[12,"ascent","","",3,N],[12,"descent","","",3,N],[12,"line_gap","","",3,N],[3,"FontNameIter","","",N,N],[4,"VertexType","","",N,N],[13,"MoveTo","","",4,N],[13,"LineTo","","",4,N],[13,"CurveTo","","",4,N],[4,"PlatformId","","",N,N],[13,"Unicode","","",5,N],[13,"Mac","","",5,N],[13,"Iso","","",5,N],[13,"Microsoft","","",5,N],[4,"UnicodeEid","","",N,N],[13,"Unicode_1_0","","",6,N],[13,"Unicode_1_1","","",6,N],[13,"Iso_10646","","",6,N],[13,"Unicode_2_0_Bmp","","",6,N],[13,"Unicode_2_0_Full","","",6,N],[4,"MicrosoftEid","","",N,N],[13,"Symbol","","",7,N],[13,"UnicodeBMP","","",7,N],[13,"Shiftjis","","",7,N],[13,"UnicodeFull","","",7,N],[4,"MacEid","","",N,N],[13,"Roman","","",8,N],[13,"Arabic","","",8,N],[13,"Japanese","","",8,N],[13,"Hebrew","","",8,N],[13,"ChineseTrad","","",8,N],[13,"Greek","","",8,N],[13,"Korean","","",8,N],[13,"Russian","","",8,N],[4,"MicrosoftLang","","",N,N],[13,"English","","",9,N],[13,"Italian","","",9,N],[13,"Chinese","","",9,N],[13,"Japanese","","",9,N],[13,"Dutch","","",9,N],[13,"Korean","","",9,N],[13,"French","","",9,N],[13,"Russian","","",9,N],[13,"German","","",9,N],[13,"Hebrew","","",9,N],[13,"Swedish","","",9,N],[4,"MacLang","","",N,N],[13,"English","","",10,N],[13,"Japanese","","",10,N],[13,"Arabic","","",10,N],[13,"Korean","","",10,N],[13,"Dutch","","",10,N],[13,"Russian","","",10,N],[13,"French","","",10,N],[13,"Spanish","","",10,N],[13,"German","","",10,N],[13,"Swedish","","",10,N],[13,"Hebrew","","",10,N],[13,"ChineseSimplified","","",10,N],[13,"Italian","","",10,N],[13,"ChineseTrad","","",10,N],[4,"PlatformEncodingLanguageId","","",N,N],[13,"Unicode","","",11,N],[13,"Mac","","",11,N],[13,"Iso","","",11,N],[13,"Microsoft","","",11,N],[5,"is_font","","Return `true` if `data` holds a font stored in a format this crate recognizes, according to its signature in the initial bytes.",N,N],[5,"is_collection","","Return `true` if `data` holds a TrueType Collection, according to its signature in the initial bytes. A TrueType Collection stores several fonts in a single file, allowing them to share data for glyphs they have in common.",N,N],[5,"get_font_offset_for_index","","Each .ttf/.ttc file may have more than one font. Each font has a sequential index number starting from 0. Call this function to get the font offset for a given index; it returns None if the index is out of range. A regular .ttf file will only define one font and it always be at offset 0, so it will return Some(0) for index 0, and None for all other indices. You can just skip this step if you know it's that kind of font.",N,N],[11,"clone","","",12,[[["self"]],["fontinfo"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["vertex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"vertex_type","","",0,[[["self"]],["vertextype"]]],[11,"clone","","",4,[[["self"]],["vertextype"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["vertextype"]],["bool"]]],[11,"clone","","",1,[[["self"]],["rect"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["hmetrics"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["vmetrics"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["platformid"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["platformid"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["platformid"]],["option",["ordering"]]]],[11,"cmp","","",5,[[["self"],["platformid"]],["ordering"]]],[11,"hash","","",5,N],[11,"clone","","",6,[[["self"]],["unicodeeid"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["unicodeeid"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["unicodeeid"]],["option",["ordering"]]]],[11,"cmp","","",6,[[["self"],["unicodeeid"]],["ordering"]]],[11,"hash","","",6,N],[11,"clone","","",7,[[["self"]],["microsofteid"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["microsofteid"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["microsofteid"]],["option",["ordering"]]]],[11,"cmp","","",7,[[["self"],["microsofteid"]],["ordering"]]],[11,"hash","","",7,N],[11,"clone","","",8,[[["self"]],["maceid"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["maceid"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["maceid"]],["option",["ordering"]]]],[11,"cmp","","",8,[[["self"],["maceid"]],["ordering"]]],[11,"hash","","",8,N],[11,"clone","","",9,[[["self"]],["microsoftlang"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["microsoftlang"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["microsoftlang"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["microsoftlang"]],["ordering"]]],[11,"hash","","",9,N],[11,"clone","","",10,[[["self"]],["maclang"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["maclang"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["maclang"]],["option",["ordering"]]]],[11,"cmp","","",10,[[["self"],["maclang"]],["ordering"]]],[11,"hash","","",10,N],[11,"clone","","",11,[[["self"]],["platformencodinglanguageid"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"ne","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["platformencodinglanguageid"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"le","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"gt","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"ge","","",11,[[["self"],["platformencodinglanguageid"]],["bool"]]],[11,"cmp","","",11,[[["self"],["platformencodinglanguageid"]],["ordering"]]],[11,"hash","","",11,N],[11,"new","","Given an offset into the file that defines a font, this function builds the necessary cached info for the rest of the system.",12,[[["data"],["usize"]],["option",["fontinfo"]]]],[11,"get_num_glyphs","","",12,[[["self"]],["u32"]]],[11,"find_glyph_index","","If you're going to perform multiple operations on the same character and you want a speed-up, call this function with the character you're going to process, then use glyph-based functions instead of the codepoint-based functions.",12,[[["self"],["u32"]],["u32"]]],[11,"get_codepoint_shape","","Returns the series of vertices encoding the shape of the glyph for this codepoint.",12,[[["self"],["u32"]],["option",["vec"]]]],[11,"get_glyph_box","","Like `get_codepoint_box`, but takes a glyph index. Use this if you have cached the glyph index for a codepoint.",12,[[["self"],["u32"]],["option",["rect"]]]],[11,"get_codepoint_box","","Gets the bounding box of the visible part of the glyph, in unscaled coordinates",12,[[["self"],["u32"]],["option",["rect"]]]],[11,"is_glyph_empty","","returns true if nothing is drawn for this glyph",12,[[["self"],["u32"]],["bool"]]],[11,"get_glyph_shape","","Like `get_codepoint_shape`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",12,[[["self"],["u32"]],["option",["vec"]]]],[11,"get_glyph_h_metrics","","like `get_codepoint_h_metrics`, but takes a glyph index instead. Use this if you have cached the glyph index for a codepoint.",12,[[["self"],["u32"]],["hmetrics"]]],[11,"get_glyph_kern_advance","","like `get_codepoint_kern_advance`, but takes glyph indices instead. Use this if you have cached the glyph indices for the codepoints.",12,[[["self"],["u32"],["u32"]],["i32"]]],[11,"get_codepoint_kern_advance","","an additional amount to add to the 'advance' value between cp1 and cp2",12,[[["self"],["u32"],["u32"]],["i32"]]],[11,"get_codepoint_h_metrics","","`left_side_bearing` is the offset from the current horizontal position to the left edge of the character `advance_width` is the offset from the current horizontal position to the next horizontal position these are expressed in unscaled coordinates",12,[[["self"],["u32"]],["hmetrics"]]],[11,"get_v_metrics","","`ascent` is the coordinate above the baseline the font extends; descent is the coordinate below the baseline the font extends (i.e. it is typically negative) `line_gap` is the spacing between one row's descent and the next row's ascent... so you should advance the vertical position by `ascent - descent + line_gap` these are expressed in unscaled coordinates, so you must multiply by the scale factor for a given size",12,[[["self"]],["vmetrics"]]],[11,"get_bounding_box","","the bounding box around all possible characters",12,[[["self"]],["rect",["i16"]]]],[11,"scale_for_pixel_height","","computes a scale factor to produce a font whose \"height\" is 'pixels' tall. Height is measured as the distance from the highest ascender to the lowest descender; in other words, it's equivalent to calling GetFontVMetrics and computing:       scale = pixels / (ascent - descent) so if you prefer to measure height by the ascent only, use a similar calculation.",12,[[["self"],["f32"]],["f32"]]],[11,"units_per_em","","Returns the units per EM square of this font.",12,[[["self"]],["u16"]]],[11,"scale_for_mapping_em_to_pixels","","computes a scale factor to produce a font whose EM size is mapped to `pixels` tall. This is probably what traditional APIs compute, but I'm not positive.",12,[[["self"],["f32"]],["f32"]]],[11,"get_glyph_bitmap_box_subpixel","","like `get_codepoint_bitmap_box_subpixel`, but takes a glyph index instead of a codepoint.",12,[[["self"],["u32"],["f32"],["f32"],["f32"],["f32"]],["option",["rect"]]]],[11,"get_glyph_bitmap_box","","like `get_codepoint_bitmap_box`, but takes a glyph index instead of a codepoint.",12,[[["self"],["u32"],["f32"],["f32"]],["option",["rect"]]]],[11,"get_codepoint_bitmap_box_subpixel","","same as get_codepoint_bitmap_box, but you can specify a subpixel shift for the character",12,[[["self"],["u32"],["f32"],["f32"],["f32"],["f32"]],["option",["rect"]]]],[11,"get_codepoint_bitmap_box","","get the bounding box of the bitmap centered around the glyph origin; so the bitmap width is x1-x0, height is y1-y0, and location to place the bitmap top left is (left_side_bearing*scale, y0). (Note that the bitmap uses y-increases-down, but the shape uses y-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)",12,[[["self"],["u32"],["f32"],["f32"]],["option",["rect"]]]],[11,"get_font_name_strings","","",12,[[["self"]],["fontnameiter"]]],[11,"clone","","",13,[[["self"]],["fontnameiter"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"count","","",13,[[["self"]],["usize"]]],[11,"last","","",13,[[["self"]],["option"]]],[11,"nth","","",13,[[["self"],["usize"]],["option"]]]],"paths":[[3,"Vertex"],[3,"Rect"],[3,"HMetrics"],[3,"VMetrics"],[4,"VertexType"],[4,"PlatformId"],[4,"UnicodeEid"],[4,"MicrosoftEid"],[4,"MacEid"],[4,"MicrosoftLang"],[4,"MacLang"],[4,"PlatformEncodingLanguageId"],[3,"FontInfo"],[3,"FontNameIter"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"lifetimes","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",56,N],[12,"1","","",56,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",58,N],[12,"eq_token","","",58,N],[12,"ty","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Catch","","A catch expression: `do catch { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"0","","",87,N],[3,"Apostrophe","","`'`",N,N],[12,"0","","",88,N],[3,"Add","","`+`",N,N],[12,"0","","",89,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",90,N],[3,"And","","`&`",N,N],[12,"0","","",91,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",92,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",93,N],[3,"At","","`@`",N,N],[12,"0","","",94,N],[3,"Bang","","`!`",N,N],[12,"0","","",95,N],[3,"Caret","","`^`",N,N],[12,"0","","",96,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",97,N],[3,"Colon","","`:`",N,N],[12,"0","","",98,N],[3,"Colon2","","`::`",N,N],[12,"0","","",99,N],[3,"Comma","","`,`",N,N],[12,"0","","",100,N],[3,"Div","","`/`",N,N],[12,"0","","",101,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",102,N],[3,"Dollar","","`$`",N,N],[12,"0","","",103,N],[3,"Dot","","`.`",N,N],[12,"0","","",104,N],[3,"Dot2","","`..`",N,N],[12,"0","","",105,N],[3,"Dot3","","`...`",N,N],[12,"0","","",106,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",107,N],[3,"Eq","","`=`",N,N],[12,"0","","",108,N],[3,"EqEq","","`==`",N,N],[12,"0","","",109,N],[3,"Ge","","`>=`",N,N],[12,"0","","",110,N],[3,"Gt","","`>`",N,N],[12,"0","","",111,N],[3,"Le","","`<=`",N,N],[12,"0","","",112,N],[3,"Lt","","`<`",N,N],[12,"0","","",113,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",114,N],[3,"Ne","","`!=`",N,N],[12,"0","","",115,N],[3,"Or","","`|`",N,N],[12,"0","","",116,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",117,N],[3,"OrOr","","`||`",N,N],[12,"0","","",118,N],[3,"Pound","","`#`",N,N],[12,"0","","",119,N],[3,"Question","","`?`",N,N],[12,"0","","",120,N],[3,"RArrow","","`->`",N,N],[12,"0","","",121,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",122,N],[3,"Rem","","`%`",N,N],[12,"0","","",123,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",124,N],[3,"FatArrow","","`=>`",N,N],[12,"0","","",125,N],[3,"Semi","","`;`",N,N],[12,"0","","",126,N],[3,"Shl","","`<<`",N,N],[12,"0","","",127,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",128,N],[3,"Shr","","`>>`",N,N],[12,"0","","",129,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",130,N],[3,"Star","","`*`",N,N],[12,"0","","",131,N],[3,"Sub","","`-`",N,N],[12,"0","","",132,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",133,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",134,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",135,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",136,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",137,N],[3,"As","","`as`",N,N],[12,"0","","",138,N],[3,"Async","","`async`",N,N],[12,"0","","",139,N],[3,"Auto","","`auto`",N,N],[12,"0","","",140,N],[3,"Box","","`box`",N,N],[12,"0","","",141,N],[3,"Break","","`break`",N,N],[12,"0","","",142,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",143,N],[3,"Catch","","`catch`",N,N],[12,"0","","",144,N],[3,"Const","","`const`",N,N],[12,"0","","",145,N],[3,"Continue","","`continue`",N,N],[12,"0","","",146,N],[3,"Crate","","`crate`",N,N],[12,"0","","",147,N],[3,"Default","","`default`",N,N],[12,"0","","",148,N],[3,"Do","","`do`",N,N],[12,"0","","",149,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",150,N],[3,"Else","","`else`",N,N],[12,"0","","",151,N],[3,"Enum","","`enum`",N,N],[12,"0","","",152,N],[3,"Extern","","`extern`",N,N],[12,"0","","",153,N],[3,"Fn","","`fn`",N,N],[12,"0","","",154,N],[3,"For","","`for`",N,N],[12,"0","","",155,N],[3,"If","","`if`",N,N],[12,"0","","",156,N],[3,"Impl","","`impl`",N,N],[12,"0","","",157,N],[3,"In","","`in`",N,N],[12,"0","","",158,N],[3,"Let","","`let`",N,N],[12,"0","","",159,N],[3,"Loop","","`loop`",N,N],[12,"0","","",160,N],[3,"Macro","","`macro`",N,N],[12,"0","","",161,N],[3,"Match","","`match`",N,N],[12,"0","","",162,N],[3,"Mod","","`mod`",N,N],[12,"0","","",163,N],[3,"Move","","`move`",N,N],[12,"0","","",164,N],[3,"Mut","","`mut`",N,N],[12,"0","","",165,N],[3,"Pub","","`pub`",N,N],[12,"0","","",166,N],[3,"Ref","","`ref`",N,N],[12,"0","","",167,N],[3,"Return","","`return`",N,N],[12,"0","","",168,N],[3,"Self_","","`self`",N,N],[12,"0","","",169,N],[3,"Static","","`static`",N,N],[12,"0","","",170,N],[3,"Struct","","`struct`",N,N],[12,"0","","",171,N],[3,"Super","","`super`",N,N],[12,"0","","",172,N],[3,"Trait","","`trait`",N,N],[12,"0","","",173,N],[3,"Type","","`type`",N,N],[12,"0","","",174,N],[3,"Union","","`union`",N,N],[12,"0","","",175,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",176,N],[3,"Use","","`use`",N,N],[12,"0","","",177,N],[3,"Where","","`where`",N,N],[12,"0","","",178,N],[3,"While","","`while`",N,N],[12,"0","","",179,N],[3,"Yield","","`yield`",N,N],[12,"0","","",180,N],[11,"clone","","",87,[[["self"]],["underscore"]]],[11,"new","","",87,[[["span"]],["self"]]],[11,"default","","",87,[[],["self"]]],[11,"from","","",87,[[["span"]],["self"]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"parse","","",87,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"clone","","",88,[[["self"]],["apostrophe"]]],[11,"new","","",88,[[["span"]],["self"]]],[11,"default","","",88,[[],["self"]]],[11,"from","","",88,[[["span"]],["self"]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"parse","","",88,[[["cursor"]],["presult",["apostrophe"]]]],[11,"description","","",88,[[],["option",["str"]]]],[11,"clone","","",89,[[["self"]],["add"]]],[11,"new","","",89,[[["span"]],["self"]]],[11,"default","","",89,[[],["self"]]],[11,"from","","",89,[[["span"]],["self"]]],[11,"clone","","",90,[[["self"]],["addeq"]]],[11,"new","","",90,[[["span"]],["self"]]],[11,"default","","",90,[[],["self"]]],[11,"from","","",90,[[["span"]],["self"]]],[11,"clone","","",91,[[["self"]],["and"]]],[11,"new","","",91,[[["span"]],["self"]]],[11,"default","","",91,[[],["self"]]],[11,"from","","",91,[[["span"]],["self"]]],[11,"clone","","",92,[[["self"]],["andand"]]],[11,"new","","",92,[[["span"]],["self"]]],[11,"default","","",92,[[],["self"]]],[11,"from","","",92,[[["span"]],["self"]]],[11,"clone","","",93,[[["self"]],["andeq"]]],[11,"new","","",93,[[["span"]],["self"]]],[11,"default","","",93,[[],["self"]]],[11,"from","","",93,[[["span"]],["self"]]],[11,"clone","","",94,[[["self"]],["at"]]],[11,"new","","",94,[[["span"]],["self"]]],[11,"default","","",94,[[],["self"]]],[11,"from","","",94,[[["span"]],["self"]]],[11,"clone","","",95,[[["self"]],["bang"]]],[11,"new","","",95,[[["span"]],["self"]]],[11,"default","","",95,[[],["self"]]],[11,"from","","",95,[[["span"]],["self"]]],[11,"clone","","",96,[[["self"]],["caret"]]],[11,"new","","",96,[[["span"]],["self"]]],[11,"default","","",96,[[],["self"]]],[11,"from","","",96,[[["span"]],["self"]]],[11,"clone","","",97,[[["self"]],["careteq"]]],[11,"new","","",97,[[["span"]],["self"]]],[11,"default","","",97,[[],["self"]]],[11,"from","","",97,[[["span"]],["self"]]],[11,"clone","","",98,[[["self"]],["colon"]]],[11,"new","","",98,[[["span"]],["self"]]],[11,"default","","",98,[[],["self"]]],[11,"from","","",98,[[["span"]],["self"]]],[11,"clone","","",99,[[["self"]],["colon2"]]],[11,"new","","",99,[[["span"]],["self"]]],[11,"default","","",99,[[],["self"]]],[11,"from","","",99,[[["span"]],["self"]]],[11,"clone","","",100,[[["self"]],["comma"]]],[11,"new","","",100,[[["span"]],["self"]]],[11,"default","","",100,[[],["self"]]],[11,"from","","",100,[[["span"]],["self"]]],[11,"clone","","",101,[[["self"]],["div"]]],[11,"new","","",101,[[["span"]],["self"]]],[11,"default","","",101,[[],["self"]]],[11,"from","","",101,[[["span"]],["self"]]],[11,"clone","","",102,[[["self"]],["diveq"]]],[11,"new","","",102,[[["span"]],["self"]]],[11,"default","","",102,[[],["self"]]],[11,"from","","",102,[[["span"]],["self"]]],[11,"clone","","",103,[[["self"]],["dollar"]]],[11,"new","","",103,[[["span"]],["self"]]],[11,"default","","",103,[[],["self"]]],[11,"from","","",103,[[["span"]],["self"]]],[11,"clone","","",104,[[["self"]],["dot"]]],[11,"new","","",104,[[["span"]],["self"]]],[11,"default","","",104,[[],["self"]]],[11,"from","","",104,[[["span"]],["self"]]],[11,"clone","","",105,[[["self"]],["dot2"]]],[11,"new","","",105,[[["span"]],["self"]]],[11,"default","","",105,[[],["self"]]],[11,"from","","",105,[[["span"]],["self"]]],[11,"clone","","",106,[[["self"]],["dot3"]]],[11,"new","","",106,[[["span"]],["self"]]],[11,"default","","",106,[[],["self"]]],[11,"from","","",106,[[["span"]],["self"]]],[11,"clone","","",107,[[["self"]],["dotdoteq"]]],[11,"new","","",107,[[["span"]],["self"]]],[11,"default","","",107,[[],["self"]]],[11,"from","","",107,[[["span"]],["self"]]],[11,"clone","","",108,[[["self"]],["eq"]]],[11,"new","","",108,[[["span"]],["self"]]],[11,"default","","",108,[[],["self"]]],[11,"from","","",108,[[["span"]],["self"]]],[11,"clone","","",109,[[["self"]],["eqeq"]]],[11,"new","","",109,[[["span"]],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"from","","",109,[[["span"]],["self"]]],[11,"clone","","",110,[[["self"]],["ge"]]],[11,"new","","",110,[[["span"]],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"from","","",110,[[["span"]],["self"]]],[11,"clone","","",111,[[["self"]],["gt"]]],[11,"new","","",111,[[["span"]],["self"]]],[11,"default","","",111,[[],["self"]]],[11,"from","","",111,[[["span"]],["self"]]],[11,"clone","","",112,[[["self"]],["le"]]],[11,"new","","",112,[[["span"]],["self"]]],[11,"default","","",112,[[],["self"]]],[11,"from","","",112,[[["span"]],["self"]]],[11,"clone","","",113,[[["self"]],["lt"]]],[11,"new","","",113,[[["span"]],["self"]]],[11,"default","","",113,[[],["self"]]],[11,"from","","",113,[[["span"]],["self"]]],[11,"clone","","",114,[[["self"]],["muleq"]]],[11,"new","","",114,[[["span"]],["self"]]],[11,"default","","",114,[[],["self"]]],[11,"from","","",114,[[["span"]],["self"]]],[11,"clone","","",115,[[["self"]],["ne"]]],[11,"new","","",115,[[["span"]],["self"]]],[11,"default","","",115,[[],["self"]]],[11,"from","","",115,[[["span"]],["self"]]],[11,"clone","","",116,[[["self"]],["or"]]],[11,"new","","",116,[[["span"]],["self"]]],[11,"default","","",116,[[],["self"]]],[11,"from","","",116,[[["span"]],["self"]]],[11,"clone","","",117,[[["self"]],["oreq"]]],[11,"new","","",117,[[["span"]],["self"]]],[11,"default","","",117,[[],["self"]]],[11,"from","","",117,[[["span"]],["self"]]],[11,"clone","","",118,[[["self"]],["oror"]]],[11,"new","","",118,[[["span"]],["self"]]],[11,"default","","",118,[[],["self"]]],[11,"from","","",118,[[["span"]],["self"]]],[11,"clone","","",119,[[["self"]],["pound"]]],[11,"new","","",119,[[["span"]],["self"]]],[11,"default","","",119,[[],["self"]]],[11,"from","","",119,[[["span"]],["self"]]],[11,"clone","","",120,[[["self"]],["question"]]],[11,"new","","",120,[[["span"]],["self"]]],[11,"default","","",120,[[],["self"]]],[11,"from","","",120,[[["span"]],["self"]]],[11,"clone","","",121,[[["self"]],["rarrow"]]],[11,"new","","",121,[[["span"]],["self"]]],[11,"default","","",121,[[],["self"]]],[11,"from","","",121,[[["span"]],["self"]]],[11,"clone","","",122,[[["self"]],["larrow"]]],[11,"new","","",122,[[["span"]],["self"]]],[11,"default","","",122,[[],["self"]]],[11,"from","","",122,[[["span"]],["self"]]],[11,"clone","","",123,[[["self"]],["rem"]]],[11,"new","","",123,[[["span"]],["self"]]],[11,"default","","",123,[[],["self"]]],[11,"from","","",123,[[["span"]],["self"]]],[11,"clone","","",124,[[["self"]],["remeq"]]],[11,"new","","",124,[[["span"]],["self"]]],[11,"default","","",124,[[],["self"]]],[11,"from","","",124,[[["span"]],["self"]]],[11,"clone","","",125,[[["self"]],["fatarrow"]]],[11,"new","","",125,[[["span"]],["self"]]],[11,"default","","",125,[[],["self"]]],[11,"from","","",125,[[["span"]],["self"]]],[11,"clone","","",126,[[["self"]],["semi"]]],[11,"new","","",126,[[["span"]],["self"]]],[11,"default","","",126,[[],["self"]]],[11,"from","","",126,[[["span"]],["self"]]],[11,"clone","","",127,[[["self"]],["shl"]]],[11,"new","","",127,[[["span"]],["self"]]],[11,"default","","",127,[[],["self"]]],[11,"from","","",127,[[["span"]],["self"]]],[11,"clone","","",128,[[["self"]],["shleq"]]],[11,"new","","",128,[[["span"]],["self"]]],[11,"default","","",128,[[],["self"]]],[11,"from","","",128,[[["span"]],["self"]]],[11,"clone","","",129,[[["self"]],["shr"]]],[11,"new","","",129,[[["span"]],["self"]]],[11,"default","","",129,[[],["self"]]],[11,"from","","",129,[[["span"]],["self"]]],[11,"clone","","",130,[[["self"]],["shreq"]]],[11,"new","","",130,[[["span"]],["self"]]],[11,"default","","",130,[[],["self"]]],[11,"from","","",130,[[["span"]],["self"]]],[11,"clone","","",131,[[["self"]],["star"]]],[11,"new","","",131,[[["span"]],["self"]]],[11,"default","","",131,[[],["self"]]],[11,"from","","",131,[[["span"]],["self"]]],[11,"clone","","",132,[[["self"]],["sub"]]],[11,"new","","",132,[[["span"]],["self"]]],[11,"default","","",132,[[],["self"]]],[11,"from","","",132,[[["span"]],["self"]]],[11,"clone","","",133,[[["self"]],["subeq"]]],[11,"new","","",133,[[["span"]],["self"]]],[11,"default","","",133,[[],["self"]]],[11,"from","","",133,[[["span"]],["self"]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"parse","","",89,[[["cursor"]],["presult",["add"]]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"parse","","",90,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"parse","","",91,[[["cursor"]],["presult",["and"]]]],[11,"description","","",91,[[],["option",["str"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"parse","","",92,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",92,[[],["option",["str"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"parse","","",93,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",93,[[],["option",["str"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"parse","","",94,[[["cursor"]],["presult",["at"]]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"parse","","",95,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"parse","","",96,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"parse","","",97,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"parse","","",98,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"parse","","",99,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"parse","","",100,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"parse","","",101,[[["cursor"]],["presult",["div"]]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"parse","","",102,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"parse","","",103,[[["cursor"]],["presult",["dollar"]]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"parse","","",104,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"parse","","",105,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"parse","","",106,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"parse","","",107,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"parse","","",108,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"parse","","",109,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",109,[[],["option",["str"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"parse","","",110,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",110,[[],["option",["str"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"parse","","",111,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"parse","","",112,[[["cursor"]],["presult",["le"]]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"parse","","",113,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"parse","","",114,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"parse","","",115,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",115,[[],["option",["str"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"parse","","",116,[[["cursor"]],["presult",["or"]]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"parse","","",117,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"parse","","",118,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"parse","","",119,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"parse","","",120,[[["cursor"]],["presult",["question"]]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"parse","","",122,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"parse","","",123,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"parse","","",124,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",124,[[],["option",["str"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["cursor"]],["presult",["fatarrow"]]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"parse","","",126,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",126,[[],["option",["str"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"parse","","",127,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",127,[[],["option",["str"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"parse","","",128,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",128,[[],["option",["str"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"parse","","",129,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"parse","","",130,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"parse","","",131,[[["cursor"]],["presult",["star"]]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"parse","","",132,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"parse","","",133,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"clone","","",134,[[["self"]],["brace"]]],[11,"default","","",134,[[],["self"]]],[11,"surround","","",134,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",134,[[["cursor"],["f"]],["presult"]]],[11,"from","","",134,[[["span"]],["self"]]],[11,"clone","","",135,[[["self"]],["bracket"]]],[11,"default","","",135,[[],["self"]]],[11,"surround","","",135,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",135,[[["cursor"],["f"]],["presult"]]],[11,"from","","",135,[[["span"]],["self"]]],[11,"clone","","",136,[[["self"]],["paren"]]],[11,"default","","",136,[[],["self"]]],[11,"surround","","",136,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",136,[[["cursor"],["f"]],["presult"]]],[11,"from","","",136,[[["span"]],["self"]]],[11,"clone","","",137,[[["self"]],["group"]]],[11,"default","","",137,[[],["self"]]],[11,"surround","","",137,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",137,[[["cursor"],["f"]],["presult"]]],[11,"from","","",137,[[["span"]],["self"]]],[11,"clone","","",138,[[["self"]],["as"]]],[11,"default","","",138,[[],["self"]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"parse","","",138,[[["cursor"]],["presult",["as"]]]],[11,"description","","",138,[[],["option",["str"]]]],[11,"from","","",138,[[["span"]],["self"]]],[11,"clone","","",139,[[["self"]],["async"]]],[11,"default","","",139,[[],["self"]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"parse","","",139,[[["cursor"]],["presult",["async"]]]],[11,"description","","",139,[[],["option",["str"]]]],[11,"from","","",139,[[["span"]],["self"]]],[11,"clone","","",140,[[["self"]],["auto"]]],[11,"default","","",140,[[],["self"]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"parse","","",140,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",140,[[],["option",["str"]]]],[11,"from","","",140,[[["span"]],["self"]]],[11,"clone","","",141,[[["self"]],["box"]]],[11,"default","","",141,[[],["self"]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"parse","","",141,[[["cursor"]],["presult",["box"]]]],[11,"description","","",141,[[],["option",["str"]]]],[11,"from","","",141,[[["span"]],["self"]]],[11,"clone","","",142,[[["self"]],["break"]]],[11,"default","","",142,[[],["self"]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"parse","","",142,[[["cursor"]],["presult",["break"]]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"from","","",142,[[["span"]],["self"]]],[11,"clone","","",143,[[["self"]],["capself"]]],[11,"default","","",143,[[],["self"]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"parse","","",143,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"from","","",143,[[["span"]],["self"]]],[11,"clone","","",144,[[["self"]],["catch"]]],[11,"default","","",144,[[],["self"]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"parse","","",144,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"from","","",144,[[["span"]],["self"]]],[11,"clone","","",145,[[["self"]],["const"]]],[11,"default","","",145,[[],["self"]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"parse","","",145,[[["cursor"]],["presult",["const"]]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"from","","",145,[[["span"]],["self"]]],[11,"clone","","",146,[[["self"]],["continue"]]],[11,"default","","",146,[[],["self"]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"parse","","",146,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",146,[[],["option",["str"]]]],[11,"from","","",146,[[["span"]],["self"]]],[11,"clone","","",147,[[["self"]],["crate"]]],[11,"default","","",147,[[],["self"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"parse","","",147,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",147,[[],["option",["str"]]]],[11,"from","","",147,[[["span"]],["self"]]],[11,"clone","","",148,[[["self"]],["default"]]],[11,"default","","",148,[[],["self"]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"parse","","",148,[[["cursor"]],["presult",["default"]]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"from","","",148,[[["span"]],["self"]]],[11,"clone","","",149,[[["self"]],["do"]]],[11,"default","","",149,[[],["self"]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"parse","","",149,[[["cursor"]],["presult",["do"]]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"from","","",149,[[["span"]],["self"]]],[11,"clone","","",150,[[["self"]],["dyn"]]],[11,"default","","",150,[[],["self"]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"parse","","",150,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"from","","",150,[[["span"]],["self"]]],[11,"clone","","",151,[[["self"]],["else"]]],[11,"default","","",151,[[],["self"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"parse","","",151,[[["cursor"]],["presult",["else"]]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"from","","",151,[[["span"]],["self"]]],[11,"clone","","",152,[[["self"]],["enum"]]],[11,"default","","",152,[[],["self"]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"parse","","",152,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"from","","",152,[[["span"]],["self"]]],[11,"clone","","",153,[[["self"]],["extern"]]],[11,"default","","",153,[[],["self"]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"parse","","",153,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",153,[[],["option",["str"]]]],[11,"from","","",153,[[["span"]],["self"]]],[11,"clone","","",154,[[["self"]],["fn"]]],[11,"default","","",154,[[],["self"]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"parse","","",154,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",154,[[],["option",["str"]]]],[11,"from","","",154,[[["span"]],["self"]]],[11,"clone","","",155,[[["self"]],["for"]]],[11,"default","","",155,[[],["self"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"parse","","",155,[[["cursor"]],["presult",["for"]]]],[11,"description","","",155,[[],["option",["str"]]]],[11,"from","","",155,[[["span"]],["self"]]],[11,"clone","","",156,[[["self"]],["if"]]],[11,"default","","",156,[[],["self"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",156,[[["cursor"]],["presult",["if"]]]],[11,"description","","",156,[[],["option",["str"]]]],[11,"from","","",156,[[["span"]],["self"]]],[11,"clone","","",157,[[["self"]],["impl"]]],[11,"default","","",157,[[],["self"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"parse","","",157,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",157,[[],["option",["str"]]]],[11,"from","","",157,[[["span"]],["self"]]],[11,"clone","","",158,[[["self"]],["in"]]],[11,"default","","",158,[[],["self"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",158,[[["cursor"]],["presult",["in"]]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"from","","",158,[[["span"]],["self"]]],[11,"clone","","",159,[[["self"]],["let"]]],[11,"default","","",159,[[],["self"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["cursor"]],["presult",["let"]]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"from","","",159,[[["span"]],["self"]]],[11,"clone","","",160,[[["self"]],["loop"]]],[11,"default","","",160,[[],["self"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",160,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"from","","",160,[[["span"]],["self"]]],[11,"clone","","",161,[[["self"]],["macro"]]],[11,"default","","",161,[[],["self"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"parse","","",161,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"from","","",161,[[["span"]],["self"]]],[11,"clone","","",162,[[["self"]],["match"]]],[11,"default","","",162,[[],["self"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",162,[[["cursor"]],["presult",["match"]]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"from","","",162,[[["span"]],["self"]]],[11,"clone","","",163,[[["self"]],["mod"]]],[11,"default","","",163,[[],["self"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"from","","",163,[[["span"]],["self"]]],[11,"clone","","",164,[[["self"]],["move"]]],[11,"default","","",164,[[],["self"]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"parse","","",164,[[["cursor"]],["presult",["move"]]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"from","","",164,[[["span"]],["self"]]],[11,"clone","","",165,[[["self"]],["mut"]]],[11,"default","","",165,[[],["self"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"parse","","",165,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"from","","",165,[[["span"]],["self"]]],[11,"clone","","",166,[[["self"]],["pub"]]],[11,"default","","",166,[[],["self"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"parse","","",166,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"from","","",166,[[["span"]],["self"]]],[11,"clone","","",167,[[["self"]],["ref"]]],[11,"default","","",167,[[],["self"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"parse","","",167,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"from","","",167,[[["span"]],["self"]]],[11,"clone","","",168,[[["self"]],["return"]]],[11,"default","","",168,[[],["self"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",168,[[["cursor"]],["presult",["return"]]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"from","","",168,[[["span"]],["self"]]],[11,"clone","","",169,[[["self"]],["self_"]]],[11,"default","","",169,[[],["self"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",169,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"from","","",169,[[["span"]],["self"]]],[11,"clone","","",170,[[["self"]],["static"]]],[11,"default","","",170,[[],["self"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"parse","","",170,[[["cursor"]],["presult",["static"]]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"from","","",170,[[["span"]],["self"]]],[11,"clone","","",171,[[["self"]],["struct"]]],[11,"default","","",171,[[],["self"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"parse","","",171,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"from","","",171,[[["span"]],["self"]]],[11,"clone","","",172,[[["self"]],["super"]]],[11,"default","","",172,[[],["self"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["cursor"]],["presult",["super"]]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"from","","",172,[[["span"]],["self"]]],[11,"clone","","",173,[[["self"]],["trait"]]],[11,"default","","",173,[[],["self"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",173,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"from","","",173,[[["span"]],["self"]]],[11,"clone","","",174,[[["self"]],["type"]]],[11,"default","","",174,[[],["self"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"parse","","",174,[[["cursor"]],["presult",["type"]]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"from","","",174,[[["span"]],["self"]]],[11,"clone","","",175,[[["self"]],["union"]]],[11,"default","","",175,[[],["self"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"parse","","",175,[[["cursor"]],["presult",["union"]]]],[11,"description","","",175,[[],["option",["str"]]]],[11,"from","","",175,[[["span"]],["self"]]],[11,"clone","","",176,[[["self"]],["unsafe"]]],[11,"default","","",176,[[],["self"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",176,[[],["option",["str"]]]],[11,"from","","",176,[[["span"]],["self"]]],[11,"clone","","",177,[[["self"]],["use"]]],[11,"default","","",177,[[],["self"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"parse","","",177,[[["cursor"]],["presult",["use"]]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"from","","",177,[[["span"]],["self"]]],[11,"clone","","",178,[[["self"]],["where"]]],[11,"default","","",178,[[],["self"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"parse","","",178,[[["cursor"]],["presult",["where"]]]],[11,"description","","",178,[[],["option",["str"]]]],[11,"from","","",178,[[["span"]],["self"]]],[11,"clone","","",179,[[["self"]],["while"]]],[11,"default","","",179,[[],["self"]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"parse","","",179,[[["cursor"]],["presult",["while"]]]],[11,"description","","",179,[[],["option",["str"]]]],[11,"from","","",179,[[["span"]],["self"]]],[11,"clone","","",180,[[["self"]],["yield"]]],[11,"default","","",180,[[],["self"]]],[11,"to_tokens","","",180,[[["self"],["tokenstream"]]]],[11,"parse","","",180,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",180,[[],["option",["str"]]]],[11,"from","","",180,[[["span"]],["self"]]],[11,"from","syn","",181,[[["self_"]],["ident"]]],[11,"from","","",181,[[["capself"]],["ident"]]],[11,"from","","",181,[[["super"]],["ident"]]],[11,"from","","",181,[[["crate"]],["ident"]]],[11,"from","","",181,[[["extern"]],["ident"]]],[11,"parse_inner","","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"parse","","",67,[[["cursor"]],["presult"]]],[11,"description","","",67,[[],["option",["str"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["itermut",["field"]]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"parse","","",68,[[["cursor"]],["presult"]]],[11,"description","","",68,[[],["option",["str"]]]],[11,"parse","","",15,[[["cursor"]],["presult"]]],[11,"description","","",15,[[],["option",["str"]]]],[11,"parse","","",16,[[["cursor"]],["presult"]]],[11,"description","","",16,[[],["option",["str"]]]],[11,"parse","","",17,[[["cursor"]],["presult"]]],[11,"description","","",17,[[],["option",["str"]]]],[11,"parse","","",69,[[["cursor"]],["presult"]]],[11,"description","","",69,[[],["option",["str"]]]],[11,"parse","","",20,[[["cursor"]],["presult"]]],[11,"description","","",20,[[],["option",["str"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",182,[[["self"]],["exprbox"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"clone","","",183,[[["self"]],["exprinplace"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"clone","","",184,[[["self"]],["exprarray"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"clone","","",185,[[["self"]],["exprmethodcall"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"clone","","",186,[[["self"]],["exprtuple"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"clone","","",187,[[["self"]],["exprtype"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"clone","","",188,[[["self"]],["exprif"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"clone","","",189,[[["self"]],["expriflet"]]],[11,"from","","",68,[[["expriflet"]],["expr"]]],[11,"clone","","",190,[[["self"]],["exprwhile"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"clone","","",191,[[["self"]],["exprwhilelet"]]],[11,"from","","",68,[[["exprwhilelet"]],["expr"]]],[11,"clone","","",192,[[["self"]],["exprforloop"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"clone","","",193,[[["self"]],["exprloop"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"clone","","",194,[[["self"]],["exprmatch"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"clone","","",195,[[["self"]],["exprclosure"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"clone","","",196,[[["self"]],["exprunsafe"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprblock"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"clone","","",198,[[["self"]],["exprassign"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"clone","","",199,[[["self"]],["exprassignop"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"clone","","",200,[[["self"]],["exprrange"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"clone","","",201,[[["self"]],["exprreference"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprbreak"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"clone","","",203,[[["self"]],["exprcontinue"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"clone","","",204,[[["self"]],["exprreturn"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"clone","","",205,[[["self"]],["exprmacro"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"clone","","",206,[[["self"]],["exprstruct"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"clone","","",207,[[["self"]],["exprrepeat"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"clone","","",208,[[["self"]],["exprgroup"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"clone","","",209,[[["self"]],["exprtry"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"clone","","",210,[[["self"]],["exprcatch"]]],[11,"from","","",68,[[["exprcatch"]],["expr"]]],[11,"clone","","",211,[[["self"]],["expryield"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",70,[[["cursor"]],["presult"]]],[11,"description","","",70,[[],["option",["str"]]]],[11,"parse","","",24,[[["cursor"]],["presult"]]],[11,"description","","",24,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",72,[[["cursor"]],["presult"]]],[11,"description","","",72,[[],["option",["str"]]]],[11,"parse","","",28,[[["cursor"]],["presult"]]],[11,"description","","",28,[[],["option",["str"]]]],[11,"parse","","",71,[[["cursor"]],["presult"]]],[11,"description","","",71,[[],["option",["str"]]]],[11,"parse","","",22,[[["cursor"]],["presult"]]],[11,"description","","",22,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"default","","",23,[[],["generics"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"clone","","",212,[[["self"]],["implgenerics"]]],[11,"clone","","",213,[[["self"]],["typegenerics"]]],[11,"clone","","",214,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",213,[[["self"]],["turbofish"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"new","","",31,[[["str"],["span"]],["self"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"parse","","",76,[[["cursor"]],["presult"]]],[11,"description","","",76,[[],["option",["str"]]]],[11,"parse","","",215,[[["cursor"]],["presult"]]],[11,"description","","",215,[[],["option",["str"]]]],[11,"parse","","",216,[[["cursor"]],["presult"]]],[11,"description","","",216,[[],["option",["str"]]]],[11,"parse","","",217,[[["cursor"]],["presult"]]],[11,"description","","",217,[[],["option",["str"]]]],[11,"parse","","",218,[[["cursor"]],["presult"]]],[11,"description","","",218,[[],["option",["str"]]]],[11,"parse","","",219,[[["cursor"]],["presult"]]],[11,"description","","",219,[[],["option",["str"]]]],[11,"parse","","",220,[[["cursor"]],["presult"]]],[11,"description","","",220,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",220,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",215,[[["self"]],["litstr"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"clone","","",216,[[["self"]],["litbytestr"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"clone","","",217,[[["self"]],["litbyte"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"clone","","",218,[[["self"]],["litchar"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"clone","","",219,[[["self"]],["litint"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"clone","","",220,[[["self"]],["litfloat"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"new","","",215,[[["str"],["span"]],["self"]]],[11,"value","","",215,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",215,[[["self"]],["result",["parseerror"]]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"set_span","","",215,[[["self"],["span"]]]],[11,"new","","",216,N],[11,"value","","",216,[[["self"]],["vec",["u8"]]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"set_span","","",216,[[["self"],["span"]]]],[11,"new","","",217,[[["u8"],["span"]],["self"]]],[11,"value","","",217,[[["self"]],["u8"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"set_span","","",217,[[["self"],["span"]]]],[11,"new","","",218,[[["char"],["span"]],["self"]]],[11,"value","","",218,[[["self"]],["char"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"set_span","","",218,[[["self"],["span"]]]],[11,"new","","",219,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",219,[[["self"]],["u64"]]],[11,"suffix","","",219,[[["self"]],["intsuffix"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"set_span","","",219,[[["self"],["span"]]]],[11,"new","","",220,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",220,[[["self"]],["f64"]]],[11,"suffix","","",220,[[["self"]],["floatsuffix"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"set_span","","",220,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"parse_binop","","",80,[[["cursor"]],["presult"]]],[11,"parse","","",81,[[["cursor"]],["presult"]]],[11,"description","","",81,[[],["option",["str"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"parse","","",84,[[["cursor"]],["presult"]]],[11,"description","","",84,[[],["option",["str"]]]],[11,"without_plus","","",84,[[["cursor"]],["presult"]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse","","",41,[[["cursor"]],["presult"]]],[11,"description","","",41,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",42,[[["cursor"]],["presult"]]],[11,"description","","",42,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",46,[[["cursor"]],["presult"]]],[11,"description","","",46,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"without_plus","","",83,[[["cursor"]],["presult"]]],[11,"parse","","",83,[[["cursor"]],["presult"]]],[11,"description","","",83,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"without_plus","","",53,[[["cursor"]],["presult"]]],[11,"parse","","",44,[[["cursor"]],["presult"]]],[11,"description","","",44,[[],["option",["str"]]]],[11,"parse","","",43,[[["cursor"]],["presult"]]],[11,"description","","",43,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",82,[[["cursor"]],["presult"]]],[11,"description","","",82,[[],["option",["str"]]]],[11,"parse","","",39,[[["cursor"]],["presult"]]],[11,"description","","",39,[[],["option",["str"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",85,[[["cursor"]],["presult"]]],[11,"parse","","",57,[[["cursor"]],["presult"]]],[11,"description","","",57,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",61,[[["cursor"]],["presult"]]],[11,"description","","",61,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse_mod_style","","",60,[[["cursor"]],["presult"]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"global","","",60,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["pathtokens"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"default","","",86,[[],["self"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",57,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",58,[[["self"]],["binding"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",221,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",221,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",221,[[["self"]],["cursor"]]],[11,"clone","","",222,[[["self"]],["cursor"]]],[11,"eq","","",222,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",222,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",222,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",222,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",222,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",222,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",222,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",222,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",222,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",222,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",222,[[["self"]],["span"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",223,N],[13,"End","","",223,N],[11,"to_tokens","","",224,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"clone","","",224,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",224,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",224,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",224,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",224,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",224,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",224,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",224,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",224,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",224,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",224,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",224,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",224,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",224,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",224,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",224,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",224,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",224,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",224,[[["self"],["usize"],["t"]]]],[11,"from_iter","","",224,[[["i"]],["self"]]],[11,"extend","","",224,[[["self"],["i"]]]],[11,"from_iter","","",224,[[["i"]],["self"]]],[11,"extend","","",224,[[["self"],["i"]]]],[11,"into_iter","","",224,N],[11,"default","","",224,[[],["self"]]],[11,"next","","",225,[[["self"]],["option"]]],[11,"len","","",225,[[["self"]],["usize"]]],[11,"next","","",226,[[["self"]],["option"]]],[11,"len","","",226,[[["self"]],["usize"]]],[11,"next","","",227,[[["self"]],["option"]]],[11,"len","","",227,[[["self"]],["usize"]]],[11,"next","","",228,[[["self"]],["option"]]],[11,"len","","",228,[[["self"]],["usize"]]],[11,"next","","",229,[[["self"]],["option"]]],[11,"len","","",229,[[["self"]],["usize"]]],[11,"next","","",230,[[["self"]],["option"]]],[11,"len","","",230,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",223,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",223,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",223,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",223,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",223,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",223,N],[11,"index","","",224,N],[11,"index_mut","","",224,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",224,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",224,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",224,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",224,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",224,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",224,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",224,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",224,N],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[0,"ext","","Extension traits that are made available within the `call!` parser.",N,N],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",231,[[["cursor"]],["presult"]]],[11,"parse_any","syn","",181,[[["cursor"]],["presult"]]],[6,"PResult","syn::synom","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",232,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",232,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",233,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",233,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",233,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",233,[[["self"],["str"]],["result",["parseerror"]]]],[11,"parse","syn","",181,[[["cursor"]],["presult"]]],[11,"description","","",181,[[],["option",["str"]]]],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",234,[[["self"]],["span"]]],[11,"fmt","syn::synom","",235,[[["self"],["formatter"]],["result"]]],[11,"description","","",235,[[["self"]],["str"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"custom_keyword","","Parse the given word as a keyword.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",181,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",181,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",181,N],[11,"clone","","",181,[[["self"]],["ident"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",181,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",181,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",181,N],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",181,[[["self"],["t"]],["bool"]]],[11,"eq","","",181,[[["self"],["ident"]],["bool"]]],[11,"to_tokens","","",181,N]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[3,"ParseError"]]};
searchIndex["synom"]={"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",N,N],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,N],[13,"Error","","Parsing failed.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["iresult"]],["bool"]]],[11,"ne","","",0,[[["self"],["iresult"]],["bool"]]],[11,"clone","","",0,[[["self"]],["iresult"]]],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,[[["self"],["str"]],["o"]]],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",N,N],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",N,N],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",N,N],[14,"named","","Define a function from a parser combination.",N,N],[14,"call","","Invoke the given parser function with the passed in arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",N,N],[14,"cond","","Conditionally execute the given parser.",N,N],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",N,N],[14,"preceded","","Parse two things, returning the value of the second.",N,N],[14,"terminated","","Parse two things, returning the value of the first.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"peek","","Parse a value without consuming it from the input data.",N,N],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",N,N],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",N,N],[14,"delimited","","Value surrounded by a pair of delimiters.",N,N],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",N,N]],"paths":[[4,"IResult"]]};
searchIndex["tuple_utils"]={"doc":"A simple set of utility traits for working with tuples","items":[[8,"Append","tuple_utils","Helper trait to allow Appending of tuples",N,N],[16,"Output","","",0,N],[10,"append","","Append T onto the end of the tuple returning a new tuple with the existing elements and T",0,N],[8,"Prepend","","Helper trait to allow Perpending of tuples",N,N],[16,"Output","","",1,N],[10,"prepend","","Append T onto the start of the tuple returning a new tuple with all the elements from shifted over one row and T in the first slot",1,N],[8,"Merge","","Helper trait that allow for merging of tuples",N,N],[16,"Output","","",2,N],[10,"merge","","merge LHS with RHS returning a new tuple that contains the elements of both tuples ordering is preserved such that LHS elements come before RHS elements.",2,N],[8,"Split","","Tries to split a tuple into two tuples if the tuple is odd sized the Right side will contain the extra element",N,N],[16,"Left","","",3,N],[16,"Right","","",3,N],[10,"split","","",3,N]],"paths":[[8,"Append"],[8,"Prepend"],[8,"Merge"],[8,"Split"]]};
searchIndex["unicode_normalization"]={"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",N,N],[3,"Recompositions","","External iterator for a string recomposition's characters.",N,N],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",N,N],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",N,N],[13,"Yes","","The text is definitely normalized.",0,N],[13,"No","","The text is definitely not normalized.",0,N],[13,"Maybe","","The text may be normalized.",0,N],[5,"is_nfc","","Authoritatively check if a string is in NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",N,[[["i"]],["isnormalized"]]],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",N,[[["str"]],["bool"]]],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd","","Authoritatively check if a string is in NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",N,[[["i"]],["isnormalized"]]],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",N,[[["str"]],["bool"]]],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",N,[[["i"]],["isnormalized"]]],[11,"clone","","",1,[[["self"]],["decompositions"]]],[11,"next","","",1,[[["self"]],["option",["char"]]]],[11,"size_hint","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["recompositions"]]],[11,"next","","",2,[[["self"]],["option",["char"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["isnormalized"]],["bool"]]],[11,"next","","",3,[[["self"]],["option",["char"]]]],[0,"char","","Methods for composing and decomposing characters.",N,N],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",N,[[["char"],["f"]]]],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",N,[[["char"],["char"]],["option",["char"]]]],[5,"canonical_combining_class","","",N,[[["char"]],["u8"]]],[5,"is_combining_mark","","",N,[[["char"]],["bool"]]],[17,"UNICODE_VERSION","unicode_normalization","",N,N],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",N,N],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,[[["self"]],["decompositions"]]],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,[[["self"]],["recompositions"]]],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,[[["self"]],["streamsafe"]]]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_segmentation"]={"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",N,N],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",N,N],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",N,N],[3,"UWordBounds","","External iterator for a string's word boundaries.",N,N],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",N,N],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",N,N],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",N,N],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,N],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,N],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,N],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,N],[11,"clone","","",1,[[["self"]],["graphemeindices"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,[[["self"]],["str"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"clone","","",2,[[["self"]],["graphemes"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,[[["self"]],["str"]]],[11,"size_hint","","",2,N],[11,"next","","",2,[[["self"]],["option",["str"]]]],[11,"next_back","","",2,[[["self"]],["option",["str"]]]],[11,"clone","","",3,[[["self"]],["graphemecursor"]]],[11,"eq","","",0,[[["self"],["graphemeincomplete"]],["bool"]]],[11,"ne","","",0,[[["self"],["graphemeincomplete"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,[[["usize"],["usize"],["bool"]],["graphemecursor"]]],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,[[["self"],["usize"]]]],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,[[["self"]],["usize"]]],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,[[["self"],["str"],["usize"]]]],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,[[["self"],["str"],["usize"]],["result",["bool","graphemeincomplete"]]]],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,[[["self"],["str"],["usize"]],["result",["option","graphemeincomplete"]]]],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,[[["self"],["str"],["usize"]],["result",["option","graphemeincomplete"]]]],[11,"next","","",4,[[["self"]],["option",["str"]]]],[11,"next_back","","",4,[[["self"]],["option",["str"]]]],[11,"clone","","",5,[[["self"]],["uwordbounds"]]],[11,"clone","","",6,[[["self"]],["uwordboundindices"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,[[["self"]],["str"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next","","",5,[[["self"]],["option",["str"]]]],[11,"next_back","","",5,[[["self"]],["option",["str"]]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,[[["self"]],["str"]]],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",N,N],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",N,N],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",7,[[["self"],["bool"]],["graphemes"]]],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",7,[[["self"],["bool"]],["graphemeindices"]]],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",7,[[["self"]],["unicodewords"]]],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",7,[[["self"]],["uwordbounds"]]],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",7,[[["self"]],["uwordboundindices"]]]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_width"]={"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",N,N],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",N,N],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",N,N],[10,"width","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]],[10,"width_cjk","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["vec_map"]={"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",N,N],[3,"VacantEntry","","A vacant Entry.",N,N],[3,"OccupiedEntry","","An occupied Entry.",N,N],[3,"Iter","","An iterator over the key-value pairs of a map.",N,N],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",N,N],[3,"Keys","","An iterator over the keys of a map.",N,N],[3,"Values","","An iterator over the values of a map.",N,N],[3,"ValuesMut","","An iterator over the values of a map.",N,N],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",N,N],[3,"Drain","","A draining iterator over the key-value pairs of a map.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant Entry",0,N],[13,"Occupied","","An occupied Entry",0,N],[11,"default","","",1,[[],["self"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"new","","Creates an empty `VecMap`.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Trims the `VecMap` of any excess capacity.",1,[[["self"]]]],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,[[["self"]],["keys"]]],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,[[["self"]],["values"]]],[11,"values_mut","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r mut V`.",1,[[["self"]],["valuesmut"]]],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,[[["self"]],["itermut"]]],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,[[["self"],["self"]]]],[11,"split_off","","Splits the collection into two at the given key.",1,[[["self"],["usize"]],["self"]]],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,[[["self"]],["drain"]]],[11,"len","","Returns the number of elements in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs.",1,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,[[["self"],["usize"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,[[["self"],["usize"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,[[["self"],["usize"]],["option"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["usize"]],["entry"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,[[["self"],["v"]],["v"]]],[11,"get","","Gets a reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,[[["self"]],["v"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone_from","","",1,[[["self"],["self"]]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["intoiter"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"clone","","",4,[[["self"]],["iter"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"clone","","",6,[[["self"]],["keys"]]],[11,"clone","","",7,[[["self"]],["values"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next","","",6,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option",["usize"]]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"IntoIter"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["wavefront_obj"]={"doc":"Parsers for wavefront's `.obj` and `.mtl` file format for loading meshes.","items":[[3,"ParseError","wavefront_obj","A parsing error, with location information.",N,N],[12,"line_number","","The line of input the error is on.",0,N],[12,"message","","The error message.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["parseerror"]],["bool"]]],[0,"mtl","","A parser for Wavefront's `.mtl` file format, for storing information about the material of which a 3D mesh is composed.",N,N],[3,"ParseError","wavefront_obj::mtl","A parsing error, with location information.",N,N],[12,"line_number","","The line of input the error is on.",0,N],[12,"message","","The error message.",0,N],[3,"MtlSet","","A set of materials in one `.mtl` file.",N,N],[12,"materials","","",1,N],[3,"Material","","A single material that can be applied to any face. They are generally applied by using the Phong shading model.",N,N],[12,"name","","",2,N],[12,"specular_coefficient","","",2,N],[12,"color_ambient","","",2,N],[12,"color_diffuse","","",2,N],[12,"color_specular","","",2,N],[12,"color_emissive","","",2,N],[12,"optical_density","","",2,N],[12,"alpha","","",2,N],[12,"illumination","","",2,N],[12,"uv_map","","",2,N],[3,"Color","","",N,N],[12,"r","","",3,N],[12,"g","","",3,N],[12,"b","","",3,N],[4,"Illumination","","How a given material is supposed to be illuminated.",N,N],[13,"Ambient","","",4,N],[13,"AmbientDiffuse","","",4,N],[13,"AmbientDiffuseSpecular","","",4,N],[5,"parse","","Parses a wavefront `.mtl` file, returning either the successfully parsed file, or an error. Support in this parser for the full file format is best-effort and realistically I will only end up supporting the subset of the file format which falls under the \"shit I see exported from blender\" category.",N,[[["string"]],["result",["mtlset","parseerror"]]]],[11,"clone","","",1,[[["self"]],["mtlset"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["mtlset"]],["bool"]]],[11,"ne","","",1,[[["self"],["mtlset"]],["bool"]]],[11,"clone","","",2,[[["self"]],["material"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["illumination"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["illumination"]],["bool"]]],[11,"cmp","","",4,[[["self"],["illumination"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["illumination"]],["option",["ordering"]]]],[11,"clone","","",3,[[["self"]],["color"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["color"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["color"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["material"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["material"]],["option",["ordering"]]]],[0,"obj","wavefront_obj","A parser for Wavefront's `.obj` file format for storing 3D meshes.",N,N],[3,"ObjSet","wavefront_obj::obj","A set of objects, as listed in an `.obj` file.",N,N],[12,"material_library","","Which material library to use.",5,N],[12,"objects","","The set of objects.",5,N],[3,"Object","","A mesh object.",N,N],[12,"name","","A human-readable name for this object.",6,N],[12,"vertices","","The set of vertices this object is composed of. These are referenced by index in `shapes` contained within each element of `geometry`.",6,N],[12,"tex_vertices","","The set of texture vertices referenced by this object. The actual vertices are indexed by the second element in a `VTNIndex`.",6,N],[12,"normals","","The set of normals referenced by this object. This are are referenced by the third element in a `VTNIndex`.",6,N],[12,"geometry","","A set of shapes (with materials applied to them) of which this object is composed.",6,N],[3,"Geometry","","A set of shapes, all using the given material.",N,N],[12,"material_name","","A reference to the material to apply to this geometry.",7,N],[12,"shapes","","The shapes of which this geometry is composed.",7,N],[3,"Shape","","A shape gathers a primitive and groups.",N,N],[12,"primitive","","The primitive of the shape.",8,N],[12,"groups","","Associated groups. No associated group means the shape uses the default group.",8,N],[12,"smoothing_groups","","Associated smoothing groups. No associated smoothing group means the shape should be rendered flat.",8,N],[3,"Vertex","","A single 3-dimensional point on the corner of an object.",N,N],[12,"x","","",9,N],[12,"y","","",9,N],[12,"z","","",9,N],[3,"TVertex","","A single 3-dimensional point on a texture. \"Texure Vertex\".",N,N],[12,"u","","",10,N],[12,"v","","",10,N],[12,"w","","",10,N],[4,"Primitive","","The various primitives supported by this library.",N,N],[13,"Point","","A point specified by its position.",11,N],[13,"Line","","A line specified by its endpoints.",11,N],[13,"Triangle","","A triangle specified by its three vertices.",11,N],[5,"parse","","Parses a wavefront `.obj` file, returning either the successfully parsed file, or an error. Support in this parser for the full file format is best-effort and realistically I will only end up supporting the subset of the file format which falls under the \"things I see exported from blender\" category.",N,[[["string"]],["result",["objset","parseerror"]]]],[6,"GroupName","","Name of a group.",N,N],[6,"Normal","","A single 3-dimensional normal",N,N],[6,"VertexIndex","","An index into the `vertices` array of an object, representing a vertex in the mesh. After parsing, this is guaranteed to be a valid index into the array, so unchecked indexing may be used.",N,N],[6,"TextureIndex","","An index into the `texture vertex` array of an object.",N,N],[6,"NormalIndex","","An index into the `normals` array of an object.",N,N],[6,"VTNIndex","","An index into the vertex array, with an optional index into the texture array. This is used to define the corners of shapes which may or may not be textured.",N,N],[11,"clone","","",5,[[["self"]],["objset"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["objset"]],["bool"]]],[11,"ne","","",5,[[["self"],["objset"]],["bool"]]],[11,"clone","","",6,[[["self"]],["object"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["object"]],["bool"]]],[11,"ne","","",6,[[["self"],["object"]],["bool"]]],[11,"clone","","",7,[[["self"]],["geometry"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["geometry"]],["bool"]]],[11,"ne","","",7,[[["self"],["geometry"]],["bool"]]],[11,"clone","","",8,[[["self"]],["shape"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["shape"]],["bool"]]],[11,"ne","","",8,[[["self"],["shape"]],["bool"]]],[11,"clone","","",11,[[["self"]],["primitive"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["primitive"]],["bool"]]],[11,"ne","","",11,[[["self"],["primitive"]],["bool"]]],[11,"clone","","",9,[[["self"]],["vertex"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["tvertex"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["vertex"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["vertex"]],["option",["ordering"]]]],[11,"eq","","",10,[[["self"],["tvertex"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["tvertex"]],["option",["ordering"]]]]],"paths":[[3,"ParseError"],[3,"MtlSet"],[3,"Material"],[3,"Color"],[4,"Illumination"],[3,"ObjSet"],[3,"Object"],[3,"Geometry"],[3,"Shape"],[3,"Vertex"],[3,"TVertex"],[4,"Primitive"]]};
searchIndex["wayland_client"]={"doc":"Client-side Wayland connector","items":[[3,"Display","wayland_client","A connection to a wayland server",N,N],[3,"EventQueue","","An event queue for protocol messages",N,N],[3,"QueueToken","","A token representing this event queue",N,N],[3,"ReadEventsGuard","","A guard over a read intention.",N,N],[3,"GlobalManager","","An utility to manage global objects",N,N],[3,"NewProxy","","A newly-created proxy that needs implementation",N,N],[3,"Proxy","","An handle to a wayland proxy",N,N],[4,"ConnectError","","Enum representing the possible reasons why connecting to the wayland server failed",N,N],[13,"NoWaylandLib","","The library was compiled with the `dlopen` feature, and the `libwayland-client.so` library could not be found at runtime",0,N],[13,"NoCompositorListening","","Any needed library was found, but the listening socket of the server could not be found.",0,N],[13,"InvalidName","","The provided socket name is invalid",0,N],[4,"GlobalError","","An error that occured trying to bind a global",N,N],[13,"Missing","","The requested global was missing",1,N],[13,"VersionTooLow","","The global abvertized by the server has a lower version number than the one requested",1,N],[4,"GlobalEvent","","Event provided to the user callback of GlobalManager",N,N],[13,"New","","A new global was created",2,N],[12,"id","wayland_client::GlobalEvent","Id of the new global",2,N],[12,"interface","","Interface of the new global",2,N],[12,"version","","Maximum supported version of the new global",2,N],[13,"Removed","wayland_client","A global was removed",2,N],[12,"id","wayland_client::GlobalEvent","Id of the removed global",2,N],[12,"interface","","Interface of the removed global",2,N],[11,"fmt","wayland_client","",0,[[["self"],["formatter"]],["result"]]],[11,"from_external_display","","Create a Display and Event Queue from an external display",3,N],[11,"get_display_ptr","","Retrieve the `wl_display` pointer",3,N],[11,"connect_to_env","","Attempt to connect to a wayland server using the contents of the environment variables",3,[[],["result",["connecterror"]]]],[11,"connect_to_name","","Attempt to connect to a wayland server socket with given name",3,[[["s"]],["result",["connecterror"]]]],[11,"flush","","Non-blocking write to the server",3,[[["self"]],["result",["i32"]]]],[11,"create_event_queue","","Create a new event queue associated with this wayland connection",3,[[["self"]],["eventqueue"]]],[11,"deref","","",3,[[["self"]],["proxy"]]],[11,"dispatch","","Dispatches events from the internal buffer.",4,[[["self"]],["ioresult",["u32"]]]],[11,"dispatch_pending","","Dispatches pending events from the internal buffer.",4,[[["self"]],["ioresult",["u32"]]]],[11,"sync_roundtrip","","Synchronous roundtrip",4,[[["self"]],["ioresult",["i32"]]]],[11,"get_token","","Create a new token associated with this event queue",4,[[["self"]],["queuetoken"]]],[11,"prepare_read","","Prepare an conccurent read",4,[[["self"]],["option",["readeventsguard"]]]],[11,"read_events","","Read events",5,[[["self"]],["ioresult",["i32"]]]],[11,"cancel","","Cancel the read",5,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"clone","","",6,[[["self"]],["globalmanager"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a global manager handling a registry",6,[[["newproxy",["wlregistry"]]],["globalmanager"]]],[11,"new_with_cb","","Create a global manager handling a registry with a callback",6,[[["newproxy",["wlregistry"]],["impl"]],["globalmanager"]]],[11,"instantiate_auto","","Instanciate a global with highest available version",6,[[["self"]],["result",["newproxy","globalerror"]]]],[11,"instantiate_exact","","Instanciate a global with a specific version",6,[[["self"],["u32"]],["result",["newproxy","globalerror"]]]],[11,"list","","Retrieve the list of currently known globals",6,[[["self"]],["vec"]]],[11,"eq","","",7,[[["self"],["proxy"]],["bool"]]],[11,"send","","Send a request through this object",7,N],[11,"is_alive","","Check if the object associated with this proxy is still alive",7,[[["self"]],["bool"]]],[11,"version","","Retrieve the interface version of this wayland object instance",7,[[["self"]],["u32"]]],[11,"set_user_data","","Associate an arbitrary payload to this object",7,N],[11,"get_user_data","","Retrieve the arbitrary payload associated to this object",7,N],[11,"is_external","","Check whether this proxy is managed by the library or not",7,[[["self"]],["bool"]]],[11,"equals","","Check if the other proxy refers to the same underlying wayland object",7,[[["self"],["proxy"]],["bool"]]],[11,"c_ptr","","Get a raw pointer to the underlying wayland object",7,N],[11,"from_c_ptr","","Create a `Proxy` instance from a C pointer",7,N],[11,"make_wrapper","","Create a wrapper for this object for queue management",7,[[["self"],["queuetoken"]],["result",["proxy"]]]],[11,"child","","Create a new child object",7,[[["self"]],["newproxy"]]],[11,"is_implemented_with","","Check whether this proxy has been implemented with given type",7,[[["self"]],["bool"]]],[11,"clone","","",7,[[["self"]],["proxy"]]],[11,"drop","","",7,[[["self"]]]],[11,"implement","","Implement this proxy using given function and implementation data.",8,[[["self"],["impl"]],["proxy"]]],[11,"implement_nonsend","","Implement this proxy using given function and implementation data.",8,[[["self"],["impl"],["queuetoken"]],["proxy"]]],[11,"c_ptr","","Get a raw pointer to the underlying wayland object",8,N],[11,"from_c_ptr","","Create a `NewProxy` instance from a C pointer.",8,N],[0,"cursor","","Cursor utilities",N,N],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",N,N],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",N,N],[3,"CursorImageBuffer","","A buffer containing a cursor image.",N,N],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",N,[[],["bool"]]],[5,"load_theme","","Attempts to load a cursor theme from given name.",N,[[["option",["str"]],["u32"],["proxy"]],["cursortheme"]]],[11,"get_cursor","","Retrieve a cursor from the theme.",9,[[["self"],["str"]],["option",["cursor"]]]],[11,"drop","","",9,[[["self"]]]],[11,"name","","Retrieve the name of this cursor.",10,[[["self"]],["string"]]],[11,"image_count","","Retrieve the number of images contained in this animated cursor",10,[[["self"]],["usize"]]],[11,"frame","","Retrieve the image number of cursor animation.",10,[[["self"],["u32"]],["usize"]]],[11,"frame_and_duration","","Retrieve the image number and its duration.",10,N],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",10,[[["self"],["usize"]],["option",["cursorimagebuffer"]]]],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",10,[[["self"],["usize"]],["option"]]],[11,"deref","","",11,[[["self"]],["proxy"]]],[0,"egl","wayland_client","EGL utilities",N,N],[3,"WlEglSurface","wayland_client::egl","EGL surface",N,N],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",N,[[],["bool"]]],[11,"new","","Create an EGL surface from a wayland surface",12,[[["proxy"],["i32"],["i32"]],["wleglsurface"]]],[11,"new_from_raw","","Create an EGL surface from a raw pointer to a wayland surface",12,N],[11,"get_size","","Fetch current size of the EGL surface",12,N],[11,"resize","","Resize the EGL surface",12,[[["self"],["i32"],["i32"],["i32"],["i32"]]]],[11,"ptr","","Raw pointer to the EGL surface",12,N],[11,"drop","","",12,[[["self"]]]],[0,"commons","wayland_client","Re-export of wayland-commons",N,N],[8,"MessageGroup","wayland_client::commons","A group of messages",N,N],[10,"is_destructor","","Whether this message is a destructor",13,[[["self"]],["bool"]]],[10,"from_raw_c","","Construct a message of this group from its C representation",13,N],[10,"as_raw_c_in","","Build a C representation of this message",13,[[["self"],["f"]],["t"]]],[8,"Interface","","The description of a wayland interface",N,N],[16,"Request","","Set of requests associated to this interface",14,N],[16,"Event","","Set of events associated to this interface",14,N],[18,"NAME","","Name of this interface",14,N],[10,"c_interface","","Pointer to the C representation of this interface",14,N],[8,"Implementation","","Trait representing implementations for wayland objects",N,N],[10,"receive","","Receive a message",15,N],[5,"downcast_impl","","Attempt to downcast a boxed `Implementation` trait object.",N,[[["box",["implementation"]]],["result",["box","box"]]]],[3,"AnonymousObject","","Anonymous interface",N,N],[4,"NoMessage","","An empty enum representing a MessageGroup with no messages",N,N],[0,"sys","wayland_client","C-associated types",N,N],[0,"client","wayland_client::sys","Bindings to the client library `libwayland-client.so`",N,N],[4,"wl_proxy","wayland_client::sys::client","",N,N],[4,"wl_display","","",N,N],[4,"wl_event_queue","","",N,N],[3,"WaylandClient","","",N,N],[12,"wl_display_connect_to_fd","","",16,N],[12,"wl_display_connect","","",16,N],[12,"wl_display_disconnect","","",16,N],[12,"wl_display_get_fd","","",16,N],[12,"wl_display_roundtrip","","",16,N],[12,"wl_display_read_events","","",16,N],[12,"wl_display_prepare_read","","",16,N],[12,"wl_display_cancel_read","","",16,N],[12,"wl_display_dispatch","","",16,N],[12,"wl_display_dispatch_pending","","",16,N],[12,"wl_display_get_error","","",16,N],[12,"wl_display_get_protocol_error","","",16,N],[12,"wl_display_flush","","",16,N],[12,"wl_event_queue_destroy","","",16,N],[12,"wl_display_create_queue","","",16,N],[12,"wl_display_roundtrip_queue","","",16,N],[12,"wl_display_prepare_read_queue","","",16,N],[12,"wl_display_dispatch_queue","","",16,N],[12,"wl_display_dispatch_queue_pending","","",16,N],[12,"wl_proxy_create","","",16,N],[12,"wl_proxy_destroy","","",16,N],[12,"wl_proxy_add_listener","","",16,N],[12,"wl_proxy_get_listener","","",16,N],[12,"wl_proxy_add_dispatcher","","",16,N],[12,"wl_proxy_marshal_array_constructor","","",16,N],[12,"wl_proxy_marshal_array_constructor_versioned","","",16,N],[12,"wl_proxy_marshal_array","","",16,N],[12,"wl_proxy_set_user_data","","",16,N],[12,"wl_proxy_get_user_data","","",16,N],[12,"wl_proxy_get_id","","",16,N],[12,"wl_proxy_get_class","","",16,N],[12,"wl_proxy_set_queue","","",16,N],[12,"wl_proxy_get_version","","",16,N],[12,"wl_proxy_create_wrapper","","",16,N],[12,"wl_proxy_wrapper_destroy","","",16,N],[12,"wl_log_set_handler_client","","",16,N],[12,"wl_list_init","","",16,N],[12,"wl_list_insert","","",16,N],[12,"wl_list_remove","","",16,N],[12,"wl_list_length","","",16,N],[12,"wl_list_empty","","",16,N],[12,"wl_list_insert_list","","",16,N],[12,"wl_array_init","","",16,N],[12,"wl_array_release","","",16,N],[12,"wl_array_add","","",16,N],[12,"wl_array_copy","","",16,N],[12,"wl_proxy_marshal_constructor","","",16,N],[12,"wl_proxy_marshal_constructor_versioned","","",16,N],[12,"wl_proxy_marshal","","",16,N],[3,"WAYLAND_CLIENT_OPTION","","",N,N],[3,"WAYLAND_CLIENT_HANDLE","","",N,N],[5,"is_lib_available","","",N,[[],["bool"]]],[0,"common","wayland_client::sys","Various types and functions that are used by both the client and the server libraries.",N,N],[3,"wl_message","wayland_client::sys::common","",N,N],[12,"name","","",17,N],[12,"signature","","",17,N],[12,"types","","",17,N],[3,"wl_interface","","",N,N],[12,"name","","",18,N],[12,"version","","",18,N],[12,"request_count","","",18,N],[12,"requests","","",18,N],[12,"event_count","","",18,N],[12,"events","","",18,N],[3,"wl_list","","",N,N],[12,"prev","","",19,N],[12,"next","","",19,N],[3,"wl_array","","",N,N],[12,"size","","",20,N],[12,"alloc","","",20,N],[12,"data","","",20,N],[6,"wl_fixed_t","","",N,N],[5,"wl_fixed_to_double","","",N,[[["i32"]],["f64"]]],[5,"wl_fixed_from_double","","",N,[[["f64"]],["i32"]]],[5,"wl_fixed_to_int","","",N,[[["i32"]],["i32"]]],[5,"wl_fixed_from_int","","",N,[[["i32"]],["i32"]]],[19,"wl_argument","","",N,N],[12,"i","","",21,N],[12,"u","","",21,N],[12,"f","","",21,N],[12,"s","","",21,N],[12,"o","","",21,N],[12,"n","","",21,N],[12,"a","","",21,N],[12,"h","","",21,N],[6,"wl_dispatcher_func_t","","",N,N],[6,"wl_log_func_t","","",N,N],[0,"protocol_interfaces","wayland_client::sys","",N,N],[7,"wl_display_requests","wayland_client::sys::protocol_interfaces","",N,N],[7,"wl_display_events","","",N,N],[7,"wl_display_interface","","",N,N],[7,"wl_registry_requests","","",N,N],[7,"wl_registry_events","","",N,N],[7,"wl_registry_interface","","",N,N],[7,"wl_callback_events","","",N,N],[7,"wl_callback_interface","","",N,N],[7,"wl_compositor_requests","","",N,N],[7,"wl_compositor_interface","","",N,N],[7,"wl_shm_pool_requests","","",N,N],[7,"wl_shm_pool_interface","","",N,N],[7,"wl_shm_requests","","",N,N],[7,"wl_shm_events","","",N,N],[7,"wl_shm_interface","","",N,N],[7,"wl_buffer_requests","","",N,N],[7,"wl_buffer_events","","",N,N],[7,"wl_buffer_interface","","",N,N],[7,"wl_data_offer_requests","","",N,N],[7,"wl_data_offer_events","","",N,N],[7,"wl_data_offer_interface","","",N,N],[7,"wl_data_source_requests","","",N,N],[7,"wl_data_source_events","","",N,N],[7,"wl_data_source_interface","","",N,N],[7,"wl_data_device_requests","","",N,N],[7,"wl_data_device_events","","",N,N],[7,"wl_data_device_interface","","",N,N],[7,"wl_data_device_manager_requests","","",N,N],[7,"wl_data_device_manager_interface","","",N,N],[7,"wl_shell_requests","","",N,N],[7,"wl_shell_interface","","",N,N],[7,"wl_shell_surface_requests","","",N,N],[7,"wl_shell_surface_events","","",N,N],[7,"wl_shell_surface_interface","","",N,N],[7,"wl_surface_requests","","",N,N],[7,"wl_surface_events","","",N,N],[7,"wl_surface_interface","","",N,N],[7,"wl_seat_requests","","",N,N],[7,"wl_seat_events","","",N,N],[7,"wl_seat_interface","","",N,N],[7,"wl_pointer_requests","","",N,N],[7,"wl_pointer_events","","",N,N],[7,"wl_pointer_interface","","",N,N],[7,"wl_keyboard_requests","","",N,N],[7,"wl_keyboard_events","","",N,N],[7,"wl_keyboard_interface","","",N,N],[7,"wl_touch_requests","","",N,N],[7,"wl_touch_events","","",N,N],[7,"wl_touch_interface","","",N,N],[7,"wl_output_requests","","",N,N],[7,"wl_output_events","","",N,N],[7,"wl_output_interface","","",N,N],[7,"wl_region_requests","","",N,N],[7,"wl_region_interface","","",N,N],[7,"wl_subcompositor_requests","","",N,N],[7,"wl_subcompositor_interface","","",N,N],[7,"wl_subsurface_requests","","",N,N],[7,"wl_subsurface_interface","","",N,N],[0,"protocol","wayland_client","Generated interfaces for the core wayland protocol",N,N],[0,"wl_display","wayland_client::protocol","core global object",N,N],[3,"WlDisplay","wayland_client::protocol::wl_display","",N,N],[4,"Error","","global error values",N,N],[13,"InvalidObject","","server couldn't find object",22,N],[13,"InvalidMethod","","method doesn't exist on the specified interface",22,N],[13,"NoMemory","","server is out of memory",22,N],[4,"Request","","",N,N],[13,"Sync","","asynchronous roundtrip",23,N],[12,"callback","wayland_client::protocol::wl_display::Request","",23,N],[13,"GetRegistry","wayland_client::protocol::wl_display","get global registry object",23,N],[12,"registry","wayland_client::protocol::wl_display::Request","",23,N],[4,"Event","wayland_client::protocol::wl_display","",N,N],[13,"Error","","fatal error event",24,N],[12,"object_id","wayland_client::protocol::wl_display::Event","",24,N],[12,"code","","",24,N],[12,"message","","",24,N],[13,"DeleteId","wayland_client::protocol::wl_display","acknowledge object ID deletion",24,N],[12,"id","wayland_client::protocol::wl_display::Event","",24,N],[8,"RequestsTrait","wayland_client::protocol::wl_display","",N,N],[10,"sync","","asynchronous roundtrip",25,[[["self"]],["result",["newproxy"]]]],[10,"get_registry","","get global registry object",25,[[["self"]],["result",["newproxy"]]]],[0,"wl_registry","wayland_client::protocol","global registry object",N,N],[3,"WlRegistry","wayland_client::protocol::wl_registry","",N,N],[4,"Request","","",N,N],[13,"Bind","","bind an object to the display",26,N],[12,"name","wayland_client::protocol::wl_registry::Request","",26,N],[12,"id","","",26,N],[4,"Event","wayland_client::protocol::wl_registry","",N,N],[13,"Global","","announce global object",27,N],[12,"name","wayland_client::protocol::wl_registry::Event","",27,N],[12,"interface","","",27,N],[12,"version","","",27,N],[13,"GlobalRemove","wayland_client::protocol::wl_registry","announce removal of global object",27,N],[12,"name","wayland_client::protocol::wl_registry::Event","",27,N],[8,"RequestsTrait","wayland_client::protocol::wl_registry","",N,N],[10,"bind","","bind an object to the display",28,[[["self"],["u32"],["u32"]],["result",["newproxy"]]]],[0,"wl_callback","wayland_client::protocol","callback object",N,N],[3,"WlCallback","wayland_client::protocol::wl_callback","",N,N],[4,"Request","","",N,N],[4,"Event","","",N,N],[13,"Done","","done event",29,N],[12,"callback_data","wayland_client::protocol::wl_callback::Event","",29,N],[8,"RequestsTrait","wayland_client::protocol::wl_callback","",N,N],[0,"wl_compositor","wayland_client::protocol","the compositor singleton",N,N],[3,"WlCompositor","wayland_client::protocol::wl_compositor","",N,N],[4,"Request","","",N,N],[13,"CreateSurface","","create new surface",30,N],[12,"id","wayland_client::protocol::wl_compositor::Request","",30,N],[13,"CreateRegion","wayland_client::protocol::wl_compositor","create new region",30,N],[12,"id","wayland_client::protocol::wl_compositor::Request","",30,N],[4,"Event","wayland_client::protocol::wl_compositor","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_surface","","create new surface",31,[[["self"]],["result",["newproxy"]]]],[10,"create_region","","create new region",31,[[["self"]],["result",["newproxy"]]]],[0,"wl_shm_pool","wayland_client::protocol","a shared memory pool",N,N],[3,"WlShmPool","wayland_client::protocol::wl_shm_pool","",N,N],[4,"Request","","",N,N],[13,"CreateBuffer","","create a buffer from the pool",32,N],[12,"id","wayland_client::protocol::wl_shm_pool::Request","",32,N],[12,"offset","","",32,N],[12,"width","","",32,N],[12,"height","","",32,N],[12,"stride","","",32,N],[12,"format","","",32,N],[13,"Destroy","wayland_client::protocol::wl_shm_pool","destroy the pool",32,N],[13,"Resize","","change the size of the pool mapping",32,N],[12,"size","wayland_client::protocol::wl_shm_pool::Request","",32,N],[4,"Event","wayland_client::protocol::wl_shm_pool","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_buffer","","create a buffer from the pool",33,[[["self"],["i32"],["i32"],["i32"],["i32"],["format"]],["result",["newproxy"]]]],[10,"destroy","","destroy the pool",33,N],[10,"resize","","change the size of the pool mapping",33,N],[0,"wl_shm","wayland_client::protocol","shared memory support",N,N],[3,"WlShm","wayland_client::protocol::wl_shm","",N,N],[4,"Error","","wl_shm error values",N,N],[13,"InvalidFormat","","buffer format is not known",34,N],[13,"InvalidStride","","invalid size or stride during pool or buffer creation",34,N],[13,"InvalidFd","","mmapping the file descriptor failed",34,N],[4,"Format","","pixel formats",N,N],[13,"Argb8888","","32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian",35,N],[13,"Xrgb8888","","32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian",35,N],[13,"C8","","8-bit color index format, [7:0] C",35,N],[13,"Rgb332","","8-bit RGB format, [7:0] R:G:B 3:3:2",35,N],[13,"Bgr233","","8-bit BGR format, [7:0] B:G:R 2:3:3",35,N],[13,"Xrgb4444","","16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian",35,N],[13,"Xbgr4444","","16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian",35,N],[13,"Rgbx4444","","16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian",35,N],[13,"Bgrx4444","","16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian",35,N],[13,"Argb4444","","16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian",35,N],[13,"Abgr4444","","16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian",35,N],[13,"Rgba4444","","16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian",35,N],[13,"Bgra4444","","16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian",35,N],[13,"Xrgb1555","","16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian",35,N],[13,"Xbgr1555","","16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian",35,N],[13,"Rgbx5551","","16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian",35,N],[13,"Bgrx5551","","16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian",35,N],[13,"Argb1555","","16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian",35,N],[13,"Abgr1555","","16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian",35,N],[13,"Rgba5551","","16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian",35,N],[13,"Bgra5551","","16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian",35,N],[13,"Rgb565","","16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian",35,N],[13,"Bgr565","","16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian",35,N],[13,"Rgb888","","24-bit RGB format, [23:0] R:G:B little endian",35,N],[13,"Bgr888","","24-bit BGR format, [23:0] B:G:R little endian",35,N],[13,"Xbgr8888","","32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian",35,N],[13,"Rgbx8888","","32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian",35,N],[13,"Bgrx8888","","32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian",35,N],[13,"Abgr8888","","32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian",35,N],[13,"Rgba8888","","32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian",35,N],[13,"Bgra8888","","32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian",35,N],[13,"Xrgb2101010","","32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian",35,N],[13,"Xbgr2101010","","32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian",35,N],[13,"Rgbx1010102","","32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian",35,N],[13,"Bgrx1010102","","32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian",35,N],[13,"Argb2101010","","32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian",35,N],[13,"Abgr2101010","","32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian",35,N],[13,"Rgba1010102","","32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian",35,N],[13,"Bgra1010102","","32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian",35,N],[13,"Yuyv","","packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian",35,N],[13,"Yvyu","","packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian",35,N],[13,"Uyvy","","packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian",35,N],[13,"Vyuy","","packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian",35,N],[13,"Ayuv","","packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian",35,N],[13,"Nv12","","2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane",35,N],[13,"Nv21","","2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane",35,N],[13,"Nv16","","2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane",35,N],[13,"Nv61","","2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane",35,N],[13,"Yuv410","","3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes",35,N],[13,"Yvu410","","3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes",35,N],[13,"Yuv411","","3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes",35,N],[13,"Yvu411","","3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes",35,N],[13,"Yuv420","","3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes",35,N],[13,"Yvu420","","3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes",35,N],[13,"Yuv422","","3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes",35,N],[13,"Yvu422","","3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes",35,N],[13,"Yuv444","","3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes",35,N],[13,"Yvu444","","3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes",35,N],[4,"Request","","",N,N],[13,"CreatePool","","create a shm pool",36,N],[12,"id","wayland_client::protocol::wl_shm::Request","",36,N],[12,"fd","","",36,N],[12,"size","","",36,N],[4,"Event","wayland_client::protocol::wl_shm","",N,N],[13,"Format","","pixel format description",37,N],[12,"format","wayland_client::protocol::wl_shm::Event","",37,N],[8,"RequestsTrait","wayland_client::protocol::wl_shm","",N,N],[10,"create_pool","","create a shm pool",38,[[["self"],["rawfd"],["i32"]],["result",["newproxy"]]]],[0,"wl_buffer","wayland_client::protocol","content for a wl_surface",N,N],[3,"WlBuffer","wayland_client::protocol::wl_buffer","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy a buffer",39,N],[4,"Event","","",N,N],[13,"Release","","compositor releases buffer",40,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy a buffer",41,N],[0,"wl_data_offer","wayland_client::protocol","offer to transfer data",N,N],[3,"WlDataOffer","wayland_client::protocol::wl_data_offer","",N,N],[4,"Error","","",N,N],[13,"InvalidFinish","","finish request was called untimely",42,N],[13,"InvalidActionMask","","action mask contains invalid values",42,N],[13,"InvalidAction","","action argument has an invalid value",42,N],[13,"InvalidOffer","","offer doesn't accept this request",42,N],[4,"Request","","",N,N],[13,"Accept","","accept one of the offered mime types",43,N],[12,"serial","wayland_client::protocol::wl_data_offer::Request","",43,N],[12,"mime_type","","",43,N],[13,"Receive","wayland_client::protocol::wl_data_offer","request that the data is transferred",43,N],[12,"mime_type","wayland_client::protocol::wl_data_offer::Request","",43,N],[12,"fd","","",43,N],[13,"Destroy","wayland_client::protocol::wl_data_offer","destroy data offer",43,N],[13,"Finish","","the offer will no longer be used",43,N],[13,"SetActions","","set the available/preferred drag-and-drop actions",43,N],[12,"dnd_actions","wayland_client::protocol::wl_data_offer::Request","",43,N],[12,"preferred_action","","",43,N],[4,"Event","wayland_client::protocol::wl_data_offer","",N,N],[13,"Offer","","advertise offered mime type",44,N],[12,"mime_type","wayland_client::protocol::wl_data_offer::Event","",44,N],[13,"SourceActions","wayland_client::protocol::wl_data_offer","notify the source-side available actions",44,N],[12,"source_actions","wayland_client::protocol::wl_data_offer::Event","",44,N],[13,"Action","wayland_client::protocol::wl_data_offer","notify the selected action",44,N],[12,"dnd_action","wayland_client::protocol::wl_data_offer::Event","",44,N],[8,"RequestsTrait","wayland_client::protocol::wl_data_offer","",N,N],[10,"accept","","accept one of the offered mime types",45,N],[10,"receive","","request that the data is transferred",45,N],[10,"destroy","","destroy data offer",45,N],[10,"finish","","the offer will no longer be used",45,N],[10,"set_actions","","set the available/preferred drag-and-drop actions",45,N],[0,"wl_data_source","wayland_client::protocol","offer to transfer data",N,N],[3,"WlDataSource","wayland_client::protocol::wl_data_source","",N,N],[4,"Error","","",N,N],[13,"InvalidActionMask","","action mask contains invalid values",46,N],[13,"InvalidSource","","source doesn't accept this request",46,N],[4,"Request","","",N,N],[13,"Offer","","add an offered mime type",47,N],[12,"mime_type","wayland_client::protocol::wl_data_source::Request","",47,N],[13,"Destroy","wayland_client::protocol::wl_data_source","destroy the data source",47,N],[13,"SetActions","","set the available drag-and-drop actions",47,N],[12,"dnd_actions","wayland_client::protocol::wl_data_source::Request","",47,N],[4,"Event","wayland_client::protocol::wl_data_source","",N,N],[13,"Target","","a target accepts an offered mime type",48,N],[12,"mime_type","wayland_client::protocol::wl_data_source::Event","",48,N],[13,"Send","wayland_client::protocol::wl_data_source","send the data",48,N],[12,"mime_type","wayland_client::protocol::wl_data_source::Event","",48,N],[12,"fd","","",48,N],[13,"Cancelled","wayland_client::protocol::wl_data_source","selection was cancelled",48,N],[13,"DndDropPerformed","","the drag-and-drop operation physically finished",48,N],[13,"DndFinished","","the drag-and-drop operation concluded",48,N],[13,"Action","","notify the selected action",48,N],[12,"dnd_action","wayland_client::protocol::wl_data_source::Event","",48,N],[8,"RequestsTrait","wayland_client::protocol::wl_data_source","",N,N],[10,"offer","","add an offered mime type",49,N],[10,"destroy","","destroy the data source",49,N],[10,"set_actions","","set the available drag-and-drop actions",49,N],[0,"wl_data_device","wayland_client::protocol","data transfer device",N,N],[3,"WlDataDevice","wayland_client::protocol::wl_data_device","",N,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",50,N],[4,"Request","","",N,N],[13,"StartDrag","","start drag-and-drop operation",51,N],[12,"source","wayland_client::protocol::wl_data_device::Request","",51,N],[12,"origin","","",51,N],[12,"icon","","",51,N],[12,"serial","","",51,N],[13,"SetSelection","wayland_client::protocol::wl_data_device","copy data to the selection",51,N],[12,"source","wayland_client::protocol::wl_data_device::Request","",51,N],[12,"serial","","",51,N],[13,"Release","wayland_client::protocol::wl_data_device","destroy data device",51,N],[4,"Event","","",N,N],[13,"DataOffer","","introduce a new wl_data_offer",52,N],[12,"id","wayland_client::protocol::wl_data_device::Event","",52,N],[13,"Enter","wayland_client::protocol::wl_data_device","initiate drag-and-drop session",52,N],[12,"serial","wayland_client::protocol::wl_data_device::Event","",52,N],[12,"surface","","",52,N],[12,"x","","",52,N],[12,"y","","",52,N],[12,"id","","",52,N],[13,"Leave","wayland_client::protocol::wl_data_device","end drag-and-drop session",52,N],[13,"Motion","","drag-and-drop session motion",52,N],[12,"time","wayland_client::protocol::wl_data_device::Event","",52,N],[12,"x","","",52,N],[12,"y","","",52,N],[13,"Drop","wayland_client::protocol::wl_data_device","end drag-and-drop session successfully",52,N],[13,"Selection","","advertise new selection",52,N],[12,"id","wayland_client::protocol::wl_data_device::Event","",52,N],[8,"RequestsTrait","wayland_client::protocol::wl_data_device","",N,N],[10,"start_drag","","start drag-and-drop operation",53,N],[10,"set_selection","","copy data to the selection",53,N],[10,"release","","destroy data device",53,N],[0,"wl_data_device_manager","wayland_client::protocol","data transfer interface",N,N],[3,"DndAction","wayland_client::protocol::wl_data_device_manager","drag and drop actions",N,N],[3,"WlDataDeviceManager","","",N,N],[4,"Request","","",N,N],[13,"CreateDataSource","","create a new data source",54,N],[12,"id","wayland_client::protocol::wl_data_device_manager::Request","",54,N],[13,"GetDataDevice","wayland_client::protocol::wl_data_device_manager","create a new data device",54,N],[12,"id","wayland_client::protocol::wl_data_device_manager::Request","",54,N],[12,"seat","","",54,N],[4,"Event","wayland_client::protocol::wl_data_device_manager","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_data_source","","create a new data source",55,[[["self"]],["result",["newproxy"]]]],[10,"get_data_device","","create a new data device",55,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"wl_shell","wayland_client::protocol","create desktop-style surfaces",N,N],[3,"WlShell","wayland_client::protocol::wl_shell","",N,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",56,N],[4,"Request","","",N,N],[13,"GetShellSurface","","create a shell surface from a surface",57,N],[12,"id","wayland_client::protocol::wl_shell::Request","",57,N],[12,"surface","","",57,N],[4,"Event","wayland_client::protocol::wl_shell","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_shell_surface","","create a shell surface from a surface",58,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"wl_shell_surface","wayland_client::protocol","desktop-style metadata interface",N,N],[3,"Resize","wayland_client::protocol::wl_shell_surface","edge values for resizing",N,N],[3,"Transient","","details of transient behaviour",N,N],[3,"WlShellSurface","","",N,N],[4,"FullscreenMethod","","different method to set the surface fullscreen",N,N],[13,"Default","","no preference, apply default policy",59,N],[13,"Scale","","scale, preserve the surface's aspect ratio and center on output",59,N],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",59,N],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",59,N],[4,"Request","","",N,N],[13,"Pong","","respond to a ping event",60,N],[12,"serial","wayland_client::protocol::wl_shell_surface::Request","",60,N],[13,"Move","wayland_client::protocol::wl_shell_surface","start an interactive move",60,N],[12,"seat","wayland_client::protocol::wl_shell_surface::Request","",60,N],[12,"serial","","",60,N],[13,"Resize","wayland_client::protocol::wl_shell_surface","start an interactive resize",60,N],[12,"seat","wayland_client::protocol::wl_shell_surface::Request","",60,N],[12,"serial","","",60,N],[12,"edges","","",60,N],[13,"SetToplevel","wayland_client::protocol::wl_shell_surface","make the surface a toplevel surface",60,N],[13,"SetTransient","","make the surface a transient surface",60,N],[12,"parent","wayland_client::protocol::wl_shell_surface::Request","",60,N],[12,"x","","",60,N],[12,"y","","",60,N],[12,"flags","","",60,N],[13,"SetFullscreen","wayland_client::protocol::wl_shell_surface","make the surface a fullscreen surface",60,N],[12,"method","wayland_client::protocol::wl_shell_surface::Request","",60,N],[12,"framerate","","",60,N],[12,"output","","",60,N],[13,"SetPopup","wayland_client::protocol::wl_shell_surface","make the surface a popup surface",60,N],[12,"seat","wayland_client::protocol::wl_shell_surface::Request","",60,N],[12,"serial","","",60,N],[12,"parent","","",60,N],[12,"x","","",60,N],[12,"y","","",60,N],[12,"flags","","",60,N],[13,"SetMaximized","wayland_client::protocol::wl_shell_surface","make the surface a maximized surface",60,N],[12,"output","wayland_client::protocol::wl_shell_surface::Request","",60,N],[13,"SetTitle","wayland_client::protocol::wl_shell_surface","set surface title",60,N],[12,"title","wayland_client::protocol::wl_shell_surface::Request","",60,N],[13,"SetClass","wayland_client::protocol::wl_shell_surface","set surface class",60,N],[12,"class_","wayland_client::protocol::wl_shell_surface::Request","",60,N],[4,"Event","wayland_client::protocol::wl_shell_surface","",N,N],[13,"Ping","","ping client",61,N],[12,"serial","wayland_client::protocol::wl_shell_surface::Event","",61,N],[13,"Configure","wayland_client::protocol::wl_shell_surface","suggest resize",61,N],[12,"edges","wayland_client::protocol::wl_shell_surface::Event","",61,N],[12,"width","","",61,N],[12,"height","","",61,N],[13,"PopupDone","wayland_client::protocol::wl_shell_surface","popup interaction is done",61,N],[8,"RequestsTrait","","",N,N],[10,"pong","","respond to a ping event",62,N],[10,"_move","","start an interactive move",62,N],[10,"resize","","start an interactive resize",62,N],[10,"set_toplevel","","make the surface a toplevel surface",62,N],[10,"set_transient","","make the surface a transient surface",62,N],[10,"set_fullscreen","","make the surface a fullscreen surface",62,N],[10,"set_popup","","make the surface a popup surface",62,N],[10,"set_maximized","","make the surface a maximized surface",62,N],[10,"set_title","","set surface title",62,N],[10,"set_class","","set surface class",62,N],[0,"wl_surface","wayland_client::protocol","an onscreen surface",N,N],[3,"WlSurface","wayland_client::protocol::wl_surface","",N,N],[4,"Error","","wl_surface error values",N,N],[13,"InvalidScale","","buffer scale value is invalid",63,N],[13,"InvalidTransform","","buffer transform value is invalid",63,N],[4,"Request","","",N,N],[13,"Destroy","","delete surface",64,N],[13,"Attach","","set the surface contents",64,N],[12,"buffer","wayland_client::protocol::wl_surface::Request","",64,N],[12,"x","","",64,N],[12,"y","","",64,N],[13,"Damage","wayland_client::protocol::wl_surface","mark part of the surface damaged",64,N],[12,"x","wayland_client::protocol::wl_surface::Request","",64,N],[12,"y","","",64,N],[12,"width","","",64,N],[12,"height","","",64,N],[13,"Frame","wayland_client::protocol::wl_surface","request a frame throttling hint",64,N],[12,"callback","wayland_client::protocol::wl_surface::Request","",64,N],[13,"SetOpaqueRegion","wayland_client::protocol::wl_surface","set opaque region",64,N],[12,"region","wayland_client::protocol::wl_surface::Request","",64,N],[13,"SetInputRegion","wayland_client::protocol::wl_surface","set input region",64,N],[12,"region","wayland_client::protocol::wl_surface::Request","",64,N],[13,"Commit","wayland_client::protocol::wl_surface","commit pending surface state",64,N],[13,"SetBufferTransform","","sets the buffer transformation",64,N],[12,"transform","wayland_client::protocol::wl_surface::Request","",64,N],[13,"SetBufferScale","wayland_client::protocol::wl_surface","sets the buffer scaling factor",64,N],[12,"scale","wayland_client::protocol::wl_surface::Request","",64,N],[13,"DamageBuffer","wayland_client::protocol::wl_surface","mark part of the surface damaged using buffer coordinates",64,N],[12,"x","wayland_client::protocol::wl_surface::Request","",64,N],[12,"y","","",64,N],[12,"width","","",64,N],[12,"height","","",64,N],[4,"Event","wayland_client::protocol::wl_surface","",N,N],[13,"Enter","","surface enters an output",65,N],[12,"output","wayland_client::protocol::wl_surface::Event","",65,N],[13,"Leave","wayland_client::protocol::wl_surface","surface leaves an output",65,N],[12,"output","wayland_client::protocol::wl_surface::Event","",65,N],[8,"RequestsTrait","wayland_client::protocol::wl_surface","",N,N],[10,"destroy","","delete surface",66,N],[10,"attach","","set the surface contents",66,N],[10,"damage","","mark part of the surface damaged",66,N],[10,"frame","","request a frame throttling hint",66,[[["self"]],["result",["newproxy"]]]],[10,"set_opaque_region","","set opaque region",66,N],[10,"set_input_region","","set input region",66,N],[10,"commit","","commit pending surface state",66,N],[10,"set_buffer_transform","","sets the buffer transformation",66,N],[10,"set_buffer_scale","","sets the buffer scaling factor",66,N],[10,"damage_buffer","","mark part of the surface damaged using buffer coordinates",66,N],[0,"wl_seat","wayland_client::protocol","group of input devices",N,N],[3,"Capability","wayland_client::protocol::wl_seat","seat capability bitmask",N,N],[3,"WlSeat","","",N,N],[4,"Request","","",N,N],[13,"GetPointer","","return pointer object",67,N],[12,"id","wayland_client::protocol::wl_seat::Request","",67,N],[13,"GetKeyboard","wayland_client::protocol::wl_seat","return keyboard object",67,N],[12,"id","wayland_client::protocol::wl_seat::Request","",67,N],[13,"GetTouch","wayland_client::protocol::wl_seat","return touch object",67,N],[12,"id","wayland_client::protocol::wl_seat::Request","",67,N],[13,"Release","wayland_client::protocol::wl_seat","release the seat object",67,N],[4,"Event","","",N,N],[13,"Capabilities","","seat capabilities changed",68,N],[12,"capabilities","wayland_client::protocol::wl_seat::Event","",68,N],[13,"Name","wayland_client::protocol::wl_seat","unique identifier for this seat",68,N],[12,"name","wayland_client::protocol::wl_seat::Event","",68,N],[8,"RequestsTrait","wayland_client::protocol::wl_seat","",N,N],[10,"get_pointer","","return pointer object",69,[[["self"]],["result",["newproxy"]]]],[10,"get_keyboard","","return keyboard object",69,[[["self"]],["result",["newproxy"]]]],[10,"get_touch","","return touch object",69,[[["self"]],["result",["newproxy"]]]],[10,"release","","release the seat object",69,N],[0,"wl_pointer","wayland_client::protocol","pointer input device",N,N],[3,"WlPointer","wayland_client::protocol::wl_pointer","",N,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",70,N],[4,"ButtonState","","physical button state",N,N],[13,"Released","","the button is not pressed",71,N],[13,"Pressed","","the button is pressed",71,N],[4,"Axis","","axis types",N,N],[13,"VerticalScroll","","vertical axis",72,N],[13,"HorizontalScroll","","horizontal axis",72,N],[4,"AxisSource","","axis source types",N,N],[13,"Wheel","","a physical wheel",73,N],[13,"Finger","","finger on a touch surface",73,N],[13,"Continuous","","continuous coordinate space",73,N],[4,"Request","","",N,N],[13,"SetCursor","","set the pointer surface",74,N],[12,"serial","wayland_client::protocol::wl_pointer::Request","",74,N],[12,"surface","","",74,N],[12,"hotspot_x","","",74,N],[12,"hotspot_y","","",74,N],[13,"Release","wayland_client::protocol::wl_pointer","release the pointer object",74,N],[4,"Event","","",N,N],[13,"Enter","","enter event",75,N],[12,"serial","wayland_client::protocol::wl_pointer::Event","",75,N],[12,"surface","","",75,N],[12,"surface_x","","",75,N],[12,"surface_y","","",75,N],[13,"Leave","wayland_client::protocol::wl_pointer","leave event",75,N],[12,"serial","wayland_client::protocol::wl_pointer::Event","",75,N],[12,"surface","","",75,N],[13,"Motion","wayland_client::protocol::wl_pointer","pointer motion event",75,N],[12,"time","wayland_client::protocol::wl_pointer::Event","",75,N],[12,"surface_x","","",75,N],[12,"surface_y","","",75,N],[13,"Button","wayland_client::protocol::wl_pointer","pointer button event",75,N],[12,"serial","wayland_client::protocol::wl_pointer::Event","",75,N],[12,"time","","",75,N],[12,"button","","",75,N],[12,"state","","",75,N],[13,"Axis","wayland_client::protocol::wl_pointer","axis event",75,N],[12,"time","wayland_client::protocol::wl_pointer::Event","",75,N],[12,"axis","","",75,N],[12,"value","","",75,N],[13,"Frame","wayland_client::protocol::wl_pointer","end of a pointer event sequence",75,N],[13,"AxisSource","","axis source event",75,N],[12,"axis_source","wayland_client::protocol::wl_pointer::Event","",75,N],[13,"AxisStop","wayland_client::protocol::wl_pointer","axis stop event",75,N],[12,"time","wayland_client::protocol::wl_pointer::Event","",75,N],[12,"axis","","",75,N],[13,"AxisDiscrete","wayland_client::protocol::wl_pointer","axis click event",75,N],[12,"axis","wayland_client::protocol::wl_pointer::Event","",75,N],[12,"discrete","","",75,N],[8,"RequestsTrait","wayland_client::protocol::wl_pointer","",N,N],[10,"set_cursor","","set the pointer surface",76,N],[10,"release","","release the pointer object",76,N],[0,"wl_keyboard","wayland_client::protocol","keyboard input device",N,N],[3,"WlKeyboard","wayland_client::protocol::wl_keyboard","",N,N],[4,"KeymapFormat","","keyboard mapping format",N,N],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",77,N],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",77,N],[4,"KeyState","","physical key state",N,N],[13,"Released","","key is not pressed",78,N],[13,"Pressed","","key is pressed",78,N],[4,"Request","","",N,N],[13,"Release","","release the keyboard object",79,N],[4,"Event","","",N,N],[13,"Keymap","","keyboard mapping",80,N],[12,"format","wayland_client::protocol::wl_keyboard::Event","",80,N],[12,"fd","","",80,N],[12,"size","","",80,N],[13,"Enter","wayland_client::protocol::wl_keyboard","enter event",80,N],[12,"serial","wayland_client::protocol::wl_keyboard::Event","",80,N],[12,"surface","","",80,N],[12,"keys","","",80,N],[13,"Leave","wayland_client::protocol::wl_keyboard","leave event",80,N],[12,"serial","wayland_client::protocol::wl_keyboard::Event","",80,N],[12,"surface","","",80,N],[13,"Key","wayland_client::protocol::wl_keyboard","key event",80,N],[12,"serial","wayland_client::protocol::wl_keyboard::Event","",80,N],[12,"time","","",80,N],[12,"key","","",80,N],[12,"state","","",80,N],[13,"Modifiers","wayland_client::protocol::wl_keyboard","modifier and group state",80,N],[12,"serial","wayland_client::protocol::wl_keyboard::Event","",80,N],[12,"mods_depressed","","",80,N],[12,"mods_latched","","",80,N],[12,"mods_locked","","",80,N],[12,"group","","",80,N],[13,"RepeatInfo","wayland_client::protocol::wl_keyboard","repeat rate and delay",80,N],[12,"rate","wayland_client::protocol::wl_keyboard::Event","",80,N],[12,"delay","","",80,N],[8,"RequestsTrait","wayland_client::protocol::wl_keyboard","",N,N],[10,"release","","release the keyboard object",81,N],[0,"wl_touch","wayland_client::protocol","touchscreen input device",N,N],[3,"WlTouch","wayland_client::protocol::wl_touch","",N,N],[4,"Request","","",N,N],[13,"Release","","release the touch object",82,N],[4,"Event","","",N,N],[13,"Down","","touch down event and beginning of a touch sequence",83,N],[12,"serial","wayland_client::protocol::wl_touch::Event","",83,N],[12,"time","","",83,N],[12,"surface","","",83,N],[12,"id","","",83,N],[12,"x","","",83,N],[12,"y","","",83,N],[13,"Up","wayland_client::protocol::wl_touch","end of a touch event sequence",83,N],[12,"serial","wayland_client::protocol::wl_touch::Event","",83,N],[12,"time","","",83,N],[12,"id","","",83,N],[13,"Motion","wayland_client::protocol::wl_touch","update of touch point coordinates",83,N],[12,"time","wayland_client::protocol::wl_touch::Event","",83,N],[12,"id","","",83,N],[12,"x","","",83,N],[12,"y","","",83,N],[13,"Frame","wayland_client::protocol::wl_touch","end of touch frame event",83,N],[13,"Cancel","","touch session cancelled",83,N],[8,"RequestsTrait","","",N,N],[10,"release","","release the touch object",84,N],[0,"wl_output","wayland_client::protocol","compositor output region",N,N],[3,"Mode","wayland_client::protocol::wl_output","mode information",N,N],[3,"WlOutput","","",N,N],[4,"Subpixel","","subpixel geometry information",N,N],[13,"Unknown","","unknown geometry",85,N],[13,"None","","no geometry",85,N],[13,"HorizontalRgb","","horizontal RGB",85,N],[13,"HorizontalBgr","","horizontal BGR",85,N],[13,"VerticalRgb","","vertical RGB",85,N],[13,"VerticalBgr","","vertical BGR",85,N],[4,"Transform","","transform from framebuffer to output",N,N],[13,"Normal","","no transform",86,N],[13,"_90","","90 degrees counter-clockwise",86,N],[13,"_180","","180 degrees counter-clockwise",86,N],[13,"_270","","270 degrees counter-clockwise",86,N],[13,"Flipped","","180 degree flip around a vertical axis",86,N],[13,"Flipped90","","flip and rotate 90 degrees counter-clockwise",86,N],[13,"Flipped180","","flip and rotate 180 degrees counter-clockwise",86,N],[13,"Flipped270","","flip and rotate 270 degrees counter-clockwise",86,N],[4,"Request","","",N,N],[13,"Release","","release the output object",87,N],[4,"Event","","",N,N],[13,"Geometry","","properties of the output",88,N],[12,"x","wayland_client::protocol::wl_output::Event","",88,N],[12,"y","","",88,N],[12,"physical_width","","",88,N],[12,"physical_height","","",88,N],[12,"subpixel","","",88,N],[12,"make","","",88,N],[12,"model","","",88,N],[12,"transform","","",88,N],[13,"Mode","wayland_client::protocol::wl_output","advertise available modes for the output",88,N],[12,"flags","wayland_client::protocol::wl_output::Event","",88,N],[12,"width","","",88,N],[12,"height","","",88,N],[12,"refresh","","",88,N],[13,"Done","wayland_client::protocol::wl_output","sent all information about output",88,N],[13,"Scale","","output scaling properties",88,N],[12,"factor","wayland_client::protocol::wl_output::Event","",88,N],[8,"RequestsTrait","wayland_client::protocol::wl_output","",N,N],[10,"release","","release the output object",89,N],[0,"wl_region","wayland_client::protocol","region interface",N,N],[3,"WlRegion","wayland_client::protocol::wl_region","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy region",90,N],[13,"Add","","add rectangle to region",90,N],[12,"x","wayland_client::protocol::wl_region::Request","",90,N],[12,"y","","",90,N],[12,"width","","",90,N],[12,"height","","",90,N],[13,"Subtract","wayland_client::protocol::wl_region","subtract rectangle from region",90,N],[12,"x","wayland_client::protocol::wl_region::Request","",90,N],[12,"y","","",90,N],[12,"width","","",90,N],[12,"height","","",90,N],[4,"Event","wayland_client::protocol::wl_region","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy region",91,N],[10,"add","","add rectangle to region",91,N],[10,"subtract","","subtract rectangle from region",91,N],[0,"wl_subcompositor","wayland_client::protocol","sub-surface compositing",N,N],[3,"WlSubcompositor","wayland_client::protocol::wl_subcompositor","",N,N],[4,"Error","","",N,N],[13,"BadSurface","","the to-be sub-surface is invalid",92,N],[4,"Request","","",N,N],[13,"Destroy","","unbind from the subcompositor interface",93,N],[13,"GetSubsurface","","give a surface the role sub-surface",93,N],[12,"id","wayland_client::protocol::wl_subcompositor::Request","",93,N],[12,"surface","","",93,N],[12,"parent","","",93,N],[4,"Event","wayland_client::protocol::wl_subcompositor","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","unbind from the subcompositor interface",94,N],[10,"get_subsurface","","give a surface the role sub-surface",94,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[0,"wl_subsurface","wayland_client::protocol","sub-surface interface to a wl_surface",N,N],[3,"WlSubsurface","wayland_client::protocol::wl_subsurface","",N,N],[4,"Error","","",N,N],[13,"BadSurface","","wl_surface is not a sibling or the parent",95,N],[4,"Request","","",N,N],[13,"Destroy","","remove sub-surface interface",96,N],[13,"SetPosition","","reposition the sub-surface",96,N],[12,"x","wayland_client::protocol::wl_subsurface::Request","",96,N],[12,"y","","",96,N],[13,"PlaceAbove","wayland_client::protocol::wl_subsurface","restack the sub-surface",96,N],[12,"sibling","wayland_client::protocol::wl_subsurface::Request","",96,N],[13,"PlaceBelow","wayland_client::protocol::wl_subsurface","restack the sub-surface",96,N],[12,"sibling","wayland_client::protocol::wl_subsurface::Request","",96,N],[13,"SetSync","wayland_client::protocol::wl_subsurface","set sub-surface to synchronized mode",96,N],[13,"SetDesync","","set sub-surface to desynchronized mode",96,N],[4,"Event","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove sub-surface interface",97,N],[10,"set_position","","reposition the sub-surface",97,N],[10,"place_above","","restack the sub-surface",97,N],[10,"place_below","","restack the sub-surface",97,N],[10,"set_sync","","set sub-surface to synchronized mode",97,N],[10,"set_desync","","set sub-surface to desynchronized mode",97,N],[11,"clone","wayland_client::protocol::wl_display","",22,[[["self"]],["error"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",22,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",22,[[["self"]],["u32"]]],[11,"is_destructor","","",23,[[["self"]],["bool"]]],[11,"from_raw_c","","",23,N],[11,"as_raw_c_in","","",23,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",24,[[["self"]],["bool"]]],[11,"from_raw_c","","",24,N],[11,"as_raw_c_in","","",24,[[["self"],["f"]],["t"]]],[11,"c_interface","","",98,N],[11,"sync","wayland_client","",7,[[["self"]],["result",["newproxy"]]]],[11,"get_registry","","",7,[[["self"]],["result",["newproxy"]]]],[11,"is_destructor","wayland_client::protocol::wl_registry","",26,[[["self"]],["bool"]]],[11,"from_raw_c","","",26,N],[11,"as_raw_c_in","","",26,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",27,[[["self"]],["bool"]]],[11,"from_raw_c","","",27,N],[11,"as_raw_c_in","","",27,[[["self"],["f"]],["t"]]],[11,"c_interface","","",99,N],[11,"bind","wayland_client","",7,[[["self"],["u32"],["u32"]],["result",["newproxy"]]]],[11,"is_destructor","wayland_client::protocol::wl_callback","",100,[[["self"]],["bool"]]],[11,"from_raw_c","","",100,N],[11,"as_raw_c_in","","",100,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",29,[[["self"]],["bool"]]],[11,"from_raw_c","","",29,N],[11,"as_raw_c_in","","",29,[[["self"],["f"]],["t"]]],[11,"c_interface","","",101,N],[11,"is_destructor","wayland_client::protocol::wl_compositor","",30,[[["self"]],["bool"]]],[11,"from_raw_c","","",30,N],[11,"as_raw_c_in","","",30,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",102,[[["self"]],["bool"]]],[11,"from_raw_c","","",102,N],[11,"as_raw_c_in","","",102,[[["self"],["f"]],["t"]]],[11,"c_interface","","",103,N],[11,"create_surface","wayland_client","",7,[[["self"]],["result",["newproxy"]]]],[11,"create_region","","",7,[[["self"]],["result",["newproxy"]]]],[11,"is_destructor","wayland_client::protocol::wl_shm_pool","",32,[[["self"]],["bool"]]],[11,"from_raw_c","","",32,N],[11,"as_raw_c_in","","",32,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",104,[[["self"]],["bool"]]],[11,"from_raw_c","","",104,N],[11,"as_raw_c_in","","",104,[[["self"],["f"]],["t"]]],[11,"c_interface","","",105,N],[11,"create_buffer","wayland_client","",7,[[["self"],["i32"],["i32"],["i32"],["i32"],["format"]],["result",["newproxy"]]]],[11,"destroy","","",7,N],[11,"resize","","",7,N],[11,"clone","wayland_client::protocol::wl_shm","",34,[[["self"]],["error"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",34,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",34,[[["self"]],["u32"]]],[11,"clone","","",35,[[["self"]],["format"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["format"]],["bool"]]],[11,"from_raw","","",35,[[["u32"]],["option",["format"]]]],[11,"to_raw","","",35,[[["self"]],["u32"]]],[11,"is_destructor","","",36,[[["self"]],["bool"]]],[11,"from_raw_c","","",36,N],[11,"as_raw_c_in","","",36,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",37,[[["self"]],["bool"]]],[11,"from_raw_c","","",37,N],[11,"as_raw_c_in","","",37,[[["self"],["f"]],["t"]]],[11,"c_interface","","",106,N],[11,"create_pool","wayland_client","",7,[[["self"],["rawfd"],["i32"]],["result",["newproxy"]]]],[11,"is_destructor","wayland_client::protocol::wl_buffer","",39,[[["self"]],["bool"]]],[11,"from_raw_c","","",39,N],[11,"as_raw_c_in","","",39,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",40,[[["self"]],["bool"]]],[11,"from_raw_c","","",40,N],[11,"as_raw_c_in","","",40,[[["self"],["f"]],["t"]]],[11,"c_interface","","",107,N],[11,"destroy","wayland_client","",7,N],[11,"clone","wayland_client::protocol::wl_data_offer","",42,[[["self"]],["error"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",42,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",42,[[["self"]],["u32"]]],[11,"is_destructor","","",43,[[["self"]],["bool"]]],[11,"from_raw_c","","",43,N],[11,"as_raw_c_in","","",43,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",44,[[["self"]],["bool"]]],[11,"from_raw_c","","",44,N],[11,"as_raw_c_in","","",44,[[["self"],["f"]],["t"]]],[11,"c_interface","","",108,N],[11,"accept","wayland_client","",7,N],[11,"receive","","",7,N],[11,"destroy","","",7,N],[11,"finish","","",7,N],[11,"set_actions","","",7,N],[11,"clone","wayland_client::protocol::wl_data_source","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",46,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",46,[[["self"]],["u32"]]],[11,"is_destructor","","",47,[[["self"]],["bool"]]],[11,"from_raw_c","","",47,N],[11,"as_raw_c_in","","",47,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",48,[[["self"]],["bool"]]],[11,"from_raw_c","","",48,N],[11,"as_raw_c_in","","",48,[[["self"],["f"]],["t"]]],[11,"c_interface","","",109,N],[11,"offer","wayland_client","",7,N],[11,"destroy","","",7,N],[11,"set_actions","","",7,N],[11,"clone","wayland_client::protocol::wl_data_device","",50,[[["self"]],["error"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",50,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",50,[[["self"]],["u32"]]],[11,"is_destructor","","",51,[[["self"]],["bool"]]],[11,"from_raw_c","","",51,N],[11,"as_raw_c_in","","",51,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",52,[[["self"]],["bool"]]],[11,"from_raw_c","","",52,N],[11,"as_raw_c_in","","",52,[[["self"],["f"]],["t"]]],[11,"c_interface","","",110,N],[11,"start_drag","wayland_client","",7,N],[11,"set_selection","","",7,N],[11,"release","","",7,N],[11,"eq","wayland_client::protocol::wl_data_device_manager","",111,[[["self"],["dndaction"]],["bool"]]],[11,"ne","","",111,[[["self"],["dndaction"]],["bool"]]],[11,"clone","","",111,[[["self"]],["dndaction"]]],[11,"partial_cmp","","",111,[[["self"],["dndaction"]],["option",["ordering"]]]],[11,"lt","","",111,[[["self"],["dndaction"]],["bool"]]],[11,"le","","",111,[[["self"],["dndaction"]],["bool"]]],[11,"gt","","",111,[[["self"],["dndaction"]],["bool"]]],[11,"ge","","",111,[[["self"],["dndaction"]],["bool"]]],[11,"cmp","","",111,[[["self"],["dndaction"]],["ordering"]]],[11,"hash","","",111,N],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[18,"None","","no action",111,N],[18,"Copy","","copy action",111,N],[18,"Move","","move action",111,N],[18,"Ask","","ask action",111,N],[11,"empty","","Returns an empty set of flags.",111,[[],["dndaction"]]],[11,"all","","Returns the set containing all flags.",111,[[],["dndaction"]]],[11,"bits","","Returns the raw value of the flags currently stored.",111,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",111,[[["u32"]],["option",["dndaction"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",111,[[["u32"]],["dndaction"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",111,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",111,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",111,[[["self"],["dndaction"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",111,[[["self"],["dndaction"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",111,[[["self"],["dndaction"]]]],[11,"remove","","Removes the specified flags in-place.",111,[[["self"],["dndaction"]]]],[11,"toggle","","Toggles the specified flags in-place.",111,[[["self"],["dndaction"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",111,[[["self"],["dndaction"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",111,[[["self"],["dndaction"]],["dndaction"]]],[11,"bitor_assign","","Adds the set of flags.",111,[[["self"],["dndaction"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",111,[[["self"],["dndaction"]],["dndaction"]]],[11,"bitxor_assign","","Toggles the set of flags.",111,[[["self"],["dndaction"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",111,[[["self"],["dndaction"]],["dndaction"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",111,[[["self"],["dndaction"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",111,[[["self"],["dndaction"]],["dndaction"]]],[11,"sub_assign","","Disables all flags enabled in the set.",111,[[["self"],["dndaction"]]]],[11,"not","","Returns the complement of this set of flags.",111,[[["self"]],["dndaction"]]],[11,"extend","","",111,[[["self"],["t"]]]],[11,"from_iter","","",111,[[["t"]],["dndaction"]]],[11,"from_raw","","",111,[[["u32"]],["option",["dndaction"]]]],[11,"to_raw","","",111,[[["self"]],["u32"]]],[11,"is_destructor","","",54,[[["self"]],["bool"]]],[11,"from_raw_c","","",54,N],[11,"as_raw_c_in","","",54,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",112,[[["self"]],["bool"]]],[11,"from_raw_c","","",112,N],[11,"as_raw_c_in","","",112,[[["self"],["f"]],["t"]]],[11,"c_interface","","",113,N],[11,"create_data_source","wayland_client","",7,[[["self"]],["result",["newproxy"]]]],[11,"get_data_device","","",7,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"clone","wayland_client::protocol::wl_shell","",56,[[["self"]],["error"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",56,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",56,[[["self"]],["u32"]]],[11,"is_destructor","","",57,[[["self"]],["bool"]]],[11,"from_raw_c","","",57,N],[11,"as_raw_c_in","","",57,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",114,[[["self"]],["bool"]]],[11,"from_raw_c","","",114,N],[11,"as_raw_c_in","","",114,[[["self"],["f"]],["t"]]],[11,"c_interface","","",115,N],[11,"get_shell_surface","wayland_client","",7,[[["self"],["proxy"]],["result",["newproxy"]]]],[11,"eq","wayland_client::protocol::wl_shell_surface","",116,[[["self"],["resize"]],["bool"]]],[11,"ne","","",116,[[["self"],["resize"]],["bool"]]],[11,"clone","","",116,[[["self"]],["resize"]]],[11,"partial_cmp","","",116,[[["self"],["resize"]],["option",["ordering"]]]],[11,"lt","","",116,[[["self"],["resize"]],["bool"]]],[11,"le","","",116,[[["self"],["resize"]],["bool"]]],[11,"gt","","",116,[[["self"],["resize"]],["bool"]]],[11,"ge","","",116,[[["self"],["resize"]],["bool"]]],[11,"cmp","","",116,[[["self"],["resize"]],["ordering"]]],[11,"hash","","",116,N],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[18,"None","","no edge",116,N],[18,"Top","","top edge",116,N],[18,"Bottom","","bottom edge",116,N],[18,"Left","","left edge",116,N],[18,"TopLeft","","top and left edges",116,N],[18,"BottomLeft","","bottom and left edges",116,N],[18,"Right","","right edge",116,N],[18,"TopRight","","top and right edges",116,N],[18,"BottomRight","","bottom and right edges",116,N],[11,"empty","","Returns an empty set of flags.",116,[[],["resize"]]],[11,"all","","Returns the set containing all flags.",116,[[],["resize"]]],[11,"bits","","Returns the raw value of the flags currently stored.",116,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",116,[[["u32"]],["option",["resize"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",116,[[["u32"]],["resize"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",116,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",116,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",116,[[["self"],["resize"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",116,[[["self"],["resize"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",116,[[["self"],["resize"]]]],[11,"remove","","Removes the specified flags in-place.",116,[[["self"],["resize"]]]],[11,"toggle","","Toggles the specified flags in-place.",116,[[["self"],["resize"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",116,[[["self"],["resize"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",116,[[["self"],["resize"]],["resize"]]],[11,"bitor_assign","","Adds the set of flags.",116,[[["self"],["resize"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",116,[[["self"],["resize"]],["resize"]]],[11,"bitxor_assign","","Toggles the set of flags.",116,[[["self"],["resize"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",116,[[["self"],["resize"]],["resize"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",116,[[["self"],["resize"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",116,[[["self"],["resize"]],["resize"]]],[11,"sub_assign","","Disables all flags enabled in the set.",116,[[["self"],["resize"]]]],[11,"not","","Returns the complement of this set of flags.",116,[[["self"]],["resize"]]],[11,"extend","","",116,[[["self"],["t"]]]],[11,"from_iter","","",116,[[["t"]],["resize"]]],[11,"from_raw","","",116,[[["u32"]],["option",["resize"]]]],[11,"to_raw","","",116,[[["self"]],["u32"]]],[11,"eq","","",117,[[["self"],["transient"]],["bool"]]],[11,"ne","","",117,[[["self"],["transient"]],["bool"]]],[11,"clone","","",117,[[["self"]],["transient"]]],[11,"partial_cmp","","",117,[[["self"],["transient"]],["option",["ordering"]]]],[11,"lt","","",117,[[["self"],["transient"]],["bool"]]],[11,"le","","",117,[[["self"],["transient"]],["bool"]]],[11,"gt","","",117,[[["self"],["transient"]],["bool"]]],[11,"ge","","",117,[[["self"],["transient"]],["bool"]]],[11,"cmp","","",117,[[["self"],["transient"]],["ordering"]]],[11,"hash","","",117,N],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[18,"Inactive","","do not set keyboard focus",117,N],[11,"empty","","Returns an empty set of flags.",117,[[],["transient"]]],[11,"all","","Returns the set containing all flags.",117,[[],["transient"]]],[11,"bits","","Returns the raw value of the flags currently stored.",117,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",117,[[["u32"]],["option",["transient"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",117,[[["u32"]],["transient"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",117,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",117,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",117,[[["self"],["transient"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",117,[[["self"],["transient"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",117,[[["self"],["transient"]]]],[11,"remove","","Removes the specified flags in-place.",117,[[["self"],["transient"]]]],[11,"toggle","","Toggles the specified flags in-place.",117,[[["self"],["transient"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",117,[[["self"],["transient"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",117,[[["self"],["transient"]],["transient"]]],[11,"bitor_assign","","Adds the set of flags.",117,[[["self"],["transient"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",117,[[["self"],["transient"]],["transient"]]],[11,"bitxor_assign","","Toggles the set of flags.",117,[[["self"],["transient"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",117,[[["self"],["transient"]],["transient"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",117,[[["self"],["transient"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",117,[[["self"],["transient"]],["transient"]]],[11,"sub_assign","","Disables all flags enabled in the set.",117,[[["self"],["transient"]]]],[11,"not","","Returns the complement of this set of flags.",117,[[["self"]],["transient"]]],[11,"extend","","",117,[[["self"],["t"]]]],[11,"from_iter","","",117,[[["t"]],["transient"]]],[11,"from_raw","","",117,[[["u32"]],["option",["transient"]]]],[11,"to_raw","","",117,[[["self"]],["u32"]]],[11,"clone","","",59,[[["self"]],["fullscreenmethod"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"eq","","",59,[[["self"],["fullscreenmethod"]],["bool"]]],[11,"from_raw","","",59,[[["u32"]],["option",["fullscreenmethod"]]]],[11,"to_raw","","",59,[[["self"]],["u32"]]],[11,"is_destructor","","",60,[[["self"]],["bool"]]],[11,"from_raw_c","","",60,N],[11,"as_raw_c_in","","",60,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",61,[[["self"]],["bool"]]],[11,"from_raw_c","","",61,N],[11,"as_raw_c_in","","",61,[[["self"],["f"]],["t"]]],[11,"c_interface","","",118,N],[11,"pong","wayland_client","",7,N],[11,"_move","","",7,N],[11,"resize","","",7,N],[11,"set_toplevel","","",7,N],[11,"set_transient","","",7,N],[11,"set_fullscreen","","",7,N],[11,"set_popup","","",7,N],[11,"set_maximized","","",7,N],[11,"set_title","","",7,N],[11,"set_class","","",7,N],[11,"clone","wayland_client::protocol::wl_surface","",63,[[["self"]],["error"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"eq","","",63,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",63,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",63,[[["self"]],["u32"]]],[11,"is_destructor","","",64,[[["self"]],["bool"]]],[11,"from_raw_c","","",64,N],[11,"as_raw_c_in","","",64,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",65,[[["self"]],["bool"]]],[11,"from_raw_c","","",65,N],[11,"as_raw_c_in","","",65,[[["self"],["f"]],["t"]]],[11,"c_interface","","",119,N],[11,"destroy","wayland_client","",7,N],[11,"attach","","",7,N],[11,"damage","","",7,N],[11,"frame","","",7,[[["self"]],["result",["newproxy"]]]],[11,"set_opaque_region","","",7,N],[11,"set_input_region","","",7,N],[11,"commit","","",7,N],[11,"set_buffer_transform","","",7,N],[11,"set_buffer_scale","","",7,N],[11,"damage_buffer","","",7,N],[11,"eq","wayland_client::protocol::wl_seat","",120,[[["self"],["capability"]],["bool"]]],[11,"ne","","",120,[[["self"],["capability"]],["bool"]]],[11,"clone","","",120,[[["self"]],["capability"]]],[11,"partial_cmp","","",120,[[["self"],["capability"]],["option",["ordering"]]]],[11,"lt","","",120,[[["self"],["capability"]],["bool"]]],[11,"le","","",120,[[["self"],["capability"]],["bool"]]],[11,"gt","","",120,[[["self"],["capability"]],["bool"]]],[11,"ge","","",120,[[["self"],["capability"]],["bool"]]],[11,"cmp","","",120,[[["self"],["capability"]],["ordering"]]],[11,"hash","","",120,N],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[18,"Pointer","","the seat has pointer devices",120,N],[18,"Keyboard","","the seat has one or more keyboards",120,N],[18,"Touch","","the seat has touch devices",120,N],[11,"empty","","Returns an empty set of flags.",120,[[],["capability"]]],[11,"all","","Returns the set containing all flags.",120,[[],["capability"]]],[11,"bits","","Returns the raw value of the flags currently stored.",120,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,[[["u32"]],["option",["capability"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,[[["u32"]],["capability"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",120,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,[[["self"],["capability"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,[[["self"],["capability"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",120,[[["self"],["capability"]]]],[11,"remove","","Removes the specified flags in-place.",120,[[["self"],["capability"]]]],[11,"toggle","","Toggles the specified flags in-place.",120,[[["self"],["capability"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,[[["self"],["capability"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",120,[[["self"],["capability"]],["capability"]]],[11,"bitor_assign","","Adds the set of flags.",120,[[["self"],["capability"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,[[["self"],["capability"]],["capability"]]],[11,"bitxor_assign","","Toggles the set of flags.",120,[[["self"],["capability"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",120,[[["self"],["capability"]],["capability"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",120,[[["self"],["capability"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",120,[[["self"],["capability"]],["capability"]]],[11,"sub_assign","","Disables all flags enabled in the set.",120,[[["self"],["capability"]]]],[11,"not","","Returns the complement of this set of flags.",120,[[["self"]],["capability"]]],[11,"extend","","",120,[[["self"],["t"]]]],[11,"from_iter","","",120,[[["t"]],["capability"]]],[11,"from_raw","","",120,[[["u32"]],["option",["capability"]]]],[11,"to_raw","","",120,[[["self"]],["u32"]]],[11,"is_destructor","","",67,[[["self"]],["bool"]]],[11,"from_raw_c","","",67,N],[11,"as_raw_c_in","","",67,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",68,[[["self"]],["bool"]]],[11,"from_raw_c","","",68,N],[11,"as_raw_c_in","","",68,[[["self"],["f"]],["t"]]],[11,"c_interface","","",121,N],[11,"get_pointer","wayland_client","",7,[[["self"]],["result",["newproxy"]]]],[11,"get_keyboard","","",7,[[["self"]],["result",["newproxy"]]]],[11,"get_touch","","",7,[[["self"]],["result",["newproxy"]]]],[11,"release","","",7,N],[11,"clone","wayland_client::protocol::wl_pointer","",70,[[["self"]],["error"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"eq","","",70,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",70,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",70,[[["self"]],["u32"]]],[11,"clone","","",71,[[["self"]],["buttonstate"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"eq","","",71,[[["self"],["buttonstate"]],["bool"]]],[11,"from_raw","","",71,[[["u32"]],["option",["buttonstate"]]]],[11,"to_raw","","",71,[[["self"]],["u32"]]],[11,"clone","","",72,[[["self"]],["axis"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"eq","","",72,[[["self"],["axis"]],["bool"]]],[11,"from_raw","","",72,[[["u32"]],["option",["axis"]]]],[11,"to_raw","","",72,[[["self"]],["u32"]]],[11,"clone","","",73,[[["self"]],["axissource"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"eq","","",73,[[["self"],["axissource"]],["bool"]]],[11,"from_raw","","",73,[[["u32"]],["option",["axissource"]]]],[11,"to_raw","","",73,[[["self"]],["u32"]]],[11,"is_destructor","","",74,[[["self"]],["bool"]]],[11,"from_raw_c","","",74,N],[11,"as_raw_c_in","","",74,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",75,[[["self"]],["bool"]]],[11,"from_raw_c","","",75,N],[11,"as_raw_c_in","","",75,[[["self"],["f"]],["t"]]],[11,"c_interface","","",122,N],[11,"set_cursor","wayland_client","",7,N],[11,"release","","",7,N],[11,"clone","wayland_client::protocol::wl_keyboard","",77,[[["self"]],["keymapformat"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"eq","","",77,[[["self"],["keymapformat"]],["bool"]]],[11,"from_raw","","",77,[[["u32"]],["option",["keymapformat"]]]],[11,"to_raw","","",77,[[["self"]],["u32"]]],[11,"clone","","",78,[[["self"]],["keystate"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"eq","","",78,[[["self"],["keystate"]],["bool"]]],[11,"from_raw","","",78,[[["u32"]],["option",["keystate"]]]],[11,"to_raw","","",78,[[["self"]],["u32"]]],[11,"is_destructor","","",79,[[["self"]],["bool"]]],[11,"from_raw_c","","",79,N],[11,"as_raw_c_in","","",79,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",80,[[["self"]],["bool"]]],[11,"from_raw_c","","",80,N],[11,"as_raw_c_in","","",80,[[["self"],["f"]],["t"]]],[11,"c_interface","","",123,N],[11,"release","wayland_client","",7,N],[11,"is_destructor","wayland_client::protocol::wl_touch","",82,[[["self"]],["bool"]]],[11,"from_raw_c","","",82,N],[11,"as_raw_c_in","","",82,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",83,[[["self"]],["bool"]]],[11,"from_raw_c","","",83,N],[11,"as_raw_c_in","","",83,[[["self"],["f"]],["t"]]],[11,"c_interface","","",124,N],[11,"release","wayland_client","",7,N],[11,"clone","wayland_client::protocol::wl_output","",85,[[["self"]],["subpixel"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"eq","","",85,[[["self"],["subpixel"]],["bool"]]],[11,"from_raw","","",85,[[["u32"]],["option",["subpixel"]]]],[11,"to_raw","","",85,[[["self"]],["u32"]]],[11,"clone","","",86,[[["self"]],["transform"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"eq","","",86,[[["self"],["transform"]],["bool"]]],[11,"from_raw","","",86,[[["u32"]],["option",["transform"]]]],[11,"to_raw","","",86,[[["self"]],["u32"]]],[11,"eq","","",125,[[["self"],["mode"]],["bool"]]],[11,"ne","","",125,[[["self"],["mode"]],["bool"]]],[11,"clone","","",125,[[["self"]],["mode"]]],[11,"partial_cmp","","",125,[[["self"],["mode"]],["option",["ordering"]]]],[11,"lt","","",125,[[["self"],["mode"]],["bool"]]],[11,"le","","",125,[[["self"],["mode"]],["bool"]]],[11,"gt","","",125,[[["self"],["mode"]],["bool"]]],[11,"ge","","",125,[[["self"],["mode"]],["bool"]]],[11,"cmp","","",125,[[["self"],["mode"]],["ordering"]]],[11,"hash","","",125,N],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[18,"Current","","indicates this is the current mode",125,N],[18,"Preferred","","indicates this is the preferred mode",125,N],[11,"empty","","Returns an empty set of flags.",125,[[],["mode"]]],[11,"all","","Returns the set containing all flags.",125,[[],["mode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",125,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",125,[[["u32"]],["option",["mode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",125,[[["u32"]],["mode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",125,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",125,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",125,[[["self"],["mode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",125,[[["self"],["mode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",125,[[["self"],["mode"]]]],[11,"remove","","Removes the specified flags in-place.",125,[[["self"],["mode"]]]],[11,"toggle","","Toggles the specified flags in-place.",125,[[["self"],["mode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",125,[[["self"],["mode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",125,[[["self"],["mode"]],["mode"]]],[11,"bitor_assign","","Adds the set of flags.",125,[[["self"],["mode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",125,[[["self"],["mode"]],["mode"]]],[11,"bitxor_assign","","Toggles the set of flags.",125,[[["self"],["mode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",125,[[["self"],["mode"]],["mode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",125,[[["self"],["mode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",125,[[["self"],["mode"]],["mode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",125,[[["self"],["mode"]]]],[11,"not","","Returns the complement of this set of flags.",125,[[["self"]],["mode"]]],[11,"extend","","",125,[[["self"],["t"]]]],[11,"from_iter","","",125,[[["t"]],["mode"]]],[11,"from_raw","","",125,[[["u32"]],["option",["mode"]]]],[11,"to_raw","","",125,[[["self"]],["u32"]]],[11,"is_destructor","","",87,[[["self"]],["bool"]]],[11,"from_raw_c","","",87,N],[11,"as_raw_c_in","","",87,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",88,[[["self"]],["bool"]]],[11,"from_raw_c","","",88,N],[11,"as_raw_c_in","","",88,[[["self"],["f"]],["t"]]],[11,"c_interface","","",126,N],[11,"release","wayland_client","",7,N],[11,"is_destructor","wayland_client::protocol::wl_region","",90,[[["self"]],["bool"]]],[11,"from_raw_c","","",90,N],[11,"as_raw_c_in","","",90,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",127,[[["self"]],["bool"]]],[11,"from_raw_c","","",127,N],[11,"as_raw_c_in","","",127,[[["self"],["f"]],["t"]]],[11,"c_interface","","",128,N],[11,"destroy","wayland_client","",7,N],[11,"add","","",7,N],[11,"subtract","","",7,N],[11,"clone","wayland_client::protocol::wl_subcompositor","",92,[[["self"]],["error"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",92,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",92,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",92,[[["self"]],["u32"]]],[11,"is_destructor","","",93,[[["self"]],["bool"]]],[11,"from_raw_c","","",93,N],[11,"as_raw_c_in","","",93,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",129,[[["self"]],["bool"]]],[11,"from_raw_c","","",129,N],[11,"as_raw_c_in","","",129,[[["self"],["f"]],["t"]]],[11,"c_interface","","",130,N],[11,"destroy","wayland_client","",7,N],[11,"get_subsurface","","",7,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[11,"clone","wayland_client::protocol::wl_subsurface","",95,[[["self"]],["error"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"eq","","",95,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",95,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",95,[[["self"]],["u32"]]],[11,"is_destructor","","",96,[[["self"]],["bool"]]],[11,"from_raw_c","","",96,N],[11,"as_raw_c_in","","",96,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",131,[[["self"]],["bool"]]],[11,"from_raw_c","","",131,N],[11,"as_raw_c_in","","",131,[[["self"],["f"]],["t"]]],[11,"c_interface","","",132,N],[11,"destroy","wayland_client","",7,N],[11,"set_position","","",7,N],[11,"place_above","","",7,N],[11,"place_below","","",7,N],[11,"set_sync","","",7,N],[11,"set_desync","","",7,N],[14,"global_filter","","Convenience macro to create a `GlobalManager` callback",N,N],[11,"is_destructor","wayland_client::commons","",133,[[["self"]],["bool"]]],[11,"from_raw_c","","",133,N],[11,"as_raw_c_in","","",133,[[["self"],["f"]],["t"]]],[11,"c_interface","","",134,N],[11,"deref","wayland_client::sys::client","",135,[[["self"]],["waylandclient"]]],[11,"deref","","",136,[[["self"]],["option"]]],[11,"initialize","","",135,N],[11,"initialize","","",136,N],[11,"is","wayland_client::commons","Returns true if the trait object wraps an object of type `__T`.",15,[[["self"]],["bool"]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the underlying object is of type `__T`. Returns the original boxed trait if it isn't.",15,[[["box",["implementation"]]],["result",["box","box"]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object if it is of type `__T`, or `None` if it isn't.",15,[[["self"]],["option"]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait object if it is of type `__T`, or `None` if it isn't.",15,[[["self"]],["option"]]],[11,"open","wayland_client::sys::client","",16,[[["str"]],["result",["waylandclient","dlerror"]]]]],"paths":[[4,"ConnectError"],[4,"GlobalError"],[4,"GlobalEvent"],[3,"Display"],[3,"EventQueue"],[3,"ReadEventsGuard"],[3,"GlobalManager"],[3,"Proxy"],[3,"NewProxy"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[3,"WlEglSurface"],[8,"MessageGroup"],[8,"Interface"],[8,"Implementation"],[3,"WaylandClient"],[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[19,"wl_argument"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Format"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"FullscreenMethod"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"ButtonState"],[4,"Axis"],[4,"AxisSource"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"KeymapFormat"],[4,"KeyState"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Subpixel"],[4,"Transform"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[3,"WlDisplay"],[3,"WlRegistry"],[4,"Request"],[3,"WlCallback"],[4,"Event"],[3,"WlCompositor"],[4,"Event"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"DndAction"],[4,"Event"],[3,"WlDataDeviceManager"],[4,"Event"],[3,"WlShell"],[3,"Resize"],[3,"Transient"],[3,"WlShellSurface"],[3,"WlSurface"],[3,"Capability"],[3,"WlSeat"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"Mode"],[3,"WlOutput"],[4,"Event"],[3,"WlRegion"],[4,"Event"],[3,"WlSubcompositor"],[4,"Event"],[3,"WlSubsurface"],[4,"NoMessage"],[3,"AnonymousObject"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WAYLAND_CLIENT_OPTION"]]};
searchIndex["wayland_commons"]={"doc":"Common definitions for wayland","items":[[3,"AnonymousObject","wayland_commons","Anonymous interface",N,N],[4,"NoMessage","","An empty enum representing a MessageGroup with no messages",N,N],[5,"downcast_impl","","Attempt to downcast a boxed `Implementation` trait object.",N,[[["box",["implementation"]]],["result",["box","box"]]]],[8,"MessageGroup","","A group of messages",N,N],[10,"is_destructor","","Whether this message is a destructor",0,[[["self"]],["bool"]]],[10,"from_raw_c","","Construct a message of this group from its C representation",0,N],[10,"as_raw_c_in","","Build a C representation of this message",0,[[["self"],["f"]],["t"]]],[8,"Interface","","The description of a wayland interface",N,N],[16,"Request","","Set of requests associated to this interface",1,N],[16,"Event","","Set of events associated to this interface",1,N],[18,"NAME","","Name of this interface",1,N],[10,"c_interface","","Pointer to the C representation of this interface",1,N],[8,"Implementation","","Trait representing implementations for wayland objects",N,N],[10,"receive","","Receive a message",2,[[["self"],["msg"],["meta"]]]],[11,"is","","Returns true if the trait object wraps an object of type `__T`.",2,[[["self"]],["bool"]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the underlying object is of type `__T`. Returns the original boxed trait if it isn't.",2,[[["box"]],["result",["box","box"]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object if it is of type `__T`, or `None` if it isn't.",2,[[["self"]],["option"]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait object if it is of type `__T`, or `None` if it isn't.",2,[[["self"]],["option"]]],[11,"c_interface","","",3,N],[11,"is_destructor","","",4,[[["self"]],["bool"]]],[11,"from_raw_c","","",4,N],[11,"as_raw_c_in","","",4,[[["self"],["f"]],["t"]]]],"paths":[[8,"MessageGroup"],[8,"Interface"],[8,"Implementation"],[3,"AnonymousObject"],[4,"NoMessage"]]};
searchIndex["wayland_protocols"]={"doc":"This crate provides bindings to the official wayland protocol extensions provided in https://cgit.freedesktop.org/wayland/wayland-protocols","items":[[0,"unstable","wayland_protocols","Unstable protocols from wayland-protocols",N,N],[0,"fullscreen_shell","wayland_protocols::unstable","Fullscreen shell protocol",N,N],[0,"v1","wayland_protocols::unstable::fullscreen_shell","",N,N],[0,"client","wayland_protocols::unstable::fullscreen_shell::v1","Client-side API of this protocol",N,N],[0,"zwp_fullscreen_shell_v1","wayland_protocols::unstable::fullscreen_shell::v1::client","displays a single surface per output",N,N],[3,"ZwpFullscreenShellV1","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",N,N],[4,"Capability","","capabilities advertised by the compositor",N,N],[13,"ArbitraryModes","","compositor is capable of almost any output mode",0,N],[13,"CursorPlane","","compositor has a separate cursor plane",0,N],[4,"PresentMethod","","different method to set the surface fullscreen",N,N],[13,"Default","","no preference, apply default policy",1,N],[13,"Center","","center the surface on the output",1,N],[13,"Zoom","","scale the surface, preserving aspect ratio, to the largest size that will fit on the output",1,N],[13,"ZoomCrop","","scale the surface, preserving aspect ratio, to fully fill the output cropping if needed",1,N],[13,"Stretch","","scale the surface to the size of the output ignoring aspect ratio",1,N],[4,"Error","","wl_fullscreen_shell error values",N,N],[13,"InvalidMethod","","present_method is not known",2,N],[4,"Request","","",N,N],[13,"Release","","release the wl_fullscreen_shell interface",3,N],[13,"PresentSurface","","present surface for display",3,N],[12,"surface","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Request","",3,N],[12,"method","","",3,N],[12,"output","","",3,N],[13,"PresentSurfaceForMode","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","present surface for display at a particular mode",3,N],[12,"surface","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Request","",3,N],[12,"output","","",3,N],[12,"framerate","","",3,N],[12,"feedback","","",3,N],[4,"Event","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",N,N],[13,"Capability","","advertises a capability of the compositor",4,N],[12,"capability","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Event","",4,N],[8,"RequestsTrait","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",N,N],[10,"release","","release the wl_fullscreen_shell interface",5,N],[10,"present_surface","","present surface for display",5,N],[10,"present_surface_for_mode","","present surface for display at a particular mode",5,[[["self"],["proxy"],["proxy"],["i32"]],["result",["newproxy"]]]],[0,"zwp_fullscreen_shell_mode_feedback_v1","wayland_protocols::unstable::fullscreen_shell::v1::client","",N,N],[3,"ZwpFullscreenShellModeFeedbackV1","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",N,N],[4,"Request","","",N,N],[4,"Event","","",N,N],[13,"ModeSuccessful","","mode switch succeeded",6,N],[13,"ModeFailed","","mode switch failed",6,N],[13,"PresentCancelled","","mode switch cancelled",6,N],[8,"RequestsTrait","","",N,N],[0,"c_interfaces","wayland_protocols::unstable::fullscreen_shell::v1","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::fullscreen_shell::v1::c_interfaces","",N,N],[7,"wl_output_interface","","",N,N],[7,"zwp_fullscreen_shell_v1_requests","","",N,N],[7,"zwp_fullscreen_shell_v1_events","","",N,N],[7,"zwp_fullscreen_shell_v1_interface","","",N,N],[7,"zwp_fullscreen_shell_mode_feedback_v1_events","","",N,N],[7,"zwp_fullscreen_shell_mode_feedback_v1_interface","","",N,N],[11,"clone","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",0,[[["self"]],["capability"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["capability"]],["bool"]]],[11,"from_raw","","",0,[[["u32"]],["option",["capability"]]]],[11,"to_raw","","",0,[[["self"]],["u32"]]],[11,"clone","","",1,[[["self"]],["presentmethod"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["presentmethod"]],["bool"]]],[11,"from_raw","","",1,[[["u32"]],["option",["presentmethod"]]]],[11,"to_raw","","",1,[[["self"]],["u32"]]],[11,"clone","","",2,[[["self"]],["error"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",2,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",2,[[["self"]],["u32"]]],[11,"is_destructor","","",3,[[["self"]],["bool"]]],[11,"from_raw_c","","",3,N],[11,"as_raw_c_in","","",3,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",4,[[["self"]],["bool"]]],[11,"from_raw_c","","",4,N],[11,"as_raw_c_in","","",4,[[["self"],["f"]],["t"]]],[11,"c_interface","","",7,N],[11,"is_destructor","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",8,[[["self"]],["bool"]]],[11,"from_raw_c","","",8,N],[11,"as_raw_c_in","","",8,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",6,[[["self"]],["bool"]]],[11,"from_raw_c","","",6,N],[11,"as_raw_c_in","","",6,[[["self"],["f"]],["t"]]],[11,"c_interface","","",9,N],[0,"idle_inhibit","wayland_protocols::unstable","Screensaver inhibition protocol",N,N],[0,"v1","wayland_protocols::unstable::idle_inhibit","",N,N],[0,"client","wayland_protocols::unstable::idle_inhibit::v1","Client-side API of this protocol",N,N],[0,"zwp_idle_inhibit_manager_v1","wayland_protocols::unstable::idle_inhibit::v1::client","control behavior when display idles",N,N],[3,"ZwpIdleInhibitManagerV1","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the idle inhibitor object",10,N],[13,"CreateInhibitor","","create a new inhibitor object",10,N],[12,"id","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1::Request","",10,N],[12,"surface","","",10,N],[4,"Event","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the idle inhibitor object",11,N],[10,"create_inhibitor","","create a new inhibitor object",11,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_idle_inhibitor_v1","wayland_protocols::unstable::idle_inhibit::v1::client","context object for inhibiting idle behavior",N,N],[3,"ZwpIdleInhibitorV1","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the idle inhibitor object",12,N],[4,"Event","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the idle inhibitor object",13,N],[0,"c_interfaces","wayland_protocols::unstable::idle_inhibit::v1","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::idle_inhibit::v1::c_interfaces","",N,N],[7,"zwp_idle_inhibit_manager_v1_requests","","",N,N],[7,"zwp_idle_inhibit_manager_v1_interface","","",N,N],[7,"zwp_idle_inhibitor_v1_requests","","",N,N],[7,"zwp_idle_inhibitor_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",10,[[["self"]],["bool"]]],[11,"from_raw_c","","",10,N],[11,"as_raw_c_in","","",10,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",14,[[["self"]],["bool"]]],[11,"from_raw_c","","",14,N],[11,"as_raw_c_in","","",14,[[["self"],["f"]],["t"]]],[11,"c_interface","","",15,N],[11,"is_destructor","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",12,[[["self"]],["bool"]]],[11,"from_raw_c","","",12,N],[11,"as_raw_c_in","","",12,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",16,[[["self"]],["bool"]]],[11,"from_raw_c","","",16,N],[11,"as_raw_c_in","","",16,[[["self"],["f"]],["t"]]],[11,"c_interface","","",17,N],[0,"input_method","wayland_protocols::unstable","Input method protocol",N,N],[0,"v1","wayland_protocols::unstable::input_method","",N,N],[0,"client","wayland_protocols::unstable::input_method::v1","Client-side API of this protocol",N,N],[0,"zwp_input_method_context_v1","wayland_protocols::unstable::input_method::v1::client","input method context",N,N],[3,"ZwpInputMethodContextV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","This is a destructor, once sent this object cannot be used any longer.",18,N],[13,"CommitString","","commit string",18,N],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"text","","",18,N],[13,"PreeditString","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit string",18,N],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"text","","",18,N],[12,"commit","","",18,N],[13,"PreeditStyling","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit styling",18,N],[12,"index","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"length","","",18,N],[12,"style","","",18,N],[13,"PreeditCursor","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit cursor",18,N],[12,"index","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[13,"DeleteSurroundingText","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","delete text",18,N],[12,"index","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"length","","",18,N],[13,"CursorPosition","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","set cursor to a new position",18,N],[12,"index","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"anchor","","",18,N],[13,"ModifiersMap","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",18,N],[12,"map","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[13,"Keysym","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","keysym",18,N],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"time","","",18,N],[12,"sym","","",18,N],[12,"state","","",18,N],[12,"modifiers","","",18,N],[13,"GrabKeyboard","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","grab hardware keyboard",18,N],[12,"keyboard","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[13,"Key","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","forward key event",18,N],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"time","","",18,N],[12,"key","","",18,N],[12,"state","","",18,N],[13,"Modifiers","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","forward modifiers event",18,N],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"mods_depressed","","",18,N],[12,"mods_latched","","",18,N],[12,"mods_locked","","",18,N],[12,"group","","",18,N],[13,"Language","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",18,N],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"language","","",18,N],[13,"TextDirection","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",18,N],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",18,N],[12,"direction","","",18,N],[4,"Event","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",N,N],[13,"SurroundingText","","surrounding text event",19,N],[12,"text","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",19,N],[12,"cursor","","",19,N],[12,"anchor","","",19,N],[13,"Reset","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",19,N],[13,"ContentType","","",19,N],[12,"hint","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",19,N],[12,"purpose","","",19,N],[13,"InvokeAction","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",19,N],[12,"button","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",19,N],[12,"index","","",19,N],[13,"CommitState","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",19,N],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",19,N],[13,"PreferredLanguage","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",19,N],[12,"language","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",19,N],[8,"RequestsTrait","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",N,N],[10,"destroy","","This is a destructor, you cannot send requests to this object any longer once this method is called.",20,N],[10,"commit_string","","commit string",20,N],[10,"preedit_string","","pre-edit string",20,N],[10,"preedit_styling","","pre-edit styling",20,N],[10,"preedit_cursor","","pre-edit cursor",20,N],[10,"delete_surrounding_text","","delete text",20,N],[10,"cursor_position","","set cursor to a new position",20,N],[10,"modifiers_map","","",20,N],[10,"keysym","","keysym",20,N],[10,"grab_keyboard","","grab hardware keyboard",20,[[["self"]],["result",["newproxy"]]]],[10,"key","","forward key event",20,N],[10,"modifiers","","forward modifiers event",20,N],[10,"language","","",20,N],[10,"text_direction","","",20,N],[0,"zwp_input_method_v1","wayland_protocols::unstable::input_method::v1::client","input method",N,N],[3,"ZwpInputMethodV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",N,N],[4,"Request","","",N,N],[4,"Event","","",N,N],[13,"Activate","","activate event",21,N],[12,"id","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1::Event","",21,N],[13,"Deactivate","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","deactivate event",21,N],[12,"context","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1::Event","",21,N],[8,"RequestsTrait","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",N,N],[0,"zwp_input_panel_v1","wayland_protocols::unstable::input_method::v1::client","interface for implementing keyboards",N,N],[3,"ZwpInputPanelV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",N,N],[4,"Request","","",N,N],[13,"GetInputPanelSurface","","",22,N],[12,"id","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1::Request","",22,N],[12,"surface","","",22,N],[4,"Event","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_input_panel_surface","","",23,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_input_panel_surface_v1","wayland_protocols::unstable::input_method::v1::client","",N,N],[3,"ZwpInputPanelSurfaceV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",N,N],[4,"Position","","",N,N],[13,"CenterBottom","","",24,N],[4,"Request","","",N,N],[13,"SetToplevel","","set the surface type as a keyboard",25,N],[12,"output","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1::Request","",25,N],[12,"position","","",25,N],[13,"SetOverlayPanel","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","set the surface type as an overlay panel",25,N],[4,"Event","","",N,N],[8,"RequestsTrait","","",N,N],[10,"set_toplevel","","set the surface type as a keyboard",26,N],[10,"set_overlay_panel","","set the surface type as an overlay panel",26,N],[0,"c_interfaces","wayland_protocols::unstable::input_method::v1","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::input_method::v1::c_interfaces","",N,N],[7,"wl_output_interface","","",N,N],[7,"wl_keyboard_interface","","",N,N],[7,"zwp_input_method_context_v1_requests","","",N,N],[7,"zwp_input_method_context_v1_events","","",N,N],[7,"zwp_input_method_context_v1_interface","","",N,N],[7,"zwp_input_method_v1_events","","",N,N],[7,"zwp_input_method_v1_interface","","",N,N],[7,"zwp_input_panel_v1_requests","","",N,N],[7,"zwp_input_panel_v1_interface","","",N,N],[7,"zwp_input_panel_surface_v1_requests","","",N,N],[7,"zwp_input_panel_surface_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",18,[[["self"]],["bool"]]],[11,"from_raw_c","","",18,N],[11,"as_raw_c_in","","",18,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",19,[[["self"]],["bool"]]],[11,"from_raw_c","","",19,N],[11,"as_raw_c_in","","",19,[[["self"],["f"]],["t"]]],[11,"c_interface","","",27,N],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",28,[[["self"]],["bool"]]],[11,"from_raw_c","","",28,N],[11,"as_raw_c_in","","",28,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",21,[[["self"]],["bool"]]],[11,"from_raw_c","","",21,N],[11,"as_raw_c_in","","",21,[[["self"],["f"]],["t"]]],[11,"c_interface","","",29,N],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",22,[[["self"]],["bool"]]],[11,"from_raw_c","","",22,N],[11,"as_raw_c_in","","",22,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",30,[[["self"]],["bool"]]],[11,"from_raw_c","","",30,N],[11,"as_raw_c_in","","",30,[[["self"],["f"]],["t"]]],[11,"c_interface","","",31,N],[11,"clone","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",24,[[["self"]],["position"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["position"]],["bool"]]],[11,"from_raw","","",24,[[["u32"]],["option",["position"]]]],[11,"to_raw","","",24,[[["self"]],["u32"]]],[11,"is_destructor","","",25,[[["self"]],["bool"]]],[11,"from_raw_c","","",25,N],[11,"as_raw_c_in","","",25,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",32,[[["self"]],["bool"]]],[11,"from_raw_c","","",32,N],[11,"as_raw_c_in","","",32,[[["self"],["f"]],["t"]]],[11,"c_interface","","",33,N],[0,"keyboard_shortcuts_inhibit","wayland_protocols::unstable","Protocol for inhibiting the compositor keyboard shortcuts",N,N],[0,"v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit","",N,N],[0,"client","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1","Client-side API of this protocol",N,N],[0,"zwp_keyboard_shortcuts_inhibit_manager_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard grab_manager",N,N],[3,"ZwpKeyboardShortcutsInhibitManagerV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",N,N],[4,"Error","","",N,N],[13,"AlreadyInhibited","","the shortcuts are already inhibited for this surface",34,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the keyboard shortcuts inhibitor object",35,N],[13,"InhibitShortcuts","","create a new keyboard shortcuts inhibitor object",35,N],[12,"id","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1::Request","",35,N],[12,"surface","","",35,N],[12,"seat","","",35,N],[4,"Event","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the keyboard shortcuts inhibitor object",36,N],[10,"inhibit_shortcuts","","create a new keyboard shortcuts inhibitor object",36,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_keyboard_shortcuts_inhibitor_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard shortcuts inhibitor",N,N],[3,"ZwpKeyboardShortcutsInhibitorV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the keyboard shortcuts inhibitor object",37,N],[4,"Event","","",N,N],[13,"Active","","shortcuts are inhibited",38,N],[13,"Inactive","","shortcuts are restored",38,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the keyboard shortcuts inhibitor object",39,N],[0,"c_interfaces","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1","C interfaces for this protocol",N,N],[7,"wl_seat_interface","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::c_interfaces","",N,N],[7,"wl_surface_interface","","",N,N],[7,"zwp_keyboard_shortcuts_inhibit_manager_v1_requests","","",N,N],[7,"zwp_keyboard_shortcuts_inhibit_manager_v1_interface","","",N,N],[7,"zwp_keyboard_shortcuts_inhibitor_v1_requests","","",N,N],[7,"zwp_keyboard_shortcuts_inhibitor_v1_events","","",N,N],[7,"zwp_keyboard_shortcuts_inhibitor_v1_interface","","",N,N],[11,"clone","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",34,[[["self"]],["error"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",34,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",34,[[["self"]],["u32"]]],[11,"is_destructor","","",35,[[["self"]],["bool"]]],[11,"from_raw_c","","",35,N],[11,"as_raw_c_in","","",35,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",40,[[["self"]],["bool"]]],[11,"from_raw_c","","",40,N],[11,"as_raw_c_in","","",40,[[["self"],["f"]],["t"]]],[11,"c_interface","","",41,N],[11,"is_destructor","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",37,[[["self"]],["bool"]]],[11,"from_raw_c","","",37,N],[11,"as_raw_c_in","","",37,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",38,[[["self"]],["bool"]]],[11,"from_raw_c","","",38,N],[11,"as_raw_c_in","","",38,[[["self"],["f"]],["t"]]],[11,"c_interface","","",42,N],[0,"linux_dmabuf","wayland_protocols::unstable","Linux DMA-BUF protocol",N,N],[0,"v1","wayland_protocols::unstable::linux_dmabuf","",N,N],[0,"client","wayland_protocols::unstable::linux_dmabuf::v1","Client-side API of this protocol",N,N],[0,"zwp_linux_dmabuf_v1","wayland_protocols::unstable::linux_dmabuf::v1::client","factory for creating dmabuf-based wl_buffers",N,N],[3,"ZwpLinuxDmabufV1","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","unbind the factory",43,N],[13,"CreateParams","","create a temporary object for buffer parameters",43,N],[12,"params_id","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Request","",43,N],[4,"Event","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",N,N],[13,"Format","","supported buffer format",44,N],[12,"format","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Event","",44,N],[13,"Modifier","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","supported buffer format modifier",44,N],[12,"format","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Event","",44,N],[12,"modifier_hi","","",44,N],[12,"modifier_lo","","",44,N],[8,"RequestsTrait","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",N,N],[10,"destroy","","unbind the factory",45,N],[10,"create_params","","create a temporary object for buffer parameters",45,[[["self"]],["result",["newproxy"]]]],[0,"zwp_linux_buffer_params_v1","wayland_protocols::unstable::linux_dmabuf::v1::client","parameters for creating a dmabuf-based wl_buffer",N,N],[3,"ZwpLinuxBufferParamsV1","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",N,N],[4,"Error","","",N,N],[13,"AlreadyUsed","","the dmabuf_batch object has already been used to create a wl_buffer",46,N],[13,"PlaneIdx","","plane index out of bounds",46,N],[13,"PlaneSet","","the plane index was already set",46,N],[13,"Incomplete","","missing or too many planes to create a buffer",46,N],[13,"InvalidFormat","","format not supported",46,N],[13,"InvalidDimensions","","invalid width or height",46,N],[13,"OutOfBounds","","offset + stride * height goes out of dmabuf bounds",46,N],[13,"InvalidWlBuffer","","invalid wl_buffer resulted from importing dmabufs via the create_immed request on given buffer_params",46,N],[4,"Flags","","",N,N],[13,"YInvert","","contents are y-inverted",47,N],[13,"Interlaced","","content is interlaced",47,N],[13,"BottomFirst","","bottom field first",47,N],[4,"Request","","",N,N],[13,"Destroy","","delete this object, used or not",48,N],[13,"Add","","add a dmabuf to the temporary set",48,N],[12,"fd","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",48,N],[12,"plane_idx","","",48,N],[12,"offset","","",48,N],[12,"stride","","",48,N],[12,"modifier_hi","","",48,N],[12,"modifier_lo","","",48,N],[13,"Create","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","create a wl_buffer from the given dmabufs",48,N],[12,"width","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",48,N],[12,"height","","",48,N],[12,"format","","",48,N],[12,"flags","","",48,N],[13,"CreateImmed","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","immediately create a wl_buffer from the given dmabufs",48,N],[12,"buffer_id","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",48,N],[12,"width","","",48,N],[12,"height","","",48,N],[12,"format","","",48,N],[12,"flags","","",48,N],[4,"Event","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",N,N],[13,"Created","","buffer creation succeeded",49,N],[12,"buffer","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Event","",49,N],[13,"Failed","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","buffer creation failed",49,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","delete this object, used or not",50,N],[10,"add","","add a dmabuf to the temporary set",50,N],[10,"create","","create a wl_buffer from the given dmabufs",50,N],[10,"create_immed","","immediately create a wl_buffer from the given dmabufs",50,[[["self"],["i32"],["i32"],["u32"],["u32"]],["result",["newproxy"]]]],[0,"c_interfaces","wayland_protocols::unstable::linux_dmabuf::v1","C interfaces for this protocol",N,N],[7,"wl_buffer_interface","wayland_protocols::unstable::linux_dmabuf::v1::c_interfaces","",N,N],[7,"zwp_linux_dmabuf_v1_requests","","",N,N],[7,"zwp_linux_dmabuf_v1_events","","",N,N],[7,"zwp_linux_dmabuf_v1_interface","","",N,N],[7,"zwp_linux_buffer_params_v1_requests","","",N,N],[7,"zwp_linux_buffer_params_v1_events","","",N,N],[7,"zwp_linux_buffer_params_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",43,[[["self"]],["bool"]]],[11,"from_raw_c","","",43,N],[11,"as_raw_c_in","","",43,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",44,[[["self"]],["bool"]]],[11,"from_raw_c","","",44,N],[11,"as_raw_c_in","","",44,[[["self"],["f"]],["t"]]],[11,"c_interface","","",51,N],[11,"clone","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",46,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",46,[[["self"]],["u32"]]],[11,"clone","","",47,[[["self"]],["flags"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["flags"]],["bool"]]],[11,"from_raw","","",47,[[["u32"]],["option",["flags"]]]],[11,"to_raw","","",47,[[["self"]],["u32"]]],[11,"is_destructor","","",48,[[["self"]],["bool"]]],[11,"from_raw_c","","",48,N],[11,"as_raw_c_in","","",48,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",49,[[["self"]],["bool"]]],[11,"from_raw_c","","",49,N],[11,"as_raw_c_in","","",49,[[["self"],["f"]],["t"]]],[11,"c_interface","","",52,N],[0,"pointer_constraints","wayland_protocols::unstable","protocol for constraining pointer motions",N,N],[0,"v1","wayland_protocols::unstable::pointer_constraints","",N,N],[0,"client","wayland_protocols::unstable::pointer_constraints::v1","Client-side API of this protocol",N,N],[0,"zwp_pointer_constraints_v1","wayland_protocols::unstable::pointer_constraints::v1::client","constrain the movement of a pointer",N,N],[3,"ZwpPointerConstraintsV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",N,N],[4,"Error","","wp_pointer_constraints error values",N,N],[13,"AlreadyConstrained","","pointer constraint already requested on that surface",53,N],[4,"Lifetime","","constraint lifetime",N,N],[13,"Oneshot","","the pointer constraint is defunct once deactivated",54,N],[13,"Persistent","","the pointer constraint may reactivate",54,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the pointer constraints manager object",55,N],[13,"LockPointer","","lock pointer to a position",55,N],[12,"id","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1::Request","",55,N],[12,"surface","","",55,N],[12,"pointer","","",55,N],[12,"region","","",55,N],[12,"lifetime","","",55,N],[13,"ConfinePointer","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","confine pointer to a region",55,N],[12,"id","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1::Request","",55,N],[12,"surface","","",55,N],[12,"pointer","","",55,N],[12,"region","","",55,N],[12,"lifetime","","",55,N],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the pointer constraints manager object",56,N],[10,"lock_pointer","","lock pointer to a position",56,[[["self"],["proxy"],["proxy"],["option",["proxy"]],["u32"]],["result",["newproxy"]]]],[10,"confine_pointer","","confine pointer to a region",56,[[["self"],["proxy"],["proxy"],["option",["proxy"]],["u32"]],["result",["newproxy"]]]],[0,"zwp_locked_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::client","receive relative pointer motion events",N,N],[3,"ZwpLockedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the locked pointer object",57,N],[13,"SetCursorPositionHint","","set the pointer cursor position hint",57,N],[12,"surface_x","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1::Request","",57,N],[12,"surface_y","","",57,N],[13,"SetRegion","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","set a new lock region",57,N],[12,"region","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1::Request","",57,N],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",N,N],[13,"Locked","","lock activation event",58,N],[13,"Unlocked","","lock deactivation event",58,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the locked pointer object",59,N],[10,"set_cursor_position_hint","","set the pointer cursor position hint",59,N],[10,"set_region","","set a new lock region",59,N],[0,"zwp_confined_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::client","confined pointer object",N,N],[3,"ZwpConfinedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the confined pointer object",60,N],[13,"SetRegion","","set a new confine region",60,N],[12,"region","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1::Request","",60,N],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",N,N],[13,"Confined","","pointer confined",61,N],[13,"Unconfined","","pointer unconfined",61,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the confined pointer object",62,N],[10,"set_region","","set a new confine region",62,N],[0,"c_interfaces","wayland_protocols::unstable::pointer_constraints::v1","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::pointer_constraints::v1::c_interfaces","",N,N],[7,"wl_pointer_interface","","",N,N],[7,"wl_region_interface","","",N,N],[7,"zwp_pointer_constraints_v1_requests","","",N,N],[7,"zwp_pointer_constraints_v1_interface","","",N,N],[7,"zwp_locked_pointer_v1_requests","","",N,N],[7,"zwp_locked_pointer_v1_events","","",N,N],[7,"zwp_locked_pointer_v1_interface","","",N,N],[7,"zwp_confined_pointer_v1_requests","","",N,N],[7,"zwp_confined_pointer_v1_events","","",N,N],[7,"zwp_confined_pointer_v1_interface","","",N,N],[11,"clone","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",53,[[["self"]],["error"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",53,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",53,[[["self"]],["u32"]]],[11,"clone","","",54,[[["self"]],["lifetime"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["lifetime"]],["bool"]]],[11,"from_raw","","",54,[[["u32"]],["option",["lifetime"]]]],[11,"to_raw","","",54,[[["self"]],["u32"]]],[11,"is_destructor","","",55,[[["self"]],["bool"]]],[11,"from_raw_c","","",55,N],[11,"as_raw_c_in","","",55,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",63,[[["self"]],["bool"]]],[11,"from_raw_c","","",63,N],[11,"as_raw_c_in","","",63,[[["self"],["f"]],["t"]]],[11,"c_interface","","",64,N],[11,"is_destructor","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",57,[[["self"]],["bool"]]],[11,"from_raw_c","","",57,N],[11,"as_raw_c_in","","",57,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",58,[[["self"]],["bool"]]],[11,"from_raw_c","","",58,N],[11,"as_raw_c_in","","",58,[[["self"],["f"]],["t"]]],[11,"c_interface","","",65,N],[11,"is_destructor","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",60,[[["self"]],["bool"]]],[11,"from_raw_c","","",60,N],[11,"as_raw_c_in","","",60,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",61,[[["self"]],["bool"]]],[11,"from_raw_c","","",61,N],[11,"as_raw_c_in","","",61,[[["self"],["f"]],["t"]]],[11,"c_interface","","",66,N],[0,"pointer_gestures","wayland_protocols::unstable","Pointer gestures protocol",N,N],[0,"v1","wayland_protocols::unstable::pointer_gestures","",N,N],[0,"client","wayland_protocols::unstable::pointer_gestures::v1","Client-side API of this protocol",N,N],[0,"zwp_pointer_gestures_v1","wayland_protocols::unstable::pointer_gestures::v1::client","touchpad gestures",N,N],[3,"ZwpPointerGesturesV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",N,N],[4,"Request","","",N,N],[13,"GetSwipeGesture","","get swipe gesture",67,N],[12,"id","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1::Request","",67,N],[12,"pointer","","",67,N],[13,"GetPinchGesture","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","get pinch gesture",67,N],[12,"id","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1::Request","",67,N],[12,"pointer","","",67,N],[4,"Event","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_swipe_gesture","","get swipe gesture",68,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"get_pinch_gesture","","get pinch gesture",68,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_pointer_gesture_swipe_v1","wayland_protocols::unstable::pointer_gestures::v1::client","a swipe gesture object",N,N],[3,"ZwpPointerGestureSwipeV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the pointer swipe gesture object",69,N],[4,"Event","","",N,N],[13,"Begin","","multi-finger swipe begin",70,N],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",70,N],[12,"time","","",70,N],[12,"surface","","",70,N],[12,"fingers","","",70,N],[13,"Update","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","multi-finger swipe motion",70,N],[12,"time","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",70,N],[12,"dx","","",70,N],[12,"dy","","",70,N],[13,"End","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","multi-finger swipe end",70,N],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",70,N],[12,"time","","",70,N],[12,"cancelled","","",70,N],[8,"RequestsTrait","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",N,N],[10,"destroy","","destroy the pointer swipe gesture object",71,N],[0,"zwp_pointer_gesture_pinch_v1","wayland_protocols::unstable::pointer_gestures::v1::client","a pinch gesture object",N,N],[3,"ZwpPointerGesturePinchV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the pinch gesture object",72,N],[4,"Event","","",N,N],[13,"Begin","","multi-finger pinch begin",73,N],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",73,N],[12,"time","","",73,N],[12,"surface","","",73,N],[12,"fingers","","",73,N],[13,"Update","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","multi-finger pinch motion",73,N],[12,"time","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",73,N],[12,"dx","","",73,N],[12,"dy","","",73,N],[12,"scale","","",73,N],[12,"rotation","","",73,N],[13,"End","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","multi-finger pinch end",73,N],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",73,N],[12,"time","","",73,N],[12,"cancelled","","",73,N],[8,"RequestsTrait","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",N,N],[10,"destroy","","destroy the pinch gesture object",74,N],[0,"c_interfaces","wayland_protocols::unstable::pointer_gestures::v1","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::pointer_gestures::v1::c_interfaces","",N,N],[7,"wl_pointer_interface","","",N,N],[7,"zwp_pointer_gestures_v1_requests","","",N,N],[7,"zwp_pointer_gestures_v1_interface","","",N,N],[7,"zwp_pointer_gesture_swipe_v1_requests","","",N,N],[7,"zwp_pointer_gesture_swipe_v1_events","","",N,N],[7,"zwp_pointer_gesture_swipe_v1_interface","","",N,N],[7,"zwp_pointer_gesture_pinch_v1_requests","","",N,N],[7,"zwp_pointer_gesture_pinch_v1_events","","",N,N],[7,"zwp_pointer_gesture_pinch_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",67,[[["self"]],["bool"]]],[11,"from_raw_c","","",67,N],[11,"as_raw_c_in","","",67,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",75,[[["self"]],["bool"]]],[11,"from_raw_c","","",75,N],[11,"as_raw_c_in","","",75,[[["self"],["f"]],["t"]]],[11,"c_interface","","",76,N],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",69,[[["self"]],["bool"]]],[11,"from_raw_c","","",69,N],[11,"as_raw_c_in","","",69,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",70,[[["self"]],["bool"]]],[11,"from_raw_c","","",70,N],[11,"as_raw_c_in","","",70,[[["self"],["f"]],["t"]]],[11,"c_interface","","",77,N],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",72,[[["self"]],["bool"]]],[11,"from_raw_c","","",72,N],[11,"as_raw_c_in","","",72,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",73,[[["self"]],["bool"]]],[11,"from_raw_c","","",73,N],[11,"as_raw_c_in","","",73,[[["self"],["f"]],["t"]]],[11,"c_interface","","",78,N],[0,"relative_pointer","wayland_protocols::unstable","protocol for relative pointer motion events",N,N],[0,"v1","wayland_protocols::unstable::relative_pointer","",N,N],[0,"client","wayland_protocols::unstable::relative_pointer::v1","Client-side API of this protocol",N,N],[0,"zwp_relative_pointer_manager_v1","wayland_protocols::unstable::relative_pointer::v1::client","get relative pointer objects",N,N],[3,"ZwpRelativePointerManagerV1","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the relative pointer manager object",79,N],[13,"GetRelativePointer","","get a relative pointer object",79,N],[12,"id","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1::Request","",79,N],[12,"pointer","","",79,N],[4,"Event","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the relative pointer manager object",80,N],[10,"get_relative_pointer","","get a relative pointer object",80,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_relative_pointer_v1","wayland_protocols::unstable::relative_pointer::v1::client","relative pointer object",N,N],[3,"ZwpRelativePointerV1","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","release the relative pointer object",81,N],[4,"Event","","",N,N],[13,"RelativeMotion","","relative pointer motion",82,N],[12,"utime_hi","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1::Event","",82,N],[12,"utime_lo","","",82,N],[12,"dx","","",82,N],[12,"dy","","",82,N],[12,"dx_unaccel","","",82,N],[12,"dy_unaccel","","",82,N],[8,"RequestsTrait","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",N,N],[10,"destroy","","release the relative pointer object",83,N],[0,"c_interfaces","wayland_protocols::unstable::relative_pointer::v1","C interfaces for this protocol",N,N],[7,"wl_pointer_interface","wayland_protocols::unstable::relative_pointer::v1::c_interfaces","",N,N],[7,"zwp_relative_pointer_manager_v1_requests","","",N,N],[7,"zwp_relative_pointer_manager_v1_interface","","",N,N],[7,"zwp_relative_pointer_v1_requests","","",N,N],[7,"zwp_relative_pointer_v1_events","","",N,N],[7,"zwp_relative_pointer_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",79,[[["self"]],["bool"]]],[11,"from_raw_c","","",79,N],[11,"as_raw_c_in","","",79,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",84,[[["self"]],["bool"]]],[11,"from_raw_c","","",84,N],[11,"as_raw_c_in","","",84,[[["self"],["f"]],["t"]]],[11,"c_interface","","",85,N],[11,"is_destructor","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",81,[[["self"]],["bool"]]],[11,"from_raw_c","","",81,N],[11,"as_raw_c_in","","",81,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",82,[[["self"]],["bool"]]],[11,"from_raw_c","","",82,N],[11,"as_raw_c_in","","",82,[[["self"],["f"]],["t"]]],[11,"c_interface","","",86,N],[0,"tablet","wayland_protocols::unstable","Wayland protocol for graphics tablets",N,N],[0,"v1","wayland_protocols::unstable::tablet","",N,N],[0,"client","wayland_protocols::unstable::tablet::v1","Client-side API of this protocol",N,N],[0,"zwp_tablet_manager_v1","wayland_protocols::unstable::tablet::v1::client","controller object for graphic tablet devices",N,N],[3,"ZwpTabletManagerV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",N,N],[4,"Request","","",N,N],[13,"GetTabletSeat","","get the tablet seat",87,N],[12,"tablet_seat","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1::Request","",87,N],[12,"seat","","",87,N],[13,"Destroy","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","release the memory for the tablet manager object",87,N],[4,"Event","","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_tablet_seat","","get the tablet seat",88,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"destroy","","release the memory for the tablet manager object",88,N],[0,"zwp_tablet_seat_v1","wayland_protocols::unstable::tablet::v1::client","controller object for graphic tablet devices of a seat",N,N],[3,"ZwpTabletSeatV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","release the memory for the tablet seat object",89,N],[4,"Event","","",N,N],[13,"TabletAdded","","new device notification",90,N],[12,"id","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1::Event","",90,N],[13,"ToolAdded","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","a new tool has been used with a tablet",90,N],[12,"id","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1::Event","",90,N],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",N,N],[10,"destroy","","release the memory for the tablet seat object",91,N],[0,"zwp_tablet_tool_v1","wayland_protocols::unstable::tablet::v1::client","a physical tablet tool",N,N],[3,"ZwpTabletToolV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",N,N],[4,"Type","","a physical tool type",N,N],[13,"Pen","","Pen",92,N],[13,"Eraser","","Eraser",92,N],[13,"Brush","","Brush",92,N],[13,"Pencil","","Pencil",92,N],[13,"Airbrush","","Airbrush",92,N],[13,"Finger","","Finger",92,N],[13,"Mouse","","Mouse",92,N],[13,"Lens","","Lens",92,N],[4,"Capability","","capability flags for a tool",N,N],[13,"Tilt","","Tilt axes",93,N],[13,"Pressure","","Pressure axis",93,N],[13,"Distance","","Distance axis",93,N],[13,"Rotation","","Z-rotation axis",93,N],[13,"Slider","","Slider axis",93,N],[13,"Wheel","","Wheel axis",93,N],[4,"ButtonState","","physical button state",N,N],[13,"Released","","button is not pressed",94,N],[13,"Pressed","","button is pressed",94,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",95,N],[4,"Request","","",N,N],[13,"SetCursor","","set the tablet tool's surface",96,N],[12,"serial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Request","",96,N],[12,"surface","","",96,N],[12,"hotspot_x","","",96,N],[12,"hotspot_y","","",96,N],[13,"Destroy","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","destroy the tool object",96,N],[4,"Event","","",N,N],[13,"Type","","tool type",97,N],[12,"tool_type","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[13,"HardwareSerial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","unique hardware serial number of the tool",97,N],[12,"hardware_serial_hi","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[12,"hardware_serial_lo","","",97,N],[13,"HardwareIdWacom","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","hardware id notification in Wacom's format",97,N],[12,"hardware_id_hi","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[12,"hardware_id_lo","","",97,N],[13,"Capability","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tool capability notification",97,N],[12,"capability","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[13,"Done","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tool description events sequence complete",97,N],[13,"Removed","","tool removed",97,N],[13,"ProximityIn","","proximity in event",97,N],[12,"serial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[12,"tablet","","",97,N],[12,"surface","","",97,N],[13,"ProximityOut","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","proximity out event",97,N],[13,"Down","","tablet tool is making contact",97,N],[12,"serial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[13,"Up","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tablet tool is no longer making contact",97,N],[13,"Motion","","motion event",97,N],[12,"x","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[12,"y","","",97,N],[13,"Pressure","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","pressure change event",97,N],[12,"pressure","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[13,"Distance","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","distance change event",97,N],[12,"distance","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[13,"Tilt","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tilt change event",97,N],[12,"tilt_x","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[12,"tilt_y","","",97,N],[13,"Rotation","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","z-rotation change event",97,N],[12,"degrees","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[13,"Slider","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","Slider position change event",97,N],[12,"position","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[13,"Wheel","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","Wheel delta event",97,N],[12,"degrees","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[12,"clicks","","",97,N],[13,"Button","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","button event",97,N],[12,"serial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[12,"button","","",97,N],[12,"state","","",97,N],[13,"Frame","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","frame event",97,N],[12,"time","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",97,N],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",N,N],[10,"set_cursor","","set the tablet tool's surface",98,N],[10,"destroy","","destroy the tool object",98,N],[0,"zwp_tablet_v1","wayland_protocols::unstable::tablet::v1::client","graphics tablet device",N,N],[3,"ZwpTabletV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the tablet object",99,N],[4,"Event","","",N,N],[13,"Name","","tablet device name",100,N],[12,"name","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",100,N],[13,"Id","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","tablet device USB vendor/product id",100,N],[12,"vid","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",100,N],[12,"pid","","",100,N],[13,"Path","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","path to the device",100,N],[12,"path","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",100,N],[13,"Done","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","tablet description events sequence complete",100,N],[13,"Removed","","tablet removed event",100,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the tablet object",101,N],[0,"c_interfaces","wayland_protocols::unstable::tablet::v1","C interfaces for this protocol",N,N],[7,"wl_seat_interface","wayland_protocols::unstable::tablet::v1::c_interfaces","",N,N],[7,"wl_surface_interface","","",N,N],[7,"zwp_tablet_manager_v1_requests","","",N,N],[7,"zwp_tablet_manager_v1_interface","","",N,N],[7,"zwp_tablet_seat_v1_requests","","",N,N],[7,"zwp_tablet_seat_v1_events","","",N,N],[7,"zwp_tablet_seat_v1_interface","","",N,N],[7,"zwp_tablet_tool_v1_requests","","",N,N],[7,"zwp_tablet_tool_v1_events","","",N,N],[7,"zwp_tablet_tool_v1_interface","","",N,N],[7,"zwp_tablet_v1_requests","","",N,N],[7,"zwp_tablet_v1_events","","",N,N],[7,"zwp_tablet_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",87,[[["self"]],["bool"]]],[11,"from_raw_c","","",87,N],[11,"as_raw_c_in","","",87,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",102,[[["self"]],["bool"]]],[11,"from_raw_c","","",102,N],[11,"as_raw_c_in","","",102,[[["self"],["f"]],["t"]]],[11,"c_interface","","",103,N],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",89,[[["self"]],["bool"]]],[11,"from_raw_c","","",89,N],[11,"as_raw_c_in","","",89,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",90,[[["self"]],["bool"]]],[11,"from_raw_c","","",90,N],[11,"as_raw_c_in","","",90,[[["self"],["f"]],["t"]]],[11,"c_interface","","",104,N],[11,"clone","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",92,[[["self"]],["type"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",92,[[["self"],["type"]],["bool"]]],[11,"from_raw","","",92,[[["u32"]],["option",["type"]]]],[11,"to_raw","","",92,[[["self"]],["u32"]]],[11,"clone","","",93,[[["self"]],["capability"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"eq","","",93,[[["self"],["capability"]],["bool"]]],[11,"from_raw","","",93,[[["u32"]],["option",["capability"]]]],[11,"to_raw","","",93,[[["self"]],["u32"]]],[11,"clone","","",94,[[["self"]],["buttonstate"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"eq","","",94,[[["self"],["buttonstate"]],["bool"]]],[11,"from_raw","","",94,[[["u32"]],["option",["buttonstate"]]]],[11,"to_raw","","",94,[[["self"]],["u32"]]],[11,"clone","","",95,[[["self"]],["error"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"eq","","",95,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",95,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",95,[[["self"]],["u32"]]],[11,"is_destructor","","",96,[[["self"]],["bool"]]],[11,"from_raw_c","","",96,N],[11,"as_raw_c_in","","",96,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",97,[[["self"]],["bool"]]],[11,"from_raw_c","","",97,N],[11,"as_raw_c_in","","",97,[[["self"],["f"]],["t"]]],[11,"c_interface","","",105,N],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","",99,[[["self"]],["bool"]]],[11,"from_raw_c","","",99,N],[11,"as_raw_c_in","","",99,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",100,[[["self"]],["bool"]]],[11,"from_raw_c","","",100,N],[11,"as_raw_c_in","","",100,[[["self"],["f"]],["t"]]],[11,"c_interface","","",106,N],[0,"v2","wayland_protocols::unstable::tablet","",N,N],[0,"client","wayland_protocols::unstable::tablet::v2","Client-side API of this protocol",N,N],[0,"zwp_tablet_manager_v2","wayland_protocols::unstable::tablet::v2::client","controller object for graphic tablet devices",N,N],[3,"ZwpTabletManagerV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",N,N],[4,"Request","","",N,N],[13,"GetTabletSeat","","get the tablet seat",107,N],[12,"tablet_seat","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2::Request","",107,N],[12,"seat","","",107,N],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","release the memory for the tablet manager object",107,N],[4,"Event","","",N,N],[8,"RequestsTrait","","",N,N],[10,"get_tablet_seat","","get the tablet seat",108,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"destroy","","release the memory for the tablet manager object",108,N],[0,"zwp_tablet_seat_v2","wayland_protocols::unstable::tablet::v2::client","controller object for graphic tablet devices of a seat",N,N],[3,"ZwpTabletSeatV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",N,N],[4,"Request","","",N,N],[13,"Destroy","","release the memory for the tablet seat object",109,N],[4,"Event","","",N,N],[13,"TabletAdded","","new device notification",110,N],[12,"id","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",110,N],[13,"ToolAdded","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","a new tool has been used with a tablet",110,N],[12,"id","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",110,N],[13,"PadAdded","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","new pad notification",110,N],[12,"id","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",110,N],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",N,N],[10,"destroy","","release the memory for the tablet seat object",111,N],[0,"zwp_tablet_tool_v2","wayland_protocols::unstable::tablet::v2::client","a physical tablet tool",N,N],[3,"ZwpTabletToolV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",N,N],[4,"Type","","a physical tool type",N,N],[13,"Pen","","Pen",112,N],[13,"Eraser","","Eraser",112,N],[13,"Brush","","Brush",112,N],[13,"Pencil","","Pencil",112,N],[13,"Airbrush","","Airbrush",112,N],[13,"Finger","","Finger",112,N],[13,"Mouse","","Mouse",112,N],[13,"Lens","","Lens",112,N],[4,"Capability","","capability flags for a tool",N,N],[13,"Tilt","","Tilt axes",113,N],[13,"Pressure","","Pressure axis",113,N],[13,"Distance","","Distance axis",113,N],[13,"Rotation","","Z-rotation axis",113,N],[13,"Slider","","Slider axis",113,N],[13,"Wheel","","Wheel axis",113,N],[4,"ButtonState","","physical button state",N,N],[13,"Released","","button is not pressed",114,N],[13,"Pressed","","button is pressed",114,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",115,N],[4,"Request","","",N,N],[13,"SetCursor","","set the tablet tool's surface",116,N],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Request","",116,N],[12,"surface","","",116,N],[12,"hotspot_x","","",116,N],[12,"hotspot_y","","",116,N],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","destroy the tool object",116,N],[4,"Event","","",N,N],[13,"Type","","tool type",117,N],[12,"tool_type","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[13,"HardwareSerial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","unique hardware serial number of the tool",117,N],[12,"hardware_serial_hi","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[12,"hardware_serial_lo","","",117,N],[13,"HardwareIdWacom","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","hardware id notification in Wacom's format",117,N],[12,"hardware_id_hi","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[12,"hardware_id_lo","","",117,N],[13,"Capability","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tool capability notification",117,N],[12,"capability","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[13,"Done","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tool description events sequence complete",117,N],[13,"Removed","","tool removed",117,N],[13,"ProximityIn","","proximity in event",117,N],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[12,"tablet","","",117,N],[12,"surface","","",117,N],[13,"ProximityOut","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","proximity out event",117,N],[13,"Down","","tablet tool is making contact",117,N],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[13,"Up","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tablet tool is no longer making contact",117,N],[13,"Motion","","motion event",117,N],[12,"x","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[12,"y","","",117,N],[13,"Pressure","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","pressure change event",117,N],[12,"pressure","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[13,"Distance","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","distance change event",117,N],[12,"distance","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[13,"Tilt","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tilt change event",117,N],[12,"tilt_x","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[12,"tilt_y","","",117,N],[13,"Rotation","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","z-rotation change event",117,N],[12,"degrees","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[13,"Slider","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","Slider position change event",117,N],[12,"position","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[13,"Wheel","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","Wheel delta event",117,N],[12,"degrees","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[12,"clicks","","",117,N],[13,"Button","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","button event",117,N],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[12,"button","","",117,N],[12,"state","","",117,N],[13,"Frame","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","frame event",117,N],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",117,N],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",N,N],[10,"set_cursor","","set the tablet tool's surface",118,N],[10,"destroy","","destroy the tool object",118,N],[0,"zwp_tablet_v2","wayland_protocols::unstable::tablet::v2::client","graphics tablet device",N,N],[3,"ZwpTabletV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the tablet object",119,N],[4,"Event","","",N,N],[13,"Name","","tablet device name",120,N],[12,"name","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",120,N],[13,"Id","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","tablet device USB vendor/product id",120,N],[12,"vid","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",120,N],[12,"pid","","",120,N],[13,"Path","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","path to the device",120,N],[12,"path","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",120,N],[13,"Done","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","tablet description events sequence complete",120,N],[13,"Removed","","tablet removed event",120,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the tablet object",121,N],[0,"zwp_tablet_pad_ring_v2","wayland_protocols::unstable::tablet::v2::client","pad ring",N,N],[3,"ZwpTabletPadRingV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",N,N],[4,"Source","","ring axis source",N,N],[13,"Finger","","finger",122,N],[4,"Request","","",N,N],[13,"SetFeedback","","set compositor feedback",123,N],[12,"description","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Request","",123,N],[12,"serial","","",123,N],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","destroy the ring object",123,N],[4,"Event","","",N,N],[13,"Source","","ring event source",124,N],[12,"source","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",124,N],[13,"Angle","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","angle changed",124,N],[12,"degrees","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",124,N],[13,"Stop","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","interaction stopped",124,N],[13,"Frame","","end of a ring event sequence",124,N],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",124,N],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",N,N],[10,"set_feedback","","set compositor feedback",125,N],[10,"destroy","","destroy the ring object",125,N],[0,"zwp_tablet_pad_strip_v2","wayland_protocols::unstable::tablet::v2::client","pad strip",N,N],[3,"ZwpTabletPadStripV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",N,N],[4,"Source","","strip axis source",N,N],[13,"Finger","","finger",126,N],[4,"Request","","",N,N],[13,"SetFeedback","","set compositor feedback",127,N],[12,"description","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Request","",127,N],[12,"serial","","",127,N],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","destroy the strip object",127,N],[4,"Event","","",N,N],[13,"Source","","strip event source",128,N],[12,"source","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",128,N],[13,"Position","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","position changed",128,N],[12,"position","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",128,N],[13,"Stop","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","interaction stopped",128,N],[13,"Frame","","end of a strip event sequence",128,N],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",128,N],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",N,N],[10,"set_feedback","","set compositor feedback",129,N],[10,"destroy","","destroy the strip object",129,N],[0,"zwp_tablet_pad_group_v2","wayland_protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",N,N],[3,"ZwpTabletPadGroupV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the pad object",130,N],[4,"Event","","",N,N],[13,"Buttons","","buttons announced",131,N],[12,"buttons","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",131,N],[13,"Ring","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","ring announced",131,N],[12,"ring","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",131,N],[13,"Strip","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","strip announced",131,N],[12,"strip","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",131,N],[13,"Modes","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","mode-switch ability announced",131,N],[12,"modes","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",131,N],[13,"Done","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","tablet group description events sequence complete",131,N],[13,"ModeSwitch","","mode switch event",131,N],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",131,N],[12,"serial","","",131,N],[12,"mode","","",131,N],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",N,N],[10,"destroy","","destroy the pad object",132,N],[0,"zwp_tablet_pad_v2","wayland_protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",N,N],[3,"ZwpTabletPadV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",N,N],[4,"ButtonState","","physical button state",N,N],[13,"Released","","the button is not pressed",133,N],[13,"Pressed","","the button is pressed",133,N],[4,"Request","","",N,N],[13,"SetFeedback","","set compositor feedback",134,N],[12,"button","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Request","",134,N],[12,"description","","",134,N],[12,"serial","","",134,N],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","destroy the pad object",134,N],[4,"Event","","",N,N],[13,"Group","","group announced",135,N],[12,"pad_group","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",135,N],[13,"Path","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","path to the device",135,N],[12,"path","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",135,N],[13,"Buttons","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","buttons announced",135,N],[12,"buttons","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",135,N],[13,"Done","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","pad description event sequence complete",135,N],[13,"Button","","physical button state",135,N],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",135,N],[12,"button","","",135,N],[12,"state","","",135,N],[13,"Enter","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","enter event",135,N],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",135,N],[12,"tablet","","",135,N],[12,"surface","","",135,N],[13,"Leave","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","enter event",135,N],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",135,N],[12,"surface","","",135,N],[13,"Removed","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","pad removed event",135,N],[8,"RequestsTrait","","",N,N],[10,"set_feedback","","set compositor feedback",136,N],[10,"destroy","","destroy the pad object",136,N],[0,"c_interfaces","wayland_protocols::unstable::tablet::v2","C interfaces for this protocol",N,N],[7,"wl_seat_interface","wayland_protocols::unstable::tablet::v2::c_interfaces","",N,N],[7,"wl_surface_interface","","",N,N],[7,"zwp_tablet_manager_v2_requests","","",N,N],[7,"zwp_tablet_manager_v2_interface","","",N,N],[7,"zwp_tablet_seat_v2_requests","","",N,N],[7,"zwp_tablet_seat_v2_events","","",N,N],[7,"zwp_tablet_seat_v2_interface","","",N,N],[7,"zwp_tablet_tool_v2_requests","","",N,N],[7,"zwp_tablet_tool_v2_events","","",N,N],[7,"zwp_tablet_tool_v2_interface","","",N,N],[7,"zwp_tablet_v2_requests","","",N,N],[7,"zwp_tablet_v2_events","","",N,N],[7,"zwp_tablet_v2_interface","","",N,N],[7,"zwp_tablet_pad_ring_v2_requests","","",N,N],[7,"zwp_tablet_pad_ring_v2_events","","",N,N],[7,"zwp_tablet_pad_ring_v2_interface","","",N,N],[7,"zwp_tablet_pad_strip_v2_requests","","",N,N],[7,"zwp_tablet_pad_strip_v2_events","","",N,N],[7,"zwp_tablet_pad_strip_v2_interface","","",N,N],[7,"zwp_tablet_pad_group_v2_requests","","",N,N],[7,"zwp_tablet_pad_group_v2_events","","",N,N],[7,"zwp_tablet_pad_group_v2_interface","","",N,N],[7,"zwp_tablet_pad_v2_requests","","",N,N],[7,"zwp_tablet_pad_v2_events","","",N,N],[7,"zwp_tablet_pad_v2_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",107,[[["self"]],["bool"]]],[11,"from_raw_c","","",107,N],[11,"as_raw_c_in","","",107,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",137,[[["self"]],["bool"]]],[11,"from_raw_c","","",137,N],[11,"as_raw_c_in","","",137,[[["self"],["f"]],["t"]]],[11,"c_interface","","",138,N],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",109,[[["self"]],["bool"]]],[11,"from_raw_c","","",109,N],[11,"as_raw_c_in","","",109,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",110,[[["self"]],["bool"]]],[11,"from_raw_c","","",110,N],[11,"as_raw_c_in","","",110,[[["self"],["f"]],["t"]]],[11,"c_interface","","",139,N],[11,"clone","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",112,[[["self"]],["type"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"eq","","",112,[[["self"],["type"]],["bool"]]],[11,"from_raw","","",112,[[["u32"]],["option",["type"]]]],[11,"to_raw","","",112,[[["self"]],["u32"]]],[11,"clone","","",113,[[["self"]],["capability"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"eq","","",113,[[["self"],["capability"]],["bool"]]],[11,"from_raw","","",113,[[["u32"]],["option",["capability"]]]],[11,"to_raw","","",113,[[["self"]],["u32"]]],[11,"clone","","",114,[[["self"]],["buttonstate"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"eq","","",114,[[["self"],["buttonstate"]],["bool"]]],[11,"from_raw","","",114,[[["u32"]],["option",["buttonstate"]]]],[11,"to_raw","","",114,[[["self"]],["u32"]]],[11,"clone","","",115,[[["self"]],["error"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"eq","","",115,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",115,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",115,[[["self"]],["u32"]]],[11,"is_destructor","","",116,[[["self"]],["bool"]]],[11,"from_raw_c","","",116,N],[11,"as_raw_c_in","","",116,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",117,[[["self"]],["bool"]]],[11,"from_raw_c","","",117,N],[11,"as_raw_c_in","","",117,[[["self"],["f"]],["t"]]],[11,"c_interface","","",140,N],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","",119,[[["self"]],["bool"]]],[11,"from_raw_c","","",119,N],[11,"as_raw_c_in","","",119,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",120,[[["self"]],["bool"]]],[11,"from_raw_c","","",120,N],[11,"as_raw_c_in","","",120,[[["self"],["f"]],["t"]]],[11,"c_interface","","",141,N],[11,"clone","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",122,[[["self"]],["source"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"eq","","",122,[[["self"],["source"]],["bool"]]],[11,"from_raw","","",122,[[["u32"]],["option",["source"]]]],[11,"to_raw","","",122,[[["self"]],["u32"]]],[11,"is_destructor","","",123,[[["self"]],["bool"]]],[11,"from_raw_c","","",123,N],[11,"as_raw_c_in","","",123,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",124,[[["self"]],["bool"]]],[11,"from_raw_c","","",124,N],[11,"as_raw_c_in","","",124,[[["self"],["f"]],["t"]]],[11,"c_interface","","",142,N],[11,"clone","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",126,[[["self"]],["source"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"eq","","",126,[[["self"],["source"]],["bool"]]],[11,"from_raw","","",126,[[["u32"]],["option",["source"]]]],[11,"to_raw","","",126,[[["self"]],["u32"]]],[11,"is_destructor","","",127,[[["self"]],["bool"]]],[11,"from_raw_c","","",127,N],[11,"as_raw_c_in","","",127,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",128,[[["self"]],["bool"]]],[11,"from_raw_c","","",128,N],[11,"as_raw_c_in","","",128,[[["self"],["f"]],["t"]]],[11,"c_interface","","",143,N],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",130,[[["self"]],["bool"]]],[11,"from_raw_c","","",130,N],[11,"as_raw_c_in","","",130,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",131,[[["self"]],["bool"]]],[11,"from_raw_c","","",131,N],[11,"as_raw_c_in","","",131,[[["self"],["f"]],["t"]]],[11,"c_interface","","",144,N],[11,"clone","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",133,[[["self"]],["buttonstate"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"eq","","",133,[[["self"],["buttonstate"]],["bool"]]],[11,"from_raw","","",133,[[["u32"]],["option",["buttonstate"]]]],[11,"to_raw","","",133,[[["self"]],["u32"]]],[11,"is_destructor","","",134,[[["self"]],["bool"]]],[11,"from_raw_c","","",134,N],[11,"as_raw_c_in","","",134,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",135,[[["self"]],["bool"]]],[11,"from_raw_c","","",135,N],[11,"as_raw_c_in","","",135,[[["self"],["f"]],["t"]]],[11,"c_interface","","",145,N],[0,"text_input","wayland_protocols::unstable","Text input protocol",N,N],[0,"v1","wayland_protocols::unstable::text_input","",N,N],[0,"client","wayland_protocols::unstable::text_input::v1","Client-side API of this protocol",N,N],[0,"zwp_text_input_v1","wayland_protocols::unstable::text_input::v1::client","text input",N,N],[3,"ZwpTextInputV1","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",N,N],[4,"ContentHint","","content hint",N,N],[13,"None","","no special behaviour",146,N],[13,"Default","","auto completion, correction and capitalization",146,N],[13,"Password","","hidden and sensitive text",146,N],[13,"AutoCompletion","","suggest word completions",146,N],[13,"AutoCorrection","","suggest word corrections",146,N],[13,"AutoCapitalization","","switch to uppercase letters at the start of a sentence",146,N],[13,"Lowercase","","prefer lowercase letters",146,N],[13,"Uppercase","","prefer uppercase letters",146,N],[13,"Titlecase","","prefer casing for titles and headings (can be language dependent)",146,N],[13,"HiddenText","","characters should be hidden",146,N],[13,"SensitiveData","","typed text should not be stored",146,N],[13,"Latin","","just latin characters should be entered",146,N],[13,"Multiline","","the text input is multiline",146,N],[4,"ContentPurpose","","content purpose",N,N],[13,"Normal","","default input, allowing all characters",147,N],[13,"Alpha","","allow only alphabetic characters",147,N],[13,"Digits","","allow only digits",147,N],[13,"Number","","input a number (including decimal separator and sign)",147,N],[13,"Phone","","input a phone number",147,N],[13,"Url","","input an URL",147,N],[13,"Email","","input an email address",147,N],[13,"Name","","input a name of a person",147,N],[13,"Password","","input a password (combine with password or sensitive_data hint)",147,N],[13,"Date","","input a date",147,N],[13,"Time","","input a time",147,N],[13,"Datetime","","input a date and time",147,N],[13,"Terminal","","input for a terminal",147,N],[4,"PreeditStyle","","",N,N],[13,"Default","","default style for composing text",148,N],[13,"None","","style should be the same as in non-composing text",148,N],[13,"Active","","",148,N],[13,"Inactive","","",148,N],[13,"Highlight","","",148,N],[13,"Underline","","",148,N],[13,"Selection","","",148,N],[13,"Incorrect","","",148,N],[4,"TextDirection","","",N,N],[13,"Auto","","automatic text direction based on text and language",149,N],[13,"Ltr","","left-to-right",149,N],[13,"Rtl","","right-to-left",149,N],[4,"Request","","",N,N],[13,"Activate","","request activation",150,N],[12,"seat","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",150,N],[12,"surface","","",150,N],[13,"Deactivate","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","request deactivation",150,N],[12,"seat","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",150,N],[13,"ShowInputPanel","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","show input panels",150,N],[13,"HideInputPanel","","hide input panels",150,N],[13,"Reset","","reset",150,N],[13,"SetSurroundingText","","sets the surrounding text",150,N],[12,"text","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",150,N],[12,"cursor","","",150,N],[12,"anchor","","",150,N],[13,"SetContentType","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","set content purpose and hint",150,N],[12,"hint","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",150,N],[12,"purpose","","",150,N],[13,"SetCursorRectangle","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",150,N],[12,"x","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",150,N],[12,"y","","",150,N],[12,"width","","",150,N],[12,"height","","",150,N],[13,"SetPreferredLanguage","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","sets preferred language",150,N],[12,"language","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",150,N],[13,"CommitState","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",150,N],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",150,N],[13,"InvokeAction","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",150,N],[12,"button","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",150,N],[12,"index","","",150,N],[4,"Event","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",N,N],[13,"Enter","","enter event",151,N],[12,"surface","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[13,"Leave","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","leave event",151,N],[13,"ModifiersMap","","modifiers map",151,N],[12,"map","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[13,"InputPanelState","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","state of the input panel",151,N],[12,"state","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[13,"PreeditString","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit",151,N],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[12,"text","","",151,N],[12,"commit","","",151,N],[13,"PreeditStyling","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit styling",151,N],[12,"index","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[12,"length","","",151,N],[12,"style","","",151,N],[13,"PreeditCursor","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit cursor",151,N],[12,"index","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[13,"CommitString","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","commit",151,N],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[12,"text","","",151,N],[13,"CursorPosition","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","set cursor to new position",151,N],[12,"index","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[12,"anchor","","",151,N],[13,"DeleteSurroundingText","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","delete surrounding text",151,N],[12,"index","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[12,"length","","",151,N],[13,"Keysym","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","keysym",151,N],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[12,"time","","",151,N],[12,"sym","","",151,N],[12,"state","","",151,N],[12,"modifiers","","",151,N],[13,"Language","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","language",151,N],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[12,"language","","",151,N],[13,"TextDirection","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","text direction",151,N],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",151,N],[12,"direction","","",151,N],[8,"RequestsTrait","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",N,N],[10,"activate","","request activation",152,N],[10,"deactivate","","request deactivation",152,N],[10,"show_input_panel","","show input panels",152,N],[10,"hide_input_panel","","hide input panels",152,N],[10,"reset","","reset",152,N],[10,"set_surrounding_text","","sets the surrounding text",152,N],[10,"set_content_type","","set content purpose and hint",152,N],[10,"set_cursor_rectangle","","",152,N],[10,"set_preferred_language","","sets preferred language",152,N],[10,"commit_state","","",152,N],[10,"invoke_action","","",152,N],[0,"zwp_text_input_manager_v1","wayland_protocols::unstable::text_input::v1::client","text input manager",N,N],[3,"ZwpTextInputManagerV1","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",N,N],[4,"Request","","",N,N],[13,"CreateTextInput","","create text input",153,N],[12,"id","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1::Request","",153,N],[4,"Event","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"create_text_input","","create text input",154,[[["self"]],["result",["newproxy"]]]],[0,"c_interfaces","wayland_protocols::unstable::text_input::v1","C interfaces for this protocol",N,N],[7,"wl_seat_interface","wayland_protocols::unstable::text_input::v1::c_interfaces","",N,N],[7,"wl_surface_interface","","",N,N],[7,"zwp_text_input_v1_requests","","",N,N],[7,"zwp_text_input_v1_events","","",N,N],[7,"zwp_text_input_v1_interface","","",N,N],[7,"zwp_text_input_manager_v1_requests","","",N,N],[7,"zwp_text_input_manager_v1_interface","","",N,N],[11,"clone","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",146,[[["self"]],["contenthint"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"eq","","",146,[[["self"],["contenthint"]],["bool"]]],[11,"from_raw","","",146,[[["u32"]],["option",["contenthint"]]]],[11,"to_raw","","",146,[[["self"]],["u32"]]],[11,"clone","","",147,[[["self"]],["contentpurpose"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"eq","","",147,[[["self"],["contentpurpose"]],["bool"]]],[11,"from_raw","","",147,[[["u32"]],["option",["contentpurpose"]]]],[11,"to_raw","","",147,[[["self"]],["u32"]]],[11,"clone","","",148,[[["self"]],["preeditstyle"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"eq","","",148,[[["self"],["preeditstyle"]],["bool"]]],[11,"from_raw","","",148,[[["u32"]],["option",["preeditstyle"]]]],[11,"to_raw","","",148,[[["self"]],["u32"]]],[11,"clone","","",149,[[["self"]],["textdirection"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"eq","","",149,[[["self"],["textdirection"]],["bool"]]],[11,"from_raw","","",149,[[["u32"]],["option",["textdirection"]]]],[11,"to_raw","","",149,[[["self"]],["u32"]]],[11,"is_destructor","","",150,[[["self"]],["bool"]]],[11,"from_raw_c","","",150,N],[11,"as_raw_c_in","","",150,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",151,[[["self"]],["bool"]]],[11,"from_raw_c","","",151,N],[11,"as_raw_c_in","","",151,[[["self"],["f"]],["t"]]],[11,"c_interface","","",155,N],[11,"is_destructor","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",153,[[["self"]],["bool"]]],[11,"from_raw_c","","",153,N],[11,"as_raw_c_in","","",153,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",156,[[["self"]],["bool"]]],[11,"from_raw_c","","",156,N],[11,"as_raw_c_in","","",156,[[["self"],["f"]],["t"]]],[11,"c_interface","","",157,N],[0,"xdg_decoration","wayland_protocols::unstable","This interface allows a compositor to announce support for server-side decorations. A window decoration is a set of window controls as deemed appropriate by the party managing them, such as user interface components used to move, resize and change a window's state. A client can use this protocol to request being decorated by a supporting compositor. If compositor and client do not negotiate the use of a server-side decoration using this protocol, clients continue to self-decorate as they see fit.",N,N],[0,"v1","wayland_protocols::unstable::xdg_decoration","",N,N],[0,"client","wayland_protocols::unstable::xdg_decoration::v1","Client-side API of this protocol",N,N],[0,"zxdg_decoration_manager_v1","wayland_protocols::unstable::xdg_decoration::v1::client","window decoration manager",N,N],[3,"ZxdgDecorationManagerV1","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the decoration manager object",158,N],[13,"GetToplevelDecoration","","create a new toplevel decoration object",158,N],[12,"id","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1::Request","",158,N],[12,"toplevel","","",158,N],[4,"Event","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the decoration manager object",159,N],[10,"get_toplevel_decoration","","create a new toplevel decoration object",159,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zxdg_toplevel_decoration_v1","wayland_protocols::unstable::xdg_decoration::v1::client","decoration object for a toplevel surface",N,N],[3,"ZxdgToplevelDecorationV1","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",N,N],[4,"Error","","",N,N],[13,"UnconfiguredBuffer","","xdg_toplevel has a buffer attached before configure",160,N],[13,"AlreadyConstructed","","xdg_toplevel already has a decoration object",160,N],[13,"Orphaned","","xdg_toplevel destroyed before the decoration object",160,N],[4,"Mode","","window decoration modes",N,N],[13,"ClientSide","","no server-side window decoration",161,N],[13,"ServerSide","","server-side window decoration",161,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the decoration object",162,N],[13,"SetMode","","set the decoration mode",162,N],[12,"mode","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1::Request","",162,N],[13,"UnsetMode","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","unset the decoration mode",162,N],[4,"Event","","",N,N],[13,"Configure","","suggest a surface change",163,N],[12,"mode","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1::Event","",163,N],[8,"RequestsTrait","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",N,N],[10,"destroy","","destroy the decoration object",164,N],[10,"set_mode","","set the decoration mode",164,N],[10,"unset_mode","","unset the decoration mode",164,N],[0,"c_interfaces","wayland_protocols::unstable::xdg_decoration::v1","C interfaces for this protocol",N,N],[7,"zxdg_decoration_manager_v1_requests","wayland_protocols::unstable::xdg_decoration::v1::c_interfaces","",N,N],[7,"zxdg_decoration_manager_v1_interface","","",N,N],[7,"zxdg_toplevel_decoration_v1_requests","","",N,N],[7,"zxdg_toplevel_decoration_v1_events","","",N,N],[7,"zxdg_toplevel_decoration_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_decoration_manager_v1","",158,[[["self"]],["bool"]]],[11,"from_raw_c","","",158,N],[11,"as_raw_c_in","","",158,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",165,[[["self"]],["bool"]]],[11,"from_raw_c","","",165,N],[11,"as_raw_c_in","","",165,[[["self"],["f"]],["t"]]],[11,"c_interface","","",166,N],[11,"clone","wayland_protocols::unstable::xdg_decoration::v1::client::zxdg_toplevel_decoration_v1","",160,[[["self"]],["error"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"eq","","",160,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",160,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",160,[[["self"]],["u32"]]],[11,"clone","","",161,[[["self"]],["mode"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"eq","","",161,[[["self"],["mode"]],["bool"]]],[11,"from_raw","","",161,[[["u32"]],["option",["mode"]]]],[11,"to_raw","","",161,[[["self"]],["u32"]]],[11,"is_destructor","","",162,[[["self"]],["bool"]]],[11,"from_raw_c","","",162,N],[11,"as_raw_c_in","","",162,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",163,[[["self"]],["bool"]]],[11,"from_raw_c","","",163,N],[11,"as_raw_c_in","","",163,[[["self"],["f"]],["t"]]],[11,"c_interface","","",167,N],[0,"xdg_foreign","wayland_protocols::unstable","Protocol for exporting xdg surface handles",N,N],[0,"v1","wayland_protocols::unstable::xdg_foreign","",N,N],[0,"client","wayland_protocols::unstable::xdg_foreign::v1","Client-side API of this protocol",N,N],[0,"zxdg_exporter_v1","wayland_protocols::unstable::xdg_foreign::v1::client","interface for exporting surfaces",N,N],[3,"ZxdgExporterV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_exporter object",168,N],[13,"Export","","export a surface",168,N],[12,"id","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1::Request","",168,N],[12,"surface","","",168,N],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_exporter object",169,N],[10,"export","","export a surface",169,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zxdg_importer_v1","wayland_protocols::unstable::xdg_foreign::v1::client","interface for importing surfaces",N,N],[3,"ZxdgImporterV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_importer object",170,N],[13,"Import","","import a surface",170,N],[12,"id","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1::Request","",170,N],[12,"handle","","",170,N],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_importer object",171,N],[10,"import","","import a surface",171,[[["self"],["string"]],["result",["newproxy"]]]],[0,"zxdg_exported_v1","wayland_protocols::unstable::xdg_foreign::v1::client","an exported surface handle",N,N],[3,"ZxdgExportedV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","unexport the exported surface",172,N],[4,"Event","","",N,N],[13,"Handle","","the exported surface handle",173,N],[12,"handle","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1::Event","",173,N],[8,"RequestsTrait","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",N,N],[10,"destroy","","unexport the exported surface",174,N],[0,"zxdg_imported_v1","wayland_protocols::unstable::xdg_foreign::v1::client","an imported surface handle",N,N],[3,"ZxdgImportedV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_imported object",175,N],[13,"SetParentOf","","set as the parent of some surface",175,N],[12,"surface","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1::Request","",175,N],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",N,N],[13,"Destroyed","","the imported surface handle has been destroyed",176,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_imported object",177,N],[10,"set_parent_of","","set as the parent of some surface",177,N],[0,"c_interfaces","wayland_protocols::unstable::xdg_foreign::v1","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::xdg_foreign::v1::c_interfaces","",N,N],[7,"zxdg_exporter_v1_requests","","",N,N],[7,"zxdg_exporter_v1_interface","","",N,N],[7,"zxdg_importer_v1_requests","","",N,N],[7,"zxdg_importer_v1_interface","","",N,N],[7,"zxdg_exported_v1_requests","","",N,N],[7,"zxdg_exported_v1_events","","",N,N],[7,"zxdg_exported_v1_interface","","",N,N],[7,"zxdg_imported_v1_requests","","",N,N],[7,"zxdg_imported_v1_events","","",N,N],[7,"zxdg_imported_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",168,[[["self"]],["bool"]]],[11,"from_raw_c","","",168,N],[11,"as_raw_c_in","","",168,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",178,[[["self"]],["bool"]]],[11,"from_raw_c","","",178,N],[11,"as_raw_c_in","","",178,[[["self"],["f"]],["t"]]],[11,"c_interface","","",179,N],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",170,[[["self"]],["bool"]]],[11,"from_raw_c","","",170,N],[11,"as_raw_c_in","","",170,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",180,[[["self"]],["bool"]]],[11,"from_raw_c","","",180,N],[11,"as_raw_c_in","","",180,[[["self"],["f"]],["t"]]],[11,"c_interface","","",181,N],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",172,[[["self"]],["bool"]]],[11,"from_raw_c","","",172,N],[11,"as_raw_c_in","","",172,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",173,[[["self"]],["bool"]]],[11,"from_raw_c","","",173,N],[11,"as_raw_c_in","","",173,[[["self"],["f"]],["t"]]],[11,"c_interface","","",182,N],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",175,[[["self"]],["bool"]]],[11,"from_raw_c","","",175,N],[11,"as_raw_c_in","","",175,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",176,[[["self"]],["bool"]]],[11,"from_raw_c","","",176,N],[11,"as_raw_c_in","","",176,[[["self"],["f"]],["t"]]],[11,"c_interface","","",183,N],[0,"v2","wayland_protocols::unstable::xdg_foreign","",N,N],[0,"client","wayland_protocols::unstable::xdg_foreign::v2","Client-side API of this protocol",N,N],[0,"zxdg_exporter_v2","wayland_protocols::unstable::xdg_foreign::v2::client","interface for exporting surfaces",N,N],[3,"ZxdgExporterV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_exporter object",184,N],[13,"ExportToplevel","","export a toplevel surface",184,N],[12,"id","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2::Request","",184,N],[12,"surface","","",184,N],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_exporter object",185,N],[10,"export_toplevel","","export a toplevel surface",185,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zxdg_importer_v2","wayland_protocols::unstable::xdg_foreign::v2::client","interface for importing surfaces",N,N],[3,"ZxdgImporterV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_importer object",186,N],[13,"ImportToplevel","","import a toplevel surface",186,N],[12,"id","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2::Request","",186,N],[12,"handle","","",186,N],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_importer object",187,N],[10,"import_toplevel","","import a toplevel surface",187,[[["self"],["string"]],["result",["newproxy"]]]],[0,"zxdg_exported_v2","wayland_protocols::unstable::xdg_foreign::v2::client","an exported surface handle",N,N],[3,"ZxdgExportedV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",N,N],[4,"Request","","",N,N],[13,"Destroy","","unexport the exported surface",188,N],[4,"Event","","",N,N],[13,"Handle","","the exported surface handle",189,N],[12,"handle","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2::Event","",189,N],[8,"RequestsTrait","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",N,N],[10,"destroy","","unexport the exported surface",190,N],[0,"zxdg_imported_v2","wayland_protocols::unstable::xdg_foreign::v2::client","an imported surface handle",N,N],[3,"ZxdgImportedV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_imported object",191,N],[13,"SetParentOf","","set as the parent of some surface",191,N],[12,"surface","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2::Request","",191,N],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",N,N],[13,"Destroyed","","the imported surface handle has been destroyed",192,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_imported object",193,N],[10,"set_parent_of","","set as the parent of some surface",193,N],[0,"c_interfaces","wayland_protocols::unstable::xdg_foreign::v2","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::xdg_foreign::v2::c_interfaces","",N,N],[7,"zxdg_exporter_v2_requests","","",N,N],[7,"zxdg_exporter_v2_interface","","",N,N],[7,"zxdg_importer_v2_requests","","",N,N],[7,"zxdg_importer_v2_interface","","",N,N],[7,"zxdg_exported_v2_requests","","",N,N],[7,"zxdg_exported_v2_events","","",N,N],[7,"zxdg_exported_v2_interface","","",N,N],[7,"zxdg_imported_v2_requests","","",N,N],[7,"zxdg_imported_v2_events","","",N,N],[7,"zxdg_imported_v2_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",184,[[["self"]],["bool"]]],[11,"from_raw_c","","",184,N],[11,"as_raw_c_in","","",184,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",194,[[["self"]],["bool"]]],[11,"from_raw_c","","",194,N],[11,"as_raw_c_in","","",194,[[["self"],["f"]],["t"]]],[11,"c_interface","","",195,N],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",186,[[["self"]],["bool"]]],[11,"from_raw_c","","",186,N],[11,"as_raw_c_in","","",186,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",196,[[["self"]],["bool"]]],[11,"from_raw_c","","",196,N],[11,"as_raw_c_in","","",196,[[["self"],["f"]],["t"]]],[11,"c_interface","","",197,N],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",188,[[["self"]],["bool"]]],[11,"from_raw_c","","",188,N],[11,"as_raw_c_in","","",188,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",189,[[["self"]],["bool"]]],[11,"from_raw_c","","",189,N],[11,"as_raw_c_in","","",189,[[["self"],["f"]],["t"]]],[11,"c_interface","","",198,N],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",191,[[["self"]],["bool"]]],[11,"from_raw_c","","",191,N],[11,"as_raw_c_in","","",191,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",192,[[["self"]],["bool"]]],[11,"from_raw_c","","",192,N],[11,"as_raw_c_in","","",192,[[["self"],["f"]],["t"]]],[11,"c_interface","","",199,N],[0,"xdg_output","wayland_protocols::unstable","Protocol to describe output regions",N,N],[0,"v1","wayland_protocols::unstable::xdg_output","",N,N],[0,"client","wayland_protocols::unstable::xdg_output::v1","Client-side API of this protocol",N,N],[0,"zxdg_output_manager_v1","wayland_protocols::unstable::xdg_output::v1::client","manage xdg_output objects",N,N],[3,"ZxdgOutputManagerV1","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_output_manager object",200,N],[13,"GetXdgOutput","","create an xdg output from a wl_output",200,N],[12,"id","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1::Request","",200,N],[12,"output","","",200,N],[4,"Event","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_output_manager object",201,N],[10,"get_xdg_output","","create an xdg output from a wl_output",201,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"zxdg_output_v1","wayland_protocols::unstable::xdg_output::v1::client","compositor logical output region",N,N],[3,"ZxdgOutputV1","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_output object",202,N],[4,"Event","","",N,N],[13,"LogicalPosition","","position of the output within the global compositor space",203,N],[12,"x","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",203,N],[12,"y","","",203,N],[13,"LogicalSize","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","size of the output in the global compositor space",203,N],[12,"width","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",203,N],[12,"height","","",203,N],[13,"Done","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","all information about the output have been sent",203,N],[13,"Name","","name of this output",203,N],[12,"name","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",203,N],[13,"Description","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","human-readable description of this output",203,N],[12,"description","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",203,N],[8,"RequestsTrait","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",N,N],[10,"destroy","","destroy the xdg_output object",204,N],[0,"c_interfaces","wayland_protocols::unstable::xdg_output::v1","C interfaces for this protocol",N,N],[7,"wl_output_interface","wayland_protocols::unstable::xdg_output::v1::c_interfaces","",N,N],[7,"zxdg_output_manager_v1_requests","","",N,N],[7,"zxdg_output_manager_v1_interface","","",N,N],[7,"zxdg_output_v1_requests","","",N,N],[7,"zxdg_output_v1_events","","",N,N],[7,"zxdg_output_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",200,[[["self"]],["bool"]]],[11,"from_raw_c","","",200,N],[11,"as_raw_c_in","","",200,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",205,[[["self"]],["bool"]]],[11,"from_raw_c","","",205,N],[11,"as_raw_c_in","","",205,[[["self"],["f"]],["t"]]],[11,"c_interface","","",206,N],[11,"is_destructor","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",202,[[["self"]],["bool"]]],[11,"from_raw_c","","",202,N],[11,"as_raw_c_in","","",202,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",203,[[["self"]],["bool"]]],[11,"from_raw_c","","",203,N],[11,"as_raw_c_in","","",203,[[["self"],["f"]],["t"]]],[11,"c_interface","","",207,N],[0,"xdg_shell","wayland_protocols::unstable","XDG Shell protocol",N,N],[0,"v5","wayland_protocols::unstable::xdg_shell","",N,N],[0,"client","wayland_protocols::unstable::xdg_shell::v5","Client-side API of this protocol",N,N],[0,"xdg_shell","wayland_protocols::unstable::xdg_shell::v5::client","create desktop-style surfaces",N,N],[3,"XdgShell","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",N,N],[4,"Version","","latest protocol version",N,N],[13,"Current","","Always the latest version",208,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",209,N],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",209,N],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",209,N],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",209,N],[4,"Request","","",N,N],[13,"Destroy","","destroy xdg_shell",210,N],[13,"UseUnstableVersion","","enable use of this unstable version",210,N],[12,"version","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",210,N],[13,"GetXdgSurface","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","create a shell surface from a surface",210,N],[12,"id","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",210,N],[12,"surface","","",210,N],[13,"GetXdgPopup","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","create a popup for a surface",210,N],[12,"id","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",210,N],[12,"surface","","",210,N],[12,"parent","","",210,N],[12,"seat","","",210,N],[12,"serial","","",210,N],[12,"x","","",210,N],[12,"y","","",210,N],[13,"Pong","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","respond to a ping event",210,N],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",210,N],[4,"Event","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",N,N],[13,"Ping","","check if the client is alive",211,N],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Event","",211,N],[8,"RequestsTrait","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",N,N],[10,"destroy","","destroy xdg_shell",212,N],[10,"use_unstable_version","","enable use of this unstable version",212,N],[10,"get_xdg_surface","","create a shell surface from a surface",212,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"get_xdg_popup","","create a popup for a surface",212,[[["self"],["proxy"],["proxy"],["proxy"],["u32"],["i32"],["i32"]],["result",["newproxy"]]]],[10,"pong","","respond to a ping event",212,N],[0,"xdg_surface","wayland_protocols::unstable::xdg_shell::v5::client","A desktop window",N,N],[3,"XdgSurface","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",N,N],[4,"ResizeEdge","","edge values for resizing",N,N],[13,"None","","",213,N],[13,"Top","","",213,N],[13,"Bottom","","",213,N],[13,"Left","","",213,N],[13,"TopLeft","","",213,N],[13,"BottomLeft","","",213,N],[13,"Right","","",213,N],[13,"TopRight","","",213,N],[13,"BottomRight","","",213,N],[4,"State","","types of state on the surface",N,N],[13,"Maximized","","the surface is maximized",214,N],[13,"Fullscreen","","the surface is fullscreen",214,N],[13,"Resizing","","the surface is being resized",214,N],[13,"Activated","","the surface is now activated",214,N],[4,"Request","","",N,N],[13,"Destroy","","Destroy the xdg_surface",215,N],[13,"SetParent","","set the parent of this surface",215,N],[12,"parent","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[13,"SetTitle","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","set surface title",215,N],[12,"title","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[13,"SetAppId","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","set application ID",215,N],[12,"app_id","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[13,"ShowWindowMenu","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","show the window menu",215,N],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[12,"serial","","",215,N],[12,"x","","",215,N],[12,"y","","",215,N],[13,"Move","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","start an interactive move",215,N],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[12,"serial","","",215,N],[13,"Resize","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","start an interactive resize",215,N],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[12,"serial","","",215,N],[12,"edges","","",215,N],[13,"AckConfigure","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","ack a configure event",215,N],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[13,"SetWindowGeometry","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","set the new window geometry",215,N],[12,"x","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[12,"y","","",215,N],[12,"width","","",215,N],[12,"height","","",215,N],[13,"SetMaximized","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","maximize the window",215,N],[13,"UnsetMaximized","","unmaximize the window",215,N],[13,"SetFullscreen","","set the window as fullscreen on a monitor",215,N],[12,"output","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",215,N],[13,"UnsetFullscreen","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",215,N],[13,"SetMinimized","","set the window as minimized",215,N],[4,"Event","","",N,N],[13,"Configure","","suggest a surface change",216,N],[12,"width","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Event","",216,N],[12,"height","","",216,N],[12,"states","","",216,N],[12,"serial","","",216,N],[13,"Close","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","surface wants to be closed",216,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","Destroy the xdg_surface",217,N],[10,"set_parent","","set the parent of this surface",217,N],[10,"set_title","","set surface title",217,N],[10,"set_app_id","","set application ID",217,N],[10,"show_window_menu","","show the window menu",217,N],[10,"_move","","start an interactive move",217,N],[10,"resize","","start an interactive resize",217,N],[10,"ack_configure","","ack a configure event",217,N],[10,"set_window_geometry","","set the new window geometry",217,N],[10,"set_maximized","","maximize the window",217,N],[10,"unset_maximized","","unmaximize the window",217,N],[10,"set_fullscreen","","set the window as fullscreen on a monitor",217,N],[10,"unset_fullscreen","","",217,N],[10,"set_minimized","","set the window as minimized",217,N],[0,"xdg_popup","wayland_protocols::unstable::xdg_shell::v5::client","short-lived, popup surfaces for menus",N,N],[3,"XdgPopup","wayland_protocols::unstable::xdg_shell::v5::client::xdg_popup","",N,N],[4,"Request","","",N,N],[13,"Destroy","","remove xdg_popup interface",218,N],[4,"Event","","",N,N],[13,"PopupDone","","popup interaction is done",219,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove xdg_popup interface",220,N],[0,"c_interfaces","wayland_protocols::unstable::xdg_shell::v5","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::xdg_shell::v5::c_interfaces","",N,N],[7,"wl_output_interface","","",N,N],[7,"wl_seat_interface","","",N,N],[7,"xdg_shell_requests","","",N,N],[7,"xdg_shell_events","","",N,N],[7,"xdg_shell_interface","","",N,N],[7,"xdg_surface_requests","","",N,N],[7,"xdg_surface_events","","",N,N],[7,"xdg_surface_interface","","",N,N],[7,"xdg_popup_requests","","",N,N],[7,"xdg_popup_events","","",N,N],[7,"xdg_popup_interface","","",N,N],[11,"clone","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",208,[[["self"]],["version"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"eq","","",208,[[["self"],["version"]],["bool"]]],[11,"from_raw","","",208,[[["u32"]],["option",["version"]]]],[11,"to_raw","","",208,[[["self"]],["u32"]]],[11,"clone","","",209,[[["self"]],["error"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"eq","","",209,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",209,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",209,[[["self"]],["u32"]]],[11,"is_destructor","","",210,[[["self"]],["bool"]]],[11,"from_raw_c","","",210,N],[11,"as_raw_c_in","","",210,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",211,[[["self"]],["bool"]]],[11,"from_raw_c","","",211,N],[11,"as_raw_c_in","","",211,[[["self"],["f"]],["t"]]],[11,"c_interface","","",221,N],[11,"clone","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",213,[[["self"]],["resizeedge"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"eq","","",213,[[["self"],["resizeedge"]],["bool"]]],[11,"from_raw","","",213,[[["u32"]],["option",["resizeedge"]]]],[11,"to_raw","","",213,[[["self"]],["u32"]]],[11,"clone","","",214,[[["self"]],["state"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"eq","","",214,[[["self"],["state"]],["bool"]]],[11,"from_raw","","",214,[[["u32"]],["option",["state"]]]],[11,"to_raw","","",214,[[["self"]],["u32"]]],[11,"is_destructor","","",215,[[["self"]],["bool"]]],[11,"from_raw_c","","",215,N],[11,"as_raw_c_in","","",215,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",216,[[["self"]],["bool"]]],[11,"from_raw_c","","",216,N],[11,"as_raw_c_in","","",216,[[["self"],["f"]],["t"]]],[11,"c_interface","","",222,N],[11,"is_destructor","wayland_protocols::unstable::xdg_shell::v5::client::xdg_popup","",218,[[["self"]],["bool"]]],[11,"from_raw_c","","",218,N],[11,"as_raw_c_in","","",218,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",219,[[["self"]],["bool"]]],[11,"from_raw_c","","",219,N],[11,"as_raw_c_in","","",219,[[["self"],["f"]],["t"]]],[11,"c_interface","","",223,N],[0,"v6","wayland_protocols::unstable::xdg_shell","",N,N],[0,"client","wayland_protocols::unstable::xdg_shell::v6","Client-side API of this protocol",N,N],[0,"zxdg_shell_v6","wayland_protocols::unstable::xdg_shell::v6::client","create desktop-style surfaces",N,N],[3,"ZxdgShellV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",N,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",224,N],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",224,N],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",224,N],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",224,N],[13,"InvalidSurfaceState","","the client provided an invalid surface state",224,N],[13,"InvalidPositioner","","the client provided an invalid positioner",224,N],[4,"Request","","",N,N],[13,"Destroy","","destroy xdg_shell",225,N],[13,"CreatePositioner","","create a positioner object",225,N],[12,"id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",225,N],[13,"GetXdgSurface","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","create a shell surface from a surface",225,N],[12,"id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",225,N],[12,"surface","","",225,N],[13,"Pong","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","respond to a ping event",225,N],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",225,N],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",N,N],[13,"Ping","","check if the client is alive",226,N],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Event","",226,N],[8,"RequestsTrait","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",N,N],[10,"destroy","","destroy xdg_shell",227,N],[10,"create_positioner","","create a positioner object",227,[[["self"]],["result",["newproxy"]]]],[10,"get_xdg_surface","","create a shell surface from a surface",227,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"pong","","respond to a ping event",227,N],[0,"zxdg_positioner_v6","wayland_protocols::unstable::xdg_shell::v6::client","child surface positioner",N,N],[3,"Anchor","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",N,N],[3,"Gravity","","",N,N],[3,"ConstraintAdjustment","","constraint adjustments",N,N],[3,"ZxdgPositionerV6","","",N,N],[4,"Error","","",N,N],[13,"InvalidInput","","invalid input provided",228,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_positioner object",229,N],[13,"SetSize","","set the size of the to-be positioned rectangle",229,N],[12,"width","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",229,N],[12,"height","","",229,N],[13,"SetAnchorRect","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set the anchor rectangle within the parent surface",229,N],[12,"x","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",229,N],[12,"y","","",229,N],[12,"width","","",229,N],[12,"height","","",229,N],[13,"SetAnchor","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set anchor rectangle anchor edges",229,N],[12,"anchor","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",229,N],[13,"SetGravity","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set child surface gravity",229,N],[12,"gravity","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",229,N],[13,"SetConstraintAdjustment","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set the adjustment to be done when constrained",229,N],[12,"constraint_adjustment","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",229,N],[13,"SetOffset","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set surface position offset",229,N],[12,"x","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",229,N],[12,"y","","",229,N],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_positioner object",230,N],[10,"set_size","","set the size of the to-be positioned rectangle",230,N],[10,"set_anchor_rect","","set the anchor rectangle within the parent surface",230,N],[10,"set_anchor","","set anchor rectangle anchor edges",230,N],[10,"set_gravity","","set child surface gravity",230,N],[10,"set_constraint_adjustment","","set the adjustment to be done when constrained",230,N],[10,"set_offset","","set surface position offset",230,N],[0,"zxdg_surface_v6","wayland_protocols::unstable::xdg_shell::v6::client","desktop user interface surface base interface",N,N],[3,"ZxdgSurfaceV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",N,N],[4,"Error","","",N,N],[13,"NotConstructed","","",231,N],[13,"AlreadyConstructed","","",231,N],[13,"UnconfiguredBuffer","","",231,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_surface",232,N],[13,"GetToplevel","","assign the xdg_toplevel surface role",232,N],[12,"id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",232,N],[13,"GetPopup","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","assign the xdg_popup surface role",232,N],[12,"id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",232,N],[12,"parent","","",232,N],[12,"positioner","","",232,N],[13,"SetWindowGeometry","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","set the new window geometry",232,N],[12,"x","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",232,N],[12,"y","","",232,N],[12,"width","","",232,N],[12,"height","","",232,N],[13,"AckConfigure","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","ack a configure event",232,N],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",232,N],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",N,N],[13,"Configure","","suggest a surface change",233,N],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Event","",233,N],[8,"RequestsTrait","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",N,N],[10,"destroy","","destroy the xdg_surface",234,N],[10,"get_toplevel","","assign the xdg_toplevel surface role",234,[[["self"]],["result",["newproxy"]]]],[10,"get_popup","","assign the xdg_popup surface role",234,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[10,"set_window_geometry","","set the new window geometry",234,N],[10,"ack_configure","","ack a configure event",234,N],[0,"zxdg_toplevel_v6","wayland_protocols::unstable::xdg_shell::v6::client","toplevel surface",N,N],[3,"ZxdgToplevelV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",N,N],[4,"ResizeEdge","","edge values for resizing",N,N],[13,"None","","",235,N],[13,"Top","","",235,N],[13,"Bottom","","",235,N],[13,"Left","","",235,N],[13,"TopLeft","","",235,N],[13,"BottomLeft","","",235,N],[13,"Right","","",235,N],[13,"TopRight","","",235,N],[13,"BottomRight","","",235,N],[4,"State","","types of state on the surface",N,N],[13,"Maximized","","the surface is maximized",236,N],[13,"Fullscreen","","the surface is fullscreen",236,N],[13,"Resizing","","the surface is being resized",236,N],[13,"Activated","","the surface is now activated",236,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_toplevel",237,N],[13,"SetParent","","set the parent of this surface",237,N],[12,"parent","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[13,"SetTitle","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set surface title",237,N],[12,"title","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[13,"SetAppId","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set application ID",237,N],[12,"app_id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[13,"ShowWindowMenu","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","show the window menu",237,N],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[12,"serial","","",237,N],[12,"x","","",237,N],[12,"y","","",237,N],[13,"Move","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","start an interactive move",237,N],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[12,"serial","","",237,N],[13,"Resize","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","start an interactive resize",237,N],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[12,"serial","","",237,N],[12,"edges","","",237,N],[13,"SetMaxSize","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set the maximum size",237,N],[12,"width","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[12,"height","","",237,N],[13,"SetMinSize","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set the minimum size",237,N],[12,"width","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[12,"height","","",237,N],[13,"SetMaximized","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","maximize the window",237,N],[13,"UnsetMaximized","","unmaximize the window",237,N],[13,"SetFullscreen","","set the window as fullscreen on a monitor",237,N],[12,"output","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",237,N],[13,"UnsetFullscreen","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",237,N],[13,"SetMinimized","","set the window as minimized",237,N],[4,"Event","","",N,N],[13,"Configure","","suggest a surface change",238,N],[12,"width","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Event","",238,N],[12,"height","","",238,N],[12,"states","","",238,N],[13,"Close","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","surface wants to be closed",238,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_toplevel",239,N],[10,"set_parent","","set the parent of this surface",239,N],[10,"set_title","","set surface title",239,N],[10,"set_app_id","","set application ID",239,N],[10,"show_window_menu","","show the window menu",239,N],[10,"_move","","start an interactive move",239,N],[10,"resize","","start an interactive resize",239,N],[10,"set_max_size","","set the maximum size",239,N],[10,"set_min_size","","set the minimum size",239,N],[10,"set_maximized","","maximize the window",239,N],[10,"unset_maximized","","unmaximize the window",239,N],[10,"set_fullscreen","","set the window as fullscreen on a monitor",239,N],[10,"unset_fullscreen","","",239,N],[10,"set_minimized","","set the window as minimized",239,N],[0,"zxdg_popup_v6","wayland_protocols::unstable::xdg_shell::v6::client","short-lived, popup surfaces for menus",N,N],[3,"ZxdgPopupV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",N,N],[4,"Error","","",N,N],[13,"InvalidGrab","","tried to grab after being mapped",240,N],[4,"Request","","",N,N],[13,"Destroy","","remove xdg_popup interface",241,N],[13,"Grab","","make the popup take an explicit grab",241,N],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6::Request","",241,N],[12,"serial","","",241,N],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",N,N],[13,"Configure","","configure the popup surface",242,N],[12,"x","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6::Event","",242,N],[12,"y","","",242,N],[12,"width","","",242,N],[12,"height","","",242,N],[13,"PopupDone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","popup interaction is done",242,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove xdg_popup interface",243,N],[10,"grab","","make the popup take an explicit grab",243,N],[0,"c_interfaces","wayland_protocols::unstable::xdg_shell::v6","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::unstable::xdg_shell::v6::c_interfaces","",N,N],[7,"wl_output_interface","","",N,N],[7,"wl_seat_interface","","",N,N],[7,"zxdg_shell_v6_requests","","",N,N],[7,"zxdg_shell_v6_events","","",N,N],[7,"zxdg_shell_v6_interface","","",N,N],[7,"zxdg_positioner_v6_requests","","",N,N],[7,"zxdg_positioner_v6_interface","","",N,N],[7,"zxdg_surface_v6_requests","","",N,N],[7,"zxdg_surface_v6_events","","",N,N],[7,"zxdg_surface_v6_interface","","",N,N],[7,"zxdg_toplevel_v6_requests","","",N,N],[7,"zxdg_toplevel_v6_events","","",N,N],[7,"zxdg_toplevel_v6_interface","","",N,N],[7,"zxdg_popup_v6_requests","","",N,N],[7,"zxdg_popup_v6_events","","",N,N],[7,"zxdg_popup_v6_interface","","",N,N],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",224,[[["self"]],["error"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"eq","","",224,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",224,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",224,[[["self"]],["u32"]]],[11,"is_destructor","","",225,[[["self"]],["bool"]]],[11,"from_raw_c","","",225,N],[11,"as_raw_c_in","","",225,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",226,[[["self"]],["bool"]]],[11,"from_raw_c","","",226,N],[11,"as_raw_c_in","","",226,[[["self"],["f"]],["t"]]],[11,"c_interface","","",244,N],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",228,[[["self"]],["error"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"eq","","",228,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",228,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",228,[[["self"]],["u32"]]],[11,"eq","","",245,[[["self"],["anchor"]],["bool"]]],[11,"ne","","",245,[[["self"],["anchor"]],["bool"]]],[11,"clone","","",245,[[["self"]],["anchor"]]],[11,"partial_cmp","","",245,[[["self"],["anchor"]],["option",["ordering"]]]],[11,"lt","","",245,[[["self"],["anchor"]],["bool"]]],[11,"le","","",245,[[["self"],["anchor"]],["bool"]]],[11,"gt","","",245,[[["self"],["anchor"]],["bool"]]],[11,"ge","","",245,[[["self"],["anchor"]],["bool"]]],[11,"cmp","","",245,[[["self"],["anchor"]],["ordering"]]],[11,"hash","","",245,N],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[18,"None","","the center of the anchor rectangle",245,N],[18,"Top","","the top edge of the anchor rectangle",245,N],[18,"Bottom","","the bottom edge of the anchor rectangle",245,N],[18,"Left","","the left edge of the anchor rectangle",245,N],[18,"Right","","the right edge of the anchor rectangle",245,N],[11,"empty","","Returns an empty set of flags.",245,[[],["anchor"]]],[11,"all","","Returns the set containing all flags.",245,[[],["anchor"]]],[11,"bits","","Returns the raw value of the flags currently stored.",245,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",245,[[["u32"]],["option",["anchor"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",245,[[["u32"]],["anchor"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",245,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",245,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",245,[[["self"],["anchor"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",245,[[["self"],["anchor"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",245,[[["self"],["anchor"]]]],[11,"remove","","Removes the specified flags in-place.",245,[[["self"],["anchor"]]]],[11,"toggle","","Toggles the specified flags in-place.",245,[[["self"],["anchor"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",245,[[["self"],["anchor"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",245,[[["self"],["anchor"]],["anchor"]]],[11,"bitor_assign","","Adds the set of flags.",245,[[["self"],["anchor"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",245,[[["self"],["anchor"]],["anchor"]]],[11,"bitxor_assign","","Toggles the set of flags.",245,[[["self"],["anchor"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",245,[[["self"],["anchor"]],["anchor"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",245,[[["self"],["anchor"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",245,[[["self"],["anchor"]],["anchor"]]],[11,"sub_assign","","Disables all flags enabled in the set.",245,[[["self"],["anchor"]]]],[11,"not","","Returns the complement of this set of flags.",245,[[["self"]],["anchor"]]],[11,"extend","","",245,[[["self"],["t"]]]],[11,"from_iter","","",245,[[["t"]],["anchor"]]],[11,"from_raw","","",245,[[["u32"]],["option",["anchor"]]]],[11,"to_raw","","",245,[[["self"]],["u32"]]],[11,"eq","","",246,[[["self"],["gravity"]],["bool"]]],[11,"ne","","",246,[[["self"],["gravity"]],["bool"]]],[11,"clone","","",246,[[["self"]],["gravity"]]],[11,"partial_cmp","","",246,[[["self"],["gravity"]],["option",["ordering"]]]],[11,"lt","","",246,[[["self"],["gravity"]],["bool"]]],[11,"le","","",246,[[["self"],["gravity"]],["bool"]]],[11,"gt","","",246,[[["self"],["gravity"]],["bool"]]],[11,"ge","","",246,[[["self"],["gravity"]],["bool"]]],[11,"cmp","","",246,[[["self"],["gravity"]],["ordering"]]],[11,"hash","","",246,N],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[18,"None","","center over the anchor edge",246,N],[18,"Top","","position above the anchor edge",246,N],[18,"Bottom","","position below the anchor edge",246,N],[18,"Left","","position to the left of the anchor edge",246,N],[18,"Right","","position to the right of the anchor edge",246,N],[11,"empty","","Returns an empty set of flags.",246,[[],["gravity"]]],[11,"all","","Returns the set containing all flags.",246,[[],["gravity"]]],[11,"bits","","Returns the raw value of the flags currently stored.",246,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",246,[[["u32"]],["option",["gravity"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",246,[[["u32"]],["gravity"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",246,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",246,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",246,[[["self"],["gravity"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",246,[[["self"],["gravity"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",246,[[["self"],["gravity"]]]],[11,"remove","","Removes the specified flags in-place.",246,[[["self"],["gravity"]]]],[11,"toggle","","Toggles the specified flags in-place.",246,[[["self"],["gravity"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",246,[[["self"],["gravity"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",246,[[["self"],["gravity"]],["gravity"]]],[11,"bitor_assign","","Adds the set of flags.",246,[[["self"],["gravity"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",246,[[["self"],["gravity"]],["gravity"]]],[11,"bitxor_assign","","Toggles the set of flags.",246,[[["self"],["gravity"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",246,[[["self"],["gravity"]],["gravity"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",246,[[["self"],["gravity"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",246,[[["self"],["gravity"]],["gravity"]]],[11,"sub_assign","","Disables all flags enabled in the set.",246,[[["self"],["gravity"]]]],[11,"not","","Returns the complement of this set of flags.",246,[[["self"]],["gravity"]]],[11,"extend","","",246,[[["self"],["t"]]]],[11,"from_iter","","",246,[[["t"]],["gravity"]]],[11,"from_raw","","",246,[[["u32"]],["option",["gravity"]]]],[11,"to_raw","","",246,[[["self"]],["u32"]]],[11,"eq","","",247,[[["self"],["constraintadjustment"]],["bool"]]],[11,"ne","","",247,[[["self"],["constraintadjustment"]],["bool"]]],[11,"clone","","",247,[[["self"]],["constraintadjustment"]]],[11,"partial_cmp","","",247,[[["self"],["constraintadjustment"]],["option",["ordering"]]]],[11,"lt","","",247,[[["self"],["constraintadjustment"]],["bool"]]],[11,"le","","",247,[[["self"],["constraintadjustment"]],["bool"]]],[11,"gt","","",247,[[["self"],["constraintadjustment"]],["bool"]]],[11,"ge","","",247,[[["self"],["constraintadjustment"]],["bool"]]],[11,"cmp","","",247,[[["self"],["constraintadjustment"]],["ordering"]]],[11,"hash","","",247,N],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[18,"None","","don't move the child surface when constrained",247,N],[18,"SlideX","","move along the x axis until unconstrained",247,N],[18,"SlideY","","move along the y axis until unconstrained",247,N],[18,"FlipX","","invert the anchor and gravity on the x axis",247,N],[18,"FlipY","","invert the anchor and gravity on the y axis",247,N],[18,"ResizeX","","horizontally resize the surface",247,N],[18,"ResizeY","","vertically resize the surface",247,N],[11,"empty","","Returns an empty set of flags.",247,[[],["constraintadjustment"]]],[11,"all","","Returns the set containing all flags.",247,[[],["constraintadjustment"]]],[11,"bits","","Returns the raw value of the flags currently stored.",247,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",247,[[["u32"]],["option",["constraintadjustment"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",247,[[["u32"]],["constraintadjustment"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",247,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",247,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",247,[[["self"],["constraintadjustment"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",247,[[["self"],["constraintadjustment"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",247,[[["self"],["constraintadjustment"]]]],[11,"remove","","Removes the specified flags in-place.",247,[[["self"],["constraintadjustment"]]]],[11,"toggle","","Toggles the specified flags in-place.",247,[[["self"],["constraintadjustment"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",247,[[["self"],["constraintadjustment"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",247,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"bitor_assign","","Adds the set of flags.",247,[[["self"],["constraintadjustment"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",247,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"bitxor_assign","","Toggles the set of flags.",247,[[["self"],["constraintadjustment"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",247,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",247,[[["self"],["constraintadjustment"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",247,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"sub_assign","","Disables all flags enabled in the set.",247,[[["self"],["constraintadjustment"]]]],[11,"not","","Returns the complement of this set of flags.",247,[[["self"]],["constraintadjustment"]]],[11,"extend","","",247,[[["self"],["t"]]]],[11,"from_iter","","",247,[[["t"]],["constraintadjustment"]]],[11,"from_raw","","",247,[[["u32"]],["option",["constraintadjustment"]]]],[11,"to_raw","","",247,[[["self"]],["u32"]]],[11,"is_destructor","","",229,[[["self"]],["bool"]]],[11,"from_raw_c","","",229,N],[11,"as_raw_c_in","","",229,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",248,[[["self"]],["bool"]]],[11,"from_raw_c","","",248,N],[11,"as_raw_c_in","","",248,[[["self"],["f"]],["t"]]],[11,"c_interface","","",249,N],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",231,[[["self"]],["error"]]],[11,"fmt","","",231,[[["self"],["formatter"]],["result"]]],[11,"eq","","",231,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",231,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",231,[[["self"]],["u32"]]],[11,"is_destructor","","",232,[[["self"]],["bool"]]],[11,"from_raw_c","","",232,N],[11,"as_raw_c_in","","",232,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",233,[[["self"]],["bool"]]],[11,"from_raw_c","","",233,N],[11,"as_raw_c_in","","",233,[[["self"],["f"]],["t"]]],[11,"c_interface","","",250,N],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",235,[[["self"]],["resizeedge"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[11,"eq","","",235,[[["self"],["resizeedge"]],["bool"]]],[11,"from_raw","","",235,[[["u32"]],["option",["resizeedge"]]]],[11,"to_raw","","",235,[[["self"]],["u32"]]],[11,"clone","","",236,[[["self"]],["state"]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result"]]],[11,"eq","","",236,[[["self"],["state"]],["bool"]]],[11,"from_raw","","",236,[[["u32"]],["option",["state"]]]],[11,"to_raw","","",236,[[["self"]],["u32"]]],[11,"is_destructor","","",237,[[["self"]],["bool"]]],[11,"from_raw_c","","",237,N],[11,"as_raw_c_in","","",237,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",238,[[["self"]],["bool"]]],[11,"from_raw_c","","",238,N],[11,"as_raw_c_in","","",238,[[["self"],["f"]],["t"]]],[11,"c_interface","","",251,N],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",240,[[["self"]],["error"]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result"]]],[11,"eq","","",240,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",240,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",240,[[["self"]],["u32"]]],[11,"is_destructor","","",241,[[["self"]],["bool"]]],[11,"from_raw_c","","",241,N],[11,"as_raw_c_in","","",241,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",242,[[["self"]],["bool"]]],[11,"from_raw_c","","",242,N],[11,"as_raw_c_in","","",242,[[["self"],["f"]],["t"]]],[11,"c_interface","","",252,N],[0,"xwayland_keyboard_grab","wayland_protocols::unstable","Protocol for grabbing the keyboard from Xwayland",N,N],[0,"v1","wayland_protocols::unstable::xwayland_keyboard_grab","",N,N],[0,"client","wayland_protocols::unstable::xwayland_keyboard_grab::v1","Client-side API of this protocol",N,N],[0,"zwp_xwayland_keyboard_grab_manager_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client","context object for keyboard grab manager",N,N],[3,"ZwpXwaylandKeyboardGrabManagerV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the keyboard grab manager",253,N],[13,"GrabKeyboard","","grab the keyboard to a surface",253,N],[12,"id","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1::Request","",253,N],[12,"surface","","",253,N],[12,"seat","","",253,N],[4,"Event","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the keyboard grab manager",254,N],[10,"grab_keyboard","","grab the keyboard to a surface",254,[[["self"],["proxy"],["proxy"]],["result",["newproxy"]]]],[0,"zwp_xwayland_keyboard_grab_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client","interface for grabbing the keyboard",N,N],[3,"ZwpXwaylandKeyboardGrabV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",N,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the grabbed keyboard object",255,N],[4,"Event","","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the grabbed keyboard object",256,N],[0,"c_interfaces","wayland_protocols::unstable::xwayland_keyboard_grab::v1","C interfaces for this protocol",N,N],[7,"wl_seat_interface","wayland_protocols::unstable::xwayland_keyboard_grab::v1::c_interfaces","",N,N],[7,"wl_surface_interface","","",N,N],[7,"zwp_xwayland_keyboard_grab_manager_v1_requests","","",N,N],[7,"zwp_xwayland_keyboard_grab_manager_v1_interface","","",N,N],[7,"zwp_xwayland_keyboard_grab_v1_requests","","",N,N],[7,"zwp_xwayland_keyboard_grab_v1_interface","","",N,N],[11,"is_destructor","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",253,[[["self"]],["bool"]]],[11,"from_raw_c","","",253,N],[11,"as_raw_c_in","","",253,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",257,[[["self"]],["bool"]]],[11,"from_raw_c","","",257,N],[11,"as_raw_c_in","","",257,[[["self"],["f"]],["t"]]],[11,"c_interface","","",258,N],[11,"is_destructor","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",255,[[["self"]],["bool"]]],[11,"from_raw_c","","",255,N],[11,"as_raw_c_in","","",255,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",259,[[["self"]],["bool"]]],[11,"from_raw_c","","",259,N],[11,"as_raw_c_in","","",259,[[["self"],["f"]],["t"]]],[11,"c_interface","","",260,N],[0,"presentation_time","wayland_protocols","Presentation time protocol",N,N],[0,"client","wayland_protocols::presentation_time","Client-side API of this protocol",N,N],[0,"wp_presentation","wayland_protocols::presentation_time::client","timed presentation related wl_surface requests",N,N],[3,"WpPresentation","wayland_protocols::presentation_time::client::wp_presentation","",N,N],[4,"Error","","fatal presentation errors",N,N],[13,"InvalidTimestamp","","invalid value in tv_nsec",261,N],[13,"InvalidFlag","","invalid flag",261,N],[4,"Request","","",N,N],[13,"Destroy","","unbind from the presentation interface",262,N],[13,"Feedback","","request presentation feedback information",262,N],[12,"surface","wayland_protocols::presentation_time::client::wp_presentation::Request","",262,N],[12,"callback","","",262,N],[4,"Event","wayland_protocols::presentation_time::client::wp_presentation","",N,N],[13,"ClockId","","clock ID for timestamps",263,N],[12,"clk_id","wayland_protocols::presentation_time::client::wp_presentation::Event","",263,N],[8,"RequestsTrait","wayland_protocols::presentation_time::client::wp_presentation","",N,N],[10,"destroy","","unbind from the presentation interface",264,N],[10,"feedback","","request presentation feedback information",264,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"wp_presentation_feedback","wayland_protocols::presentation_time::client","presentation time feedback event",N,N],[3,"WpPresentationFeedback","wayland_protocols::presentation_time::client::wp_presentation_feedback","",N,N],[4,"Kind","","bitmask of flags in presented event",N,N],[13,"Vsync","","presentation was vsync'd",265,N],[13,"HwClock","","hardware provided the presentation timestamp",265,N],[13,"HwCompletion","","hardware signalled the start of the presentation",265,N],[13,"ZeroCopy","","presentation was done zero-copy",265,N],[4,"Request","","",N,N],[4,"Event","","",N,N],[13,"SyncOutput","","presentation synchronized to this output",266,N],[12,"output","wayland_protocols::presentation_time::client::wp_presentation_feedback::Event","",266,N],[13,"Presented","wayland_protocols::presentation_time::client::wp_presentation_feedback","the content update was displayed",266,N],[12,"tv_sec_hi","wayland_protocols::presentation_time::client::wp_presentation_feedback::Event","",266,N],[12,"tv_sec_lo","","",266,N],[12,"tv_nsec","","",266,N],[12,"refresh","","",266,N],[12,"seq_hi","","",266,N],[12,"seq_lo","","",266,N],[12,"flags","","",266,N],[13,"Discarded","wayland_protocols::presentation_time::client::wp_presentation_feedback","the content update was not displayed",266,N],[8,"RequestsTrait","","",N,N],[0,"c_interfaces","wayland_protocols::presentation_time","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::presentation_time::c_interfaces","",N,N],[7,"wl_output_interface","","",N,N],[7,"wp_presentation_requests","","",N,N],[7,"wp_presentation_events","","",N,N],[7,"wp_presentation_interface","","",N,N],[7,"wp_presentation_feedback_events","","",N,N],[7,"wp_presentation_feedback_interface","","",N,N],[0,"xdg_shell","wayland_protocols","XDG Shell protocol",N,N],[0,"client","wayland_protocols::xdg_shell","Client-side API of this protocol",N,N],[0,"xdg_wm_base","wayland_protocols::xdg_shell::client","create desktop-style surfaces",N,N],[3,"XdgWmBase","wayland_protocols::xdg_shell::client::xdg_wm_base","",N,N],[4,"Error","","",N,N],[13,"Role","","given wl_surface has another role",267,N],[13,"DefunctSurfaces","","xdg_wm_base was destroyed before children",267,N],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",267,N],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",267,N],[13,"InvalidSurfaceState","","the client provided an invalid surface state",267,N],[13,"InvalidPositioner","","the client provided an invalid positioner",267,N],[4,"Request","","",N,N],[13,"Destroy","","destroy xdg_wm_base",268,N],[13,"CreatePositioner","","create a positioner object",268,N],[12,"id","wayland_protocols::xdg_shell::client::xdg_wm_base::Request","",268,N],[13,"GetXdgSurface","wayland_protocols::xdg_shell::client::xdg_wm_base","create a shell surface from a surface",268,N],[12,"id","wayland_protocols::xdg_shell::client::xdg_wm_base::Request","",268,N],[12,"surface","","",268,N],[13,"Pong","wayland_protocols::xdg_shell::client::xdg_wm_base","respond to a ping event",268,N],[12,"serial","wayland_protocols::xdg_shell::client::xdg_wm_base::Request","",268,N],[4,"Event","wayland_protocols::xdg_shell::client::xdg_wm_base","",N,N],[13,"Ping","","check if the client is alive",269,N],[12,"serial","wayland_protocols::xdg_shell::client::xdg_wm_base::Event","",269,N],[8,"RequestsTrait","wayland_protocols::xdg_shell::client::xdg_wm_base","",N,N],[10,"destroy","","destroy xdg_wm_base",270,N],[10,"create_positioner","","create a positioner object",270,[[["self"]],["result",["newproxy"]]]],[10,"get_xdg_surface","","create a shell surface from a surface",270,[[["self"],["proxy"]],["result",["newproxy"]]]],[10,"pong","","respond to a ping event",270,N],[0,"xdg_positioner","wayland_protocols::xdg_shell::client","child surface positioner",N,N],[3,"ConstraintAdjustment","wayland_protocols::xdg_shell::client::xdg_positioner","constraint adjustments",N,N],[3,"XdgPositioner","","",N,N],[4,"Error","","",N,N],[13,"InvalidInput","","invalid input provided",271,N],[4,"Anchor","","",N,N],[13,"None","","",272,N],[13,"Top","","",272,N],[13,"Bottom","","",272,N],[13,"Left","","",272,N],[13,"Right","","",272,N],[13,"TopLeft","","",272,N],[13,"BottomLeft","","",272,N],[13,"TopRight","","",272,N],[13,"BottomRight","","",272,N],[4,"Gravity","","",N,N],[13,"None","","",273,N],[13,"Top","","",273,N],[13,"Bottom","","",273,N],[13,"Left","","",273,N],[13,"Right","","",273,N],[13,"TopLeft","","",273,N],[13,"BottomLeft","","",273,N],[13,"TopRight","","",273,N],[13,"BottomRight","","",273,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_positioner object",274,N],[13,"SetSize","","set the size of the to-be positioned rectangle",274,N],[12,"width","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",274,N],[12,"height","","",274,N],[13,"SetAnchorRect","wayland_protocols::xdg_shell::client::xdg_positioner","set the anchor rectangle within the parent surface",274,N],[12,"x","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",274,N],[12,"y","","",274,N],[12,"width","","",274,N],[12,"height","","",274,N],[13,"SetAnchor","wayland_protocols::xdg_shell::client::xdg_positioner","set anchor rectangle anchor",274,N],[12,"anchor","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",274,N],[13,"SetGravity","wayland_protocols::xdg_shell::client::xdg_positioner","set child surface gravity",274,N],[12,"gravity","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",274,N],[13,"SetConstraintAdjustment","wayland_protocols::xdg_shell::client::xdg_positioner","set the adjustment to be done when constrained",274,N],[12,"constraint_adjustment","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",274,N],[13,"SetOffset","wayland_protocols::xdg_shell::client::xdg_positioner","set surface position offset",274,N],[12,"x","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",274,N],[12,"y","","",274,N],[4,"Event","wayland_protocols::xdg_shell::client::xdg_positioner","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_positioner object",275,N],[10,"set_size","","set the size of the to-be positioned rectangle",275,N],[10,"set_anchor_rect","","set the anchor rectangle within the parent surface",275,N],[10,"set_anchor","","set anchor rectangle anchor",275,N],[10,"set_gravity","","set child surface gravity",275,N],[10,"set_constraint_adjustment","","set the adjustment to be done when constrained",275,N],[10,"set_offset","","set surface position offset",275,N],[0,"xdg_surface","wayland_protocols::xdg_shell::client","desktop user interface surface base interface",N,N],[3,"XdgSurface","wayland_protocols::xdg_shell::client::xdg_surface","",N,N],[4,"Error","","",N,N],[13,"NotConstructed","","",276,N],[13,"AlreadyConstructed","","",276,N],[13,"UnconfiguredBuffer","","",276,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_surface",277,N],[13,"GetToplevel","","assign the xdg_toplevel surface role",277,N],[12,"id","wayland_protocols::xdg_shell::client::xdg_surface::Request","",277,N],[13,"GetPopup","wayland_protocols::xdg_shell::client::xdg_surface","assign the xdg_popup surface role",277,N],[12,"id","wayland_protocols::xdg_shell::client::xdg_surface::Request","",277,N],[12,"parent","","",277,N],[12,"positioner","","",277,N],[13,"SetWindowGeometry","wayland_protocols::xdg_shell::client::xdg_surface","set the new window geometry",277,N],[12,"x","wayland_protocols::xdg_shell::client::xdg_surface::Request","",277,N],[12,"y","","",277,N],[12,"width","","",277,N],[12,"height","","",277,N],[13,"AckConfigure","wayland_protocols::xdg_shell::client::xdg_surface","ack a configure event",277,N],[12,"serial","wayland_protocols::xdg_shell::client::xdg_surface::Request","",277,N],[4,"Event","wayland_protocols::xdg_shell::client::xdg_surface","",N,N],[13,"Configure","","suggest a surface change",278,N],[12,"serial","wayland_protocols::xdg_shell::client::xdg_surface::Event","",278,N],[8,"RequestsTrait","wayland_protocols::xdg_shell::client::xdg_surface","",N,N],[10,"destroy","","destroy the xdg_surface",279,N],[10,"get_toplevel","","assign the xdg_toplevel surface role",279,[[["self"]],["result",["newproxy"]]]],[10,"get_popup","","assign the xdg_popup surface role",279,[[["self"],["option",["proxy"]],["proxy"]],["result",["newproxy"]]]],[10,"set_window_geometry","","set the new window geometry",279,N],[10,"ack_configure","","ack a configure event",279,N],[0,"xdg_toplevel","wayland_protocols::xdg_shell::client","toplevel surface",N,N],[3,"XdgToplevel","wayland_protocols::xdg_shell::client::xdg_toplevel","",N,N],[4,"ResizeEdge","","edge values for resizing",N,N],[13,"None","","",280,N],[13,"Top","","",280,N],[13,"Bottom","","",280,N],[13,"Left","","",280,N],[13,"TopLeft","","",280,N],[13,"BottomLeft","","",280,N],[13,"Right","","",280,N],[13,"TopRight","","",280,N],[13,"BottomRight","","",280,N],[4,"State","","types of state on the surface",N,N],[13,"Maximized","","the surface is maximized",281,N],[13,"Fullscreen","","the surface is fullscreen",281,N],[13,"Resizing","","the surface is being resized",281,N],[13,"Activated","","the surface is now activated",281,N],[13,"TiledLeft","","the surface is tiled",281,N],[13,"TiledRight","","the surface is tiled",281,N],[13,"TiledTop","","the surface is tiled",281,N],[13,"TiledBottom","","the surface is tiled",281,N],[4,"Request","","",N,N],[13,"Destroy","","destroy the xdg_toplevel",282,N],[13,"SetParent","","set the parent of this surface",282,N],[12,"parent","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[13,"SetTitle","wayland_protocols::xdg_shell::client::xdg_toplevel","set surface title",282,N],[12,"title","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[13,"SetAppId","wayland_protocols::xdg_shell::client::xdg_toplevel","set application ID",282,N],[12,"app_id","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[13,"ShowWindowMenu","wayland_protocols::xdg_shell::client::xdg_toplevel","show the window menu",282,N],[12,"seat","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[12,"serial","","",282,N],[12,"x","","",282,N],[12,"y","","",282,N],[13,"Move","wayland_protocols::xdg_shell::client::xdg_toplevel","start an interactive move",282,N],[12,"seat","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[12,"serial","","",282,N],[13,"Resize","wayland_protocols::xdg_shell::client::xdg_toplevel","start an interactive resize",282,N],[12,"seat","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[12,"serial","","",282,N],[12,"edges","","",282,N],[13,"SetMaxSize","wayland_protocols::xdg_shell::client::xdg_toplevel","set the maximum size",282,N],[12,"width","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[12,"height","","",282,N],[13,"SetMinSize","wayland_protocols::xdg_shell::client::xdg_toplevel","set the minimum size",282,N],[12,"width","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[12,"height","","",282,N],[13,"SetMaximized","wayland_protocols::xdg_shell::client::xdg_toplevel","maximize the window",282,N],[13,"UnsetMaximized","","unmaximize the window",282,N],[13,"SetFullscreen","","set the window as fullscreen on an output",282,N],[12,"output","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",282,N],[13,"UnsetFullscreen","wayland_protocols::xdg_shell::client::xdg_toplevel","unset the window as fullscreen",282,N],[13,"SetMinimized","","set the window as minimized",282,N],[4,"Event","","",N,N],[13,"Configure","","suggest a surface change",283,N],[12,"width","wayland_protocols::xdg_shell::client::xdg_toplevel::Event","",283,N],[12,"height","","",283,N],[12,"states","","",283,N],[13,"Close","wayland_protocols::xdg_shell::client::xdg_toplevel","surface wants to be closed",283,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","destroy the xdg_toplevel",284,N],[10,"set_parent","","set the parent of this surface",284,N],[10,"set_title","","set surface title",284,N],[10,"set_app_id","","set application ID",284,N],[10,"show_window_menu","","show the window menu",284,N],[10,"_move","","start an interactive move",284,N],[10,"resize","","start an interactive resize",284,N],[10,"set_max_size","","set the maximum size",284,N],[10,"set_min_size","","set the minimum size",284,N],[10,"set_maximized","","maximize the window",284,N],[10,"unset_maximized","","unmaximize the window",284,N],[10,"set_fullscreen","","set the window as fullscreen on an output",284,N],[10,"unset_fullscreen","","unset the window as fullscreen",284,N],[10,"set_minimized","","set the window as minimized",284,N],[0,"xdg_popup","wayland_protocols::xdg_shell::client","short-lived, popup surfaces for menus",N,N],[3,"XdgPopup","wayland_protocols::xdg_shell::client::xdg_popup","",N,N],[4,"Error","","",N,N],[13,"InvalidGrab","","tried to grab after being mapped",285,N],[4,"Request","","",N,N],[13,"Destroy","","remove xdg_popup interface",286,N],[13,"Grab","","make the popup take an explicit grab",286,N],[12,"seat","wayland_protocols::xdg_shell::client::xdg_popup::Request","",286,N],[12,"serial","","",286,N],[4,"Event","wayland_protocols::xdg_shell::client::xdg_popup","",N,N],[13,"Configure","","configure the popup surface",287,N],[12,"x","wayland_protocols::xdg_shell::client::xdg_popup::Event","",287,N],[12,"y","","",287,N],[12,"width","","",287,N],[12,"height","","",287,N],[13,"PopupDone","wayland_protocols::xdg_shell::client::xdg_popup","popup interaction is done",287,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove xdg_popup interface",288,N],[10,"grab","","make the popup take an explicit grab",288,N],[0,"c_interfaces","wayland_protocols::xdg_shell","C interfaces for this protocol",N,N],[7,"wl_seat_interface","wayland_protocols::xdg_shell::c_interfaces","",N,N],[7,"wl_surface_interface","","",N,N],[7,"wl_output_interface","","",N,N],[7,"xdg_wm_base_requests","","",N,N],[7,"xdg_wm_base_events","","",N,N],[7,"xdg_wm_base_interface","","",N,N],[7,"xdg_positioner_requests","","",N,N],[7,"xdg_positioner_interface","","",N,N],[7,"xdg_surface_requests","","",N,N],[7,"xdg_surface_events","","",N,N],[7,"xdg_surface_interface","","",N,N],[7,"xdg_toplevel_requests","","",N,N],[7,"xdg_toplevel_events","","",N,N],[7,"xdg_toplevel_interface","","",N,N],[7,"xdg_popup_requests","","",N,N],[7,"xdg_popup_events","","",N,N],[7,"xdg_popup_interface","","",N,N],[0,"viewporter","wayland_protocols","Viewporter protocol",N,N],[0,"client","wayland_protocols::viewporter","Client-side API of this protocol",N,N],[0,"wp_viewporter","wayland_protocols::viewporter::client","surface cropping and scaling",N,N],[3,"WpViewporter","wayland_protocols::viewporter::client::wp_viewporter","",N,N],[4,"Error","","",N,N],[13,"ViewportExists","","the surface already has a viewport object associated",289,N],[4,"Request","","",N,N],[13,"Destroy","","unbind from the cropping and scaling interface",290,N],[13,"GetViewport","","extend surface interface for crop and scale",290,N],[12,"id","wayland_protocols::viewporter::client::wp_viewporter::Request","",290,N],[12,"surface","","",290,N],[4,"Event","wayland_protocols::viewporter::client::wp_viewporter","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","unbind from the cropping and scaling interface",291,N],[10,"get_viewport","","extend surface interface for crop and scale",291,[[["self"],["proxy"]],["result",["newproxy"]]]],[0,"wp_viewport","wayland_protocols::viewporter::client","crop and scale interface to a wl_surface",N,N],[3,"WpViewport","wayland_protocols::viewporter::client::wp_viewport","",N,N],[4,"Error","","",N,N],[13,"BadValue","","negative or zero values in width or height",292,N],[13,"BadSize","","destination size is not integer",292,N],[13,"OutOfBuffer","","source rectangle extends outside of the content area",292,N],[13,"NoSurface","","the wl_surface was destroyed",292,N],[4,"Request","","",N,N],[13,"Destroy","","remove scaling and cropping from the surface",293,N],[13,"SetSource","","set the source rectangle for cropping",293,N],[12,"x","wayland_protocols::viewporter::client::wp_viewport::Request","",293,N],[12,"y","","",293,N],[12,"width","","",293,N],[12,"height","","",293,N],[13,"SetDestination","wayland_protocols::viewporter::client::wp_viewport","set the surface size for scaling",293,N],[12,"width","wayland_protocols::viewporter::client::wp_viewport::Request","",293,N],[12,"height","","",293,N],[4,"Event","wayland_protocols::viewporter::client::wp_viewport","",N,N],[8,"RequestsTrait","","",N,N],[10,"destroy","","remove scaling and cropping from the surface",294,N],[10,"set_source","","set the source rectangle for cropping",294,N],[10,"set_destination","","set the surface size for scaling",294,N],[0,"c_interfaces","wayland_protocols::viewporter","C interfaces for this protocol",N,N],[7,"wl_surface_interface","wayland_protocols::viewporter::c_interfaces","",N,N],[7,"wp_viewporter_requests","","",N,N],[7,"wp_viewporter_interface","","",N,N],[7,"wp_viewport_requests","","",N,N],[7,"wp_viewport_interface","","",N,N],[11,"clone","wayland_protocols::presentation_time::client::wp_presentation","",261,[[["self"]],["error"]]],[11,"fmt","","",261,[[["self"],["formatter"]],["result"]]],[11,"eq","","",261,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",261,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",261,[[["self"]],["u32"]]],[11,"is_destructor","","",262,[[["self"]],["bool"]]],[11,"from_raw_c","","",262,N],[11,"as_raw_c_in","","",262,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",263,[[["self"]],["bool"]]],[11,"from_raw_c","","",263,N],[11,"as_raw_c_in","","",263,[[["self"],["f"]],["t"]]],[11,"c_interface","","",295,N],[11,"clone","wayland_protocols::presentation_time::client::wp_presentation_feedback","",265,[[["self"]],["kind"]]],[11,"fmt","","",265,[[["self"],["formatter"]],["result"]]],[11,"eq","","",265,[[["self"],["kind"]],["bool"]]],[11,"from_raw","","",265,[[["u32"]],["option",["kind"]]]],[11,"to_raw","","",265,[[["self"]],["u32"]]],[11,"is_destructor","","",296,[[["self"]],["bool"]]],[11,"from_raw_c","","",296,N],[11,"as_raw_c_in","","",296,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",266,[[["self"]],["bool"]]],[11,"from_raw_c","","",266,N],[11,"as_raw_c_in","","",266,[[["self"],["f"]],["t"]]],[11,"c_interface","","",297,N],[11,"clone","wayland_protocols::xdg_shell::client::xdg_wm_base","",267,[[["self"]],["error"]]],[11,"fmt","","",267,[[["self"],["formatter"]],["result"]]],[11,"eq","","",267,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",267,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",267,[[["self"]],["u32"]]],[11,"is_destructor","","",268,[[["self"]],["bool"]]],[11,"from_raw_c","","",268,N],[11,"as_raw_c_in","","",268,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",269,[[["self"]],["bool"]]],[11,"from_raw_c","","",269,N],[11,"as_raw_c_in","","",269,[[["self"],["f"]],["t"]]],[11,"c_interface","","",298,N],[11,"clone","wayland_protocols::xdg_shell::client::xdg_positioner","",271,[[["self"]],["error"]]],[11,"fmt","","",271,[[["self"],["formatter"]],["result"]]],[11,"eq","","",271,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",271,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",271,[[["self"]],["u32"]]],[11,"clone","","",272,[[["self"]],["anchor"]]],[11,"fmt","","",272,[[["self"],["formatter"]],["result"]]],[11,"eq","","",272,[[["self"],["anchor"]],["bool"]]],[11,"from_raw","","",272,[[["u32"]],["option",["anchor"]]]],[11,"to_raw","","",272,[[["self"]],["u32"]]],[11,"clone","","",273,[[["self"]],["gravity"]]],[11,"fmt","","",273,[[["self"],["formatter"]],["result"]]],[11,"eq","","",273,[[["self"],["gravity"]],["bool"]]],[11,"from_raw","","",273,[[["u32"]],["option",["gravity"]]]],[11,"to_raw","","",273,[[["self"]],["u32"]]],[11,"eq","","",299,[[["self"],["constraintadjustment"]],["bool"]]],[11,"ne","","",299,[[["self"],["constraintadjustment"]],["bool"]]],[11,"clone","","",299,[[["self"]],["constraintadjustment"]]],[11,"partial_cmp","","",299,[[["self"],["constraintadjustment"]],["option",["ordering"]]]],[11,"lt","","",299,[[["self"],["constraintadjustment"]],["bool"]]],[11,"le","","",299,[[["self"],["constraintadjustment"]],["bool"]]],[11,"gt","","",299,[[["self"],["constraintadjustment"]],["bool"]]],[11,"ge","","",299,[[["self"],["constraintadjustment"]],["bool"]]],[11,"cmp","","",299,[[["self"],["constraintadjustment"]],["ordering"]]],[11,"hash","","",299,N],[11,"fmt","","",299,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",299,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",299,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",299,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",299,[[["self"],["formatter"]],["result"]]],[18,"None","","don't move the child surface when constrained",299,N],[18,"SlideX","","move along the x axis until unconstrained",299,N],[18,"SlideY","","move along the y axis until unconstrained",299,N],[18,"FlipX","","invert the anchor and gravity on the x axis",299,N],[18,"FlipY","","invert the anchor and gravity on the y axis",299,N],[18,"ResizeX","","horizontally resize the surface",299,N],[18,"ResizeY","","vertically resize the surface",299,N],[11,"empty","","Returns an empty set of flags.",299,[[],["constraintadjustment"]]],[11,"all","","Returns the set containing all flags.",299,[[],["constraintadjustment"]]],[11,"bits","","Returns the raw value of the flags currently stored.",299,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",299,[[["u32"]],["option",["constraintadjustment"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",299,[[["u32"]],["constraintadjustment"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",299,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",299,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",299,[[["self"],["constraintadjustment"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",299,[[["self"],["constraintadjustment"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",299,[[["self"],["constraintadjustment"]]]],[11,"remove","","Removes the specified flags in-place.",299,[[["self"],["constraintadjustment"]]]],[11,"toggle","","Toggles the specified flags in-place.",299,[[["self"],["constraintadjustment"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",299,[[["self"],["constraintadjustment"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",299,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"bitor_assign","","Adds the set of flags.",299,[[["self"],["constraintadjustment"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",299,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"bitxor_assign","","Toggles the set of flags.",299,[[["self"],["constraintadjustment"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",299,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",299,[[["self"],["constraintadjustment"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",299,[[["self"],["constraintadjustment"]],["constraintadjustment"]]],[11,"sub_assign","","Disables all flags enabled in the set.",299,[[["self"],["constraintadjustment"]]]],[11,"not","","Returns the complement of this set of flags.",299,[[["self"]],["constraintadjustment"]]],[11,"extend","","",299,[[["self"],["t"]]]],[11,"from_iter","","",299,[[["t"]],["constraintadjustment"]]],[11,"from_raw","","",299,[[["u32"]],["option",["constraintadjustment"]]]],[11,"to_raw","","",299,[[["self"]],["u32"]]],[11,"is_destructor","","",274,[[["self"]],["bool"]]],[11,"from_raw_c","","",274,N],[11,"as_raw_c_in","","",274,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",300,[[["self"]],["bool"]]],[11,"from_raw_c","","",300,N],[11,"as_raw_c_in","","",300,[[["self"],["f"]],["t"]]],[11,"c_interface","","",301,N],[11,"clone","wayland_protocols::xdg_shell::client::xdg_surface","",276,[[["self"]],["error"]]],[11,"fmt","","",276,[[["self"],["formatter"]],["result"]]],[11,"eq","","",276,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",276,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",276,[[["self"]],["u32"]]],[11,"is_destructor","","",277,[[["self"]],["bool"]]],[11,"from_raw_c","","",277,N],[11,"as_raw_c_in","","",277,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",278,[[["self"]],["bool"]]],[11,"from_raw_c","","",278,N],[11,"as_raw_c_in","","",278,[[["self"],["f"]],["t"]]],[11,"c_interface","","",302,N],[11,"clone","wayland_protocols::xdg_shell::client::xdg_toplevel","",280,[[["self"]],["resizeedge"]]],[11,"fmt","","",280,[[["self"],["formatter"]],["result"]]],[11,"eq","","",280,[[["self"],["resizeedge"]],["bool"]]],[11,"from_raw","","",280,[[["u32"]],["option",["resizeedge"]]]],[11,"to_raw","","",280,[[["self"]],["u32"]]],[11,"clone","","",281,[[["self"]],["state"]]],[11,"fmt","","",281,[[["self"],["formatter"]],["result"]]],[11,"eq","","",281,[[["self"],["state"]],["bool"]]],[11,"from_raw","","",281,[[["u32"]],["option",["state"]]]],[11,"to_raw","","",281,[[["self"]],["u32"]]],[11,"is_destructor","","",282,[[["self"]],["bool"]]],[11,"from_raw_c","","",282,N],[11,"as_raw_c_in","","",282,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",283,[[["self"]],["bool"]]],[11,"from_raw_c","","",283,N],[11,"as_raw_c_in","","",283,[[["self"],["f"]],["t"]]],[11,"c_interface","","",303,N],[11,"clone","wayland_protocols::xdg_shell::client::xdg_popup","",285,[[["self"]],["error"]]],[11,"fmt","","",285,[[["self"],["formatter"]],["result"]]],[11,"eq","","",285,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",285,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",285,[[["self"]],["u32"]]],[11,"is_destructor","","",286,[[["self"]],["bool"]]],[11,"from_raw_c","","",286,N],[11,"as_raw_c_in","","",286,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",287,[[["self"]],["bool"]]],[11,"from_raw_c","","",287,N],[11,"as_raw_c_in","","",287,[[["self"],["f"]],["t"]]],[11,"c_interface","","",304,N],[11,"clone","wayland_protocols::viewporter::client::wp_viewporter","",289,[[["self"]],["error"]]],[11,"fmt","","",289,[[["self"],["formatter"]],["result"]]],[11,"eq","","",289,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",289,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",289,[[["self"]],["u32"]]],[11,"is_destructor","","",290,[[["self"]],["bool"]]],[11,"from_raw_c","","",290,N],[11,"as_raw_c_in","","",290,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",305,[[["self"]],["bool"]]],[11,"from_raw_c","","",305,N],[11,"as_raw_c_in","","",305,[[["self"],["f"]],["t"]]],[11,"c_interface","","",306,N],[11,"clone","wayland_protocols::viewporter::client::wp_viewport","",292,[[["self"]],["error"]]],[11,"fmt","","",292,[[["self"],["formatter"]],["result"]]],[11,"eq","","",292,[[["self"],["error"]],["bool"]]],[11,"from_raw","","",292,[[["u32"]],["option",["error"]]]],[11,"to_raw","","",292,[[["self"]],["u32"]]],[11,"is_destructor","","",293,[[["self"]],["bool"]]],[11,"from_raw_c","","",293,N],[11,"as_raw_c_in","","",293,[[["self"],["f"]],["t"]]],[11,"is_destructor","","",307,[[["self"]],["bool"]]],[11,"from_raw_c","","",307,N],[11,"as_raw_c_in","","",307,[[["self"],["f"]],["t"]]],[11,"c_interface","","",308,N]],"paths":[[4,"Capability"],[4,"PresentMethod"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpFullscreenShellV1"],[4,"Request"],[3,"ZwpFullscreenShellModeFeedbackV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpIdleInhibitManagerV1"],[4,"Event"],[3,"ZwpIdleInhibitorV1"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[4,"Request"],[8,"RequestsTrait"],[4,"Position"],[4,"Request"],[8,"RequestsTrait"],[3,"ZwpInputMethodContextV1"],[4,"Request"],[3,"ZwpInputMethodV1"],[4,"Event"],[3,"ZwpInputPanelV1"],[4,"Event"],[3,"ZwpInputPanelSurfaceV1"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpKeyboardShortcutsInhibitManagerV1"],[3,"ZwpKeyboardShortcutsInhibitorV1"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Flags"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[3,"ZwpLinuxDmabufV1"],[3,"ZwpLinuxBufferParamsV1"],[4,"Error"],[4,"Lifetime"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpPointerConstraintsV1"],[3,"ZwpLockedPointerV1"],[3,"ZwpConfinedPointerV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpPointerGesturesV1"],[3,"ZwpPointerGestureSwipeV1"],[3,"ZwpPointerGesturePinchV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpRelativePointerManagerV1"],[3,"ZwpRelativePointerV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpTabletManagerV1"],[3,"ZwpTabletSeatV1"],[3,"ZwpTabletToolV1"],[3,"ZwpTabletV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Source"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Source"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ButtonState"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpTabletManagerV2"],[3,"ZwpTabletSeatV2"],[3,"ZwpTabletToolV2"],[3,"ZwpTabletV2"],[3,"ZwpTabletPadRingV2"],[3,"ZwpTabletPadStripV2"],[3,"ZwpTabletPadGroupV2"],[3,"ZwpTabletPadV2"],[4,"ContentHint"],[4,"ContentPurpose"],[4,"PreeditStyle"],[4,"TextDirection"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[3,"ZwpTextInputV1"],[4,"Event"],[3,"ZwpTextInputManagerV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Mode"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZxdgDecorationManagerV1"],[3,"ZxdgToplevelDecorationV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZxdgExporterV1"],[4,"Event"],[3,"ZxdgImporterV1"],[3,"ZxdgExportedV1"],[3,"ZxdgImportedV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZxdgExporterV2"],[4,"Event"],[3,"ZxdgImporterV2"],[3,"ZxdgExportedV2"],[3,"ZxdgImportedV2"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[3,"ZxdgOutputManagerV1"],[3,"ZxdgOutputV1"],[4,"Version"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[3,"XdgShell"],[3,"XdgSurface"],[3,"XdgPopup"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[3,"ZxdgShellV6"],[3,"Anchor"],[3,"Gravity"],[3,"ConstraintAdjustment"],[4,"Event"],[3,"ZxdgPositionerV6"],[3,"ZxdgSurfaceV6"],[3,"ZxdgToplevelV6"],[3,"ZxdgPopupV6"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Event"],[3,"ZwpXwaylandKeyboardGrabManagerV1"],[4,"Event"],[3,"ZwpXwaylandKeyboardGrabV1"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Kind"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Anchor"],[4,"Gravity"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[3,"WpPresentation"],[4,"Request"],[3,"WpPresentationFeedback"],[3,"XdgWmBase"],[3,"ConstraintAdjustment"],[4,"Event"],[3,"XdgPositioner"],[3,"XdgSurface"],[3,"XdgToplevel"],[3,"XdgPopup"],[4,"Event"],[3,"WpViewporter"],[4,"Event"],[3,"WpViewport"]]};
searchIndex["wayland_sys"]={"doc":"FFI bindings to the wayland system libraries.","items":[[0,"common","wayland_sys","Various types and functions that are used by both the client and the server libraries.",N,N],[3,"wl_message","wayland_sys::common","",N,N],[12,"name","","",0,N],[12,"signature","","",0,N],[12,"types","","",0,N],[3,"wl_interface","","",N,N],[12,"name","","",1,N],[12,"version","","",1,N],[12,"request_count","","",1,N],[12,"requests","","",1,N],[12,"event_count","","",1,N],[12,"events","","",1,N],[3,"wl_list","","",N,N],[12,"prev","","",2,N],[12,"next","","",2,N],[3,"wl_array","","",N,N],[12,"size","","",3,N],[12,"alloc","","",3,N],[12,"data","","",3,N],[19,"wl_argument","","",N,N],[12,"i","","",4,N],[12,"u","","",4,N],[12,"f","","",4,N],[12,"s","","",4,N],[12,"o","","",4,N],[12,"n","","",4,N],[12,"a","","",4,N],[12,"h","","",4,N],[5,"wl_fixed_to_double","","",N,[[["wl_fixed_t"]],["f64"]]],[5,"wl_fixed_from_double","","",N,[[["f64"]],["wl_fixed_t"]]],[5,"wl_fixed_to_int","","",N,[[["wl_fixed_t"]],["i32"]]],[5,"wl_fixed_from_int","","",N,[[["i32"]],["wl_fixed_t"]]],[6,"wl_fixed_t","","",N,N],[6,"wl_dispatcher_func_t","","",N,N],[6,"wl_log_func_t","","",N,N],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",N,N],[3,"WaylandClient","wayland_sys::client","",N,N],[12,"wl_display_connect_to_fd","","",5,N],[12,"wl_display_connect","","",5,N],[12,"wl_display_disconnect","","",5,N],[12,"wl_display_get_fd","","",5,N],[12,"wl_display_roundtrip","","",5,N],[12,"wl_display_read_events","","",5,N],[12,"wl_display_prepare_read","","",5,N],[12,"wl_display_cancel_read","","",5,N],[12,"wl_display_dispatch","","",5,N],[12,"wl_display_dispatch_pending","","",5,N],[12,"wl_display_get_error","","",5,N],[12,"wl_display_get_protocol_error","","",5,N],[12,"wl_display_flush","","",5,N],[12,"wl_event_queue_destroy","","",5,N],[12,"wl_display_create_queue","","",5,N],[12,"wl_display_roundtrip_queue","","",5,N],[12,"wl_display_prepare_read_queue","","",5,N],[12,"wl_display_dispatch_queue","","",5,N],[12,"wl_display_dispatch_queue_pending","","",5,N],[12,"wl_proxy_create","","",5,N],[12,"wl_proxy_destroy","","",5,N],[12,"wl_proxy_add_listener","","",5,N],[12,"wl_proxy_get_listener","","",5,N],[12,"wl_proxy_add_dispatcher","","",5,N],[12,"wl_proxy_marshal_array_constructor","","",5,N],[12,"wl_proxy_marshal_array_constructor_versioned","","",5,N],[12,"wl_proxy_marshal_array","","",5,N],[12,"wl_proxy_set_user_data","","",5,N],[12,"wl_proxy_get_user_data","","",5,N],[12,"wl_proxy_get_id","","",5,N],[12,"wl_proxy_get_class","","",5,N],[12,"wl_proxy_set_queue","","",5,N],[12,"wl_proxy_get_version","","",5,N],[12,"wl_proxy_create_wrapper","","",5,N],[12,"wl_proxy_wrapper_destroy","","",5,N],[12,"wl_log_set_handler_client","","",5,N],[12,"wl_list_init","","",5,N],[12,"wl_list_insert","","",5,N],[12,"wl_list_remove","","",5,N],[12,"wl_list_length","","",5,N],[12,"wl_list_empty","","",5,N],[12,"wl_list_insert_list","","",5,N],[12,"wl_array_init","","",5,N],[12,"wl_array_release","","",5,N],[12,"wl_array_add","","",5,N],[12,"wl_array_copy","","",5,N],[12,"wl_proxy_marshal_constructor","","",5,N],[12,"wl_proxy_marshal_constructor_versioned","","",5,N],[12,"wl_proxy_marshal","","",5,N],[3,"WAYLAND_CLIENT_OPTION","","",N,N],[3,"WAYLAND_CLIENT_HANDLE","","",N,N],[4,"wl_proxy","","",N,N],[4,"wl_display","","",N,N],[4,"wl_event_queue","","",N,N],[5,"is_lib_available","","",N,[[],["bool"]]],[11,"open","","",5,[[["str"]],["result",["waylandclient","dlerror"]]]],[11,"deref","","",6,[[["self"]],["option"]]],[11,"initialize","","",6,[[["self"]]]],[11,"deref","","",7,[[["self"]],["waylandclient"]]],[11,"initialize","","",7,[[["self"]]]],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",N,N],[3,"WaylandEgl","wayland_sys::egl","",N,N],[12,"wl_egl_window_create","","",8,N],[12,"wl_egl_window_destroy","","",8,N],[12,"wl_egl_window_resize","","",8,N],[12,"wl_egl_window_get_attached_size","","",8,N],[3,"WAYLAND_EGL_OPTION","","",N,N],[3,"WAYLAND_EGL_HANDLE","","",N,N],[4,"wl_egl_window","","",N,N],[5,"is_lib_available","","",N,[[],["bool"]]],[11,"open","","",8,[[["str"]],["result",["waylandegl","dlerror"]]]],[11,"deref","","",9,[[["self"]],["option"]]],[11,"initialize","","",9,[[["self"]]]],[11,"deref","","",10,[[["self"]],["waylandegl"]]],[11,"initialize","","",10,[[["self"]]]],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",N,N],[3,"wl_cursor_image","wayland_sys::cursor","",N,N],[12,"width","","actual width",11,N],[12,"height","","actual height",11,N],[12,"hotspot_x","","hot spot x (must be inside image)",11,N],[12,"hotspot_y","","hot spot y (must be inside image)",11,N],[12,"delay","","animation delay to next frame",11,N],[3,"wl_cursor","","",N,N],[12,"image_count","","",12,N],[12,"images","","",12,N],[12,"name","","",12,N],[3,"WaylandCursor","","",N,N],[12,"wl_cursor_theme_load","","",13,N],[12,"wl_cursor_theme_destroy","","",13,N],[12,"wl_cursor_theme_get_cursor","","",13,N],[12,"wl_cursor_image_get_buffer","","",13,N],[12,"wl_cursor_frame","","",13,N],[12,"wl_cursor_frame_and_duration","","",13,N],[3,"WAYLAND_CURSOR_OPTION","","",N,N],[3,"WAYLAND_CURSOR_HANDLE","","",N,N],[4,"wl_cursor_theme","","",N,N],[5,"is_lib_available","","",N,[[],["bool"]]],[11,"open","","",13,[[["str"]],["result",["waylandcursor","dlerror"]]]],[11,"deref","","",14,[[["self"]],["option"]]],[11,"initialize","","",14,[[["self"]]]],[11,"deref","","",15,[[["self"]],["waylandcursor"]]],[11,"initialize","","",15,[[["self"]]]],[7,"RUST_MANAGED","wayland_sys","Magic pointer for wayland objects managed by wayland-client or wayland-server",N,N],[14,"ffi_dispatch","","",N,N]],"paths":[[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[19,"wl_argument"],[3,"WaylandClient"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
searchIndex["winit"]={"doc":"Winit allows you to build a window on as many platforms as possible.","items":[[3,"KeyboardInput","winit","Describes a keyboard input event.",N,N],[12,"scancode","","Identifies the physical key pressed",0,N],[12,"state","","",0,N],[12,"virtual_keycode","","Identifies the semantic meaning of the key",0,N],[12,"modifiers","","Modifier keys active at the time of this input.",0,N],[3,"Touch","","Represents touch event",N,N],[12,"device_id","","",1,N],[12,"phase","","",1,N],[12,"location","","",1,N],[12,"id","","unique identifier of a finger.",1,N],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",N,N],[12,"shift","","The \"shift\" key",2,N],[12,"ctrl","","The \"control\" key",2,N],[12,"alt","","The \"alt\" key",2,N],[12,"logo","","The \"logo\" key",2,N],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",N,N],[3,"MonitorId","","Identifier for a monitor.",N,N],[3,"Icon","","An icon used for the window titlebar, taskbar, etc.",N,N],[3,"Window","","Represents a window.",N,N],[3,"WindowId","","Identifier of a window. Unique for each window.",N,N],[3,"DeviceId","","Identifier of an input device.",N,N],[3,"EventsLoop","","Provides a way to retrieve events from the system and from the windows that were registered to the events loop.",N,N],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",N,N],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",N,N],[3,"WindowBuilder","","Object that allows you to build windows.",N,N],[12,"window","","The attributes to use to create the window.",3,N],[3,"WindowAttributes","","Attributes to use when creating a window.",N,N],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",4,N],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",4,N],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",4,N],[12,"resizable","","Whether the window is resizable or not.",4,N],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",4,N],[12,"title","","The title of the window in the title bar.",4,N],[12,"maximized","","Whether the window should be maximized upon creation.",4,N],[12,"visible","","Whether the window should be immediately visible upon creation.",4,N],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",4,N],[12,"decorations","","Whether the window should have borders and bars.",4,N],[12,"always_on_top","","Whether the window should always be on top of other windows.",4,N],[12,"window_icon","","The window icon.",4,N],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",4,N],[4,"Event","","Describes a generic event.",N,N],[13,"WindowEvent","","",5,N],[12,"window_id","winit::Event","",5,N],[12,"event","","",5,N],[13,"DeviceEvent","winit","",5,N],[12,"device_id","winit::Event","",5,N],[12,"event","","",5,N],[13,"Awakened","winit","",5,N],[13,"Suspended","","The application has been suspended or resumed.",5,N],[4,"WindowEvent","","Describes an event from a `Window`.",N,N],[13,"Resized","","The size of the window has changed. Contains the client area's new dimensions.",6,N],[13,"Moved","","The position of the window has changed. Contains the window's new position.",6,N],[13,"CloseRequested","","The window has been requested to close.",6,N],[13,"Destroyed","","The window has been destroyed.",6,N],[13,"DroppedFile","","A file has been dropped into the window.",6,N],[13,"HoveredFile","","A file is being hovered over the window.",6,N],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",6,N],[13,"ReceivedCharacter","","The window received a unicode character.",6,N],[13,"Focused","","The window gained or lost focus.",6,N],[13,"KeyboardInput","","An event from the keyboard has been received.",6,N],[12,"device_id","winit::WindowEvent","",6,N],[12,"input","","",6,N],[13,"CursorMoved","winit","The cursor has moved on the window.",6,N],[12,"device_id","winit::WindowEvent","",6,N],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",6,N],[12,"modifiers","","",6,N],[13,"CursorEntered","winit","The cursor has entered the window.",6,N],[12,"device_id","winit::WindowEvent","",6,N],[13,"CursorLeft","winit","The cursor has left the window.",6,N],[12,"device_id","winit::WindowEvent","",6,N],[13,"MouseWheel","winit","A mouse wheel movement or touchpad scroll occurred.",6,N],[12,"device_id","winit::WindowEvent","",6,N],[12,"delta","","",6,N],[12,"phase","","",6,N],[12,"modifiers","","",6,N],[13,"MouseInput","winit","An mouse button press has been received.",6,N],[12,"device_id","winit::WindowEvent","",6,N],[12,"state","","",6,N],[12,"button","","",6,N],[12,"modifiers","","",6,N],[13,"TouchpadPressure","winit","Touchpad pressure event.",6,N],[12,"device_id","winit::WindowEvent","",6,N],[12,"pressure","","",6,N],[12,"stage","","",6,N],[13,"AxisMotion","winit","Motion on some analog axis. May report data redundant to other, more specific events.",6,N],[12,"device_id","winit::WindowEvent","",6,N],[12,"axis","","",6,N],[12,"value","","",6,N],[13,"Refresh","winit","The window needs to be redrawn.",6,N],[13,"Touch","","Touch event has been received",6,N],[13,"HiDpiFactorChanged","","The DPI factor of the window has changed.",6,N],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",N,N],[13,"Added","","",7,N],[13,"Removed","","",7,N],[13,"MouseMotion","","Change in physical position of a pointing device.",7,N],[12,"delta","winit::DeviceEvent","(x, y) change in position in unspecified units.",7,N],[13,"MouseWheel","winit","Physical scroll event",7,N],[12,"delta","winit::DeviceEvent","",7,N],[13,"Motion","winit","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",7,N],[12,"axis","winit::DeviceEvent","",7,N],[12,"value","","",7,N],[13,"Button","winit","",7,N],[12,"button","winit::DeviceEvent","",7,N],[12,"state","","",7,N],[13,"Key","winit","",7,N],[13,"Text","","",7,N],[12,"codepoint","winit::DeviceEvent","",7,N],[4,"TouchPhase","winit","Describes touch-screen input state.",N,N],[13,"Started","","",8,N],[13,"Moved","","",8,N],[13,"Ended","","",8,N],[13,"Cancelled","","",8,N],[4,"ElementState","","Describes the input state of a key.",N,N],[13,"Pressed","","",9,N],[13,"Released","","",9,N],[4,"MouseButton","","Describes a button of a mouse controller.",N,N],[13,"Left","","",10,N],[13,"Right","","",10,N],[13,"Middle","","",10,N],[13,"Other","","",10,N],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",N,N],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",11,N],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",11,N],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",N,N],[13,"Key1","","The '1' key over the letters.",12,N],[13,"Key2","","The '2' key over the letters.",12,N],[13,"Key3","","The '3' key over the letters.",12,N],[13,"Key4","","The '4' key over the letters.",12,N],[13,"Key5","","The '5' key over the letters.",12,N],[13,"Key6","","The '6' key over the letters.",12,N],[13,"Key7","","The '7' key over the letters.",12,N],[13,"Key8","","The '8' key over the letters.",12,N],[13,"Key9","","The '9' key over the letters.",12,N],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",12,N],[13,"A","","",12,N],[13,"B","","",12,N],[13,"C","","",12,N],[13,"D","","",12,N],[13,"E","","",12,N],[13,"F","","",12,N],[13,"G","","",12,N],[13,"H","","",12,N],[13,"I","","",12,N],[13,"J","","",12,N],[13,"K","","",12,N],[13,"L","","",12,N],[13,"M","","",12,N],[13,"N","","",12,N],[13,"O","","",12,N],[13,"P","","",12,N],[13,"Q","","",12,N],[13,"R","","",12,N],[13,"S","","",12,N],[13,"T","","",12,N],[13,"U","","",12,N],[13,"V","","",12,N],[13,"W","","",12,N],[13,"X","","",12,N],[13,"Y","","",12,N],[13,"Z","","",12,N],[13,"Escape","","The Escape key, next to F1.",12,N],[13,"F1","","",12,N],[13,"F2","","",12,N],[13,"F3","","",12,N],[13,"F4","","",12,N],[13,"F5","","",12,N],[13,"F6","","",12,N],[13,"F7","","",12,N],[13,"F8","","",12,N],[13,"F9","","",12,N],[13,"F10","","",12,N],[13,"F11","","",12,N],[13,"F12","","",12,N],[13,"F13","","",12,N],[13,"F14","","",12,N],[13,"F15","","",12,N],[13,"Snapshot","","Print Screen/SysRq.",12,N],[13,"Scroll","","Scroll Lock.",12,N],[13,"Pause","","Pause/Break key, next to Scroll lock.",12,N],[13,"Insert","","`Insert`, next to Backspace.",12,N],[13,"Home","","",12,N],[13,"Delete","","",12,N],[13,"End","","",12,N],[13,"PageDown","","",12,N],[13,"PageUp","","",12,N],[13,"Left","","",12,N],[13,"Up","","",12,N],[13,"Right","","",12,N],[13,"Down","","",12,N],[13,"Back","","The Backspace key, right over Enter.",12,N],[13,"Return","","The Enter key.",12,N],[13,"Space","","The space bar.",12,N],[13,"Compose","","The \"Compose\" key on Linux.",12,N],[13,"Caret","","",12,N],[13,"Numlock","","",12,N],[13,"Numpad0","","",12,N],[13,"Numpad1","","",12,N],[13,"Numpad2","","",12,N],[13,"Numpad3","","",12,N],[13,"Numpad4","","",12,N],[13,"Numpad5","","",12,N],[13,"Numpad6","","",12,N],[13,"Numpad7","","",12,N],[13,"Numpad8","","",12,N],[13,"Numpad9","","",12,N],[13,"AbntC1","","",12,N],[13,"AbntC2","","",12,N],[13,"Add","","",12,N],[13,"Apostrophe","","",12,N],[13,"Apps","","",12,N],[13,"At","","",12,N],[13,"Ax","","",12,N],[13,"Backslash","","",12,N],[13,"Calculator","","",12,N],[13,"Capital","","",12,N],[13,"Colon","","",12,N],[13,"Comma","","",12,N],[13,"Convert","","",12,N],[13,"Decimal","","",12,N],[13,"Divide","","",12,N],[13,"Equals","","",12,N],[13,"Grave","","",12,N],[13,"Kana","","",12,N],[13,"Kanji","","",12,N],[13,"LAlt","","",12,N],[13,"LBracket","","",12,N],[13,"LControl","","",12,N],[13,"LShift","","",12,N],[13,"LWin","","",12,N],[13,"Mail","","",12,N],[13,"MediaSelect","","",12,N],[13,"MediaStop","","",12,N],[13,"Minus","","",12,N],[13,"Multiply","","",12,N],[13,"Mute","","",12,N],[13,"MyComputer","","",12,N],[13,"NavigateForward","","",12,N],[13,"NavigateBackward","","",12,N],[13,"NextTrack","","",12,N],[13,"NoConvert","","",12,N],[13,"NumpadComma","","",12,N],[13,"NumpadEnter","","",12,N],[13,"NumpadEquals","","",12,N],[13,"OEM102","","",12,N],[13,"Period","","",12,N],[13,"PlayPause","","",12,N],[13,"Power","","",12,N],[13,"PrevTrack","","",12,N],[13,"RAlt","","",12,N],[13,"RBracket","","",12,N],[13,"RControl","","",12,N],[13,"RShift","","",12,N],[13,"RWin","","",12,N],[13,"Semicolon","","",12,N],[13,"Slash","","",12,N],[13,"Sleep","","",12,N],[13,"Stop","","",12,N],[13,"Subtract","","",12,N],[13,"Sysrq","","",12,N],[13,"Tab","","",12,N],[13,"Underline","","",12,N],[13,"Unlabeled","","",12,N],[13,"VolumeDown","","",12,N],[13,"VolumeUp","","",12,N],[13,"Wake","","",12,N],[13,"WebBack","","",12,N],[13,"WebFavorites","","",12,N],[13,"WebForward","","",12,N],[13,"WebHome","","",12,N],[13,"WebRefresh","","",12,N],[13,"WebSearch","","",12,N],[13,"WebStop","","",12,N],[13,"Yen","","",12,N],[13,"Copy","","",12,N],[13,"Paste","","",12,N],[13,"Cut","","",12,N],[4,"BadIcon","","An error produced when using `Icon::from_rgba` with invalid arguments.",N,N],[13,"ByteCountNotDivisibleBy4","","Produced when the length of the `rgba` argument isn't divisible by 4, thus `rgba` can't be safely interpreted as 32bpp RGBA pixels.",13,N],[12,"byte_count","winit::BadIcon","",13,N],[13,"DimensionsVsPixelCount","winit","Produced when the number of pixels (`rgba.len() / 4`) isn't equal to `width * height`. At least one of your arguments is incorrect.",13,N],[12,"width","winit::BadIcon","",13,N],[12,"height","","",13,N],[12,"width_x_height","","",13,N],[12,"pixel_count","","",13,N],[4,"ControlFlow","winit","Returned by the user callback given to the `EventsLoop::run_forever` method.",N,N],[13,"Continue","","Continue looping and waiting for events.",14,N],[13,"Break","","Break from the event loop.",14,N],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",N,N],[13,"OsError","","",15,N],[13,"NotSupported","","TODO: remove this error",15,N],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",N,N],[13,"Default","","The platform-dependent default cursor.",16,N],[13,"Crosshair","","A simple crosshair.",16,N],[13,"Hand","","A hand (often used to indicate links in web browsers).",16,N],[13,"Arrow","","Self explanatory.",16,N],[13,"Move","","Indicates something is to be moved.",16,N],[13,"Text","","Indicates text that may be selected or edited.",16,N],[13,"Wait","","Program busy indicator.",16,N],[13,"Help","","Help indicator (often rendered as a \"?\")",16,N],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",16,N],[13,"NotAllowed","","Cursor showing that something cannot be done.",16,N],[13,"ContextMenu","","",16,N],[13,"Cell","","",16,N],[13,"VerticalText","","",16,N],[13,"Alias","","",16,N],[13,"Copy","","",16,N],[13,"NoDrop","","",16,N],[13,"Grab","","",16,N],[13,"Grabbing","","",16,N],[13,"AllScroll","","",16,N],[13,"ZoomIn","","",16,N],[13,"ZoomOut","","",16,N],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",16,N],[13,"NResize","","",16,N],[13,"NeResize","","",16,N],[13,"NwResize","","",16,N],[13,"SResize","","",16,N],[13,"SeResize","","",16,N],[13,"SwResize","","",16,N],[13,"WResize","","",16,N],[13,"EwResize","","",16,N],[13,"NsResize","","",16,N],[13,"NeswResize","","",16,N],[13,"NwseResize","","",16,N],[13,"ColResize","","",16,N],[13,"RowResize","","",16,N],[0,"dpi","","DPI is important, so read the docs for this module if you don't want to be confused.",N,N],[3,"LogicalPosition","winit::dpi","A position represented in logical pixels.",N,N],[12,"x","","",17,N],[12,"y","","",17,N],[3,"PhysicalPosition","","A position represented in physical pixels.",N,N],[12,"x","","",18,N],[12,"y","","",18,N],[3,"LogicalSize","","A size represented in logical pixels.",N,N],[12,"width","","",19,N],[12,"height","","",19,N],[3,"PhysicalSize","","A size represented in physical pixels.",N,N],[12,"width","","",20,N],[12,"height","","",20,N],[5,"validate_hidpi_factor","","Checks that the DPI factor is a normal positive `f64`.",N,[[["f64"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["logicalposition"]]],[11,"eq","","",17,[[["self"],["logicalposition"]],["bool"]]],[11,"ne","","",17,[[["self"],["logicalposition"]],["bool"]]],[11,"new","","",17,[[["f64"],["f64"]],["self"]]],[11,"from_physical","","",17,[[["t"],["f64"]],["self"]]],[11,"to_physical","","",17,[[["self"],["f64"]],["physicalposition"]]],[11,"from","","",17,N],[11,"from","","",17,N],[11,"into","","",17,N],[11,"into","","Note that this rounds instead of truncating.",17,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["physicalposition"]]],[11,"eq","","",18,[[["self"],["physicalposition"]],["bool"]]],[11,"ne","","",18,[[["self"],["physicalposition"]],["bool"]]],[11,"new","","",18,[[["f64"],["f64"]],["self"]]],[11,"from_logical","","",18,[[["t"],["f64"]],["self"]]],[11,"to_logical","","",18,[[["self"],["f64"]],["logicalposition"]]],[11,"from","","",18,N],[11,"from","","",18,N],[11,"into","","",18,N],[11,"into","","Note that this rounds instead of truncating.",18,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["logicalsize"]]],[11,"eq","","",19,[[["self"],["logicalsize"]],["bool"]]],[11,"ne","","",19,[[["self"],["logicalsize"]],["bool"]]],[11,"new","","",19,[[["f64"],["f64"]],["self"]]],[11,"from_physical","","",19,[[["t"],["f64"]],["self"]]],[11,"to_physical","","",19,[[["self"],["f64"]],["physicalsize"]]],[11,"from","","",19,N],[11,"from","","",19,N],[11,"into","","",19,N],[11,"into","","Note that this rounds instead of truncating.",19,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["physicalsize"]]],[11,"eq","","",20,[[["self"],["physicalsize"]],["bool"]]],[11,"ne","","",20,[[["self"],["physicalsize"]],["bool"]]],[11,"new","","",20,[[["f64"],["f64"]],["self"]]],[11,"from_logical","","",20,[[["t"],["f64"]],["self"]]],[11,"to_logical","","",20,[[["self"],["f64"]],["logicalsize"]]],[11,"from","","",20,N],[11,"from","","",20,N],[11,"into","","",20,N],[11,"into","","Note that this rounds instead of truncating.",20,N],[11,"clone","winit","",5,[[["self"]],["event"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["windowevent"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["deviceevent"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["keyboardinput"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"hash","","",8,N],[11,"eq","","",8,[[["self"],["touchphase"]],["bool"]]],[11,"clone","","",8,[[["self"]],["touchphase"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["touch"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"hash","","",9,N],[11,"eq","","",9,[[["self"],["elementstate"]],["bool"]]],[11,"clone","","",9,[[["self"]],["elementstate"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"hash","","",10,N],[11,"eq","","",10,[[["self"],["mousebutton"]],["bool"]]],[11,"ne","","",10,[[["self"],["mousebutton"]],["bool"]]],[11,"clone","","",10,[[["self"]],["mousebutton"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["mousescrolldelta"]]],[11,"eq","","",11,[[["self"],["mousescrolldelta"]],["bool"]]],[11,"ne","","",11,[[["self"],["mousescrolldelta"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"hash","","",12,N],[11,"eq","","",12,[[["self"],["virtualkeycode"]],["bool"]]],[11,"clone","","",12,[[["self"]],["virtualkeycode"]]],[11,"default","","",2,[[],["modifiersstate"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"eq","","",2,[[["self"],["modifiersstate"]],["bool"]]],[11,"ne","","",2,[[["self"],["modifiersstate"]],["bool"]]],[11,"clone","","",2,[[["self"]],["modifiersstate"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["badicon"]]],[11,"eq","","",13,[[["self"],["badicon"]],["bool"]]],[11,"ne","","",13,[[["self"],["badicon"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"description","","",13,[[["self"]],["str"]]],[11,"cause","","",13,[[["self"]],["option",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["icon"]]],[11,"eq","","",21,[[["self"],["icon"]],["bool"]]],[11,"ne","","",21,[[["self"],["icon"]],["bool"]]],[11,"from_rgba","","Creates an `Icon` from 32bpp RGBA data.",21,[[["vec",["u8"]],["u32"],["u32"]],["result",["badicon"]]]],[11,"from","","",2,[[["modifiersstate"]],["modifiersstate"]]],[11,"from","","",2,[[["ximodifierstate"]],["self"]]],[11,"new","","Initializes a new `WindowBuilder` with default values.",3,[[],["windowbuilder"]]],[11,"with_dimensions","","Requests the window to be of specific dimensions.",3,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",3,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",3,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"with_resizable","","Sets whether the window is resizable or not",3,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_title","","Requests a specific title for the window.",3,[[["self"],["t"]],["windowbuilder"]]],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",3,[[["self"],["option",["monitorid"]]],["windowbuilder"]]],[11,"with_maximized","","Requests maximized mode.",3,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",3,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_transparency","","Sets whether the background of the window should be transparent.",3,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",3,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_always_on_top","","Sets whether or not the window will always be on top of other windows.",3,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_window_icon","","Sets the window icon. On Windows and X11, this is typically the small icon in the top-left corner of the titlebar.",3,[[["self"],["option",["icon"]]],["windowbuilder"]]],[11,"with_multitouch","","Enables multitouch.",3,[[["self"]],["windowbuilder"]]],[11,"build","","Builds the window.",3,[[["self"],["eventsloop"]],["result",["window","creationerror"]]]],[11,"new","","Creates a new Window for platforms where this is appropriate.",22,[[["eventsloop"]],["result",["window","creationerror"]]]],[11,"set_title","","Modifies the title of the window.",22,[[["self"],["str"]]]],[11,"show","","Shows the window if it was hidden.",22,[[["self"]]]],[11,"hide","","Hides the window if it was visible.",22,[[["self"]]]],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",22,[[["self"]],["option",["logicalposition"]]]],[11,"get_inner_position","","Returns the position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.",22,[[["self"]],["option",["logicalposition"]]]],[11,"set_position","","Modifies the position of the window.",22,[[["self"],["logicalposition"]]]],[11,"get_inner_size","","Returns the logical size of the window's client area.",22,[[["self"]],["option",["logicalsize"]]]],[11,"get_outer_size","","Returns the logical size of the entire window.",22,[[["self"]],["option",["logicalsize"]]]],[11,"set_inner_size","","Modifies the inner size of the window.",22,[[["self"],["logicalsize"]]]],[11,"set_min_dimensions","","Sets a minimum dimension size for the window.",22,[[["self"],["option",["logicalsize"]]]]],[11,"set_max_dimensions","","Sets a maximum dimension size for the window.",22,[[["self"],["option",["logicalsize"]]]]],[11,"set_resizable","","Sets whether the window is resizable or not.",22,[[["self"],["bool"]]]],[11,"get_hidpi_factor","","Returns the DPI factor that can be used to map logical pixels to physical pixels, and vice versa.",22,[[["self"]],["f64"]]],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",22,[[["self"],["mousecursor"]]]],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",22,[[["self"],["logicalposition"]],["result",["string"]]]],[11,"grab_cursor","","Grabs the cursor, preventing it from leaving the window.",22,[[["self"],["bool"]],["result",["string"]]]],[11,"hide_cursor","","Hides the cursor, making it invisible but still usable.",22,[[["self"],["bool"]]]],[11,"set_maximized","","Sets the window to maximized or back",22,[[["self"],["bool"]]]],[11,"set_fullscreen","","Sets the window to fullscreen or back",22,[[["self"],["option",["monitorid"]]]]],[11,"set_decorations","","Turn window decorations on or off.",22,[[["self"],["bool"]]]],[11,"set_always_on_top","","Change whether or not the window will always be on top of other windows.",22,[[["self"],["bool"]]]],[11,"set_window_icon","","Sets the window icon. On Windows and X11, this is typically the small icon in the top-left corner of the titlebar.",22,[[["self"],["option",["icon"]]]]],[11,"set_ime_spot","","Sets location of IME candidate box in client area coordinates relative to the top left.",22,[[["self"],["logicalposition"]]]],[11,"get_current_monitor","","Returns the monitor on which the window currently resides",22,[[["self"]],["monitorid"]]],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",22,[[["self"]],["availablemonitorsiter"]]],[11,"get_primary_monitor","","Returns the primary monitor of the system.",22,[[["self"]],["monitorid"]]],[11,"id","","",22,[[["self"]],["windowid"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"next","","",23,[[["self"]],["option",["monitorid"]]]],[11,"size_hint","","",23,N],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["monitorid"]]],[11,"get_name","","Returns a human-readable name of the monitor.",24,[[["self"]],["option",["string"]]]],[11,"get_dimensions","","Returns the monitor's resolution.",24,[[["self"]],["physicalsize"]]],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",24,[[["self"]],["physicalposition"]]],[11,"get_hidpi_factor","","Returns the DPI factor that can be used to map logical pixels to physical pixels, and vice versa.",24,[[["self"]],["f64"]]],[0,"os","","Contains traits with platform-specific methods in them.",N,N],[0,"unix","winit::os","",N,N],[4,"XNotSupported","winit::os::unix","Error returned if this system doesn't have XLib or can't create an X connection.",N,N],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",25,N],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",25,N],[4,"XWindowType","","X window type. Maps directly to `_NET_WM_WINDOW_TYPE`.",N,N],[13,"Desktop","","A desktop feature. This can include a single window containing desktop icons with the same dimensions as the screen, allowing the desktop environment to have full control of the desktop, without the need for proxying root window clicks.",26,N],[13,"Dock","","A dock or panel feature. Typically a Window Manager would keep such windows on top of all other windows.",26,N],[13,"Toolbar","","Toolbar windows. \"Torn off\" from the main application.",26,N],[13,"Menu","","Pinnable menu windows. \"Torn off\" from the main application.",26,N],[13,"Utility","","A small persistent utility window, such as a palette or toolbox.",26,N],[13,"Splash","","The window is a splash screen displayed as an application is starting up.",26,N],[13,"Dialog","","This is a dialog window.",26,N],[13,"Normal","","This is a normal, top-level window.",26,N],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",N,N],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",27,[[],["result",["xnotsupported"]]]],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",27,[[],["self"]]],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",27,[[["self"]],["bool"]]],[10,"is_x11","","True if the `EventsLoop` uses X11.",27,[[["self"]],["bool"]]],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",N,N],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",28,[[["self"]],["option",["c_ulong"]]]],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",28,[[["self"]],["option"]]],[10,"get_xlib_screen_id","","",28,[[["self"]],["option",["c_int"]]]],[10,"set_urgent","","Set window urgency hint (`XUrgencyHint`). Only relevant on X.",28,[[["self"],["bool"]]]],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",28,[[["self"]],["option"]]],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",28,[[["self"]],["option"]]],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",28,[[["self"]],["option"]]],[10,"is_ready","","Check if the window is ready for drawing",28,[[["self"]],["bool"]]],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",N,N],[10,"with_x11_visual","","",29,N],[10,"with_x11_screen","","",29,[[["self"],["i32"]],["windowbuilder"]]],[10,"with_class","","Build window with `WM_CLASS` hint; defaults to the name of the binary. Only relevant on X11.",29,[[["self"],["string"],["string"]],["windowbuilder"]]],[10,"with_override_redirect","","Build window with override-redirect flag; defaults to false. Only relevant on X11.",29,[[["self"],["bool"]],["windowbuilder"]]],[10,"with_x11_window_type","","Build window with `_NET_WM_WINDOW_TYPE` hint; defaults to `Normal`. Only relevant on X11.",29,[[["self"],["xwindowtype"]],["windowbuilder"]]],[10,"with_resize_increments","","Build window with resize increment hint. Only implemented on X11.",29,[[["self"],["logicalsize"]],["windowbuilder"]]],[10,"with_base_size","","Build window with base size hint. Only implemented on X11.",29,[[["self"],["logicalsize"]],["windowbuilder"]]],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",N,N],[10,"native_id","","Returns the inner identifier of the monitor.",30,[[["self"]],["u32"]]],[11,"new_x11","winit","",31,[[],["result",["xnotsupported"]]]],[11,"new_wayland","","",31,[[],["self"]]],[11,"is_wayland","","",31,[[["self"]],["bool"]]],[11,"is_x11","","",31,[[["self"]],["bool"]]],[11,"get_xlib_window","","",22,[[["self"]],["option",["c_ulong"]]]],[11,"get_xlib_display","","",22,[[["self"]],["option"]]],[11,"get_xlib_screen_id","","",22,[[["self"]],["option",["c_int"]]]],[11,"get_xcb_connection","","",22,[[["self"]],["option"]]],[11,"set_urgent","","",22,[[["self"],["bool"]]]],[11,"get_wayland_surface","","",22,[[["self"]],["option"]]],[11,"get_wayland_display","","",22,[[["self"]],["option"]]],[11,"is_ready","","",22,[[["self"]],["bool"]]],[11,"with_x11_visual","","",3,N],[11,"with_x11_screen","","",3,[[["self"],["i32"]],["windowbuilder"]]],[11,"with_class","","",3,[[["self"],["string"],["string"]],["windowbuilder"]]],[11,"with_override_redirect","","",3,[[["self"],["bool"]],["windowbuilder"]]],[11,"with_x11_window_type","","",3,[[["self"],["xwindowtype"]],["windowbuilder"]]],[11,"with_resize_increments","","",3,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"with_base_size","","",3,[[["self"],["logicalsize"]],["windowbuilder"]]],[11,"native_id","","",24,[[["self"]],["u32"]]],[6,"ScanCode","","Hardware-dependent keyboard scan code.",N,N],[6,"AxisId","","Identifier for a specific analog axis on some device.",N,N],[6,"ButtonId","","Identifier for a specific button on some device.",N,N],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["windowid"]]],[11,"eq","","",32,[[["self"],["windowid"]],["bool"]]],[11,"ne","","",32,[[["self"],["windowid"]],["bool"]]],[11,"partial_cmp","","",32,[[["self"],["windowid"]],["option",["ordering"]]]],[11,"lt","","",32,[[["self"],["windowid"]],["bool"]]],[11,"le","","",32,[[["self"],["windowid"]],["bool"]]],[11,"gt","","",32,[[["self"],["windowid"]],["bool"]]],[11,"ge","","",32,[[["self"],["windowid"]],["bool"]]],[11,"cmp","","",32,[[["self"],["windowid"]],["ordering"]]],[11,"hash","","",32,N],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["deviceid"]]],[11,"eq","","",33,[[["self"],["deviceid"]],["bool"]]],[11,"ne","","",33,[[["self"],["deviceid"]],["bool"]]],[11,"partial_cmp","","",33,[[["self"],["deviceid"]],["option",["ordering"]]]],[11,"lt","","",33,[[["self"],["deviceid"]],["bool"]]],[11,"le","","",33,[[["self"],["deviceid"]],["bool"]]],[11,"gt","","",33,[[["self"],["deviceid"]],["bool"]]],[11,"ge","","",33,[[["self"],["deviceid"]],["bool"]]],[11,"cmp","","",33,[[["self"],["deviceid"]],["ordering"]]],[11,"hash","","",33,N],[11,"clone","","",14,[[["self"]],["controlflow"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["controlflow"]],["bool"]]],[11,"new","","Builds a new events loop.",31,[[],["eventsloop"]]],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",31,[[["self"]],["availablemonitorsiter"]]],[11,"get_primary_monitor","","Returns the primary monitor of the system.",31,[[["self"]],["monitorid"]]],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",31,[[["self"],["f"]]]],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",31,[[["self"],["f"]]]],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",31,[[["self"]],["eventsloopproxy"]]],[11,"clone","","",34,[[["self"]],["eventsloopproxy"]]],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",34,[[["self"]],["result",["eventsloopclosed"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["eventsloopclosed"]]],[11,"eq","","",35,[[["self"],["eventsloopclosed"]],["bool"]]],[11,"hash","","",35,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"description","","",35,[[["self"]],["str"]]],[11,"clone","","",3,[[["self"]],["windowbuilder"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["creationerror"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",15,[[["self"]],["str"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["mousecursor"]]],[11,"eq","","",16,[[["self"],["mousecursor"]],["bool"]]],[11,"default","","",16,[[],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["windowattributes"]]],[11,"default","","",4,[[],["windowattributes"]]],[11,"clone","winit::os::unix","",25,[[["self"]],["xnotsupported"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"from","","",25,[[["openerror"]],["xnotsupported"]]],[11,"description","","",25,[[["self"]],["str"]]],[11,"cause","","",25,[[["self"]],["option",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["windowtype"]]],[11,"eq","","",26,[[["self"],["windowtype"]],["bool"]]],[11,"hash","","",26,N],[11,"default","","",26,[[],["self"]]]],"paths":[[3,"KeyboardInput"],[3,"Touch"],[3,"ModifiersState"],[3,"WindowBuilder"],[3,"WindowAttributes"],[4,"Event"],[4,"WindowEvent"],[4,"DeviceEvent"],[4,"TouchPhase"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"BadIcon"],[4,"ControlFlow"],[4,"CreationError"],[4,"MouseCursor"],[3,"LogicalPosition"],[3,"PhysicalPosition"],[3,"LogicalSize"],[3,"PhysicalSize"],[3,"Icon"],[3,"Window"],[3,"AvailableMonitorsIter"],[3,"MonitorId"],[4,"XNotSupported"],[4,"XWindowType"],[8,"EventsLoopExt"],[8,"WindowExt"],[8,"WindowBuilderExt"],[8,"MonitorIdExt"],[3,"EventsLoop"],[3,"WindowId"],[3,"DeviceId"],[3,"EventsLoopProxy"],[3,"EventsLoopClosed"]]};
searchIndex["x11_clipboard"]={"doc":"","items":[[3,"Atoms","x11_clipboard","",N,N],[12,"primary","","",0,N],[12,"clipboard","","",0,N],[12,"property","","",0,N],[12,"targets","","",0,N],[12,"string","","",0,N],[12,"utf8_string","","",0,N],[12,"incr","","",0,N],[3,"Clipboard","","X11 Clipboard",N,N],[12,"getter","","",1,N],[12,"setter","","",1,N],[3,"Context","","",N,N],[12,"connection","","",2,N],[12,"window","","",2,N],[12,"atoms","","",2,N],[0,"error","","",N,N],[3,"Error","x11_clipboard::error","The Error type.",N,N],[12,"0","","The kind of the error.",3,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",4,N],[13,"Io","","",4,N],[13,"Utf8","","",4,N],[13,"Set","","",4,N],[13,"XcbConn","","",4,N],[13,"XcbGeneric","","",4,N],[13,"Lock","","",4,N],[13,"Timeout","","",4,N],[13,"SetOwner","","",4,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",5,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","",3,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",3,N],[11,"with_chain","","",3,[[["e"],["k"]],["self"]]],[11,"kind","","",3,N],[11,"iter","","",3,[[["self"]],["iter"]]],[11,"chain_err","","",3,[[["self"],["f"]],["self"]]],[11,"backtrace","","",3,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",3,[[["error"]],["option",["arc"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",3,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",3,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",3,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",3,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",3,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",3,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",3,[[["self"],["f"]],["error"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",3,[[["error"]],["self"]]],[11,"from","","",3,[[["fromutf8error"]],["self"]]],[11,"from","","",3,[[["senderror",["atom"]]],["self"]]],[11,"from","","",3,[[["connerror"]],["self"]]],[11,"from","","",3,[[["genericerror"]],["self"]]],[11,"from","","",3,[[["errorkind"]],["self"]]],[11,"from","","",3,[[["str"]],["self"]]],[11,"from","","",3,[[["string"]],["self"]]],[11,"deref","","",3,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",4,[[["self"]],["str"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"from","","",4,[[["string"]],["self"]]],[11,"from","","",4,[[["error"]],["self"]]],[17,"INCR_CHUNK_SIZE","x11_clipboard","",N,N],[11,"clone","","",0,[[["self"]],["atoms"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",2,[[["option",["str"]]],["result"]]],[11,"get_atom","","",2,[[["self"],["str"]],["result",["atom"]]]],[11,"new","","Create Clipboard.",1,[[],["result"]]],[11,"load","","load value.",1,[[["self"],["atom"],["atom"],["atom"],["t"]],["result",["vec"]]]],[11,"store","","store value.",1,[[["self"],["atom"],["atom"],["t"]],["result"]]]],"paths":[[3,"Atoms"],[3,"Clipboard"],[3,"Context"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]};
searchIndex["x11_dl"]={"doc":"","items":[[0,"error","x11_dl","",N,N],[3,"OpenError","x11_dl::error","",N,N],[4,"OpenErrorKind","","",N,N],[13,"Library","","",0,N],[13,"Symbol","","",0,N],[11,"clone","","",1,[[["self"]],["openerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"detail","","",1,[[["self"]],["str"]]],[11,"kind","","",1,[[["self"]],["openerrorkind"]]],[11,"new","","",1,[[["openerrorkind"],["string"]],["openerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["openerrorkind"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["openerrorkind"]],["bool"]]],[11,"as_str","","",0,[[["self"]],["str"]]],[0,"xlib","x11_dl","",N,N],[3,"Xlib","x11_dl::xlib","",N,N],[12,"XActivateScreenSaver","","",2,N],[12,"XAddConnectionWatch","","",2,N],[12,"XAddExtension","","",2,N],[12,"XAddHost","","",2,N],[12,"XAddHosts","","",2,N],[12,"XAddPixel","","",2,N],[12,"XAddToExtensionList","","",2,N],[12,"XAddToSaveSet","","",2,N],[12,"XAllocClassHint","","",2,N],[12,"XAllocColor","","",2,N],[12,"XAllocColorCells","","",2,N],[12,"XAllocColorPlanes","","",2,N],[12,"XAllocIconSize","","",2,N],[12,"XAllocNamedColor","","",2,N],[12,"XAllocSizeHints","","",2,N],[12,"XAllocStandardColormap","","",2,N],[12,"XAllocWMHints","","",2,N],[12,"XAllowEvents","","",2,N],[12,"XAllPlanes","","",2,N],[12,"XAutoRepeatOff","","",2,N],[12,"XAutoRepeatOn","","",2,N],[12,"XBaseFontNameListOfFontSet","","",2,N],[12,"XBell","","",2,N],[12,"XBitmapBitOrder","","",2,N],[12,"XBitmapPad","","",2,N],[12,"XBitmapUnit","","",2,N],[12,"XBlackPixel","","",2,N],[12,"XBlackPixelOfScreen","","",2,N],[12,"XCellsOfScreen","","",2,N],[12,"XChangeActivePointerGrab","","",2,N],[12,"XChangeGC","","",2,N],[12,"XChangeKeyboardControl","","",2,N],[12,"XChangeKeyboardMapping","","",2,N],[12,"XChangePointerControl","","",2,N],[12,"XChangeProperty","","",2,N],[12,"XChangeSaveSet","","",2,N],[12,"XChangeWindowAttributes","","",2,N],[12,"XCheckIfEvent","","",2,N],[12,"XCheckMaskEvent","","",2,N],[12,"XCheckTypedEvent","","",2,N],[12,"XCheckTypedWindowEvent","","",2,N],[12,"XCheckWindowEvent","","",2,N],[12,"XCirculateSubwindows","","",2,N],[12,"XCirculateSubwindowsDown","","",2,N],[12,"XCirculateSubwindowsUp","","",2,N],[12,"XClearArea","","",2,N],[12,"XClearWindow","","",2,N],[12,"XClipBox","","",2,N],[12,"XCloseDisplay","","",2,N],[12,"XCloseIM","","",2,N],[12,"XCloseOM","","",2,N],[12,"XcmsAddColorSpace","","",2,N],[12,"XcmsAddFunctionSet","","",2,N],[12,"XcmsAllocColor","","",2,N],[12,"XcmsAllocNamedColor","","",2,N],[12,"XcmsCCCOfColormap","","",2,N],[12,"XcmsCIELabClipab","","",2,N],[12,"XcmsCIELabClipL","","",2,N],[12,"XcmsCIELabClipLab","","",2,N],[12,"XcmsCIELabQueryMaxC","","",2,N],[12,"XcmsCIELabQueryMaxL","","",2,N],[12,"XcmsCIELabQueryMaxLC","","",2,N],[12,"XcmsCIELabQueryMinL","","",2,N],[12,"XcmsCIELabToCIEXYZ","","",2,N],[12,"XcmsCIELabWhiteShiftColors","","",2,N],[12,"XcmsCIELuvClipL","","",2,N],[12,"XcmsCIELuvClipLuv","","",2,N],[12,"XcmsCIELuvClipuv","","",2,N],[12,"XcmsCIELuvQueryMaxC","","",2,N],[12,"XcmsCIELuvQueryMaxL","","",2,N],[12,"XcmsCIELuvQueryMaxLC","","",2,N],[12,"XcmsCIELuvQueryMinL","","",2,N],[12,"XcmsCIELuvToCIEuvY","","",2,N],[12,"XcmsCIELuvWhiteShiftColors","","",2,N],[12,"XcmsCIEuvYToCIELuv","","",2,N],[12,"XcmsCIEuvYToCIEXYZ","","",2,N],[12,"XcmsCIEuvYToTekHVC","","",2,N],[12,"XcmsCIExyYToCIEXYZ","","",2,N],[12,"XcmsCIEXYZToCIELab","","",2,N],[12,"XcmsCIEXYZToCIEuvY","","",2,N],[12,"XcmsCIEXYZToCIExyY","","",2,N],[12,"XcmsCIEXYZToRGBi","","",2,N],[12,"XcmsClientWhitePointOfCCC","","",2,N],[12,"XcmsConvertColors","","",2,N],[12,"XcmsCreateCCC","","",2,N],[12,"XcmsDefaultCCC","","",2,N],[12,"XcmsDisplayOfCCC","","",2,N],[12,"XcmsFormatOfPrefix","","",2,N],[12,"XcmsFreeCCC","","",2,N],[12,"XcmsLookupColor","","",2,N],[12,"XcmsPrefixOfFormat","","",2,N],[12,"XcmsQueryBlack","","",2,N],[12,"XcmsQueryBlue","","",2,N],[12,"XcmsQueryColor","","",2,N],[12,"XcmsQueryColors","","",2,N],[12,"XcmsQueryGreen","","",2,N],[12,"XcmsQueryRed","","",2,N],[12,"XcmsQueryWhite","","",2,N],[12,"XcmsRGBiToCIEXYZ","","",2,N],[12,"XcmsRGBiToRGB","","",2,N],[12,"XcmsRGBToRGBi","","",2,N],[12,"XcmsScreenNumberOfCCC","","",2,N],[12,"XcmsScreenWhitePointOfCCC","","",2,N],[12,"XcmsSetCCCOfColormap","","",2,N],[12,"XcmsSetCompressionProc","","",2,N],[12,"XcmsSetWhiteAdjustProc","","",2,N],[12,"XcmsSetWhitePoint","","",2,N],[12,"XcmsStoreColor","","",2,N],[12,"XcmsStoreColors","","",2,N],[12,"XcmsTekHVCClipC","","",2,N],[12,"XcmsTekHVCClipV","","",2,N],[12,"XcmsTekHVCClipVC","","",2,N],[12,"XcmsTekHVCQueryMaxC","","",2,N],[12,"XcmsTekHVCQueryMaxV","","",2,N],[12,"XcmsTekHVCQueryMaxVC","","",2,N],[12,"XcmsTekHVCQueryMaxVSamples","","",2,N],[12,"XcmsTekHVCQueryMinV","","",2,N],[12,"XcmsTekHVCToCIEuvY","","",2,N],[12,"XcmsTekHVCWhiteShiftColors","","",2,N],[12,"XcmsVisualOfCCC","","",2,N],[12,"XConfigureWindow","","",2,N],[12,"XConnectionNumber","","",2,N],[12,"XContextDependentDrawing","","",2,N],[12,"XContextualDrawing","","",2,N],[12,"XConvertCase","","",2,N],[12,"XConvertSelection","","",2,N],[12,"XCopyArea","","",2,N],[12,"XCopyColormapAndFree","","",2,N],[12,"XCopyGC","","",2,N],[12,"XCopyPlane","","",2,N],[12,"XCreateBitmapFromData","","",2,N],[12,"XCreateColormap","","",2,N],[12,"XCreateFontCursor","","",2,N],[12,"XCreateFontSet","","",2,N],[12,"XCreateGC","","",2,N],[12,"XCreateGlyphCursor","","",2,N],[12,"XCreateImage","","",2,N],[12,"XCreatePixmap","","",2,N],[12,"XCreatePixmapCursor","","",2,N],[12,"XCreatePixmapFromBitmapData","","",2,N],[12,"XCreateRegion","","",2,N],[12,"XCreateSimpleWindow","","",2,N],[12,"XCreateWindow","","",2,N],[12,"XDefaultColormap","","",2,N],[12,"XDefaultColormapOfScreen","","",2,N],[12,"XDefaultDepth","","",2,N],[12,"XDefaultDepthOfScreen","","",2,N],[12,"XDefaultGC","","",2,N],[12,"XDefaultGCOfScreen","","",2,N],[12,"XDefaultRootWindow","","",2,N],[12,"XDefaultScreen","","",2,N],[12,"XDefaultScreenOfDisplay","","",2,N],[12,"XDefaultString","","",2,N],[12,"XDefaultVisual","","",2,N],[12,"XDefaultVisualOfScreen","","",2,N],[12,"XDefineCursor","","",2,N],[12,"XDeleteContext","","",2,N],[12,"XDeleteModifiermapEntry","","",2,N],[12,"XDeleteProperty","","",2,N],[12,"XDestroyIC","","",2,N],[12,"XDestroyImage","","",2,N],[12,"XDestroyOC","","",2,N],[12,"XDestroyRegion","","",2,N],[12,"XDestroySubwindows","","",2,N],[12,"XDestroyWindow","","",2,N],[12,"XDirectionalDependentDrawing","","",2,N],[12,"XDisableAccessControl","","",2,N],[12,"XDisplayCells","","",2,N],[12,"XDisplayHeight","","",2,N],[12,"XDisplayHeightMM","","",2,N],[12,"XDisplayKeycodes","","",2,N],[12,"XDisplayMotionBufferSize","","",2,N],[12,"XDisplayName","","",2,N],[12,"XDisplayOfIM","","",2,N],[12,"XDisplayOfOM","","",2,N],[12,"XDisplayOfScreen","","",2,N],[12,"XDisplayPlanes","","",2,N],[12,"XDisplayString","","",2,N],[12,"XDisplayWidth","","",2,N],[12,"XDisplayWidthMM","","",2,N],[12,"XDoesBackingStore","","",2,N],[12,"XDoesSaveUnders","","",2,N],[12,"XDrawArc","","",2,N],[12,"XDrawArcs","","",2,N],[12,"XDrawImageString","","",2,N],[12,"XDrawImageString16","","",2,N],[12,"XDrawLine","","",2,N],[12,"XDrawLines","","",2,N],[12,"XDrawPoint","","",2,N],[12,"XDrawPoints","","",2,N],[12,"XDrawRectangle","","",2,N],[12,"XDrawRectangles","","",2,N],[12,"XDrawSegments","","",2,N],[12,"XDrawString","","",2,N],[12,"XDrawString16","","",2,N],[12,"XDrawText","","",2,N],[12,"XDrawText16","","",2,N],[12,"XEHeadOfExtensionList","","",2,N],[12,"XEmptyRegion","","",2,N],[12,"XEnableAccessControl","","",2,N],[12,"XEqualRegion","","",2,N],[12,"XESetBeforeFlush","","",2,N],[12,"XESetCloseDisplay","","",2,N],[12,"XESetCopyEventCookie","","",2,N],[12,"XESetCopyGC","","",2,N],[12,"XESetCreateFont","","",2,N],[12,"XESetCreateGC","","",2,N],[12,"XESetError","","",2,N],[12,"XESetErrorString","","",2,N],[12,"XESetEventToWire","","",2,N],[12,"XESetFlushGC","","",2,N],[12,"XESetFreeFont","","",2,N],[12,"XESetFreeGC","","",2,N],[12,"XESetPrintErrorValues","","",2,N],[12,"XESetWireToError","","",2,N],[12,"XESetWireToEvent","","",2,N],[12,"XESetWireToEventCookie","","",2,N],[12,"XEventMaskOfScreen","","",2,N],[12,"XEventsQueued","","",2,N],[12,"XExtendedMaxRequestSize","","",2,N],[12,"XExtentsOfFontSet","","",2,N],[12,"XFetchBuffer","","",2,N],[12,"XFetchBytes","","",2,N],[12,"XFetchName","","",2,N],[12,"XFillArc","","",2,N],[12,"XFillArcs","","",2,N],[12,"XFillPolygon","","",2,N],[12,"XFillRectangle","","",2,N],[12,"XFillRectangles","","",2,N],[12,"XFilterEvent","","",2,N],[12,"XFindContext","","",2,N],[12,"XFindOnExtensionList","","",2,N],[12,"XFlush","","",2,N],[12,"XFlushGC","","",2,N],[12,"XFontsOfFontSet","","",2,N],[12,"XForceScreenSaver","","",2,N],[12,"XFree","","",2,N],[12,"XFreeColormap","","",2,N],[12,"XFreeColors","","",2,N],[12,"XFreeCursor","","",2,N],[12,"XFreeEventData","","",2,N],[12,"XFreeExtensionList","","",2,N],[12,"XFreeFont","","",2,N],[12,"XFreeFontInfo","","",2,N],[12,"XFreeFontNames","","",2,N],[12,"XFreeFontPath","","",2,N],[12,"XFreeFontSet","","",2,N],[12,"XFreeGC","","",2,N],[12,"XFreeModifiermap","","",2,N],[12,"XFreePixmap","","",2,N],[12,"XFreeStringList","","",2,N],[12,"XGContextFromGC","","",2,N],[12,"XGeometry","","",2,N],[12,"XGetAtomName","","",2,N],[12,"XGetAtomNames","","",2,N],[12,"XGetClassHint","","",2,N],[12,"XGetCommand","","",2,N],[12,"XGetDefault","","",2,N],[12,"XGetErrorDatabaseText","","",2,N],[12,"XGetErrorText","","",2,N],[12,"XGetEventData","","",2,N],[12,"XGetFontPath","","",2,N],[12,"XGetFontProperty","","",2,N],[12,"XGetGCValues","","",2,N],[12,"XGetGeometry","","",2,N],[12,"XGetIconName","","",2,N],[12,"XGetIconSizes","","",2,N],[12,"XGetImage","","",2,N],[12,"XGetInputFocus","","",2,N],[12,"XGetKeyboardControl","","",2,N],[12,"XGetKeyboardMapping","","",2,N],[12,"XGetModifierMapping","","",2,N],[12,"XGetMotionEvents","","",2,N],[12,"XGetNormalHints","","",2,N],[12,"XGetPixel","","",2,N],[12,"XGetPointerControl","","",2,N],[12,"XGetPointerMapping","","",2,N],[12,"XGetRGBColormaps","","",2,N],[12,"XGetScreenSaver","","",2,N],[12,"XGetSelectionOwner","","",2,N],[12,"XGetSizeHints","","",2,N],[12,"XGetStandardColormap","","",2,N],[12,"XGetSubImage","","",2,N],[12,"XGetTextProperty","","",2,N],[12,"XGetTransientForHint","","",2,N],[12,"XGetVisualInfo","","",2,N],[12,"XGetWindowAttributes","","",2,N],[12,"XGetWindowProperty","","",2,N],[12,"XGetWMClientMachine","","",2,N],[12,"XGetWMColormapWindows","","",2,N],[12,"XGetWMHints","","",2,N],[12,"XGetWMIconName","","",2,N],[12,"XGetWMName","","",2,N],[12,"XGetWMNormalHints","","",2,N],[12,"XGetWMProtocols","","",2,N],[12,"XGetWMSizeHints","","",2,N],[12,"XGetZoomHints","","",2,N],[12,"XGrabButton","","",2,N],[12,"XGrabKey","","",2,N],[12,"XGrabKeyboard","","",2,N],[12,"XGrabPointer","","",2,N],[12,"XGrabServer","","",2,N],[12,"XHeightMMOfScreen","","",2,N],[12,"XHeightOfScreen","","",2,N],[12,"XIconifyWindow","","",2,N],[12,"XIfEvent","","",2,N],[12,"XImageByteOrder","","",2,N],[12,"XIMOfIC","","",2,N],[12,"XInitExtension","","",2,N],[12,"XInitImage","","",2,N],[12,"XInitThreads","","",2,N],[12,"XInsertModifiermapEntry","","",2,N],[12,"XInstallColormap","","",2,N],[12,"XInternalConnectionNumbers","","",2,N],[12,"XInternAtom","","",2,N],[12,"XInternAtoms","","",2,N],[12,"XIntersectRegion","","",2,N],[12,"XkbAddDeviceLedInfo","","",2,N],[12,"XkbAddGeomColor","","",2,N],[12,"XkbAddGeomDoodad","","",2,N],[12,"XkbAddGeomKey","","",2,N],[12,"XkbAddGeomKeyAlias","","",2,N],[12,"XkbAddGeomOutline","","",2,N],[12,"XkbAddGeomOverlay","","",2,N],[12,"XkbAddGeomOverlayKey","","",2,N],[12,"XkbAddGeomOverlayRow","","",2,N],[12,"XkbAddGeomProperty","","",2,N],[12,"XkbAddGeomRow","","",2,N],[12,"XkbAddGeomSection","","",2,N],[12,"XkbAddGeomShape","","",2,N],[12,"XkbAddKeyType","","",2,N],[12,"XkbAllocClientMap","","",2,N],[12,"XkbAllocCompatMap","","",2,N],[12,"XkbAllocControls","","",2,N],[12,"XkbAllocDeviceInfo","","",2,N],[12,"XkbAllocGeomColors","","",2,N],[12,"XkbAllocGeomDoodads","","",2,N],[12,"XkbAllocGeometry","","",2,N],[12,"XkbAllocGeomKeyAliases","","",2,N],[12,"XkbAllocGeomKeys","","",2,N],[12,"XkbAllocGeomOutlines","","",2,N],[12,"XkbAllocGeomOverlayKeys","","",2,N],[12,"XkbAllocGeomOverlayRows","","",2,N],[12,"XkbAllocGeomOverlays","","",2,N],[12,"XkbAllocGeomPoints","","",2,N],[12,"XkbAllocGeomProps","","",2,N],[12,"XkbAllocGeomRows","","",2,N],[12,"XkbAllocGeomSectionDoodads","","",2,N],[12,"XkbAllocGeomSections","","",2,N],[12,"XkbAllocGeomShapes","","",2,N],[12,"XkbAllocIndicatorMaps","","",2,N],[12,"XkbAllocKeyboard","","",2,N],[12,"XkbAllocNames","","",2,N],[12,"XkbAllocServerMap","","",2,N],[12,"XkbApplyCompatMapToKey","","",2,N],[12,"XkbApplyVirtualModChanges","","",2,N],[12,"XkbBell","","",2,N],[12,"XkbBellEvent","","",2,N],[12,"XkbChangeDeviceInfo","","",2,N],[12,"XkbChangeEnabledControls","","",2,N],[12,"XkbChangeKeycodeRange","","",2,N],[12,"XkbChangeMap","","",2,N],[12,"XkbChangeNames","","",2,N],[12,"XkbChangeTypesOfKey","","",2,N],[12,"XkbComputeEffectiveMap","","",2,N],[12,"XkbComputeRowBounds","","",2,N],[12,"XkbComputeSectionBounds","","",2,N],[12,"XkbComputeShapeBounds","","",2,N],[12,"XkbComputeShapeTop","","",2,N],[12,"XkbCopyKeyType","","",2,N],[12,"XkbCopyKeyTypes","","",2,N],[12,"XkbDeviceBell","","",2,N],[12,"XkbDeviceBellEvent","","",2,N],[12,"XkbFindOverlayForKey","","",2,N],[12,"XkbForceBell","","",2,N],[12,"XkbForceDeviceBell","","",2,N],[12,"XkbFreeClientMap","","",2,N],[12,"XkbFreeCompatMap","","",2,N],[12,"XkbFreeComponentList","","",2,N],[12,"XkbFreeControls","","",2,N],[12,"XkbFreeDeviceInfo","","",2,N],[12,"XkbFreeGeomColors","","",2,N],[12,"XkbFreeGeomDoodads","","",2,N],[12,"XkbFreeGeometry","","",2,N],[12,"XkbFreeGeomKeyAliases","","",2,N],[12,"XkbFreeGeomKeys","","",2,N],[12,"XkbFreeGeomOutlines","","",2,N],[12,"XkbFreeGeomOverlayKeys","","",2,N],[12,"XkbFreeGeomOverlayRows","","",2,N],[12,"XkbFreeGeomOverlays","","",2,N],[12,"XkbFreeGeomPoints","","",2,N],[12,"XkbFreeGeomProperties","","",2,N],[12,"XkbFreeGeomRows","","",2,N],[12,"XkbFreeGeomSections","","",2,N],[12,"XkbFreeGeomShapes","","",2,N],[12,"XkbFreeIndicatorMaps","","",2,N],[12,"XkbFreeKeyboard","","",2,N],[12,"XkbFreeNames","","",2,N],[12,"XkbFreeServerMap","","",2,N],[12,"XkbGetAutoRepeatRate","","",2,N],[12,"XkbGetAutoResetControls","","",2,N],[12,"XkbGetCompatMap","","",2,N],[12,"XkbGetControls","","",2,N],[12,"XkbGetDetectableAutoRepeat","","",2,N],[12,"XkbGetDeviceButtonActions","","",2,N],[12,"XkbGetDeviceInfo","","",2,N],[12,"XkbGetDeviceInfoChanges","","",2,N],[12,"XkbGetDeviceLedInfo","","",2,N],[12,"XkbGetGeometry","","",2,N],[12,"XkbGetIndicatorMap","","",2,N],[12,"XkbGetIndicatorState","","",2,N],[12,"XkbGetKeyActions","","",2,N],[12,"XkbGetKeyBehaviors","","",2,N],[12,"XkbGetKeyboard","","",2,N],[12,"XkbGetKeyboardByName","","",2,N],[12,"XkbGetKeyExplicitComponents","","",2,N],[12,"XkbGetKeyModifierMap","","",2,N],[12,"XkbGetKeySyms","","",2,N],[12,"XkbGetKeyTypes","","",2,N],[12,"XkbGetKeyVirtualModMap","","",2,N],[12,"XkbGetMap","","",2,N],[12,"XkbGetMapChanges","","",2,N],[12,"XkbGetNamedDeviceIndicator","","",2,N],[12,"XkbGetNamedGeometry","","",2,N],[12,"XkbGetNamedIndicator","","",2,N],[12,"XkbGetNames","","",2,N],[12,"XkbGetPerClientControls","","",2,N],[12,"XkbGetState","","",2,N],[12,"XkbGetUpdatedMap","","",2,N],[12,"XkbGetVirtualMods","","",2,N],[12,"XkbGetXlibControls","","",2,N],[12,"XkbIgnoreExtension","","",2,N],[12,"XkbInitCanonicalKeyTypes","","",2,N],[12,"XkbKeycodeToKeysym","","",2,N],[12,"XkbKeysymToModifiers","","",2,N],[12,"XkbKeyTypesForCoreSymbols","","",2,N],[12,"XkbLatchGroup","","",2,N],[12,"XkbLatchModifiers","","",2,N],[12,"XkbLibraryVersion","","",2,N],[12,"XkbListComponents","","",2,N],[12,"XkbLockGroup","","",2,N],[12,"XkbLockModifiers","","",2,N],[12,"XkbLookupKeyBinding","","",2,N],[12,"XkbLookupKeySym","","",2,N],[12,"XkbNoteControlsChanges","","",2,N],[12,"XkbNoteDeviceChanges","","",2,N],[12,"XkbNoteMapChanges","","",2,N],[12,"XkbNoteNameChanges","","",2,N],[12,"XkbOpenDisplay","","",2,N],[12,"XkbQueryExtension","","",2,N],[12,"XkbRefreshKeyboardMapping","","",2,N],[12,"XkbResizeDeviceButtonActions","","",2,N],[12,"XkbResizeKeyActions","","",2,N],[12,"XkbResizeKeySyms","","",2,N],[12,"XkbResizeKeyType","","",2,N],[12,"XkbSelectEventDetails","","",2,N],[12,"XkbSelectEvents","","",2,N],[12,"XkbSetAtomFuncs","","",2,N],[12,"XkbSetAutoRepeatRate","","",2,N],[12,"XkbSetAutoResetControls","","",2,N],[12,"XkbSetCompatMap","","",2,N],[12,"XkbSetControls","","",2,N],[12,"XkbSetDebuggingFlags","","",2,N],[12,"XkbSetDetectableAutoRepeat","","",2,N],[12,"XkbSetDeviceButtonActions","","",2,N],[12,"XkbSetDeviceInfo","","",2,N],[12,"XkbSetDeviceLedInfo","","",2,N],[12,"XkbSetGeometry","","",2,N],[12,"XkbSetIgnoreLockMods","","",2,N],[12,"XkbSetIndicatorMap","","",2,N],[12,"XkbSetMap","","",2,N],[12,"XkbSetNamedDeviceIndicator","","",2,N],[12,"XkbSetNamedIndicator","","",2,N],[12,"XkbSetNames","","",2,N],[12,"XkbSetPerClientControls","","",2,N],[12,"XkbSetServerInternalMods","","",2,N],[12,"XkbSetXlibControls","","",2,N],[12,"XkbToControl","","",2,N],[12,"XkbTranslateKeyCode","","",2,N],[12,"XkbTranslateKeySym","","",2,N],[12,"XkbUpdateActionVirtualMods","","",2,N],[12,"XkbUpdateKeyTypeVirtualMods","","",2,N],[12,"XkbUpdateMapFromCore","","",2,N],[12,"XkbUseExtension","","",2,N],[12,"XkbVirtualModsToReal","","",2,N],[12,"XkbXlibControlsImplemented","","",2,N],[12,"XKeycodeToKeysym","","",2,N],[12,"XKeysymToKeycode","","",2,N],[12,"XKeysymToString","","",2,N],[12,"XKillClient","","",2,N],[12,"XLastKnownRequestProcessed","","",2,N],[12,"XListDepths","","",2,N],[12,"XListExtensions","","",2,N],[12,"XListFonts","","",2,N],[12,"XListFontsWithInfo","","",2,N],[12,"XListHosts","","",2,N],[12,"XListInstalledColormaps","","",2,N],[12,"XListPixmapFormats","","",2,N],[12,"XListProperties","","",2,N],[12,"XLoadFont","","",2,N],[12,"XLoadQueryFont","","",2,N],[12,"XLocaleOfFontSet","","",2,N],[12,"XLocaleOfIM","","",2,N],[12,"XLocaleOfOM","","",2,N],[12,"XLockDisplay","","",2,N],[12,"XLookupColor","","",2,N],[12,"XLookupKeysym","","",2,N],[12,"XLookupString","","",2,N],[12,"XLowerWindow","","",2,N],[12,"XMapRaised","","",2,N],[12,"XMapSubwindows","","",2,N],[12,"XMapWindow","","",2,N],[12,"XMaskEvent","","",2,N],[12,"XMatchVisualInfo","","",2,N],[12,"XMaxCmapsOfScreen","","",2,N],[12,"XMaxRequestSize","","",2,N],[12,"XmbDrawImageString","","",2,N],[12,"XmbDrawString","","",2,N],[12,"XmbDrawText","","",2,N],[12,"XmbLookupString","","",2,N],[12,"XmbResetIC","","",2,N],[12,"XmbSetWMProperties","","",2,N],[12,"XmbTextEscapement","","",2,N],[12,"XmbTextExtents","","",2,N],[12,"XmbTextListToTextProperty","","",2,N],[12,"XmbTextPerCharExtents","","",2,N],[12,"XmbTextPropertyToTextList","","",2,N],[12,"XMinCmapsOfScreen","","",2,N],[12,"XMoveResizeWindow","","",2,N],[12,"XMoveWindow","","",2,N],[12,"XNewModifiermap","","",2,N],[12,"XNextEvent","","",2,N],[12,"XNextRequest","","",2,N],[12,"XNoOp","","",2,N],[12,"XOffsetRegion","","",2,N],[12,"XOMOfOC","","",2,N],[12,"XOpenDisplay","","",2,N],[12,"XOpenIM","","",2,N],[12,"XOpenOM","","",2,N],[12,"XParseColor","","",2,N],[12,"XParseGeometry","","",2,N],[12,"XPeekEvent","","",2,N],[12,"XPeekIfEvent","","",2,N],[12,"XPending","","",2,N],[12,"Xpermalloc","","",2,N],[12,"XPlanesOfScreen","","",2,N],[12,"XPointInRegion","","",2,N],[12,"XPolygonRegion","","",2,N],[12,"XProcessInternalConnection","","",2,N],[12,"XProtocolRevision","","",2,N],[12,"XProtocolVersion","","",2,N],[12,"XPutBackEvent","","",2,N],[12,"XPutImage","","",2,N],[12,"XPutPixel","","",2,N],[12,"XQLength","","",2,N],[12,"XQueryBestCursor","","",2,N],[12,"XQueryBestSize","","",2,N],[12,"XQueryBestStipple","","",2,N],[12,"XQueryBestTile","","",2,N],[12,"XQueryColor","","",2,N],[12,"XQueryColors","","",2,N],[12,"XQueryExtension","","",2,N],[12,"XQueryFont","","",2,N],[12,"XQueryKeymap","","",2,N],[12,"XQueryPointer","","",2,N],[12,"XQueryTextExtents","","",2,N],[12,"XQueryTextExtents16","","",2,N],[12,"XQueryTree","","",2,N],[12,"XRaiseWindow","","",2,N],[12,"XReadBitmapFile","","",2,N],[12,"XReadBitmapFileData","","",2,N],[12,"XRebindKeysym","","",2,N],[12,"XRecolorCursor","","",2,N],[12,"XReconfigureWMWindow","","",2,N],[12,"XRectInRegion","","",2,N],[12,"XRefreshKeyboardMapping","","",2,N],[12,"XRegisterIMInstantiateCallback","","",2,N],[12,"XRemoveConnectionWatch","","",2,N],[12,"XRemoveFromSaveSet","","",2,N],[12,"XRemoveHost","","",2,N],[12,"XRemoveHosts","","",2,N],[12,"XReparentWindow","","",2,N],[12,"XResetScreenSaver","","",2,N],[12,"XResizeWindow","","",2,N],[12,"XResourceManagerString","","",2,N],[12,"XRestackWindows","","",2,N],[12,"XrmCombineDatabase","","",2,N],[12,"XrmCombineFileDatabase","","",2,N],[12,"XrmDestroyDatabase","","",2,N],[12,"XrmEnumerateDatabase","","",2,N],[12,"XrmGetDatabase","","",2,N],[12,"XrmGetFileDatabase","","",2,N],[12,"XrmGetResource","","",2,N],[12,"XrmGetStringDatabase","","",2,N],[12,"XrmInitialize","","",2,N],[12,"XrmLocaleOfDatabase","","",2,N],[12,"XrmMergeDatabases","","",2,N],[12,"XrmParseCommand","","",2,N],[12,"XrmPermStringToQuark","","",2,N],[12,"XrmPutFileDatabase","","",2,N],[12,"XrmPutLineResource","","",2,N],[12,"XrmPutResource","","",2,N],[12,"XrmPutStringResource","","",2,N],[12,"XrmQGetResource","","",2,N],[12,"XrmQGetSearchList","","",2,N],[12,"XrmQGetSearchResource","","",2,N],[12,"XrmQPutResource","","",2,N],[12,"XrmQPutStringResource","","",2,N],[12,"XrmQuarkToString","","",2,N],[12,"XrmSetDatabase","","",2,N],[12,"XrmStringToBindingQuarkList","","",2,N],[12,"XrmStringToQuark","","",2,N],[12,"XrmStringToQuarkList","","",2,N],[12,"XrmUniqueQuark","","",2,N],[12,"XRootWindow","","",2,N],[12,"XRootWindowOfScreen","","",2,N],[12,"XRotateBuffers","","",2,N],[12,"XRotateWindowProperties","","",2,N],[12,"XSaveContext","","",2,N],[12,"XScreenCount","","",2,N],[12,"XScreenNumberOfScreen","","",2,N],[12,"XScreenOfDisplay","","",2,N],[12,"XScreenResourceString","","",2,N],[12,"XSelectInput","","",2,N],[12,"XSendEvent","","",2,N],[12,"XServerVendor","","",2,N],[12,"XSetAccessControl","","",2,N],[12,"XSetAfterFunction","","",2,N],[12,"XSetArcMode","","",2,N],[12,"XSetAuthorization","","",2,N],[12,"XSetBackground","","",2,N],[12,"XSetClassHint","","",2,N],[12,"XSetClipMask","","",2,N],[12,"XSetClipOrigin","","",2,N],[12,"XSetClipRectangles","","",2,N],[12,"XSetCloseDownMode","","",2,N],[12,"XSetCommand","","",2,N],[12,"XSetDashes","","",2,N],[12,"XSetErrorHandler","","",2,N],[12,"XSetFillRule","","",2,N],[12,"XSetFillStyle","","",2,N],[12,"XSetFont","","",2,N],[12,"XSetFontPath","","",2,N],[12,"XSetForeground","","",2,N],[12,"XSetFunction","","",2,N],[12,"XSetGraphicsExposures","","",2,N],[12,"XSetICFocus","","",2,N],[12,"XSetIconName","","",2,N],[12,"XSetIconSizes","","",2,N],[12,"XSetInputFocus","","",2,N],[12,"XSetIOErrorHandler","","",2,N],[12,"XSetLineAttributes","","",2,N],[12,"XSetLocaleModifiers","","",2,N],[12,"XSetModifierMapping","","",2,N],[12,"XSetNormalHints","","",2,N],[12,"XSetPlaneMask","","",2,N],[12,"XSetPointerMapping","","",2,N],[12,"XSetRegion","","",2,N],[12,"XSetRGBColormaps","","",2,N],[12,"XSetScreenSaver","","",2,N],[12,"XSetSelectionOwner","","",2,N],[12,"XSetSizeHints","","",2,N],[12,"XSetStandardColormap","","",2,N],[12,"XSetStandardProperties","","",2,N],[12,"XSetState","","",2,N],[12,"XSetStipple","","",2,N],[12,"XSetSubwindowMode","","",2,N],[12,"XSetTextProperty","","",2,N],[12,"XSetTile","","",2,N],[12,"XSetTransientForHint","","",2,N],[12,"XSetTSOrigin","","",2,N],[12,"XSetWindowBackground","","",2,N],[12,"XSetWindowBackgroundPixmap","","",2,N],[12,"XSetWindowBorder","","",2,N],[12,"XSetWindowBorderPixmap","","",2,N],[12,"XSetWindowBorderWidth","","",2,N],[12,"XSetWindowColormap","","",2,N],[12,"XSetWMClientMachine","","",2,N],[12,"XSetWMColormapWindows","","",2,N],[12,"XSetWMHints","","",2,N],[12,"XSetWMIconName","","",2,N],[12,"XSetWMName","","",2,N],[12,"XSetWMNormalHints","","",2,N],[12,"XSetWMProperties","","",2,N],[12,"XSetWMProtocols","","",2,N],[12,"XSetWMSizeHints","","",2,N],[12,"XSetZoomHints","","",2,N],[12,"XShrinkRegion","","",2,N],[12,"XStoreBuffer","","",2,N],[12,"XStoreBytes","","",2,N],[12,"XStoreColor","","",2,N],[12,"XStoreColors","","",2,N],[12,"XStoreName","","",2,N],[12,"XStoreNamedColor","","",2,N],[12,"XStringListToTextProperty","","",2,N],[12,"XStringToKeysym","","",2,N],[12,"XSubImage","","",2,N],[12,"XSubtractRegion","","",2,N],[12,"XSupportsLocale","","",2,N],[12,"XSync","","",2,N],[12,"XSynchronize","","",2,N],[12,"XTextExtents","","",2,N],[12,"XTextExtents16","","",2,N],[12,"XTextPropertyToStringList","","",2,N],[12,"XTextWidth","","",2,N],[12,"XTextWidth16","","",2,N],[12,"XTranslateCoordinates","","",2,N],[12,"XUndefineCursor","","",2,N],[12,"XUngrabButton","","",2,N],[12,"XUngrabKey","","",2,N],[12,"XUngrabKeyboard","","",2,N],[12,"XUngrabPointer","","",2,N],[12,"XUngrabServer","","",2,N],[12,"XUninstallColormap","","",2,N],[12,"XUnionRectWithRegion","","",2,N],[12,"XUnionRegion","","",2,N],[12,"XUnloadFont","","",2,N],[12,"XUnlockDisplay","","",2,N],[12,"XUnmapSubwindows","","",2,N],[12,"XUnmapWindow","","",2,N],[12,"XUnregisterIMInstantiateCallback","","",2,N],[12,"XUnsetICFocus","","",2,N],[12,"Xutf8DrawImageString","","",2,N],[12,"Xutf8DrawString","","",2,N],[12,"Xutf8DrawText","","",2,N],[12,"Xutf8LookupString","","",2,N],[12,"Xutf8ResetIC","","",2,N],[12,"Xutf8SetWMProperties","","",2,N],[12,"Xutf8TextEscapement","","",2,N],[12,"Xutf8TextExtents","","",2,N],[12,"Xutf8TextListToTextProperty","","",2,N],[12,"Xutf8TextPerCharExtents","","",2,N],[12,"Xutf8TextPropertyToTextList","","",2,N],[12,"XVendorRelease","","",2,N],[12,"XVisualIDFromVisual","","",2,N],[12,"XWarpPointer","","",2,N],[12,"XwcDrawImageString","","",2,N],[12,"XwcDrawString","","",2,N],[12,"XwcDrawText","","",2,N],[12,"XwcFreeStringList","","",2,N],[12,"XwcLookupString","","",2,N],[12,"XwcResetIC","","",2,N],[12,"XwcTextEscapement","","",2,N],[12,"XwcTextExtents","","",2,N],[12,"XwcTextListToTextProperty","","",2,N],[12,"XwcTextPerCharExtents","","",2,N],[12,"XwcTextPropertyToTextList","","",2,N],[12,"XWhitePixel","","",2,N],[12,"XWhitePixelOfScreen","","",2,N],[12,"XWidthMMOfScreen","","",2,N],[12,"XWidthOfScreen","","",2,N],[12,"XWindowEvent","","",2,N],[12,"XWithdrawWindow","","",2,N],[12,"XWMGeometry","","",2,N],[12,"XWriteBitmapFile","","",2,N],[12,"XXorRegion","","",2,N],[12,"XCreateIC","","",2,N],[12,"XCreateOC","","",2,N],[12,"XGetICValues","","",2,N],[12,"XGetIMValues","","",2,N],[12,"XGetOCValues","","",2,N],[12,"XGetOMValues","","",2,N],[12,"XSetICValues","","",2,N],[12,"XSetIMValues","","",2,N],[12,"XSetOCValues","","",2,N],[12,"XSetOMValues","","",2,N],[12,"XVaCreateNestedList","","",2,N],[3,"_XcmsCCC","","",N,N],[3,"XcmsColor","","",N,N],[3,"_XcmsColorSpace","","",N,N],[3,"_XcmsFunctionSet","","",N,N],[3,"_XkbAction","","",N,N],[3,"_XkbBounds","","",N,N],[3,"_XkbChanges","","",N,N],[3,"_XkbClientMapRec","","",N,N],[3,"_XkbColor","","",N,N],[3,"_XkbComponentList","","",N,N],[3,"_XkbComponentNames","","",N,N],[3,"_XkbControls","","",N,N],[3,"_XkbControlsChanges","","",N,N],[3,"_XkbControlsNotify","","",N,N],[3,"_XkbDeviceChanges","","",N,N],[3,"_XkbDeviceInfo","","",N,N],[3,"_XkbDeviceLedInfo","","",N,N],[3,"_XkbDoodad","","",N,N],[3,"_XkbExtensionDeviceNotify","","",N,N],[3,"_XkbGeometry","","",N,N],[3,"_XkbGeometrySizes","","",N,N],[3,"_XkbIndicatorMapRec","","",N,N],[3,"_XkbKey","","",N,N],[3,"_XkbKeyType","","",N,N],[3,"_XkbMapChanges","","",N,N],[3,"_XkbMods","","",N,N],[3,"_XkbNameChanges","","",N,N],[3,"_XkbNamesNotify","","",N,N],[3,"_XkbOutline","","",N,N],[3,"_XkbOverlay","","",N,N],[3,"_XkbOverlayKey","","",N,N],[3,"_XkbOverlayRow","","",N,N],[3,"_XkbProperty","","",N,N],[3,"_XkbRow","","",N,N],[3,"_XkbSection","","",N,N],[3,"_XkbServerMapRec","","",N,N],[3,"_XkbShape","","",N,N],[3,"_XkbStateRec","","",N,N],[3,"_XkbSymInterpretRec","","",N,N],[3,"XAnyEvent","","",N,N],[12,"type_","","",3,N],[12,"serial","","",3,N],[12,"send_event","","",3,N],[12,"display","","",3,N],[12,"window","","",3,N],[3,"XButtonEvent","","",N,N],[12,"type_","","",4,N],[12,"serial","","",4,N],[12,"send_event","","",4,N],[12,"display","","",4,N],[12,"window","","",4,N],[12,"root","","",4,N],[12,"subwindow","","",4,N],[12,"time","","",4,N],[12,"x","","",4,N],[12,"y","","",4,N],[12,"x_root","","",4,N],[12,"y_root","","",4,N],[12,"state","","",4,N],[12,"button","","",4,N],[12,"same_screen","","",4,N],[3,"XCirculateEvent","","",N,N],[12,"type_","","",5,N],[12,"serial","","",5,N],[12,"send_event","","",5,N],[12,"display","","",5,N],[12,"event","","",5,N],[12,"window","","",5,N],[12,"place","","",5,N],[3,"XCirculateRequestEvent","","",N,N],[12,"type_","","",6,N],[12,"serial","","",6,N],[12,"send_event","","",6,N],[12,"display","","",6,N],[12,"parent","","",6,N],[12,"window","","",6,N],[12,"place","","",6,N],[3,"XClientMessageEvent","","",N,N],[12,"type_","","",7,N],[12,"serial","","",7,N],[12,"send_event","","",7,N],[12,"display","","",7,N],[12,"window","","",7,N],[12,"message_type","","",7,N],[12,"format","","",7,N],[12,"data","","",7,N],[3,"XColormapEvent","","",N,N],[12,"type_","","",8,N],[12,"serial","","",8,N],[12,"send_event","","",8,N],[12,"display","","",8,N],[12,"window","","",8,N],[12,"colormap","","",8,N],[12,"new","","",8,N],[12,"state","","",8,N],[3,"XConfigureEvent","","",N,N],[12,"type_","","",9,N],[12,"serial","","",9,N],[12,"send_event","","",9,N],[12,"display","","",9,N],[12,"event","","",9,N],[12,"window","","",9,N],[12,"x","","",9,N],[12,"y","","",9,N],[12,"width","","",9,N],[12,"height","","",9,N],[12,"border_width","","",9,N],[12,"above","","",9,N],[12,"override_redirect","","",9,N],[3,"XConfigureRequestEvent","","",N,N],[12,"type_","","",10,N],[12,"serial","","",10,N],[12,"send_event","","",10,N],[12,"display","","",10,N],[12,"parent","","",10,N],[12,"window","","",10,N],[12,"x","","",10,N],[12,"y","","",10,N],[12,"width","","",10,N],[12,"height","","",10,N],[12,"border_width","","",10,N],[12,"above","","",10,N],[12,"detail","","",10,N],[12,"value_mask","","",10,N],[3,"XCreateWindowEvent","","",N,N],[12,"type_","","",11,N],[12,"serial","","",11,N],[12,"send_event","","",11,N],[12,"display","","",11,N],[12,"parent","","",11,N],[12,"window","","",11,N],[12,"x","","",11,N],[12,"y","","",11,N],[12,"width","","",11,N],[12,"height","","",11,N],[12,"border_width","","",11,N],[12,"override_redirect","","",11,N],[3,"XCrossingEvent","","",N,N],[12,"type_","","",12,N],[12,"serial","","",12,N],[12,"send_event","","",12,N],[12,"display","","",12,N],[12,"window","","",12,N],[12,"root","","",12,N],[12,"subwindow","","",12,N],[12,"time","","",12,N],[12,"x","","",12,N],[12,"y","","",12,N],[12,"x_root","","",12,N],[12,"y_root","","",12,N],[12,"mode","","",12,N],[12,"detail","","",12,N],[12,"same_screen","","",12,N],[12,"focus","","",12,N],[12,"state","","",12,N],[3,"XDestroyWindowEvent","","",N,N],[12,"type_","","",13,N],[12,"serial","","",13,N],[12,"send_event","","",13,N],[12,"display","","",13,N],[12,"event","","",13,N],[12,"window","","",13,N],[3,"XErrorEvent","","",N,N],[12,"type_","","",14,N],[12,"display","","",14,N],[12,"resourceid","","",14,N],[12,"serial","","",14,N],[12,"error_code","","",14,N],[12,"request_code","","",14,N],[12,"minor_code","","",14,N],[3,"XExposeEvent","","",N,N],[12,"type_","","",15,N],[12,"serial","","",15,N],[12,"send_event","","",15,N],[12,"display","","",15,N],[12,"window","","",15,N],[12,"x","","",15,N],[12,"y","","",15,N],[12,"width","","",15,N],[12,"height","","",15,N],[12,"count","","",15,N],[3,"XFocusChangeEvent","","",N,N],[12,"type_","","",16,N],[12,"serial","","",16,N],[12,"send_event","","",16,N],[12,"display","","",16,N],[12,"window","","",16,N],[12,"mode","","",16,N],[12,"detail","","",16,N],[3,"XGraphicsExposeEvent","","",N,N],[12,"type_","","",17,N],[12,"serial","","",17,N],[12,"send_event","","",17,N],[12,"display","","",17,N],[12,"drawable","","",17,N],[12,"x","","",17,N],[12,"y","","",17,N],[12,"width","","",17,N],[12,"height","","",17,N],[12,"count","","",17,N],[12,"major_code","","",17,N],[12,"minor_code","","",17,N],[3,"XGravityEvent","","",N,N],[12,"type_","","",18,N],[12,"serial","","",18,N],[12,"send_event","","",18,N],[12,"display","","",18,N],[12,"event","","",18,N],[12,"window","","",18,N],[12,"x","","",18,N],[12,"y","","",18,N],[3,"XKeyEvent","","",N,N],[12,"type_","","",19,N],[12,"serial","","",19,N],[12,"send_event","","",19,N],[12,"display","","",19,N],[12,"window","","",19,N],[12,"root","","",19,N],[12,"subwindow","","",19,N],[12,"time","","",19,N],[12,"x","","",19,N],[12,"y","","",19,N],[12,"x_root","","",19,N],[12,"y_root","","",19,N],[12,"state","","",19,N],[12,"keycode","","",19,N],[12,"same_screen","","",19,N],[3,"XKeymapEvent","","",N,N],[12,"type_","","",20,N],[12,"serial","","",20,N],[12,"send_event","","",20,N],[12,"display","","",20,N],[12,"window","","",20,N],[12,"key_vector","","",20,N],[3,"XMapEvent","","",N,N],[12,"type_","","",21,N],[12,"serial","","",21,N],[12,"send_event","","",21,N],[12,"display","","",21,N],[12,"event","","",21,N],[12,"window","","",21,N],[12,"override_redirect","","",21,N],[3,"XMappingEvent","","",N,N],[12,"type_","","",22,N],[12,"serial","","",22,N],[12,"send_event","","",22,N],[12,"display","","",22,N],[12,"event","","",22,N],[12,"request","","",22,N],[12,"first_keycode","","",22,N],[12,"count","","",22,N],[3,"XMapRequestEvent","","",N,N],[12,"type_","","",23,N],[12,"serial","","",23,N],[12,"send_event","","",23,N],[12,"display","","",23,N],[12,"parent","","",23,N],[12,"window","","",23,N],[3,"XMotionEvent","","",N,N],[12,"type_","","",24,N],[12,"serial","","",24,N],[12,"send_event","","",24,N],[12,"display","","",24,N],[12,"window","","",24,N],[12,"root","","",24,N],[12,"subwindow","","",24,N],[12,"time","","",24,N],[12,"x","","",24,N],[12,"y","","",24,N],[12,"x_root","","",24,N],[12,"y_root","","",24,N],[12,"state","","",24,N],[12,"is_hint","","",24,N],[12,"same_screen","","",24,N],[3,"XNoExposeEvent","","",N,N],[12,"type_","","",25,N],[12,"serial","","",25,N],[12,"send_event","","",25,N],[12,"display","","",25,N],[12,"drawable","","",25,N],[12,"major_code","","",25,N],[12,"minor_code","","",25,N],[3,"XPropertyEvent","","",N,N],[12,"type_","","",26,N],[12,"serial","","",26,N],[12,"send_event","","",26,N],[12,"display","","",26,N],[12,"window","","",26,N],[12,"atom","","",26,N],[12,"time","","",26,N],[12,"state","","",26,N],[3,"XReparentEvent","","",N,N],[12,"type_","","",27,N],[12,"serial","","",27,N],[12,"send_event","","",27,N],[12,"display","","",27,N],[12,"event","","",27,N],[12,"window","","",27,N],[12,"parent","","",27,N],[12,"x","","",27,N],[12,"y","","",27,N],[12,"override_redirect","","",27,N],[3,"XResizeRequestEvent","","",N,N],[12,"type_","","",28,N],[12,"serial","","",28,N],[12,"send_event","","",28,N],[12,"display","","",28,N],[12,"window","","",28,N],[12,"width","","",28,N],[12,"height","","",28,N],[3,"XSelectionClearEvent","","",N,N],[12,"type_","","",29,N],[12,"serial","","",29,N],[12,"send_event","","",29,N],[12,"display","","",29,N],[12,"window","","",29,N],[12,"selection","","",29,N],[12,"time","","",29,N],[3,"XSelectionEvent","","",N,N],[12,"type_","","",30,N],[12,"serial","","",30,N],[12,"send_event","","",30,N],[12,"display","","",30,N],[12,"requestor","","",30,N],[12,"selection","","",30,N],[12,"target","","",30,N],[12,"property","","",30,N],[12,"time","","",30,N],[3,"XSelectionRequestEvent","","",N,N],[12,"type_","","",31,N],[12,"serial","","",31,N],[12,"send_event","","",31,N],[12,"display","","",31,N],[12,"owner","","",31,N],[12,"requestor","","",31,N],[12,"selection","","",31,N],[12,"target","","",31,N],[12,"property","","",31,N],[12,"time","","",31,N],[3,"XUnmapEvent","","",N,N],[12,"type_","","",32,N],[12,"serial","","",32,N],[12,"send_event","","",32,N],[12,"display","","",32,N],[12,"event","","",32,N],[12,"window","","",32,N],[12,"from_configure","","",32,N],[3,"XVisibilityEvent","","",N,N],[12,"type_","","",33,N],[12,"serial","","",33,N],[12,"send_event","","",33,N],[12,"display","","",33,N],[12,"window","","",33,N],[12,"state","","",33,N],[3,"_XkbCompatMapRec","","",N,N],[12,"sym_interpret","","",34,N],[12,"groups","","",34,N],[12,"num_si","","",34,N],[12,"size_si","","",34,N],[3,"_XkbDesc","","",N,N],[12,"dpy","","",35,N],[12,"flags","","",35,N],[12,"device_spec","","",35,N],[12,"min_key_code","","",35,N],[12,"max_key_code","","",35,N],[12,"ctrls","","",35,N],[12,"server","","",35,N],[12,"map","","",35,N],[12,"indicators","","",35,N],[12,"names","","",35,N],[12,"compat","","",35,N],[12,"geom","","",35,N],[3,"_XkbIndicatorRec","","",N,N],[12,"phys_indicators","","",36,N],[12,"maps","","",36,N],[3,"_XkbKeyAliasRec","","",N,N],[12,"real","","",37,N],[12,"alias","","",37,N],[3,"_XkbKeyNameRec","","",N,N],[12,"name","","",38,N],[3,"_XkbNamesRec","","",N,N],[12,"keycodes","","",39,N],[12,"geometry","","",39,N],[12,"symbols","","",39,N],[12,"types","","",39,N],[12,"compat","","",39,N],[12,"vmods","","",39,N],[12,"indicators","","",39,N],[12,"groups","","",39,N],[12,"keys","","",39,N],[12,"key_aliases","","",39,N],[12,"radio_groups","","",39,N],[12,"phys_symbols","","",39,N],[12,"num_keys","","",39,N],[12,"num_key_aliases","","",39,N],[12,"num_rg","","",39,N],[3,"XkbAnyEvent","","",N,N],[12,"type_","","",40,N],[12,"serial","","",40,N],[12,"send_event","","",40,N],[12,"display","","",40,N],[12,"time","","",40,N],[12,"xkb_type","","",40,N],[12,"device","","",40,N],[3,"XkbNewKeyboardNotifyEvent","","",N,N],[12,"type_","","",41,N],[12,"serial","","",41,N],[12,"send_event","","",41,N],[12,"display","","",41,N],[12,"time","","",41,N],[12,"xkb_type","","",41,N],[12,"device","","",41,N],[12,"old_device","","",41,N],[12,"min_key_code","","",41,N],[12,"max_key_code","","",41,N],[12,"old_min_key_code","","",41,N],[12,"old_max_key_code","","",41,N],[12,"changed","","",41,N],[12,"req_major","","",41,N],[12,"req_minor","","",41,N],[3,"_XkbMapNotifyEvent","","",N,N],[12,"type_","","",42,N],[12,"serial","","",42,N],[12,"send_event","","",42,N],[12,"display","","",42,N],[12,"time","","",42,N],[12,"xkb_type","","",42,N],[12,"device","","",42,N],[12,"changed","","",42,N],[12,"flags","","",42,N],[12,"first_type","","",42,N],[12,"num_types","","",42,N],[12,"min_key_code","","",42,N],[12,"max_key_code","","",42,N],[12,"first_key_sym","","",42,N],[12,"first_key_act","","",42,N],[12,"first_key_bahavior","","",42,N],[12,"first_key_explicit","","",42,N],[12,"first_modmap_key","","",42,N],[12,"first_vmodmap_key","","",42,N],[12,"num_key_syms","","",42,N],[12,"num_key_acts","","",42,N],[12,"num_key_behaviors","","",42,N],[12,"num_key_explicit","","",42,N],[12,"num_modmap_keys","","",42,N],[12,"num_vmodmap_keys","","",42,N],[12,"vmods","","",42,N],[3,"XkbStateNotifyEvent","","",N,N],[12,"type_","","",43,N],[12,"serial","","",43,N],[12,"send_event","","",43,N],[12,"display","","",43,N],[12,"time","","",43,N],[12,"xkb_type","","",43,N],[12,"device","","",43,N],[12,"changed","","",43,N],[12,"group","","",43,N],[12,"base_group","","",43,N],[12,"latched_group","","",43,N],[12,"locked_group","","",43,N],[12,"mods","","",43,N],[12,"base_mods","","",43,N],[12,"latched_mods","","",43,N],[12,"locked_mods","","",43,N],[12,"compat_state","","",43,N],[12,"grab_mods","","",43,N],[12,"compat_grab_mods","","",43,N],[12,"lookup_mods","","",43,N],[12,"compat_lookup_mods","","",43,N],[12,"ptr_buttons","","",43,N],[12,"keycode","","",43,N],[12,"event_type","","",43,N],[12,"req_major","","",43,N],[12,"req_minor","","",43,N],[3,"_XkbControlsNotifyEvent","","",N,N],[12,"type_","","",44,N],[12,"serial","","",44,N],[12,"send_event","","",44,N],[12,"display","","",44,N],[12,"time","","",44,N],[12,"xkb_type","","",44,N],[12,"device","","",44,N],[12,"changed_ctrls","","",44,N],[12,"enabled_ctrls","","",44,N],[12,"enabled_ctrl_changes","","",44,N],[12,"num_groups","","",44,N],[12,"keycode","","",44,N],[12,"event_type","","",44,N],[12,"req_major","","",44,N],[12,"req_minor","","",44,N],[3,"XkbIndicatorNotifyEvent","","",N,N],[12,"type_","","",45,N],[12,"serial","","",45,N],[12,"send_event","","",45,N],[12,"display","","",45,N],[12,"time","","",45,N],[12,"xkb_type","","",45,N],[12,"device","","",45,N],[12,"changed","","",45,N],[12,"state","","",45,N],[3,"_XkbNamesNotifyEvent","","",N,N],[12,"type_","","",46,N],[12,"serial","","",46,N],[12,"send_event","","",46,N],[12,"display","","",46,N],[12,"time","","",46,N],[12,"xkb_type","","",46,N],[12,"device","","",46,N],[12,"changed","","",46,N],[12,"first_type","","",46,N],[12,"num_types","","",46,N],[12,"first_lvl","","",46,N],[12,"num_lvls","","",46,N],[12,"num_aliases","","",46,N],[12,"num_radio_groups","","",46,N],[12,"changed_vmods","","",46,N],[12,"changed_groups","","",46,N],[12,"changed_indicators","","",46,N],[12,"first_key","","",46,N],[12,"num_keys","","",46,N],[3,"XkbCompatMapNotifyEvent","","",N,N],[12,"type_","","",47,N],[12,"serial","","",47,N],[12,"send_event","","",47,N],[12,"display","","",47,N],[12,"time","","",47,N],[12,"xkb_type","","",47,N],[12,"device","","",47,N],[12,"changed_groups","","",47,N],[12,"first_si","","",47,N],[12,"num_si","","",47,N],[12,"num_total_si","","",47,N],[3,"XkbBellNotifyEvent","","",N,N],[12,"type_","","",48,N],[12,"serial","","",48,N],[12,"send_event","","",48,N],[12,"display","","",48,N],[12,"time","","",48,N],[12,"xkb_type","","",48,N],[12,"device","","",48,N],[12,"percent","","",48,N],[12,"pitch","","",48,N],[12,"duration","","",48,N],[12,"bell_class","","",48,N],[12,"bell_id","","",48,N],[12,"name","","",48,N],[12,"window","","",48,N],[12,"event_only","","",48,N],[3,"XkbActionMessageEvent","","",N,N],[12,"type_","","",49,N],[12,"serial","","",49,N],[12,"send_event","","",49,N],[12,"display","","",49,N],[12,"time","","",49,N],[12,"xkb_type","","",49,N],[12,"device","","",49,N],[12,"keycode","","",49,N],[12,"press","","",49,N],[12,"key_event_follows","","",49,N],[12,"group","","",49,N],[12,"mods","","",49,N],[12,"message","","",49,N],[3,"XkbAccessXNotifyEvent","","",N,N],[12,"type_","","",50,N],[12,"serial","","",50,N],[12,"send_event","","",50,N],[12,"display","","",50,N],[12,"time","","",50,N],[12,"xkb_type","","",50,N],[12,"device","","",50,N],[12,"detail","","",50,N],[12,"keycode","","",50,N],[12,"sk_delay","","",50,N],[12,"debounce_delay","","",50,N],[3,"_XkbExtensionDeviceNotifyEvent","","",N,N],[12,"type_","","",51,N],[12,"serial","","",51,N],[12,"send_event","","",51,N],[12,"display","","",51,N],[12,"time","","",51,N],[12,"xkb_type","","",51,N],[12,"device","","",51,N],[12,"reason","","",51,N],[12,"supported","","",51,N],[12,"unsupported","","",51,N],[12,"first_btn","","",51,N],[12,"num_btns","","",51,N],[12,"leds_defined","","",51,N],[12,"led_state","","",51,N],[12,"led_class","","",51,N],[12,"led_id","","",51,N],[3,"XkbEvent","","",N,N],[3,"Depth","","",N,N],[12,"depth","","",52,N],[12,"nvisuals","","",52,N],[12,"visuals","","",52,N],[3,"Screen","","",N,N],[12,"ext_data","","",53,N],[12,"display","","",53,N],[12,"root","","",53,N],[12,"width","","",53,N],[12,"height","","",53,N],[12,"mwidth","","",53,N],[12,"mheight","","",53,N],[12,"ndepths","","",53,N],[12,"depths","","",53,N],[12,"root_depth","","",53,N],[12,"root_visual","","",53,N],[12,"default_gc","","",53,N],[12,"cmap","","",53,N],[12,"white_pixel","","",53,N],[12,"black_pixel","","",53,N],[12,"max_maps","","",53,N],[12,"min_maps","","",53,N],[12,"backing_store","","",53,N],[12,"save_unders","","",53,N],[12,"root_input_mask","","",53,N],[3,"ScreenFormat","","",N,N],[12,"ext_data","","",54,N],[12,"depth","","",54,N],[12,"bits_per_pixel","","",54,N],[12,"scanline_pad","","",54,N],[3,"Visual","","",N,N],[12,"ext_data","","",55,N],[12,"visualid","","",55,N],[12,"class","","",55,N],[12,"red_mask","","",55,N],[12,"green_mask","","",55,N],[12,"blue_mask","","",55,N],[12,"bits_per_rgb","","",55,N],[12,"map_entries","","",55,N],[3,"XArc","","",N,N],[12,"x","","",56,N],[12,"y","","",56,N],[12,"width","","",56,N],[12,"height","","",56,N],[12,"angle1","","",56,N],[12,"angle2","","",56,N],[3,"XChar2b","","",N,N],[12,"byte1","","",57,N],[12,"byte2","","",57,N],[3,"XCharStruct","","",N,N],[12,"lbearing","","",58,N],[12,"rbearing","","",58,N],[12,"width","","",58,N],[12,"ascent","","",58,N],[12,"descent","","",58,N],[12,"attributes","","",58,N],[3,"XClassHint","","",N,N],[12,"res_name","","",59,N],[12,"res_class","","",59,N],[3,"XColor","","",N,N],[12,"pixel","","",60,N],[12,"red","","",60,N],[12,"green","","",60,N],[12,"blue","","",60,N],[12,"flags","","",60,N],[12,"pad","","",60,N],[3,"XComposeStatus","","",N,N],[12,"compose_ptr","","",61,N],[12,"chars_matched","","",61,N],[3,"XExtCodes","","",N,N],[12,"extension","","",62,N],[12,"major_opcode","","",62,N],[12,"first_event","","",62,N],[12,"first_error","","",62,N],[3,"XExtData","","",N,N],[12,"number","","",63,N],[12,"next","","",63,N],[12,"free_private","","",63,N],[12,"private_data","","",63,N],[3,"XFontProp","","",N,N],[12,"name","","",64,N],[12,"card32","","",64,N],[3,"XFontSetExtents","","",N,N],[12,"max_ink_extent","","",65,N],[12,"max_logical_extent","","",65,N],[3,"XFontStruct","","",N,N],[12,"ext_data","","",66,N],[12,"fid","","",66,N],[12,"direction","","",66,N],[12,"min_char_or_byte2","","",66,N],[12,"max_char_or_byte2","","",66,N],[12,"min_byte1","","",66,N],[12,"max_byte1","","",66,N],[12,"all_chars_exist","","",66,N],[12,"default_char","","",66,N],[12,"n_properties","","",66,N],[12,"properties","","",66,N],[12,"min_bounds","","",66,N],[12,"max_bounds","","",66,N],[12,"per_char","","",66,N],[12,"ascent","","",66,N],[12,"descent","","",66,N],[3,"XGCValues","","",N,N],[12,"function","","",67,N],[12,"plane_mask","","",67,N],[12,"foreground","","",67,N],[12,"background","","",67,N],[12,"line_width","","",67,N],[12,"line_style","","",67,N],[12,"cap_style","","",67,N],[12,"join_style","","",67,N],[12,"fill_style","","",67,N],[12,"fill_rule","","",67,N],[12,"arc_mode","","",67,N],[12,"tile","","",67,N],[12,"stipple","","",67,N],[12,"ts_x_origin","","",67,N],[12,"ts_y_origin","","",67,N],[12,"font","","",67,N],[12,"subwindow_mode","","",67,N],[12,"graphics_exposures","","",67,N],[12,"clip_x_origin","","",67,N],[12,"clip_y_origin","","",67,N],[12,"clip_mask","","",67,N],[12,"dash_offset","","",67,N],[12,"dashes","","",67,N],[3,"XGenericEventCookie","","",N,N],[12,"type_","","",68,N],[12,"serial","","",68,N],[12,"send_event","","",68,N],[12,"display","","",68,N],[12,"extension","","",68,N],[12,"evtype","","",68,N],[12,"cookie","","",68,N],[12,"data","","",68,N],[3,"XHostAddress","","",N,N],[12,"family","","",69,N],[12,"length","","",69,N],[12,"address","","",69,N],[3,"XIconSize","","",N,N],[12,"min_width","","",70,N],[12,"min_height","","",70,N],[12,"max_width","","",70,N],[12,"max_height","","",70,N],[12,"width_inc","","",70,N],[12,"height_inc","","",70,N],[3,"XImage","","",N,N],[12,"width","","",71,N],[12,"height","","",71,N],[12,"xoffset","","",71,N],[12,"format","","",71,N],[12,"data","","",71,N],[12,"byte_order","","",71,N],[12,"bitmap_unit","","",71,N],[12,"bitmap_bit_order","","",71,N],[12,"bitmap_pad","","",71,N],[12,"depth","","",71,N],[12,"bytes_per_line","","",71,N],[12,"bits_per_pixel","","",71,N],[12,"red_mask","","",71,N],[12,"green_mask","","",71,N],[12,"blue_mask","","",71,N],[12,"obdata","","",71,N],[12,"funcs","","",71,N],[3,"XKeyboardControl","","",N,N],[12,"key_click_percent","","",72,N],[12,"bell_percent","","",72,N],[12,"bell_pitch","","",72,N],[12,"bell_duration","","",72,N],[12,"led","","",72,N],[12,"led_mode","","",72,N],[12,"key","","",72,N],[12,"auto_repeat_mode","","",72,N],[3,"XKeyboardState","","",N,N],[12,"key_click_percent","","",73,N],[12,"bell_percent","","",73,N],[12,"bell_pitch","","",73,N],[12,"bell_duration","","",73,N],[12,"led_mask","","",73,N],[12,"global_auto_repeat","","",73,N],[12,"auto_repeats","","",73,N],[3,"XmbTextItem","","",N,N],[12,"chars","","",74,N],[12,"nchars","","",74,N],[12,"delta","","",74,N],[12,"font_set","","",74,N],[3,"XModifierKeymap","","",N,N],[12,"max_keypermod","","",75,N],[12,"modifiermap","","",75,N],[3,"XOMCharSetList","","",N,N],[12,"charset_count","","",76,N],[12,"charset_list","","",76,N],[3,"XPixmapFormatValues","","",N,N],[12,"depth","","",77,N],[12,"bits_per_pixel","","",77,N],[12,"scanline_pad","","",77,N],[3,"XPoint","","",N,N],[12,"x","","",78,N],[12,"y","","",78,N],[3,"XRectangle","","",N,N],[12,"x","","",79,N],[12,"y","","",79,N],[12,"width","","",79,N],[12,"height","","",79,N],[3,"XrmOptionDescRec","","",N,N],[12,"option","","",80,N],[12,"specifier","","",80,N],[12,"argKind","","",80,N],[12,"value","","",80,N],[3,"XrmValue","","",N,N],[12,"size","","",81,N],[12,"addr","","",81,N],[3,"XSegment","","",N,N],[12,"x1","","",82,N],[12,"y1","","",82,N],[12,"x2","","",82,N],[12,"y2","","",82,N],[3,"XSetWindowAttributes","","",N,N],[12,"background_pixmap","","",83,N],[12,"background_pixel","","",83,N],[12,"border_pixmap","","",83,N],[12,"border_pixel","","",83,N],[12,"bit_gravity","","",83,N],[12,"win_gravity","","",83,N],[12,"backing_store","","",83,N],[12,"backing_planes","","",83,N],[12,"backing_pixel","","",83,N],[12,"save_under","","",83,N],[12,"event_mask","","",83,N],[12,"do_not_propagate_mask","","",83,N],[12,"override_redirect","","",83,N],[12,"colormap","","",83,N],[12,"cursor","","",83,N],[3,"XSizeHints","","",N,N],[12,"flags","","",84,N],[12,"x","","",84,N],[12,"y","","",84,N],[12,"width","","",84,N],[12,"height","","",84,N],[12,"min_width","","",84,N],[12,"min_height","","",84,N],[12,"max_width","","",84,N],[12,"max_height","","",84,N],[12,"width_inc","","",84,N],[12,"height_inc","","",84,N],[12,"min_aspect","","",84,N],[12,"max_aspect","","",84,N],[12,"base_width","","",84,N],[12,"base_height","","",84,N],[12,"win_gravity","","",84,N],[3,"XStandardColormap","","",N,N],[12,"colormap","","",85,N],[12,"red_max","","",85,N],[12,"red_mult","","",85,N],[12,"green_max","","",85,N],[12,"green_mult","","",85,N],[12,"blue_max","","",85,N],[12,"blue_mult","","",85,N],[12,"base_pixel","","",85,N],[12,"visualid","","",85,N],[12,"killid","","",85,N],[3,"XTextItem","","",N,N],[12,"chars","","",86,N],[12,"nchars","","",86,N],[12,"delta","","",86,N],[12,"font","","",86,N],[3,"XTextItem16","","",N,N],[12,"chars","","",87,N],[12,"nchars","","",87,N],[12,"delta","","",87,N],[12,"font","","",87,N],[3,"XTextProperty","","",N,N],[12,"value","","",88,N],[12,"encoding","","",88,N],[12,"format","","",88,N],[12,"nitems","","",88,N],[3,"XTimeCoord","","",N,N],[12,"time","","",89,N],[12,"x","","",89,N],[12,"y","","",89,N],[3,"XVisualInfo","","",N,N],[12,"visual","","",90,N],[12,"visualid","","",90,N],[12,"screen","","",90,N],[12,"depth","","",90,N],[12,"class","","",90,N],[12,"red_mask","","",90,N],[12,"green_mask","","",90,N],[12,"blue_mask","","",90,N],[12,"colormap_size","","",90,N],[12,"bits_per_rgb","","",90,N],[3,"XwcTextItem","","",N,N],[12,"chars","","",91,N],[12,"nchars","","",91,N],[12,"delta","","",91,N],[12,"font_set","","",91,N],[3,"XWindowAttributes","","",N,N],[12,"x","","",92,N],[12,"y","","",92,N],[12,"width","","",92,N],[12,"height","","",92,N],[12,"border_width","","",92,N],[12,"depth","","",92,N],[12,"visual","","",92,N],[12,"root","","",92,N],[12,"class","","",92,N],[12,"bit_gravity","","",92,N],[12,"win_gravity","","",92,N],[12,"backing_store","","",92,N],[12,"backing_planes","","",92,N],[12,"backing_pixel","","",92,N],[12,"save_under","","",92,N],[12,"colormap","","",92,N],[12,"map_installed","","",92,N],[12,"map_state","","",92,N],[12,"all_event_masks","","",92,N],[12,"your_event_mask","","",92,N],[12,"do_not_propagate_mask","","",92,N],[12,"override_redirect","","",92,N],[12,"screen","","",92,N],[3,"XWindowChanges","","",N,N],[12,"x","","",93,N],[12,"y","","",93,N],[12,"width","","",93,N],[12,"height","","",93,N],[12,"border_width","","",93,N],[12,"sibling","","",93,N],[12,"stack_mode","","",93,N],[3,"XWMHints","","",N,N],[12,"flags","","",94,N],[12,"input","","",94,N],[12,"initial_state","","",94,N],[12,"icon_pixmap","","",94,N],[12,"icon_window","","",94,N],[12,"icon_x","","",94,N],[12,"icon_y","","",94,N],[12,"icon_mask","","",94,N],[12,"window_group","","",94,N],[3,"XIMCallback","","",N,N],[12,"client_data","","",95,N],[12,"callback","","",95,N],[3,"XICCallback","","",N,N],[12,"client_data","","",96,N],[12,"callback","","",96,N],[3,"AspectRatio","","",N,N],[12,"x","","",97,N],[12,"y","","",97,N],[3,"ClientMessageData","","",N,N],[3,"ImageFns","","",N,N],[12,"create_image","","",98,N],[12,"destroy_image","","",98,N],[12,"get_pixel","","",98,N],[12,"put_pixel","","",98,N],[12,"sub_image","","",98,N],[12,"add_pixel","","",98,N],[19,"XEvent","","",N,N],[12,"type_","","",99,N],[12,"any","","",99,N],[12,"button","","",99,N],[12,"circulate","","",99,N],[12,"circulate_request","","",99,N],[12,"client_message","","",99,N],[12,"colormap","","",99,N],[12,"configure","","",99,N],[12,"configure_request","","",99,N],[12,"create_window","","",99,N],[12,"crossing","","",99,N],[12,"destroy_window","","",99,N],[12,"error","","",99,N],[12,"expose","","",99,N],[12,"focus_change","","",99,N],[12,"generic_event_cookie","","",99,N],[12,"graphics_expose","","",99,N],[12,"gravity","","",99,N],[12,"key","","",99,N],[12,"keymap","","",99,N],[12,"map","","",99,N],[12,"mapping","","",99,N],[12,"map_request","","",99,N],[12,"motion","","",99,N],[12,"no_expose","","",99,N],[12,"property","","",99,N],[12,"reparent","","",99,N],[12,"resize_request","","",99,N],[12,"selection_clear","","",99,N],[12,"selection","","",99,N],[12,"selection_request","","",99,N],[12,"unmap","","",99,N],[12,"visibility","","",99,N],[12,"pad","","",99,N],[12,"xf86vm_notify","","",99,N],[12,"xrr_screen_change_notify","","",99,N],[12,"xrr_notify","","",99,N],[12,"xrr_output_change_notify","","",99,N],[12,"xrr_crtc_change_notify","","",99,N],[12,"xrr_output_property_notify","","",99,N],[12,"xrr_provider_change_notify","","",99,N],[12,"xrr_provider_property_notify","","",99,N],[12,"xrr_resource_change_notify","","",99,N],[12,"xss_notify","","",99,N],[4,"_XDisplay","","",N,N],[4,"xError","","",N,N],[4,"xEvent","","",N,N],[4,"_XGC","","",N,N],[4,"_XIC","","",N,N],[4,"_XIM","","",N,N],[4,"_XRegion","","",N,N],[4,"_XOC","","",N,N],[4,"_XOM","","",N,N],[4,"_XrmHashBucketRec","","",N,N],[4,"XkbKbdDpyStateRec","","",N,N],[0,"xkb","","",N,N],[6,"Atom","","",N,N],[6,"Bool","","",N,N],[6,"Colormap","","",N,N],[6,"Cursor","","",N,N],[6,"Drawable","","",N,N],[6,"Font","","",N,N],[6,"GContext","","",N,N],[6,"KeyCode","","",N,N],[6,"KeySym","","",N,N],[6,"Mask","","",N,N],[6,"Pixmap","","",N,N],[6,"Status","","",N,N],[6,"Time","","",N,N],[6,"VisualID","","",N,N],[6,"Window","","",N,N],[6,"XID","","",N,N],[6,"XPointer","","",N,N],[6,"XEDataObject","","",N,N],[6,"Display","","",N,N],[6,"GC","","",N,N],[6,"Region","","",N,N],[6,"XcmsCCC","","",N,N],[6,"XcmsColorSpace","","",N,N],[6,"XcmsFunctionSet","","",N,N],[6,"XContext","","",N,N],[6,"XFontSet","","",N,N],[6,"XIC","","",N,N],[6,"XIM","","",N,N],[6,"XkbAction","","",N,N],[6,"XkbBoundsPtr","","",N,N],[6,"XkbChangesPtr","","",N,N],[6,"XkbClientMapPtr","","",N,N],[6,"XkbColorPtr","","",N,N],[6,"XkbCompatMapPtr","","",N,N],[6,"XkbComponentListPtr","","",N,N],[6,"XkbComponentNamesPtr","","",N,N],[6,"XkbControlsChangesPtr","","",N,N],[6,"XkbControlsNotifyEvent","","",N,N],[6,"XkbControlsPtr","","",N,N],[6,"XkbDescPtr","","",N,N],[6,"XkbDeviceChangesPtr","","",N,N],[6,"XkbDeviceInfoPtr","","",N,N],[6,"XkbDeviceLedInfoPtr","","",N,N],[6,"XkbDoodadPtr","","",N,N],[6,"XkbExtensionDeviceNotifyEvent","","",N,N],[6,"XkbGeometryPtr","","",N,N],[6,"XkbGeometrySizesPtr","","",N,N],[6,"XkbIndicatorMapPtr","","",N,N],[6,"XkbIndicatorMapRec","","",N,N],[6,"XkbIndicatorPtr","","",N,N],[6,"XkbKeyTypePtr","","",N,N],[6,"XkbMapChangesPtr","","",N,N],[6,"XkbMapNotifyEvent","","",N,N],[6,"XkbModsPtr","","",N,N],[6,"XkbModsRec","","",N,N],[6,"XkbNameChangesPtr","","",N,N],[6,"XkbNamesNotifyEvent","","",N,N],[6,"XkbNamesPtr","","",N,N],[6,"XkbKeyAliasPtr","","",N,N],[6,"XkbKeyNamePtr","","",N,N],[6,"XkbKeyPtr","","",N,N],[6,"XkbOutlinePtr","","",N,N],[6,"XkbOverlayKeyPtr","","",N,N],[6,"XkbOverlayPtr","","",N,N],[6,"XkbOverlayRowPtr","","",N,N],[6,"XkbPropertyPtr","","",N,N],[6,"XkbRowPtr","","",N,N],[6,"XkbSectionPtr","","",N,N],[6,"XkbServerMapPtr","","",N,N],[6,"XkbShapePtr","","",N,N],[6,"XkbStatePtr","","",N,N],[6,"XkbSymInterpretPtr","","",N,N],[6,"XOM","","",N,N],[6,"XrmDatabase","","",N,N],[6,"XrmOptionDescList","","",N,N],[6,"XConnectionWatchProc","","",N,N],[6,"XIMProc","","",N,N],[6,"XICProc","","",N,N],[6,"XICCEncodingStyle","","",N,N],[6,"XOrientation","","",N,N],[6,"XrmBinding","","",N,N],[6,"XrmOptionKind","","",N,N],[6,"XButtonPressedEvent","","",N,N],[6,"XButtonReleasedEvent","","",N,N],[6,"XEnterWindowEvent","","",N,N],[6,"XLeaveWindowEvent","","",N,N],[6,"XFocusInEvent","","",N,N],[6,"XFocusOutEvent","","",N,N],[6,"XKeyPressedEvent","","",N,N],[6,"XKeyReleasedEvent","","",N,N],[6,"XPointerMovedEvent","","",N,N],[6,"XkbKbdDpyStatePtr","","",N,N],[17,"AllocNone","","",N,N],[17,"AllocAll","","",N,N],[17,"XkbKeyNameLength","","",N,N],[17,"XkbNumIndicators","","",N,N],[17,"XkbNumKbdGroups","","",N,N],[17,"XkbNumVirtualMods","","",N,N],[17,"XA_PRIMARY","","",N,N],[17,"XA_SECONDARY","","",N,N],[17,"XA_ARC","","",N,N],[17,"XA_ATOM","","",N,N],[17,"XA_BITMAP","","",N,N],[17,"XA_CARDINAL","","",N,N],[17,"XA_COLORMAP","","",N,N],[17,"XA_CURSOR","","",N,N],[17,"XA_CUT_BUFFER0","","",N,N],[17,"XA_CUT_BUFFER1","","",N,N],[17,"XA_CUT_BUFFER2","","",N,N],[17,"XA_CUT_BUFFER3","","",N,N],[17,"XA_CUT_BUFFER4","","",N,N],[17,"XA_CUT_BUFFER5","","",N,N],[17,"XA_CUT_BUFFER6","","",N,N],[17,"XA_CUT_BUFFER7","","",N,N],[17,"XA_DRAWABLE","","",N,N],[17,"XA_FONT","","",N,N],[17,"XA_INTEGER","","",N,N],[17,"XA_PIXMAP","","",N,N],[17,"XA_POINT","","",N,N],[17,"XA_RECTANGLE","","",N,N],[17,"XA_RESOURCE_MANAGER","","",N,N],[17,"XA_RGB_COLOR_MAP","","",N,N],[17,"XA_RGB_BEST_MAP","","",N,N],[17,"XA_RGB_BLUE_MAP","","",N,N],[17,"XA_RGB_DEFAULT_MAP","","",N,N],[17,"XA_RGB_GRAY_MAP","","",N,N],[17,"XA_RGB_GREEN_MAP","","",N,N],[17,"XA_RGB_RED_MAP","","",N,N],[17,"XA_STRING","","",N,N],[17,"XA_VISUALID","","",N,N],[17,"XA_WINDOW","","",N,N],[17,"XA_WM_COMMAND","","",N,N],[17,"XA_WM_HINTS","","",N,N],[17,"XA_WM_CLIENT_MACHINE","","",N,N],[17,"XA_WM_ICON_NAME","","",N,N],[17,"XA_WM_ICON_SIZE","","",N,N],[17,"XA_WM_NAME","","",N,N],[17,"XA_WM_NORMAL_HINTS","","",N,N],[17,"XA_WM_SIZE_HINTS","","",N,N],[17,"XA_WM_ZOOM_HINTS","","",N,N],[17,"XA_MIN_SPACE","","",N,N],[17,"XA_NORM_SPACE","","",N,N],[17,"XA_MAX_SPACE","","",N,N],[17,"XA_END_SPACE","","",N,N],[17,"XA_SUPERSCRIPT_X","","",N,N],[17,"XA_SUPERSCRIPT_Y","","",N,N],[17,"XA_SUBSCRIPT_X","","",N,N],[17,"XA_SUBSCRIPT_Y","","",N,N],[17,"XA_UNDERLINE_POSITION","","",N,N],[17,"XA_UNDERLINE_THICKNESS","","",N,N],[17,"XA_STRIKEOUT_ASCENT","","",N,N],[17,"XA_STRIKEOUT_DESCENT","","",N,N],[17,"XA_ITALIC_ANGLE","","",N,N],[17,"XA_X_HEIGHT","","",N,N],[17,"XA_QUAD_WIDTH","","",N,N],[17,"XA_WEIGHT","","",N,N],[17,"XA_POINT_SIZE","","",N,N],[17,"XA_RESOLUTION","","",N,N],[17,"XA_COPYRIGHT","","",N,N],[17,"XA_NOTICE","","",N,N],[17,"XA_FONT_NAME","","",N,N],[17,"XA_FAMILY_NAME","","",N,N],[17,"XA_FULL_NAME","","",N,N],[17,"XA_CAP_HEIGHT","","",N,N],[17,"XA_WM_CLASS","","",N,N],[17,"XA_WM_TRANSIENT_FOR","","",N,N],[17,"False","","",N,N],[17,"True","","",N,N],[17,"Unsorted","","",N,N],[17,"YSorted","","",N,N],[17,"YXSorted","","",N,N],[17,"YXBanded","","",N,N],[17,"DoRed","","",N,N],[17,"DoGreen","","",N,N],[17,"DoBlue","","",N,N],[17,"Success","","",N,N],[17,"BadRequest","","",N,N],[17,"BadValue","","",N,N],[17,"BadWindow","","",N,N],[17,"BadPixmap","","",N,N],[17,"BadAtom","","",N,N],[17,"BadCursor","","",N,N],[17,"BadFont","","",N,N],[17,"BadMatch","","",N,N],[17,"BadDrawable","","",N,N],[17,"BadAccess","","",N,N],[17,"BadAlloc","","",N,N],[17,"BadColor","","",N,N],[17,"BadGC","","",N,N],[17,"BadIDChoice","","",N,N],[17,"BadName","","",N,N],[17,"BadLength","","",N,N],[17,"BadImplementation","","",N,N],[17,"FirstExtensionError","","",N,N],[17,"LastExtensionError","","",N,N],[17,"KeyPress","","",N,N],[17,"KeyRelease","","",N,N],[17,"ButtonPress","","",N,N],[17,"ButtonRelease","","",N,N],[17,"MotionNotify","","",N,N],[17,"EnterNotify","","",N,N],[17,"LeaveNotify","","",N,N],[17,"FocusIn","","",N,N],[17,"FocusOut","","",N,N],[17,"KeymapNotify","","",N,N],[17,"Expose","","",N,N],[17,"GraphicsExpose","","",N,N],[17,"NoExpose","","",N,N],[17,"VisibilityNotify","","",N,N],[17,"CreateNotify","","",N,N],[17,"DestroyNotify","","",N,N],[17,"UnmapNotify","","",N,N],[17,"MapNotify","","",N,N],[17,"MapRequest","","",N,N],[17,"ReparentNotify","","",N,N],[17,"ConfigureNotify","","",N,N],[17,"ConfigureRequest","","",N,N],[17,"GravityNotify","","",N,N],[17,"ResizeRequest","","",N,N],[17,"CirculateNotify","","",N,N],[17,"CirculateRequest","","",N,N],[17,"PropertyNotify","","",N,N],[17,"SelectionClear","","",N,N],[17,"SelectionRequest","","",N,N],[17,"SelectionNotify","","",N,N],[17,"ColormapNotify","","",N,N],[17,"ClientMessage","","",N,N],[17,"MappingNotify","","",N,N],[17,"GenericEvent","","",N,N],[17,"LASTEvent","","",N,N],[17,"NoEventMask","","",N,N],[17,"KeyPressMask","","",N,N],[17,"KeyReleaseMask","","",N,N],[17,"ButtonPressMask","","",N,N],[17,"ButtonReleaseMask","","",N,N],[17,"EnterWindowMask","","",N,N],[17,"LeaveWindowMask","","",N,N],[17,"PointerMotionMask","","",N,N],[17,"PointerMotionHintMask","","",N,N],[17,"Button1MotionMask","","",N,N],[17,"Button2MotionMask","","",N,N],[17,"Button3MotionMask","","",N,N],[17,"Button4MotionMask","","",N,N],[17,"Button5MotionMask","","",N,N],[17,"ButtonMotionMask","","",N,N],[17,"KeymapStateMask","","",N,N],[17,"ExposureMask","","",N,N],[17,"VisibilityChangeMask","","",N,N],[17,"StructureNotifyMask","","",N,N],[17,"ResizeRedirectMask","","",N,N],[17,"SubstructureNotifyMask","","",N,N],[17,"SubstructureRedirectMask","","",N,N],[17,"FocusChangeMask","","",N,N],[17,"PropertyChangeMask","","",N,N],[17,"ColormapChangeMask","","",N,N],[17,"OwnerGrabButtonMask","","",N,N],[17,"PropModeReplace","","",N,N],[17,"PropModePrepend","","",N,N],[17,"PropModeAppend","","",N,N],[17,"ShiftMapIndex","","",N,N],[17,"LockMapIndex","","",N,N],[17,"ControlMapIndex","","",N,N],[17,"Mod1MapIndex","","",N,N],[17,"Mod2MapIndex","","",N,N],[17,"Mod3MapIndex","","",N,N],[17,"Mod4MapIndex","","",N,N],[17,"Mod5MapIndex","","",N,N],[17,"Button1Mask","","",N,N],[17,"Button2Mask","","",N,N],[17,"Button3Mask","","",N,N],[17,"Button4Mask","","",N,N],[17,"Button5Mask","","",N,N],[17,"AnyModifier","","",N,N],[17,"NotifyNormal","","",N,N],[17,"NotifyGrab","","",N,N],[17,"NotifyUngrab","","",N,N],[17,"NotifyWhileGrabbed","","",N,N],[17,"NotifyHint","","",N,N],[17,"NotifyAncestor","","",N,N],[17,"NotifyVirtual","","",N,N],[17,"NotifyInferior","","",N,N],[17,"NotifyNonlinear","","",N,N],[17,"NotifyNonlinearVirtual","","",N,N],[17,"NotifyPointer","","",N,N],[17,"NotifyPointerRoot","","",N,N],[17,"NotifyDetailNone","","",N,N],[17,"VisibilityUnobscured","","",N,N],[17,"VisibilityPartiallyObscured","","",N,N],[17,"VisibilityFullyObscured","","",N,N],[17,"PlaceOnTop","","",N,N],[17,"PlaceOnBottom","","",N,N],[17,"FamilyInternet","","",N,N],[17,"FamilyDECnet","","",N,N],[17,"FamilyChaos","","",N,N],[17,"FamilyInternet6","","",N,N],[17,"FamilyServerInterpreted","","",N,N],[17,"PropertyNewValue","","",N,N],[17,"PropertyDelete","","",N,N],[17,"ColormapUninstalled","","",N,N],[17,"ColormapInstalled","","",N,N],[17,"GrabModeSync","","",N,N],[17,"GrabModeAsync","","",N,N],[17,"GrabSuccess","","",N,N],[17,"AlreadyGrabbed","","",N,N],[17,"GrabInvalidTime","","",N,N],[17,"GrabNotViewable","","",N,N],[17,"GrabFrozen","","",N,N],[17,"AsyncPointer","","",N,N],[17,"SyncPointer","","",N,N],[17,"ReplayPointer","","",N,N],[17,"AsyncKeyboard","","",N,N],[17,"SyncKeyboard","","",N,N],[17,"ReplayKeyboard","","",N,N],[17,"AsyncBoth","","",N,N],[17,"SyncBoth","","",N,N],[17,"RevertToNone","","",N,N],[17,"RevertToPointerRoot","","",N,N],[17,"RevertToParent","","",N,N],[17,"CWX","","",N,N],[17,"CWY","","",N,N],[17,"CWWidth","","",N,N],[17,"CWHeight","","",N,N],[17,"CWBorderWidth","","",N,N],[17,"CWSibling","","",N,N],[17,"CWStackMode","","",N,N],[17,"ForgetGravity","","",N,N],[17,"UnmapGravity","","",N,N],[17,"NorthWestGravity","","",N,N],[17,"NorthGravity","","",N,N],[17,"NorthEastGravity","","",N,N],[17,"WestGravity","","",N,N],[17,"CenterGravity","","",N,N],[17,"EastGravity","","",N,N],[17,"SouthWestGravity","","",N,N],[17,"SouthGravity","","",N,N],[17,"SouthEastGravity","","",N,N],[17,"StaticGravity","","",N,N],[17,"XYBitmap","","",N,N],[17,"XYPixmap","","",N,N],[17,"ZPixmap","","",N,N],[17,"NotUseful","","",N,N],[17,"WhenMapped","","",N,N],[17,"Always","","",N,N],[17,"IsUnmapped","","",N,N],[17,"IsUnviewable","","",N,N],[17,"IsViewable","","",N,N],[17,"ShiftMask","","",N,N],[17,"LockMask","","",N,N],[17,"ControlMask","","",N,N],[17,"Mod1Mask","","",N,N],[17,"Mod2Mask","","",N,N],[17,"Mod3Mask","","",N,N],[17,"Mod4Mask","","",N,N],[17,"Mod5Mask","","",N,N],[17,"Button1","","",N,N],[17,"Button2","","",N,N],[17,"Button3","","",N,N],[17,"Button4","","",N,N],[17,"Button5","","",N,N],[17,"USPosition","","",N,N],[17,"USSize","","",N,N],[17,"PPosition","","",N,N],[17,"PSize","","",N,N],[17,"PMinSize","","",N,N],[17,"PMaxSize","","",N,N],[17,"PResizeInc","","",N,N],[17,"PAspect","","",N,N],[17,"PBaseSize","","",N,N],[17,"PWinGravity","","",N,N],[17,"PAllHints","","",N,N],[17,"SetModeInsert","","",N,N],[17,"SetModeDelete","","",N,N],[17,"DestroyAll","","",N,N],[17,"RetainPermanent","","",N,N],[17,"RetainTemporary","","",N,N],[17,"Above","","",N,N],[17,"Below","","",N,N],[17,"TopIf","","",N,N],[17,"BottomIf","","",N,N],[17,"Opposite","","",N,N],[17,"RaiseLowest","","",N,N],[17,"LowerHighest","","",N,N],[17,"GXclear","","",N,N],[17,"GXand","","",N,N],[17,"GXandReverse","","",N,N],[17,"GXcopy","","",N,N],[17,"GXandInverted","","",N,N],[17,"GXnoop","","",N,N],[17,"GXxor","","",N,N],[17,"GXor","","",N,N],[17,"GXnor","","",N,N],[17,"GXequiv","","",N,N],[17,"GXinvert","","",N,N],[17,"GXorReverse","","",N,N],[17,"GXcopyInverted","","",N,N],[17,"GXorInverted","","",N,N],[17,"GXnand","","",N,N],[17,"GXset","","",N,N],[17,"LineSolid","","",N,N],[17,"LineOnOffDash","","",N,N],[17,"LineDoubleDash","","",N,N],[17,"CapNotLast","","",N,N],[17,"CapButt","","",N,N],[17,"CapRound","","",N,N],[17,"CapProjecting","","",N,N],[17,"JoinMiter","","",N,N],[17,"JoinRound","","",N,N],[17,"JoinBevel","","",N,N],[17,"FillSolid","","",N,N],[17,"FillTiled","","",N,N],[17,"FillStippled","","",N,N],[17,"FillOpaqueStippled","","",N,N],[17,"EvenOddRule","","",N,N],[17,"WindingRule","","",N,N],[17,"ClipByChildren","","",N,N],[17,"IncludeInferiors","","",N,N],[17,"CoordModeOrigin","","",N,N],[17,"CoordModePrevious","","",N,N],[17,"Complex","","",N,N],[17,"Nonconvex","","",N,N],[17,"Convex","","",N,N],[17,"ArcChord","","",N,N],[17,"ArcPieSlice","","",N,N],[17,"GCFunction","","",N,N],[17,"GCPlaneMask","","",N,N],[17,"GCForeground","","",N,N],[17,"GCBackground","","",N,N],[17,"GCLineWidth","","",N,N],[17,"GCLineStyle","","",N,N],[17,"GCCapStyle","","",N,N],[17,"GCJoinStyle","","",N,N],[17,"GCFillStyle","","",N,N],[17,"GCFillRule","","",N,N],[17,"GCTile","","",N,N],[17,"GCStipple","","",N,N],[17,"GCTileStipXOrigin","","",N,N],[17,"GCTileStipYOrigin","","",N,N],[17,"GCFont","","",N,N],[17,"GCSubwindowMode","","",N,N],[17,"GCGraphicsExposures","","",N,N],[17,"GCClipXOrigin","","",N,N],[17,"GCClipYOrigin","","",N,N],[17,"GCClipMask","","",N,N],[17,"GCDashOffset","","",N,N],[17,"GCDashList","","",N,N],[17,"GCArcMode","","",N,N],[17,"GCLastBit","","",N,N],[17,"FontLeftToRight","","",N,N],[17,"FontRightToLeft","","",N,N],[17,"FontChange","","",N,N],[17,"CursorShape","","",N,N],[17,"TileShape","","",N,N],[17,"StippleShape","","",N,N],[17,"AutoRepeatModeOff","","",N,N],[17,"AutoRepeatModeOn","","",N,N],[17,"AutoRepeatModeDefault","","",N,N],[17,"LedModeOff","","",N,N],[17,"LedModeOn","","",N,N],[17,"KBKeyClickPercent","","",N,N],[17,"KBBellPercent","","",N,N],[17,"KBBellPitch","","",N,N],[17,"KBBellDuration","","",N,N],[17,"KBLed","","",N,N],[17,"KBLedMode","","",N,N],[17,"KBKey","","",N,N],[17,"KBAutoRepeatMode","","",N,N],[17,"MappingSuccess","","",N,N],[17,"MappingBusy","","",N,N],[17,"MappingFailed","","",N,N],[17,"MappingModifier","","",N,N],[17,"MappingKeyboard","","",N,N],[17,"MappingPointer","","",N,N],[17,"DontPreferBlanking","","",N,N],[17,"PreferBlanking","","",N,N],[17,"DefaultBlanking","","",N,N],[17,"DisableScreenSaver","","",N,N],[17,"DisableScreenInterval","","",N,N],[17,"DontAllowExposures","","",N,N],[17,"AllowExposures","","",N,N],[17,"DefaultExposures","","",N,N],[17,"ScreenSaverReset","","",N,N],[17,"ScreenSaverActive","","",N,N],[17,"HostInsert","","",N,N],[17,"HostDelete","","",N,N],[17,"EnableAccess","","",N,N],[17,"DisableAccess","","",N,N],[17,"StaticGray","","",N,N],[17,"GrayScale","","",N,N],[17,"StaticColor","","",N,N],[17,"PseudoColor","","",N,N],[17,"TrueColor","","",N,N],[17,"DirectColor","","",N,N],[17,"VisualNoMask","","",N,N],[17,"VisualIDMask","","",N,N],[17,"VisualScreenMask","","",N,N],[17,"VisualDepthMask","","",N,N],[17,"VisualClassMask","","",N,N],[17,"VisualRedMaskMask","","",N,N],[17,"VisualGreenMaskMask","","",N,N],[17,"VisualBlueMaskMask","","",N,N],[17,"VisualColormapSizeMask","","",N,N],[17,"VisualBitsPerRGBMask","","",N,N],[17,"VisualAllMask","","",N,N],[17,"CWBackPixmap","","",N,N],[17,"CWBackPixel","","",N,N],[17,"CWBorderPixmap","","",N,N],[17,"CWBorderPixel","","",N,N],[17,"CWBitGravity","","",N,N],[17,"CWWinGravity","","",N,N],[17,"CWBackingStore","","",N,N],[17,"CWBackingPlanes","","",N,N],[17,"CWBackingPixel","","",N,N],[17,"CWOverrideRedirect","","",N,N],[17,"CWSaveUnder","","",N,N],[17,"CWEventMask","","",N,N],[17,"CWDontPropagate","","",N,N],[17,"CWColormap","","",N,N],[17,"CWCursor","","",N,N],[17,"InputOutput","","",N,N],[17,"InputOnly","","",N,N],[17,"XIMPreeditArea","","",N,N],[17,"XIMPreeditCallbacks","","",N,N],[17,"XIMPreeditPosition","","",N,N],[17,"XIMPreeditNothing","","",N,N],[17,"XIMPreeditNone","","",N,N],[17,"XIMStatusArea","","",N,N],[17,"XIMStatusCallbacks","","",N,N],[17,"XIMStatusNothing","","",N,N],[17,"XIMStatusNone","","",N,N],[17,"LSBFirst","","",N,N],[17,"MSBFirst","","",N,N],[17,"ParentRelative","","",N,N],[17,"CopyFromParent","","",N,N],[17,"PointerWindow","","",N,N],[17,"InputFocus","","",N,N],[17,"PointerRoot","","",N,N],[17,"AnyPropertyType","","",N,N],[17,"AnyKey","","",N,N],[17,"AnyButton","","",N,N],[17,"AllTemporary","","",N,N],[17,"CurrentTime","","",N,N],[17,"NoSymbol","","",N,N],[17,"X_PROTOCOL","","",N,N],[17,"X_PROTOCOL_REVISION","","",N,N],[17,"XNVaNestedList","","",N,N],[17,"XNQueryInputStyle","","",N,N],[17,"XNClientWindow","","",N,N],[17,"XNInputStyle","","",N,N],[17,"XNFocusWindow","","",N,N],[17,"XNResourceName","","",N,N],[17,"XNResourceClass","","",N,N],[17,"XNGeometryCallback","","",N,N],[17,"XNDestroyCallback","","",N,N],[17,"XNFilterEvents","","",N,N],[17,"XNPreeditStartCallback","","",N,N],[17,"XNPreeditDoneCallback","","",N,N],[17,"XNPreeditDrawCallback","","",N,N],[17,"XNPreeditCaretCallback","","",N,N],[17,"XNPreeditStateNotifyCallback","","",N,N],[17,"XNPreeditAttributes","","",N,N],[17,"XNStatusStartCallback","","",N,N],[17,"XNStatusDoneCallback","","",N,N],[17,"XNStatusDrawCallback","","",N,N],[17,"XNStatusAttributes","","",N,N],[17,"XNArea","","",N,N],[17,"XNAreaNeeded","","",N,N],[17,"XNSpotLocation","","",N,N],[17,"XNColormap","","",N,N],[17,"XNStdColormap","","",N,N],[17,"XNForeground","","",N,N],[17,"XNBackground","","",N,N],[17,"XNBackgroundPixmap","","",N,N],[17,"XNFontSet","","",N,N],[17,"XNLineSpace","","",N,N],[17,"XNCursor","","",N,N],[17,"XNVaNestedList_0","","",N,N],[17,"XNQueryInputStyle_0","","",N,N],[17,"XNClientWindow_0","","",N,N],[17,"XNInputStyle_0","","",N,N],[17,"XNFocusWindow_0","","",N,N],[17,"XNResourceName_0","","",N,N],[17,"XNResourceClass_0","","",N,N],[17,"XNGeometryCallback_0","","",N,N],[17,"XNDestroyCallback_0","","",N,N],[17,"XNFilterEvents_0","","",N,N],[17,"XNPreeditStartCallback_0","","",N,N],[17,"XNPreeditDoneCallback_0","","",N,N],[17,"XNPreeditDrawCallback_0","","",N,N],[17,"XNPreeditCaretCallback_0","","",N,N],[17,"XNPreeditStateNotifyCallback_0","","",N,N],[17,"XNPreeditAttributes_0","","",N,N],[17,"XNStatusStartCallback_0","","",N,N],[17,"XNStatusDoneCallback_0","","",N,N],[17,"XNStatusDrawCallback_0","","",N,N],[17,"XNStatusAttributes_0","","",N,N],[17,"XNArea_0","","",N,N],[17,"XNAreaNeeded_0","","",N,N],[17,"XNSpotLocation_0","","",N,N],[17,"XNColormap_0","","",N,N],[17,"XNStdColormap_0","","",N,N],[17,"XNForeground_0","","",N,N],[17,"XNBackground_0","","",N,N],[17,"XNBackgroundPixmap_0","","",N,N],[17,"XNFontSet_0","","",N,N],[17,"XNLineSpace_0","","",N,N],[17,"XNCursor_0","","",N,N],[17,"XNQueryIMValuesList","","",N,N],[17,"XNQueryICValuesList","","",N,N],[17,"XNVisiblePosition","","",N,N],[17,"XNR6PreeditCallback","","",N,N],[17,"XNStringConversionCallback","","",N,N],[17,"XNStringConversion","","",N,N],[17,"XNResetState","","",N,N],[17,"XNHotKey","","",N,N],[17,"XNHotKeyState","","",N,N],[17,"XNPreeditState","","",N,N],[17,"XNSeparatorofNestedList","","",N,N],[17,"XNQueryIMValuesList_0","","",N,N],[17,"XNQueryICValuesList_0","","",N,N],[17,"XNVisiblePosition_0","","",N,N],[17,"XNR6PreeditCallback_0","","",N,N],[17,"XNStringConversionCallback_0","","",N,N],[17,"XNStringConversion_0","","",N,N],[17,"XNResetState_0","","",N,N],[17,"XNHotKey_0","","",N,N],[17,"XNHotKeyState_0","","",N,N],[17,"XNPreeditState_0","","",N,N],[17,"XNSeparatorofNestedList_0","","",N,N],[17,"XBufferOverflow","","",N,N],[17,"XLookupNone","","",N,N],[17,"XLookupChars","","",N,N],[17,"XLookupKeySym","","",N,N],[17,"XLookupBoth","","",N,N],[17,"XkbActionMessageLength","","",N,N],[17,"XkbOD_Success","","",N,N],[17,"XkbOD_BadLibraryVersion","","",N,N],[17,"XkbOD_ConnectionRefused","","",N,N],[17,"XkbOD_NonXkbServer","","",N,N],[17,"XkbOD_BadServerVersion","","",N,N],[17,"XkbLC_ForceLatinLookup","","",N,N],[17,"XkbLC_ConsumeLookupMods","","",N,N],[17,"XkbLC_AlwaysConsumeShiftAndLock","","",N,N],[17,"XkbLC_IgnoreNewKeyboards","","",N,N],[17,"XkbLC_ControlFallback","","",N,N],[17,"XkbLC_ConsumeKeysOnComposeFail","","",N,N],[17,"XkbLC_ComposeLED","","",N,N],[17,"XkbLC_BeepOnComposeFail","","",N,N],[17,"XkbLC_AllComposeControls","","",N,N],[17,"XkbLC_AllControls","","",N,N],[17,"XkbNewKeyboardNotify","","",N,N],[17,"XkbMapNotify","","",N,N],[17,"XkbStateNotify","","",N,N],[17,"XkbControlsNotify","","",N,N],[17,"XkbIndicatorStateNotify","","",N,N],[17,"XkbIndicatorMapNotify","","",N,N],[17,"XkbNamesNotify","","",N,N],[17,"XkbCompatMapNotify","","",N,N],[17,"XkbBellNotify","","",N,N],[17,"XkbActionMessage","","",N,N],[17,"XkbAccessXNotify","","",N,N],[17,"XkbExtensionDeviceNotify","","",N,N],[17,"XkbNewKeyboardNotifyMask","","",N,N],[17,"XkbMapNotifyMask","","",N,N],[17,"XkbStateNotifyMask","","",N,N],[17,"XkbControlsNotifyMask","","",N,N],[17,"XkbIndicatorStateNotifyMask","","",N,N],[17,"XkbIndicatorMapNotifyMask","","",N,N],[17,"XkbNamesNotifyMask","","",N,N],[17,"XkbCompatMapNotifyMask","","",N,N],[17,"XkbBellNotifyMask","","",N,N],[17,"XkbActionMessageMask","","",N,N],[17,"XkbAccessXNotifyMask","","",N,N],[17,"XkbExtensionDeviceNotifyMask","","",N,N],[17,"XkbAllEventsMask","","",N,N],[17,"NoValue","","",N,N],[17,"XValue","","",N,N],[17,"YValue","","",N,N],[17,"WidthValue","","",N,N],[17,"HeightValue","","",N,N],[17,"AllValues","","",N,N],[17,"XNegative","","",N,N],[17,"YNegative","","",N,N],[17,"InputHint","","",N,N],[17,"StateHint","","",N,N],[17,"IconPixmapHint","","",N,N],[17,"IconWindowHint","","",N,N],[17,"IconPositionHint","","",N,N],[17,"IconMaskHint","","",N,N],[17,"WindowGroupHint","","",N,N],[17,"AllHints","","",N,N],[17,"XUrgencyHint","","",N,N],[17,"XStringStyle","","",N,N],[17,"XCompoundTextStyle","","",N,N],[17,"XTextStyle","","",N,N],[17,"XStdICCTextStyle","","",N,N],[17,"XUTF8StringStyle","","",N,N],[11,"open","","",2,[[],["result",["xlib","openerror"]]]],[11,"clone","","",99,[[["self"]],["xevent"]]],[11,"get_type","","",99,[[["self"]],["c_int"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"as_mut","","",99,[[["self"]],["xanyevent"]]],[11,"as_ref","","",99,[[["self"]],["xanyevent"]]],[11,"from","","",99,[[["xanyevent"]],["xevent"]]],[11,"from","","",99,[[["xanyevent"]],["xevent"]]],[11,"from","","",3,[[["xevent"]],["xanyevent"]]],[11,"from","","",3,[[["xevent"]],["xanyevent"]]],[11,"as_mut","","",99,[[["self"]],["xbuttonevent"]]],[11,"as_ref","","",99,[[["self"]],["xbuttonevent"]]],[11,"from","","",99,[[["xbuttonevent"]],["xevent"]]],[11,"from","","",99,[[["xbuttonevent"]],["xevent"]]],[11,"from","","",4,[[["xevent"]],["xbuttonevent"]]],[11,"from","","",4,[[["xevent"]],["xbuttonevent"]]],[11,"as_mut","","",99,[[["self"]],["xcirculateevent"]]],[11,"as_ref","","",99,[[["self"]],["xcirculateevent"]]],[11,"from","","",99,[[["xcirculateevent"]],["xevent"]]],[11,"from","","",99,[[["xcirculateevent"]],["xevent"]]],[11,"from","","",5,[[["xevent"]],["xcirculateevent"]]],[11,"from","","",5,[[["xevent"]],["xcirculateevent"]]],[11,"as_mut","","",99,[[["self"]],["xcirculaterequestevent"]]],[11,"as_ref","","",99,[[["self"]],["xcirculaterequestevent"]]],[11,"from","","",99,[[["xcirculaterequestevent"]],["xevent"]]],[11,"from","","",99,[[["xcirculaterequestevent"]],["xevent"]]],[11,"from","","",6,[[["xevent"]],["xcirculaterequestevent"]]],[11,"from","","",6,[[["xevent"]],["xcirculaterequestevent"]]],[11,"as_mut","","",99,[[["self"]],["xclientmessageevent"]]],[11,"as_ref","","",99,[[["self"]],["xclientmessageevent"]]],[11,"from","","",99,[[["xclientmessageevent"]],["xevent"]]],[11,"from","","",99,[[["xclientmessageevent"]],["xevent"]]],[11,"from","","",7,[[["xevent"]],["xclientmessageevent"]]],[11,"from","","",7,[[["xevent"]],["xclientmessageevent"]]],[11,"as_mut","","",99,[[["self"]],["xcolormapevent"]]],[11,"as_ref","","",99,[[["self"]],["xcolormapevent"]]],[11,"from","","",99,[[["xcolormapevent"]],["xevent"]]],[11,"from","","",99,[[["xcolormapevent"]],["xevent"]]],[11,"from","","",8,[[["xevent"]],["xcolormapevent"]]],[11,"from","","",8,[[["xevent"]],["xcolormapevent"]]],[11,"as_mut","","",99,[[["self"]],["xconfigureevent"]]],[11,"as_ref","","",99,[[["self"]],["xconfigureevent"]]],[11,"from","","",99,[[["xconfigureevent"]],["xevent"]]],[11,"from","","",99,[[["xconfigureevent"]],["xevent"]]],[11,"from","","",9,[[["xevent"]],["xconfigureevent"]]],[11,"from","","",9,[[["xevent"]],["xconfigureevent"]]],[11,"as_mut","","",99,[[["self"]],["xconfigurerequestevent"]]],[11,"as_ref","","",99,[[["self"]],["xconfigurerequestevent"]]],[11,"from","","",99,[[["xconfigurerequestevent"]],["xevent"]]],[11,"from","","",99,[[["xconfigurerequestevent"]],["xevent"]]],[11,"from","","",10,[[["xevent"]],["xconfigurerequestevent"]]],[11,"from","","",10,[[["xevent"]],["xconfigurerequestevent"]]],[11,"as_mut","","",99,[[["self"]],["xcreatewindowevent"]]],[11,"as_ref","","",99,[[["self"]],["xcreatewindowevent"]]],[11,"from","","",99,[[["xcreatewindowevent"]],["xevent"]]],[11,"from","","",99,[[["xcreatewindowevent"]],["xevent"]]],[11,"from","","",11,[[["xevent"]],["xcreatewindowevent"]]],[11,"from","","",11,[[["xevent"]],["xcreatewindowevent"]]],[11,"as_mut","","",99,[[["self"]],["xcrossingevent"]]],[11,"as_ref","","",99,[[["self"]],["xcrossingevent"]]],[11,"from","","",99,[[["xcrossingevent"]],["xevent"]]],[11,"from","","",99,[[["xcrossingevent"]],["xevent"]]],[11,"from","","",12,[[["xevent"]],["xcrossingevent"]]],[11,"from","","",12,[[["xevent"]],["xcrossingevent"]]],[11,"as_mut","","",99,[[["self"]],["xdestroywindowevent"]]],[11,"as_ref","","",99,[[["self"]],["xdestroywindowevent"]]],[11,"from","","",99,[[["xdestroywindowevent"]],["xevent"]]],[11,"from","","",99,[[["xdestroywindowevent"]],["xevent"]]],[11,"from","","",13,[[["xevent"]],["xdestroywindowevent"]]],[11,"from","","",13,[[["xevent"]],["xdestroywindowevent"]]],[11,"as_mut","","",99,[[["self"]],["xerrorevent"]]],[11,"as_ref","","",99,[[["self"]],["xerrorevent"]]],[11,"from","","",99,[[["xerrorevent"]],["xevent"]]],[11,"from","","",99,[[["xerrorevent"]],["xevent"]]],[11,"from","","",14,[[["xevent"]],["xerrorevent"]]],[11,"from","","",14,[[["xevent"]],["xerrorevent"]]],[11,"as_mut","","",99,[[["self"]],["xexposeevent"]]],[11,"as_ref","","",99,[[["self"]],["xexposeevent"]]],[11,"from","","",99,[[["xexposeevent"]],["xevent"]]],[11,"from","","",99,[[["xexposeevent"]],["xevent"]]],[11,"from","","",15,[[["xevent"]],["xexposeevent"]]],[11,"from","","",15,[[["xevent"]],["xexposeevent"]]],[11,"as_mut","","",99,[[["self"]],["xfocuschangeevent"]]],[11,"as_ref","","",99,[[["self"]],["xfocuschangeevent"]]],[11,"from","","",99,[[["xfocuschangeevent"]],["xevent"]]],[11,"from","","",99,[[["xfocuschangeevent"]],["xevent"]]],[11,"from","","",16,[[["xevent"]],["xfocuschangeevent"]]],[11,"from","","",16,[[["xevent"]],["xfocuschangeevent"]]],[11,"as_mut","","",99,[[["self"]],["xgenericeventcookie"]]],[11,"as_ref","","",99,[[["self"]],["xgenericeventcookie"]]],[11,"from","","",99,[[["xgenericeventcookie"]],["xevent"]]],[11,"from","","",99,[[["xgenericeventcookie"]],["xevent"]]],[11,"from","","",68,[[["xevent"]],["xgenericeventcookie"]]],[11,"from","","",68,[[["xevent"]],["xgenericeventcookie"]]],[11,"as_mut","","",99,[[["self"]],["xgraphicsexposeevent"]]],[11,"as_ref","","",99,[[["self"]],["xgraphicsexposeevent"]]],[11,"from","","",99,[[["xgraphicsexposeevent"]],["xevent"]]],[11,"from","","",99,[[["xgraphicsexposeevent"]],["xevent"]]],[11,"from","","",17,[[["xevent"]],["xgraphicsexposeevent"]]],[11,"from","","",17,[[["xevent"]],["xgraphicsexposeevent"]]],[11,"as_mut","","",99,[[["self"]],["xgravityevent"]]],[11,"as_ref","","",99,[[["self"]],["xgravityevent"]]],[11,"from","","",99,[[["xgravityevent"]],["xevent"]]],[11,"from","","",99,[[["xgravityevent"]],["xevent"]]],[11,"from","","",18,[[["xevent"]],["xgravityevent"]]],[11,"from","","",18,[[["xevent"]],["xgravityevent"]]],[11,"as_mut","","",99,[[["self"]],["xkeyevent"]]],[11,"as_ref","","",99,[[["self"]],["xkeyevent"]]],[11,"from","","",99,[[["xkeyevent"]],["xevent"]]],[11,"from","","",99,[[["xkeyevent"]],["xevent"]]],[11,"from","","",19,[[["xevent"]],["xkeyevent"]]],[11,"from","","",19,[[["xevent"]],["xkeyevent"]]],[11,"as_mut","","",99,[[["self"]],["xkeymapevent"]]],[11,"as_ref","","",99,[[["self"]],["xkeymapevent"]]],[11,"from","","",99,[[["xkeymapevent"]],["xevent"]]],[11,"from","","",99,[[["xkeymapevent"]],["xevent"]]],[11,"from","","",20,[[["xevent"]],["xkeymapevent"]]],[11,"from","","",20,[[["xevent"]],["xkeymapevent"]]],[11,"as_mut","","",99,[[["self"]],["xmapevent"]]],[11,"as_ref","","",99,[[["self"]],["xmapevent"]]],[11,"from","","",99,[[["xmapevent"]],["xevent"]]],[11,"from","","",99,[[["xmapevent"]],["xevent"]]],[11,"from","","",21,[[["xevent"]],["xmapevent"]]],[11,"from","","",21,[[["xevent"]],["xmapevent"]]],[11,"as_mut","","",99,[[["self"]],["xmappingevent"]]],[11,"as_ref","","",99,[[["self"]],["xmappingevent"]]],[11,"from","","",99,[[["xmappingevent"]],["xevent"]]],[11,"from","","",99,[[["xmappingevent"]],["xevent"]]],[11,"from","","",22,[[["xevent"]],["xmappingevent"]]],[11,"from","","",22,[[["xevent"]],["xmappingevent"]]],[11,"as_mut","","",99,[[["self"]],["xmaprequestevent"]]],[11,"as_ref","","",99,[[["self"]],["xmaprequestevent"]]],[11,"from","","",99,[[["xmaprequestevent"]],["xevent"]]],[11,"from","","",99,[[["xmaprequestevent"]],["xevent"]]],[11,"from","","",23,[[["xevent"]],["xmaprequestevent"]]],[11,"from","","",23,[[["xevent"]],["xmaprequestevent"]]],[11,"as_mut","","",99,[[["self"]],["xmotionevent"]]],[11,"as_ref","","",99,[[["self"]],["xmotionevent"]]],[11,"from","","",99,[[["xmotionevent"]],["xevent"]]],[11,"from","","",99,[[["xmotionevent"]],["xevent"]]],[11,"from","","",24,[[["xevent"]],["xmotionevent"]]],[11,"from","","",24,[[["xevent"]],["xmotionevent"]]],[11,"as_mut","","",99,[[["self"]],["xnoexposeevent"]]],[11,"as_ref","","",99,[[["self"]],["xnoexposeevent"]]],[11,"from","","",99,[[["xnoexposeevent"]],["xevent"]]],[11,"from","","",99,[[["xnoexposeevent"]],["xevent"]]],[11,"from","","",25,[[["xevent"]],["xnoexposeevent"]]],[11,"from","","",25,[[["xevent"]],["xnoexposeevent"]]],[11,"as_mut","","",99,[[["self"]],["xpropertyevent"]]],[11,"as_ref","","",99,[[["self"]],["xpropertyevent"]]],[11,"from","","",99,[[["xpropertyevent"]],["xevent"]]],[11,"from","","",99,[[["xpropertyevent"]],["xevent"]]],[11,"from","","",26,[[["xevent"]],["xpropertyevent"]]],[11,"from","","",26,[[["xevent"]],["xpropertyevent"]]],[11,"as_mut","","",99,[[["self"]],["xreparentevent"]]],[11,"as_ref","","",99,[[["self"]],["xreparentevent"]]],[11,"from","","",99,[[["xreparentevent"]],["xevent"]]],[11,"from","","",99,[[["xreparentevent"]],["xevent"]]],[11,"from","","",27,[[["xevent"]],["xreparentevent"]]],[11,"from","","",27,[[["xevent"]],["xreparentevent"]]],[11,"as_mut","","",99,[[["self"]],["xresizerequestevent"]]],[11,"as_ref","","",99,[[["self"]],["xresizerequestevent"]]],[11,"from","","",99,[[["xresizerequestevent"]],["xevent"]]],[11,"from","","",99,[[["xresizerequestevent"]],["xevent"]]],[11,"from","","",28,[[["xevent"]],["xresizerequestevent"]]],[11,"from","","",28,[[["xevent"]],["xresizerequestevent"]]],[11,"as_mut","","",99,[[["self"]],["xselectionclearevent"]]],[11,"as_ref","","",99,[[["self"]],["xselectionclearevent"]]],[11,"from","","",99,[[["xselectionclearevent"]],["xevent"]]],[11,"from","","",99,[[["xselectionclearevent"]],["xevent"]]],[11,"from","","",29,[[["xevent"]],["xselectionclearevent"]]],[11,"from","","",29,[[["xevent"]],["xselectionclearevent"]]],[11,"as_mut","","",99,[[["self"]],["xselectionevent"]]],[11,"as_ref","","",99,[[["self"]],["xselectionevent"]]],[11,"from","","",99,[[["xselectionevent"]],["xevent"]]],[11,"from","","",99,[[["xselectionevent"]],["xevent"]]],[11,"from","","",30,[[["xevent"]],["xselectionevent"]]],[11,"from","","",30,[[["xevent"]],["xselectionevent"]]],[11,"as_mut","","",99,[[["self"]],["xselectionrequestevent"]]],[11,"as_ref","","",99,[[["self"]],["xselectionrequestevent"]]],[11,"from","","",99,[[["xselectionrequestevent"]],["xevent"]]],[11,"from","","",99,[[["xselectionrequestevent"]],["xevent"]]],[11,"from","","",31,[[["xevent"]],["xselectionrequestevent"]]],[11,"from","","",31,[[["xevent"]],["xselectionrequestevent"]]],[11,"as_mut","","",99,[[["self"]],["xunmapevent"]]],[11,"as_ref","","",99,[[["self"]],["xunmapevent"]]],[11,"from","","",99,[[["xunmapevent"]],["xevent"]]],[11,"from","","",99,[[["xunmapevent"]],["xevent"]]],[11,"from","","",32,[[["xevent"]],["xunmapevent"]]],[11,"from","","",32,[[["xevent"]],["xunmapevent"]]],[11,"as_mut","","",99,[[["self"]],["xvisibilityevent"]]],[11,"as_ref","","",99,[[["self"]],["xvisibilityevent"]]],[11,"from","","",99,[[["xvisibilityevent"]],["xevent"]]],[11,"from","","",99,[[["xvisibilityevent"]],["xevent"]]],[11,"from","","",33,[[["xevent"]],["xvisibilityevent"]]],[11,"from","","",33,[[["xevent"]],["xvisibilityevent"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["xanyevent"]]],[11,"eq","","",3,[[["self"],["xanyevent"]],["bool"]]],[11,"ne","","",3,[[["self"],["xanyevent"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["xbuttonevent"]]],[11,"eq","","",4,[[["self"],["xbuttonevent"]],["bool"]]],[11,"ne","","",4,[[["self"],["xbuttonevent"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["xcirculateevent"]]],[11,"eq","","",5,[[["self"],["xcirculateevent"]],["bool"]]],[11,"ne","","",5,[[["self"],["xcirculateevent"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["xcirculaterequestevent"]]],[11,"eq","","",6,[[["self"],["xcirculaterequestevent"]],["bool"]]],[11,"ne","","",6,[[["self"],["xcirculaterequestevent"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["xclientmessageevent"]]],[11,"eq","","",7,[[["self"],["xclientmessageevent"]],["bool"]]],[11,"ne","","",7,[[["self"],["xclientmessageevent"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["xcolormapevent"]]],[11,"eq","","",8,[[["self"],["xcolormapevent"]],["bool"]]],[11,"ne","","",8,[[["self"],["xcolormapevent"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["xconfigureevent"]]],[11,"eq","","",9,[[["self"],["xconfigureevent"]],["bool"]]],[11,"ne","","",9,[[["self"],["xconfigureevent"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["xconfigurerequestevent"]]],[11,"eq","","",10,[[["self"],["xconfigurerequestevent"]],["bool"]]],[11,"ne","","",10,[[["self"],["xconfigurerequestevent"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["xcreatewindowevent"]]],[11,"eq","","",11,[[["self"],["xcreatewindowevent"]],["bool"]]],[11,"ne","","",11,[[["self"],["xcreatewindowevent"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["xcrossingevent"]]],[11,"eq","","",12,[[["self"],["xcrossingevent"]],["bool"]]],[11,"ne","","",12,[[["self"],["xcrossingevent"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["xdestroywindowevent"]]],[11,"eq","","",13,[[["self"],["xdestroywindowevent"]],["bool"]]],[11,"ne","","",13,[[["self"],["xdestroywindowevent"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["xerrorevent"]]],[11,"eq","","",14,[[["self"],["xerrorevent"]],["bool"]]],[11,"ne","","",14,[[["self"],["xerrorevent"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["xexposeevent"]]],[11,"eq","","",15,[[["self"],["xexposeevent"]],["bool"]]],[11,"ne","","",15,[[["self"],["xexposeevent"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["xfocuschangeevent"]]],[11,"eq","","",16,[[["self"],["xfocuschangeevent"]],["bool"]]],[11,"ne","","",16,[[["self"],["xfocuschangeevent"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["xgraphicsexposeevent"]]],[11,"eq","","",17,[[["self"],["xgraphicsexposeevent"]],["bool"]]],[11,"ne","","",17,[[["self"],["xgraphicsexposeevent"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["xgravityevent"]]],[11,"eq","","",18,[[["self"],["xgravityevent"]],["bool"]]],[11,"ne","","",18,[[["self"],["xgravityevent"]],["bool"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["xkeyevent"]]],[11,"eq","","",19,[[["self"],["xkeyevent"]],["bool"]]],[11,"ne","","",19,[[["self"],["xkeyevent"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["xkeymapevent"]]],[11,"eq","","",20,[[["self"],["xkeymapevent"]],["bool"]]],[11,"ne","","",20,[[["self"],["xkeymapevent"]],["bool"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["xmapevent"]]],[11,"eq","","",21,[[["self"],["xmapevent"]],["bool"]]],[11,"ne","","",21,[[["self"],["xmapevent"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["xmappingevent"]]],[11,"eq","","",22,[[["self"],["xmappingevent"]],["bool"]]],[11,"ne","","",22,[[["self"],["xmappingevent"]],["bool"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["xmaprequestevent"]]],[11,"eq","","",23,[[["self"],["xmaprequestevent"]],["bool"]]],[11,"ne","","",23,[[["self"],["xmaprequestevent"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["xmotionevent"]]],[11,"eq","","",24,[[["self"],["xmotionevent"]],["bool"]]],[11,"ne","","",24,[[["self"],["xmotionevent"]],["bool"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["xnoexposeevent"]]],[11,"eq","","",25,[[["self"],["xnoexposeevent"]],["bool"]]],[11,"ne","","",25,[[["self"],["xnoexposeevent"]],["bool"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["xpropertyevent"]]],[11,"eq","","",26,[[["self"],["xpropertyevent"]],["bool"]]],[11,"ne","","",26,[[["self"],["xpropertyevent"]],["bool"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["xreparentevent"]]],[11,"eq","","",27,[[["self"],["xreparentevent"]],["bool"]]],[11,"ne","","",27,[[["self"],["xreparentevent"]],["bool"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["xresizerequestevent"]]],[11,"eq","","",28,[[["self"],["xresizerequestevent"]],["bool"]]],[11,"ne","","",28,[[["self"],["xresizerequestevent"]],["bool"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["xselectionclearevent"]]],[11,"eq","","",29,[[["self"],["xselectionclearevent"]],["bool"]]],[11,"ne","","",29,[[["self"],["xselectionclearevent"]],["bool"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["xselectionevent"]]],[11,"eq","","",30,[[["self"],["xselectionevent"]],["bool"]]],[11,"ne","","",30,[[["self"],["xselectionevent"]],["bool"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["xselectionrequestevent"]]],[11,"eq","","",31,[[["self"],["xselectionrequestevent"]],["bool"]]],[11,"ne","","",31,[[["self"],["xselectionrequestevent"]],["bool"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["xunmapevent"]]],[11,"eq","","",32,[[["self"],["xunmapevent"]],["bool"]]],[11,"ne","","",32,[[["self"],["xunmapevent"]],["bool"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["xvisibilityevent"]]],[11,"eq","","",33,[[["self"],["xvisibilityevent"]],["bool"]]],[11,"ne","","",33,[[["self"],["xvisibilityevent"]],["bool"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["_xkbdesc"]]],[11,"eq","","",35,[[["self"],["_xkbdesc"]],["bool"]]],[11,"ne","","",35,[[["self"],["_xkbdesc"]],["bool"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["_xkbkeyaliasrec"]]],[11,"eq","","",37,[[["self"],["_xkbkeyaliasrec"]],["bool"]]],[11,"ne","","",37,[[["self"],["_xkbkeyaliasrec"]],["bool"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["_xkbkeynamerec"]]],[11,"eq","","",38,[[["self"],["_xkbkeynamerec"]],["bool"]]],[11,"ne","","",38,[[["self"],["_xkbkeynamerec"]],["bool"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["_xkbnamesrec"]]],[11,"eq","","",39,[[["self"],["_xkbnamesrec"]],["bool"]]],[11,"ne","","",39,[[["self"],["_xkbnamesrec"]],["bool"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["xkbanyevent"]]],[11,"eq","","",40,[[["self"],["xkbanyevent"]],["bool"]]],[11,"ne","","",40,[[["self"],["xkbanyevent"]],["bool"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["xkbnewkeyboardnotifyevent"]]],[11,"eq","","",41,[[["self"],["xkbnewkeyboardnotifyevent"]],["bool"]]],[11,"ne","","",41,[[["self"],["xkbnewkeyboardnotifyevent"]],["bool"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["_xkbmapnotifyevent"]]],[11,"eq","","",42,[[["self"],["_xkbmapnotifyevent"]],["bool"]]],[11,"ne","","",42,[[["self"],["_xkbmapnotifyevent"]],["bool"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["xkbstatenotifyevent"]]],[11,"eq","","",43,[[["self"],["xkbstatenotifyevent"]],["bool"]]],[11,"ne","","",43,[[["self"],["xkbstatenotifyevent"]],["bool"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["_xkbcontrolsnotifyevent"]]],[11,"eq","","",44,[[["self"],["_xkbcontrolsnotifyevent"]],["bool"]]],[11,"ne","","",44,[[["self"],["_xkbcontrolsnotifyevent"]],["bool"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["xkbindicatornotifyevent"]]],[11,"eq","","",45,[[["self"],["xkbindicatornotifyevent"]],["bool"]]],[11,"ne","","",45,[[["self"],["xkbindicatornotifyevent"]],["bool"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["_xkbnamesnotifyevent"]]],[11,"eq","","",46,[[["self"],["_xkbnamesnotifyevent"]],["bool"]]],[11,"ne","","",46,[[["self"],["_xkbnamesnotifyevent"]],["bool"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["xkbcompatmapnotifyevent"]]],[11,"eq","","",47,[[["self"],["xkbcompatmapnotifyevent"]],["bool"]]],[11,"ne","","",47,[[["self"],["xkbcompatmapnotifyevent"]],["bool"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["xkbbellnotifyevent"]]],[11,"eq","","",48,[[["self"],["xkbbellnotifyevent"]],["bool"]]],[11,"ne","","",48,[[["self"],["xkbbellnotifyevent"]],["bool"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["xkbactionmessageevent"]]],[11,"eq","","",49,[[["self"],["xkbactionmessageevent"]],["bool"]]],[11,"ne","","",49,[[["self"],["xkbactionmessageevent"]],["bool"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["xkbaccessxnotifyevent"]]],[11,"eq","","",50,[[["self"],["xkbaccessxnotifyevent"]],["bool"]]],[11,"ne","","",50,[[["self"],["xkbaccessxnotifyevent"]],["bool"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["_xkbextensiondevicenotifyevent"]]],[11,"eq","","",51,[[["self"],["_xkbextensiondevicenotifyevent"]],["bool"]]],[11,"ne","","",51,[[["self"],["_xkbextensiondevicenotifyevent"]],["bool"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"clone","","",100,[[["self"]],["xkbevent"]]],[11,"eq","","",100,[[["self"],["xkbevent"]],["bool"]]],[11,"ne","","",100,[[["self"],["xkbevent"]],["bool"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",52,[[["self"]],["depth"]]],[11,"eq","","",52,[[["self"],["depth"]],["bool"]]],[11,"ne","","",52,[[["self"],["depth"]],["bool"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["screen"]]],[11,"eq","","",53,[[["self"],["screen"]],["bool"]]],[11,"ne","","",53,[[["self"],["screen"]],["bool"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"clone","","",54,[[["self"]],["screenformat"]]],[11,"eq","","",54,[[["self"],["screenformat"]],["bool"]]],[11,"ne","","",54,[[["self"],["screenformat"]],["bool"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"clone","","",55,[[["self"]],["visual"]]],[11,"eq","","",55,[[["self"],["visual"]],["bool"]]],[11,"ne","","",55,[[["self"],["visual"]],["bool"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",56,[[["self"]],["xarc"]]],[11,"eq","","",56,[[["self"],["xarc"]],["bool"]]],[11,"ne","","",56,[[["self"],["xarc"]],["bool"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"clone","","",57,[[["self"]],["xchar2b"]]],[11,"eq","","",57,[[["self"],["xchar2b"]],["bool"]]],[11,"ne","","",57,[[["self"],["xchar2b"]],["bool"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"clone","","",58,[[["self"]],["xcharstruct"]]],[11,"eq","","",58,[[["self"],["xcharstruct"]],["bool"]]],[11,"ne","","",58,[[["self"],["xcharstruct"]],["bool"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"clone","","",59,[[["self"]],["xclasshint"]]],[11,"eq","","",59,[[["self"],["xclasshint"]],["bool"]]],[11,"ne","","",59,[[["self"],["xclasshint"]],["bool"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"clone","","",60,[[["self"]],["xcolor"]]],[11,"eq","","",60,[[["self"],["xcolor"]],["bool"]]],[11,"ne","","",60,[[["self"],["xcolor"]],["bool"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"clone","","",61,[[["self"]],["xcomposestatus"]]],[11,"eq","","",61,[[["self"],["xcomposestatus"]],["bool"]]],[11,"ne","","",61,[[["self"],["xcomposestatus"]],["bool"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"clone","","",62,[[["self"]],["xextcodes"]]],[11,"eq","","",62,[[["self"],["xextcodes"]],["bool"]]],[11,"ne","","",62,[[["self"],["xextcodes"]],["bool"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"clone","","",64,[[["self"]],["xfontprop"]]],[11,"eq","","",64,[[["self"],["xfontprop"]],["bool"]]],[11,"ne","","",64,[[["self"],["xfontprop"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["xfontsetextents"]]],[11,"eq","","",65,[[["self"],["xfontsetextents"]],["bool"]]],[11,"ne","","",65,[[["self"],["xfontsetextents"]],["bool"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"clone","","",66,[[["self"]],["xfontstruct"]]],[11,"eq","","",66,[[["self"],["xfontstruct"]],["bool"]]],[11,"ne","","",66,[[["self"],["xfontstruct"]],["bool"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["xgcvalues"]]],[11,"eq","","",67,[[["self"],["xgcvalues"]],["bool"]]],[11,"ne","","",67,[[["self"],["xgcvalues"]],["bool"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["xgenericeventcookie"]]],[11,"eq","","",68,[[["self"],["xgenericeventcookie"]],["bool"]]],[11,"ne","","",68,[[["self"],["xgenericeventcookie"]],["bool"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"clone","","",69,[[["self"]],["xhostaddress"]]],[11,"eq","","",69,[[["self"],["xhostaddress"]],["bool"]]],[11,"ne","","",69,[[["self"],["xhostaddress"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["xiconsize"]]],[11,"eq","","",70,[[["self"],["xiconsize"]],["bool"]]],[11,"ne","","",70,[[["self"],["xiconsize"]],["bool"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",71,[[["self"]],["ximage"]]],[11,"eq","","",71,[[["self"],["ximage"]],["bool"]]],[11,"ne","","",71,[[["self"],["ximage"]],["bool"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["xkeyboardcontrol"]]],[11,"eq","","",72,[[["self"],["xkeyboardcontrol"]],["bool"]]],[11,"ne","","",72,[[["self"],["xkeyboardcontrol"]],["bool"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"clone","","",73,[[["self"]],["xkeyboardstate"]]],[11,"eq","","",73,[[["self"],["xkeyboardstate"]],["bool"]]],[11,"ne","","",73,[[["self"],["xkeyboardstate"]],["bool"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"clone","","",74,[[["self"]],["xmbtextitem"]]],[11,"eq","","",74,[[["self"],["xmbtextitem"]],["bool"]]],[11,"ne","","",74,[[["self"],["xmbtextitem"]],["bool"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"clone","","",75,[[["self"]],["xmodifierkeymap"]]],[11,"eq","","",75,[[["self"],["xmodifierkeymap"]],["bool"]]],[11,"ne","","",75,[[["self"],["xmodifierkeymap"]],["bool"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"clone","","",76,[[["self"]],["xomcharsetlist"]]],[11,"eq","","",76,[[["self"],["xomcharsetlist"]],["bool"]]],[11,"ne","","",76,[[["self"],["xomcharsetlist"]],["bool"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["xpixmapformatvalues"]]],[11,"eq","","",77,[[["self"],["xpixmapformatvalues"]],["bool"]]],[11,"ne","","",77,[[["self"],["xpixmapformatvalues"]],["bool"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["xpoint"]]],[11,"eq","","",78,[[["self"],["xpoint"]],["bool"]]],[11,"ne","","",78,[[["self"],["xpoint"]],["bool"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"clone","","",79,[[["self"]],["xrectangle"]]],[11,"eq","","",79,[[["self"],["xrectangle"]],["bool"]]],[11,"ne","","",79,[[["self"],["xrectangle"]],["bool"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"clone","","",80,[[["self"]],["xrmoptiondescrec"]]],[11,"eq","","",80,[[["self"],["xrmoptiondescrec"]],["bool"]]],[11,"ne","","",80,[[["self"],["xrmoptiondescrec"]],["bool"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"clone","","",81,[[["self"]],["xrmvalue"]]],[11,"eq","","",81,[[["self"],["xrmvalue"]],["bool"]]],[11,"ne","","",81,[[["self"],["xrmvalue"]],["bool"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"clone","","",82,[[["self"]],["xsegment"]]],[11,"eq","","",82,[[["self"],["xsegment"]],["bool"]]],[11,"ne","","",82,[[["self"],["xsegment"]],["bool"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"clone","","",83,[[["self"]],["xsetwindowattributes"]]],[11,"eq","","",83,[[["self"],["xsetwindowattributes"]],["bool"]]],[11,"ne","","",83,[[["self"],["xsetwindowattributes"]],["bool"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",84,[[["self"]],["xsizehints"]]],[11,"eq","","",84,[[["self"],["xsizehints"]],["bool"]]],[11,"ne","","",84,[[["self"],["xsizehints"]],["bool"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["xstandardcolormap"]]],[11,"eq","","",85,[[["self"],["xstandardcolormap"]],["bool"]]],[11,"ne","","",85,[[["self"],["xstandardcolormap"]],["bool"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",86,[[["self"]],["xtextitem"]]],[11,"eq","","",86,[[["self"],["xtextitem"]],["bool"]]],[11,"ne","","",86,[[["self"],["xtextitem"]],["bool"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",87,[[["self"]],["xtextitem16"]]],[11,"eq","","",87,[[["self"],["xtextitem16"]],["bool"]]],[11,"ne","","",87,[[["self"],["xtextitem16"]],["bool"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["xtextproperty"]]],[11,"eq","","",88,[[["self"],["xtextproperty"]],["bool"]]],[11,"ne","","",88,[[["self"],["xtextproperty"]],["bool"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["xtimecoord"]]],[11,"eq","","",89,[[["self"],["xtimecoord"]],["bool"]]],[11,"ne","","",89,[[["self"],["xtimecoord"]],["bool"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"clone","","",90,[[["self"]],["xvisualinfo"]]],[11,"eq","","",90,[[["self"],["xvisualinfo"]],["bool"]]],[11,"ne","","",90,[[["self"],["xvisualinfo"]],["bool"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"clone","","",91,[[["self"]],["xwctextitem"]]],[11,"eq","","",91,[[["self"],["xwctextitem"]],["bool"]]],[11,"ne","","",91,[[["self"],["xwctextitem"]],["bool"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"clone","","",92,[[["self"]],["xwindowattributes"]]],[11,"eq","","",92,[[["self"],["xwindowattributes"]],["bool"]]],[11,"ne","","",92,[[["self"],["xwindowattributes"]],["bool"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["xwindowchanges"]]],[11,"eq","","",93,[[["self"],["xwindowchanges"]],["bool"]]],[11,"ne","","",93,[[["self"],["xwindowchanges"]],["bool"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",94,[[["self"]],["xwmhints"]]],[11,"eq","","",94,[[["self"],["xwmhints"]],["bool"]]],[11,"ne","","",94,[[["self"],["xwmhints"]],["bool"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"clone","","",97,[[["self"]],["aspectratio"]]],[11,"eq","","",97,[[["self"],["aspectratio"]],["bool"]]],[11,"ne","","",97,[[["self"],["aspectratio"]],["bool"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"clone","","",101,[[["self"]],["clientmessagedata"]]],[11,"default","","",101,[[],["clientmessagedata"]]],[11,"eq","","",101,[[["self"],["clientmessagedata"]],["bool"]]],[11,"ne","","",101,[[["self"],["clientmessagedata"]],["bool"]]],[11,"as_bytes","","",101,N],[11,"as_bytes_mut","","",101,N],[11,"as_longs","","",101,N],[11,"as_longs_mut","","",101,N],[11,"as_shorts","","",101,N],[11,"as_shorts_mut","","",101,N],[11,"get_byte","","",101,[[["self"],["usize"]],["c_char"]]],[11,"get_long","","",101,[[["self"],["usize"]],["c_long"]]],[11,"get_short","","",101,[[["self"],["usize"]],["c_short"]]],[11,"new","","",101,[[],["clientmessagedata"]]],[11,"set_byte","","",101,[[["self"],["usize"],["c_char"]]]],[11,"set_long","","",101,[[["self"],["usize"],["c_long"]]]],[11,"set_short","","",101,[[["self"],["usize"],["c_short"]]]],[11,"as_mut","","",101,N],[11,"as_ref","","",101,N],[11,"from","","",101,N],[11,"as_mut","","",101,N],[11,"as_ref","","",101,N],[11,"from","","",101,N],[11,"as_mut","","",101,N],[11,"as_ref","","",101,N],[11,"from","","",101,N],[11,"as_mut","","",101,N],[11,"as_ref","","",101,N],[11,"from","","",101,N],[11,"as_mut","","",101,N],[11,"as_ref","","",101,N],[11,"from","","",101,N],[11,"as_mut","","",101,N],[11,"as_ref","","",101,N],[11,"from","","",101,N],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"clone","","",98,[[["self"]],["imagefns"]]],[11,"eq","","",98,[[["self"],["imagefns"]],["bool"]]],[0,"dpms","x11_dl","",N,N],[3,"Xext","x11_dl::dpms","",N,N],[12,"DPMSQueryExtension","","",102,N],[12,"DPMSGetVersion","","",102,N],[12,"DPMSCapable","","",102,N],[12,"DPMSSetTimeouts","","",102,N],[12,"DPMSGetTimeouts","","",102,N],[12,"DPMSEnable","","",102,N],[12,"DPMSDisable","","",102,N],[12,"DPMSForceLevel","","",102,N],[12,"DPMSInfo","","",102,N],[17,"DPMSMajorVersion","","",N,N],[17,"DPMSMinorVersion","","",N,N],[17,"DPMSExtensionName","","",N,N],[17,"DPMSModeOn","","",N,N],[17,"DPMSModeStandby","","",N,N],[17,"DPMSModeSuspend","","",N,N],[17,"DPMSModeOff","","",N,N],[11,"open","","",102,[[],["result",["xext","openerror"]]]],[0,"glx","x11_dl","",N,N],[3,"Glx","x11_dl::glx","",N,N],[12,"glXChooseFBConfig","","",103,N],[12,"glXChooseVisual","","",103,N],[12,"glXCopyContext","","",103,N],[12,"glXCreateContext","","",103,N],[12,"glXCreateGLXPixmap","","",103,N],[12,"glXCreateNewContext","","",103,N],[12,"glXCreatePbuffer","","",103,N],[12,"glXCreatePixmap","","",103,N],[12,"glXCreateWindow","","",103,N],[12,"glXDestroyContext","","",103,N],[12,"glXDestroyGLXPixmap","","",103,N],[12,"glXDestroyPbuffer","","",103,N],[12,"glXDestroyPixmap","","",103,N],[12,"glXDestroyWindow","","",103,N],[12,"glXGetClientString","","",103,N],[12,"glXGetConfig","","",103,N],[12,"glXGetCurrentContext","","",103,N],[12,"glXGetCurrentDisplay","","",103,N],[12,"glXGetCurrentDrawable","","",103,N],[12,"glXGetCurrentReadDrawable","","",103,N],[12,"glXGetFBConfigAttrib","","",103,N],[12,"glXGetFBConfigs","","",103,N],[12,"glXGetProcAddress","","",103,N],[12,"glXGetProcAddressARB","","",103,N],[12,"glXGetSelectedEvent","","",103,N],[12,"glXGetVisualFromFBConfig","","",103,N],[12,"glXIsDirect","","",103,N],[12,"glXMakeContextCurrent","","",103,N],[12,"glXMakeCurrent","","",103,N],[12,"glXQueryContext","","",103,N],[12,"glXQueryDrawable","","",103,N],[12,"glXQueryExtension","","",103,N],[12,"glXQueryExtensionsString","","",103,N],[12,"glXQueryServerString","","",103,N],[12,"glXQueryVersion","","",103,N],[12,"glXSelectEvent","","",103,N],[12,"glXSwapBuffers","","",103,N],[12,"glXUseXFont","","",103,N],[12,"glXWaitGL","","",103,N],[12,"glXWaitX","","",103,N],[3,"__GLXcontextRec","","",N,N],[3,"__GLXFBConfigRec","","",N,N],[0,"arb","","",N,N],[17,"GLX_CONTEXT_MAJOR_VERSION_ARB","x11_dl::glx::arb","",N,N],[17,"GLX_CONTEXT_MINOR_VERSION_ARB","","",N,N],[17,"GLX_CONTEXT_FLAGS_ARB","","",N,N],[17,"GLX_CONTEXT_PROFILE_MASK_ARB","","",N,N],[17,"GLX_CONTEXT_DEBUG_BIT_ARB","","",N,N],[17,"GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB","","",N,N],[17,"GLX_CONTEXT_CORE_PROFILE_BIT_ARB","","",N,N],[17,"GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB","","",N,N],[0,"ext","x11_dl::glx","",N,N],[17,"GLX_SWAP_INTERVAL_EXT","x11_dl::glx::ext","",N,N],[17,"GLX_MAX_SWAP_INTERVAL_EXT","","",N,N],[6,"GLXContext","x11_dl::glx","",N,N],[6,"GLXContextID","","",N,N],[6,"GLXDrawable","","",N,N],[6,"GLXFBConfig","","",N,N],[6,"GLXFBConfigID","","",N,N],[6,"GLXPbuffer","","",N,N],[6,"GLXPixmap","","",N,N],[6,"GLXWindow","","",N,N],[17,"GLX_SLOW_CONFIG","","",N,N],[17,"GLX_NON_CONFORMANT_CONFIG","","",N,N],[17,"GLX_WINDOW_BIT","","",N,N],[17,"GLX_PIXMAP_BIT","","",N,N],[17,"GLX_PBUFFER_BIT","","",N,N],[17,"GLX_USE_GL","","",N,N],[17,"GLX_BUFFER_SIZE","","",N,N],[17,"GLX_LEVEL","","",N,N],[17,"GLX_RGBA","","",N,N],[17,"GLX_DOUBLEBUFFER","","",N,N],[17,"GLX_STEREO","","",N,N],[17,"GLX_AUX_BUFFERS","","",N,N],[17,"GLX_RED_SIZE","","",N,N],[17,"GLX_GREEN_SIZE","","",N,N],[17,"GLX_BLUE_SIZE","","",N,N],[17,"GLX_ALPHA_SIZE","","",N,N],[17,"GLX_DEPTH_SIZE","","",N,N],[17,"GLX_STENCIL_SIZE","","",N,N],[17,"GLX_ACCUM_RED_SIZE","","",N,N],[17,"GLX_ACCUM_GREEN_SIZE","","",N,N],[17,"GLX_ACCUM_BLUE_SIZE","","",N,N],[17,"GLX_ACCUM_ALPHA_SIZE","","",N,N],[17,"GLX_CONFIG_CAVEAT","","",N,N],[17,"GLX_X_VISUAL_TYPE","","",N,N],[17,"GLX_TRANSPARENT_TYPE","","",N,N],[17,"GLX_TRANSPARENT_INDEX_VALUE","","",N,N],[17,"GLX_TRANSPARENT_RED_VALUE","","",N,N],[17,"GLX_TRANSPARENT_GREEN_VALUE","","",N,N],[17,"GLX_TRANSPARENT_BLUE_VALUE","","",N,N],[17,"GLX_TRANSPARENT_ALPHA_VALUE","","",N,N],[17,"GLX_VISUAL_ID","","",N,N],[17,"GLX_SCREEN","","",N,N],[17,"GLX_DRAWABLE_TYPE","","",N,N],[17,"GLX_RENDER_TYPE","","",N,N],[17,"GLX_X_RENDERABLE","","",N,N],[17,"GLX_FBCONFIG_ID","","",N,N],[17,"GLX_MAX_PBUFFER_WIDTH","","",N,N],[17,"GLX_MAX_PBUFFER_HEIGHT","","",N,N],[17,"GLX_MAX_PBUFFER_PIXELS","","",N,N],[17,"GLX_SAMPLE_BUFFERS","","",N,N],[17,"GLX_SAMPLES","","",N,N],[17,"GLX_DONT_CARE","","",N,N],[17,"GLX_NONE","","",N,N],[17,"GLX_RGBA_BIT","","",N,N],[17,"GLX_COLOR_INDEX_BIT","","",N,N],[17,"GLX_TRANSPARENT_RGB","","",N,N],[17,"GLX_TRANSPARENT_INDEX","","",N,N],[17,"GLX_TRUE_COLOR","","",N,N],[17,"GLX_DIRECT_COLOR","","",N,N],[17,"GLX_PSEUDO_COLOR","","",N,N],[17,"GLX_STATIC_COLOR","","",N,N],[17,"GLX_GRAY_SCALE","","",N,N],[17,"GLX_STATIC_GRAY","","",N,N],[17,"GLX_BAD_SCREEN","","",N,N],[17,"GLX_BAD_ATTRIBUTE","","",N,N],[17,"GLX_NO_EXTENSION","","",N,N],[17,"GLX_BAD_VISUAL","","",N,N],[17,"GLX_BAD_CONTEXT","","",N,N],[17,"GLX_BAD_VALUE","","",N,N],[17,"GLX_BAD_ENUM","","",N,N],[17,"GLX_VENDOR","","",N,N],[17,"GLX_VERSION","","",N,N],[17,"GLX_EXTENSIONS","","",N,N],[17,"GLX_FRONT_LEFT_BUFFER_BIT","","",N,N],[17,"GLX_FRONT_RIGHT_BUFFER_BIT","","",N,N],[17,"GLX_BACK_LEFT_BUFFER_BIT","","",N,N],[17,"GLX_BACK_RIGHT_BUFFER_BIT","","",N,N],[17,"GLX_AUX_BUFFERS_BIT","","",N,N],[17,"GLX_DEPTH_BUFFER_BIT","","",N,N],[17,"GLX_STENCIL_BUFFER_BIT","","",N,N],[17,"GLX_ACCUM_BUFFER_BIT","","",N,N],[17,"GLX_RGBA_TYPE","","",N,N],[17,"GLX_COLOR_INDEX_TYPE","","",N,N],[17,"GLX_PRESERVED_CONTENTS","","",N,N],[17,"GLX_LARGEST_PBUFFER","","",N,N],[17,"GLX_WIDTH","","",N,N],[17,"GLX_HEIGHT","","",N,N],[17,"GLX_PBUFFER_HEIGHT","","",N,N],[17,"GLX_PBUFFER_WIDTH","","",N,N],[17,"GLX_EVENT_MASK","","",N,N],[17,"GLX_PBUFFER_CLOBBER_MASK","","",N,N],[17,"GLX_DAMAGED","","",N,N],[17,"GLX_SAVED","","",N,N],[17,"GLX_WINDOW","","",N,N],[17,"GLX_PBUFFER","","",N,N],[11,"open","","",103,[[],["result",["glx","openerror"]]]],[0,"keysym","x11_dl","",N,N],[17,"XK_BackSpace","x11_dl::keysym","",N,N],[17,"XK_Tab","","",N,N],[17,"XK_Linefeed","","",N,N],[17,"XK_Clear","","",N,N],[17,"XK_Return","","",N,N],[17,"XK_Pause","","",N,N],[17,"XK_Scroll_Lock","","",N,N],[17,"XK_Sys_Req","","",N,N],[17,"XK_Escape","","",N,N],[17,"XK_Delete","","",N,N],[17,"XK_Multi_key","","",N,N],[17,"XK_Kanji","","",N,N],[17,"XK_Muhenkan","","",N,N],[17,"XK_Henkan_Mode","","",N,N],[17,"XK_Henkan","","",N,N],[17,"XK_Romaji","","",N,N],[17,"XK_Hiragana","","",N,N],[17,"XK_Katakana","","",N,N],[17,"XK_Hiragana_Katakana","","",N,N],[17,"XK_Zenkaku","","",N,N],[17,"XK_Hankaku","","",N,N],[17,"XK_Zenkaku_Hankaku","","",N,N],[17,"XK_Touroku","","",N,N],[17,"XK_Massyo","","",N,N],[17,"XK_Kana_Lock","","",N,N],[17,"XK_Kana_Shift","","",N,N],[17,"XK_Eisu_Shift","","",N,N],[17,"XK_Eisu_toggle","","",N,N],[17,"XK_Home","","",N,N],[17,"XK_Left","","",N,N],[17,"XK_Up","","",N,N],[17,"XK_Right","","",N,N],[17,"XK_Down","","",N,N],[17,"XK_Prior","","",N,N],[17,"XK_Page_Up","","",N,N],[17,"XK_Next","","",N,N],[17,"XK_Page_Down","","",N,N],[17,"XK_End","","",N,N],[17,"XK_Begin","","",N,N],[17,"XK_Win_L","","",N,N],[17,"XK_Win_R","","",N,N],[17,"XK_App","","",N,N],[17,"XK_Select","","",N,N],[17,"XK_Print","","",N,N],[17,"XK_Execute","","",N,N],[17,"XK_Insert","","",N,N],[17,"XK_Undo","","",N,N],[17,"XK_Redo","","",N,N],[17,"XK_Menu","","",N,N],[17,"XK_Find","","",N,N],[17,"XK_Cancel","","",N,N],[17,"XK_Help","","",N,N],[17,"XK_Break","","",N,N],[17,"XK_Mode_switch","","",N,N],[17,"XK_script_switch","","",N,N],[17,"XK_Num_Lock","","",N,N],[17,"XK_KP_Space","","",N,N],[17,"XK_KP_Tab","","",N,N],[17,"XK_KP_Enter","","",N,N],[17,"XK_KP_F1","","",N,N],[17,"XK_KP_F2","","",N,N],[17,"XK_KP_F3","","",N,N],[17,"XK_KP_F4","","",N,N],[17,"XK_KP_Home","","",N,N],[17,"XK_KP_Left","","",N,N],[17,"XK_KP_Up","","",N,N],[17,"XK_KP_Right","","",N,N],[17,"XK_KP_Down","","",N,N],[17,"XK_KP_Prior","","",N,N],[17,"XK_KP_Page_Up","","",N,N],[17,"XK_KP_Next","","",N,N],[17,"XK_KP_Page_Down","","",N,N],[17,"XK_KP_End","","",N,N],[17,"XK_KP_Begin","","",N,N],[17,"XK_KP_Insert","","",N,N],[17,"XK_KP_Delete","","",N,N],[17,"XK_KP_Equal","","",N,N],[17,"XK_KP_Multiply","","",N,N],[17,"XK_KP_Add","","",N,N],[17,"XK_KP_Separator","","",N,N],[17,"XK_KP_Subtract","","",N,N],[17,"XK_KP_Decimal","","",N,N],[17,"XK_KP_Divide","","",N,N],[17,"XK_KP_0","","",N,N],[17,"XK_KP_1","","",N,N],[17,"XK_KP_2","","",N,N],[17,"XK_KP_3","","",N,N],[17,"XK_KP_4","","",N,N],[17,"XK_KP_5","","",N,N],[17,"XK_KP_6","","",N,N],[17,"XK_KP_7","","",N,N],[17,"XK_KP_8","","",N,N],[17,"XK_KP_9","","",N,N],[17,"XK_F1","","",N,N],[17,"XK_F2","","",N,N],[17,"XK_F3","","",N,N],[17,"XK_F4","","",N,N],[17,"XK_F5","","",N,N],[17,"XK_F6","","",N,N],[17,"XK_F7","","",N,N],[17,"XK_F8","","",N,N],[17,"XK_F9","","",N,N],[17,"XK_F10","","",N,N],[17,"XK_F11","","",N,N],[17,"XK_L1","","",N,N],[17,"XK_F12","","",N,N],[17,"XK_L2","","",N,N],[17,"XK_F13","","",N,N],[17,"XK_L3","","",N,N],[17,"XK_F14","","",N,N],[17,"XK_L4","","",N,N],[17,"XK_F15","","",N,N],[17,"XK_L5","","",N,N],[17,"XK_F16","","",N,N],[17,"XK_L6","","",N,N],[17,"XK_F17","","",N,N],[17,"XK_L7","","",N,N],[17,"XK_F18","","",N,N],[17,"XK_L8","","",N,N],[17,"XK_F19","","",N,N],[17,"XK_L9","","",N,N],[17,"XK_F20","","",N,N],[17,"XK_L10","","",N,N],[17,"XK_F21","","",N,N],[17,"XK_R1","","",N,N],[17,"XK_F22","","",N,N],[17,"XK_R2","","",N,N],[17,"XK_F23","","",N,N],[17,"XK_R3","","",N,N],[17,"XK_F24","","",N,N],[17,"XK_R4","","",N,N],[17,"XK_F25","","",N,N],[17,"XK_R5","","",N,N],[17,"XK_F26","","",N,N],[17,"XK_R6","","",N,N],[17,"XK_F27","","",N,N],[17,"XK_R7","","",N,N],[17,"XK_F28","","",N,N],[17,"XK_R8","","",N,N],[17,"XK_F29","","",N,N],[17,"XK_R9","","",N,N],[17,"XK_F30","","",N,N],[17,"XK_R10","","",N,N],[17,"XK_F31","","",N,N],[17,"XK_R11","","",N,N],[17,"XK_F32","","",N,N],[17,"XK_R12","","",N,N],[17,"XK_F33","","",N,N],[17,"XK_R13","","",N,N],[17,"XK_F34","","",N,N],[17,"XK_R14","","",N,N],[17,"XK_F35","","",N,N],[17,"XK_R15","","",N,N],[17,"XK_Shift_L","","",N,N],[17,"XK_Shift_R","","",N,N],[17,"XK_Control_L","","",N,N],[17,"XK_Control_R","","",N,N],[17,"XK_Caps_Lock","","",N,N],[17,"XK_Shift_Lock","","",N,N],[17,"XK_Meta_L","","",N,N],[17,"XK_Meta_R","","",N,N],[17,"XK_Alt_L","","",N,N],[17,"XK_Alt_R","","",N,N],[17,"XK_Super_L","","",N,N],[17,"XK_Super_R","","",N,N],[17,"XK_Hyper_L","","",N,N],[17,"XK_Hyper_R","","",N,N],[17,"XK_space","","",N,N],[17,"XK_exclam","","",N,N],[17,"XK_quotedbl","","",N,N],[17,"XK_numbersign","","",N,N],[17,"XK_dollar","","",N,N],[17,"XK_percent","","",N,N],[17,"XK_ampersand","","",N,N],[17,"XK_apostrophe","","",N,N],[17,"XK_quoteright","","",N,N],[17,"XK_parenleft","","",N,N],[17,"XK_parenright","","",N,N],[17,"XK_asterisk","","",N,N],[17,"XK_plus","","",N,N],[17,"XK_comma","","",N,N],[17,"XK_minus","","",N,N],[17,"XK_period","","",N,N],[17,"XK_slash","","",N,N],[17,"XK_0","","",N,N],[17,"XK_1","","",N,N],[17,"XK_2","","",N,N],[17,"XK_3","","",N,N],[17,"XK_4","","",N,N],[17,"XK_5","","",N,N],[17,"XK_6","","",N,N],[17,"XK_7","","",N,N],[17,"XK_8","","",N,N],[17,"XK_9","","",N,N],[17,"XK_colon","","",N,N],[17,"XK_semicolon","","",N,N],[17,"XK_less","","",N,N],[17,"XK_equal","","",N,N],[17,"XK_greater","","",N,N],[17,"XK_question","","",N,N],[17,"XK_at","","",N,N],[17,"XK_A","","",N,N],[17,"XK_B","","",N,N],[17,"XK_C","","",N,N],[17,"XK_D","","",N,N],[17,"XK_E","","",N,N],[17,"XK_F","","",N,N],[17,"XK_G","","",N,N],[17,"XK_H","","",N,N],[17,"XK_I","","",N,N],[17,"XK_J","","",N,N],[17,"XK_K","","",N,N],[17,"XK_L","","",N,N],[17,"XK_M","","",N,N],[17,"XK_N","","",N,N],[17,"XK_O","","",N,N],[17,"XK_P","","",N,N],[17,"XK_Q","","",N,N],[17,"XK_R","","",N,N],[17,"XK_S","","",N,N],[17,"XK_T","","",N,N],[17,"XK_U","","",N,N],[17,"XK_V","","",N,N],[17,"XK_W","","",N,N],[17,"XK_X","","",N,N],[17,"XK_Y","","",N,N],[17,"XK_Z","","",N,N],[17,"XK_bracketleft","","",N,N],[17,"XK_backslash","","",N,N],[17,"XK_bracketright","","",N,N],[17,"XK_asciicircum","","",N,N],[17,"XK_underscore","","",N,N],[17,"XK_grave","","",N,N],[17,"XK_quoteleft","","",N,N],[17,"XK_a","","",N,N],[17,"XK_b","","",N,N],[17,"XK_c","","",N,N],[17,"XK_d","","",N,N],[17,"XK_e","","",N,N],[17,"XK_f","","",N,N],[17,"XK_g","","",N,N],[17,"XK_h","","",N,N],[17,"XK_i","","",N,N],[17,"XK_j","","",N,N],[17,"XK_k","","",N,N],[17,"XK_l","","",N,N],[17,"XK_m","","",N,N],[17,"XK_n","","",N,N],[17,"XK_o","","",N,N],[17,"XK_p","","",N,N],[17,"XK_q","","",N,N],[17,"XK_r","","",N,N],[17,"XK_s","","",N,N],[17,"XK_t","","",N,N],[17,"XK_u","","",N,N],[17,"XK_v","","",N,N],[17,"XK_w","","",N,N],[17,"XK_x","","",N,N],[17,"XK_y","","",N,N],[17,"XK_z","","",N,N],[17,"XK_braceleft","","",N,N],[17,"XK_bar","","",N,N],[17,"XK_braceright","","",N,N],[17,"XK_asciitilde","","",N,N],[17,"XK_nobreakspace","","",N,N],[17,"XK_exclamdown","","",N,N],[17,"XK_cent","","",N,N],[17,"XK_sterling","","",N,N],[17,"XK_currency","","",N,N],[17,"XK_yen","","",N,N],[17,"XK_brokenbar","","",N,N],[17,"XK_section","","",N,N],[17,"XK_diaeresis","","",N,N],[17,"XK_copyright","","",N,N],[17,"XK_ordfeminine","","",N,N],[17,"XK_guillemotleft","","",N,N],[17,"XK_notsign","","",N,N],[17,"XK_hyphen","","",N,N],[17,"XK_registered","","",N,N],[17,"XK_macron","","",N,N],[17,"XK_degree","","",N,N],[17,"XK_plusminus","","",N,N],[17,"XK_twosuperior","","",N,N],[17,"XK_threesuperior","","",N,N],[17,"XK_acute","","",N,N],[17,"XK_mu","","",N,N],[17,"XK_paragraph","","",N,N],[17,"XK_periodcentered","","",N,N],[17,"XK_cedilla","","",N,N],[17,"XK_onesuperior","","",N,N],[17,"XK_masculine","","",N,N],[17,"XK_guillemotright","","",N,N],[17,"XK_onequarter","","",N,N],[17,"XK_onehalf","","",N,N],[17,"XK_threequarters","","",N,N],[17,"XK_questiondown","","",N,N],[17,"XK_Agrave","","",N,N],[17,"XK_Aacute","","",N,N],[17,"XK_Acircumflex","","",N,N],[17,"XK_Atilde","","",N,N],[17,"XK_Adiaeresis","","",N,N],[17,"XK_Aring","","",N,N],[17,"XK_AE","","",N,N],[17,"XK_Ccedilla","","",N,N],[17,"XK_Egrave","","",N,N],[17,"XK_Eacute","","",N,N],[17,"XK_Ecircumflex","","",N,N],[17,"XK_Ediaeresis","","",N,N],[17,"XK_Igrave","","",N,N],[17,"XK_Iacute","","",N,N],[17,"XK_Icircumflex","","",N,N],[17,"XK_Idiaeresis","","",N,N],[17,"XK_ETH","","",N,N],[17,"XK_Eth","","",N,N],[17,"XK_Ntilde","","",N,N],[17,"XK_Ograve","","",N,N],[17,"XK_Oacute","","",N,N],[17,"XK_Ocircumflex","","",N,N],[17,"XK_Otilde","","",N,N],[17,"XK_Odiaeresis","","",N,N],[17,"XK_multiply","","",N,N],[17,"XK_Ooblique","","",N,N],[17,"XK_Ugrave","","",N,N],[17,"XK_Uacute","","",N,N],[17,"XK_Ucircumflex","","",N,N],[17,"XK_Udiaeresis","","",N,N],[17,"XK_Yacute","","",N,N],[17,"XK_THORN","","",N,N],[17,"XK_Thorn","","",N,N],[17,"XK_ssharp","","",N,N],[17,"XK_agrave","","",N,N],[17,"XK_aacute","","",N,N],[17,"XK_acircumflex","","",N,N],[17,"XK_atilde","","",N,N],[17,"XK_adiaeresis","","",N,N],[17,"XK_aring","","",N,N],[17,"XK_ae","","",N,N],[17,"XK_ccedilla","","",N,N],[17,"XK_egrave","","",N,N],[17,"XK_eacute","","",N,N],[17,"XK_ecircumflex","","",N,N],[17,"XK_ediaeresis","","",N,N],[17,"XK_igrave","","",N,N],[17,"XK_iacute","","",N,N],[17,"XK_icircumflex","","",N,N],[17,"XK_idiaeresis","","",N,N],[17,"XK_eth","","",N,N],[17,"XK_ntilde","","",N,N],[17,"XK_ograve","","",N,N],[17,"XK_oacute","","",N,N],[17,"XK_ocircumflex","","",N,N],[17,"XK_otilde","","",N,N],[17,"XK_odiaeresis","","",N,N],[17,"XK_division","","",N,N],[17,"XK_oslash","","",N,N],[17,"XK_ugrave","","",N,N],[17,"XK_uacute","","",N,N],[17,"XK_ucircumflex","","",N,N],[17,"XK_udiaeresis","","",N,N],[17,"XK_yacute","","",N,N],[17,"XK_thorn","","",N,N],[17,"XK_ydiaeresis","","",N,N],[17,"XK_Aogonek","","",N,N],[17,"XK_breve","","",N,N],[17,"XK_Lstroke","","",N,N],[17,"XK_Lcaron","","",N,N],[17,"XK_Sacute","","",N,N],[17,"XK_Scaron","","",N,N],[17,"XK_Scedilla","","",N,N],[17,"XK_Tcaron","","",N,N],[17,"XK_Zacute","","",N,N],[17,"XK_Zcaron","","",N,N],[17,"XK_Zabovedot","","",N,N],[17,"XK_aogonek","","",N,N],[17,"XK_ogonek","","",N,N],[17,"XK_lstroke","","",N,N],[17,"XK_lcaron","","",N,N],[17,"XK_sacute","","",N,N],[17,"XK_caron","","",N,N],[17,"XK_scaron","","",N,N],[17,"XK_scedilla","","",N,N],[17,"XK_tcaron","","",N,N],[17,"XK_zacute","","",N,N],[17,"XK_doubleacute","","",N,N],[17,"XK_zcaron","","",N,N],[17,"XK_zabovedot","","",N,N],[17,"XK_Racute","","",N,N],[17,"XK_Abreve","","",N,N],[17,"XK_Lacute","","",N,N],[17,"XK_Cacute","","",N,N],[17,"XK_Ccaron","","",N,N],[17,"XK_Eogonek","","",N,N],[17,"XK_Ecaron","","",N,N],[17,"XK_Dcaron","","",N,N],[17,"XK_Dstroke","","",N,N],[17,"XK_Nacute","","",N,N],[17,"XK_Ncaron","","",N,N],[17,"XK_Odoubleacute","","",N,N],[17,"XK_Rcaron","","",N,N],[17,"XK_Uring","","",N,N],[17,"XK_Udoubleacute","","",N,N],[17,"XK_Tcedilla","","",N,N],[17,"XK_racute","","",N,N],[17,"XK_abreve","","",N,N],[17,"XK_lacute","","",N,N],[17,"XK_cacute","","",N,N],[17,"XK_ccaron","","",N,N],[17,"XK_eogonek","","",N,N],[17,"XK_ecaron","","",N,N],[17,"XK_dcaron","","",N,N],[17,"XK_dstroke","","",N,N],[17,"XK_nacute","","",N,N],[17,"XK_ncaron","","",N,N],[17,"XK_odoubleacute","","",N,N],[17,"XK_udoubleacute","","",N,N],[17,"XK_rcaron","","",N,N],[17,"XK_uring","","",N,N],[17,"XK_tcedilla","","",N,N],[17,"XK_abovedot","","",N,N],[17,"XK_Hstroke","","",N,N],[17,"XK_Hcircumflex","","",N,N],[17,"XK_Iabovedot","","",N,N],[17,"XK_Gbreve","","",N,N],[17,"XK_Jcircumflex","","",N,N],[17,"XK_hstroke","","",N,N],[17,"XK_hcircumflex","","",N,N],[17,"XK_idotless","","",N,N],[17,"XK_gbreve","","",N,N],[17,"XK_jcircumflex","","",N,N],[17,"XK_Cabovedot","","",N,N],[17,"XK_Ccircumflex","","",N,N],[17,"XK_Gabovedot","","",N,N],[17,"XK_Gcircumflex","","",N,N],[17,"XK_Ubreve","","",N,N],[17,"XK_Scircumflex","","",N,N],[17,"XK_cabovedot","","",N,N],[17,"XK_ccircumflex","","",N,N],[17,"XK_gabovedot","","",N,N],[17,"XK_gcircumflex","","",N,N],[17,"XK_ubreve","","",N,N],[17,"XK_scircumflex","","",N,N],[17,"XK_kra","","",N,N],[17,"XK_kappa","","",N,N],[17,"XK_Rcedilla","","",N,N],[17,"XK_Itilde","","",N,N],[17,"XK_Lcedilla","","",N,N],[17,"XK_Emacron","","",N,N],[17,"XK_Gcedilla","","",N,N],[17,"XK_Tslash","","",N,N],[17,"XK_rcedilla","","",N,N],[17,"XK_itilde","","",N,N],[17,"XK_lcedilla","","",N,N],[17,"XK_emacron","","",N,N],[17,"XK_gcedilla","","",N,N],[17,"XK_tslash","","",N,N],[17,"XK_ENG","","",N,N],[17,"XK_eng","","",N,N],[17,"XK_Amacron","","",N,N],[17,"XK_Iogonek","","",N,N],[17,"XK_Eabovedot","","",N,N],[17,"XK_Imacron","","",N,N],[17,"XK_Ncedilla","","",N,N],[17,"XK_Omacron","","",N,N],[17,"XK_Kcedilla","","",N,N],[17,"XK_Uogonek","","",N,N],[17,"XK_Utilde","","",N,N],[17,"XK_Umacron","","",N,N],[17,"XK_amacron","","",N,N],[17,"XK_iogonek","","",N,N],[17,"XK_eabovedot","","",N,N],[17,"XK_imacron","","",N,N],[17,"XK_ncedilla","","",N,N],[17,"XK_omacron","","",N,N],[17,"XK_kcedilla","","",N,N],[17,"XK_uogonek","","",N,N],[17,"XK_utilde","","",N,N],[17,"XK_umacron","","",N,N],[17,"XK_overline","","",N,N],[17,"XK_kana_fullstop","","",N,N],[17,"XK_kana_openingbracket","","",N,N],[17,"XK_kana_closingbracket","","",N,N],[17,"XK_kana_comma","","",N,N],[17,"XK_kana_conjunctive","","",N,N],[17,"XK_kana_middledot","","",N,N],[17,"XK_kana_WO","","",N,N],[17,"XK_kana_a","","",N,N],[17,"XK_kana_i","","",N,N],[17,"XK_kana_u","","",N,N],[17,"XK_kana_e","","",N,N],[17,"XK_kana_o","","",N,N],[17,"XK_kana_ya","","",N,N],[17,"XK_kana_yu","","",N,N],[17,"XK_kana_yo","","",N,N],[17,"XK_kana_tsu","","",N,N],[17,"XK_kana_tu","","",N,N],[17,"XK_prolongedsound","","",N,N],[17,"XK_kana_A","","",N,N],[17,"XK_kana_I","","",N,N],[17,"XK_kana_U","","",N,N],[17,"XK_kana_E","","",N,N],[17,"XK_kana_O","","",N,N],[17,"XK_kana_KA","","",N,N],[17,"XK_kana_KI","","",N,N],[17,"XK_kana_KU","","",N,N],[17,"XK_kana_KE","","",N,N],[17,"XK_kana_KO","","",N,N],[17,"XK_kana_SA","","",N,N],[17,"XK_kana_SHI","","",N,N],[17,"XK_kana_SU","","",N,N],[17,"XK_kana_SE","","",N,N],[17,"XK_kana_SO","","",N,N],[17,"XK_kana_TA","","",N,N],[17,"XK_kana_CHI","","",N,N],[17,"XK_kana_TI","","",N,N],[17,"XK_kana_TSU","","",N,N],[17,"XK_kana_TU","","",N,N],[17,"XK_kana_TE","","",N,N],[17,"XK_kana_TO","","",N,N],[17,"XK_kana_NA","","",N,N],[17,"XK_kana_NI","","",N,N],[17,"XK_kana_NU","","",N,N],[17,"XK_kana_NE","","",N,N],[17,"XK_kana_NO","","",N,N],[17,"XK_kana_HA","","",N,N],[17,"XK_kana_HI","","",N,N],[17,"XK_kana_FU","","",N,N],[17,"XK_kana_HU","","",N,N],[17,"XK_kana_HE","","",N,N],[17,"XK_kana_HO","","",N,N],[17,"XK_kana_MA","","",N,N],[17,"XK_kana_MI","","",N,N],[17,"XK_kana_MU","","",N,N],[17,"XK_kana_ME","","",N,N],[17,"XK_kana_MO","","",N,N],[17,"XK_kana_YA","","",N,N],[17,"XK_kana_YU","","",N,N],[17,"XK_kana_YO","","",N,N],[17,"XK_kana_RA","","",N,N],[17,"XK_kana_RI","","",N,N],[17,"XK_kana_RU","","",N,N],[17,"XK_kana_RE","","",N,N],[17,"XK_kana_RO","","",N,N],[17,"XK_kana_WA","","",N,N],[17,"XK_kana_N","","",N,N],[17,"XK_voicedsound","","",N,N],[17,"XK_semivoicedsound","","",N,N],[17,"XK_kana_switch","","",N,N],[17,"XK_Arabic_comma","","",N,N],[17,"XK_Arabic_semicolon","","",N,N],[17,"XK_Arabic_question_mark","","",N,N],[17,"XK_Arabic_hamza","","",N,N],[17,"XK_Arabic_maddaonalef","","",N,N],[17,"XK_Arabic_hamzaonalef","","",N,N],[17,"XK_Arabic_hamzaonwaw","","",N,N],[17,"XK_Arabic_hamzaunderalef","","",N,N],[17,"XK_Arabic_hamzaonyeh","","",N,N],[17,"XK_Arabic_alef","","",N,N],[17,"XK_Arabic_beh","","",N,N],[17,"XK_Arabic_tehmarbuta","","",N,N],[17,"XK_Arabic_teh","","",N,N],[17,"XK_Arabic_theh","","",N,N],[17,"XK_Arabic_jeem","","",N,N],[17,"XK_Arabic_hah","","",N,N],[17,"XK_Arabic_khah","","",N,N],[17,"XK_Arabic_dal","","",N,N],[17,"XK_Arabic_thal","","",N,N],[17,"XK_Arabic_ra","","",N,N],[17,"XK_Arabic_zain","","",N,N],[17,"XK_Arabic_seen","","",N,N],[17,"XK_Arabic_sheen","","",N,N],[17,"XK_Arabic_sad","","",N,N],[17,"XK_Arabic_dad","","",N,N],[17,"XK_Arabic_tah","","",N,N],[17,"XK_Arabic_zah","","",N,N],[17,"XK_Arabic_ain","","",N,N],[17,"XK_Arabic_ghain","","",N,N],[17,"XK_Arabic_tatweel","","",N,N],[17,"XK_Arabic_feh","","",N,N],[17,"XK_Arabic_qaf","","",N,N],[17,"XK_Arabic_kaf","","",N,N],[17,"XK_Arabic_lam","","",N,N],[17,"XK_Arabic_meem","","",N,N],[17,"XK_Arabic_noon","","",N,N],[17,"XK_Arabic_ha","","",N,N],[17,"XK_Arabic_heh","","",N,N],[17,"XK_Arabic_waw","","",N,N],[17,"XK_Arabic_alefmaksura","","",N,N],[17,"XK_Arabic_yeh","","",N,N],[17,"XK_Arabic_fathatan","","",N,N],[17,"XK_Arabic_dammatan","","",N,N],[17,"XK_Arabic_kasratan","","",N,N],[17,"XK_Arabic_fatha","","",N,N],[17,"XK_Arabic_damma","","",N,N],[17,"XK_Arabic_kasra","","",N,N],[17,"XK_Arabic_shadda","","",N,N],[17,"XK_Arabic_sukun","","",N,N],[17,"XK_Arabic_switch","","",N,N],[17,"XK_Serbian_dje","","",N,N],[17,"XK_Macedonia_gje","","",N,N],[17,"XK_Cyrillic_io","","",N,N],[17,"XK_Ukrainian_ie","","",N,N],[17,"XK_Ukranian_je","","",N,N],[17,"XK_Macedonia_dse","","",N,N],[17,"XK_Ukrainian_i","","",N,N],[17,"XK_Ukranian_i","","",N,N],[17,"XK_Ukrainian_yi","","",N,N],[17,"XK_Ukranian_yi","","",N,N],[17,"XK_Cyrillic_je","","",N,N],[17,"XK_Serbian_je","","",N,N],[17,"XK_Cyrillic_lje","","",N,N],[17,"XK_Serbian_lje","","",N,N],[17,"XK_Cyrillic_nje","","",N,N],[17,"XK_Serbian_nje","","",N,N],[17,"XK_Serbian_tshe","","",N,N],[17,"XK_Macedonia_kje","","",N,N],[17,"XK_Byelorussian_shortu","","",N,N],[17,"XK_Cyrillic_dzhe","","",N,N],[17,"XK_Serbian_dze","","",N,N],[17,"XK_numerosign","","",N,N],[17,"XK_Serbian_DJE","","",N,N],[17,"XK_Macedonia_GJE","","",N,N],[17,"XK_Cyrillic_IO","","",N,N],[17,"XK_Ukrainian_IE","","",N,N],[17,"XK_Ukranian_JE","","",N,N],[17,"XK_Macedonia_DSE","","",N,N],[17,"XK_Ukrainian_I","","",N,N],[17,"XK_Ukranian_I","","",N,N],[17,"XK_Ukrainian_YI","","",N,N],[17,"XK_Ukranian_YI","","",N,N],[17,"XK_Cyrillic_JE","","",N,N],[17,"XK_Serbian_JE","","",N,N],[17,"XK_Cyrillic_LJE","","",N,N],[17,"XK_Serbian_LJE","","",N,N],[17,"XK_Cyrillic_NJE","","",N,N],[17,"XK_Serbian_NJE","","",N,N],[17,"XK_Serbian_TSHE","","",N,N],[17,"XK_Macedonia_KJE","","",N,N],[17,"XK_Byelorussian_SHORTU","","",N,N],[17,"XK_Cyrillic_DZHE","","",N,N],[17,"XK_Serbian_DZE","","",N,N],[17,"XK_Cyrillic_yu","","",N,N],[17,"XK_Cyrillic_a","","",N,N],[17,"XK_Cyrillic_be","","",N,N],[17,"XK_Cyrillic_tse","","",N,N],[17,"XK_Cyrillic_de","","",N,N],[17,"XK_Cyrillic_ie","","",N,N],[17,"XK_Cyrillic_ef","","",N,N],[17,"XK_Cyrillic_ghe","","",N,N],[17,"XK_Cyrillic_ha","","",N,N],[17,"XK_Cyrillic_i","","",N,N],[17,"XK_Cyrillic_shorti","","",N,N],[17,"XK_Cyrillic_ka","","",N,N],[17,"XK_Cyrillic_el","","",N,N],[17,"XK_Cyrillic_em","","",N,N],[17,"XK_Cyrillic_en","","",N,N],[17,"XK_Cyrillic_o","","",N,N],[17,"XK_Cyrillic_pe","","",N,N],[17,"XK_Cyrillic_ya","","",N,N],[17,"XK_Cyrillic_er","","",N,N],[17,"XK_Cyrillic_es","","",N,N],[17,"XK_Cyrillic_te","","",N,N],[17,"XK_Cyrillic_u","","",N,N],[17,"XK_Cyrillic_zhe","","",N,N],[17,"XK_Cyrillic_ve","","",N,N],[17,"XK_Cyrillic_softsign","","",N,N],[17,"XK_Cyrillic_yeru","","",N,N],[17,"XK_Cyrillic_ze","","",N,N],[17,"XK_Cyrillic_sha","","",N,N],[17,"XK_Cyrillic_e","","",N,N],[17,"XK_Cyrillic_shcha","","",N,N],[17,"XK_Cyrillic_che","","",N,N],[17,"XK_Cyrillic_hardsign","","",N,N],[17,"XK_Cyrillic_YU","","",N,N],[17,"XK_Cyrillic_A","","",N,N],[17,"XK_Cyrillic_BE","","",N,N],[17,"XK_Cyrillic_TSE","","",N,N],[17,"XK_Cyrillic_DE","","",N,N],[17,"XK_Cyrillic_IE","","",N,N],[17,"XK_Cyrillic_EF","","",N,N],[17,"XK_Cyrillic_GHE","","",N,N],[17,"XK_Cyrillic_HA","","",N,N],[17,"XK_Cyrillic_I","","",N,N],[17,"XK_Cyrillic_SHORTI","","",N,N],[17,"XK_Cyrillic_KA","","",N,N],[17,"XK_Cyrillic_EL","","",N,N],[17,"XK_Cyrillic_EM","","",N,N],[17,"XK_Cyrillic_EN","","",N,N],[17,"XK_Cyrillic_O","","",N,N],[17,"XK_Cyrillic_PE","","",N,N],[17,"XK_Cyrillic_YA","","",N,N],[17,"XK_Cyrillic_ER","","",N,N],[17,"XK_Cyrillic_ES","","",N,N],[17,"XK_Cyrillic_TE","","",N,N],[17,"XK_Cyrillic_U","","",N,N],[17,"XK_Cyrillic_ZHE","","",N,N],[17,"XK_Cyrillic_VE","","",N,N],[17,"XK_Cyrillic_SOFTSIGN","","",N,N],[17,"XK_Cyrillic_YERU","","",N,N],[17,"XK_Cyrillic_ZE","","",N,N],[17,"XK_Cyrillic_SHA","","",N,N],[17,"XK_Cyrillic_E","","",N,N],[17,"XK_Cyrillic_SHCHA","","",N,N],[17,"XK_Cyrillic_CHE","","",N,N],[17,"XK_Cyrillic_HARDSIGN","","",N,N],[17,"XK_Greek_ALPHAaccent","","",N,N],[17,"XK_Greek_EPSILONaccent","","",N,N],[17,"XK_Greek_ETAaccent","","",N,N],[17,"XK_Greek_IOTAaccent","","",N,N],[17,"XK_Greek_IOTAdiaeresis","","",N,N],[17,"XK_Greek_OMICRONaccent","","",N,N],[17,"XK_Greek_UPSILONaccent","","",N,N],[17,"XK_Greek_UPSILONdieresis","","",N,N],[17,"XK_Greek_OMEGAaccent","","",N,N],[17,"XK_Greek_accentdieresis","","",N,N],[17,"XK_Greek_horizbar","","",N,N],[17,"XK_Greek_alphaaccent","","",N,N],[17,"XK_Greek_epsilonaccent","","",N,N],[17,"XK_Greek_etaaccent","","",N,N],[17,"XK_Greek_iotaaccent","","",N,N],[17,"XK_Greek_iotadieresis","","",N,N],[17,"XK_Greek_iotaaccentdieresis","","",N,N],[17,"XK_Greek_omicronaccent","","",N,N],[17,"XK_Greek_upsilonaccent","","",N,N],[17,"XK_Greek_upsilondieresis","","",N,N],[17,"XK_Greek_upsilonaccentdieresis","","",N,N],[17,"XK_Greek_omegaaccent","","",N,N],[17,"XK_Greek_ALPHA","","",N,N],[17,"XK_Greek_BETA","","",N,N],[17,"XK_Greek_GAMMA","","",N,N],[17,"XK_Greek_DELTA","","",N,N],[17,"XK_Greek_EPSILON","","",N,N],[17,"XK_Greek_ZETA","","",N,N],[17,"XK_Greek_ETA","","",N,N],[17,"XK_Greek_THETA","","",N,N],[17,"XK_Greek_IOTA","","",N,N],[17,"XK_Greek_KAPPA","","",N,N],[17,"XK_Greek_LAMDA","","",N,N],[17,"XK_Greek_LAMBDA","","",N,N],[17,"XK_Greek_MU","","",N,N],[17,"XK_Greek_NU","","",N,N],[17,"XK_Greek_XI","","",N,N],[17,"XK_Greek_OMICRON","","",N,N],[17,"XK_Greek_PI","","",N,N],[17,"XK_Greek_RHO","","",N,N],[17,"XK_Greek_SIGMA","","",N,N],[17,"XK_Greek_TAU","","",N,N],[17,"XK_Greek_UPSILON","","",N,N],[17,"XK_Greek_PHI","","",N,N],[17,"XK_Greek_CHI","","",N,N],[17,"XK_Greek_PSI","","",N,N],[17,"XK_Greek_OMEGA","","",N,N],[17,"XK_Greek_alpha","","",N,N],[17,"XK_Greek_beta","","",N,N],[17,"XK_Greek_gamma","","",N,N],[17,"XK_Greek_delta","","",N,N],[17,"XK_Greek_epsilon","","",N,N],[17,"XK_Greek_zeta","","",N,N],[17,"XK_Greek_eta","","",N,N],[17,"XK_Greek_theta","","",N,N],[17,"XK_Greek_iota","","",N,N],[17,"XK_Greek_kappa","","",N,N],[17,"XK_Greek_lamda","","",N,N],[17,"XK_Greek_lambda","","",N,N],[17,"XK_Greek_mu","","",N,N],[17,"XK_Greek_nu","","",N,N],[17,"XK_Greek_xi","","",N,N],[17,"XK_Greek_omicron","","",N,N],[17,"XK_Greek_pi","","",N,N],[17,"XK_Greek_rho","","",N,N],[17,"XK_Greek_sigma","","",N,N],[17,"XK_Greek_finalsmallsigma","","",N,N],[17,"XK_Greek_tau","","",N,N],[17,"XK_Greek_upsilon","","",N,N],[17,"XK_Greek_phi","","",N,N],[17,"XK_Greek_chi","","",N,N],[17,"XK_Greek_psi","","",N,N],[17,"XK_Greek_omega","","",N,N],[17,"XK_Greek_switch","","",N,N],[17,"XK_leftradical","","",N,N],[17,"XK_topleftradical","","",N,N],[17,"XK_horizconnector","","",N,N],[17,"XK_topintegral","","",N,N],[17,"XK_botintegral","","",N,N],[17,"XK_vertconnector","","",N,N],[17,"XK_topleftsqbracket","","",N,N],[17,"XK_botleftsqbracket","","",N,N],[17,"XK_toprightsqbracket","","",N,N],[17,"XK_botrightsqbracket","","",N,N],[17,"XK_topleftparens","","",N,N],[17,"XK_botleftparens","","",N,N],[17,"XK_toprightparens","","",N,N],[17,"XK_botrightparens","","",N,N],[17,"XK_leftmiddlecurlybrace","","",N,N],[17,"XK_rightmiddlecurlybrace","","",N,N],[17,"XK_topleftsummation","","",N,N],[17,"XK_botleftsummation","","",N,N],[17,"XK_topvertsummationconnector","","",N,N],[17,"XK_botvertsummationconnector","","",N,N],[17,"XK_toprightsummation","","",N,N],[17,"XK_botrightsummation","","",N,N],[17,"XK_rightmiddlesummation","","",N,N],[17,"XK_lessthanequal","","",N,N],[17,"XK_notequal","","",N,N],[17,"XK_greaterthanequal","","",N,N],[17,"XK_integral","","",N,N],[17,"XK_therefore","","",N,N],[17,"XK_variation","","",N,N],[17,"XK_infinity","","",N,N],[17,"XK_nabla","","",N,N],[17,"XK_approximate","","",N,N],[17,"XK_similarequal","","",N,N],[17,"XK_ifonlyif","","",N,N],[17,"XK_implies","","",N,N],[17,"XK_identical","","",N,N],[17,"XK_radical","","",N,N],[17,"XK_includedin","","",N,N],[17,"XK_includes","","",N,N],[17,"XK_intersection","","",N,N],[17,"XK_union","","",N,N],[17,"XK_logicaland","","",N,N],[17,"XK_logicalor","","",N,N],[17,"XK_partialderivative","","",N,N],[17,"XK_function","","",N,N],[17,"XK_leftarrow","","",N,N],[17,"XK_uparrow","","",N,N],[17,"XK_rightarrow","","",N,N],[17,"XK_downarrow","","",N,N],[17,"XK_blank","","",N,N],[17,"XK_soliddiamond","","",N,N],[17,"XK_checkerboard","","",N,N],[17,"XK_ht","","",N,N],[17,"XK_ff","","",N,N],[17,"XK_cr","","",N,N],[17,"XK_lf","","",N,N],[17,"XK_nl","","",N,N],[17,"XK_vt","","",N,N],[17,"XK_lowrightcorner","","",N,N],[17,"XK_uprightcorner","","",N,N],[17,"XK_upleftcorner","","",N,N],[17,"XK_lowleftcorner","","",N,N],[17,"XK_crossinglines","","",N,N],[17,"XK_horizlinescan1","","",N,N],[17,"XK_horizlinescan3","","",N,N],[17,"XK_horizlinescan5","","",N,N],[17,"XK_horizlinescan7","","",N,N],[17,"XK_horizlinescan9","","",N,N],[17,"XK_leftt","","",N,N],[17,"XK_rightt","","",N,N],[17,"XK_bott","","",N,N],[17,"XK_topt","","",N,N],[17,"XK_vertbar","","",N,N],[17,"XK_emspace","","",N,N],[17,"XK_enspace","","",N,N],[17,"XK_em3space","","",N,N],[17,"XK_em4space","","",N,N],[17,"XK_digitspace","","",N,N],[17,"XK_punctspace","","",N,N],[17,"XK_thinspace","","",N,N],[17,"XK_hairspace","","",N,N],[17,"XK_emdash","","",N,N],[17,"XK_endash","","",N,N],[17,"XK_signifblank","","",N,N],[17,"XK_ellipsis","","",N,N],[17,"XK_doubbaselinedot","","",N,N],[17,"XK_onethird","","",N,N],[17,"XK_twothirds","","",N,N],[17,"XK_onefifth","","",N,N],[17,"XK_twofifths","","",N,N],[17,"XK_threefifths","","",N,N],[17,"XK_fourfifths","","",N,N],[17,"XK_onesixth","","",N,N],[17,"XK_fivesixths","","",N,N],[17,"XK_careof","","",N,N],[17,"XK_figdash","","",N,N],[17,"XK_leftanglebracket","","",N,N],[17,"XK_decimalpoint","","",N,N],[17,"XK_rightanglebracket","","",N,N],[17,"XK_marker","","",N,N],[17,"XK_oneeighth","","",N,N],[17,"XK_threeeighths","","",N,N],[17,"XK_fiveeighths","","",N,N],[17,"XK_seveneighths","","",N,N],[17,"XK_trademark","","",N,N],[17,"XK_signaturemark","","",N,N],[17,"XK_trademarkincircle","","",N,N],[17,"XK_leftopentriangle","","",N,N],[17,"XK_rightopentriangle","","",N,N],[17,"XK_emopencircle","","",N,N],[17,"XK_emopenrectangle","","",N,N],[17,"XK_leftsinglequotemark","","",N,N],[17,"XK_rightsinglequotemark","","",N,N],[17,"XK_leftdoublequotemark","","",N,N],[17,"XK_rightdoublequotemark","","",N,N],[17,"XK_prescription","","",N,N],[17,"XK_minutes","","",N,N],[17,"XK_seconds","","",N,N],[17,"XK_latincross","","",N,N],[17,"XK_hexagram","","",N,N],[17,"XK_filledrectbullet","","",N,N],[17,"XK_filledlefttribullet","","",N,N],[17,"XK_filledrighttribullet","","",N,N],[17,"XK_emfilledcircle","","",N,N],[17,"XK_emfilledrect","","",N,N],[17,"XK_enopencircbullet","","",N,N],[17,"XK_enopensquarebullet","","",N,N],[17,"XK_openrectbullet","","",N,N],[17,"XK_opentribulletup","","",N,N],[17,"XK_opentribulletdown","","",N,N],[17,"XK_openstar","","",N,N],[17,"XK_enfilledcircbullet","","",N,N],[17,"XK_enfilledsqbullet","","",N,N],[17,"XK_filledtribulletup","","",N,N],[17,"XK_filledtribulletdown","","",N,N],[17,"XK_leftpointer","","",N,N],[17,"XK_rightpointer","","",N,N],[17,"XK_club","","",N,N],[17,"XK_diamond","","",N,N],[17,"XK_heart","","",N,N],[17,"XK_maltesecross","","",N,N],[17,"XK_dagger","","",N,N],[17,"XK_doubledagger","","",N,N],[17,"XK_checkmark","","",N,N],[17,"XK_ballotcross","","",N,N],[17,"XK_musicalsharp","","",N,N],[17,"XK_musicalflat","","",N,N],[17,"XK_malesymbol","","",N,N],[17,"XK_femalesymbol","","",N,N],[17,"XK_telephone","","",N,N],[17,"XK_telephonerecorder","","",N,N],[17,"XK_phonographcopyright","","",N,N],[17,"XK_caret","","",N,N],[17,"XK_singlelowquotemark","","",N,N],[17,"XK_doublelowquotemark","","",N,N],[17,"XK_cursor","","",N,N],[17,"XK_leftcaret","","",N,N],[17,"XK_rightcaret","","",N,N],[17,"XK_downcaret","","",N,N],[17,"XK_upcaret","","",N,N],[17,"XK_overbar","","",N,N],[17,"XK_downtack","","",N,N],[17,"XK_upshoe","","",N,N],[17,"XK_downstile","","",N,N],[17,"XK_underbar","","",N,N],[17,"XK_jot","","",N,N],[17,"XK_quad","","",N,N],[17,"XK_uptack","","",N,N],[17,"XK_circle","","",N,N],[17,"XK_upstile","","",N,N],[17,"XK_downshoe","","",N,N],[17,"XK_rightshoe","","",N,N],[17,"XK_leftshoe","","",N,N],[17,"XK_lefttack","","",N,N],[17,"XK_righttack","","",N,N],[17,"XK_hebrew_doublelowline","","",N,N],[17,"XK_hebrew_aleph","","",N,N],[17,"XK_hebrew_bet","","",N,N],[17,"XK_hebrew_beth","","",N,N],[17,"XK_hebrew_gimel","","",N,N],[17,"XK_hebrew_gimmel","","",N,N],[17,"XK_hebrew_dalet","","",N,N],[17,"XK_hebrew_daleth","","",N,N],[17,"XK_hebrew_he","","",N,N],[17,"XK_hebrew_waw","","",N,N],[17,"XK_hebrew_zain","","",N,N],[17,"XK_hebrew_zayin","","",N,N],[17,"XK_hebrew_chet","","",N,N],[17,"XK_hebrew_het","","",N,N],[17,"XK_hebrew_tet","","",N,N],[17,"XK_hebrew_teth","","",N,N],[17,"XK_hebrew_yod","","",N,N],[17,"XK_hebrew_finalkaph","","",N,N],[17,"XK_hebrew_kaph","","",N,N],[17,"XK_hebrew_lamed","","",N,N],[17,"XK_hebrew_finalmem","","",N,N],[17,"XK_hebrew_mem","","",N,N],[17,"XK_hebrew_finalnun","","",N,N],[17,"XK_hebrew_nun","","",N,N],[17,"XK_hebrew_samech","","",N,N],[17,"XK_hebrew_samekh","","",N,N],[17,"XK_hebrew_ayin","","",N,N],[17,"XK_hebrew_finalpe","","",N,N],[17,"XK_hebrew_pe","","",N,N],[17,"XK_hebrew_finalzade","","",N,N],[17,"XK_hebrew_finalzadi","","",N,N],[17,"XK_hebrew_zade","","",N,N],[17,"XK_hebrew_zadi","","",N,N],[17,"XK_hebrew_qoph","","",N,N],[17,"XK_hebrew_kuf","","",N,N],[17,"XK_hebrew_resh","","",N,N],[17,"XK_hebrew_shin","","",N,N],[17,"XK_hebrew_taw","","",N,N],[17,"XK_hebrew_taf","","",N,N],[17,"XK_Hebrew_switch","","",N,N],[17,"XF86XK_ModeLock","","",N,N],[17,"XF86XK_MonBrightnessUp","","",N,N],[17,"XF86XK_MonBrightnessDown","","",N,N],[17,"XF86XK_KbdLightOnOff","","",N,N],[17,"XF86XK_KbdBrightnessUp","","",N,N],[17,"XF86XK_KbdBrightnessDown","","",N,N],[17,"XF86XK_Standby","","",N,N],[17,"XF86XK_AudioLowerVolume","","",N,N],[17,"XF86XK_AudioMute","","",N,N],[17,"XF86XK_AudioRaiseVolume","","",N,N],[17,"XF86XK_AudioPlay","","",N,N],[17,"XF86XK_AudioStop","","",N,N],[17,"XF86XK_AudioPrev","","",N,N],[17,"XF86XK_AudioNext","","",N,N],[17,"XF86XK_HomePage","","",N,N],[17,"XF86XK_Mail","","",N,N],[17,"XF86XK_Start","","",N,N],[17,"XF86XK_Search","","",N,N],[17,"XF86XK_AudioRecord","","",N,N],[17,"XF86XK_Calculator","","",N,N],[17,"XF86XK_Memo","","",N,N],[17,"XF86XK_ToDoList","","",N,N],[17,"XF86XK_Calendar","","",N,N],[17,"XF86XK_PowerDown","","",N,N],[17,"XF86XK_ContrastAdjust","","",N,N],[17,"XF86XK_RockerUp","","",N,N],[17,"XF86XK_RockerDown","","",N,N],[17,"XF86XK_RockerEnter","","",N,N],[17,"XF86XK_Back","","",N,N],[17,"XF86XK_Forward","","",N,N],[17,"XF86XK_Stop","","",N,N],[17,"XF86XK_Refresh","","",N,N],[17,"XF86XK_PowerOff","","",N,N],[17,"XF86XK_WakeUp","","",N,N],[17,"XF86XK_Eject","","",N,N],[17,"XF86XK_ScreenSaver","","",N,N],[17,"XF86XK_WWW","","",N,N],[17,"XF86XK_Sleep","","",N,N],[17,"XF86XK_Favorites","","",N,N],[17,"XF86XK_AudioPause","","",N,N],[17,"XF86XK_AudioMedia","","",N,N],[17,"XF86XK_MyComputer","","",N,N],[17,"XF86XK_VendorHome","","",N,N],[17,"XF86XK_LightBulb","","",N,N],[17,"XF86XK_Shop","","",N,N],[17,"XF86XK_History","","",N,N],[17,"XF86XK_OpenURL","","",N,N],[17,"XF86XK_AddFavorite","","",N,N],[17,"XF86XK_HotLinks","","",N,N],[17,"XF86XK_BrightnessAdjust","","",N,N],[17,"XF86XK_Finance","","",N,N],[17,"XF86XK_Community","","",N,N],[17,"XF86XK_AudioRewind","","",N,N],[17,"XF86XK_BackForward","","",N,N],[17,"XF86XK_Launch0","","",N,N],[17,"XF86XK_Launch1","","",N,N],[17,"XF86XK_Launch2","","",N,N],[17,"XF86XK_Launch3","","",N,N],[17,"XF86XK_Launch4","","",N,N],[17,"XF86XK_Launch5","","",N,N],[17,"XF86XK_Launch6","","",N,N],[17,"XF86XK_Launch7","","",N,N],[17,"XF86XK_Launch8","","",N,N],[17,"XF86XK_Launch9","","",N,N],[17,"XF86XK_LaunchA","","",N,N],[17,"XF86XK_LaunchB","","",N,N],[17,"XF86XK_LaunchC","","",N,N],[17,"XF86XK_LaunchD","","",N,N],[17,"XF86XK_LaunchE","","",N,N],[17,"XF86XK_LaunchF","","",N,N],[17,"XF86XK_ApplicationLeft","","",N,N],[17,"XF86XK_ApplicationRight","","",N,N],[17,"XF86XK_Book","","",N,N],[17,"XF86XK_CD","","",N,N],[17,"XF86XK_Calculater","","",N,N],[17,"XF86XK_Clear","","",N,N],[17,"XF86XK_Close","","",N,N],[17,"XF86XK_Copy","","",N,N],[17,"XF86XK_Cut","","",N,N],[17,"XF86XK_Display","","",N,N],[17,"XF86XK_DOS","","",N,N],[17,"XF86XK_Documents","","",N,N],[17,"XF86XK_Excel","","",N,N],[17,"XF86XK_Explorer","","",N,N],[17,"XF86XK_Game","","",N,N],[17,"XF86XK_Go","","",N,N],[17,"XF86XK_iTouch","","",N,N],[17,"XF86XK_LogOff","","",N,N],[17,"XF86XK_Market","","",N,N],[17,"XF86XK_Meeting","","",N,N],[17,"XF86XK_MenuKB","","",N,N],[17,"XF86XK_MenuPB","","",N,N],[17,"XF86XK_MySites","","",N,N],[17,"XF86XK_New","","",N,N],[17,"XF86XK_News","","",N,N],[17,"XF86XK_OfficeHome","","",N,N],[17,"XF86XK_Open","","",N,N],[17,"XF86XK_Option","","",N,N],[17,"XF86XK_Paste","","",N,N],[17,"XF86XK_Phone","","",N,N],[17,"XF86XK_Q","","",N,N],[17,"XF86XK_Reply","","",N,N],[17,"XF86XK_Reload","","",N,N],[17,"XF86XK_RotateWindows","","",N,N],[17,"XF86XK_RotationPB","","",N,N],[17,"XF86XK_RotationKB","","",N,N],[17,"XF86XK_Save","","",N,N],[17,"XF86XK_ScrollUp","","",N,N],[17,"XF86XK_ScrollDown","","",N,N],[17,"XF86XK_ScrollClick","","",N,N],[17,"XF86XK_Send","","",N,N],[17,"XF86XK_Spell","","",N,N],[17,"XF86XK_SplitScreen","","",N,N],[17,"XF86XK_Support","","",N,N],[17,"XF86XK_TaskPane","","",N,N],[17,"XF86XK_Terminal","","",N,N],[17,"XF86XK_Tools","","",N,N],[17,"XF86XK_Travel","","",N,N],[17,"XF86XK_UserPB","","",N,N],[17,"XF86XK_User1KB","","",N,N],[17,"XF86XK_User2KB","","",N,N],[17,"XF86XK_Video","","",N,N],[17,"XF86XK_WheelButton","","",N,N],[17,"XF86XK_Word","","",N,N],[17,"XF86XK_Xfer","","",N,N],[17,"XF86XK_ZoomIn","","",N,N],[17,"XF86XK_ZoomOut","","",N,N],[17,"XF86XK_Away","","",N,N],[17,"XF86XK_Messenger","","",N,N],[17,"XF86XK_WebCam","","",N,N],[17,"XF86XK_MailForward","","",N,N],[17,"XF86XK_Pictures","","",N,N],[17,"XF86XK_Music","","",N,N],[17,"XF86XK_Battery","","",N,N],[17,"XF86XK_Bluetooth","","",N,N],[17,"XF86XK_WLAN","","",N,N],[17,"XF86XK_UWB","","",N,N],[17,"XF86XK_AudioForward","","",N,N],[17,"XF86XK_AudioRepeat","","",N,N],[17,"XF86XK_AudioRandomPlay","","",N,N],[17,"XF86XK_Subtitle","","",N,N],[17,"XF86XK_AudioCycleTrack","","",N,N],[17,"XF86XK_CycleAngle","","",N,N],[17,"XF86XK_FrameBack","","",N,N],[17,"XF86XK_FrameForward","","",N,N],[17,"XF86XK_Time","","",N,N],[17,"XF86XK_Select","","",N,N],[17,"XF86XK_View","","",N,N],[17,"XF86XK_TopMenu","","",N,N],[17,"XF86XK_Red","","",N,N],[17,"XF86XK_Green","","",N,N],[17,"XF86XK_Yellow","","",N,N],[17,"XF86XK_Blue","","",N,N],[17,"XF86XK_Suspend","","",N,N],[17,"XF86XK_Hibernate","","",N,N],[17,"XF86XK_TouchpadToggle","","",N,N],[17,"XF86XK_TouchpadOn","","",N,N],[17,"XF86XK_TouchpadOff","","",N,N],[17,"XF86XK_AudioMicMute","","",N,N],[17,"XF86XK_Switch_VT_1","","",N,N],[17,"XF86XK_Switch_VT_2","","",N,N],[17,"XF86XK_Switch_VT_3","","",N,N],[17,"XF86XK_Switch_VT_4","","",N,N],[17,"XF86XK_Switch_VT_5","","",N,N],[17,"XF86XK_Switch_VT_6","","",N,N],[17,"XF86XK_Switch_VT_7","","",N,N],[17,"XF86XK_Switch_VT_8","","",N,N],[17,"XF86XK_Switch_VT_9","","",N,N],[17,"XF86XK_Switch_VT_10","","",N,N],[17,"XF86XK_Switch_VT_11","","",N,N],[17,"XF86XK_Switch_VT_12","","",N,N],[17,"XF86XK_Ungrab","","",N,N],[17,"XF86XK_ClearGrab","","",N,N],[17,"XF86XK_Next_VMode","","",N,N],[17,"XF86XK_Prev_VMode","","",N,N],[17,"XF86XK_LogWindowTree","","",N,N],[17,"XF86XK_LogGrabInfo","","",N,N],[17,"XK_ISO_Lock","","",N,N],[17,"XK_ISO_Level2_Latch","","",N,N],[17,"XK_ISO_Level3_Shift","","",N,N],[17,"XK_ISO_Level3_Latch","","",N,N],[17,"XK_ISO_Level3_Lock","","",N,N],[17,"XK_ISO_Level5_Shift","","",N,N],[17,"XK_ISO_Level5_Latch","","",N,N],[17,"XK_ISO_Level5_Lock","","",N,N],[17,"XK_ISO_Group_Shift","","",N,N],[17,"XK_ISO_Group_Latch","","",N,N],[17,"XK_ISO_Group_Lock","","",N,N],[17,"XK_ISO_Next_Group","","",N,N],[17,"XK_ISO_Next_Group_Lock","","",N,N],[17,"XK_ISO_Prev_Group","","",N,N],[17,"XK_ISO_Prev_Group_Lock","","",N,N],[17,"XK_ISO_First_Group","","",N,N],[17,"XK_ISO_First_Group_Lock","","",N,N],[17,"XK_ISO_Last_Group","","",N,N],[17,"XK_ISO_Last_Group_Lock","","",N,N],[17,"XK_ISO_Left_Tab","","",N,N],[17,"XK_ISO_Move_Line_Up","","",N,N],[17,"XK_ISO_Move_Line_Down","","",N,N],[17,"XK_ISO_Partial_Line_Up","","",N,N],[17,"XK_ISO_Partial_Line_Down","","",N,N],[17,"XK_ISO_Partial_Space_Left","","",N,N],[17,"XK_ISO_Partial_Space_Right","","",N,N],[17,"XK_ISO_Set_Margin_Left","","",N,N],[17,"XK_ISO_Set_Margin_Right","","",N,N],[17,"XK_ISO_Release_Margin_Left","","",N,N],[17,"XK_ISO_Release_Margin_Right","","",N,N],[17,"XK_ISO_Release_Both_Margins","","",N,N],[17,"XK_ISO_Fast_Cursor_Left","","",N,N],[17,"XK_ISO_Fast_Cursor_Right","","",N,N],[17,"XK_ISO_Fast_Cursor_Up","","",N,N],[17,"XK_ISO_Fast_Cursor_Down","","",N,N],[17,"XK_ISO_Continuous_Underline","","",N,N],[17,"XK_ISO_Discontinuous_Underline","","",N,N],[17,"XK_ISO_Emphasize","","",N,N],[17,"XK_ISO_Center_Object","","",N,N],[17,"XK_ISO_Enter","","",N,N],[17,"XK_dead_grave","","",N,N],[17,"XK_dead_acute","","",N,N],[17,"XK_dead_circumflex","","",N,N],[17,"XK_dead_tilde","","",N,N],[17,"XK_dead_perispomeni","","",N,N],[17,"XK_dead_macron","","",N,N],[17,"XK_dead_breve","","",N,N],[17,"XK_dead_abovedot","","",N,N],[17,"XK_dead_diaeresis","","",N,N],[17,"XK_dead_abovering","","",N,N],[17,"XK_dead_doubleacute","","",N,N],[17,"XK_dead_caron","","",N,N],[17,"XK_dead_cedilla","","",N,N],[17,"XK_dead_ogonek","","",N,N],[17,"XK_dead_iota","","",N,N],[17,"XK_dead_voiced_sound","","",N,N],[17,"XK_dead_semivoiced_sound","","",N,N],[17,"XK_dead_belowdot","","",N,N],[17,"XK_dead_hook","","",N,N],[17,"XK_dead_horn","","",N,N],[17,"XK_dead_stroke","","",N,N],[17,"XK_dead_abovecomma","","",N,N],[17,"XK_dead_psili","","",N,N],[17,"XK_dead_abovereversedcomma","","",N,N],[17,"XK_dead_dasia","","",N,N],[17,"XK_dead_doublegrave","","",N,N],[17,"XK_dead_belowring","","",N,N],[17,"XK_dead_belowmacron","","",N,N],[17,"XK_dead_belowcircumflex","","",N,N],[17,"XK_dead_belowtilde","","",N,N],[17,"XK_dead_belowbreve","","",N,N],[17,"XK_dead_belowdiaeresis","","",N,N],[17,"XK_dead_invertedbreve","","",N,N],[17,"XK_dead_belowcomma","","",N,N],[17,"XK_dead_currency","","",N,N],[17,"XK_dead_lowline","","",N,N],[17,"XK_dead_aboveverticalline","","",N,N],[17,"XK_dead_belowverticalline","","",N,N],[17,"XK_dead_longsolidusoverlay","","",N,N],[17,"XK_dead_a","","",N,N],[17,"XK_dead_A","","",N,N],[17,"XK_dead_e","","",N,N],[17,"XK_dead_E","","",N,N],[17,"XK_dead_i","","",N,N],[17,"XK_dead_I","","",N,N],[17,"XK_dead_o","","",N,N],[17,"XK_dead_O","","",N,N],[17,"XK_dead_u","","",N,N],[17,"XK_dead_U","","",N,N],[17,"XK_dead_small_schwa","","",N,N],[17,"XK_dead_capital_schwa","","",N,N],[17,"XK_dead_greek","","",N,N],[17,"XK_First_Virtual_Screen","","",N,N],[17,"XK_Prev_Virtual_Screen","","",N,N],[17,"XK_Next_Virtual_Screen","","",N,N],[17,"XK_Last_Virtual_Screen","","",N,N],[17,"XK_Terminate_Server","","",N,N],[17,"XK_AccessX_Enable","","",N,N],[17,"XK_AccessX_Feedback_Enable","","",N,N],[17,"XK_RepeatKeys_Enable","","",N,N],[17,"XK_SlowKeys_Enable","","",N,N],[17,"XK_BounceKeys_Enable","","",N,N],[17,"XK_StickyKeys_Enable","","",N,N],[17,"XK_MouseKeys_Enable","","",N,N],[17,"XK_MouseKeys_Accel_Enable","","",N,N],[17,"XK_Overlay1_Enable","","",N,N],[17,"XK_Overlay2_Enable","","",N,N],[17,"XK_AudibleBell_Enable","","",N,N],[17,"XK_Pointer_Left","","",N,N],[17,"XK_Pointer_Right","","",N,N],[17,"XK_Pointer_Up","","",N,N],[17,"XK_Pointer_Down","","",N,N],[17,"XK_Pointer_UpLeft","","",N,N],[17,"XK_Pointer_UpRight","","",N,N],[17,"XK_Pointer_DownLeft","","",N,N],[17,"XK_Pointer_DownRight","","",N,N],[17,"XK_Pointer_Button_Dflt","","",N,N],[17,"XK_Pointer_Button1","","",N,N],[17,"XK_Pointer_Button2","","",N,N],[17,"XK_Pointer_Button3","","",N,N],[17,"XK_Pointer_Button4","","",N,N],[17,"XK_Pointer_Button5","","",N,N],[17,"XK_Pointer_DblClick_Dflt","","",N,N],[17,"XK_Pointer_DblClick1","","",N,N],[17,"XK_Pointer_DblClick2","","",N,N],[17,"XK_Pointer_DblClick3","","",N,N],[17,"XK_Pointer_DblClick4","","",N,N],[17,"XK_Pointer_DblClick5","","",N,N],[17,"XK_Pointer_Drag_Dflt","","",N,N],[17,"XK_Pointer_Drag1","","",N,N],[17,"XK_Pointer_Drag2","","",N,N],[17,"XK_Pointer_Drag3","","",N,N],[17,"XK_Pointer_Drag4","","",N,N],[17,"XK_Pointer_Drag5","","",N,N],[17,"XK_Pointer_EnableKeys","","",N,N],[17,"XK_Pointer_Accelerate","","",N,N],[17,"XK_Pointer_DfltBtnNext","","",N,N],[17,"XK_Pointer_DfltBtnPrev","","",N,N],[17,"XK_ch","","",N,N],[17,"XK_Ch","","",N,N],[17,"XK_CH","","",N,N],[17,"XK_c_h","","",N,N],[17,"XK_C_h","","",N,N],[17,"XK_C_H","","",N,N],[0,"xcursor","x11_dl","",N,N],[3,"Xcursor","x11_dl::xcursor","",N,N],[12,"XcursorAnimateCreate","","",104,N],[12,"XcursorAnimateDestroy","","",104,N],[12,"XcursorAnimateNext","","",104,N],[12,"XcursorCommentCreate","","",104,N],[12,"XcursorCommentDestroy","","",104,N],[12,"XcursorCommentsCreate","","",104,N],[12,"XcursorCommentsDestroy","","",104,N],[12,"XcursorCursorsCreate","","",104,N],[12,"XcursorCursorsDestroy","","",104,N],[12,"XcursorFileLoad","","",104,N],[12,"XcursorFileLoadAllImages","","",104,N],[12,"XcursorFileLoadImage","","",104,N],[12,"XcursorFileLoadImages","","",104,N],[12,"XcursorFilenameLoad","","",104,N],[12,"XcursorFilenameLoadAllImages","","",104,N],[12,"XcursorFilenameLoadCursor","","",104,N],[12,"XcursorFilenameLoadCursors","","",104,N],[12,"XcursorFilenameLoadImage","","",104,N],[12,"XcursorFilenameLoadImages","","",104,N],[12,"XcursorFilenameSave","","",104,N],[12,"XcursorFilenameSaveImages","","",104,N],[12,"XcursorFileSave","","",104,N],[12,"XcursorFileSaveImages","","",104,N],[12,"XcursorGetDefaultSize","","",104,N],[12,"XcursorGetTheme","","",104,N],[12,"XcursorGetThemeCore","","",104,N],[12,"XcursorImageCreate","","",104,N],[12,"XcursorImageDestroy","","",104,N],[12,"XcursorImageHash","","",104,N],[12,"XcursorImageLoadCursor","","",104,N],[12,"XcursorImagesCreate","","",104,N],[12,"XcursorImagesDestroy","","",104,N],[12,"XcursorImagesLoadCursor","","",104,N],[12,"XcursorImagesLoadCursors","","",104,N],[12,"XcursorImagesSetName","","",104,N],[12,"XcursorLibraryLoadCursor","","",104,N],[12,"XcursorLibraryLoadCursors","","",104,N],[12,"XcursorLibraryLoadImage","","",104,N],[12,"XcursorLibraryLoadImages","","",104,N],[12,"XcursorLibraryPath","","",104,N],[12,"XcursorLibraryShape","","",104,N],[12,"XcursorNoticeCreateBitmap","","",104,N],[12,"XcursorNoticePutBitmap","","",104,N],[12,"XcursorSetDefaultSize","","",104,N],[12,"XcursorSetTheme","","",104,N],[12,"XcursorSetThemeCore","","",104,N],[12,"XcursorShapeLoadCursor","","",104,N],[12,"XcursorShapeLoadCursors","","",104,N],[12,"XcursorShapeLoadImage","","",104,N],[12,"XcursorShapeLoadImages","","",104,N],[12,"XcursorSupportsAnim","","",104,N],[12,"XcursorSupportsARGB","","",104,N],[12,"XcursorTryShapeBitmapCursor","","",104,N],[12,"XcursorTryShapeCursor","","",104,N],[12,"XcursorXcFileLoad","","",104,N],[12,"XcursorXcFileLoadAllImages","","",104,N],[12,"XcursorXcFileLoadImage","","",104,N],[12,"XcursorXcFileLoadImages","","",104,N],[12,"XcursorXcFileSave","","",104,N],[3,"_XcursorAnimate","","",N,N],[12,"cursors","","",105,N],[12,"sequence","","",105,N],[3,"_XcursorChunkHeader","","",N,N],[12,"header","","",106,N],[12,"type_","","",106,N],[12,"subtype","","",106,N],[12,"version","","",106,N],[3,"_XcursorComment","","",N,N],[12,"version","","",107,N],[12,"comment_type","","",107,N],[12,"comment","","",107,N],[3,"_XcursorComments","","",N,N],[12,"ncomment","","",108,N],[12,"comments","","",108,N],[3,"_XcursorCursors","","",N,N],[12,"dpy","","",109,N],[12,"ref_","","",109,N],[12,"ncursor","","",109,N],[12,"cursors","","",109,N],[3,"_XcursorFile","","",N,N],[12,"closure","","",110,N],[12,"read","","",110,N],[12,"write","","",110,N],[12,"seek","","",110,N],[3,"_XcursorFileHeader","","",N,N],[12,"magic","","",111,N],[12,"header","","",111,N],[12,"version","","",111,N],[12,"ntoc","","",111,N],[12,"tocs","","",111,N],[3,"_XcursorFileToc","","",N,N],[12,"type_","","",112,N],[12,"subtype","","",112,N],[12,"position","","",112,N],[3,"_XcursorImage","","",N,N],[12,"version","","",113,N],[12,"size","","",113,N],[12,"width","","",113,N],[12,"height","","",113,N],[12,"xhot","","",113,N],[12,"yhot","","",113,N],[12,"delay","","",113,N],[12,"pixels","","",113,N],[3,"_XcursorImages","","",N,N],[12,"nimage","","",114,N],[12,"images","","",114,N],[12,"name","","",114,N],[6,"XcursorBool","","",N,N],[6,"XcursorDim","","",N,N],[6,"XcursorPixel","","",N,N],[6,"XcursorUInt","","",N,N],[6,"XcursorAnimate","","",N,N],[6,"XcursorChunkHeader","","",N,N],[6,"XcursorComment","","",N,N],[6,"XcursorComments","","",N,N],[6,"XcursorCursors","","",N,N],[6,"XcursorFile","","",N,N],[6,"XcursorFileHeader","","",N,N],[6,"XcursorFileToc","","",N,N],[6,"XcursorImage","","",N,N],[6,"XcursorImages","","",N,N],[11,"open","","",104,[[],["result",["xcursor","openerror"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"clone","","",105,[[["self"]],["_xcursoranimate"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"clone","","",106,[[["self"]],["_xcursorchunkheader"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"clone","","",107,[[["self"]],["_xcursorcomment"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"clone","","",108,[[["self"]],["_xcursorcomments"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"clone","","",109,[[["self"]],["_xcursorcursors"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"clone","","",110,[[["self"]],["_xcursorfile"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",111,[[["self"]],["_xcursorfileheader"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"clone","","",112,[[["self"]],["_xcursorfiletoc"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"clone","","",113,[[["self"]],["_xcursorimage"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"clone","","",114,[[["self"]],["_xcursorimages"]]],[0,"xf86vmode","x11_dl","",N,N],[3,"Xf86vmode","x11_dl::xf86vmode","",N,N],[12,"XF86VidModeAddModeLine","","",115,N],[12,"XF86VidModeDeleteModeLine","","",115,N],[12,"XF86VidModeGetAllModeLines","","",115,N],[12,"XF86VidModeGetDotClocks","","",115,N],[12,"XF86VidModeGetGamma","","",115,N],[12,"XF86VidModeGetGammaRamp","","",115,N],[12,"XF86VidModeGetGammaRampSize","","",115,N],[12,"XF86VidModeGetModeLine","","",115,N],[12,"XF86VidModeGetMonitor","","",115,N],[12,"XF86VidModeGetPermissions","","",115,N],[12,"XF86VidModeGetViewPort","","",115,N],[12,"XF86VidModeLockModeSwitch","","",115,N],[12,"XF86VidModeModModeLine","","",115,N],[12,"XF86VidModeQueryExtension","","",115,N],[12,"XF86VidModeQueryVersion","","",115,N],[12,"XF86VidModeSetClientVersion","","",115,N],[12,"XF86VidModeSetGamma","","",115,N],[12,"XF86VidModeSetGammaRamp","","",115,N],[12,"XF86VidModeSetViewPort","","",115,N],[12,"XF86VidModeSwitchMode","","",115,N],[12,"XF86VidModeSwitchToMode","","",115,N],[12,"XF86VidModeValidateModeLine","","",115,N],[3,"XF86VidModeGamma","","",N,N],[12,"red","","",116,N],[12,"green","","",116,N],[12,"blue","","",116,N],[3,"XF86VidModeModeInfo","","",N,N],[12,"dotclock","","",117,N],[12,"hdisplay","","",117,N],[12,"hsyncstart","","",117,N],[12,"hsyncend","","",117,N],[12,"htotal","","",117,N],[12,"hskew","","",117,N],[12,"vdisplay","","",117,N],[12,"vsyncstart","","",117,N],[12,"vsyncend","","",117,N],[12,"vtotal","","",117,N],[12,"flags","","",117,N],[12,"privsize","","",117,N],[12,"private","","",117,N],[3,"XF86VidModeModeLine","","",N,N],[12,"hdisplay","","",118,N],[12,"hsyncstart","","",118,N],[12,"hsyncend","","",118,N],[12,"htotal","","",118,N],[12,"hskew","","",118,N],[12,"vdisplay","","",118,N],[12,"vsyncstart","","",118,N],[12,"vsyncend","","",118,N],[12,"vtotal","","",118,N],[12,"flags","","",118,N],[12,"privsize","","",118,N],[12,"private","","",118,N],[3,"XF86VidModeMonitor","","",N,N],[12,"vendor","","",119,N],[12,"model","","",119,N],[12,"EMPTY","","",119,N],[12,"nhsync","","",119,N],[12,"hsync","","",119,N],[12,"nvsync","","",119,N],[12,"vsync","","",119,N],[3,"XF86VidModeSyncRange","","",N,N],[12,"hi","","",120,N],[12,"lo","","",120,N],[3,"XF86VidModeNotifyEvent","","",N,N],[12,"type_","","",121,N],[12,"serial","","",121,N],[12,"send_event","","",121,N],[12,"display","","",121,N],[12,"root","","",121,N],[12,"state","","",121,N],[12,"kind","","",121,N],[12,"forced","","",121,N],[12,"time","","",121,N],[11,"open","","",115,[[],["result",["xf86vmode","openerror"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"clone","","",116,[[["self"]],["xf86vidmodegamma"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"clone","","",117,[[["self"]],["xf86vidmodemodeinfo"]]],[11,"eq","","",117,[[["self"],["xf86vidmodemodeinfo"]],["bool"]]],[11,"ne","","",117,[[["self"],["xf86vidmodemodeinfo"]],["bool"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"clone","","",118,[[["self"]],["xf86vidmodemodeline"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"clone","","",119,[[["self"]],["xf86vidmodemonitor"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"clone","","",120,[[["self"]],["xf86vidmodesyncrange"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"clone","","",121,[[["self"]],["xf86vidmodenotifyevent"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xf86vidmodenotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xf86vidmodenotifyevent"]]],[11,"from","","",99,[[["xf86vidmodenotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xf86vidmodenotifyevent"]],["xevent"]]],[11,"from","x11_dl::xf86vmode","",121,[[["xevent"]],["xf86vidmodenotifyevent"]]],[11,"from","","",121,[[["xevent"]],["xf86vidmodenotifyevent"]]],[0,"xfixes","x11_dl","",N,N],[6,"PointerBarrier","x11_dl::xfixes","",N,N],[0,"xft","x11_dl","",N,N],[3,"Xft","x11_dl::xft","",N,N],[12,"XftCharExists","","",122,N],[12,"XftCharFontSpecRender","","",122,N],[12,"XftCharIndex","","",122,N],[12,"XftCharSpecRender","","",122,N],[12,"XftColorAllocName","","",122,N],[12,"XftColorAllocValue","","",122,N],[12,"XftColorFree","","",122,N],[12,"XftDefaultHasRender","","",122,N],[12,"XftDefaultSet","","",122,N],[12,"XftDefaultSubstitute","","",122,N],[12,"XftDrawChange","","",122,N],[12,"XftDrawCharFontSpec","","",122,N],[12,"XftDrawCharSpec","","",122,N],[12,"XftDrawColormap","","",122,N],[12,"XftDrawCreate","","",122,N],[12,"XftDrawCreateAlpha","","",122,N],[12,"XftDrawCreateBitmap","","",122,N],[12,"XftDrawDestroy","","",122,N],[12,"XftDrawDisplay","","",122,N],[12,"XftDrawDrawable","","",122,N],[12,"XftDrawGlyphFontSpec","","",122,N],[12,"XftDrawGlyphs","","",122,N],[12,"XftDrawGlyphSpec","","",122,N],[12,"XftDrawPicture","","",122,N],[12,"XftDrawRect","","",122,N],[12,"XftDrawSetClip","","",122,N],[12,"XftDrawSetClipRectangles","","",122,N],[12,"XftDrawSetSubwindowMode","","",122,N],[12,"XftDrawSrcPicture","","",122,N],[12,"XftDrawString16","","",122,N],[12,"XftDrawString32","","",122,N],[12,"XftDrawString8","","",122,N],[12,"XftDrawStringUtf16","","",122,N],[12,"XftDrawStringUtf8","","",122,N],[12,"XftDrawVisual","","",122,N],[12,"XftFontCheckGlyph","","",122,N],[12,"XftFontClose","","",122,N],[12,"XftFontCopy","","",122,N],[12,"XftFontInfoCreate","","",122,N],[12,"XftFontInfoDestroy","","",122,N],[12,"XftFontInfoEqual","","",122,N],[12,"XftFontInfoHash","","",122,N],[12,"XftFontLoadGlyphs","","",122,N],[12,"XftFontMatch","","",122,N],[12,"XftFontOpenInfo","","",122,N],[12,"XftFontOpenName","","",122,N],[12,"XftFontOpenPattern","","",122,N],[12,"XftFontOpenXlfd","","",122,N],[12,"XftFontUnloadGlyphs","","",122,N],[12,"XftGetVersion","","",122,N],[12,"XftGlyphExtents","","",122,N],[12,"XftGlyphFontSpecRender","","",122,N],[12,"XftGlyphRender","","",122,N],[12,"XftGlyphSpecRender","","",122,N],[12,"XftInit","","",122,N],[12,"XftInitFtLibrary","","",122,N],[12,"XftLockFace","","",122,N],[12,"XftNameParse","","",122,N],[12,"XftNameUnparse","","",122,N],[12,"XftTextExtents16","","",122,N],[12,"XftTextExtents32","","",122,N],[12,"XftTextExtents8","","",122,N],[12,"XftTextExtentsUtf16","","",122,N],[12,"XftTextExtentsUtf8","","",122,N],[12,"XftTextRender16","","",122,N],[12,"XftTextRender16BE","","",122,N],[12,"XftTextRender16LE","","",122,N],[12,"XftTextRender32","","",122,N],[12,"XftTextRender32BE","","",122,N],[12,"XftTextRender32LE","","",122,N],[12,"XftTextRender8","","",122,N],[12,"XftTextRenderUtf16","","",122,N],[12,"XftTextRenderUtf8","","",122,N],[12,"XftUnlockFace","","",122,N],[12,"XftXlfdParse","","",122,N],[12,"XftFontOpen","","",122,N],[12,"XftListFonts","","",122,N],[3,"XftFont","","",N,N],[12,"ascent","","",123,N],[12,"descent","","",123,N],[12,"height","","",123,N],[12,"max_advance_width","","",123,N],[12,"charset","","",123,N],[12,"pattern","","",123,N],[3,"XftColor","","",N,N],[12,"pixel","","",124,N],[12,"color","","",124,N],[3,"XftCharSpec","","",N,N],[12,"ucs4","","",125,N],[12,"x","","",125,N],[12,"y","","",125,N],[3,"XftCharFontSpec","","",N,N],[12,"font","","",126,N],[12,"ucs4","","",126,N],[12,"x","","",126,N],[12,"y","","",126,N],[3,"XftFontSet","","",N,N],[12,"nfont","","",127,N],[12,"sfont","","",127,N],[12,"fonts","","",127,N],[3,"XftGlyphSpec","","",N,N],[12,"glyph","","",128,N],[12,"x","","",128,N],[12,"y","","",128,N],[3,"XftGlyphFontSpec","","",N,N],[12,"font","","",129,N],[12,"glyph","","",129,N],[12,"x","","",129,N],[12,"y","","",129,N],[4,"FT_FaceRec","","",N,N],[4,"FcCharSet","","",N,N],[4,"FcPattern","","",N,N],[4,"FcEndian","","",N,N],[13,"Big","","",130,N],[13,"Little","","",130,N],[4,"FcResult","","",N,N],[13,"Match","","",131,N],[13,"NoMatch","","",131,N],[13,"TypeMismatch","","",131,N],[13,"NoId","","",131,N],[13,"OutOfMemory","","",131,N],[4,"XftFontInfo","","",N,N],[4,"XftDraw","","",N,N],[4,"XftPattern","","",N,N],[6,"FT_UInt","","",N,N],[6,"FcChar32","","",N,N],[17,"XFT_FAMILY","","",N,N],[17,"XFT_STYLE","","",N,N],[17,"XFT_SLANT","","",N,N],[17,"XFT_WEIGHT","","",N,N],[17,"XFT_SIZE","","",N,N],[17,"XFT_PIXEL_SIZE","","",N,N],[17,"XFT_SPACING","","",N,N],[17,"XFT_FOUNDRY","","",N,N],[17,"XFT_ANTIALIAS","","",N,N],[17,"XFT_SLANT_ROMAN","","",N,N],[17,"XFT_SLANT_ITALIC","","",N,N],[17,"XFT_SLANT_OBLIQUE","","",N,N],[17,"XftTypeVoid","","",N,N],[17,"XftTypeInteger","","",N,N],[17,"XftTypeDouble","","",N,N],[17,"XftTypeString","","",N,N],[17,"XftTypeBool","","",N,N],[17,"XftTypeMatrix","","",N,N],[11,"open","","",122,[[],["result",["xft","openerror"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"clone","","",123,[[["self"]],["xftfont"]]],[11,"eq","","",123,[[["self"],["xftfont"]],["bool"]]],[11,"ne","","",123,[[["self"],["xftfont"]],["bool"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"clone","","",124,[[["self"]],["xftcolor"]]],[11,"eq","","",124,[[["self"],["xftcolor"]],["bool"]]],[11,"ne","","",124,[[["self"],["xftcolor"]],["bool"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"clone","","",125,[[["self"]],["xftcharspec"]]],[11,"eq","","",125,[[["self"],["xftcharspec"]],["bool"]]],[11,"ne","","",125,[[["self"],["xftcharspec"]],["bool"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"clone","","",126,[[["self"]],["xftcharfontspec"]]],[11,"eq","","",126,[[["self"],["xftcharfontspec"]],["bool"]]],[11,"ne","","",126,[[["self"],["xftcharfontspec"]],["bool"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"clone","","",127,[[["self"]],["xftfontset"]]],[11,"eq","","",127,[[["self"],["xftfontset"]],["bool"]]],[11,"ne","","",127,[[["self"],["xftfontset"]],["bool"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"clone","","",128,[[["self"]],["xftglyphspec"]]],[11,"eq","","",128,[[["self"],["xftglyphspec"]],["bool"]]],[11,"ne","","",128,[[["self"],["xftglyphspec"]],["bool"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"clone","","",129,[[["self"]],["xftglyphfontspec"]]],[11,"eq","","",129,[[["self"],["xftglyphfontspec"]],["bool"]]],[11,"ne","","",129,[[["self"],["xftglyphfontspec"]],["bool"]]],[0,"xinerama","x11_dl","",N,N],[3,"Xlib","x11_dl::xinerama","",N,N],[12,"XineramaIsActive","","",132,N],[12,"XineramaQueryExtension","","",132,N],[12,"XineramaQueryScreens","","",132,N],[12,"XineramaQueryVersion","","",132,N],[12,"XPanoramiXAllocInfo","","",132,N],[12,"XPanoramiXGetScreenCount","","",132,N],[12,"XPanoramiXGetScreenSize","","",132,N],[12,"XPanoramiXGetState","","",132,N],[12,"XPanoramiXQueryExtension","","",132,N],[12,"XPanoramiXQueryVersion","","",132,N],[3,"XineramaScreenInfo","","",N,N],[12,"screen_number","","",133,N],[12,"x_org","","",133,N],[12,"y_org","","",133,N],[12,"width","","",133,N],[12,"height","","",133,N],[3,"XPanoramiXInfo","","",N,N],[12,"window","","",134,N],[12,"screen","","",134,N],[12,"State","","",134,N],[12,"width","","",134,N],[12,"height","","",134,N],[12,"ScreenCount","","",134,N],[12,"eventMask","","",134,N],[11,"open","","",132,[[],["result",["xlib","openerror"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"clone","","",133,[[["self"]],["xineramascreeninfo"]]],[11,"eq","","",133,[[["self"],["xineramascreeninfo"]],["bool"]]],[11,"ne","","",133,[[["self"],["xineramascreeninfo"]],["bool"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"clone","","",134,[[["self"]],["xpanoramixinfo"]]],[11,"eq","","",134,[[["self"],["xpanoramixinfo"]],["bool"]]],[11,"ne","","",134,[[["self"],["xpanoramixinfo"]],["bool"]]],[0,"xinput","x11_dl","",N,N],[3,"XInput","x11_dl::xinput","",N,N],[12,"XAllowDeviceEvents","","",135,N],[12,"XChangeDeviceControl","","",135,N],[12,"XChangeDeviceDontPropagateList","","",135,N],[12,"XChangeDeviceKeyMapping","","",135,N],[12,"XChangeDeviceProperty","","",135,N],[12,"XChangeFeedbackControl","","",135,N],[12,"XChangeKeyboardDevice","","",135,N],[12,"XChangePointerDevice","","",135,N],[12,"XCloseDevice","","",135,N],[12,"XDeleteDeviceProperty","","",135,N],[12,"XDeviceBell","","",135,N],[12,"XFreeDeviceControl","","",135,N],[12,"XFreeDeviceList","","",135,N],[12,"XFreeDeviceMotionEvents","","",135,N],[12,"XFreeDeviceState","","",135,N],[12,"XFreeFeedbackList","","",135,N],[12,"XGetDeviceButtonMapping","","",135,N],[12,"XGetDeviceControl","","",135,N],[12,"XGetDeviceDontPropagateList","","",135,N],[12,"XGetDeviceFocus","","",135,N],[12,"XGetDeviceKeyMapping","","",135,N],[12,"XGetDeviceModifierMapping","","",135,N],[12,"XGetDeviceMotionEvents","","",135,N],[12,"XGetDeviceProperty","","",135,N],[12,"XGetExtensionVersion","","",135,N],[12,"XGetFeedbackControl","","",135,N],[12,"XGetSelectedExtensionEvents","","",135,N],[12,"XGrabDevice","","",135,N],[12,"XGrabDeviceButton","","",135,N],[12,"XGrabDeviceKey","","",135,N],[12,"XListDeviceProperties","","",135,N],[12,"XListInputDevices","","",135,N],[12,"XOpenDevice","","",135,N],[12,"XQueryDeviceState","","",135,N],[12,"XSelectExtensionEvent","","",135,N],[12,"XSendExtensionEvent","","",135,N],[12,"XSetDeviceButtonMapping","","",135,N],[12,"XSetDeviceFocus","","",135,N],[12,"XSetDeviceMode","","",135,N],[12,"XSetDeviceModifierMapping","","",135,N],[12,"XSetDeviceValuators","","",135,N],[12,"XUngrabDevice","","",135,N],[12,"XUngrabDeviceButton","","",135,N],[12,"XUngrabDeviceKey","","",135,N],[3,"XDevice","","",N,N],[12,"device_id","","",136,N],[12,"num_classes","","",136,N],[12,"classes","","",136,N],[3,"XDeviceControl","","",N,N],[12,"control","","",137,N],[12,"length","","",137,N],[3,"XDeviceInfo","","",N,N],[12,"id","","",138,N],[12,"type_","","",138,N],[12,"name","","",138,N],[12,"num_classes","","",138,N],[12,"use_","","",138,N],[12,"inputclassinfo","","",138,N],[3,"XDeviceState","","",N,N],[12,"device_id","","",139,N],[12,"num_classes","","",139,N],[12,"data","","",139,N],[3,"XDeviceTimeCoord","","",N,N],[12,"time","","",140,N],[12,"data","","",140,N],[3,"XExtensionVersion","","",N,N],[12,"present","","",141,N],[12,"major_version","","",141,N],[12,"minor_version","","",141,N],[3,"XFeedbackControl","","",N,N],[12,"class","","",142,N],[12,"length","","",142,N],[12,"id","","",142,N],[3,"XFeedbackState","","",N,N],[12,"class","","",143,N],[12,"length","","",143,N],[12,"id","","",143,N],[3,"XInputClass","","",N,N],[12,"class","","",144,N],[12,"length","","",144,N],[3,"XInputClassInfo","","",N,N],[12,"input_class","","",145,N],[12,"event_type_base","","",145,N],[4,"_XAnyClassinfo","","",N,N],[6,"XAnyClassPtr","","",N,N],[11,"open","","",135,[[],["result",["xinput","openerror"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"clone","","",136,[[["self"]],["xdevice"]]],[11,"eq","","",136,[[["self"],["xdevice"]],["bool"]]],[11,"ne","","",136,[[["self"],["xdevice"]],["bool"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"clone","","",137,[[["self"]],["xdevicecontrol"]]],[11,"eq","","",137,[[["self"],["xdevicecontrol"]],["bool"]]],[11,"ne","","",137,[[["self"],["xdevicecontrol"]],["bool"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"clone","","",138,[[["self"]],["xdeviceinfo"]]],[11,"eq","","",138,[[["self"],["xdeviceinfo"]],["bool"]]],[11,"ne","","",138,[[["self"],["xdeviceinfo"]],["bool"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"clone","","",139,[[["self"]],["xdevicestate"]]],[11,"eq","","",139,[[["self"],["xdevicestate"]],["bool"]]],[11,"ne","","",139,[[["self"],["xdevicestate"]],["bool"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"clone","","",140,[[["self"]],["xdevicetimecoord"]]],[11,"eq","","",140,[[["self"],["xdevicetimecoord"]],["bool"]]],[11,"ne","","",140,[[["self"],["xdevicetimecoord"]],["bool"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"clone","","",141,[[["self"]],["xextensionversion"]]],[11,"eq","","",141,[[["self"],["xextensionversion"]],["bool"]]],[11,"ne","","",141,[[["self"],["xextensionversion"]],["bool"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"clone","","",142,[[["self"]],["xfeedbackcontrol"]]],[11,"eq","","",142,[[["self"],["xfeedbackcontrol"]],["bool"]]],[11,"ne","","",142,[[["self"],["xfeedbackcontrol"]],["bool"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"clone","","",143,[[["self"]],["xfeedbackstate"]]],[11,"eq","","",143,[[["self"],["xfeedbackstate"]],["bool"]]],[11,"ne","","",143,[[["self"],["xfeedbackstate"]],["bool"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"clone","","",144,[[["self"]],["xinputclass"]]],[11,"eq","","",144,[[["self"],["xinputclass"]],["bool"]]],[11,"ne","","",144,[[["self"],["xinputclass"]],["bool"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"clone","","",145,[[["self"]],["xinputclassinfo"]]],[11,"eq","","",145,[[["self"],["xinputclassinfo"]],["bool"]]],[11,"ne","","",145,[[["self"],["xinputclassinfo"]],["bool"]]],[0,"xinput2","x11_dl","",N,N],[3,"XInput2","x11_dl::xinput2","",N,N],[12,"XIAllowEvents","","",146,N],[12,"XIAllowTouchEvents","","",146,N],[12,"XIBarrierReleasePointer","","",146,N],[12,"XIBarrierReleasePointers","","",146,N],[12,"XIChangeHierarchy","","",146,N],[12,"XIChangeProperty","","",146,N],[12,"XIDefineCursor","","",146,N],[12,"XIDeleteProperty","","",146,N],[12,"XIFreeDeviceInfo","","",146,N],[12,"XIGetClientPointer","","",146,N],[12,"XIGetFocus","","",146,N],[12,"XIGetProperty","","",146,N],[12,"XIGetSelectedEvents","","",146,N],[12,"XIGrabButton","","",146,N],[12,"XIGrabDevice","","",146,N],[12,"XIGrabEnter","","",146,N],[12,"XIGrabFocusIn","","",146,N],[12,"XIGrabKeycode","","",146,N],[12,"XIGrabTouchBegin","","",146,N],[12,"XIListProperties","","",146,N],[12,"XIQueryDevice","","",146,N],[12,"XIQueryPointer","","",146,N],[12,"XIQueryVersion","","",146,N],[12,"XISelectEvents","","",146,N],[12,"XISetClientPointer","","",146,N],[12,"XISetFocus","","",146,N],[12,"XIUndefineCursor","","",146,N],[12,"XIUngrabButton","","",146,N],[12,"XIUngrabDevice","","",146,N],[12,"XIUngrabEnter","","",146,N],[12,"XIUngrabFocusIn","","",146,N],[12,"XIUngrabKeycode","","",146,N],[12,"XIUngrabTouchBegin","","",146,N],[12,"XIWarpPointer","","",146,N],[3,"XIAddMasterInfo","","",N,N],[12,"_type","","",147,N],[12,"name","","",147,N],[12,"send_core","","",147,N],[12,"enable","","",147,N],[3,"XIRemoveMasterInfo","","",N,N],[12,"_type","","",148,N],[12,"deviceid","","",148,N],[12,"return_mode","","",148,N],[12,"return_pointer","","",148,N],[12,"return_keyboard","","",148,N],[3,"XIAttachSlaveInfo","","",N,N],[12,"_type","","",149,N],[12,"deviceid","","",149,N],[12,"new_master","","",149,N],[3,"XIDetachSlaveInfo","","",N,N],[12,"_type","","",150,N],[12,"deviceid","","",150,N],[3,"XIAnyHierarchyChangeInfo","","",N,N],[12,"_bindgen_data_","","",151,N],[3,"XIModifierState","","",N,N],[12,"base","","",152,N],[12,"latched","","",152,N],[12,"locked","","",152,N],[12,"effective","","",152,N],[3,"XIButtonState","","",N,N],[12,"mask_len","","",153,N],[12,"mask","","",153,N],[3,"XIValuatorState","","",N,N],[12,"mask_len","","",154,N],[12,"mask","","",154,N],[12,"values","","",154,N],[3,"XIEventMask","","",N,N],[12,"deviceid","","",155,N],[12,"mask_len","","",155,N],[12,"mask","","",155,N],[3,"XIAnyClassInfo","","",N,N],[12,"_type","","",156,N],[12,"sourceid","","",156,N],[3,"XIButtonClassInfo","","",N,N],[12,"_type","","",157,N],[12,"sourceid","","",157,N],[12,"num_buttons","","",157,N],[12,"labels","","",157,N],[12,"state","","",157,N],[3,"XIKeyClassInfo","","",N,N],[12,"_type","","",158,N],[12,"sourceid","","",158,N],[12,"num_keycodes","","",158,N],[12,"keycodes","","",158,N],[3,"XIValuatorClassInfo","","",N,N],[12,"_type","","",159,N],[12,"sourceid","","",159,N],[12,"number","","",159,N],[12,"label","","",159,N],[12,"min","","",159,N],[12,"max","","",159,N],[12,"value","","",159,N],[12,"resolution","","",159,N],[12,"mode","","",159,N],[3,"XIScrollClassInfo","","",N,N],[12,"_type","","",160,N],[12,"sourceid","","",160,N],[12,"number","","",160,N],[12,"scroll_type","","",160,N],[12,"increment","","",160,N],[12,"flags","","",160,N],[3,"XITouchClassInfo","","",N,N],[12,"_type","","",161,N],[12,"sourceid","","",161,N],[12,"mode","","",161,N],[12,"num_touches","","",161,N],[3,"XIDeviceInfo","","",N,N],[12,"deviceid","","",162,N],[12,"name","","",162,N],[12,"_use","","",162,N],[12,"attachment","","",162,N],[12,"enabled","","",162,N],[12,"num_classes","","",162,N],[12,"classes","","",162,N],[3,"XIGrabModifiers","","",N,N],[12,"modifiers","","",163,N],[12,"status","","",163,N],[3,"XIBarrierReleasePointerInfo","","",N,N],[12,"deviceid","","",164,N],[12,"barrier","","",164,N],[12,"eventid","","",164,N],[3,"XIEvent","","",N,N],[12,"_type","","",165,N],[12,"serial","","",165,N],[12,"send_event","","",165,N],[12,"display","","",165,N],[12,"extension","","",165,N],[12,"evtype","","",165,N],[12,"time","","",165,N],[3,"XIHierarchyInfo","","",N,N],[12,"deviceid","","",166,N],[12,"attachment","","",166,N],[12,"_use","","",166,N],[12,"enabled","","",166,N],[12,"flags","","",166,N],[3,"XIHierarchyEvent","","",N,N],[12,"_type","","",167,N],[12,"serial","","",167,N],[12,"send_event","","",167,N],[12,"display","","",167,N],[12,"extension","","",167,N],[12,"evtype","","",167,N],[12,"time","","",167,N],[12,"flags","","",167,N],[12,"num_info","","",167,N],[12,"info","","",167,N],[3,"XIDeviceChangedEvent","","",N,N],[12,"_type","","",168,N],[12,"serial","","",168,N],[12,"send_event","","",168,N],[12,"display","","",168,N],[12,"extension","","",168,N],[12,"evtype","","",168,N],[12,"time","","",168,N],[12,"deviceid","","",168,N],[12,"sourceid","","",168,N],[12,"reason","","",168,N],[12,"num_classes","","",168,N],[12,"classes","","",168,N],[3,"XIDeviceEvent","","",N,N],[12,"_type","","",169,N],[12,"serial","","",169,N],[12,"send_event","","",169,N],[12,"display","","",169,N],[12,"extension","","",169,N],[12,"evtype","","",169,N],[12,"time","","",169,N],[12,"deviceid","","",169,N],[12,"sourceid","","",169,N],[12,"detail","","",169,N],[12,"root","","",169,N],[12,"event","","",169,N],[12,"child","","",169,N],[12,"root_x","","",169,N],[12,"root_y","","",169,N],[12,"event_x","","",169,N],[12,"event_y","","",169,N],[12,"flags","","",169,N],[12,"buttons","","",169,N],[12,"valuators","","",169,N],[12,"mods","","",169,N],[12,"group","","",169,N],[3,"XIRawEvent","","",N,N],[12,"_type","","",170,N],[12,"serial","","",170,N],[12,"send_event","","",170,N],[12,"display","","",170,N],[12,"extension","","",170,N],[12,"evtype","","",170,N],[12,"time","","",170,N],[12,"deviceid","","",170,N],[12,"sourceid","","",170,N],[12,"detail","","",170,N],[12,"flags","","",170,N],[12,"valuators","","",170,N],[12,"raw_values","","",170,N],[3,"XIEnterEvent","","",N,N],[12,"_type","","",171,N],[12,"serial","","",171,N],[12,"send_event","","",171,N],[12,"display","","",171,N],[12,"extension","","",171,N],[12,"evtype","","",171,N],[12,"time","","",171,N],[12,"deviceid","","",171,N],[12,"sourceid","","",171,N],[12,"detail","","",171,N],[12,"root","","",171,N],[12,"event","","",171,N],[12,"child","","",171,N],[12,"root_x","","",171,N],[12,"root_y","","",171,N],[12,"event_x","","",171,N],[12,"event_y","","",171,N],[12,"mode","","",171,N],[12,"focus","","",171,N],[12,"same_screen","","",171,N],[12,"buttons","","",171,N],[12,"mods","","",171,N],[12,"group","","",171,N],[3,"XIPropertyEvent","","",N,N],[12,"_type","","",172,N],[12,"serial","","",172,N],[12,"send_event","","",172,N],[12,"display","","",172,N],[12,"extension","","",172,N],[12,"evtype","","",172,N],[12,"time","","",172,N],[12,"deviceid","","",172,N],[12,"property","","",172,N],[12,"what","","",172,N],[3,"XITouchOwnershipEvent","","",N,N],[12,"_type","","",173,N],[12,"serial","","",173,N],[12,"send_event","","",173,N],[12,"display","","",173,N],[12,"extension","","",173,N],[12,"evtype","","",173,N],[12,"time","","",173,N],[12,"deviceid","","",173,N],[12,"sourceid","","",173,N],[12,"touchid","","",173,N],[12,"root","","",173,N],[12,"event","","",173,N],[12,"child","","",173,N],[12,"flags","","",173,N],[3,"XIBarrierEvent","","",N,N],[12,"_type","","",174,N],[12,"serial","","",174,N],[12,"send_event","","",174,N],[12,"display","","",174,N],[12,"extension","","",174,N],[12,"evtype","","",174,N],[12,"time","","",174,N],[12,"deviceid","","",174,N],[12,"sourceid","","",174,N],[12,"event","","",174,N],[12,"root","","",174,N],[12,"root_x","","",174,N],[12,"root_y","","",174,N],[12,"dx","","",174,N],[12,"dy","","",174,N],[12,"dtime","","",174,N],[12,"flags","","",174,N],[12,"barrier","","",174,N],[12,"eventid","","",174,N],[5,"XISetMask","","",N,N],[5,"XIClearMask","","",N,N],[5,"XIMaskIsSet","","",N,N],[6,"XIGroupState","","",N,N],[6,"BarrierEventID","","",N,N],[6,"XILeaveEvent","","",N,N],[6,"XIFocusInEvent","","",N,N],[6,"XIFocusOutEvent","","",N,N],[17,"XInput_2_0","","",N,N],[17,"XI_2_Major","","",N,N],[17,"XI_2_Minor","","",N,N],[17,"XIPropertyDeleted","","",N,N],[17,"XIPropertyCreated","","",N,N],[17,"XIPropertyModified","","",N,N],[17,"XIPropModeReplace","","",N,N],[17,"XIPropModePrepend","","",N,N],[17,"XIPropModeAppend","","",N,N],[17,"XINotifyNormal","","",N,N],[17,"XINotifyGrab","","",N,N],[17,"XINotifyUngrab","","",N,N],[17,"XINotifyWhileGrabbed","","",N,N],[17,"XINotifyPassiveGrab","","",N,N],[17,"XINotifyPassiveUngrab","","",N,N],[17,"XINotifyAncestor","","",N,N],[17,"XINotifyVirtual","","",N,N],[17,"XINotifyInferior","","",N,N],[17,"XINotifyNonlinear","","",N,N],[17,"XINotifyNonlinearVirtual","","",N,N],[17,"XINotifyPointer","","",N,N],[17,"XINotifyPointerRoot","","",N,N],[17,"XINotifyDetailNone","","",N,N],[17,"XIGrabModeSync","","",N,N],[17,"XIGrabModeAsync","","",N,N],[17,"XIGrabModeTouch","","",N,N],[17,"XIGrabSuccess","","",N,N],[17,"XIAlreadyGrabbed","","",N,N],[17,"XIGrabInvalidTime","","",N,N],[17,"XIGrabNotViewable","","",N,N],[17,"XIGrabFrozen","","",N,N],[17,"XIGrabtypeButton","","",N,N],[17,"XIGrabtypeKeycode","","",N,N],[17,"XIGrabtypeEnter","","",N,N],[17,"XIGrabtypeFocusIn","","",N,N],[17,"XIGrabtypeTouchBegin","","",N,N],[17,"XIAnyButton","","",N,N],[17,"XIAnyKeycode","","",N,N],[17,"XIAsyncDevice","","",N,N],[17,"XISyncDevice","","",N,N],[17,"XIReplayDevice","","",N,N],[17,"XIAsyncPairedDevice","","",N,N],[17,"XIAsyncPair","","",N,N],[17,"XISyncPair","","",N,N],[17,"XIAcceptTouch","","",N,N],[17,"XIRejectTouch","","",N,N],[17,"XISlaveSwitch","","",N,N],[17,"XIDeviceChange","","",N,N],[17,"XIMasterAdded","","",N,N],[17,"XIMasterRemoved","","",N,N],[17,"XISlaveAdded","","",N,N],[17,"XISlaveRemoved","","",N,N],[17,"XISlaveAttached","","",N,N],[17,"XISlaveDetached","","",N,N],[17,"XIDeviceEnabled","","",N,N],[17,"XIDeviceDisabled","","",N,N],[17,"XIAddMaster","","",N,N],[17,"XIRemoveMaster","","",N,N],[17,"XIAttachSlave","","",N,N],[17,"XIDetachSlave","","",N,N],[17,"XIAttachToMaster","","",N,N],[17,"XIFloating","","",N,N],[17,"XIModeRelative","","",N,N],[17,"XIModeAbsolute","","",N,N],[17,"XIMasterPointer","","",N,N],[17,"XIMasterKeyboard","","",N,N],[17,"XISlavePointer","","",N,N],[17,"XISlaveKeyboard","","",N,N],[17,"XIFloatingSlave","","",N,N],[17,"XIKeyClass","","",N,N],[17,"XIButtonClass","","",N,N],[17,"XIValuatorClass","","",N,N],[17,"XIScrollClass","","",N,N],[17,"XITouchClass","","",N,N],[17,"XIScrollTypeVertical","","",N,N],[17,"XIScrollTypeHorizontal","","",N,N],[17,"XIScrollFlagNoEmulation","","",N,N],[17,"XIScrollFlagPreferred","","",N,N],[17,"XIKeyRepeat","","",N,N],[17,"XIPointerEmulated","","",N,N],[17,"XITouchPendingEnd","","",N,N],[17,"XITouchEmulatingPointer","","",N,N],[17,"XIBarrierPointerReleased","","",N,N],[17,"XIBarrierDeviceIsGrabbed","","",N,N],[17,"XIDirectTouch","","",N,N],[17,"XIDependentTouch","","",N,N],[17,"XIAllDevices","","",N,N],[17,"XIAllMasterDevices","","",N,N],[17,"XI_DeviceChanged","","",N,N],[17,"XI_KeyPress","","",N,N],[17,"XI_KeyRelease","","",N,N],[17,"XI_ButtonPress","","",N,N],[17,"XI_ButtonRelease","","",N,N],[17,"XI_Motion","","",N,N],[17,"XI_Enter","","",N,N],[17,"XI_Leave","","",N,N],[17,"XI_FocusIn","","",N,N],[17,"XI_FocusOut","","",N,N],[17,"XI_HierarchyChanged","","",N,N],[17,"XI_PropertyEvent","","",N,N],[17,"XI_RawKeyPress","","",N,N],[17,"XI_RawKeyRelease","","",N,N],[17,"XI_RawButtonPress","","",N,N],[17,"XI_RawButtonRelease","","",N,N],[17,"XI_RawMotion","","",N,N],[17,"XI_TouchBegin","","",N,N],[17,"XI_TouchUpdate","","",N,N],[17,"XI_TouchEnd","","",N,N],[17,"XI_TouchOwnership","","",N,N],[17,"XI_RawTouchBegin","","",N,N],[17,"XI_RawTouchUpdate","","",N,N],[17,"XI_RawTouchEnd","","",N,N],[17,"XI_BarrierHit","","",N,N],[17,"XI_BarrierLeave","","",N,N],[17,"XI_LASTEVENT","","",N,N],[17,"XI_DeviceChangedMask","","",N,N],[17,"XI_KeyPressMask","","",N,N],[17,"XI_KeyReleaseMask","","",N,N],[17,"XI_ButtonPressMask","","",N,N],[17,"XI_ButtonReleaseMask","","",N,N],[17,"XI_MotionMask","","",N,N],[17,"XI_EnterMask","","",N,N],[17,"XI_LeaveMask","","",N,N],[17,"XI_FocusInMask","","",N,N],[17,"XI_FocusOutMask","","",N,N],[17,"XI_HierarchyChangedMask","","",N,N],[17,"XI_PropertyEventMask","","",N,N],[17,"XI_RawKeyPressMask","","",N,N],[17,"XI_RawKeyReleaseMask","","",N,N],[17,"XI_RawButtonPressMask","","",N,N],[17,"XI_RawButtonReleaseMask","","",N,N],[17,"XI_RawMotionMask","","",N,N],[17,"XI_TouchBeginMask","","",N,N],[17,"XI_TouchEndMask","","",N,N],[17,"XI_TouchOwnershipChangedMask","","",N,N],[17,"XI_TouchUpdateMask","","",N,N],[17,"XI_RawTouchBeginMask","","",N,N],[17,"XI_RawTouchEndMask","","",N,N],[17,"XI_RawTouchUpdateMask","","",N,N],[17,"XI_BarrierHitMask","","",N,N],[17,"XI_BarrierLeaveMask","","",N,N],[11,"open","","",146,[[],["result",["xinput2","openerror"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"clone","","",147,[[["self"]],["self"]]],[11,"default","","",147,[[],["self"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"clone","","",148,[[["self"]],["self"]]],[11,"default","","",148,[[],["self"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"clone","","",149,[[["self"]],["self"]]],[11,"default","","",149,[[],["self"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"clone","","",150,[[["self"]],["self"]]],[11,"default","","",150,[[],["self"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"_type","","",151,N],[11,"add","","",151,N],[11,"remove","","",151,N],[11,"attach","","",151,N],[11,"detach","","",151,N],[11,"clone","","",151,[[["self"]],["self"]]],[11,"default","","",151,[[],["self"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"clone","","",152,[[["self"]],["self"]]],[11,"default","","",152,[[],["self"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"clone","","",153,[[["self"]],["self"]]],[11,"default","","",153,[[],["self"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"clone","","",154,[[["self"]],["self"]]],[11,"default","","",154,[[],["self"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"clone","","",155,[[["self"]],["self"]]],[11,"default","","",155,[[],["self"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"clone","","",156,[[["self"]],["self"]]],[11,"default","","",156,[[],["self"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"clone","","",157,[[["self"]],["self"]]],[11,"default","","",157,[[],["self"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"clone","","",158,[[["self"]],["self"]]],[11,"default","","",158,[[],["self"]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"clone","","",159,[[["self"]],["self"]]],[11,"default","","",159,[[],["self"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"clone","","",160,[[["self"]],["self"]]],[11,"default","","",160,[[],["self"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"clone","","",161,[[["self"]],["self"]]],[11,"default","","",161,[[],["self"]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"clone","","",162,[[["self"]],["self"]]],[11,"default","","",162,[[],["self"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"clone","","",163,[[["self"]],["self"]]],[11,"default","","",163,[[],["self"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"clone","","",164,[[["self"]],["self"]]],[11,"default","","",164,[[],["self"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"clone","","",165,[[["self"]],["self"]]],[11,"default","","",165,[[],["self"]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result"]]],[11,"clone","","",166,[[["self"]],["self"]]],[11,"default","","",166,[[],["self"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"clone","","",167,[[["self"]],["self"]]],[11,"default","","",167,[[],["self"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"clone","","",168,[[["self"]],["self"]]],[11,"default","","",168,[[],["self"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"clone","","",169,[[["self"]],["self"]]],[11,"default","","",169,[[],["self"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"clone","","",170,[[["self"]],["self"]]],[11,"default","","",170,[[],["self"]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result"]]],[11,"clone","","",171,[[["self"]],["self"]]],[11,"default","","",171,[[],["self"]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"clone","","",172,[[["self"]],["self"]]],[11,"default","","",172,[[],["self"]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"clone","","",173,[[["self"]],["self"]]],[11,"default","","",173,[[],["self"]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"clone","","",174,[[["self"]],["self"]]],[11,"default","","",174,[[],["self"]]],[0,"xmd","x11_dl","",N,N],[6,"INT8","x11_dl::xmd","",N,N],[6,"INT16","","",N,N],[6,"INT32","","",N,N],[6,"INT64","","",N,N],[6,"CARD8","","",N,N],[6,"CARD16","","",N,N],[6,"CARD32","","",N,N],[6,"CARD64","","",N,N],[6,"BYTE","","",N,N],[6,"BOOL","","",N,N],[0,"xmu","x11_dl","",N,N],[3,"Xmu","x11_dl::xmu","",N,N],[12,"XmuAddCloseDisplayHook","","",175,N],[12,"XmuAddInitializer","","",175,N],[12,"XmuAllStandardColormaps","","",175,N],[12,"XmuAppendSegment","","",175,N],[12,"XmuAreaAnd","","",175,N],[12,"XmuAreaCopy","","",175,N],[12,"XmuAreaDup","","",175,N],[12,"XmuAreaNot","","",175,N],[12,"XmuAreaOrXor","","",175,N],[12,"XmuCallInitializers","","",175,N],[12,"XmuClientWindow","","",175,N],[12,"XmuCompareISOLatin1","","",175,N],[12,"XmuConvertStandardSelection","","",175,N],[12,"XmuCopyISOLatin1Lowered","","",175,N],[12,"XmuCopyISOLatin1Uppered","","",175,N],[12,"XmuCreateColormap","","",175,N],[12,"XmuCreatePixmapFromBitmap","","",175,N],[12,"XmuCreateStippledPixmap","","",175,N],[12,"XmuCursorNameToIndex","","",175,N],[12,"XmuCvtBackingStoreToString","","",175,N],[12,"XmuCvtFunctionToCallback","","",175,N],[12,"XmuCvtGravityToString","","",175,N],[12,"XmuCvtJustifyToString","","",175,N],[12,"XmuCvtLongToString","","",175,N],[12,"XmuCvtOrientationToString","","",175,N],[12,"XmuCvtShapeStyleToString","","",175,N],[12,"XmuCvtStringToBackingStore","","",175,N],[12,"XmuCvtStringToBitmap","","",175,N],[12,"XmuCvtStringToColorCursor","","",175,N],[12,"XmuCvtStringToCursor","","",175,N],[12,"XmuCvtStringToGravity","","",175,N],[12,"XmuCvtStringToJustify","","",175,N],[12,"XmuCvtStringToLong","","",175,N],[12,"XmuCvtStringToOrientation","","",175,N],[12,"XmuCvtStringToShapeStyle","","",175,N],[12,"XmuCvtStringToWidget","","",175,N],[12,"XmuCvtWidgetToString","","",175,N],[12,"XmuDeleteStandardColormap","","",175,N],[12,"XmuDestroyScanlineList","","",175,N],[12,"XmuDestroySegmentList","","",175,N],[12,"XmuDistinguishableColors","","",175,N],[12,"XmuDistinguishablePixels","","",175,N],[12,"XmuDQAddDisplay","","",175,N],[12,"XmuDQCreate","","",175,N],[12,"XmuDQDestroy","","",175,N],[12,"XmuDQLookupDisplay","","",175,N],[12,"XmuDQRemoveDisplay","","",175,N],[12,"XmuDrawLogo","","",175,N],[12,"XmuDrawRoundedRectangle","","",175,N],[12,"XmuFillRoundedRectangle","","",175,N],[12,"XmuGetAtomName","","",175,N],[12,"XmuGetColormapAllocation","","",175,N],[12,"XmuGetHostname","","",175,N],[12,"XmuInternAtom","","",175,N],[12,"XmuInternStrings","","",175,N],[12,"XmuLocateBitmapFile","","",175,N],[12,"XmuLocatePixmapFile","","",175,N],[12,"XmuLookupAPL","","",175,N],[12,"XmuLookupArabic","","",175,N],[12,"XmuLookupCloseDisplayHook","","",175,N],[12,"XmuLookupCyrillic","","",175,N],[12,"XmuLookupGreek","","",175,N],[12,"XmuLookupHebrew","","",175,N],[12,"XmuLookupJISX0201","","",175,N],[12,"XmuLookupKana","","",175,N],[12,"XmuLookupLatin1","","",175,N],[12,"XmuLookupLatin2","","",175,N],[12,"XmuLookupLatin3","","",175,N],[12,"XmuLookupLatin4","","",175,N],[12,"XmuLookupStandardColormap","","",175,N],[12,"XmuLookupString","","",175,N],[12,"XmuMakeAtom","","",175,N],[12,"XmuNameOfAtom","","",175,N],[12,"XmuNCopyISOLatin1Lowered","","",175,N],[12,"XmuNCopyISOLatin1Uppered","","",175,N],[12,"XmuNewArea","","",175,N],[12,"XmuNewCvtStringToWidget","","",175,N],[12,"XmuNewScanline","","",175,N],[12,"XmuNewSegment","","",175,N],[12,"XmuOptimizeArea","","",175,N],[12,"XmuOptimizeScanline","","",175,N],[12,"XmuPrintDefaultErrorMessage","","",175,N],[12,"XmuReadBitmapData","","",175,N],[12,"XmuReadBitmapDataFromFile","","",175,N],[12,"XmuRegisterExternalAgent","","",175,N],[12,"XmuReleaseStippledPixmap","","",175,N],[12,"XmuRemoveCloseDisplayHook","","",175,N],[12,"XmuReshapeWidget","","",175,N],[12,"XmuScanlineAnd","","",175,N],[12,"XmuScanlineAndSegment","","",175,N],[12,"XmuScanlineCopy","","",175,N],[12,"XmuScanlineEqu","","",175,N],[12,"XmuScanlineNot","","",175,N],[12,"XmuScanlineOr","","",175,N],[12,"XmuScanlineOrSegment","","",175,N],[12,"XmuScanlineXor","","",175,N],[12,"XmuScanlineXorSegment","","",175,N],[12,"XmuScreenOfWindow","","",175,N],[12,"XmuSimpleErrorHandler","","",175,N],[12,"XmuStandardColormap","","",175,N],[12,"XmuUpdateMapHints","","",175,N],[12,"XmuValidArea","","",175,N],[12,"XmuValidScanline","","",175,N],[12,"XmuVisualStandardColormaps","","",175,N],[12,"XmuWnCountOwnedResources","","",175,N],[12,"XmuWnFetchResources","","",175,N],[12,"XmuWnInitializeNodes","","",175,N],[12,"XmuWnNameToNode","","",175,N],[12,"XmuSnprintf","","",175,N],[12,"_XA_ATOM_PAIR","","",175,N],[12,"_XA_CHARACTER_POSITION","","",175,N],[12,"_XA_CLASS","","",175,N],[12,"_XA_CLIENT_WINDOW","","",175,N],[12,"_XA_CLIPBOARD","","",175,N],[12,"_XA_COMPOUND_TEXT","","",175,N],[12,"_XA_DECNET_ADDRESS","","",175,N],[12,"_XA_DELETE","","",175,N],[12,"_XA_FILENAME","","",175,N],[12,"_XA_HOSTNAME","","",175,N],[12,"_XA_IP_ADDRESS","","",175,N],[12,"_XA_LENGTH","","",175,N],[12,"_XA_LIST_LENGTH","","",175,N],[12,"_XA_NAME","","",175,N],[12,"_XA_NET_ADDRESS","","",175,N],[12,"_XA_NULL","","",175,N],[12,"_XA_OWNER_OS","","",175,N],[12,"_XA_SPAN","","",175,N],[12,"_XA_TARGETS","","",175,N],[12,"_XA_TEXT","","",175,N],[12,"_XA_TIMESTAMP","","",175,N],[12,"_XA_USER","","",175,N],[12,"_XA_UTF8_STRING","","",175,N],[3,"_AtomRec","","",N,N],[3,"_XmuArea","","",N,N],[3,"_XmuDisplayQueue","","",N,N],[3,"_XmuDisplayQueueEntry","","",N,N],[3,"_XmuScanline","","",N,N],[3,"_XmuSegment","","",N,N],[3,"_XmuWidgetNode","","",N,N],[6,"AtomPtr","","",N,N],[6,"XmuArea","","",N,N],[6,"XmuDisplayQueue","","",N,N],[6,"XmuDisplayQueueEntry","","",N,N],[6,"XmuScanline","","",N,N],[6,"XmuSegment","","",N,N],[6,"XmuWidgetNode","","",N,N],[11,"open","","",175,[[],["result",["xmu","openerror"]]]],[0,"xrecord","x11_dl","",N,N],[3,"Xf86vmode","x11_dl::xrecord","",N,N],[12,"XRecordAllocRange","","",176,N],[12,"XRecordCreateContext","","",176,N],[12,"XRecordDisableContext","","",176,N],[12,"XRecordEnableContext","","",176,N],[12,"XRecordEnableContextAsync","","",176,N],[12,"XRecordFreeContext","","",176,N],[12,"XRecordFreeData","","",176,N],[12,"XRecordFreeState","","",176,N],[12,"XRecordGetContext","","",176,N],[12,"XRecordIdBaseMask","","",176,N],[12,"XRecordProcessReplies","","",176,N],[12,"XRecordQueryVersion","","",176,N],[12,"XRecordRegisterClients","","",176,N],[12,"XRecordUnregisterClients","","",176,N],[3,"XRecordClientInfo","","",N,N],[12,"client","","",177,N],[12,"nranges","","",177,N],[12,"ranges","","",177,N],[3,"XRecordExtRange","","",N,N],[12,"ext_major","","",178,N],[12,"ext_minor","","",178,N],[3,"XRecordInterceptData","","",N,N],[12,"id_base","","",179,N],[12,"server_time","","",179,N],[12,"client_seq","","",179,N],[12,"category","","",179,N],[12,"client_swapped","","",179,N],[12,"data","","",179,N],[12,"data_len","","",179,N],[3,"XRecordRange","","",N,N],[12,"core_requests","","",180,N],[12,"core_replies","","",180,N],[12,"ext_requests","","",180,N],[12,"ext_replies","","",180,N],[12,"delivered_events","","",180,N],[12,"device_events","","",180,N],[12,"errors","","",180,N],[12,"client_started","","",180,N],[12,"client_died","","",180,N],[3,"XRecordRange8","","",N,N],[12,"first","","",181,N],[12,"last","","",181,N],[3,"XRecordRange16","","",N,N],[12,"first","","",182,N],[12,"last","","",182,N],[3,"XRecordState","","",N,N],[12,"enabled","","",183,N],[12,"datum_flags","","",183,N],[12,"nclients","","",183,N],[12,"client_info","","",183,N],[6,"XRecordClientSpec","","",N,N],[6,"XRecordContext","","",N,N],[17,"XRecordFromServerTime","","",N,N],[17,"XRecordFromClientTime","","",N,N],[17,"XRecordFromClientSequence","","",N,N],[17,"XRecordCurrentClients","","",N,N],[17,"XRecordFutureClients","","",N,N],[17,"XRecordAllClients","","",N,N],[17,"XRecordFromServer","","",N,N],[17,"XRecordFromClient","","",N,N],[17,"XRecordClientStarted","","",N,N],[17,"XRecordClientDied","","",N,N],[17,"XRecordStartOfData","","",N,N],[17,"XRecordEndOfData","","",N,N],[11,"open","","",176,[[],["result",["xf86vmode","openerror"]]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"clone","","",177,[[["self"]],["xrecordclientinfo"]]],[11,"eq","","",177,[[["self"],["xrecordclientinfo"]],["bool"]]],[11,"ne","","",177,[[["self"],["xrecordclientinfo"]],["bool"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[11,"clone","","",178,[[["self"]],["xrecordextrange"]]],[11,"eq","","",178,[[["self"],["xrecordextrange"]],["bool"]]],[11,"ne","","",178,[[["self"],["xrecordextrange"]],["bool"]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result"]]],[11,"clone","","",179,[[["self"]],["xrecordinterceptdata"]]],[11,"eq","","",179,[[["self"],["xrecordinterceptdata"]],["bool"]]],[11,"ne","","",179,[[["self"],["xrecordinterceptdata"]],["bool"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"clone","","",180,[[["self"]],["xrecordrange"]]],[11,"eq","","",180,[[["self"],["xrecordrange"]],["bool"]]],[11,"ne","","",180,[[["self"],["xrecordrange"]],["bool"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"clone","","",181,[[["self"]],["xrecordrange8"]]],[11,"eq","","",181,[[["self"],["xrecordrange8"]],["bool"]]],[11,"ne","","",181,[[["self"],["xrecordrange8"]],["bool"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"clone","","",182,[[["self"]],["xrecordrange16"]]],[11,"eq","","",182,[[["self"],["xrecordrange16"]],["bool"]]],[11,"ne","","",182,[[["self"],["xrecordrange16"]],["bool"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"clone","","",183,[[["self"]],["xrecordstate"]]],[11,"eq","","",183,[[["self"],["xrecordstate"]],["bool"]]],[11,"ne","","",183,[[["self"],["xrecordstate"]],["bool"]]],[0,"xrender","x11_dl","",N,N],[3,"Xrender","x11_dl::xrender","",N,N],[12,"XRenderAddGlyphs","","",184,N],[12,"XRenderAddTraps","","",184,N],[12,"XRenderChangePicture","","",184,N],[12,"XRenderComposite","","",184,N],[12,"XRenderCompositeDoublePoly","","",184,N],[12,"XRenderCompositeString16","","",184,N],[12,"XRenderCompositeString32","","",184,N],[12,"XRenderCompositeString8","","",184,N],[12,"XRenderCompositeText16","","",184,N],[12,"XRenderCompositeText32","","",184,N],[12,"XRenderCompositeText8","","",184,N],[12,"XRenderCompositeTrapezoids","","",184,N],[12,"XRenderCompositeTriangles","","",184,N],[12,"XRenderCompositeTriFan","","",184,N],[12,"XRenderCompositeTriStrip","","",184,N],[12,"XRenderCreateAnimCursor","","",184,N],[12,"XRenderCreateConicalGradient","","",184,N],[12,"XRenderCreateCursor","","",184,N],[12,"XRenderCreateGlyphSet","","",184,N],[12,"XRenderCreateLinearGradient","","",184,N],[12,"XRenderCreatePicture","","",184,N],[12,"XRenderCreateRadialGradient","","",184,N],[12,"XRenderCreateSolidFill","","",184,N],[12,"XRenderFillRectangle","","",184,N],[12,"XRenderFillRectangles","","",184,N],[12,"XRenderFindFormat","","",184,N],[12,"XRenderFindStandardFormat","","",184,N],[12,"XRenderFindVisualFormat","","",184,N],[12,"XRenderFreeGlyphs","","",184,N],[12,"XRenderFreeGlyphSet","","",184,N],[12,"XRenderFreePicture","","",184,N],[12,"XRenderParseColor","","",184,N],[12,"XRenderQueryExtension","","",184,N],[12,"XRenderQueryFilters","","",184,N],[12,"XRenderQueryFormats","","",184,N],[12,"XRenderQueryPictIndexValues","","",184,N],[12,"XRenderQuerySubpixelOrder","","",184,N],[12,"XRenderQueryVersion","","",184,N],[12,"XRenderReferenceGlyphSet","","",184,N],[12,"XRenderSetPictureClipRectangles","","",184,N],[12,"XRenderSetPictureClipRegion","","",184,N],[12,"XRenderSetPictureFilter","","",184,N],[12,"XRenderSetPictureTransform","","",184,N],[12,"XRenderSetSubpixelOrder","","",184,N],[3,"_XAnimCursor","","",N,N],[12,"cursor","","",185,N],[12,"delay","","",185,N],[3,"_XCircle","","",N,N],[12,"x","","",186,N],[12,"y","","",186,N],[12,"radius","","",186,N],[3,"_XConicalGradient","","",N,N],[12,"center","","",187,N],[12,"angle","","",187,N],[3,"_XFilters","","",N,N],[12,"nfilter","","",188,N],[12,"filter","","",188,N],[12,"nalias","","",188,N],[12,"alias","","",188,N],[3,"_XGlyphElt8","","",N,N],[12,"glyphset","","",189,N],[12,"chars","","",189,N],[12,"nchars","","",189,N],[12,"xOff","","",189,N],[12,"yOff","","",189,N],[3,"_XGlyphElt16","","",N,N],[12,"glyphset","","",190,N],[12,"chars","","",190,N],[12,"nchars","","",190,N],[12,"xOff","","",190,N],[12,"yOff","","",190,N],[3,"_XGlyphElt32","","",N,N],[12,"glyphset","","",191,N],[12,"chars","","",191,N],[12,"nchars","","",191,N],[12,"xOff","","",191,N],[12,"yOff","","",191,N],[3,"_XGlyphInfo","","",N,N],[12,"width","","",192,N],[12,"height","","",192,N],[12,"x","","",192,N],[12,"y","","",192,N],[12,"xOff","","",192,N],[12,"yOff","","",192,N],[3,"_XIndexValue","","",N,N],[12,"pixel","","",193,N],[12,"red","","",193,N],[12,"green","","",193,N],[12,"blue","","",193,N],[12,"alpha","","",193,N],[3,"_XLinearGradient","","",N,N],[12,"p1","","",194,N],[12,"p2","","",194,N],[3,"_XLineFixed","","",N,N],[12,"p1","","",195,N],[12,"p2","","",195,N],[3,"_XPointDouble","","",N,N],[12,"x","","",196,N],[12,"y","","",196,N],[3,"_XPointFixed","","",N,N],[12,"x","","",197,N],[12,"y","","",197,N],[3,"_XRadialGradient","","",N,N],[12,"inner","","",198,N],[12,"outer","","",198,N],[3,"XRenderColor","","",N,N],[12,"red","","",199,N],[12,"green","","",199,N],[12,"blue","","",199,N],[12,"alpha","","",199,N],[3,"XRenderDirectFormat","","",N,N],[12,"red","","",200,N],[12,"redMask","","",200,N],[12,"green","","",200,N],[12,"greenMask","","",200,N],[12,"blue","","",200,N],[12,"blueMask","","",200,N],[12,"alpha","","",200,N],[12,"alphaMask","","",200,N],[3,"XRenderPictFormat","","",N,N],[12,"id","","",201,N],[12,"type_","","",201,N],[12,"depth","","",201,N],[12,"direct","","",201,N],[12,"colormap","","",201,N],[3,"_XRenderPictureAttributes","","",N,N],[12,"repeat","","",202,N],[12,"alpha_map","","",202,N],[12,"alpha_x_origin","","",202,N],[12,"alpha_y_origin","","",202,N],[12,"clip_x_origin","","",202,N],[12,"clip_y_origin","","",202,N],[12,"clip_mask","","",202,N],[12,"graphics_exposures","","",202,N],[12,"subwindow_mode","","",202,N],[12,"poly_edge","","",202,N],[12,"poly_mode","","",202,N],[12,"dither","","",202,N],[12,"component_alpha","","",202,N],[3,"_XSpanFix","","",N,N],[12,"left","","",203,N],[12,"right","","",203,N],[12,"y","","",203,N],[3,"_XTrap","","",N,N],[12,"top","","",204,N],[12,"bottom","","",204,N],[3,"_XTrapezoid","","",N,N],[12,"top","","",205,N],[12,"bottom","","",205,N],[12,"left","","",205,N],[12,"right","","",205,N],[3,"_XTriangle","","",N,N],[12,"p1","","",206,N],[12,"p2","","",206,N],[12,"p3","","",206,N],[3,"_XTransform","","",N,N],[12,"matrix","","",207,N],[6,"Glyph","","",N,N],[6,"GlyphSet","","",N,N],[6,"PictFormat","","",N,N],[6,"Picture","","",N,N],[6,"XDouble","","",N,N],[6,"XFixed","","",N,N],[6,"XAnimCursor","","",N,N],[6,"XCircle","","",N,N],[6,"XConicalGradient","","",N,N],[6,"XFilters","","",N,N],[6,"XGlyphElt8","","",N,N],[6,"XGlyphElt16","","",N,N],[6,"XGlyphElt32","","",N,N],[6,"XGlyphInfo","","",N,N],[6,"XIndexValue","","",N,N],[6,"XLinearGradient","","",N,N],[6,"XLineFixed","","",N,N],[6,"XPointDouble","","",N,N],[6,"XPointFixed","","",N,N],[6,"XRadialGradient","","",N,N],[6,"XRenderPictureAttributes","","",N,N],[6,"XSpanFix","","",N,N],[6,"XTrap","","",N,N],[6,"XTrapezoid","","",N,N],[6,"XTriangle","","",N,N],[6,"XTransform","","",N,N],[17,"PictFormatID","","",N,N],[17,"PictFormatType","","",N,N],[17,"PictFormatDepth","","",N,N],[17,"PictFormatRed","","",N,N],[17,"PictFormatRedMask","","",N,N],[17,"PictFormatGreen","","",N,N],[17,"PictFormatGreenMask","","",N,N],[17,"PictFormatBlue","","",N,N],[17,"PictFormatBlueMask","","",N,N],[17,"PictFormatAlpha","","",N,N],[17,"PictFormatAlphaMask","","",N,N],[17,"PictFormatColormap","","",N,N],[17,"BadPictFormat","","",N,N],[17,"BadPicture","","",N,N],[17,"BadPictOp","","",N,N],[17,"BadGlyphSet","","",N,N],[17,"BadGlyph","","",N,N],[17,"RenderNumberErrors","","",N,N],[17,"PictTypeIndexed","","",N,N],[17,"PictTypeDirect","","",N,N],[17,"PictOpMinimum","","",N,N],[17,"PictOpClear","","",N,N],[17,"PictOpSrc","","",N,N],[17,"PictOpDst","","",N,N],[17,"PictOpOver","","",N,N],[17,"PictOpOverReverse","","",N,N],[17,"PictOpIn","","",N,N],[17,"PictOpInReverse","","",N,N],[17,"PictOpOut","","",N,N],[17,"PictOpOutReverse","","",N,N],[17,"PictOpAtop","","",N,N],[17,"PictOpAtopReverse","","",N,N],[17,"PictOpXor","","",N,N],[17,"PictOpAdd","","",N,N],[17,"PictOpSaturate","","",N,N],[17,"PictOpMaximum","","",N,N],[17,"PictOpDisjointMinimum","","",N,N],[17,"PictOpDisjointClear","","",N,N],[17,"PictOpDisjointSrc","","",N,N],[17,"PictOpDisjointDst","","",N,N],[17,"PictOpDisjointOver","","",N,N],[17,"PictOpDisjointOverReverse","","",N,N],[17,"PictOpDisjointIn","","",N,N],[17,"PictOpDisjointInReverse","","",N,N],[17,"PictOpDisjointOut","","",N,N],[17,"PictOpDisjointOutReverse","","",N,N],[17,"PictOpDisjointAtop","","",N,N],[17,"PictOpDisjointAtopReverse","","",N,N],[17,"PictOpDisjointXor","","",N,N],[17,"PictOpDisjointMaximum","","",N,N],[17,"PictOpConjointMinimum","","",N,N],[17,"PictOpConjointClear","","",N,N],[17,"PictOpConjointSrc","","",N,N],[17,"PictOpConjointDst","","",N,N],[17,"PictOpConjointOver","","",N,N],[17,"PictOpConjointOverReverse","","",N,N],[17,"PictOpConjointIn","","",N,N],[17,"PictOpConjointInReverse","","",N,N],[17,"PictOpConjointOut","","",N,N],[17,"PictOpConjointOutReverse","","",N,N],[17,"PictOpConjointAtop","","",N,N],[17,"PictOpConjointAtopReverse","","",N,N],[17,"PictOpConjointXor","","",N,N],[17,"PictOpConjointMaximum","","",N,N],[17,"PictOpBlendMinimum","","",N,N],[17,"PictOpMultiply","","",N,N],[17,"PictOpScreen","","",N,N],[17,"PictOpOverlay","","",N,N],[17,"PictOpDarken","","",N,N],[17,"PictOpLighten","","",N,N],[17,"PictOpColorDodge","","",N,N],[17,"PictOpColorBurn","","",N,N],[17,"PictOpHardLight","","",N,N],[17,"PictOpSoftLight","","",N,N],[17,"PictOpDifference","","",N,N],[17,"PictOpExclusion","","",N,N],[17,"PictOpHSLHue","","",N,N],[17,"PictOpHSLSaturation","","",N,N],[17,"PictOpHSLColor","","",N,N],[17,"PictOpHSLLuminosity","","",N,N],[17,"PictOpBlendMaximum","","",N,N],[17,"PolyEdgeSharp","","",N,N],[17,"PolyEdgeSmooth","","",N,N],[17,"PolyModePrecise","","",N,N],[17,"PolyModeImprecise","","",N,N],[17,"CPRepeat","","",N,N],[17,"CPAlphaMap","","",N,N],[17,"CPAlphaXOrigin","","",N,N],[17,"CPAlphaYOrigin","","",N,N],[17,"CPClipXOrigin","","",N,N],[17,"CPClipYOrigin","","",N,N],[17,"CPClipMask","","",N,N],[17,"CPGraphicsExposure","","",N,N],[17,"CPSubwindowMode","","",N,N],[17,"CPPolyEdge","","",N,N],[17,"CPPolyMode","","",N,N],[17,"CPDither","","",N,N],[17,"CPComponentAlpha","","",N,N],[17,"CPLastBit","","",N,N],[17,"FilterNearest","","",N,N],[17,"FilterBilinear","","",N,N],[17,"FilterConvolution","","",N,N],[17,"FilterFast","","",N,N],[17,"FilterGood","","",N,N],[17,"FilterBest","","",N,N],[17,"SubPixelUnknown","","",N,N],[17,"SubPixelHorizontalRGB","","",N,N],[17,"SubPixelHorizontalBGR","","",N,N],[17,"SubPixelVerticalRGB","","",N,N],[17,"SubPixelVerticalBGR","","",N,N],[17,"SubPixelNone","","",N,N],[17,"RepeatNone","","",N,N],[17,"RepeatNormal","","",N,N],[17,"RepeatPad","","",N,N],[17,"RepeatReflect","","",N,N],[11,"open","","",184,[[],["result",["xrender","openerror"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"clone","","",185,[[["self"]],["_xanimcursor"]]],[11,"eq","","",185,[[["self"],["_xanimcursor"]],["bool"]]],[11,"ne","","",185,[[["self"],["_xanimcursor"]],["bool"]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result"]]],[11,"clone","","",186,[[["self"]],["_xcircle"]]],[11,"eq","","",186,[[["self"],["_xcircle"]],["bool"]]],[11,"ne","","",186,[[["self"],["_xcircle"]],["bool"]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result"]]],[11,"clone","","",187,[[["self"]],["_xconicalgradient"]]],[11,"eq","","",187,[[["self"],["_xconicalgradient"]],["bool"]]],[11,"ne","","",187,[[["self"],["_xconicalgradient"]],["bool"]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result"]]],[11,"clone","","",188,[[["self"]],["_xfilters"]]],[11,"eq","","",188,[[["self"],["_xfilters"]],["bool"]]],[11,"ne","","",188,[[["self"],["_xfilters"]],["bool"]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result"]]],[11,"clone","","",189,[[["self"]],["_xglyphelt8"]]],[11,"eq","","",189,[[["self"],["_xglyphelt8"]],["bool"]]],[11,"ne","","",189,[[["self"],["_xglyphelt8"]],["bool"]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"clone","","",190,[[["self"]],["_xglyphelt16"]]],[11,"eq","","",190,[[["self"],["_xglyphelt16"]],["bool"]]],[11,"ne","","",190,[[["self"],["_xglyphelt16"]],["bool"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"clone","","",191,[[["self"]],["_xglyphelt32"]]],[11,"eq","","",191,[[["self"],["_xglyphelt32"]],["bool"]]],[11,"ne","","",191,[[["self"],["_xglyphelt32"]],["bool"]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result"]]],[11,"clone","","",192,[[["self"]],["_xglyphinfo"]]],[11,"eq","","",192,[[["self"],["_xglyphinfo"]],["bool"]]],[11,"ne","","",192,[[["self"],["_xglyphinfo"]],["bool"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"clone","","",193,[[["self"]],["_xindexvalue"]]],[11,"eq","","",193,[[["self"],["_xindexvalue"]],["bool"]]],[11,"ne","","",193,[[["self"],["_xindexvalue"]],["bool"]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"clone","","",194,[[["self"]],["_xlineargradient"]]],[11,"eq","","",194,[[["self"],["_xlineargradient"]],["bool"]]],[11,"ne","","",194,[[["self"],["_xlineargradient"]],["bool"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"clone","","",195,[[["self"]],["_xlinefixed"]]],[11,"eq","","",195,[[["self"],["_xlinefixed"]],["bool"]]],[11,"ne","","",195,[[["self"],["_xlinefixed"]],["bool"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"clone","","",196,[[["self"]],["_xpointdouble"]]],[11,"eq","","",196,[[["self"],["_xpointdouble"]],["bool"]]],[11,"ne","","",196,[[["self"],["_xpointdouble"]],["bool"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"clone","","",197,[[["self"]],["_xpointfixed"]]],[11,"eq","","",197,[[["self"],["_xpointfixed"]],["bool"]]],[11,"ne","","",197,[[["self"],["_xpointfixed"]],["bool"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"clone","","",198,[[["self"]],["_xradialgradient"]]],[11,"eq","","",198,[[["self"],["_xradialgradient"]],["bool"]]],[11,"ne","","",198,[[["self"],["_xradialgradient"]],["bool"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"clone","","",199,[[["self"]],["xrendercolor"]]],[11,"eq","","",199,[[["self"],["xrendercolor"]],["bool"]]],[11,"ne","","",199,[[["self"],["xrendercolor"]],["bool"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"clone","","",200,[[["self"]],["xrenderdirectformat"]]],[11,"eq","","",200,[[["self"],["xrenderdirectformat"]],["bool"]]],[11,"ne","","",200,[[["self"],["xrenderdirectformat"]],["bool"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"clone","","",201,[[["self"]],["xrenderpictformat"]]],[11,"eq","","",201,[[["self"],["xrenderpictformat"]],["bool"]]],[11,"ne","","",201,[[["self"],["xrenderpictformat"]],["bool"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"clone","","",202,[[["self"]],["_xrenderpictureattributes"]]],[11,"eq","","",202,[[["self"],["_xrenderpictureattributes"]],["bool"]]],[11,"ne","","",202,[[["self"],["_xrenderpictureattributes"]],["bool"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"clone","","",203,[[["self"]],["_xspanfix"]]],[11,"eq","","",203,[[["self"],["_xspanfix"]],["bool"]]],[11,"ne","","",203,[[["self"],["_xspanfix"]],["bool"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"clone","","",204,[[["self"]],["_xtrap"]]],[11,"eq","","",204,[[["self"],["_xtrap"]],["bool"]]],[11,"ne","","",204,[[["self"],["_xtrap"]],["bool"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"clone","","",205,[[["self"]],["_xtrapezoid"]]],[11,"eq","","",205,[[["self"],["_xtrapezoid"]],["bool"]]],[11,"ne","","",205,[[["self"],["_xtrapezoid"]],["bool"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"clone","","",206,[[["self"]],["_xtriangle"]]],[11,"eq","","",206,[[["self"],["_xtriangle"]],["bool"]]],[11,"ne","","",206,[[["self"],["_xtriangle"]],["bool"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"clone","","",207,[[["self"]],["_xtransform"]]],[11,"eq","","",207,[[["self"],["_xtransform"]],["bool"]]],[11,"ne","","",207,[[["self"],["_xtransform"]],["bool"]]],[0,"xss","x11_dl","",N,N],[3,"Xss","x11_dl::xss","",N,N],[12,"XScreenSaverQueryExtension","","",208,N],[12,"XScreenSaverQueryVersion","","",208,N],[12,"XScreenSaverAllocInfo","","",208,N],[12,"XScreenSaverQueryInfo","","",208,N],[12,"XScreenSaverSelectInput","","",208,N],[12,"XScreenSaverSetAttributes","","",208,N],[12,"XScreenSaverUnsetAttributes","","",208,N],[12,"XScreenSaverRegister","","",208,N],[12,"XScreenSaverUnregister","","",208,N],[12,"XScreenSaverGetRegistered","","",208,N],[12,"XScreenSaverSuspend","","",208,N],[3,"XScreenSaverInfo","","",N,N],[12,"window","","",209,N],[12,"state","","",209,N],[12,"kind","","",209,N],[12,"til_or_since","","",209,N],[12,"idle","","",209,N],[12,"eventMask","","",209,N],[3,"XScreenSaverNotifyEvent","","",N,N],[12,"type_","","",210,N],[12,"serial","","",210,N],[12,"send_event","","",210,N],[12,"display","","",210,N],[12,"window","","",210,N],[12,"root","","",210,N],[12,"state","","",210,N],[12,"kind","","",210,N],[12,"forced","","",210,N],[12,"time","","",210,N],[17,"ScreenSaverName","","",N,N],[17,"ScreenSaverPropertyName","","",N,N],[17,"ScreenSaverNotifyMask","","",N,N],[17,"ScreenSaverCycleMask","","",N,N],[17,"ScreenSaverMajorVersion","","",N,N],[17,"ScreenSaverMinorVersion","","",N,N],[17,"ScreenSaverOff","","",N,N],[17,"ScreenSaverOn","","",N,N],[17,"ScreenSaverCycle","","",N,N],[17,"ScreenSaverDisabled","","",N,N],[17,"ScreenSaverBlanked","","",N,N],[17,"ScreenSaverInternal","","",N,N],[17,"ScreenSaverExternal","","",N,N],[17,"ScreenSaverNotify","","",N,N],[17,"ScreenSaverNumberEvents","","",N,N],[11,"open","","",208,[[],["result",["xss","openerror"]]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"clone","","",209,[[["self"]],["xscreensaverinfo"]]],[11,"eq","","",209,[[["self"],["xscreensaverinfo"]],["bool"]]],[11,"ne","","",209,[[["self"],["xscreensaverinfo"]],["bool"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"clone","","",210,[[["self"]],["xscreensavernotifyevent"]]],[11,"eq","","",210,[[["self"],["xscreensavernotifyevent"]],["bool"]]],[11,"ne","","",210,[[["self"],["xscreensavernotifyevent"]],["bool"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xscreensavernotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xscreensavernotifyevent"]]],[11,"from","","",99,[[["xscreensavernotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xscreensavernotifyevent"]],["xevent"]]],[11,"from","x11_dl::xss","",210,[[["xevent"]],["xscreensavernotifyevent"]]],[11,"from","","",210,[[["xevent"]],["xscreensavernotifyevent"]]],[0,"xt","x11_dl","",N,N],[3,"Xt","x11_dl::xt","",N,N],[12,"XtAddActions","","",211,N],[12,"XtAddCallback","","",211,N],[12,"XtAddCallbacks","","",211,N],[12,"XtAddConverter","","",211,N],[12,"XtAddEventHandler","","",211,N],[12,"XtAddExposureToRegion","","",211,N],[12,"XtAddGrab","","",211,N],[12,"XtAddInput","","",211,N],[12,"XtAddRawEventHandler","","",211,N],[12,"XtAddSignal","","",211,N],[12,"XtAddTimeOut","","",211,N],[12,"XtAddWorkProc","","",211,N],[12,"XtAllocateGC","","",211,N],[12,"XtAppAddActionHook","","",211,N],[12,"XtAppAddActions","","",211,N],[12,"XtAppAddBlockHook","","",211,N],[12,"XtAppAddConverter","","",211,N],[12,"XtAppAddInput","","",211,N],[12,"XtAppAddSignal","","",211,N],[12,"XtAppAddTimeOut","","",211,N],[12,"XtAppAddWorkProc","","",211,N],[12,"XtAppCreateShell","","",211,N],[12,"XtAppError","","",211,N],[12,"XtAppErrorMsg","","",211,N],[12,"XtAppGetErrorDatabase","","",211,N],[12,"XtAppGetErrorDatabaseText","","",211,N],[12,"XtAppGetExitFlag","","",211,N],[12,"XtAppGetSelectionTimeout","","",211,N],[12,"XtAppInitialize","","",211,N],[12,"XtAppLock","","",211,N],[12,"XtAppMainLoop","","",211,N],[12,"XtAppNextEvent","","",211,N],[12,"XtAppPeekEvent","","",211,N],[12,"XtAppPending","","",211,N],[12,"XtAppProcessEvent","","",211,N],[12,"XtAppReleaseCacheRefs","","",211,N],[12,"XtAppSetErrorHandler","","",211,N],[12,"XtAppSetErrorMsgHandler","","",211,N],[12,"XtAppSetExitFlag","","",211,N],[12,"XtAppSetFallbackResources","","",211,N],[12,"XtAppSetSelectionTimeout","","",211,N],[12,"XtAppSetTypeConverter","","",211,N],[12,"XtAppSetWarningHandler","","",211,N],[12,"XtAppSetWarningMsgHandler","","",211,N],[12,"XtAppUnlock","","",211,N],[12,"XtAppWarning","","",211,N],[12,"XtAppWarningMsg","","",211,N],[12,"XtAugmentTranslations","","",211,N],[12,"XtBuildEventMask","","",211,N],[12,"XtCallAcceptFocus","","",211,N],[12,"XtCallActionProc","","",211,N],[12,"XtCallbackExclusive","","",211,N],[12,"XtCallbackNone","","",211,N],[12,"XtCallbackNonexclusive","","",211,N],[12,"XtCallbackPopdown","","",211,N],[12,"XtCallbackReleaseCacheRef","","",211,N],[12,"XtCallbackReleaseCacheRefList","","",211,N],[12,"XtCallCallbackList","","",211,N],[12,"XtCallCallbacks","","",211,N],[12,"XtCallConverter","","",211,N],[12,"XtCalloc","","",211,N],[12,"XtCancelSelectionRequest","","",211,N],[12,"XtChangeManagedSet","","",211,N],[12,"XtClass","","",211,N],[12,"XtCloseDisplay","","",211,N],[12,"XtConfigureWidget","","",211,N],[12,"XtConvert","","",211,N],[12,"XtConvertAndStore","","",211,N],[12,"XtConvertCase","","",211,N],[12,"XtCreateApplicationContext","","",211,N],[12,"XtCreateApplicationShell","","",211,N],[12,"XtCreateManagedWidget","","",211,N],[12,"XtCreatePopupShell","","",211,N],[12,"XtCreateSelectionRequest","","",211,N],[12,"XtCreateWidget","","",211,N],[12,"XtCreateWindow","","",211,N],[12,"XtCvtColorToPixel","","",211,N],[12,"XtCvtIntToBool","","",211,N],[12,"XtCvtIntToBoolean","","",211,N],[12,"XtCvtIntToColor","","",211,N],[12,"XtCvtIntToFloat","","",211,N],[12,"XtCvtIntToFont","","",211,N],[12,"XtCvtIntToPixel","","",211,N],[12,"XtCvtIntToPixmap","","",211,N],[12,"XtCvtIntToShort","","",211,N],[12,"XtCvtIntToUnsignedChar","","",211,N],[12,"XtCvtStringToAcceleratorTable","","",211,N],[12,"XtCvtStringToAtom","","",211,N],[12,"XtCvtStringToBool","","",211,N],[12,"XtCvtStringToBoolean","","",211,N],[12,"XtCvtStringToCommandArgArray","","",211,N],[12,"XtCvtStringToCursor","","",211,N],[12,"XtCvtStringToDimension","","",211,N],[12,"XtCvtStringToDirectoryString","","",211,N],[12,"XtCvtStringToDisplay","","",211,N],[12,"XtCvtStringToFile","","",211,N],[12,"XtCvtStringToFloat","","",211,N],[12,"XtCvtStringToFont","","",211,N],[12,"XtCvtStringToFontSet","","",211,N],[12,"XtCvtStringToFontStruct","","",211,N],[12,"XtCvtStringToGravity","","",211,N],[12,"XtCvtStringToInitialState","","",211,N],[12,"XtCvtStringToInt","","",211,N],[12,"XtCvtStringToPixel","","",211,N],[12,"XtCvtStringToRestartStyle","","",211,N],[12,"XtCvtStringToShort","","",211,N],[12,"XtCvtStringToTranslationTable","","",211,N],[12,"XtCvtStringToUnsignedChar","","",211,N],[12,"XtCvtStringToVisual","","",211,N],[12,"XtDatabase","","",211,N],[12,"XtDestroyApplicationContext","","",211,N],[12,"XtDestroyGC","","",211,N],[12,"XtDestroyWidget","","",211,N],[12,"XtDirectConvert","","",211,N],[12,"XtDisownSelection","","",211,N],[12,"XtDispatchEvent","","",211,N],[12,"XtDispatchEventToWidget","","",211,N],[12,"XtDisplay","","",211,N],[12,"XtDisplayInitialize","","",211,N],[12,"XtDisplayOfObject","","",211,N],[12,"XtDisplayStringConversionWarning","","",211,N],[12,"XtDisplayToApplicationContext","","",211,N],[12,"XtError","","",211,N],[12,"XtErrorMsg","","",211,N],[12,"XtFindFile","","",211,N],[12,"XtFree","","",211,N],[12,"XtGetActionKeysym","","",211,N],[12,"XtGetActionList","","",211,N],[12,"XtGetApplicationNameAndClass","","",211,N],[12,"XtGetApplicationResources","","",211,N],[12,"XtGetClassExtension","","",211,N],[12,"XtGetConstraintResourceList","","",211,N],[12,"XtGetDisplays","","",211,N],[12,"XtGetErrorDatabase","","",211,N],[12,"XtGetErrorDatabaseText","","",211,N],[12,"XtGetGC","","",211,N],[12,"XtGetKeyboardFocusWidget","","",211,N],[12,"XtGetKeysymTable","","",211,N],[12,"XtGetMultiClickTime","","",211,N],[12,"XtGetResourceList","","",211,N],[12,"XtGetSelectionParameters","","",211,N],[12,"XtGetSelectionRequest","","",211,N],[12,"XtGetSelectionTimeout","","",211,N],[12,"XtGetSelectionValue","","",211,N],[12,"XtGetSelectionValueIncremental","","",211,N],[12,"XtGetSelectionValues","","",211,N],[12,"XtGetSelectionValuesIncremental","","",211,N],[12,"XtGetSubresources","","",211,N],[12,"XtGetSubvalues","","",211,N],[12,"XtGetValues","","",211,N],[12,"XtGrabButton","","",211,N],[12,"XtGrabKey","","",211,N],[12,"XtGrabKeyboard","","",211,N],[12,"XtGrabPointer","","",211,N],[12,"XtHasCallbacks","","",211,N],[12,"XtHooksOfDisplay","","",211,N],[12,"XtInitialize","","",211,N],[12,"XtInitializeWidgetClass","","",211,N],[12,"XtInsertEventHandler","","",211,N],[12,"XtInsertEventTypeHandler","","",211,N],[12,"XtInsertRawEventHandler","","",211,N],[12,"XtInstallAccelerators","","",211,N],[12,"XtInstallAllAccelerators","","",211,N],[12,"XtIsApplicationShell","","",211,N],[12,"XtIsComposite","","",211,N],[12,"XtIsConstraint","","",211,N],[12,"XtIsManaged","","",211,N],[12,"XtIsObject","","",211,N],[12,"XtIsOverrideShell","","",211,N],[12,"XtIsRealized","","",211,N],[12,"XtIsRectObj","","",211,N],[12,"XtIsSensitive","","",211,N],[12,"XtIsSessionShell","","",211,N],[12,"XtIsShell","","",211,N],[12,"XtIsSubclass","","",211,N],[12,"XtIsTopLevelShell","","",211,N],[12,"XtIsTransientShell","","",211,N],[12,"XtIsVendorShell","","",211,N],[12,"XtIsWidget","","",211,N],[12,"XtIsWMShell","","",211,N],[12,"XtKeysymToKeycodeList","","",211,N],[12,"XtLastEventProcessed","","",211,N],[12,"XtLastTimestampProcessed","","",211,N],[12,"XtMainLoop","","",211,N],[12,"XtMakeGeometryRequest","","",211,N],[12,"XtMakeResizeRequest","","",211,N],[12,"XtMalloc","","",211,N],[12,"XtManageChild","","",211,N],[12,"XtManageChildren","","",211,N],[12,"XtMapWidget","","",211,N],[12,"XtMenuPopupAction","","",211,N],[12,"XtMergeArgLists","","",211,N],[12,"XtMoveWidget","","",211,N],[12,"XtName","","",211,N],[12,"XtNameToWidget","","",211,N],[12,"XtNewString","","",211,N],[12,"XtNextEvent","","",211,N],[12,"XtNoticeSignal","","",211,N],[12,"XtOpenApplication","","",211,N],[12,"XtOpenDisplay","","",211,N],[12,"XtOverrideTranslations","","",211,N],[12,"XtOwnSelection","","",211,N],[12,"XtOwnSelectionIncremental","","",211,N],[12,"XtParent","","",211,N],[12,"XtParseAcceleratorTable","","",211,N],[12,"XtParseTranslationTable","","",211,N],[12,"XtPeekEvent","","",211,N],[12,"XtPending","","",211,N],[12,"XtPopdown","","",211,N],[12,"XtPopup","","",211,N],[12,"XtPopupSpringLoaded","","",211,N],[12,"XtProcessEvent","","",211,N],[12,"XtProcessLock","","",211,N],[12,"XtProcessUnlock","","",211,N],[12,"XtQueryGeometry","","",211,N],[12,"XtRealizeWidget","","",211,N],[12,"XtRealloc","","",211,N],[12,"XtRegisterCaseConverter","","",211,N],[12,"XtRegisterDrawable","","",211,N],[12,"XtRegisterExtensionSelector","","",211,N],[12,"XtRegisterGrabAction","","",211,N],[12,"XtReleaseGC","","",211,N],[12,"XtReleasePropertyAtom","","",211,N],[12,"XtRemoveActionHook","","",211,N],[12,"XtRemoveAllCallbacks","","",211,N],[12,"XtRemoveBlockHook","","",211,N],[12,"XtRemoveCallback","","",211,N],[12,"XtRemoveCallbacks","","",211,N],[12,"XtRemoveEventHandler","","",211,N],[12,"XtRemoveEventTypeHandler","","",211,N],[12,"XtRemoveGrab","","",211,N],[12,"XtRemoveInput","","",211,N],[12,"XtRemoveRawEventHandler","","",211,N],[12,"XtRemoveSignal","","",211,N],[12,"XtRemoveTimeOut","","",211,N],[12,"XtRemoveWorkProc","","",211,N],[12,"XtReservePropertyAtom","","",211,N],[12,"XtResizeWidget","","",211,N],[12,"XtResizeWindow","","",211,N],[12,"XtResolvePathname","","",211,N],[12,"XtScreen","","",211,N],[12,"XtScreenDatabase","","",211,N],[12,"XtScreenOfObject","","",211,N],[12,"XtSendSelectionRequest","","",211,N],[12,"XtSessionGetToken","","",211,N],[12,"XtSessionReturnToken","","",211,N],[12,"XtSetErrorHandler","","",211,N],[12,"XtSetErrorMsgHandler","","",211,N],[12,"XtSetEventDispatcher","","",211,N],[12,"XtSetKeyboardFocus","","",211,N],[12,"XtSetKeyTranslator","","",211,N],[12,"XtSetLanguageProc","","",211,N],[12,"XtSetMappedWhenManaged","","",211,N],[12,"XtSetMultiClickTime","","",211,N],[12,"XtSetSelectionParameters","","",211,N],[12,"XtSetSelectionTimeout","","",211,N],[12,"XtSetSensitive","","",211,N],[12,"XtSetSubvalues","","",211,N],[12,"XtSetTypeConverter","","",211,N],[12,"XtSetValues","","",211,N],[12,"XtSetWarningHandler","","",211,N],[12,"XtSetWarningMsgHandler","","",211,N],[12,"XtSetWMColormapWindows","","",211,N],[12,"XtStringConversionWarning","","",211,N],[12,"XtSuperclass","","",211,N],[12,"XtToolkitInitialize","","",211,N],[12,"XtToolkitThreadInitialize","","",211,N],[12,"XtTranslateCoords","","",211,N],[12,"XtTranslateKey","","",211,N],[12,"XtTranslateKeycode","","",211,N],[12,"XtUngrabButton","","",211,N],[12,"XtUngrabKey","","",211,N],[12,"XtUngrabKeyboard","","",211,N],[12,"XtUngrabPointer","","",211,N],[12,"XtUninstallTranslations","","",211,N],[12,"XtUnmanageChild","","",211,N],[12,"XtUnmanageChildren","","",211,N],[12,"XtUnmapWidget","","",211,N],[12,"XtUnrealizeWidget","","",211,N],[12,"XtUnregisterDrawable","","",211,N],[12,"XtWarning","","",211,N],[12,"XtWarningMsg","","",211,N],[12,"XtWidgetToApplicationContext","","",211,N],[12,"XtWindow","","",211,N],[12,"XtWindowOfObject","","",211,N],[12,"XtWindowToWidget","","",211,N],[12,"XtAsprintf","","",211,N],[12,"XtVaAppCreateShell","","",211,N],[12,"XtVaAppInitialize","","",211,N],[12,"XtVaCreateArgsList","","",211,N],[12,"XtVaCreateManagedWidget","","",211,N],[12,"XtVaCreatePopupShell","","",211,N],[12,"XtVaCreateWidget","","",211,N],[12,"XtVaGetApplicationResources","","",211,N],[12,"XtVaGetSubresources","","",211,N],[12,"XtVaGetSubvalues","","",211,N],[12,"XtVaGetValues","","",211,N],[12,"XtVaOpenApplication","","",211,N],[12,"XtVaSetSubvalues","","",211,N],[12,"XtVaSetValues","","",211,N],[3,"Arg","","",N,N],[3,"SubstitutionRec","","",N,N],[3,"_TranslationData","","",N,N],[3,"_WidgetClassRec","","",N,N],[3,"_WidgetRec","","",N,N],[3,"_XtActionsRec","","",N,N],[3,"_XtAppStruct","","",N,N],[3,"_XtCallbackRec","","",N,N],[3,"_XtCheckpointTokenRec","","",N,N],[3,"XtConvertArgRec","","",N,N],[3,"_XtResource","","",N,N],[3,"XtWidgetGeometry","","",N,N],[6,"XtCallbackStatus","","",N,N],[6,"XtGeometryResult","","",N,N],[6,"XtGrabKind","","",N,N],[6,"XtListPosition","","",N,N],[6,"ArgList","","",N,N],[6,"Substitution","","",N,N],[6,"Widget","","",N,N],[6,"WidgetClass","","",N,N],[6,"XtAccelerators","","",N,N],[6,"XtActionList","","",N,N],[6,"XtActionsRec","","",N,N],[6,"XtAppContext","","",N,N],[6,"XtCallbackList","","",N,N],[6,"XtCallbackRec","","",N,N],[6,"XtCheckpointToken","","",N,N],[6,"XtCheckpointTokenRec","","",N,N],[6,"XtConvertArgList","","",N,N],[6,"XtResource","","",N,N],[6,"XtResourceList","","",N,N],[6,"XtTranslations","","",N,N],[11,"open","","",211,[[],["result",["xt","openerror"]]]],[0,"xtest","x11_dl","",N,N],[3,"Xf86vmode","x11_dl::xtest","",N,N],[12,"XTestCompareCurrentCursorWithWindow","","",212,N],[12,"XTestCompareCursorWithWindow","","",212,N],[12,"XTestDiscard","","",212,N],[12,"XTestFakeButtonEvent","","",212,N],[12,"XTestFakeDeviceButtonEvent","","",212,N],[12,"XTestFakeDeviceKeyEvent","","",212,N],[12,"XTestFakeDeviceMotionEvent","","",212,N],[12,"XTestFakeKeyEvent","","",212,N],[12,"XTestFakeMotionEvent","","",212,N],[12,"XTestFakeProximityEvent","","",212,N],[12,"XTestFakeRelativeMotionEvent","","",212,N],[12,"XTestGrabControl","","",212,N],[12,"XTestQueryExtension","","",212,N],[12,"XTestSetGContextOfGC","","",212,N],[12,"XTestSetVisualIDOfVisual","","",212,N],[11,"open","","",212,[[],["result",["xf86vmode","openerror"]]]],[0,"xlib_xcb","x11_dl","",N,N],[3,"Xlib_xcb","x11_dl::xlib_xcb","",N,N],[12,"XGetXCBConnection","","",213,N],[6,"xcb_connection_t","","",N,N],[11,"open","","",213,[[],["result",["xlib_xcb","openerror"]]]],[0,"xrandr","x11_dl","",N,N],[3,"Xrandr","x11_dl::xrandr","",N,N],[12,"XRRAddOutputMode","","",214,N],[12,"XRRAllocGamma","","",214,N],[12,"XRRAllocModeInfo","","",214,N],[12,"XRRAllocateMonitor","","",214,N],[12,"XRRChangeOutputProperty","","",214,N],[12,"XRRChangeProviderProperty","","",214,N],[12,"XRRConfigCurrentConfiguration","","",214,N],[12,"XRRConfigCurrentRate","","",214,N],[12,"XRRConfigRates","","",214,N],[12,"XRRConfigRotations","","",214,N],[12,"XRRConfigSizes","","",214,N],[12,"XRRConfigTimes","","",214,N],[12,"XRRConfigureOutputProperty","","",214,N],[12,"XRRConfigureProviderProperty","","",214,N],[12,"XRRCreateMode","","",214,N],[12,"XRRDeleteMonitor","","",214,N],[12,"XRRDeleteOutputMode","","",214,N],[12,"XRRDeleteOutputProperty","","",214,N],[12,"XRRDeleteProviderProperty","","",214,N],[12,"XRRDestroyMode","","",214,N],[12,"XRRFreeCrtcInfo","","",214,N],[12,"XRRFreeGamma","","",214,N],[12,"XRRFreeModeInfo","","",214,N],[12,"XRRFreeMonitors","","",214,N],[12,"XRRFreeOutputInfo","","",214,N],[12,"XRRFreePanning","","",214,N],[12,"XRRFreeProviderInfo","","",214,N],[12,"XRRFreeProviderResources","","",214,N],[12,"XRRFreeScreenConfigInfo","","",214,N],[12,"XRRFreeScreenResources","","",214,N],[12,"XRRGetCrtcGamma","","",214,N],[12,"XRRGetCrtcGammaSize","","",214,N],[12,"XRRGetCrtcInfo","","",214,N],[12,"XRRGetCrtcTransform","","",214,N],[12,"XRRGetMonitors","","",214,N],[12,"XRRGetOutputInfo","","",214,N],[12,"XRRGetOutputPrimary","","",214,N],[12,"XRRGetOutputProperty","","",214,N],[12,"XRRGetPanning","","",214,N],[12,"XRRGetProviderInfo","","",214,N],[12,"XRRGetProviderProperty","","",214,N],[12,"XRRGetProviderResources","","",214,N],[12,"XRRGetScreenInfo","","",214,N],[12,"XRRGetScreenResources","","",214,N],[12,"XRRGetScreenResourcesCurrent","","",214,N],[12,"XRRGetScreenSizeRange","","",214,N],[12,"XRRListOutputProperties","","",214,N],[12,"XRRListProviderProperties","","",214,N],[12,"XRRQueryExtension","","",214,N],[12,"XRRQueryOutputProperty","","",214,N],[12,"XRRQueryProviderProperty","","",214,N],[12,"XRRQueryVersion","","",214,N],[12,"XRRRates","","",214,N],[12,"XRRRootToScreen","","",214,N],[12,"XRRRotations","","",214,N],[12,"XRRSelectInput","","",214,N],[12,"XRRSetCrtcConfig","","",214,N],[12,"XRRSetCrtcGamma","","",214,N],[12,"XRRSetCrtcTransform","","",214,N],[12,"XRRSetMonitor","","",214,N],[12,"XRRSetOutputPrimary","","",214,N],[12,"XRRSetPanning","","",214,N],[12,"XRRSetProviderOffloadSink","","",214,N],[12,"XRRSetProviderOutputSource","","",214,N],[12,"XRRSetScreenConfig","","",214,N],[12,"XRRSetScreenConfigAndRate","","",214,N],[12,"XRRSetScreenSize","","",214,N],[12,"XRRSizes","","",214,N],[12,"XRRTimes","","",214,N],[12,"XRRUpdateConfiguration","","",214,N],[3,"XRRScreenSize","","",N,N],[12,"width","","",215,N],[12,"height","","",215,N],[12,"mwidth","","",215,N],[12,"mheight","","",215,N],[3,"XRRScreenConfiguration","","",N,N],[3,"XRRModeInfo","","",N,N],[12,"id","","",216,N],[12,"width","","",216,N],[12,"height","","",216,N],[12,"dotClock","","",216,N],[12,"hSyncStart","","",216,N],[12,"hSyncEnd","","",216,N],[12,"hTotal","","",216,N],[12,"hSkew","","",216,N],[12,"vSyncStart","","",216,N],[12,"vSyncEnd","","",216,N],[12,"vTotal","","",216,N],[12,"name","","",216,N],[12,"nameLength","","",216,N],[12,"modeFlags","","",216,N],[3,"XRRScreenResources","","",N,N],[12,"timestamp","","",217,N],[12,"configTimestamp","","",217,N],[12,"ncrtc","","",217,N],[12,"crtcs","","",217,N],[12,"noutput","","",217,N],[12,"outputs","","",217,N],[12,"nmode","","",217,N],[12,"modes","","",217,N],[3,"XRROutputInfo","","",N,N],[12,"timestamp","","",218,N],[12,"crtc","","",218,N],[12,"name","","",218,N],[12,"nameLen","","",218,N],[12,"mm_width","","",218,N],[12,"mm_height","","",218,N],[12,"connection","","",218,N],[12,"subpixel_order","","",218,N],[12,"ncrtc","","",218,N],[12,"crtcs","","",218,N],[12,"nclone","","",218,N],[12,"clones","","",218,N],[12,"nmode","","",218,N],[12,"npreferred","","",218,N],[12,"modes","","",218,N],[3,"XRRPropertyInfo","","",N,N],[12,"pending","","",219,N],[12,"range","","",219,N],[12,"immutable","","",219,N],[12,"num_values","","",219,N],[12,"values","","",219,N],[3,"XRRCrtcInfo","","",N,N],[12,"timestamp","","",220,N],[12,"x","","",220,N],[12,"y","","",220,N],[12,"width","","",220,N],[12,"height","","",220,N],[12,"mode","","",220,N],[12,"rotation","","",220,N],[12,"noutput","","",220,N],[12,"outputs","","",220,N],[12,"rotations","","",220,N],[12,"npossible","","",220,N],[12,"possible","","",220,N],[3,"XRRCrtcGamma","","",N,N],[12,"size","","",221,N],[12,"red","","",221,N],[12,"green","","",221,N],[12,"blue","","",221,N],[3,"XRRCrtcTransformAttributes","","",N,N],[12,"pendingTransform","","",222,N],[12,"pendingFilter","","",222,N],[12,"pendingNparams","","",222,N],[12,"pendingParams","","",222,N],[12,"currentTransform","","",222,N],[12,"currentFilter","","",222,N],[12,"currentNparams","","",222,N],[12,"currentParams","","",222,N],[3,"XRRPanning","","",N,N],[12,"timestamp","","",223,N],[12,"left","","",223,N],[12,"top","","",223,N],[12,"width","","",223,N],[12,"height","","",223,N],[12,"track_left","","",223,N],[12,"track_top","","",223,N],[12,"track_width","","",223,N],[12,"track_height","","",223,N],[12,"border_left","","",223,N],[12,"border_top","","",223,N],[12,"border_right","","",223,N],[12,"border_bottom","","",223,N],[3,"XRRProviderResources","","",N,N],[12,"timestamp","","",224,N],[12,"nproviders","","",224,N],[12,"providers","","",224,N],[3,"XRRProviderInfo","","",N,N],[12,"capabilities","","",225,N],[12,"ncrtcs","","",225,N],[12,"crtcs","","",225,N],[12,"noutputs","","",225,N],[12,"outputs","","",225,N],[12,"name","","",225,N],[12,"nassociatedproviders","","",225,N],[12,"associated_providers","","",225,N],[12,"associated_capability","","",225,N],[12,"nameLen","","",225,N],[3,"XRRMonitorInfo","","",N,N],[12,"name","","",226,N],[12,"primary","","",226,N],[12,"automatic","","",226,N],[12,"noutput","","",226,N],[12,"x","","",226,N],[12,"y","","",226,N],[12,"width","","",226,N],[12,"height","","",226,N],[12,"mwidth","","",226,N],[12,"mheight","","",226,N],[12,"outputs","","",226,N],[3,"XRRScreenChangeNotifyEvent","","",N,N],[12,"type_","","",227,N],[12,"serial","","",227,N],[12,"send_event","","",227,N],[12,"display","","",227,N],[12,"window","","",227,N],[12,"root","","",227,N],[12,"timestamp","","",227,N],[12,"config_timestamp","","",227,N],[12,"size_index","","",227,N],[12,"subpixel_order","","",227,N],[12,"rotation","","",227,N],[12,"width","","",227,N],[12,"height","","",227,N],[12,"mwidth","","",227,N],[12,"mheight","","",227,N],[3,"XRRNotifyEvent","","",N,N],[12,"type_","","",228,N],[12,"serial","","",228,N],[12,"send_event","","",228,N],[12,"display","","",228,N],[12,"window","","",228,N],[12,"subtype","","",228,N],[3,"XRROutputChangeNotifyEvent","","",N,N],[12,"type_","","",229,N],[12,"serial","","",229,N],[12,"send_event","","",229,N],[12,"display","","",229,N],[12,"window","","",229,N],[12,"subtype","","",229,N],[12,"output","","",229,N],[12,"crtc","","",229,N],[12,"mode","","",229,N],[12,"rotation","","",229,N],[12,"connection","","",229,N],[12,"subpixel_order","","",229,N],[3,"XRRCrtcChangeNotifyEvent","","",N,N],[12,"type_","","",230,N],[12,"serial","","",230,N],[12,"send_event","","",230,N],[12,"display","","",230,N],[12,"window","","",230,N],[12,"subtype","","",230,N],[12,"crtc","","",230,N],[12,"mode","","",230,N],[12,"rotation","","",230,N],[12,"x","","",230,N],[12,"y","","",230,N],[12,"width","","",230,N],[12,"height","","",230,N],[3,"XRROutputPropertyNotifyEvent","","",N,N],[12,"type_","","",231,N],[12,"serial","","",231,N],[12,"send_event","","",231,N],[12,"display","","",231,N],[12,"window","","",231,N],[12,"subtype","","",231,N],[12,"output","","",231,N],[12,"property","","",231,N],[12,"timestamp","","",231,N],[12,"state","","",231,N],[3,"XRRProviderChangeNotifyEvent","","",N,N],[12,"type_","","",232,N],[12,"serial","","",232,N],[12,"send_event","","",232,N],[12,"display","","",232,N],[12,"window","","",232,N],[12,"subtype","","",232,N],[12,"provider","","",232,N],[12,"timestamp","","",232,N],[12,"current_role","","",232,N],[3,"XRRProviderPropertyNotifyEvent","","",N,N],[12,"type_","","",233,N],[12,"serial","","",233,N],[12,"send_event","","",233,N],[12,"display","","",233,N],[12,"window","","",233,N],[12,"subtype","","",233,N],[12,"provider","","",233,N],[12,"property","","",233,N],[12,"timestamp","","",233,N],[12,"state","","",233,N],[3,"XRRResourceChangeNotifyEvent","","",N,N],[12,"type_","","",234,N],[12,"serial","","",234,N],[12,"send_event","","",234,N],[12,"display","","",234,N],[12,"window","","",234,N],[12,"subtype","","",234,N],[12,"timestamp","","",234,N],[3,"Xrandr_2_2_0","","",N,N],[12,"XRRAddOutputMode","","",235,N],[12,"XRRAllocGamma","","",235,N],[12,"XRRAllocModeInfo","","",235,N],[12,"XRRChangeOutputProperty","","",235,N],[12,"XRRChangeProviderProperty","","",235,N],[12,"XRRConfigCurrentConfiguration","","",235,N],[12,"XRRConfigCurrentRate","","",235,N],[12,"XRRConfigRates","","",235,N],[12,"XRRConfigRotations","","",235,N],[12,"XRRConfigSizes","","",235,N],[12,"XRRConfigTimes","","",235,N],[12,"XRRConfigureOutputProperty","","",235,N],[12,"XRRConfigureProviderProperty","","",235,N],[12,"XRRCreateMode","","",235,N],[12,"XRRDeleteOutputMode","","",235,N],[12,"XRRDeleteOutputProperty","","",235,N],[12,"XRRDeleteProviderProperty","","",235,N],[12,"XRRDestroyMode","","",235,N],[12,"XRRFreeCrtcInfo","","",235,N],[12,"XRRFreeGamma","","",235,N],[12,"XRRFreeModeInfo","","",235,N],[12,"XRRFreeOutputInfo","","",235,N],[12,"XRRFreePanning","","",235,N],[12,"XRRFreeProviderInfo","","",235,N],[12,"XRRFreeProviderResources","","",235,N],[12,"XRRFreeScreenConfigInfo","","",235,N],[12,"XRRFreeScreenResources","","",235,N],[12,"XRRGetCrtcGamma","","",235,N],[12,"XRRGetCrtcGammaSize","","",235,N],[12,"XRRGetCrtcInfo","","",235,N],[12,"XRRGetCrtcTransform","","",235,N],[12,"XRRGetOutputInfo","","",235,N],[12,"XRRGetOutputPrimary","","",235,N],[12,"XRRGetOutputProperty","","",235,N],[12,"XRRGetPanning","","",235,N],[12,"XRRGetProviderInfo","","",235,N],[12,"XRRGetProviderProperty","","",235,N],[12,"XRRGetProviderResources","","",235,N],[12,"XRRGetScreenInfo","","",235,N],[12,"XRRGetScreenResources","","",235,N],[12,"XRRGetScreenResourcesCurrent","","",235,N],[12,"XRRGetScreenSizeRange","","",235,N],[12,"XRRListOutputProperties","","",235,N],[12,"XRRListProviderProperties","","",235,N],[12,"XRRQueryExtension","","",235,N],[12,"XRRQueryOutputProperty","","",235,N],[12,"XRRQueryProviderProperty","","",235,N],[12,"XRRQueryVersion","","",235,N],[12,"XRRRates","","",235,N],[12,"XRRRootToScreen","","",235,N],[12,"XRRRotations","","",235,N],[12,"XRRSelectInput","","",235,N],[12,"XRRSetCrtcConfig","","",235,N],[12,"XRRSetCrtcGamma","","",235,N],[12,"XRRSetCrtcTransform","","",235,N],[12,"XRRSetOutputPrimary","","",235,N],[12,"XRRSetPanning","","",235,N],[12,"XRRSetProviderOffloadSink","","",235,N],[12,"XRRSetProviderOutputSource","","",235,N],[12,"XRRSetScreenConfig","","",235,N],[12,"XRRSetScreenConfigAndRate","","",235,N],[12,"XRRSetScreenSize","","",235,N],[12,"XRRSizes","","",235,N],[12,"XRRTimes","","",235,N],[12,"XRRUpdateConfiguration","","",235,N],[6,"Connection","","",N,N],[6,"Rotation","","",N,N],[6,"SizeID","","",N,N],[6,"SubpixelOrder","","",N,N],[6,"RROutput","","",N,N],[6,"RRCrtc","","",N,N],[6,"RRMode","","",N,N],[6,"RRProvider","","",N,N],[6,"XRRModeFlags","","",N,N],[17,"RANDR_NAME","","",N,N],[17,"RANDR_MAJOR","","",N,N],[17,"RANDR_MINOR","","",N,N],[17,"RRNumberErrors","","",N,N],[17,"RRNumberEvents","","",N,N],[17,"RRNumberRequests","","",N,N],[17,"X_RRQueryVersion","","",N,N],[17,"X_RROldGetScreenInfo","","",N,N],[17,"X_RRSetScreenConfig","","",N,N],[17,"X_RROldScreenChangeSelectInput","","",N,N],[17,"X_RRSelectInput","","",N,N],[17,"X_RRGetScreenInfo","","",N,N],[17,"X_RRGetScreenSizeRange","","",N,N],[17,"X_RRSetScreenSize","","",N,N],[17,"X_RRGetScreenResources","","",N,N],[17,"X_RRGetOutputInfo","","",N,N],[17,"X_RRListOutputProperties","","",N,N],[17,"X_RRQueryOutputProperty","","",N,N],[17,"X_RRConfigureOutputProperty","","",N,N],[17,"X_RRChangeOutputProperty","","",N,N],[17,"X_RRDeleteOutputProperty","","",N,N],[17,"X_RRGetOutputProperty","","",N,N],[17,"X_RRCreateMode","","",N,N],[17,"X_RRDestroyMode","","",N,N],[17,"X_RRAddOutputMode","","",N,N],[17,"X_RRDeleteOutputMode","","",N,N],[17,"X_RRGetCrtcInfo","","",N,N],[17,"X_RRSetCrtcConfig","","",N,N],[17,"X_RRGetCrtcGammaSize","","",N,N],[17,"X_RRGetCrtcGamma","","",N,N],[17,"X_RRSetCrtcGamma","","",N,N],[17,"X_RRGetScreenResourcesCurrent","","",N,N],[17,"X_RRSetCrtcTransform","","",N,N],[17,"X_RRGetCrtcTransform","","",N,N],[17,"X_RRGetPanning","","",N,N],[17,"X_RRSetPanning","","",N,N],[17,"X_RRSetOutputPrimary","","",N,N],[17,"X_RRGetOutputPrimary","","",N,N],[17,"X_RRGetProviders","","",N,N],[17,"X_RRGetProviderInfo","","",N,N],[17,"X_RRSetProviderOffloadSink","","",N,N],[17,"X_RRSetProviderOutputSource","","",N,N],[17,"X_RRListProviderProperties","","",N,N],[17,"X_RRQueryProviderProperty","","",N,N],[17,"X_RRConfigureProviderProperty","","",N,N],[17,"X_RRChangeProviderProperty","","",N,N],[17,"X_RRDeleteProviderProperty","","",N,N],[17,"X_RRGetProviderProperty","","",N,N],[17,"X_RRGetMonitors","","",N,N],[17,"X_RRSetMonitor","","",N,N],[17,"X_RRDeleteMonitor","","",N,N],[17,"RRTransformUnit","","",N,N],[17,"RRTransformScaleUp","","",N,N],[17,"RRTransformScaleDown","","",N,N],[17,"RRTransformProjective","","",N,N],[17,"RRScreenChangeNotifyMask","","",N,N],[17,"RRCrtcChangeNotifyMask","","",N,N],[17,"RROutputChangeNotifyMask","","",N,N],[17,"RROutputPropertyNotifyMask","","",N,N],[17,"RRProviderChangeNotifyMask","","",N,N],[17,"RRProviderPropertyNotifyMask","","",N,N],[17,"RRResourceChangeNotifyMask","","",N,N],[17,"RRScreenChangeNotify","","",N,N],[17,"RRNotify","","",N,N],[17,"RRNotify_CrtcChange","","",N,N],[17,"RRNotify_OutputChange","","",N,N],[17,"RRNotify_OutputProperty","","",N,N],[17,"RRNotify_ProviderChange","","",N,N],[17,"RRNotify_ProviderProperty","","",N,N],[17,"RRNotify_ResourceChange","","",N,N],[17,"RR_Rotate_0","","",N,N],[17,"RR_Rotate_90","","",N,N],[17,"RR_Rotate_180","","",N,N],[17,"RR_Rotate_270","","",N,N],[17,"RR_Reflect_X","","",N,N],[17,"RR_Reflect_Y","","",N,N],[17,"RRSetConfigSuccess","","",N,N],[17,"RRSetConfigInvalidConfigTime","","",N,N],[17,"RRSetConfigInvalidTime","","",N,N],[17,"RRSetConfigFailed","","",N,N],[17,"RR_HSyncPositive","","",N,N],[17,"RR_HSyncNegative","","",N,N],[17,"RR_VSyncPositive","","",N,N],[17,"RR_VSyncNegative","","",N,N],[17,"RR_Interlace","","",N,N],[17,"RR_DoubleScan","","",N,N],[17,"RR_CSync","","",N,N],[17,"RR_CSyncPositive","","",N,N],[17,"RR_CSyncNegative","","",N,N],[17,"RR_HSkewPresent","","",N,N],[17,"RR_BCast","","",N,N],[17,"RR_PixelMultiplex","","",N,N],[17,"RR_DoubleClock","","",N,N],[17,"RR_ClockDivideBy2","","",N,N],[17,"RR_Connected","","",N,N],[17,"RR_Disconnected","","",N,N],[17,"RR_UnknownConnection","","",N,N],[17,"BadRROutput","","",N,N],[17,"BadRRCrtc","","",N,N],[17,"BadRRMode","","",N,N],[17,"BadRRProvider","","",N,N],[17,"RR_PROPERTY_BACKLIGHT","","",N,N],[17,"RR_PROPERTY_RANDR_EDID","","",N,N],[17,"RR_PROPERTY_SIGNAL_FORMAT","","",N,N],[17,"RR_PROPERTY_SIGNAL_PROPERTIES","","",N,N],[17,"RR_PROPERTY_CONNECTOR_TYPE","","",N,N],[17,"RR_PROPERTY_CONNECTOR_NUMBER","","",N,N],[17,"RR_PROPERTY_COMPATIBILITY_LIST","","",N,N],[17,"RR_PROPERTY_CLONE_LIST","","",N,N],[17,"RR_PROPERTY_BORDER","","",N,N],[17,"RR_PROPERTY_BORDER_DIMENSIONS","","",N,N],[17,"RR_PROPERTY_GUID","","",N,N],[17,"RR_PROPERTY_RANDR_TILE","","",N,N],[17,"RR_Capability_None","","",N,N],[17,"RR_Capability_SourceOutput","","",N,N],[17,"RR_Capability_SinkOutput","","",N,N],[17,"RR_Capability_SourceOffload","","",N,N],[17,"RR_Capability_SinkOffload","","",N,N],[11,"open","","",214,[[],["result",["xrandr","openerror"]]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"clone","","",215,[[["self"]],["xrrscreensize"]]],[11,"eq","","",215,[[["self"],["xrrscreensize"]],["bool"]]],[11,"ne","","",215,[[["self"],["xrrscreensize"]],["bool"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"clone","","",216,[[["self"]],["xrrmodeinfo"]]],[11,"eq","","",216,[[["self"],["xrrmodeinfo"]],["bool"]]],[11,"ne","","",216,[[["self"],["xrrmodeinfo"]],["bool"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"clone","","",217,[[["self"]],["xrrscreenresources"]]],[11,"eq","","",217,[[["self"],["xrrscreenresources"]],["bool"]]],[11,"ne","","",217,[[["self"],["xrrscreenresources"]],["bool"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"clone","","",218,[[["self"]],["xrroutputinfo"]]],[11,"eq","","",218,[[["self"],["xrroutputinfo"]],["bool"]]],[11,"ne","","",218,[[["self"],["xrroutputinfo"]],["bool"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"clone","","",219,[[["self"]],["xrrpropertyinfo"]]],[11,"eq","","",219,[[["self"],["xrrpropertyinfo"]],["bool"]]],[11,"ne","","",219,[[["self"],["xrrpropertyinfo"]],["bool"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"clone","","",220,[[["self"]],["xrrcrtcinfo"]]],[11,"eq","","",220,[[["self"],["xrrcrtcinfo"]],["bool"]]],[11,"ne","","",220,[[["self"],["xrrcrtcinfo"]],["bool"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"clone","","",221,[[["self"]],["xrrcrtcgamma"]]],[11,"eq","","",221,[[["self"],["xrrcrtcgamma"]],["bool"]]],[11,"ne","","",221,[[["self"],["xrrcrtcgamma"]],["bool"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"clone","","",222,[[["self"]],["xrrcrtctransformattributes"]]],[11,"eq","","",222,[[["self"],["xrrcrtctransformattributes"]],["bool"]]],[11,"ne","","",222,[[["self"],["xrrcrtctransformattributes"]],["bool"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"clone","","",223,[[["self"]],["xrrpanning"]]],[11,"eq","","",223,[[["self"],["xrrpanning"]],["bool"]]],[11,"ne","","",223,[[["self"],["xrrpanning"]],["bool"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"clone","","",224,[[["self"]],["xrrproviderresources"]]],[11,"eq","","",224,[[["self"],["xrrproviderresources"]],["bool"]]],[11,"ne","","",224,[[["self"],["xrrproviderresources"]],["bool"]]],[11,"fmt","","",225,[[["self"],["formatter"]],["result"]]],[11,"clone","","",225,[[["self"]],["xrrproviderinfo"]]],[11,"eq","","",225,[[["self"],["xrrproviderinfo"]],["bool"]]],[11,"ne","","",225,[[["self"],["xrrproviderinfo"]],["bool"]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result"]]],[11,"clone","","",226,[[["self"]],["xrrmonitorinfo"]]],[11,"eq","","",226,[[["self"],["xrrmonitorinfo"]],["bool"]]],[11,"ne","","",226,[[["self"],["xrrmonitorinfo"]],["bool"]]],[11,"fmt","","",227,[[["self"],["formatter"]],["result"]]],[11,"clone","","",227,[[["self"]],["xrrscreenchangenotifyevent"]]],[11,"eq","","",227,[[["self"],["xrrscreenchangenotifyevent"]],["bool"]]],[11,"ne","","",227,[[["self"],["xrrscreenchangenotifyevent"]],["bool"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"clone","","",228,[[["self"]],["xrrnotifyevent"]]],[11,"eq","","",228,[[["self"],["xrrnotifyevent"]],["bool"]]],[11,"ne","","",228,[[["self"],["xrrnotifyevent"]],["bool"]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result"]]],[11,"clone","","",229,[[["self"]],["xrroutputchangenotifyevent"]]],[11,"eq","","",229,[[["self"],["xrroutputchangenotifyevent"]],["bool"]]],[11,"ne","","",229,[[["self"],["xrroutputchangenotifyevent"]],["bool"]]],[11,"fmt","","",230,[[["self"],["formatter"]],["result"]]],[11,"clone","","",230,[[["self"]],["xrrcrtcchangenotifyevent"]]],[11,"eq","","",230,[[["self"],["xrrcrtcchangenotifyevent"]],["bool"]]],[11,"ne","","",230,[[["self"],["xrrcrtcchangenotifyevent"]],["bool"]]],[11,"fmt","","",231,[[["self"],["formatter"]],["result"]]],[11,"clone","","",231,[[["self"]],["xrroutputpropertynotifyevent"]]],[11,"eq","","",231,[[["self"],["xrroutputpropertynotifyevent"]],["bool"]]],[11,"ne","","",231,[[["self"],["xrroutputpropertynotifyevent"]],["bool"]]],[11,"fmt","","",232,[[["self"],["formatter"]],["result"]]],[11,"clone","","",232,[[["self"]],["xrrproviderchangenotifyevent"]]],[11,"eq","","",232,[[["self"],["xrrproviderchangenotifyevent"]],["bool"]]],[11,"ne","","",232,[[["self"],["xrrproviderchangenotifyevent"]],["bool"]]],[11,"fmt","","",233,[[["self"],["formatter"]],["result"]]],[11,"clone","","",233,[[["self"]],["xrrproviderpropertynotifyevent"]]],[11,"eq","","",233,[[["self"],["xrrproviderpropertynotifyevent"]],["bool"]]],[11,"ne","","",233,[[["self"],["xrrproviderpropertynotifyevent"]],["bool"]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[11,"clone","","",234,[[["self"]],["xrrresourcechangenotifyevent"]]],[11,"eq","","",234,[[["self"],["xrrresourcechangenotifyevent"]],["bool"]]],[11,"ne","","",234,[[["self"],["xrrresourcechangenotifyevent"]],["bool"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xrrscreenchangenotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xrrscreenchangenotifyevent"]]],[11,"from","","",99,[[["xrrscreenchangenotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xrrscreenchangenotifyevent"]],["xevent"]]],[11,"from","x11_dl::xrandr","",227,[[["xevent"]],["xrrscreenchangenotifyevent"]]],[11,"from","","",227,[[["xevent"]],["xrrscreenchangenotifyevent"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xrrnotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xrrnotifyevent"]]],[11,"from","","",99,[[["xrrnotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xrrnotifyevent"]],["xevent"]]],[11,"from","x11_dl::xrandr","",228,[[["xevent"]],["xrrnotifyevent"]]],[11,"from","","",228,[[["xevent"]],["xrrnotifyevent"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xrroutputchangenotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xrroutputchangenotifyevent"]]],[11,"from","","",99,[[["xrroutputchangenotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xrroutputchangenotifyevent"]],["xevent"]]],[11,"from","x11_dl::xrandr","",229,[[["xevent"]],["xrroutputchangenotifyevent"]]],[11,"from","","",229,[[["xevent"]],["xrroutputchangenotifyevent"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xrrcrtcchangenotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xrrcrtcchangenotifyevent"]]],[11,"from","","",99,[[["xrrcrtcchangenotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xrrcrtcchangenotifyevent"]],["xevent"]]],[11,"from","x11_dl::xrandr","",230,[[["xevent"]],["xrrcrtcchangenotifyevent"]]],[11,"from","","",230,[[["xevent"]],["xrrcrtcchangenotifyevent"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xrroutputpropertynotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xrroutputpropertynotifyevent"]]],[11,"from","","",99,[[["xrroutputpropertynotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xrroutputpropertynotifyevent"]],["xevent"]]],[11,"from","x11_dl::xrandr","",231,[[["xevent"]],["xrroutputpropertynotifyevent"]]],[11,"from","","",231,[[["xevent"]],["xrroutputpropertynotifyevent"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xrrproviderchangenotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xrrproviderchangenotifyevent"]]],[11,"from","","",99,[[["xrrproviderchangenotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xrrproviderchangenotifyevent"]],["xevent"]]],[11,"from","x11_dl::xrandr","",232,[[["xevent"]],["xrrproviderchangenotifyevent"]]],[11,"from","","",232,[[["xevent"]],["xrrproviderchangenotifyevent"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xrrproviderpropertynotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xrrproviderpropertynotifyevent"]]],[11,"from","","",99,[[["xrrproviderpropertynotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xrrproviderpropertynotifyevent"]],["xevent"]]],[11,"from","x11_dl::xrandr","",233,[[["xevent"]],["xrrproviderpropertynotifyevent"]]],[11,"from","","",233,[[["xevent"]],["xrrproviderpropertynotifyevent"]]],[11,"as_mut","x11_dl::xlib","",99,[[["self"]],["xrrresourcechangenotifyevent"]]],[11,"as_ref","","",99,[[["self"]],["xrrresourcechangenotifyevent"]]],[11,"from","","",99,[[["xrrresourcechangenotifyevent"]],["xevent"]]],[11,"from","","",99,[[["xrrresourcechangenotifyevent"]],["xevent"]]],[11,"from","x11_dl::xrandr","",234,[[["xevent"]],["xrrresourcechangenotifyevent"]]],[11,"from","","",234,[[["xevent"]],["xrrresourcechangenotifyevent"]]],[11,"open","","",235,[[],["result",["xrandr_2_2_0","openerror"]]]]],"paths":[[4,"OpenErrorKind"],[3,"OpenError"],[3,"Xlib"],[3,"XAnyEvent"],[3,"XButtonEvent"],[3,"XCirculateEvent"],[3,"XCirculateRequestEvent"],[3,"XClientMessageEvent"],[3,"XColormapEvent"],[3,"XConfigureEvent"],[3,"XConfigureRequestEvent"],[3,"XCreateWindowEvent"],[3,"XCrossingEvent"],[3,"XDestroyWindowEvent"],[3,"XErrorEvent"],[3,"XExposeEvent"],[3,"XFocusChangeEvent"],[3,"XGraphicsExposeEvent"],[3,"XGravityEvent"],[3,"XKeyEvent"],[3,"XKeymapEvent"],[3,"XMapEvent"],[3,"XMappingEvent"],[3,"XMapRequestEvent"],[3,"XMotionEvent"],[3,"XNoExposeEvent"],[3,"XPropertyEvent"],[3,"XReparentEvent"],[3,"XResizeRequestEvent"],[3,"XSelectionClearEvent"],[3,"XSelectionEvent"],[3,"XSelectionRequestEvent"],[3,"XUnmapEvent"],[3,"XVisibilityEvent"],[3,"_XkbCompatMapRec"],[3,"_XkbDesc"],[3,"_XkbIndicatorRec"],[3,"_XkbKeyAliasRec"],[3,"_XkbKeyNameRec"],[3,"_XkbNamesRec"],[3,"XkbAnyEvent"],[3,"XkbNewKeyboardNotifyEvent"],[3,"_XkbMapNotifyEvent"],[3,"XkbStateNotifyEvent"],[3,"_XkbControlsNotifyEvent"],[3,"XkbIndicatorNotifyEvent"],[3,"_XkbNamesNotifyEvent"],[3,"XkbCompatMapNotifyEvent"],[3,"XkbBellNotifyEvent"],[3,"XkbActionMessageEvent"],[3,"XkbAccessXNotifyEvent"],[3,"_XkbExtensionDeviceNotifyEvent"],[3,"Depth"],[3,"Screen"],[3,"ScreenFormat"],[3,"Visual"],[3,"XArc"],[3,"XChar2b"],[3,"XCharStruct"],[3,"XClassHint"],[3,"XColor"],[3,"XComposeStatus"],[3,"XExtCodes"],[3,"XExtData"],[3,"XFontProp"],[3,"XFontSetExtents"],[3,"XFontStruct"],[3,"XGCValues"],[3,"XGenericEventCookie"],[3,"XHostAddress"],[3,"XIconSize"],[3,"XImage"],[3,"XKeyboardControl"],[3,"XKeyboardState"],[3,"XmbTextItem"],[3,"XModifierKeymap"],[3,"XOMCharSetList"],[3,"XPixmapFormatValues"],[3,"XPoint"],[3,"XRectangle"],[3,"XrmOptionDescRec"],[3,"XrmValue"],[3,"XSegment"],[3,"XSetWindowAttributes"],[3,"XSizeHints"],[3,"XStandardColormap"],[3,"XTextItem"],[3,"XTextItem16"],[3,"XTextProperty"],[3,"XTimeCoord"],[3,"XVisualInfo"],[3,"XwcTextItem"],[3,"XWindowAttributes"],[3,"XWindowChanges"],[3,"XWMHints"],[3,"XIMCallback"],[3,"XICCallback"],[3,"AspectRatio"],[3,"ImageFns"],[19,"XEvent"],[3,"XkbEvent"],[3,"ClientMessageData"],[3,"Xext"],[3,"Glx"],[3,"Xcursor"],[3,"_XcursorAnimate"],[3,"_XcursorChunkHeader"],[3,"_XcursorComment"],[3,"_XcursorComments"],[3,"_XcursorCursors"],[3,"_XcursorFile"],[3,"_XcursorFileHeader"],[3,"_XcursorFileToc"],[3,"_XcursorImage"],[3,"_XcursorImages"],[3,"Xf86vmode"],[3,"XF86VidModeGamma"],[3,"XF86VidModeModeInfo"],[3,"XF86VidModeModeLine"],[3,"XF86VidModeMonitor"],[3,"XF86VidModeSyncRange"],[3,"XF86VidModeNotifyEvent"],[3,"Xft"],[3,"XftFont"],[3,"XftColor"],[3,"XftCharSpec"],[3,"XftCharFontSpec"],[3,"XftFontSet"],[3,"XftGlyphSpec"],[3,"XftGlyphFontSpec"],[4,"FcEndian"],[4,"FcResult"],[3,"Xlib"],[3,"XineramaScreenInfo"],[3,"XPanoramiXInfo"],[3,"XInput"],[3,"XDevice"],[3,"XDeviceControl"],[3,"XDeviceInfo"],[3,"XDeviceState"],[3,"XDeviceTimeCoord"],[3,"XExtensionVersion"],[3,"XFeedbackControl"],[3,"XFeedbackState"],[3,"XInputClass"],[3,"XInputClassInfo"],[3,"XInput2"],[3,"XIAddMasterInfo"],[3,"XIRemoveMasterInfo"],[3,"XIAttachSlaveInfo"],[3,"XIDetachSlaveInfo"],[3,"XIAnyHierarchyChangeInfo"],[3,"XIModifierState"],[3,"XIButtonState"],[3,"XIValuatorState"],[3,"XIEventMask"],[3,"XIAnyClassInfo"],[3,"XIButtonClassInfo"],[3,"XIKeyClassInfo"],[3,"XIValuatorClassInfo"],[3,"XIScrollClassInfo"],[3,"XITouchClassInfo"],[3,"XIDeviceInfo"],[3,"XIGrabModifiers"],[3,"XIBarrierReleasePointerInfo"],[3,"XIEvent"],[3,"XIHierarchyInfo"],[3,"XIHierarchyEvent"],[3,"XIDeviceChangedEvent"],[3,"XIDeviceEvent"],[3,"XIRawEvent"],[3,"XIEnterEvent"],[3,"XIPropertyEvent"],[3,"XITouchOwnershipEvent"],[3,"XIBarrierEvent"],[3,"Xmu"],[3,"Xf86vmode"],[3,"XRecordClientInfo"],[3,"XRecordExtRange"],[3,"XRecordInterceptData"],[3,"XRecordRange"],[3,"XRecordRange8"],[3,"XRecordRange16"],[3,"XRecordState"],[3,"Xrender"],[3,"_XAnimCursor"],[3,"_XCircle"],[3,"_XConicalGradient"],[3,"_XFilters"],[3,"_XGlyphElt8"],[3,"_XGlyphElt16"],[3,"_XGlyphElt32"],[3,"_XGlyphInfo"],[3,"_XIndexValue"],[3,"_XLinearGradient"],[3,"_XLineFixed"],[3,"_XPointDouble"],[3,"_XPointFixed"],[3,"_XRadialGradient"],[3,"XRenderColor"],[3,"XRenderDirectFormat"],[3,"XRenderPictFormat"],[3,"_XRenderPictureAttributes"],[3,"_XSpanFix"],[3,"_XTrap"],[3,"_XTrapezoid"],[3,"_XTriangle"],[3,"_XTransform"],[3,"Xss"],[3,"XScreenSaverInfo"],[3,"XScreenSaverNotifyEvent"],[3,"Xt"],[3,"Xf86vmode"],[3,"Xlib_xcb"],[3,"Xrandr"],[3,"XRRScreenSize"],[3,"XRRModeInfo"],[3,"XRRScreenResources"],[3,"XRROutputInfo"],[3,"XRRPropertyInfo"],[3,"XRRCrtcInfo"],[3,"XRRCrtcGamma"],[3,"XRRCrtcTransformAttributes"],[3,"XRRPanning"],[3,"XRRProviderResources"],[3,"XRRProviderInfo"],[3,"XRRMonitorInfo"],[3,"XRRScreenChangeNotifyEvent"],[3,"XRRNotifyEvent"],[3,"XRROutputChangeNotifyEvent"],[3,"XRRCrtcChangeNotifyEvent"],[3,"XRROutputPropertyNotifyEvent"],[3,"XRRProviderChangeNotifyEvent"],[3,"XRRProviderPropertyNotifyEvent"],[3,"XRRResourceChangeNotifyEvent"],[3,"Xrandr_2_2_0"]]};
searchIndex["xcb"]={"doc":"Rust bindings to the XCB library.","items":[[0,"base","xcb","",N,N],[3,"StructPtr","xcb::base","`StructPtr` is a wrapper for pointer to struct owned by XCB that must not be freed it is instead bound to the lifetime of its parent that it borrows immutably",N,N],[12,"ptr","","",0,N],[3,"Event","","`Event` wraps a pointer to `xcb_*_event_t` this pointer will be freed when the `Event` goes out of scope",N,N],[12,"ptr","","",1,N],[3,"Error","","`Error` wraps a pointer to `xcb_*_error_t` this pointer will be freed when the `Error` goes out of scope",N,N],[12,"ptr","","",2,N],[3,"Cookie","","wraps a cookie as returned by a request function. Instantiations of `Cookie` that are not `VoidCookie` should provide a `get_reply` method to return a `Reply`",N,N],[12,"cookie","","",3,N],[12,"conn","","",3,N],[12,"checked","","",3,N],[3,"Reply","","Wraps a pointer to a `xcb_*_reply_t` the pointer is freed when the `Reply` goes out of scope",N,N],[12,"ptr","","",4,N],[3,"Connection","","xcb::Connection handles communication with the X server. It wraps an `xcb_connection_t` object and will call `xcb_disconnect` when the `Connection` goes out of scope",N,N],[3,"QueryExtensionData","","",N,N],[4,"ConnError","","Error type that is returned by `Connection::has_error`",N,N],[13,"Connection","","xcb connection errors because of socket, pipe and other stream errors.",5,N],[13,"ClosedExtNotSupported","","xcb connection shutdown because of extension not supported",5,N],[13,"ClosedMemInsufficient","","malloc(), calloc() and realloc() error upon failure, for eg ENOMEM",5,N],[13,"ClosedReqLenExceed","","Connection closed, exceeding request length that server accepts.",5,N],[13,"ClosedParseErr","","Connection closed, error during parsing display string.",5,N],[13,"ClosedInvalidScreen","","Connection closed because the server does not have a screen matching the display.",5,N],[13,"ClosedFdPassingFailed","","Connection closed because some FD passing operation failed",5,N],[5,"cast_event","","Casts the generic event to the right event. Assumes that the given event is really the correct type.",N,[[["genericevent"]],["t"]]],[5,"cast_error","","Casts the generic error to the right error. Assumes that the given error is really the correct type.",N,[[["genericerror"]],["t"]]],[5,"pack_bitfield","","pack bitfields tuples into vector usable for FFI requests `let values = [ (xcb::CW_EVENT_MASK, xcb::EVENT_MASK_EXPOSURE | xcb::EVENT_MASK_KEY_PRESS), (xcb::CW_BACK_PIXEL, 0xffffffff), ]; let ffi_values = ( xcb::CW_BACK_PIXEL | xcb::CW_EVENT_MASK, [ Oxffffffff, xcb::EVENT_MASK_EXPOSURE | xcb::EVENT_MASK_KEY_PRESS, 0 ] ); assert_eq!(pack_bitfield(&mut values), ffi_values);`",N,N],[6,"Extension","","Opaque type used as key for `Connection::get_extension_data`",N,N],[6,"VoidCookie","","",N,N],[6,"GenericEvent","","",N,N],[6,"GenericError","","",N,N],[6,"GenericReply","","",N,N],[6,"AuthInfo","","",N,N],[6,"ConnResult","","",N,N],[17,"X_PROTOCOL","","Current protocol version",N,N],[17,"X_PROTOCOL_REVISION","","Current minor version",N,N],[17,"X_TCP_PORT","","X_TCP_PORT + display number = server port for TCP transport",N,N],[17,"NONE","","`xcb::NONE` is the universal null resource or null atom parameter value for many core X requests",N,N],[17,"COPY_FROM_PARENT","","`xcb::COPY_FROM_PARENT` can be used for many `xcb::create_window` parameters",N,N],[17,"CURRENT_TIME","","`xcb::CURRENT_TIME` can be used in most requests that take an `xcb::Timestamp`",N,N],[17,"NO_SYMBOL","","`xcb::NO_SYMBOL` fills in unused entries in `xcb::Keysym` tables",N,N],[8,"Zero","","",N,N],[10,"zero","","",6,[[],["self"]]],[11,"response_type","","",1,[[["self"]],["u8"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"response_type","","",2,[[["self"]],["u8"]]],[11,"error_code","","",2,[[["self"]],["u8"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"request_check","","",7,[[["self"]],["result",["genericerror"]]]],[11,"drop","","",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"flush","","Forces any buffered output to be written to the server. Blocks until the write is complete.",8,[[["self"]],["bool"]]],[11,"get_maximum_request_length","","Returns the maximum request length that this server accepts.",8,[[["self"]],["u32"]]],[11,"prefetch_maximum_request_length","","Prefetch the maximum request length without blocking.",8,[[["self"]]]],[11,"wait_for_event","","Returns the next event or error from the server.",8,[[["self"]],["option",["genericevent"]]]],[11,"poll_for_event","","Returns the next event or error from the server.",8,[[["self"]],["option",["genericevent"]]]],[11,"poll_for_queued_event","","Returns the next event without reading from the connection.",8,[[["self"]],["option",["genericevent"]]]],[11,"get_setup","","Access the data returned by the server.",8,[[["self"]],["setup"]]],[11,"has_error","","Test whether the connection has shut down due to a fatal error.",8,[[["self"]],["connresult"]]],[11,"generate_id","","Allocates an XID for a new object.",8,[[["self"]],["u32"]]],[11,"get_raw_conn","","Returns the inner ffi `xcb_connection_t` pointer",8,N],[11,"into_raw_conn","","Consumes this object, returning the inner ffi `xcb_connection_t` pointer",8,N],[11,"prefetch_extension_data","","Prefetch of extension data into the extension cache",8,[[["self"],["extension"]]]],[11,"get_extension_data","","Caches reply information from QueryExtension requests.",8,[[["self"],["extension"]],["option",["queryextensiondata"]]]],[11,"connect","","Connects to the X server. `displayname:` The name of the display.",8,[[["option",["str"]]],["connresult"]]],[11,"connect_with_auth_info","","Connects to the X server, using an authorization information. display: The name of the display. auth_info: The authorization information. screen: A pointer to a preferred screen number. Returns A newly allocated `Connection` structure.",8,[[["option",["str"]],["authinfo"]],["connresult"]]],[11,"from_raw_conn","","builds a new Connection object from an available connection",8,N],[11,"as_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"drop","","",8,[[["self"]]]],[11,"present","","",9,[[["self"]],["bool"]]],[11,"major_opcode","","",9,[[["self"]],["u8"]]],[11,"first_event","","",9,[[["self"]],["u8"]]],[11,"first_error","","",9,[[["self"]],["u8"]]],[0,"xproto","xcb","",N,N],[3,"RequestError","xcb::xproto","",N,N],[12,"base","","",10,N],[3,"ValueError","","",N,N],[12,"base","","",11,N],[3,"WindowError","","",N,N],[12,"base","","",12,N],[3,"PixmapError","","",N,N],[12,"base","","",13,N],[3,"AtomError","","",N,N],[12,"base","","",14,N],[3,"CursorError","","",N,N],[12,"base","","",15,N],[3,"FontError","","",N,N],[12,"base","","",16,N],[3,"MatchError","","",N,N],[12,"base","","",17,N],[3,"DrawableError","","",N,N],[12,"base","","",18,N],[3,"AccessError","","",N,N],[12,"base","","",19,N],[3,"AllocError","","",N,N],[12,"base","","",20,N],[3,"ColormapError","","",N,N],[12,"base","","",21,N],[3,"GContextError","","",N,N],[12,"base","","",22,N],[3,"IdChoiceError","","",N,N],[12,"base","","",23,N],[3,"NameError","","",N,N],[12,"base","","",24,N],[3,"LengthError","","",N,N],[12,"base","","",25,N],[3,"ImplementationError","","",N,N],[12,"base","","",26,N],[3,"Char2b","","",N,N],[12,"base","","",27,N],[3,"Point","","",N,N],[12,"base","","",28,N],[3,"Rectangle","","",N,N],[12,"base","","",29,N],[3,"Arc","","",N,N],[12,"base","","",30,N],[3,"Format","","",N,N],[12,"base","","",31,N],[3,"Visualtype","","",N,N],[12,"base","","",32,N],[3,"Timecoord","","",N,N],[12,"base","","",33,N],[3,"Fontprop","","",N,N],[12,"base","","",34,N],[3,"Charinfo","","",N,N],[12,"base","","",35,N],[3,"Segment","","",N,N],[12,"base","","",36,N],[3,"Coloritem","","",N,N],[12,"base","","",37,N],[3,"Rgb","","",N,N],[12,"base","","",38,N],[5,"create_window","","Creates a window",N,N],[5,"create_window_checked","","Creates a window",N,N],[5,"change_window_attributes","","change window attributes",N,N],[5,"change_window_attributes_checked","","change window attributes",N,N],[5,"get_window_attributes","","Gets window attributes",N,[[["connection"],["window"]],["getwindowattributescookie"]]],[5,"get_window_attributes_unchecked","","Gets window attributes",N,[[["connection"],["window"]],["getwindowattributescookie"]]],[5,"destroy_window","","Destroys a window",N,[[["connection"],["window"]],["voidcookie"]]],[5,"destroy_window_checked","","Destroys a window",N,[[["connection"],["window"]],["voidcookie"]]],[5,"destroy_subwindows","","",N,[[["connection"],["window"]],["voidcookie"]]],[5,"destroy_subwindows_checked","","",N,[[["connection"],["window"]],["voidcookie"]]],[5,"change_save_set","","Changes a client's save set",N,[[["connection"],["u8"],["window"]],["voidcookie"]]],[5,"change_save_set_checked","","Changes a client's save set",N,[[["connection"],["u8"],["window"]],["voidcookie"]]],[5,"reparent_window","","Reparents a window",N,[[["connection"],["window"],["window"],["i16"],["i16"]],["voidcookie"]]],[5,"reparent_window_checked","","Reparents a window",N,[[["connection"],["window"],["window"],["i16"],["i16"]],["voidcookie"]]],[5,"map_window","","Makes a window visible",N,[[["connection"],["window"]],["voidcookie"]]],[5,"map_window_checked","","Makes a window visible",N,[[["connection"],["window"]],["voidcookie"]]],[5,"map_subwindows","","",N,[[["connection"],["window"]],["voidcookie"]]],[5,"map_subwindows_checked","","",N,[[["connection"],["window"]],["voidcookie"]]],[5,"unmap_window","","Makes a window invisible",N,[[["connection"],["window"]],["voidcookie"]]],[5,"unmap_window_checked","","Makes a window invisible",N,[[["connection"],["window"]],["voidcookie"]]],[5,"unmap_subwindows","","",N,[[["connection"],["window"]],["voidcookie"]]],[5,"unmap_subwindows_checked","","",N,[[["connection"],["window"]],["voidcookie"]]],[5,"configure_window","","Configures window attributes",N,N],[5,"configure_window_checked","","Configures window attributes",N,N],[5,"circulate_window","","Change window stacking order",N,[[["connection"],["u8"],["window"]],["voidcookie"]]],[5,"circulate_window_checked","","Change window stacking order",N,[[["connection"],["u8"],["window"]],["voidcookie"]]],[5,"get_geometry","","Get current window geometry",N,[[["connection"],["drawable"]],["getgeometrycookie"]]],[5,"get_geometry_unchecked","","Get current window geometry",N,[[["connection"],["drawable"]],["getgeometrycookie"]]],[5,"query_tree","","query the window tree",N,[[["connection"],["window"]],["querytreecookie"]]],[5,"query_tree_unchecked","","query the window tree",N,[[["connection"],["window"]],["querytreecookie"]]],[5,"intern_atom","","Get atom identifier by name",N,[[["connection"],["bool"],["str"]],["internatomcookie"]]],[5,"intern_atom_unchecked","","Get atom identifier by name",N,[[["connection"],["bool"],["str"]],["internatomcookie"]]],[5,"get_atom_name","","",N,[[["connection"],["atom"]],["getatomnamecookie"]]],[5,"get_atom_name_unchecked","","",N,[[["connection"],["atom"]],["getatomnamecookie"]]],[5,"change_property","","Changes a window property",N,N],[5,"change_property_checked","","Changes a window property",N,N],[5,"delete_property","","",N,[[["connection"],["window"],["atom"]],["voidcookie"]]],[5,"delete_property_checked","","",N,[[["connection"],["window"],["atom"]],["voidcookie"]]],[5,"get_property","","Gets a window property",N,[[["connection"],["bool"],["window"],["atom"],["atom"],["u32"],["u32"]],["getpropertycookie"]]],[5,"get_property_unchecked","","Gets a window property",N,[[["connection"],["bool"],["window"],["atom"],["atom"],["u32"],["u32"]],["getpropertycookie"]]],[5,"list_properties","","",N,[[["connection"],["window"]],["listpropertiescookie"]]],[5,"list_properties_unchecked","","",N,[[["connection"],["window"]],["listpropertiescookie"]]],[5,"set_selection_owner","","Sets the owner of a selection",N,[[["connection"],["window"],["atom"],["timestamp"]],["voidcookie"]]],[5,"set_selection_owner_checked","","Sets the owner of a selection",N,[[["connection"],["window"],["atom"],["timestamp"]],["voidcookie"]]],[5,"get_selection_owner","","Gets the owner of a selection",N,[[["connection"],["atom"]],["getselectionownercookie"]]],[5,"get_selection_owner_unchecked","","Gets the owner of a selection",N,[[["connection"],["atom"]],["getselectionownercookie"]]],[5,"convert_selection","","",N,[[["connection"],["window"],["atom"],["atom"],["atom"],["timestamp"]],["voidcookie"]]],[5,"convert_selection_checked","","",N,[[["connection"],["window"],["atom"],["atom"],["atom"],["timestamp"]],["voidcookie"]]],[5,"send_event","","send an event",N,[[["connection"],["bool"],["window"],["u32"],["event"]],["voidcookie"]]],[5,"send_event_checked","","send an event",N,[[["connection"],["bool"],["window"],["u32"],["event"]],["voidcookie"]]],[5,"grab_pointer","","Grab the pointer",N,[[["connection"],["bool"],["window"],["u16"],["u8"],["u8"],["window"],["cursor"],["timestamp"]],["grabpointercookie"]]],[5,"grab_pointer_unchecked","","Grab the pointer",N,[[["connection"],["bool"],["window"],["u16"],["u8"],["u8"],["window"],["cursor"],["timestamp"]],["grabpointercookie"]]],[5,"ungrab_pointer","","release the pointer",N,[[["connection"],["timestamp"]],["voidcookie"]]],[5,"ungrab_pointer_checked","","release the pointer",N,[[["connection"],["timestamp"]],["voidcookie"]]],[5,"grab_button","","Grab pointer button(s)",N,[[["connection"],["bool"],["window"],["u16"],["u8"],["u8"],["window"],["cursor"],["u8"],["u16"]],["voidcookie"]]],[5,"grab_button_checked","","Grab pointer button(s)",N,[[["connection"],["bool"],["window"],["u16"],["u8"],["u8"],["window"],["cursor"],["u8"],["u16"]],["voidcookie"]]],[5,"ungrab_button","","",N,[[["connection"],["u8"],["window"],["u16"]],["voidcookie"]]],[5,"ungrab_button_checked","","",N,[[["connection"],["u8"],["window"],["u16"]],["voidcookie"]]],[5,"change_active_pointer_grab","","",N,[[["connection"],["cursor"],["timestamp"],["u16"]],["voidcookie"]]],[5,"change_active_pointer_grab_checked","","",N,[[["connection"],["cursor"],["timestamp"],["u16"]],["voidcookie"]]],[5,"grab_keyboard","","Grab the keyboard",N,[[["connection"],["bool"],["window"],["timestamp"],["u8"],["u8"]],["grabkeyboardcookie"]]],[5,"grab_keyboard_unchecked","","Grab the keyboard",N,[[["connection"],["bool"],["window"],["timestamp"],["u8"],["u8"]],["grabkeyboardcookie"]]],[5,"ungrab_keyboard","","",N,[[["connection"],["timestamp"]],["voidcookie"]]],[5,"ungrab_keyboard_checked","","",N,[[["connection"],["timestamp"]],["voidcookie"]]],[5,"grab_key","","Grab keyboard key(s)",N,[[["connection"],["bool"],["window"],["u16"],["keycode"],["u8"],["u8"]],["voidcookie"]]],[5,"grab_key_checked","","Grab keyboard key(s)",N,[[["connection"],["bool"],["window"],["u16"],["keycode"],["u8"],["u8"]],["voidcookie"]]],[5,"ungrab_key","","release a key combination",N,[[["connection"],["keycode"],["window"],["u16"]],["voidcookie"]]],[5,"ungrab_key_checked","","release a key combination",N,[[["connection"],["keycode"],["window"],["u16"]],["voidcookie"]]],[5,"allow_events","","release queued events",N,[[["connection"],["u8"],["timestamp"]],["voidcookie"]]],[5,"allow_events_checked","","release queued events",N,[[["connection"],["u8"],["timestamp"]],["voidcookie"]]],[5,"grab_server","","",N,[[["connection"]],["voidcookie"]]],[5,"grab_server_checked","","",N,[[["connection"]],["voidcookie"]]],[5,"ungrab_server","","",N,[[["connection"]],["voidcookie"]]],[5,"ungrab_server_checked","","",N,[[["connection"]],["voidcookie"]]],[5,"query_pointer","","get pointer coordinates",N,[[["connection"],["window"]],["querypointercookie"]]],[5,"query_pointer_unchecked","","get pointer coordinates",N,[[["connection"],["window"]],["querypointercookie"]]],[5,"get_motion_events","","",N,[[["connection"],["window"],["timestamp"],["timestamp"]],["getmotioneventscookie"]]],[5,"get_motion_events_unchecked","","",N,[[["connection"],["window"],["timestamp"],["timestamp"]],["getmotioneventscookie"]]],[5,"translate_coordinates","","",N,[[["connection"],["window"],["window"],["i16"],["i16"]],["translatecoordinatescookie"]]],[5,"translate_coordinates_unchecked","","",N,[[["connection"],["window"],["window"],["i16"],["i16"]],["translatecoordinatescookie"]]],[5,"warp_pointer","","move mouse pointer",N,[[["connection"],["window"],["window"],["i16"],["i16"],["u16"],["u16"],["i16"],["i16"]],["voidcookie"]]],[5,"warp_pointer_checked","","move mouse pointer",N,[[["connection"],["window"],["window"],["i16"],["i16"],["u16"],["u16"],["i16"],["i16"]],["voidcookie"]]],[5,"set_input_focus","","Sets input focus",N,[[["connection"],["u8"],["window"],["timestamp"]],["voidcookie"]]],[5,"set_input_focus_checked","","Sets input focus",N,[[["connection"],["u8"],["window"],["timestamp"]],["voidcookie"]]],[5,"get_input_focus","","",N,[[["connection"]],["getinputfocuscookie"]]],[5,"get_input_focus_unchecked","","",N,[[["connection"]],["getinputfocuscookie"]]],[5,"query_keymap","","",N,[[["connection"]],["querykeymapcookie"]]],[5,"query_keymap_unchecked","","",N,[[["connection"]],["querykeymapcookie"]]],[5,"open_font","","opens a font",N,[[["connection"],["font"],["str"]],["voidcookie"]]],[5,"open_font_checked","","opens a font",N,[[["connection"],["font"],["str"]],["voidcookie"]]],[5,"close_font","","",N,[[["connection"],["font"]],["voidcookie"]]],[5,"close_font_checked","","",N,[[["connection"],["font"]],["voidcookie"]]],[5,"query_font","","query font metrics",N,[[["connection"],["fontable"]],["queryfontcookie"]]],[5,"query_font_unchecked","","query font metrics",N,[[["connection"],["fontable"]],["queryfontcookie"]]],[5,"query_text_extents","","get text extents",N,N],[5,"query_text_extents_unchecked","","get text extents",N,N],[5,"list_fonts","","get matching font names",N,[[["connection"],["u16"],["str"]],["listfontscookie"]]],[5,"list_fonts_unchecked","","get matching font names",N,[[["connection"],["u16"],["str"]],["listfontscookie"]]],[5,"list_fonts_with_info","","get matching font names and information",N,[[["connection"],["u16"],["str"]],["listfontswithinfocookie"]]],[5,"list_fonts_with_info_unchecked","","get matching font names and information",N,[[["connection"],["u16"],["str"]],["listfontswithinfocookie"]]],[5,"set_font_path","","",N,N],[5,"set_font_path_checked","","",N,N],[5,"get_font_path","","",N,[[["connection"]],["getfontpathcookie"]]],[5,"get_font_path_unchecked","","",N,[[["connection"]],["getfontpathcookie"]]],[5,"create_pixmap","","Creates a pixmap",N,[[["connection"],["u8"],["pixmap"],["drawable"],["u16"],["u16"]],["voidcookie"]]],[5,"create_pixmap_checked","","Creates a pixmap",N,[[["connection"],["u8"],["pixmap"],["drawable"],["u16"],["u16"]],["voidcookie"]]],[5,"free_pixmap","","Destroys a pixmap",N,[[["connection"],["pixmap"]],["voidcookie"]]],[5,"free_pixmap_checked","","Destroys a pixmap",N,[[["connection"],["pixmap"]],["voidcookie"]]],[5,"create_gc","","Creates a graphics context",N,N],[5,"create_gc_checked","","Creates a graphics context",N,N],[5,"change_gc","","change graphics context components",N,N],[5,"change_gc_checked","","change graphics context components",N,N],[5,"copy_gc","","",N,[[["connection"],["gcontext"],["gcontext"],["u32"]],["voidcookie"]]],[5,"copy_gc_checked","","",N,[[["connection"],["gcontext"],["gcontext"],["u32"]],["voidcookie"]]],[5,"set_dashes","","",N,N],[5,"set_dashes_checked","","",N,N],[5,"set_clip_rectangles","","",N,N],[5,"set_clip_rectangles_checked","","",N,N],[5,"free_gc","","Destroys a graphics context",N,[[["connection"],["gcontext"]],["voidcookie"]]],[5,"free_gc_checked","","Destroys a graphics context",N,[[["connection"],["gcontext"]],["voidcookie"]]],[5,"clear_area","","",N,[[["connection"],["bool"],["window"],["i16"],["i16"],["u16"],["u16"]],["voidcookie"]]],[5,"clear_area_checked","","",N,[[["connection"],["bool"],["window"],["i16"],["i16"],["u16"],["u16"]],["voidcookie"]]],[5,"copy_area","","copy areas",N,[[["connection"],["drawable"],["drawable"],["gcontext"],["i16"],["i16"],["i16"],["i16"],["u16"],["u16"]],["voidcookie"]]],[5,"copy_area_checked","","copy areas",N,[[["connection"],["drawable"],["drawable"],["gcontext"],["i16"],["i16"],["i16"],["i16"],["u16"],["u16"]],["voidcookie"]]],[5,"copy_plane","","",N,[[["connection"],["drawable"],["drawable"],["gcontext"],["i16"],["i16"],["i16"],["i16"],["u16"],["u16"],["u32"]],["voidcookie"]]],[5,"copy_plane_checked","","",N,[[["connection"],["drawable"],["drawable"],["gcontext"],["i16"],["i16"],["i16"],["i16"],["u16"],["u16"],["u32"]],["voidcookie"]]],[5,"poly_point","","",N,N],[5,"poly_point_checked","","",N,N],[5,"poly_line","","draw lines",N,N],[5,"poly_line_checked","","draw lines",N,N],[5,"poly_segment","","draw lines",N,N],[5,"poly_segment_checked","","draw lines",N,N],[5,"poly_rectangle","","",N,N],[5,"poly_rectangle_checked","","",N,N],[5,"poly_arc","","",N,N],[5,"poly_arc_checked","","",N,N],[5,"fill_poly","","",N,N],[5,"fill_poly_checked","","",N,N],[5,"poly_fill_rectangle","","Fills rectangles",N,N],[5,"poly_fill_rectangle_checked","","Fills rectangles",N,N],[5,"poly_fill_arc","","",N,N],[5,"poly_fill_arc_checked","","",N,N],[5,"put_image","","",N,N],[5,"put_image_checked","","",N,N],[5,"get_image","","",N,[[["connection"],["u8"],["drawable"],["i16"],["i16"],["u16"],["u16"],["u32"]],["getimagecookie"]]],[5,"get_image_unchecked","","",N,[[["connection"],["u8"],["drawable"],["i16"],["i16"],["u16"],["u16"],["u32"]],["getimagecookie"]]],[5,"poly_text_8","","",N,N],[5,"poly_text_8_checked","","",N,N],[5,"poly_text_16","","",N,N],[5,"poly_text_16_checked","","",N,N],[5,"image_text_8","","Draws text",N,[[["connection"],["drawable"],["gcontext"],["i16"],["i16"],["str"]],["voidcookie"]]],[5,"image_text_8_checked","","Draws text",N,[[["connection"],["drawable"],["gcontext"],["i16"],["i16"],["str"]],["voidcookie"]]],[5,"image_text_16","","Draws text",N,N],[5,"image_text_16_checked","","Draws text",N,N],[5,"create_colormap","","",N,[[["connection"],["u8"],["colormap"],["window"],["visualid"]],["voidcookie"]]],[5,"create_colormap_checked","","",N,[[["connection"],["u8"],["colormap"],["window"],["visualid"]],["voidcookie"]]],[5,"free_colormap","","",N,[[["connection"],["colormap"]],["voidcookie"]]],[5,"free_colormap_checked","","",N,[[["connection"],["colormap"]],["voidcookie"]]],[5,"copy_colormap_and_free","","",N,[[["connection"],["colormap"],["colormap"]],["voidcookie"]]],[5,"copy_colormap_and_free_checked","","",N,[[["connection"],["colormap"],["colormap"]],["voidcookie"]]],[5,"install_colormap","","",N,[[["connection"],["colormap"]],["voidcookie"]]],[5,"install_colormap_checked","","",N,[[["connection"],["colormap"]],["voidcookie"]]],[5,"uninstall_colormap","","",N,[[["connection"],["colormap"]],["voidcookie"]]],[5,"uninstall_colormap_checked","","",N,[[["connection"],["colormap"]],["voidcookie"]]],[5,"list_installed_colormaps","","",N,[[["connection"],["window"]],["listinstalledcolormapscookie"]]],[5,"list_installed_colormaps_unchecked","","",N,[[["connection"],["window"]],["listinstalledcolormapscookie"]]],[5,"alloc_color","","Allocate a color",N,[[["connection"],["colormap"],["u16"],["u16"],["u16"]],["alloccolorcookie"]]],[5,"alloc_color_unchecked","","Allocate a color",N,[[["connection"],["colormap"],["u16"],["u16"],["u16"]],["alloccolorcookie"]]],[5,"alloc_named_color","","",N,[[["connection"],["colormap"],["str"]],["allocnamedcolorcookie"]]],[5,"alloc_named_color_unchecked","","",N,[[["connection"],["colormap"],["str"]],["allocnamedcolorcookie"]]],[5,"alloc_color_cells","","",N,[[["connection"],["bool"],["colormap"],["u16"],["u16"]],["alloccolorcellscookie"]]],[5,"alloc_color_cells_unchecked","","",N,[[["connection"],["bool"],["colormap"],["u16"],["u16"]],["alloccolorcellscookie"]]],[5,"alloc_color_planes","","",N,[[["connection"],["bool"],["colormap"],["u16"],["u16"],["u16"],["u16"]],["alloccolorplanescookie"]]],[5,"alloc_color_planes_unchecked","","",N,[[["connection"],["bool"],["colormap"],["u16"],["u16"],["u16"],["u16"]],["alloccolorplanescookie"]]],[5,"free_colors","","",N,N],[5,"free_colors_checked","","",N,N],[5,"store_colors","","",N,N],[5,"store_colors_checked","","",N,N],[5,"store_named_color","","",N,[[["connection"],["u8"],["colormap"],["u32"],["str"]],["voidcookie"]]],[5,"store_named_color_checked","","",N,[[["connection"],["u8"],["colormap"],["u32"],["str"]],["voidcookie"]]],[5,"query_colors","","",N,N],[5,"query_colors_unchecked","","",N,N],[5,"lookup_color","","",N,[[["connection"],["colormap"],["str"]],["lookupcolorcookie"]]],[5,"lookup_color_unchecked","","",N,[[["connection"],["colormap"],["str"]],["lookupcolorcookie"]]],[5,"create_cursor","","",N,[[["connection"],["cursor"],["pixmap"],["pixmap"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["voidcookie"]]],[5,"create_cursor_checked","","",N,[[["connection"],["cursor"],["pixmap"],["pixmap"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["voidcookie"]]],[5,"create_glyph_cursor","","create cursor",N,[[["connection"],["cursor"],["font"],["font"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["voidcookie"]]],[5,"create_glyph_cursor_checked","","create cursor",N,[[["connection"],["cursor"],["font"],["font"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["voidcookie"]]],[5,"free_cursor","","Deletes a cursor",N,[[["connection"],["cursor"]],["voidcookie"]]],[5,"free_cursor_checked","","Deletes a cursor",N,[[["connection"],["cursor"]],["voidcookie"]]],[5,"recolor_cursor","","",N,[[["connection"],["cursor"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["voidcookie"]]],[5,"recolor_cursor_checked","","",N,[[["connection"],["cursor"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["voidcookie"]]],[5,"query_best_size","","",N,[[["connection"],["u8"],["drawable"],["u16"],["u16"]],["querybestsizecookie"]]],[5,"query_best_size_unchecked","","",N,[[["connection"],["u8"],["drawable"],["u16"],["u16"]],["querybestsizecookie"]]],[5,"query_extension","","check if extension is present",N,[[["connection"],["str"]],["queryextensioncookie"]]],[5,"query_extension_unchecked","","check if extension is present",N,[[["connection"],["str"]],["queryextensioncookie"]]],[5,"list_extensions","","",N,[[["connection"]],["listextensionscookie"]]],[5,"list_extensions_unchecked","","",N,[[["connection"]],["listextensionscookie"]]],[5,"change_keyboard_mapping","","",N,N],[5,"change_keyboard_mapping_checked","","",N,N],[5,"get_keyboard_mapping","","",N,[[["connection"],["keycode"],["u8"]],["getkeyboardmappingcookie"]]],[5,"get_keyboard_mapping_unchecked","","",N,[[["connection"],["keycode"],["u8"]],["getkeyboardmappingcookie"]]],[5,"change_keyboard_control","","",N,N],[5,"change_keyboard_control_checked","","",N,N],[5,"get_keyboard_control","","",N,[[["connection"]],["getkeyboardcontrolcookie"]]],[5,"get_keyboard_control_unchecked","","",N,[[["connection"]],["getkeyboardcontrolcookie"]]],[5,"bell","","",N,[[["connection"],["i8"]],["voidcookie"]]],[5,"bell_checked","","",N,[[["connection"],["i8"]],["voidcookie"]]],[5,"change_pointer_control","","",N,[[["connection"],["i16"],["i16"],["i16"],["bool"],["bool"]],["voidcookie"]]],[5,"change_pointer_control_checked","","",N,[[["connection"],["i16"],["i16"],["i16"],["bool"],["bool"]],["voidcookie"]]],[5,"get_pointer_control","","",N,[[["connection"]],["getpointercontrolcookie"]]],[5,"get_pointer_control_unchecked","","",N,[[["connection"]],["getpointercontrolcookie"]]],[5,"set_screen_saver","","",N,[[["connection"],["i16"],["i16"],["u8"],["u8"]],["voidcookie"]]],[5,"set_screen_saver_checked","","",N,[[["connection"],["i16"],["i16"],["u8"],["u8"]],["voidcookie"]]],[5,"get_screen_saver","","",N,[[["connection"]],["getscreensavercookie"]]],[5,"get_screen_saver_unchecked","","",N,[[["connection"]],["getscreensavercookie"]]],[5,"change_hosts","","",N,N],[5,"change_hosts_checked","","",N,N],[5,"list_hosts","","",N,[[["connection"]],["listhostscookie"]]],[5,"list_hosts_unchecked","","",N,[[["connection"]],["listhostscookie"]]],[5,"set_access_control","","",N,[[["connection"],["u8"]],["voidcookie"]]],[5,"set_access_control_checked","","",N,[[["connection"],["u8"]],["voidcookie"]]],[5,"set_close_down_mode","","",N,[[["connection"],["u8"]],["voidcookie"]]],[5,"set_close_down_mode_checked","","",N,[[["connection"],["u8"]],["voidcookie"]]],[5,"kill_client","","kills a client",N,[[["connection"],["u32"]],["voidcookie"]]],[5,"kill_client_checked","","kills a client",N,[[["connection"],["u32"]],["voidcookie"]]],[5,"rotate_properties","","",N,N],[5,"rotate_properties_checked","","",N,N],[5,"force_screen_saver","","",N,[[["connection"],["u8"]],["voidcookie"]]],[5,"force_screen_saver_checked","","",N,[[["connection"],["u8"]],["voidcookie"]]],[5,"set_pointer_mapping","","",N,N],[5,"set_pointer_mapping_unchecked","","",N,N],[5,"get_pointer_mapping","","",N,[[["connection"]],["getpointermappingcookie"]]],[5,"get_pointer_mapping_unchecked","","",N,[[["connection"]],["getpointermappingcookie"]]],[5,"set_modifier_mapping","","",N,N],[5,"set_modifier_mapping_unchecked","","",N,N],[5,"get_modifier_mapping","","",N,[[["connection"]],["getmodifiermappingcookie"]]],[5,"get_modifier_mapping_unchecked","","",N,[[["connection"]],["getmodifiermappingcookie"]]],[5,"no_operation","","",N,[[["connection"]],["voidcookie"]]],[5,"no_operation_checked","","",N,[[["connection"]],["voidcookie"]]],[6,"Window","","",N,N],[6,"Pixmap","","",N,N],[6,"Cursor","","",N,N],[6,"Font","","",N,N],[6,"Gcontext","","",N,N],[6,"Colormap","","",N,N],[6,"Atom","","",N,N],[6,"Drawable","","",N,N],[6,"Fontable","","",N,N],[6,"Visualid","","",N,N],[6,"Timestamp","","",N,N],[6,"Keysym","","",N,N],[6,"Keycode","","",N,N],[6,"Button","","",N,N],[6,"VisualClass","","",N,N],[6,"EventMask","","",N,N],[6,"BackingStore","","",N,N],[6,"ImageOrder","","",N,N],[6,"ModMask","","",N,N],[6,"KeyButMask","","",N,N],[6,"WindowEnum","","",N,N],[6,"ButtonMask","","",N,N],[6,"Motion","","",N,N],[6,"NotifyDetail","","",N,N],[6,"NotifyMode","","",N,N],[6,"Visibility","","",N,N],[6,"Place","","",N,N],[6,"Property","","",N,N],[6,"Time","","",N,N],[6,"AtomEnum","","",N,N],[6,"ColormapState","","",N,N],[6,"ColormapEnum","","",N,N],[6,"Mapping","","",N,N],[6,"WindowClass","","",N,N],[6,"Cw","","",N,N],[6,"BackPixmap","","",N,N],[6,"Gravity","","",N,N],[6,"MapState","","",N,N],[6,"SetMode","","",N,N],[6,"ConfigWindow","","",N,N],[6,"StackMode","","",N,N],[6,"Circulate","","",N,N],[6,"PropMode","","",N,N],[6,"GetPropertyType","","",N,N],[6,"SendEventDest","","",N,N],[6,"GrabMode","","",N,N],[6,"GrabStatus","","",N,N],[6,"CursorEnum","","",N,N],[6,"ButtonIndex","","",N,N],[6,"Grab","","",N,N],[6,"Allow","","",N,N],[6,"InputFocus","","",N,N],[6,"FontDraw","","",N,N],[6,"Gc","","",N,N],[6,"Gx","","",N,N],[6,"LineStyle","","",N,N],[6,"CapStyle","","",N,N],[6,"JoinStyle","","",N,N],[6,"FillStyle","","",N,N],[6,"FillRule","","",N,N],[6,"SubwindowMode","","",N,N],[6,"ArcMode","","",N,N],[6,"ClipOrdering","","",N,N],[6,"CoordMode","","",N,N],[6,"PolyShape","","",N,N],[6,"ImageFormat","","",N,N],[6,"ColormapAlloc","","",N,N],[6,"ColorFlag","","",N,N],[6,"PixmapEnum","","",N,N],[6,"FontEnum","","",N,N],[6,"QueryShapeOf","","",N,N],[6,"Kb","","",N,N],[6,"LedMode","","",N,N],[6,"AutoRepeatMode","","",N,N],[6,"Blanking","","",N,N],[6,"Exposures","","",N,N],[6,"HostMode","","",N,N],[6,"Family","","",N,N],[6,"AccessControl","","",N,N],[6,"CloseDown","","",N,N],[6,"Kill","","",N,N],[6,"ScreenSaver","","",N,N],[6,"MappingStatus","","",N,N],[6,"MapIndex","","",N,N],[6,"Char2bIterator","","",N,N],[6,"PointIterator","","",N,N],[6,"RectangleIterator","","",N,N],[6,"ArcIterator","","",N,N],[6,"FormatIterator","","",N,N],[6,"VisualtypeIterator","","",N,N],[6,"Depth","","",N,N],[6,"DepthIterator","","",N,N],[6,"Screen","","",N,N],[6,"ScreenIterator","","",N,N],[6,"SetupRequest","","",N,N],[6,"SetupRequestIterator","","",N,N],[6,"SetupFailed","","",N,N],[6,"SetupFailedIterator","","",N,N],[6,"SetupAuthenticate","","",N,N],[6,"SetupAuthenticateIterator","","",N,N],[6,"Setup","","",N,N],[6,"SetupIterator","","",N,N],[6,"KeyPressEvent","","a key was pressed/released",N,N],[6,"KeyReleaseEvent","","a key was pressed/released",N,N],[6,"ButtonPressEvent","","a mouse button was pressed/released",N,N],[6,"ButtonReleaseEvent","","a mouse button was pressed/released",N,N],[6,"MotionNotifyEvent","","a key was pressed",N,N],[6,"EnterNotifyEvent","","the pointer is in a different window",N,N],[6,"LeaveNotifyEvent","","the pointer is in a different window",N,N],[6,"FocusInEvent","","NOT YET DOCUMENTED",N,N],[6,"FocusOutEvent","","NOT YET DOCUMENTED",N,N],[6,"KeymapNotifyEvent","","",N,N],[6,"ExposeEvent","","NOT YET DOCUMENTED",N,N],[6,"GraphicsExposureEvent","","",N,N],[6,"NoExposureEvent","","",N,N],[6,"VisibilityNotifyEvent","","",N,N],[6,"CreateNotifyEvent","","",N,N],[6,"DestroyNotifyEvent","","a window is destroyed",N,N],[6,"UnmapNotifyEvent","","a window is unmapped",N,N],[6,"MapNotifyEvent","","a window was mapped",N,N],[6,"MapRequestEvent","","window wants to be mapped",N,N],[6,"ReparentNotifyEvent","","",N,N],[6,"ConfigureNotifyEvent","","NOT YET DOCUMENTED",N,N],[6,"ConfigureRequestEvent","","",N,N],[6,"GravityNotifyEvent","","",N,N],[6,"ResizeRequestEvent","","",N,N],[6,"CirculateNotifyEvent","","NOT YET DOCUMENTED",N,N],[6,"CirculateRequestEvent","","NOT YET DOCUMENTED",N,N],[6,"PropertyNotifyEvent","","a window property changed",N,N],[6,"SelectionClearEvent","","",N,N],[6,"SelectionRequestEvent","","",N,N],[6,"SelectionNotifyEvent","","",N,N],[6,"ColormapNotifyEvent","","the colormap for some window changed",N,N],[6,"ClientMessageData","","",N,N],[6,"ClientMessageDataIterator","","",N,N],[6,"ClientMessageEvent","","NOT YET DOCUMENTED",N,N],[6,"MappingNotifyEvent","","keyboard mapping changed",N,N],[6,"GeGenericEvent","","generic event (with length)",N,N],[6,"GetWindowAttributesCookie","","",N,N],[6,"GetWindowAttributesReply","","",N,N],[6,"GetGeometryCookie","","",N,N],[6,"GetGeometryReply","","",N,N],[6,"QueryTreeCookie","","",N,N],[6,"QueryTreeReply","","",N,N],[6,"InternAtomCookie","","",N,N],[6,"InternAtomReply","","",N,N],[6,"GetAtomNameCookie","","",N,N],[6,"GetAtomNameReply","","",N,N],[6,"GetPropertyCookie","","",N,N],[6,"GetPropertyReply","","",N,N],[6,"ListPropertiesCookie","","",N,N],[6,"ListPropertiesReply","","",N,N],[6,"GetSelectionOwnerCookie","","",N,N],[6,"GetSelectionOwnerReply","","",N,N],[6,"GrabPointerCookie","","",N,N],[6,"GrabPointerReply","","",N,N],[6,"GrabKeyboardCookie","","",N,N],[6,"GrabKeyboardReply","","",N,N],[6,"QueryPointerCookie","","",N,N],[6,"QueryPointerReply","","",N,N],[6,"TimecoordIterator","","",N,N],[6,"GetMotionEventsCookie","","",N,N],[6,"GetMotionEventsReply","","",N,N],[6,"TranslateCoordinatesCookie","","",N,N],[6,"TranslateCoordinatesReply","","",N,N],[6,"GetInputFocusCookie","","",N,N],[6,"GetInputFocusReply","","",N,N],[6,"QueryKeymapCookie","","",N,N],[6,"QueryKeymapReply","","",N,N],[6,"FontpropIterator","","",N,N],[6,"CharinfoIterator","","",N,N],[6,"QueryFontCookie","","",N,N],[6,"QueryFontReply","","",N,N],[6,"QueryTextExtentsCookie","","",N,N],[6,"QueryTextExtentsReply","","",N,N],[6,"Str","","",N,N],[6,"StrIterator","","",N,N],[6,"ListFontsCookie","","",N,N],[6,"ListFontsReply","","",N,N],[6,"ListFontsWithInfoCookie","","",N,N],[6,"ListFontsWithInfoReply","","",N,N],[6,"GetFontPathCookie","","",N,N],[6,"GetFontPathReply","","",N,N],[6,"SegmentIterator","","",N,N],[6,"GetImageCookie","","",N,N],[6,"GetImageReply","","",N,N],[6,"ListInstalledColormapsCookie","","",N,N],[6,"ListInstalledColormapsReply","","",N,N],[6,"AllocColorCookie","","",N,N],[6,"AllocColorReply","","",N,N],[6,"AllocNamedColorCookie","","",N,N],[6,"AllocNamedColorReply","","",N,N],[6,"AllocColorCellsCookie","","",N,N],[6,"AllocColorCellsReply","","",N,N],[6,"AllocColorPlanesCookie","","",N,N],[6,"AllocColorPlanesReply","","",N,N],[6,"ColoritemIterator","","",N,N],[6,"RgbIterator","","",N,N],[6,"QueryColorsCookie","","",N,N],[6,"QueryColorsReply","","",N,N],[6,"LookupColorCookie","","",N,N],[6,"LookupColorReply","","",N,N],[6,"QueryBestSizeCookie","","",N,N],[6,"QueryBestSizeReply","","",N,N],[6,"QueryExtensionCookie","","",N,N],[6,"QueryExtensionReply","","",N,N],[6,"ListExtensionsCookie","","",N,N],[6,"ListExtensionsReply","","",N,N],[6,"GetKeyboardMappingCookie","","",N,N],[6,"GetKeyboardMappingReply","","",N,N],[6,"GetKeyboardControlCookie","","",N,N],[6,"GetKeyboardControlReply","","",N,N],[6,"GetPointerControlCookie","","",N,N],[6,"GetPointerControlReply","","",N,N],[6,"GetScreenSaverCookie","","",N,N],[6,"GetScreenSaverReply","","",N,N],[6,"Host","","",N,N],[6,"HostIterator","","",N,N],[6,"ListHostsCookie","","",N,N],[6,"ListHostsReply","","",N,N],[6,"SetPointerMappingCookie","","",N,N],[6,"SetPointerMappingReply","","",N,N],[6,"GetPointerMappingCookie","","",N,N],[6,"GetPointerMappingReply","","",N,N],[6,"SetModifierMappingCookie","","",N,N],[6,"SetModifierMappingReply","","",N,N],[6,"GetModifierMappingCookie","","",N,N],[6,"GetModifierMappingReply","","",N,N],[17,"VISUAL_CLASS_STATIC_GRAY","","",N,N],[17,"VISUAL_CLASS_GRAY_SCALE","","",N,N],[17,"VISUAL_CLASS_STATIC_COLOR","","",N,N],[17,"VISUAL_CLASS_PSEUDO_COLOR","","",N,N],[17,"VISUAL_CLASS_TRUE_COLOR","","",N,N],[17,"VISUAL_CLASS_DIRECT_COLOR","","",N,N],[17,"EVENT_MASK_NO_EVENT","","",N,N],[17,"EVENT_MASK_KEY_PRESS","","",N,N],[17,"EVENT_MASK_KEY_RELEASE","","",N,N],[17,"EVENT_MASK_BUTTON_PRESS","","",N,N],[17,"EVENT_MASK_BUTTON_RELEASE","","",N,N],[17,"EVENT_MASK_ENTER_WINDOW","","",N,N],[17,"EVENT_MASK_LEAVE_WINDOW","","",N,N],[17,"EVENT_MASK_POINTER_MOTION","","",N,N],[17,"EVENT_MASK_POINTER_MOTION_HINT","","",N,N],[17,"EVENT_MASK_BUTTON_1_MOTION","","",N,N],[17,"EVENT_MASK_BUTTON_2_MOTION","","",N,N],[17,"EVENT_MASK_BUTTON_3_MOTION","","",N,N],[17,"EVENT_MASK_BUTTON_4_MOTION","","",N,N],[17,"EVENT_MASK_BUTTON_5_MOTION","","",N,N],[17,"EVENT_MASK_BUTTON_MOTION","","",N,N],[17,"EVENT_MASK_KEYMAP_STATE","","",N,N],[17,"EVENT_MASK_EXPOSURE","","",N,N],[17,"EVENT_MASK_VISIBILITY_CHANGE","","",N,N],[17,"EVENT_MASK_STRUCTURE_NOTIFY","","",N,N],[17,"EVENT_MASK_RESIZE_REDIRECT","","",N,N],[17,"EVENT_MASK_SUBSTRUCTURE_NOTIFY","","",N,N],[17,"EVENT_MASK_SUBSTRUCTURE_REDIRECT","","",N,N],[17,"EVENT_MASK_FOCUS_CHANGE","","",N,N],[17,"EVENT_MASK_PROPERTY_CHANGE","","",N,N],[17,"EVENT_MASK_COLOR_MAP_CHANGE","","",N,N],[17,"EVENT_MASK_OWNER_GRAB_BUTTON","","",N,N],[17,"BACKING_STORE_NOT_USEFUL","","",N,N],[17,"BACKING_STORE_WHEN_MAPPED","","",N,N],[17,"BACKING_STORE_ALWAYS","","",N,N],[17,"IMAGE_ORDER_LSB_FIRST","","",N,N],[17,"IMAGE_ORDER_MSB_FIRST","","",N,N],[17,"MOD_MASK_SHIFT","","",N,N],[17,"MOD_MASK_LOCK","","",N,N],[17,"MOD_MASK_CONTROL","","",N,N],[17,"MOD_MASK_1","","",N,N],[17,"MOD_MASK_2","","",N,N],[17,"MOD_MASK_3","","",N,N],[17,"MOD_MASK_4","","",N,N],[17,"MOD_MASK_5","","",N,N],[17,"MOD_MASK_ANY","","",N,N],[17,"KEY_BUT_MASK_SHIFT","","",N,N],[17,"KEY_BUT_MASK_LOCK","","",N,N],[17,"KEY_BUT_MASK_CONTROL","","",N,N],[17,"KEY_BUT_MASK_MOD_1","","",N,N],[17,"KEY_BUT_MASK_MOD_2","","",N,N],[17,"KEY_BUT_MASK_MOD_3","","",N,N],[17,"KEY_BUT_MASK_MOD_4","","",N,N],[17,"KEY_BUT_MASK_MOD_5","","",N,N],[17,"KEY_BUT_MASK_BUTTON_1","","",N,N],[17,"KEY_BUT_MASK_BUTTON_2","","",N,N],[17,"KEY_BUT_MASK_BUTTON_3","","",N,N],[17,"KEY_BUT_MASK_BUTTON_4","","",N,N],[17,"KEY_BUT_MASK_BUTTON_5","","",N,N],[17,"WINDOW_NONE","","",N,N],[17,"BUTTON_MASK_1","","",N,N],[17,"BUTTON_MASK_2","","",N,N],[17,"BUTTON_MASK_3","","",N,N],[17,"BUTTON_MASK_4","","",N,N],[17,"BUTTON_MASK_5","","",N,N],[17,"BUTTON_MASK_ANY","","",N,N],[17,"MOTION_NORMAL","","",N,N],[17,"MOTION_HINT","","",N,N],[17,"NOTIFY_DETAIL_ANCESTOR","","",N,N],[17,"NOTIFY_DETAIL_VIRTUAL","","",N,N],[17,"NOTIFY_DETAIL_INFERIOR","","",N,N],[17,"NOTIFY_DETAIL_NONLINEAR","","",N,N],[17,"NOTIFY_DETAIL_NONLINEAR_VIRTUAL","","",N,N],[17,"NOTIFY_DETAIL_POINTER","","",N,N],[17,"NOTIFY_DETAIL_POINTER_ROOT","","",N,N],[17,"NOTIFY_DETAIL_NONE","","",N,N],[17,"NOTIFY_MODE_NORMAL","","",N,N],[17,"NOTIFY_MODE_GRAB","","",N,N],[17,"NOTIFY_MODE_UNGRAB","","",N,N],[17,"NOTIFY_MODE_WHILE_GRABBED","","",N,N],[17,"VISIBILITY_UNOBSCURED","","",N,N],[17,"VISIBILITY_PARTIALLY_OBSCURED","","",N,N],[17,"VISIBILITY_FULLY_OBSCURED","","",N,N],[17,"PLACE_ON_TOP","","The window is now on top of all siblings.",N,N],[17,"PLACE_ON_BOTTOM","","The window is now below all siblings.",N,N],[17,"PROPERTY_NEW_VALUE","","",N,N],[17,"PROPERTY_DELETE","","",N,N],[17,"TIME_CURRENT_TIME","","",N,N],[17,"ATOM_NONE","","",N,N],[17,"ATOM_ANY","","",N,N],[17,"ATOM_PRIMARY","","",N,N],[17,"ATOM_SECONDARY","","",N,N],[17,"ATOM_ARC","","",N,N],[17,"ATOM_ATOM","","",N,N],[17,"ATOM_BITMAP","","",N,N],[17,"ATOM_CARDINAL","","",N,N],[17,"ATOM_COLORMAP","","",N,N],[17,"ATOM_CURSOR","","",N,N],[17,"ATOM_CUT_BUFFER0","","",N,N],[17,"ATOM_CUT_BUFFER1","","",N,N],[17,"ATOM_CUT_BUFFER2","","",N,N],[17,"ATOM_CUT_BUFFER3","","",N,N],[17,"ATOM_CUT_BUFFER4","","",N,N],[17,"ATOM_CUT_BUFFER5","","",N,N],[17,"ATOM_CUT_BUFFER6","","",N,N],[17,"ATOM_CUT_BUFFER7","","",N,N],[17,"ATOM_DRAWABLE","","",N,N],[17,"ATOM_FONT","","",N,N],[17,"ATOM_INTEGER","","",N,N],[17,"ATOM_PIXMAP","","",N,N],[17,"ATOM_POINT","","",N,N],[17,"ATOM_RECTANGLE","","",N,N],[17,"ATOM_RESOURCE_MANAGER","","",N,N],[17,"ATOM_RGB_COLOR_MAP","","",N,N],[17,"ATOM_RGB_BEST_MAP","","",N,N],[17,"ATOM_RGB_BLUE_MAP","","",N,N],[17,"ATOM_RGB_DEFAULT_MAP","","",N,N],[17,"ATOM_RGB_GRAY_MAP","","",N,N],[17,"ATOM_RGB_GREEN_MAP","","",N,N],[17,"ATOM_RGB_RED_MAP","","",N,N],[17,"ATOM_STRING","","",N,N],[17,"ATOM_VISUALID","","",N,N],[17,"ATOM_WINDOW","","",N,N],[17,"ATOM_WM_COMMAND","","",N,N],[17,"ATOM_WM_HINTS","","",N,N],[17,"ATOM_WM_CLIENT_MACHINE","","",N,N],[17,"ATOM_WM_ICON_NAME","","",N,N],[17,"ATOM_WM_ICON_SIZE","","",N,N],[17,"ATOM_WM_NAME","","",N,N],[17,"ATOM_WM_NORMAL_HINTS","","",N,N],[17,"ATOM_WM_SIZE_HINTS","","",N,N],[17,"ATOM_WM_ZOOM_HINTS","","",N,N],[17,"ATOM_MIN_SPACE","","",N,N],[17,"ATOM_NORM_SPACE","","",N,N],[17,"ATOM_MAX_SPACE","","",N,N],[17,"ATOM_END_SPACE","","",N,N],[17,"ATOM_SUPERSCRIPT_X","","",N,N],[17,"ATOM_SUPERSCRIPT_Y","","",N,N],[17,"ATOM_SUBSCRIPT_X","","",N,N],[17,"ATOM_SUBSCRIPT_Y","","",N,N],[17,"ATOM_UNDERLINE_POSITION","","",N,N],[17,"ATOM_UNDERLINE_THICKNESS","","",N,N],[17,"ATOM_STRIKEOUT_ASCENT","","",N,N],[17,"ATOM_STRIKEOUT_DESCENT","","",N,N],[17,"ATOM_ITALIC_ANGLE","","",N,N],[17,"ATOM_X_HEIGHT","","",N,N],[17,"ATOM_QUAD_WIDTH","","",N,N],[17,"ATOM_WEIGHT","","",N,N],[17,"ATOM_POINT_SIZE","","",N,N],[17,"ATOM_RESOLUTION","","",N,N],[17,"ATOM_COPYRIGHT","","",N,N],[17,"ATOM_NOTICE","","",N,N],[17,"ATOM_FONT_NAME","","",N,N],[17,"ATOM_FAMILY_NAME","","",N,N],[17,"ATOM_FULL_NAME","","",N,N],[17,"ATOM_CAP_HEIGHT","","",N,N],[17,"ATOM_WM_CLASS","","",N,N],[17,"ATOM_WM_TRANSIENT_FOR","","",N,N],[17,"COLORMAP_STATE_UNINSTALLED","","The colormap was uninstalled.",N,N],[17,"COLORMAP_STATE_INSTALLED","","The colormap was installed.",N,N],[17,"COLORMAP_NONE","","",N,N],[17,"MAPPING_MODIFIER","","",N,N],[17,"MAPPING_KEYBOARD","","",N,N],[17,"MAPPING_POINTER","","",N,N],[17,"WINDOW_CLASS_COPY_FROM_PARENT","","",N,N],[17,"WINDOW_CLASS_INPUT_OUTPUT","","",N,N],[17,"WINDOW_CLASS_INPUT_ONLY","","",N,N],[17,"CW_BACK_PIXMAP","","Overrides the default background-pixmap. The background pixmap and window must have the same root and same depth. Any size pixmap can be used, although some sizes may be faster than others.",N,N],[17,"CW_BACK_PIXEL","","Overrides `BackPixmap`. A pixmap of undefined size filled with the specified background pixel is used for the background. Range-checking is not performed, the background pixel is truncated to the appropriate number of bits.",N,N],[17,"CW_BORDER_PIXMAP","","Overrides the default border-pixmap. The border pixmap and window must have the same root and the same depth. Any size pixmap can be used, although some sizes may be faster than others.",N,N],[17,"CW_BORDER_PIXEL","","Overrides `BorderPixmap`. A pixmap of undefined size filled with the specified border pixel is used for the border. Range checking is not performed on the border-pixel value, it is truncated to the appropriate number of bits.",N,N],[17,"CW_BIT_GRAVITY","","Defines which region of the window should be retained if the window is resized.",N,N],[17,"CW_WIN_GRAVITY","","Defines how the window should be repositioned if the parent is resized (see `ConfigureWindow`).",N,N],[17,"CW_BACKING_STORE","","A backing-store of `WhenMapped` advises the server that maintaining contents of obscured regions when the window is mapped would be beneficial. A backing-store of `Always` advises the server that maintaining contents even when the window is unmapped would be beneficial. In this case, the server may generate an exposure event when the window is created. A value of `NotUseful` advises the server that maintaining contents is unnecessary, although a server may still choose to maintain contents while the window is mapped. Note that if the server maintains contents, then the server should maintain complete contents not just the region within the parent boundaries, even if the window is larger than its parent. While the server maintains contents, exposure events will not normally be generated, but the server may stop maintaining contents at any time.",N,N],[17,"CW_BACKING_PLANES","","The backing-planes indicates (with bits set to 1) which bit planes of the window hold dynamic data that must be preserved in backing-stores and during save-unders.",N,N],[17,"CW_BACKING_PIXEL","","The backing-pixel specifies what value to use in planes not covered by backing-planes. The server is free to save only the specified bit planes in the backing-store or save-under and regenerate the remaining planes with the specified pixel value. Any bits beyond the specified depth of the window in these values are simply ignored.",N,N],[17,"CW_OVERRIDE_REDIRECT","","The override-redirect specifies whether map and configure requests on this window should override a SubstructureRedirect on the parent, typically to inform a window manager not to tamper with the window.",N,N],[17,"CW_SAVE_UNDER","","If 1, the server is advised that when this window is mapped, saving the contents of windows it obscures would be beneficial.",N,N],[17,"CW_EVENT_MASK","","The event-mask defines which events the client is interested in for this window (or for some event types, inferiors of the window).",N,N],[17,"CW_DONT_PROPAGATE","","The do-not-propagate-mask defines which events should not be propagated to ancestor windows when no client has the event type selected in this window.",N,N],[17,"CW_COLORMAP","","The colormap specifies the colormap that best reflects the true colors of the window. Servers capable of supporting multiple hardware colormaps may use this information, and window man- agers may use it for InstallColormap requests. The colormap must have the same visual type and root as the window (or a Match error results). If CopyFromParent is specified, the parent's colormap is copied (subsequent changes to the parent's colormap attribute do not affect the child). However, the window must have the same visual type as the parent (or a Match error results), and the parent must not have a colormap of None (or a Match error results). For an explanation of None, see FreeColormap request. The colormap is copied by sharing the colormap object between the child and the parent, not by making a complete copy of the colormap contents.",N,N],[17,"CW_CURSOR","","If a cursor is specified, it will be used whenever the pointer is in the window. If None is speci- fied, the parent's cursor will be used when the pointer is in the window, and any change in the parent's cursor will cause an immediate change in the displayed cursor.",N,N],[17,"BACK_PIXMAP_NONE","","",N,N],[17,"BACK_PIXMAP_PARENT_RELATIVE","","",N,N],[17,"GRAVITY_BIT_FORGET","","",N,N],[17,"GRAVITY_WIN_UNMAP","","",N,N],[17,"GRAVITY_NORTH_WEST","","",N,N],[17,"GRAVITY_NORTH","","",N,N],[17,"GRAVITY_NORTH_EAST","","",N,N],[17,"GRAVITY_WEST","","",N,N],[17,"GRAVITY_CENTER","","",N,N],[17,"GRAVITY_EAST","","",N,N],[17,"GRAVITY_SOUTH_WEST","","",N,N],[17,"GRAVITY_SOUTH","","",N,N],[17,"GRAVITY_SOUTH_EAST","","",N,N],[17,"GRAVITY_STATIC","","",N,N],[17,"MAP_STATE_UNMAPPED","","",N,N],[17,"MAP_STATE_UNVIEWABLE","","",N,N],[17,"MAP_STATE_VIEWABLE","","",N,N],[17,"SET_MODE_INSERT","","",N,N],[17,"SET_MODE_DELETE","","",N,N],[17,"CONFIG_WINDOW_X","","",N,N],[17,"CONFIG_WINDOW_Y","","",N,N],[17,"CONFIG_WINDOW_WIDTH","","",N,N],[17,"CONFIG_WINDOW_HEIGHT","","",N,N],[17,"CONFIG_WINDOW_BORDER_WIDTH","","",N,N],[17,"CONFIG_WINDOW_SIBLING","","",N,N],[17,"CONFIG_WINDOW_STACK_MODE","","",N,N],[17,"STACK_MODE_ABOVE","","",N,N],[17,"STACK_MODE_BELOW","","",N,N],[17,"STACK_MODE_TOP_IF","","",N,N],[17,"STACK_MODE_BOTTOM_IF","","",N,N],[17,"STACK_MODE_OPPOSITE","","",N,N],[17,"CIRCULATE_RAISE_LOWEST","","",N,N],[17,"CIRCULATE_LOWER_HIGHEST","","",N,N],[17,"PROP_MODE_REPLACE","","Discard the previous property value and store the new data.",N,N],[17,"PROP_MODE_PREPEND","","Insert the new data before the beginning of existing data. The `format` must match existing property value. If the property is undefined, it is treated as defined with the correct type and format with zero-length data.",N,N],[17,"PROP_MODE_APPEND","","Insert the new data after the beginning of existing data. The `format` must match existing property value. If the property is undefined, it is treated as defined with the correct type and format with zero-length data.",N,N],[17,"GET_PROPERTY_TYPE_ANY","","",N,N],[17,"SEND_EVENT_DEST_POINTER_WINDOW","","",N,N],[17,"SEND_EVENT_DEST_ITEM_FOCUS","","",N,N],[17,"GRAB_MODE_SYNC","","The state of the keyboard appears to freeze: No further keyboard events are generated by the server until the grabbing client issues a releasing `AllowEvents` request or until the keyboard grab is released.",N,N],[17,"GRAB_MODE_ASYNC","","Keyboard event processing continues normally.",N,N],[17,"GRAB_STATUS_SUCCESS","","",N,N],[17,"GRAB_STATUS_ALREADY_GRABBED","","",N,N],[17,"GRAB_STATUS_INVALID_TIME","","",N,N],[17,"GRAB_STATUS_NOT_VIEWABLE","","",N,N],[17,"GRAB_STATUS_FROZEN","","",N,N],[17,"CURSOR_NONE","","",N,N],[17,"BUTTON_INDEX_ANY","","Any of the following (or none):",N,N],[17,"BUTTON_INDEX_1","","The left mouse button.",N,N],[17,"BUTTON_INDEX_2","","The right mouse button.",N,N],[17,"BUTTON_INDEX_3","","The middle mouse button.",N,N],[17,"BUTTON_INDEX_4","","Scroll wheel. TODO: direction?",N,N],[17,"BUTTON_INDEX_5","","Scroll wheel. TODO: direction?",N,N],[17,"GRAB_ANY","","",N,N],[17,"ALLOW_ASYNC_POINTER","","For AsyncPointer, if the pointer is frozen by the client, pointer event processing continues normally. If the pointer is frozen twice by the client on behalf of two separate grabs, AsyncPointer thaws for both. AsyncPointer has no effect if the pointer is not frozen by the client, but the pointer need not be grabbed by the client.",N,N],[17,"ALLOW_SYNC_POINTER","","For SyncPointer, if the pointer is frozen and actively grabbed by the client, pointer event processing continues normally until the next ButtonPress or ButtonRelease event is reported to the client, at which time the pointer again appears to freeze. However, if the reported event causes the pointer grab to be released, then the pointer does not freeze. SyncPointer has no effect if the pointer is not frozen by the client or if the pointer is not grabbed by the client.",N,N],[17,"ALLOW_REPLAY_POINTER","","For ReplayPointer, if the pointer is actively grabbed by the client and is frozen as the result of an event having been sent to the client (either from the activation of a GrabButton or from a previous AllowEvents with mode SyncPointer but not from a GrabPointer), then the pointer grab is released and that event is completely reprocessed, this time ignoring any passive grabs at or above (towards the root) the grab-window of the grab just released. The request has no effect if the pointer is not grabbed by the client or if the pointer is not frozen as the result of an event.",N,N],[17,"ALLOW_ASYNC_KEYBOARD","","For AsyncKeyboard, if the keyboard is frozen by the client, keyboard event processing continues normally. If the keyboard is frozen twice by the client on behalf of two separate grabs, AsyncKeyboard thaws for both. AsyncKeyboard has no effect if the keyboard is not frozen by the client, but the keyboard need not be grabbed by the client.",N,N],[17,"ALLOW_SYNC_KEYBOARD","","For SyncKeyboard, if the keyboard is frozen and actively grabbed by the client, keyboard event processing continues normally until the next KeyPress or KeyRelease event is reported to the client, at which time the keyboard again appears to freeze. However, if the reported event causes the keyboard grab to be released, then the keyboard does not freeze. SyncKeyboard has no effect if the keyboard is not frozen by the client or if the keyboard is not grabbed by the client.",N,N],[17,"ALLOW_REPLAY_KEYBOARD","","For ReplayKeyboard, if the keyboard is actively grabbed by the client and is frozen as the result of an event having been sent to the client (either from the activation of a GrabKey or from a previous AllowEvents with mode SyncKeyboard but not from a GrabKeyboard), then the keyboard grab is released and that event is completely reprocessed, this time ignoring any passive grabs at or above (towards the root) the grab-window of the grab just released. The request has no effect if the keyboard is not grabbed by the client or if the keyboard is not frozen as the result of an event.",N,N],[17,"ALLOW_ASYNC_BOTH","","For AsyncBoth, if the pointer and the keyboard are frozen by the client, event processing for both devices continues normally. If a device is frozen twice by the client on behalf of two separate grabs, AsyncBoth thaws for both. AsyncBoth has no effect unless both pointer and keyboard are frozen by the client.",N,N],[17,"ALLOW_SYNC_BOTH","","For SyncBoth, if both pointer and keyboard are frozen by the client, event processing (for both devices) continues normally until the next ButtonPress, ButtonRelease, KeyPress, or KeyRelease event is reported to the client for a grabbed device (button event for the pointer, key event for the keyboard), at which time the devices again appear to freeze. However, if the reported event causes the grab to be released, then the devices do not freeze (but if the other device is still grabbed, then a subsequent event for it will still cause both devices to freeze). SyncBoth has no effect unless both pointer and keyboard are frozen by the client. If the pointer or keyboard is frozen twice by the client on behalf of two separate grabs, SyncBoth thaws for both (but a subsequent freeze for SyncBoth will only freeze each device once).",N,N],[17,"INPUT_FOCUS_NONE","","The focus reverts to `XCB_NONE`, so no window will have the input focus.",N,N],[17,"INPUT_FOCUS_POINTER_ROOT","","The focus reverts to `XCB_POINTER_ROOT` respectively. When the focus reverts, FocusIn and FocusOut events are generated, but the last-focus-change time is not changed.",N,N],[17,"INPUT_FOCUS_PARENT","","The focus reverts to the parent (or closest viewable ancestor) and the new revert_to value is `XCB_INPUT_FOCUS_NONE`.",N,N],[17,"INPUT_FOCUS_FOLLOW_KEYBOARD","","NOT YET DOCUMENTED. Only relevant for the xinput extension.",N,N],[17,"FONT_DRAW_LEFT_TO_RIGHT","","",N,N],[17,"FONT_DRAW_RIGHT_TO_LEFT","","",N,N],[17,"GC_FUNCTION","","TODO: Refer to GX",N,N],[17,"GC_PLANE_MASK","","In graphics operations, given a source and destination pixel, the result is computed bitwise on corresponding bits of the pixels; that is, a Boolean operation is performed in each bit plane. The plane-mask restricts the operation to a subset of planes, so the result is:",N,N],[17,"GC_FOREGROUND","","Foreground colorpixel.",N,N],[17,"GC_BACKGROUND","","Background colorpixel.",N,N],[17,"GC_LINE_WIDTH","","The line-width is measured in pixels and can be greater than or equal to one, a wide line, or the special value zero, a thin line.",N,N],[17,"GC_LINE_STYLE","","The line-style defines which sections of a line are drawn: Solid                The full path of the line is drawn. DoubleDash           The full path of the line is drawn, but the even dashes are filled differently                      than the odd dashes (see fill-style), with Butt cap-style used where even and                      odd dashes meet. OnOffDash            Only the even dashes are drawn, and cap-style applies to all internal ends of                      the individual dashes (except NotLast is treated as Butt).",N,N],[17,"GC_CAP_STYLE","","The cap-style defines how the endpoints of a path are drawn: NotLast    The result is equivalent to Butt, except that for a line-width of zero the final            endpoint is not drawn. Butt       The result is square at the endpoint (perpendicular to the slope of the line)            with no projection beyond. Round      The result is a circular arc with its diameter equal to the line-width, centered            on the endpoint; it is equivalent to Butt for line-width zero. Projecting The result is square at the end, but the path continues beyond the endpoint for            a distance equal to half the line-width; it is equivalent to Butt for line-width            zero.",N,N],[17,"GC_JOIN_STYLE","","The join-style defines how corners are drawn for wide lines: Miter               The outer edges of the two lines extend to meet at an angle. However, if the                     angle is less than 11 degrees, a Bevel join-style is used instead. Round               The result is a circular arc with a diameter equal to the line-width, centered                     on the joinpoint. Bevel               The result is Butt endpoint styles, and then the triangular notch is filled.",N,N],[17,"GC_FILL_STYLE","","The fill-style defines the contents of the source for line, text, and fill requests. For all text and fill requests (for example, PolyText8, PolyText16, PolyFillRectangle, FillPoly, and PolyFillArc) as well as for line requests with line-style Solid, (for example, PolyLine, PolySegment, PolyRectangle, PolyArc) and for the even dashes for line requests with line-style OnOffDash or DoubleDash: Solid                     Foreground Tiled                     Tile OpaqueStippled            A tile with the same width and height as stipple but with background                           everywhere stipple has a zero and with foreground everywhere stipple                           has a one Stippled                  Foreground masked by stipple For the odd dashes for line requests with line-style DoubleDash: Solid                     Background Tiled                     Same as for even dashes OpaqueStippled            Same as for even dashes Stippled                  Background masked by stipple",N,N],[17,"GC_FILL_RULE","","",N,N],[17,"GC_TILE","","The tile/stipple represents an infinite two-dimensional plane with the tile/stipple replicated in all dimensions. When that plane is superimposed on the drawable for use in a graphics operation, the upper-left corner of some instance of the tile/stipple is at the coordinates within the drawable specified by the tile/stipple origin. The tile/stipple and clip origins are interpreted relative to the origin of whatever destination drawable is specified in a graphics request. The tile pixmap must have the same root and depth as the gcontext (or a Match error results). The stipple pixmap must have depth one and must have the same root as the gcontext (or a Match error results). For fill-style Stippled (but not fill-style OpaqueStippled), the stipple pattern is tiled in a single plane and acts as an additional clip mask to be ANDed with the clip-mask. Any size pixmap can be used for tiling or stippling, although some sizes may be faster to use than others.",N,N],[17,"GC_STIPPLE","","The tile/stipple represents an infinite two-dimensional plane with the tile/stipple replicated in all dimensions. When that plane is superimposed on the drawable for use in a graphics operation, the upper-left corner of some instance of the tile/stipple is at the coordinates within the drawable specified by the tile/stipple origin. The tile/stipple and clip origins are interpreted relative to the origin of whatever destination drawable is specified in a graphics request. The tile pixmap must have the same root and depth as the gcontext (or a Match error results). The stipple pixmap must have depth one and must have the same root as the gcontext (or a Match error results). For fill-style Stippled (but not fill-style OpaqueStippled), the stipple pattern is tiled in a single plane and acts as an additional clip mask to be ANDed with the clip-mask. Any size pixmap can be used for tiling or stippling, although some sizes may be faster to use than others.",N,N],[17,"GC_TILE_STIPPLE_ORIGIN_X","","TODO",N,N],[17,"GC_TILE_STIPPLE_ORIGIN_Y","","TODO",N,N],[17,"GC_FONT","","Which font to use for the `ImageText8` and `ImageText16` requests.",N,N],[17,"GC_SUBWINDOW_MODE","","For ClipByChildren, both source and destination windows are additionally clipped by all viewable InputOutput children. For IncludeInferiors, neither source nor destination window is clipped by inferiors. This will result in including subwindow contents in the source and drawing through subwindow boundaries of the destination. The use of IncludeInferiors with a source or destination window of one depth with mapped inferiors of differing depth is not illegal, but the semantics is undefined by the core protocol.",N,N],[17,"GC_GRAPHICS_EXPOSURES","","Whether ExposureEvents should be generated (1) or not (0).",N,N],[17,"GC_CLIP_ORIGIN_X","","TODO",N,N],[17,"GC_CLIP_ORIGIN_Y","","TODO",N,N],[17,"GC_CLIP_MASK","","The clip-mask restricts writes to the destination drawable. Only pixels where the clip-mask has bits set to 1 are drawn. Pixels are not drawn outside the area covered by the clip-mask or where the clip-mask has bits set to 0. The clip-mask affects all graphics requests, but it does not clip sources. The clip-mask origin is interpreted relative to the origin of whatever destination drawable is specified in a graphics request. If a pixmap is specified as the clip-mask, it must have depth 1 and have the same root as the gcontext (or a Match error results). If clip-mask is None, then pixels are always drawn, regardless of the clip origin. The clip-mask can also be set with the SetClipRectangles request.",N,N],[17,"GC_DASH_OFFSET","","TODO",N,N],[17,"GC_DASH_LIST","","TODO",N,N],[17,"GC_ARC_MODE","","TODO",N,N],[17,"GX_CLEAR","","",N,N],[17,"GX_AND","","",N,N],[17,"GX_AND_REVERSE","","",N,N],[17,"GX_COPY","","",N,N],[17,"GX_AND_INVERTED","","",N,N],[17,"GX_NOOP","","",N,N],[17,"GX_XOR","","",N,N],[17,"GX_OR","","",N,N],[17,"GX_NOR","","",N,N],[17,"GX_EQUIV","","",N,N],[17,"GX_INVERT","","",N,N],[17,"GX_OR_REVERSE","","",N,N],[17,"GX_COPY_INVERTED","","",N,N],[17,"GX_OR_INVERTED","","",N,N],[17,"GX_NAND","","",N,N],[17,"GX_SET","","",N,N],[17,"LINE_STYLE_SOLID","","",N,N],[17,"LINE_STYLE_ON_OFF_DASH","","",N,N],[17,"LINE_STYLE_DOUBLE_DASH","","",N,N],[17,"CAP_STYLE_NOT_LAST","","",N,N],[17,"CAP_STYLE_BUTT","","",N,N],[17,"CAP_STYLE_ROUND","","",N,N],[17,"CAP_STYLE_PROJECTING","","",N,N],[17,"JOIN_STYLE_MITER","","",N,N],[17,"JOIN_STYLE_ROUND","","",N,N],[17,"JOIN_STYLE_BEVEL","","",N,N],[17,"FILL_STYLE_SOLID","","",N,N],[17,"FILL_STYLE_TILED","","",N,N],[17,"FILL_STYLE_STIPPLED","","",N,N],[17,"FILL_STYLE_OPAQUE_STIPPLED","","",N,N],[17,"FILL_RULE_EVEN_ODD","","",N,N],[17,"FILL_RULE_WINDING","","",N,N],[17,"SUBWINDOW_MODE_CLIP_BY_CHILDREN","","",N,N],[17,"SUBWINDOW_MODE_INCLUDE_INFERIORS","","",N,N],[17,"ARC_MODE_CHORD","","",N,N],[17,"ARC_MODE_PIE_SLICE","","",N,N],[17,"CLIP_ORDERING_UNSORTED","","",N,N],[17,"CLIP_ORDERING_Y_SORTED","","",N,N],[17,"CLIP_ORDERING_YX_SORTED","","",N,N],[17,"CLIP_ORDERING_YX_BANDED","","",N,N],[17,"COORD_MODE_ORIGIN","","Treats all coordinates as relative to the origin.",N,N],[17,"COORD_MODE_PREVIOUS","","Treats all coordinates after the first as relative to the previous coordinate.",N,N],[17,"POLY_SHAPE_COMPLEX","","",N,N],[17,"POLY_SHAPE_NONCONVEX","","",N,N],[17,"POLY_SHAPE_CONVEX","","",N,N],[17,"IMAGE_FORMAT_XY_BITMAP","","",N,N],[17,"IMAGE_FORMAT_XY_PIXMAP","","",N,N],[17,"IMAGE_FORMAT_Z_PIXMAP","","",N,N],[17,"COLORMAP_ALLOC_NONE","","",N,N],[17,"COLORMAP_ALLOC_ALL","","",N,N],[17,"COLOR_FLAG_RED","","",N,N],[17,"COLOR_FLAG_GREEN","","",N,N],[17,"COLOR_FLAG_BLUE","","",N,N],[17,"PIXMAP_NONE","","",N,N],[17,"FONT_NONE","","",N,N],[17,"QUERY_SHAPE_OF_LARGEST_CURSOR","","",N,N],[17,"QUERY_SHAPE_OF_FASTEST_TILE","","",N,N],[17,"QUERY_SHAPE_OF_FASTEST_STIPPLE","","",N,N],[17,"KB_KEY_CLICK_PERCENT","","",N,N],[17,"KB_BELL_PERCENT","","",N,N],[17,"KB_BELL_PITCH","","",N,N],[17,"KB_BELL_DURATION","","",N,N],[17,"KB_LED","","",N,N],[17,"KB_LED_MODE","","",N,N],[17,"KB_KEY","","",N,N],[17,"KB_AUTO_REPEAT_MODE","","",N,N],[17,"LED_MODE_OFF","","",N,N],[17,"LED_MODE_ON","","",N,N],[17,"AUTO_REPEAT_MODE_OFF","","",N,N],[17,"AUTO_REPEAT_MODE_ON","","",N,N],[17,"AUTO_REPEAT_MODE_DEFAULT","","",N,N],[17,"BLANKING_NOT_PREFERRED","","",N,N],[17,"BLANKING_PREFERRED","","",N,N],[17,"BLANKING_DEFAULT","","",N,N],[17,"EXPOSURES_NOT_ALLOWED","","",N,N],[17,"EXPOSURES_ALLOWED","","",N,N],[17,"EXPOSURES_DEFAULT","","",N,N],[17,"HOST_MODE_INSERT","","",N,N],[17,"HOST_MODE_DELETE","","",N,N],[17,"FAMILY_INTERNET","","",N,N],[17,"FAMILY_DE_CNET","","",N,N],[17,"FAMILY_CHAOS","","",N,N],[17,"FAMILY_SERVER_INTERPRETED","","",N,N],[17,"FAMILY_INTERNET_6","","",N,N],[17,"ACCESS_CONTROL_DISABLE","","",N,N],[17,"ACCESS_CONTROL_ENABLE","","",N,N],[17,"CLOSE_DOWN_DESTROY_ALL","","",N,N],[17,"CLOSE_DOWN_RETAIN_PERMANENT","","",N,N],[17,"CLOSE_DOWN_RETAIN_TEMPORARY","","",N,N],[17,"KILL_ALL_TEMPORARY","","",N,N],[17,"SCREEN_SAVER_RESET","","",N,N],[17,"SCREEN_SAVER_ACTIVE","","",N,N],[17,"MAPPING_STATUS_SUCCESS","","",N,N],[17,"MAPPING_STATUS_BUSY","","",N,N],[17,"MAPPING_STATUS_FAILURE","","",N,N],[17,"MAP_INDEX_SHIFT","","",N,N],[17,"MAP_INDEX_LOCK","","",N,N],[17,"MAP_INDEX_CONTROL","","",N,N],[17,"MAP_INDEX_1","","",N,N],[17,"MAP_INDEX_2","","",N,N],[17,"MAP_INDEX_3","","",N,N],[17,"MAP_INDEX_4","","",N,N],[17,"MAP_INDEX_5","","",N,N],[17,"KEY_PRESS","","",N,N],[17,"KEY_RELEASE","","",N,N],[17,"BUTTON_PRESS","","",N,N],[17,"BUTTON_RELEASE","","",N,N],[17,"MOTION_NOTIFY","","",N,N],[17,"ENTER_NOTIFY","","",N,N],[17,"LEAVE_NOTIFY","","",N,N],[17,"FOCUS_IN","","",N,N],[17,"FOCUS_OUT","","",N,N],[17,"KEYMAP_NOTIFY","","",N,N],[17,"EXPOSE","","",N,N],[17,"GRAPHICS_EXPOSURE","","",N,N],[17,"NO_EXPOSURE","","",N,N],[17,"VISIBILITY_NOTIFY","","",N,N],[17,"CREATE_NOTIFY","","",N,N],[17,"DESTROY_NOTIFY","","",N,N],[17,"UNMAP_NOTIFY","","",N,N],[17,"MAP_NOTIFY","","",N,N],[17,"MAP_REQUEST","","",N,N],[17,"REPARENT_NOTIFY","","",N,N],[17,"CONFIGURE_NOTIFY","","",N,N],[17,"CONFIGURE_REQUEST","","",N,N],[17,"GRAVITY_NOTIFY","","",N,N],[17,"RESIZE_REQUEST","","",N,N],[17,"CIRCULATE_NOTIFY","","",N,N],[17,"CIRCULATE_REQUEST","","",N,N],[17,"PROPERTY_NOTIFY","","",N,N],[17,"SELECTION_CLEAR","","",N,N],[17,"SELECTION_REQUEST","","",N,N],[17,"SELECTION_NOTIFY","","",N,N],[17,"COLORMAP_NOTIFY","","",N,N],[17,"CLIENT_MESSAGE","","",N,N],[17,"MAPPING_NOTIFY","","",N,N],[17,"GE_GENERIC","","",N,N],[17,"REQUEST","","",N,N],[17,"VALUE","","",N,N],[17,"WINDOW","","",N,N],[17,"PIXMAP","","",N,N],[17,"ATOM","","",N,N],[17,"CURSOR","","",N,N],[17,"FONT","","",N,N],[17,"MATCH","","",N,N],[17,"DRAWABLE","","",N,N],[17,"ACCESS","","",N,N],[17,"ALLOC","","",N,N],[17,"COLORMAP","","",N,N],[17,"G_CONTEXT","","",N,N],[17,"ID_CHOICE","","",N,N],[17,"NAME","","",N,N],[17,"LENGTH","","",N,N],[17,"IMPLEMENTATION","","",N,N],[17,"CREATE_WINDOW","","",N,N],[17,"CHANGE_WINDOW_ATTRIBUTES","","",N,N],[17,"GET_WINDOW_ATTRIBUTES","","",N,N],[17,"DESTROY_WINDOW","","",N,N],[17,"DESTROY_SUBWINDOWS","","",N,N],[17,"CHANGE_SAVE_SET","","",N,N],[17,"REPARENT_WINDOW","","",N,N],[17,"MAP_WINDOW","","",N,N],[17,"MAP_SUBWINDOWS","","",N,N],[17,"UNMAP_WINDOW","","",N,N],[17,"UNMAP_SUBWINDOWS","","",N,N],[17,"CONFIGURE_WINDOW","","",N,N],[17,"CIRCULATE_WINDOW","","",N,N],[17,"GET_GEOMETRY","","",N,N],[17,"QUERY_TREE","","",N,N],[17,"INTERN_ATOM","","",N,N],[17,"GET_ATOM_NAME","","",N,N],[17,"CHANGE_PROPERTY","","",N,N],[17,"DELETE_PROPERTY","","",N,N],[17,"GET_PROPERTY","","",N,N],[17,"LIST_PROPERTIES","","",N,N],[17,"SET_SELECTION_OWNER","","",N,N],[17,"GET_SELECTION_OWNER","","",N,N],[17,"CONVERT_SELECTION","","",N,N],[17,"SEND_EVENT","","",N,N],[17,"GRAB_POINTER","","",N,N],[17,"UNGRAB_POINTER","","",N,N],[17,"GRAB_BUTTON","","",N,N],[17,"UNGRAB_BUTTON","","",N,N],[17,"CHANGE_ACTIVE_POINTER_GRAB","","",N,N],[17,"GRAB_KEYBOARD","","",N,N],[17,"UNGRAB_KEYBOARD","","",N,N],[17,"GRAB_KEY","","",N,N],[17,"UNGRAB_KEY","","",N,N],[17,"ALLOW_EVENTS","","",N,N],[17,"GRAB_SERVER","","",N,N],[17,"UNGRAB_SERVER","","",N,N],[17,"QUERY_POINTER","","",N,N],[17,"GET_MOTION_EVENTS","","",N,N],[17,"TRANSLATE_COORDINATES","","",N,N],[17,"WARP_POINTER","","",N,N],[17,"SET_INPUT_FOCUS","","",N,N],[17,"GET_INPUT_FOCUS","","",N,N],[17,"QUERY_KEYMAP","","",N,N],[17,"OPEN_FONT","","",N,N],[17,"CLOSE_FONT","","",N,N],[17,"QUERY_FONT","","",N,N],[17,"QUERY_TEXT_EXTENTS","","",N,N],[17,"LIST_FONTS","","",N,N],[17,"LIST_FONTS_WITH_INFO","","",N,N],[17,"SET_FONT_PATH","","",N,N],[17,"GET_FONT_PATH","","",N,N],[17,"CREATE_PIXMAP","","",N,N],[17,"FREE_PIXMAP","","",N,N],[17,"CREATE_GC","","",N,N],[17,"CHANGE_GC","","",N,N],[17,"COPY_GC","","",N,N],[17,"SET_DASHES","","",N,N],[17,"SET_CLIP_RECTANGLES","","",N,N],[17,"FREE_GC","","",N,N],[17,"CLEAR_AREA","","",N,N],[17,"COPY_AREA","","",N,N],[17,"COPY_PLANE","","",N,N],[17,"POLY_POINT","","",N,N],[17,"POLY_LINE","","",N,N],[17,"POLY_SEGMENT","","",N,N],[17,"POLY_RECTANGLE","","",N,N],[17,"POLY_ARC","","",N,N],[17,"FILL_POLY","","",N,N],[17,"POLY_FILL_RECTANGLE","","",N,N],[17,"POLY_FILL_ARC","","",N,N],[17,"PUT_IMAGE","","",N,N],[17,"GET_IMAGE","","",N,N],[17,"POLY_TEXT_8","","",N,N],[17,"POLY_TEXT_16","","",N,N],[17,"IMAGE_TEXT_8","","",N,N],[17,"IMAGE_TEXT_16","","",N,N],[17,"CREATE_COLORMAP","","",N,N],[17,"FREE_COLORMAP","","",N,N],[17,"COPY_COLORMAP_AND_FREE","","",N,N],[17,"INSTALL_COLORMAP","","",N,N],[17,"UNINSTALL_COLORMAP","","",N,N],[17,"LIST_INSTALLED_COLORMAPS","","",N,N],[17,"ALLOC_COLOR","","",N,N],[17,"ALLOC_NAMED_COLOR","","",N,N],[17,"ALLOC_COLOR_CELLS","","",N,N],[17,"ALLOC_COLOR_PLANES","","",N,N],[17,"FREE_COLORS","","",N,N],[17,"STORE_COLORS","","",N,N],[17,"STORE_NAMED_COLOR","","",N,N],[17,"QUERY_COLORS","","",N,N],[17,"LOOKUP_COLOR","","",N,N],[17,"CREATE_CURSOR","","",N,N],[17,"CREATE_GLYPH_CURSOR","","",N,N],[17,"FREE_CURSOR","","",N,N],[17,"RECOLOR_CURSOR","","",N,N],[17,"QUERY_BEST_SIZE","","",N,N],[17,"QUERY_EXTENSION","","",N,N],[17,"LIST_EXTENSIONS","","",N,N],[17,"CHANGE_KEYBOARD_MAPPING","","",N,N],[17,"GET_KEYBOARD_MAPPING","","",N,N],[17,"CHANGE_KEYBOARD_CONTROL","","",N,N],[17,"GET_KEYBOARD_CONTROL","","",N,N],[17,"BELL","","",N,N],[17,"CHANGE_POINTER_CONTROL","","",N,N],[17,"GET_POINTER_CONTROL","","",N,N],[17,"SET_SCREEN_SAVER","","",N,N],[17,"GET_SCREEN_SAVER","","",N,N],[17,"CHANGE_HOSTS","","",N,N],[17,"LIST_HOSTS","","",N,N],[17,"SET_ACCESS_CONTROL","","",N,N],[17,"SET_CLOSE_DOWN_MODE","","",N,N],[17,"KILL_CLIENT","","",N,N],[17,"ROTATE_PROPERTIES","","",N,N],[17,"FORCE_SCREEN_SAVER","","",N,N],[17,"SET_POINTER_MAPPING","","",N,N],[17,"GET_POINTER_MAPPING","","",N,N],[17,"SET_MODIFIER_MAPPING","","",N,N],[17,"GET_MODIFIER_MAPPING","","",N,N],[17,"NO_OPERATION","","",N,N],[11,"clone","","",27,[[["self"]],["char2b"]]],[11,"new","","",27,[[["u8"],["u8"]],["char2b"]]],[11,"byte1","","",27,[[["self"]],["u8"]]],[11,"byte2","","",27,[[["self"]],["u8"]]],[11,"next","","",39,[[["self"]],["option",["char2b"]]]],[11,"clone","","",28,[[["self"]],["point"]]],[11,"new","","",28,[[["i16"],["i16"]],["point"]]],[11,"x","","",28,[[["self"]],["i16"]]],[11,"y","","",28,[[["self"]],["i16"]]],[11,"next","","",40,[[["self"]],["option",["point"]]]],[11,"clone","","",29,[[["self"]],["rectangle"]]],[11,"new","","",29,[[["i16"],["i16"],["u16"],["u16"]],["rectangle"]]],[11,"x","","",29,[[["self"]],["i16"]]],[11,"y","","",29,[[["self"]],["i16"]]],[11,"width","","",29,[[["self"]],["u16"]]],[11,"height","","",29,[[["self"]],["u16"]]],[11,"next","","",41,[[["self"]],["option",["rectangle"]]]],[11,"clone","","",30,[[["self"]],["arc"]]],[11,"new","","",30,[[["i16"],["i16"],["u16"],["u16"],["i16"],["i16"]],["arc"]]],[11,"x","","",30,[[["self"]],["i16"]]],[11,"y","","",30,[[["self"]],["i16"]]],[11,"width","","",30,[[["self"]],["u16"]]],[11,"height","","",30,[[["self"]],["u16"]]],[11,"angle1","","",30,[[["self"]],["i16"]]],[11,"angle2","","",30,[[["self"]],["i16"]]],[11,"next","","",42,[[["self"]],["option",["arc"]]]],[11,"clone","","",31,[[["self"]],["format"]]],[11,"new","","",31,[[["u8"],["u8"],["u8"]],["format"]]],[11,"depth","","",31,[[["self"]],["u8"]]],[11,"bits_per_pixel","","",31,[[["self"]],["u8"]]],[11,"scanline_pad","","",31,[[["self"]],["u8"]]],[11,"next","","",43,[[["self"]],["option",["format"]]]],[11,"clone","","",32,[[["self"]],["visualtype"]]],[11,"new","","",32,[[["visualid"],["u8"],["u8"],["u16"],["u32"],["u32"],["u32"]],["visualtype"]]],[11,"visual_id","","",32,[[["self"]],["visualid"]]],[11,"class","","",32,[[["self"]],["u8"]]],[11,"bits_per_rgb_value","","",32,[[["self"]],["u8"]]],[11,"colormap_entries","","",32,[[["self"]],["u16"]]],[11,"red_mask","","",32,[[["self"]],["u32"]]],[11,"green_mask","","",32,[[["self"]],["u32"]]],[11,"blue_mask","","",32,[[["self"]],["u32"]]],[11,"next","","",44,[[["self"]],["option",["visualtype"]]]],[11,"depth","","",45,[[["self"]],["u8"]]],[11,"visuals_len","","",45,[[["self"]],["u16"]]],[11,"visuals","","",45,[[["self"]],["visualtypeiterator"]]],[11,"next","","",46,[[["self"]],["option",["depth"]]]],[11,"root","","",47,[[["self"]],["window"]]],[11,"default_colormap","","",47,[[["self"]],["colormap"]]],[11,"white_pixel","","",47,[[["self"]],["u32"]]],[11,"black_pixel","","",47,[[["self"]],["u32"]]],[11,"current_input_masks","","",47,[[["self"]],["u32"]]],[11,"width_in_pixels","","",47,[[["self"]],["u16"]]],[11,"height_in_pixels","","",47,[[["self"]],["u16"]]],[11,"width_in_millimeters","","",47,[[["self"]],["u16"]]],[11,"height_in_millimeters","","",47,[[["self"]],["u16"]]],[11,"min_installed_maps","","",47,[[["self"]],["u16"]]],[11,"max_installed_maps","","",47,[[["self"]],["u16"]]],[11,"root_visual","","",47,[[["self"]],["visualid"]]],[11,"backing_stores","","",47,[[["self"]],["u8"]]],[11,"save_unders","","",47,[[["self"]],["bool"]]],[11,"root_depth","","",47,[[["self"]],["u8"]]],[11,"allowed_depths_len","","",47,[[["self"]],["u8"]]],[11,"allowed_depths","","",47,[[["self"]],["depthiterator"]]],[11,"next","","",48,[[["self"]],["option",["screen"]]]],[11,"byte_order","","",49,[[["self"]],["u8"]]],[11,"protocol_major_version","","",49,[[["self"]],["u16"]]],[11,"protocol_minor_version","","",49,[[["self"]],["u16"]]],[11,"authorization_protocol_name_len","","",49,[[["self"]],["u16"]]],[11,"authorization_protocol_data_len","","",49,[[["self"]],["u16"]]],[11,"authorization_protocol_name","","",49,[[["self"]],["str"]]],[11,"authorization_protocol_data","","",49,[[["self"]],["str"]]],[11,"next","","",50,[[["self"]],["option",["setuprequest"]]]],[11,"status","","",51,[[["self"]],["u8"]]],[11,"reason_len","","",51,[[["self"]],["u8"]]],[11,"protocol_major_version","","",51,[[["self"]],["u16"]]],[11,"protocol_minor_version","","",51,[[["self"]],["u16"]]],[11,"length","","",51,[[["self"]],["u16"]]],[11,"reason","","",51,[[["self"]],["str"]]],[11,"next","","",52,[[["self"]],["option",["setupfailed"]]]],[11,"status","","",53,[[["self"]],["u8"]]],[11,"length","","",53,[[["self"]],["u16"]]],[11,"reason","","",53,[[["self"]],["str"]]],[11,"next","","",54,[[["self"]],["option",["setupauthenticate"]]]],[11,"status","","",55,[[["self"]],["u8"]]],[11,"protocol_major_version","","",55,[[["self"]],["u16"]]],[11,"protocol_minor_version","","",55,[[["self"]],["u16"]]],[11,"length","","",55,[[["self"]],["u16"]]],[11,"release_number","","",55,[[["self"]],["u32"]]],[11,"resource_id_base","","",55,[[["self"]],["u32"]]],[11,"resource_id_mask","","",55,[[["self"]],["u32"]]],[11,"motion_buffer_size","","",55,[[["self"]],["u32"]]],[11,"vendor_len","","",55,[[["self"]],["u16"]]],[11,"maximum_request_length","","",55,[[["self"]],["u16"]]],[11,"roots_len","","",55,[[["self"]],["u8"]]],[11,"pixmap_formats_len","","",55,[[["self"]],["u8"]]],[11,"image_byte_order","","",55,[[["self"]],["u8"]]],[11,"bitmap_format_bit_order","","",55,[[["self"]],["u8"]]],[11,"bitmap_format_scanline_unit","","",55,[[["self"]],["u8"]]],[11,"bitmap_format_scanline_pad","","",55,[[["self"]],["u8"]]],[11,"min_keycode","","",55,[[["self"]],["keycode"]]],[11,"max_keycode","","",55,[[["self"]],["keycode"]]],[11,"vendor","","",55,[[["self"]],["str"]]],[11,"pixmap_formats","","",55,[[["self"]],["formatiterator"]]],[11,"roots","","",55,[[["self"]],["screeniterator"]]],[11,"next","","",56,[[["self"]],["option",["setup"]]]],[11,"detail","","The keycode (a number representing a physical key on the keyboard) of the key which was pressed.",57,[[["self"]],["keycode"]]],[11,"time","","Time when the event was generated (in milliseconds).",57,[[["self"]],["timestamp"]]],[11,"root","","The root window of `child`.",57,[[["self"]],["window"]]],[11,"event","","",57,[[["self"]],["window"]]],[11,"child","","",57,[[["self"]],["window"]]],[11,"root_x","","The X coordinate of the pointer relative to the `root` window at the time of the event.",57,[[["self"]],["i16"]]],[11,"root_y","","The Y coordinate of the pointer relative to the `root` window at the time of the event.",57,[[["self"]],["i16"]]],[11,"event_x","","If `same_screen` is true, this is the X coordinate relative to the `event` window's origin. Otherwise, `event_x` will be set to zero.",57,[[["self"]],["i16"]]],[11,"event_y","","If `same_screen` is true, this is the Y coordinate relative to the `event` window's origin. Otherwise, `event_y` will be set to zero.",57,[[["self"]],["i16"]]],[11,"state","","The logical state of the pointer buttons and modifier keys just prior to the event.",57,[[["self"]],["u16"]]],[11,"same_screen","","Whether the `event` window is on the same screen as the `root` window.",57,[[["self"]],["bool"]]],[11,"new","","Constructs a new KeyPressEvent `response_type` must be set to one of:     - `KEY_RELEASE`     - `KEY_PRESS`",57,[[["u8"],["keycode"],["timestamp"],["window"],["window"],["window"],["i16"],["i16"],["i16"],["i16"],["u16"],["bool"]],["keypressevent"]]],[11,"detail","","The keycode (a number representing a physical key on the keyboard) of the key which was pressed.",58,[[["self"]],["button"]]],[11,"time","","Time when the event was generated (in milliseconds).",58,[[["self"]],["timestamp"]]],[11,"root","","The root window of `child`.",58,[[["self"]],["window"]]],[11,"event","","",58,[[["self"]],["window"]]],[11,"child","","",58,[[["self"]],["window"]]],[11,"root_x","","The X coordinate of the pointer relative to the `root` window at the time of the event.",58,[[["self"]],["i16"]]],[11,"root_y","","The Y coordinate of the pointer relative to the `root` window at the time of the event.",58,[[["self"]],["i16"]]],[11,"event_x","","If `same_screen` is true, this is the X coordinate relative to the `event` window's origin. Otherwise, `event_x` will be set to zero.",58,[[["self"]],["i16"]]],[11,"event_y","","If `same_screen` is true, this is the Y coordinate relative to the `event` window's origin. Otherwise, `event_y` will be set to zero.",58,[[["self"]],["i16"]]],[11,"state","","The logical state of the pointer buttons and modifier keys just prior to the event.",58,[[["self"]],["u16"]]],[11,"same_screen","","Whether the `event` window is on the same screen as the `root` window.",58,[[["self"]],["bool"]]],[11,"new","","Constructs a new ButtonPressEvent `response_type` must be set to one of:     - `BUTTON_PRESS`     - `BUTTON_RELEASE`",58,[[["u8"],["button"],["timestamp"],["window"],["window"],["window"],["i16"],["i16"],["i16"],["i16"],["u16"],["bool"]],["buttonpressevent"]]],[11,"detail","","The keycode (a number representing a physical key on the keyboard) of the key which was pressed.",59,[[["self"]],["u8"]]],[11,"time","","Time when the event was generated (in milliseconds).",59,[[["self"]],["timestamp"]]],[11,"root","","The root window of `child`.",59,[[["self"]],["window"]]],[11,"event","","",59,[[["self"]],["window"]]],[11,"child","","",59,[[["self"]],["window"]]],[11,"root_x","","The X coordinate of the pointer relative to the `root` window at the time of the event.",59,[[["self"]],["i16"]]],[11,"root_y","","The Y coordinate of the pointer relative to the `root` window at the time of the event.",59,[[["self"]],["i16"]]],[11,"event_x","","If `same_screen` is true, this is the X coordinate relative to the `event` window's origin. Otherwise, `event_x` will be set to zero.",59,[[["self"]],["i16"]]],[11,"event_y","","If `same_screen` is true, this is the Y coordinate relative to the `event` window's origin. Otherwise, `event_y` will be set to zero.",59,[[["self"]],["i16"]]],[11,"state","","The logical state of the pointer buttons and modifier keys just prior to the event.",59,[[["self"]],["u16"]]],[11,"same_screen","","Whether the `event` window is on the same screen as the `root` window.",59,[[["self"]],["bool"]]],[11,"new","","Constructs a new MotionNotifyEvent `response_type` will be set automatically to MOTION_NOTIFY",59,[[["u8"],["timestamp"],["window"],["window"],["window"],["i16"],["i16"],["i16"],["i16"],["u16"],["bool"]],["motionnotifyevent"]]],[11,"detail","","",60,[[["self"]],["u8"]]],[11,"time","","",60,[[["self"]],["timestamp"]]],[11,"root","","The root window for the final cursor position.",60,[[["self"]],["window"]]],[11,"event","","The window on which the event was generated.",60,[[["self"]],["window"]]],[11,"child","","If the `event` window has subwindows and the final pointer position is in one of them, then `child` is set to that subwindow, `XCB_WINDOW_NONE` otherwise.",60,[[["self"]],["window"]]],[11,"root_x","","The pointer X coordinate relative to `root`'s origin at the time of the event.",60,[[["self"]],["i16"]]],[11,"root_y","","The pointer Y coordinate relative to `root`'s origin at the time of the event.",60,[[["self"]],["i16"]]],[11,"event_x","","If `event` is on the same screen as `root`, this is the pointer X coordinate relative to the event window's origin.",60,[[["self"]],["i16"]]],[11,"event_y","","If `event` is on the same screen as `root`, this is the pointer Y coordinate relative to the event window's origin.",60,[[["self"]],["i16"]]],[11,"state","","",60,[[["self"]],["u16"]]],[11,"mode","","",60,[[["self"]],["u8"]]],[11,"same_screen_focus","","",60,[[["self"]],["u8"]]],[11,"new","","Constructs a new EnterNotifyEvent `response_type` must be set to one of:     - `LEAVE_NOTIFY`     - `ENTER_NOTIFY`",60,[[["u8"],["u8"],["timestamp"],["window"],["window"],["window"],["i16"],["i16"],["i16"],["i16"],["u16"],["u8"],["u8"]],["enternotifyevent"]]],[11,"detail","","",61,[[["self"]],["u8"]]],[11,"event","","The window on which the focus event was generated. This is the window used by the X server to report the event.",61,[[["self"]],["window"]]],[11,"mode","","",61,[[["self"]],["u8"]]],[11,"new","","Constructs a new FocusInEvent `response_type` must be set to one of:     - `FOCUS_IN`     - `FOCUS_OUT`",61,[[["u8"],["u8"],["window"],["u8"]],["focusinevent"]]],[11,"keys","","",62,N],[11,"new","","Constructs a new KeymapNotifyEvent `response_type` will be set automatically to KEYMAP_NOTIFY",62,N],[11,"window","","The exposed (damaged) window.",63,[[["self"]],["window"]]],[11,"x","","The X coordinate of the left-upper corner of the exposed rectangle, relative to the `window`'s origin.",63,[[["self"]],["u16"]]],[11,"y","","The Y coordinate of the left-upper corner of the exposed rectangle, relative to the `window`'s origin.",63,[[["self"]],["u16"]]],[11,"width","","The width of the exposed rectangle.",63,[[["self"]],["u16"]]],[11,"height","","The height of the exposed rectangle.",63,[[["self"]],["u16"]]],[11,"count","","The amount of `Expose` events following this one. Simple applications that do not want to optimize redisplay by distinguishing between subareas of its window can just ignore all Expose events with nonzero counts and perform full redisplays on events with zero counts.",63,[[["self"]],["u16"]]],[11,"new","","Constructs a new ExposeEvent `response_type` will be set automatically to EXPOSE",63,[[["window"],["u16"],["u16"],["u16"],["u16"],["u16"]],["exposeevent"]]],[11,"drawable","","",64,[[["self"]],["drawable"]]],[11,"x","","",64,[[["self"]],["u16"]]],[11,"y","","",64,[[["self"]],["u16"]]],[11,"width","","",64,[[["self"]],["u16"]]],[11,"height","","",64,[[["self"]],["u16"]]],[11,"minor_opcode","","",64,[[["self"]],["u16"]]],[11,"count","","",64,[[["self"]],["u16"]]],[11,"major_opcode","","",64,[[["self"]],["u8"]]],[11,"new","","Constructs a new GraphicsExposureEvent `response_type` will be set automatically to GRAPHICS_EXPOSURE",64,[[["drawable"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u8"]],["graphicsexposureevent"]]],[11,"drawable","","",65,[[["self"]],["drawable"]]],[11,"minor_opcode","","",65,[[["self"]],["u16"]]],[11,"major_opcode","","",65,[[["self"]],["u8"]]],[11,"new","","Constructs a new NoExposureEvent `response_type` will be set automatically to NO_EXPOSURE",65,[[["drawable"],["u16"],["u8"]],["noexposureevent"]]],[11,"window","","",66,[[["self"]],["window"]]],[11,"state","","",66,[[["self"]],["u8"]]],[11,"new","","Constructs a new VisibilityNotifyEvent `response_type` will be set automatically to VISIBILITY_NOTIFY",66,[[["window"],["u8"]],["visibilitynotifyevent"]]],[11,"parent","","",67,[[["self"]],["window"]]],[11,"window","","",67,[[["self"]],["window"]]],[11,"x","","",67,[[["self"]],["i16"]]],[11,"y","","",67,[[["self"]],["i16"]]],[11,"width","","",67,[[["self"]],["u16"]]],[11,"height","","",67,[[["self"]],["u16"]]],[11,"border_width","","",67,[[["self"]],["u16"]]],[11,"override_redirect","","",67,[[["self"]],["bool"]]],[11,"new","","Constructs a new CreateNotifyEvent `response_type` will be set automatically to CREATE_NOTIFY",67,[[["window"],["window"],["i16"],["i16"],["u16"],["u16"],["u16"],["bool"]],["createnotifyevent"]]],[11,"event","","The reconfigured window or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",68,[[["self"]],["window"]]],[11,"window","","The window that is destroyed.",68,[[["self"]],["window"]]],[11,"new","","Constructs a new DestroyNotifyEvent `response_type` will be set automatically to DESTROY_NOTIFY",68,[[["window"],["window"]],["destroynotifyevent"]]],[11,"event","","The reconfigured window or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",69,[[["self"]],["window"]]],[11,"window","","The window that was unmapped.",69,[[["self"]],["window"]]],[11,"from_configure","","Set to 1 if the event was generated as a result of a resizing of the window's parent when `window` had a win_gravity of `UnmapGravity`.",69,[[["self"]],["bool"]]],[11,"new","","Constructs a new UnmapNotifyEvent `response_type` will be set automatically to UNMAP_NOTIFY",69,[[["window"],["window"],["bool"]],["unmapnotifyevent"]]],[11,"event","","The window which was mapped or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",70,[[["self"]],["window"]]],[11,"window","","The window that was mapped.",70,[[["self"]],["window"]]],[11,"override_redirect","","Window managers should ignore this window if `override_redirect` is 1.",70,[[["self"]],["bool"]]],[11,"new","","Constructs a new MapNotifyEvent `response_type` will be set automatically to MAP_NOTIFY",70,[[["window"],["window"],["bool"]],["mapnotifyevent"]]],[11,"parent","","The parent of `window`.",71,[[["self"]],["window"]]],[11,"window","","The window to be mapped.",71,[[["self"]],["window"]]],[11,"new","","Constructs a new MapRequestEvent `response_type` will be set automatically to MAP_REQUEST",71,[[["window"],["window"]],["maprequestevent"]]],[11,"event","","",72,[[["self"]],["window"]]],[11,"window","","",72,[[["self"]],["window"]]],[11,"parent","","",72,[[["self"]],["window"]]],[11,"x","","",72,[[["self"]],["i16"]]],[11,"y","","",72,[[["self"]],["i16"]]],[11,"override_redirect","","",72,[[["self"]],["bool"]]],[11,"new","","Constructs a new ReparentNotifyEvent `response_type` will be set automatically to REPARENT_NOTIFY",72,[[["window"],["window"],["window"],["i16"],["i16"],["bool"]],["reparentnotifyevent"]]],[11,"event","","The reconfigured window or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",73,[[["self"]],["window"]]],[11,"window","","The window whose size, position, border, and/or stacking order was changed.",73,[[["self"]],["window"]]],[11,"above_sibling","","If `XCB_NONE`, the `window` is on the bottom of the stack with respect to sibling windows. However, if set to a sibling window, the `window` is placed on top of this sibling window.",73,[[["self"]],["window"]]],[11,"x","","The X coordinate of the upper-left outside corner of `window`, relative to the parent window's origin.",73,[[["self"]],["i16"]]],[11,"y","","The Y coordinate of the upper-left outside corner of `window`, relative to the parent window's origin.",73,[[["self"]],["i16"]]],[11,"width","","The inside width of `window`, not including the border.",73,[[["self"]],["u16"]]],[11,"height","","The inside height of `window`, not including the border.",73,[[["self"]],["u16"]]],[11,"border_width","","The border width of `window`.",73,[[["self"]],["u16"]]],[11,"override_redirect","","Window managers should ignore this window if `override_redirect` is 1.",73,[[["self"]],["bool"]]],[11,"new","","Constructs a new ConfigureNotifyEvent `response_type` will be set automatically to CONFIGURE_NOTIFY",73,[[["window"],["window"],["window"],["i16"],["i16"],["u16"],["u16"],["u16"],["bool"]],["configurenotifyevent"]]],[11,"stack_mode","","",74,[[["self"]],["u8"]]],[11,"parent","","",74,[[["self"]],["window"]]],[11,"window","","",74,[[["self"]],["window"]]],[11,"sibling","","",74,[[["self"]],["window"]]],[11,"x","","",74,[[["self"]],["i16"]]],[11,"y","","",74,[[["self"]],["i16"]]],[11,"width","","",74,[[["self"]],["u16"]]],[11,"height","","",74,[[["self"]],["u16"]]],[11,"border_width","","",74,[[["self"]],["u16"]]],[11,"value_mask","","",74,[[["self"]],["u16"]]],[11,"new","","Constructs a new ConfigureRequestEvent `response_type` will be set automatically to CONFIGURE_REQUEST",74,[[["u8"],["window"],["window"],["window"],["i16"],["i16"],["u16"],["u16"],["u16"],["u16"]],["configurerequestevent"]]],[11,"event","","",75,[[["self"]],["window"]]],[11,"window","","",75,[[["self"]],["window"]]],[11,"x","","",75,[[["self"]],["i16"]]],[11,"y","","",75,[[["self"]],["i16"]]],[11,"new","","Constructs a new GravityNotifyEvent `response_type` will be set automatically to GRAVITY_NOTIFY",75,[[["window"],["window"],["i16"],["i16"]],["gravitynotifyevent"]]],[11,"window","","",76,[[["self"]],["window"]]],[11,"width","","",76,[[["self"]],["u16"]]],[11,"height","","",76,[[["self"]],["u16"]]],[11,"new","","Constructs a new ResizeRequestEvent `response_type` will be set automatically to RESIZE_REQUEST",76,[[["window"],["u16"],["u16"]],["resizerequestevent"]]],[11,"event","","Either the restacked window or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",77,[[["self"]],["window"]]],[11,"window","","The restacked window.",77,[[["self"]],["window"]]],[11,"place","","",77,[[["self"]],["u8"]]],[11,"new","","Constructs a new CirculateNotifyEvent `response_type` must be set to one of:     - `CIRCULATE_REQUEST`     - `CIRCULATE_NOTIFY`",77,[[["u8"],["window"],["window"],["u8"]],["circulatenotifyevent"]]],[11,"window","","The window whose associated property was changed.",78,[[["self"]],["window"]]],[11,"atom","","The property's atom, to indicate which property was changed.",78,[[["self"]],["atom"]]],[11,"time","","A timestamp of the server time when the property was changed.",78,[[["self"]],["timestamp"]]],[11,"state","","",78,[[["self"]],["u8"]]],[11,"new","","Constructs a new PropertyNotifyEvent `response_type` will be set automatically to PROPERTY_NOTIFY",78,[[["window"],["atom"],["timestamp"],["u8"]],["propertynotifyevent"]]],[11,"time","","",79,[[["self"]],["timestamp"]]],[11,"owner","","",79,[[["self"]],["window"]]],[11,"selection","","",79,[[["self"]],["atom"]]],[11,"new","","Constructs a new SelectionClearEvent `response_type` will be set automatically to SELECTION_CLEAR",79,[[["timestamp"],["window"],["atom"]],["selectionclearevent"]]],[11,"time","","",80,[[["self"]],["timestamp"]]],[11,"owner","","",80,[[["self"]],["window"]]],[11,"requestor","","",80,[[["self"]],["window"]]],[11,"selection","","",80,[[["self"]],["atom"]]],[11,"target","","",80,[[["self"]],["atom"]]],[11,"property","","",80,[[["self"]],["atom"]]],[11,"new","","Constructs a new SelectionRequestEvent `response_type` will be set automatically to SELECTION_REQUEST",80,[[["timestamp"],["window"],["window"],["atom"],["atom"],["atom"]],["selectionrequestevent"]]],[11,"time","","",81,[[["self"]],["timestamp"]]],[11,"requestor","","",81,[[["self"]],["window"]]],[11,"selection","","",81,[[["self"]],["atom"]]],[11,"target","","",81,[[["self"]],["atom"]]],[11,"property","","",81,[[["self"]],["atom"]]],[11,"new","","Constructs a new SelectionNotifyEvent `response_type` will be set automatically to SELECTION_NOTIFY",81,[[["timestamp"],["window"],["atom"],["atom"],["atom"]],["selectionnotifyevent"]]],[11,"window","","The window whose associated colormap is changed, installed or uninstalled.",82,[[["self"]],["window"]]],[11,"colormap","","The colormap which is changed, installed or uninstalled. This is `XCB_NONE` when the colormap is changed by a call to `FreeColormap`.",82,[[["self"]],["colormap"]]],[11,"new_","","",82,[[["self"]],["bool"]]],[11,"state","","",82,[[["self"]],["u8"]]],[11,"new","","Constructs a new ColormapNotifyEvent `response_type` will be set automatically to COLORMAP_NOTIFY",82,[[["window"],["colormap"],["bool"],["u8"]],["colormapnotifyevent"]]],[11,"data8","","",83,N],[11,"from_data8","","",83,N],[11,"data16","","",83,N],[11,"from_data16","","",83,N],[11,"data32","","",83,N],[11,"from_data32","","",83,N],[11,"next","","",84,[[["self"]],["option",["clientmessagedata"]]]],[11,"format","","Specifies how to interpret `data`. Can be either 8, 16 or 32.",85,[[["self"]],["u8"]]],[11,"window","","",85,[[["self"]],["window"]]],[11,"type_","","An atom which indicates how the data should be interpreted by the receiving client.",85,[[["self"]],["atom"]]],[11,"data","","The data itself (20 bytes max).",85,[[["self"]],["clientmessagedata"]]],[11,"new","","Constructs a new ClientMessageEvent `response_type` will be set automatically to CLIENT_MESSAGE",85,[[["u8"],["window"],["atom"],["clientmessagedata"]],["clientmessageevent"]]],[11,"request","","",86,[[["self"]],["u8"]]],[11,"first_keycode","","The first number in the range of the altered mapping.",86,[[["self"]],["keycode"]]],[11,"count","","The number of keycodes altered.",86,[[["self"]],["u8"]]],[11,"new","","Constructs a new MappingNotifyEvent `response_type` will be set automatically to MAPPING_NOTIFY",86,[[["u8"],["keycode"],["u8"]],["mappingnotifyevent"]]],[11,"new","","Constructs a new GeGenericEvent `response_type` will be set automatically to GE_GENERIC",87,[[],["gegenericevent"]]],[11,"get_reply","","",88,[[["self"]],["result",["getwindowattributesreply","genericerror"]]]],[11,"backing_store","","",89,[[["self"]],["u8"]]],[11,"visual","","",89,[[["self"]],["visualid"]]],[11,"class","","",89,[[["self"]],["u16"]]],[11,"bit_gravity","","",89,[[["self"]],["u8"]]],[11,"win_gravity","","",89,[[["self"]],["u8"]]],[11,"backing_planes","","",89,[[["self"]],["u32"]]],[11,"backing_pixel","","",89,[[["self"]],["u32"]]],[11,"save_under","","",89,[[["self"]],["bool"]]],[11,"map_is_installed","","",89,[[["self"]],["bool"]]],[11,"map_state","","",89,[[["self"]],["u8"]]],[11,"override_redirect","","",89,[[["self"]],["bool"]]],[11,"colormap","","",89,[[["self"]],["colormap"]]],[11,"all_event_masks","","",89,[[["self"]],["u32"]]],[11,"your_event_mask","","",89,[[["self"]],["u32"]]],[11,"do_not_propagate_mask","","",89,[[["self"]],["u16"]]],[11,"get_reply","","",90,[[["self"]],["result",["getgeometryreply","genericerror"]]]],[11,"depth","","",91,[[["self"]],["u8"]]],[11,"root","","",91,[[["self"]],["window"]]],[11,"x","","",91,[[["self"]],["i16"]]],[11,"y","","",91,[[["self"]],["i16"]]],[11,"width","","",91,[[["self"]],["u16"]]],[11,"height","","",91,[[["self"]],["u16"]]],[11,"border_width","","",91,[[["self"]],["u16"]]],[11,"get_reply","","",92,[[["self"]],["result",["querytreereply","genericerror"]]]],[11,"root","","",93,[[["self"]],["window"]]],[11,"parent","","",93,[[["self"]],["window"]]],[11,"children_len","","",93,[[["self"]],["u16"]]],[11,"children","","",93,N],[11,"get_reply","","",94,[[["self"]],["result",["internatomreply","genericerror"]]]],[11,"atom","","",95,[[["self"]],["atom"]]],[11,"get_reply","","",96,[[["self"]],["result",["getatomnamereply","genericerror"]]]],[11,"name_len","","",97,[[["self"]],["u16"]]],[11,"name","","",97,[[["self"]],["str"]]],[11,"get_reply","","",98,[[["self"]],["result",["getpropertyreply","genericerror"]]]],[11,"format","","",99,[[["self"]],["u8"]]],[11,"type_","","",99,[[["self"]],["atom"]]],[11,"bytes_after","","",99,[[["self"]],["u32"]]],[11,"value_len","","",99,[[["self"]],["u32"]]],[11,"value","","",99,N],[11,"get_reply","","",100,[[["self"]],["result",["listpropertiesreply","genericerror"]]]],[11,"atoms_len","","",101,[[["self"]],["u16"]]],[11,"atoms","","",101,N],[11,"get_reply","","",102,[[["self"]],["result",["getselectionownerreply","genericerror"]]]],[11,"owner","","",103,[[["self"]],["window"]]],[11,"get_reply","","",104,[[["self"]],["result",["grabpointerreply","genericerror"]]]],[11,"status","","",105,[[["self"]],["u8"]]],[11,"get_reply","","",106,[[["self"]],["result",["grabkeyboardreply","genericerror"]]]],[11,"status","","",107,[[["self"]],["u8"]]],[11,"get_reply","","",108,[[["self"]],["result",["querypointerreply","genericerror"]]]],[11,"same_screen","","",109,[[["self"]],["bool"]]],[11,"root","","",109,[[["self"]],["window"]]],[11,"child","","",109,[[["self"]],["window"]]],[11,"root_x","","",109,[[["self"]],["i16"]]],[11,"root_y","","",109,[[["self"]],["i16"]]],[11,"win_x","","",109,[[["self"]],["i16"]]],[11,"win_y","","",109,[[["self"]],["i16"]]],[11,"mask","","",109,[[["self"]],["u16"]]],[11,"clone","","",33,[[["self"]],["timecoord"]]],[11,"new","","",33,[[["timestamp"],["i16"],["i16"]],["timecoord"]]],[11,"time","","",33,[[["self"]],["timestamp"]]],[11,"x","","",33,[[["self"]],["i16"]]],[11,"y","","",33,[[["self"]],["i16"]]],[11,"next","","",110,[[["self"]],["option",["timecoord"]]]],[11,"get_reply","","",111,[[["self"]],["result",["getmotioneventsreply","genericerror"]]]],[11,"events_len","","",112,[[["self"]],["u32"]]],[11,"events","","",112,[[["self"]],["timecoorditerator"]]],[11,"get_reply","","",113,[[["self"]],["result",["translatecoordinatesreply","genericerror"]]]],[11,"same_screen","","",114,[[["self"]],["bool"]]],[11,"child","","",114,[[["self"]],["window"]]],[11,"dst_x","","",114,[[["self"]],["i16"]]],[11,"dst_y","","",114,[[["self"]],["i16"]]],[11,"get_reply","","",115,[[["self"]],["result",["getinputfocusreply","genericerror"]]]],[11,"revert_to","","",116,[[["self"]],["u8"]]],[11,"focus","","",116,[[["self"]],["window"]]],[11,"get_reply","","",117,[[["self"]],["result",["querykeymapreply","genericerror"]]]],[11,"keys","","",118,N],[11,"clone","","",34,[[["self"]],["fontprop"]]],[11,"new","","",34,[[["atom"],["u32"]],["fontprop"]]],[11,"name","","",34,[[["self"]],["atom"]]],[11,"value","","",34,[[["self"]],["u32"]]],[11,"next","","",119,[[["self"]],["option",["fontprop"]]]],[11,"clone","","",35,[[["self"]],["charinfo"]]],[11,"new","","",35,[[["i16"],["i16"],["i16"],["i16"],["i16"],["u16"]],["charinfo"]]],[11,"left_side_bearing","","",35,[[["self"]],["i16"]]],[11,"right_side_bearing","","",35,[[["self"]],["i16"]]],[11,"character_width","","",35,[[["self"]],["i16"]]],[11,"ascent","","",35,[[["self"]],["i16"]]],[11,"descent","","",35,[[["self"]],["i16"]]],[11,"attributes","","",35,[[["self"]],["u16"]]],[11,"next","","",120,[[["self"]],["option",["charinfo"]]]],[11,"get_reply","","",121,[[["self"]],["result",["queryfontreply","genericerror"]]]],[11,"min_bounds","","",122,[[["self"]],["charinfo"]]],[11,"max_bounds","","",122,[[["self"]],["charinfo"]]],[11,"min_char_or_byte2","","",122,[[["self"]],["u16"]]],[11,"max_char_or_byte2","","",122,[[["self"]],["u16"]]],[11,"default_char","","",122,[[["self"]],["u16"]]],[11,"properties_len","","",122,[[["self"]],["u16"]]],[11,"draw_direction","","",122,[[["self"]],["u8"]]],[11,"min_byte1","","",122,[[["self"]],["u8"]]],[11,"max_byte1","","",122,[[["self"]],["u8"]]],[11,"all_chars_exist","","",122,[[["self"]],["bool"]]],[11,"font_ascent","","",122,[[["self"]],["i16"]]],[11,"font_descent","","",122,[[["self"]],["i16"]]],[11,"char_infos_len","","",122,[[["self"]],["u32"]]],[11,"properties","","",122,[[["self"]],["fontpropiterator"]]],[11,"char_infos","","",122,[[["self"]],["charinfoiterator"]]],[11,"get_reply","","",123,[[["self"]],["result",["querytextextentsreply","genericerror"]]]],[11,"draw_direction","","",124,[[["self"]],["u8"]]],[11,"font_ascent","","",124,[[["self"]],["i16"]]],[11,"font_descent","","",124,[[["self"]],["i16"]]],[11,"overall_ascent","","",124,[[["self"]],["i16"]]],[11,"overall_descent","","",124,[[["self"]],["i16"]]],[11,"overall_width","","",124,[[["self"]],["i32"]]],[11,"overall_left","","",124,[[["self"]],["i32"]]],[11,"overall_right","","",124,[[["self"]],["i32"]]],[11,"name_len","","",125,[[["self"]],["u8"]]],[11,"name","","",125,[[["self"]],["str"]]],[11,"next","","",126,[[["self"]],["option",["str"]]]],[11,"get_reply","","",127,[[["self"]],["result",["listfontsreply","genericerror"]]]],[11,"names_len","","",128,[[["self"]],["u16"]]],[11,"names","","",128,[[["self"]],["striterator"]]],[11,"get_reply","","",129,[[["self"]],["result",["listfontswithinforeply","genericerror"]]]],[11,"name_len","","",130,[[["self"]],["u8"]]],[11,"min_bounds","","",130,[[["self"]],["charinfo"]]],[11,"max_bounds","","",130,[[["self"]],["charinfo"]]],[11,"min_char_or_byte2","","",130,[[["self"]],["u16"]]],[11,"max_char_or_byte2","","",130,[[["self"]],["u16"]]],[11,"default_char","","",130,[[["self"]],["u16"]]],[11,"properties_len","","",130,[[["self"]],["u16"]]],[11,"draw_direction","","",130,[[["self"]],["u8"]]],[11,"min_byte1","","",130,[[["self"]],["u8"]]],[11,"max_byte1","","",130,[[["self"]],["u8"]]],[11,"all_chars_exist","","",130,[[["self"]],["bool"]]],[11,"font_ascent","","",130,[[["self"]],["i16"]]],[11,"font_descent","","",130,[[["self"]],["i16"]]],[11,"replies_hint","","",130,[[["self"]],["u32"]]],[11,"properties","","",130,[[["self"]],["fontpropiterator"]]],[11,"name","","",130,[[["self"]],["str"]]],[11,"get_reply","","",131,[[["self"]],["result",["getfontpathreply","genericerror"]]]],[11,"path_len","","",132,[[["self"]],["u16"]]],[11,"path","","",132,[[["self"]],["striterator"]]],[11,"clone","","",36,[[["self"]],["segment"]]],[11,"new","","",36,[[["i16"],["i16"],["i16"],["i16"]],["segment"]]],[11,"x1","","",36,[[["self"]],["i16"]]],[11,"y1","","",36,[[["self"]],["i16"]]],[11,"x2","","",36,[[["self"]],["i16"]]],[11,"y2","","",36,[[["self"]],["i16"]]],[11,"next","","",133,[[["self"]],["option",["segment"]]]],[11,"get_reply","","",134,[[["self"]],["result",["getimagereply","genericerror"]]]],[11,"depth","","",135,[[["self"]],["u8"]]],[11,"visual","","",135,[[["self"]],["visualid"]]],[11,"data","","",135,N],[11,"get_reply","","",136,[[["self"]],["result",["listinstalledcolormapsreply","genericerror"]]]],[11,"cmaps_len","","",137,[[["self"]],["u16"]]],[11,"cmaps","","",137,N],[11,"get_reply","","",138,[[["self"]],["result",["alloccolorreply","genericerror"]]]],[11,"red","","",139,[[["self"]],["u16"]]],[11,"green","","",139,[[["self"]],["u16"]]],[11,"blue","","",139,[[["self"]],["u16"]]],[11,"pixel","","",139,[[["self"]],["u32"]]],[11,"get_reply","","",140,[[["self"]],["result",["allocnamedcolorreply","genericerror"]]]],[11,"pixel","","",141,[[["self"]],["u32"]]],[11,"exact_red","","",141,[[["self"]],["u16"]]],[11,"exact_green","","",141,[[["self"]],["u16"]]],[11,"exact_blue","","",141,[[["self"]],["u16"]]],[11,"visual_red","","",141,[[["self"]],["u16"]]],[11,"visual_green","","",141,[[["self"]],["u16"]]],[11,"visual_blue","","",141,[[["self"]],["u16"]]],[11,"get_reply","","",142,[[["self"]],["result",["alloccolorcellsreply","genericerror"]]]],[11,"pixels_len","","",143,[[["self"]],["u16"]]],[11,"masks_len","","",143,[[["self"]],["u16"]]],[11,"pixels","","",143,N],[11,"masks","","",143,N],[11,"get_reply","","",144,[[["self"]],["result",["alloccolorplanesreply","genericerror"]]]],[11,"pixels_len","","",145,[[["self"]],["u16"]]],[11,"red_mask","","",145,[[["self"]],["u32"]]],[11,"green_mask","","",145,[[["self"]],["u32"]]],[11,"blue_mask","","",145,[[["self"]],["u32"]]],[11,"pixels","","",145,N],[11,"clone","","",37,[[["self"]],["coloritem"]]],[11,"new","","",37,[[["u32"],["u16"],["u16"],["u16"],["u8"]],["coloritem"]]],[11,"pixel","","",37,[[["self"]],["u32"]]],[11,"red","","",37,[[["self"]],["u16"]]],[11,"green","","",37,[[["self"]],["u16"]]],[11,"blue","","",37,[[["self"]],["u16"]]],[11,"flags","","",37,[[["self"]],["u8"]]],[11,"next","","",146,[[["self"]],["option",["coloritem"]]]],[11,"clone","","",38,[[["self"]],["rgb"]]],[11,"new","","",38,[[["u16"],["u16"],["u16"]],["rgb"]]],[11,"red","","",38,[[["self"]],["u16"]]],[11,"green","","",38,[[["self"]],["u16"]]],[11,"blue","","",38,[[["self"]],["u16"]]],[11,"next","","",147,[[["self"]],["option",["rgb"]]]],[11,"get_reply","","",148,[[["self"]],["result",["querycolorsreply","genericerror"]]]],[11,"colors_len","","",149,[[["self"]],["u16"]]],[11,"colors","","",149,[[["self"]],["rgbiterator"]]],[11,"get_reply","","",150,[[["self"]],["result",["lookupcolorreply","genericerror"]]]],[11,"exact_red","","",151,[[["self"]],["u16"]]],[11,"exact_green","","",151,[[["self"]],["u16"]]],[11,"exact_blue","","",151,[[["self"]],["u16"]]],[11,"visual_red","","",151,[[["self"]],["u16"]]],[11,"visual_green","","",151,[[["self"]],["u16"]]],[11,"visual_blue","","",151,[[["self"]],["u16"]]],[11,"get_reply","","",152,[[["self"]],["result",["querybestsizereply","genericerror"]]]],[11,"width","","",153,[[["self"]],["u16"]]],[11,"height","","",153,[[["self"]],["u16"]]],[11,"get_reply","","",154,[[["self"]],["result",["queryextensionreply","genericerror"]]]],[11,"present","","",155,[[["self"]],["bool"]]],[11,"major_opcode","","",155,[[["self"]],["u8"]]],[11,"first_event","","",155,[[["self"]],["u8"]]],[11,"first_error","","",155,[[["self"]],["u8"]]],[11,"get_reply","","",156,[[["self"]],["result",["listextensionsreply","genericerror"]]]],[11,"names_len","","",157,[[["self"]],["u8"]]],[11,"names","","",157,[[["self"]],["striterator"]]],[11,"get_reply","","",158,[[["self"]],["result",["getkeyboardmappingreply","genericerror"]]]],[11,"keysyms_per_keycode","","",159,[[["self"]],["u8"]]],[11,"keysyms","","",159,N],[11,"get_reply","","",160,[[["self"]],["result",["getkeyboardcontrolreply","genericerror"]]]],[11,"global_auto_repeat","","",161,[[["self"]],["u8"]]],[11,"led_mask","","",161,[[["self"]],["u32"]]],[11,"key_click_percent","","",161,[[["self"]],["u8"]]],[11,"bell_percent","","",161,[[["self"]],["u8"]]],[11,"bell_pitch","","",161,[[["self"]],["u16"]]],[11,"bell_duration","","",161,[[["self"]],["u16"]]],[11,"auto_repeats","","",161,N],[11,"get_reply","","",162,[[["self"]],["result",["getpointercontrolreply","genericerror"]]]],[11,"acceleration_numerator","","",163,[[["self"]],["u16"]]],[11,"acceleration_denominator","","",163,[[["self"]],["u16"]]],[11,"threshold","","",163,[[["self"]],["u16"]]],[11,"get_reply","","",164,[[["self"]],["result",["getscreensaverreply","genericerror"]]]],[11,"timeout","","",165,[[["self"]],["u16"]]],[11,"interval","","",165,[[["self"]],["u16"]]],[11,"prefer_blanking","","",165,[[["self"]],["u8"]]],[11,"allow_exposures","","",165,[[["self"]],["u8"]]],[11,"family","","",166,[[["self"]],["u8"]]],[11,"address_len","","",166,[[["self"]],["u16"]]],[11,"address","","",166,N],[11,"next","","",167,[[["self"]],["option",["host"]]]],[11,"get_reply","","",168,[[["self"]],["result",["listhostsreply","genericerror"]]]],[11,"mode","","",169,[[["self"]],["u8"]]],[11,"hosts_len","","",169,[[["self"]],["u16"]]],[11,"hosts","","",169,[[["self"]],["hostiterator"]]],[11,"get_reply","","",170,[[["self"]],["result",["setpointermappingreply","genericerror"]]]],[11,"status","","",171,[[["self"]],["u8"]]],[11,"get_reply","","",172,[[["self"]],["result",["getpointermappingreply","genericerror"]]]],[11,"map_len","","",173,[[["self"]],["u8"]]],[11,"map","","",173,N],[11,"get_reply","","",174,[[["self"]],["result",["setmodifiermappingreply","genericerror"]]]],[11,"status","","",175,[[["self"]],["u8"]]],[11,"get_reply","","",176,[[["self"]],["result",["getmodifiermappingreply","genericerror"]]]],[11,"keycodes_per_modifier","","",177,[[["self"]],["u8"]]],[11,"keycodes","","",177,N],[0,"big_requests","xcb","",N,N],[5,"id","xcb::big_requests","",N,[[],["extension"]]],[5,"enable","","",N,[[["connection"]],["enablecookie"]]],[5,"enable_unchecked","","",N,[[["connection"]],["enablecookie"]]],[6,"EnableCookie","","",N,N],[6,"EnableReply","","",N,N],[17,"MAJOR_VERSION","","",N,N],[17,"MINOR_VERSION","","",N,N],[17,"ENABLE","","",N,N],[11,"get_reply","","",178,[[["self"]],["result",["enablereply","genericerror"]]]],[11,"maximum_request_length","","",179,[[["self"]],["u32"]]],[0,"xc_misc","xcb","",N,N],[5,"id","xcb::xc_misc","",N,[[],["extension"]]],[5,"get_version","","",N,[[["connection"],["u16"],["u16"]],["getversioncookie"]]],[5,"get_version_unchecked","","",N,[[["connection"],["u16"],["u16"]],["getversioncookie"]]],[5,"get_xid_range","","",N,[[["connection"]],["getxidrangecookie"]]],[5,"get_xid_range_unchecked","","",N,[[["connection"]],["getxidrangecookie"]]],[5,"get_xid_list","","",N,[[["connection"],["u32"]],["getxidlistcookie"]]],[5,"get_xid_list_unchecked","","",N,[[["connection"],["u32"]],["getxidlistcookie"]]],[6,"GetVersionCookie","","",N,N],[6,"GetVersionReply","","",N,N],[6,"GetXidRangeCookie","","",N,N],[6,"GetXidRangeReply","","",N,N],[6,"GetXidListCookie","","",N,N],[6,"GetXidListReply","","",N,N],[17,"MAJOR_VERSION","","",N,N],[17,"MINOR_VERSION","","",N,N],[17,"GET_VERSION","","",N,N],[17,"GET_XID_RANGE","","",N,N],[17,"GET_XID_LIST","","",N,N],[11,"get_reply","","",180,[[["self"]],["result",["getversionreply","genericerror"]]]],[11,"server_major_version","","",181,[[["self"]],["u16"]]],[11,"server_minor_version","","",181,[[["self"]],["u16"]]],[11,"get_reply","","",182,[[["self"]],["result",["getxidrangereply","genericerror"]]]],[11,"start_id","","",183,[[["self"]],["u32"]]],[11,"count","","",183,[[["self"]],["u32"]]],[11,"get_reply","","",184,[[["self"]],["result",["getxidlistreply","genericerror"]]]],[11,"ids_len","","",185,[[["self"]],["u32"]]],[11,"ids","","",185,N],[0,"ffi","xcb","",N,N],[0,"base","xcb::ffi","",N,N],[3,"xcb_generic_iterator_t","xcb::ffi::base","Generic iterator",N,N],[12,"data","","",186,N],[12,"rem","","",186,N],[12,"index","","",186,N],[3,"xcb_generic_reply_t","","Generic reply",N,N],[12,"response_type","","",187,N],[12,"sequence","","",187,N],[12,"length","","",187,N],[3,"xcb_generic_event_t","","Generic event",N,N],[12,"response_type","","",188,N],[12,"pad0","","",188,N],[12,"sequence","","",188,N],[12,"pad","","",188,N],[12,"full_sequence","","",188,N],[3,"xcb_ge_event_t","","GE event",N,N],[12,"response_type","","",189,N],[12,"sequence","","",189,N],[12,"length","","",189,N],[12,"event_type","","",189,N],[12,"full_sequence","","",189,N],[3,"xcb_generic_error_t","","Generic error",N,N],[12,"response_type","","",190,N],[12,"error_code","","",190,N],[12,"sequence","","",190,N],[12,"resource_id","","",190,N],[12,"minor_code","","",190,N],[12,"major_code","","",190,N],[12,"full_sequence","","",190,N],[3,"xcb_void_cookie_t","","Generic cookie",N,N],[12,"sequence","","sequence number",191,N],[3,"xcb_auth_info_t","","Container for authorization information. A container for authorization information to be sent to the X server",N,N],[12,"namelen","","length of the string name (as returned by strlen)",192,N],[12,"name","","String containing the authentication protocol name, such as \"MIT-MAGIC-COOKIE-1\" or \"XDM-AUTHORIZATION-1\".",192,N],[12,"datalen","","length of the data member",192,N],[12,"data","","data interpreted in a protocol specific manner",192,N],[4,"xcb_connection_t","","XCB connection structure An opaque structure that contain all data that XCB needs to communicate with an X server.",N,N],[4,"xcb_extension_t","","Opaque structure used as key for xcb_get_extension_data_t",N,N],[4,"xcb_special_event_t","","",N,N],[5,"xcb_flush","","Forces any buffered output to be written to the server. Blocks until the write is complete.",N,N],[5,"xcb_get_maximum_request_length","","Returns the maximum request length that this server accepts.",N,N],[5,"xcb_prefetch_maximum_request_length","","Prefetch the maximum request length without blocking.",N,N],[5,"xcb_wait_for_event","","Returns the next event or error from the server.",N,N],[5,"xcb_poll_for_event","","Returns the next event or error from the server.",N,N],[5,"xcb_poll_for_queued_event","","Returns the next event without reading from the connection.",N,N],[5,"xcb_poll_for_special_event","","Returns the next event from a special queue",N,N],[5,"xcb_wait_for_special_event","","Returns the next event from a special queue, blocking until one arrives",N,N],[5,"xcb_register_for_special_xge","","Listen for a special event",N,N],[5,"xcb_unregister_for_special_event","","Stop listening for a special event",N,N],[5,"xcb_request_check","","Return the error for a request, or NULL if none can ever arrive.",N,N],[5,"xcb_discard_reply","","Discards the reply for a request.",N,N],[5,"xcb_discard_reply64","","Discards the reply for a request, given by a 64bit sequence number",N,N],[5,"xcb_get_extension_data","","Caches reply information from QueryExtension requests.",N,N],[5,"xcb_prefetch_extension_data","","Prefetch of extension data into the extension cache",N,N],[5,"xcb_get_setup","","Access the data returned by the server.",N,N],[5,"xcb_get_file_descriptor","","Access the file descriptor of the connection.",N,N],[5,"xcb_connection_has_error","","Test whether the connection has shut down due to a fatal error.",N,N],[5,"xcb_connect_to_fd","","Connects to the X server.",N,N],[5,"xcb_disconnect","","Closes the connection.",N,N],[5,"xcb_parse_display","","Parses a display string name in the form documented by X(7x). name: The name of the display. host: A pointer to a malloc'd copy of the hostname. display: A pointer to the display number. screen: A pointer to the screen number.",N,N],[5,"xcb_connect","","Connects to the X server. displayname: The name of the display. screenp: A pointer to a preferred screen number. Returns A newly allocated xcb_connection_t structure.",N,N],[5,"xcb_connect_to_display_with_auth_info","","Connects to the X server, using an authorization information. display: The name of the display. auth: The authorization information. screen: A pointer to a preferred screen number. Returns A newly allocated xcb_connection_t structure.",N,N],[5,"xcb_generate_id","","Allocates an XID for a new object. Returns A newly allocated XID.",N,N],[17,"XCB_CONN_ERROR","","xcb connection errors because of socket, pipe and other stream errors.",N,N],[17,"XCB_CONN_CLOSED_EXT_NOTSUPPORTED","","xcb connection shutdown because of extension not supported",N,N],[17,"XCB_CONN_CLOSED_MEM_INSUFFICIENT","","malloc(), calloc() and realloc() error upon failure, for eg ENOMEM",N,N],[17,"XCB_CONN_CLOSED_REQ_LEN_EXCEED","","Connection closed, exceeding request length that server accepts.",N,N],[17,"XCB_CONN_CLOSED_PARSE_ERR","","Connection closed, error during parsing display string.",N,N],[17,"XCB_CONN_CLOSED_INVALID_SCREEN","","Connection closed because the server does not have a screen matching the display.",N,N],[17,"XCB_CONN_CLOSED_FDPASSING_FAILED","","Connection closed because some FD passing operation failed",N,N],[17,"XCB_NONE","","XCB_NONE is the universal null resource or null atom parameter value for many core X requests",N,N],[17,"XCB_COPY_FROM_PARENT","","XCB_COPY_FROM_PARENT can be used for many xcb_create_window parameters",N,N],[17,"XCB_CURRENT_TIME","","XCB_CURRENT_TIME can be used in most requests that take an xcb_timestamp_t",N,N],[17,"XCB_NO_SYMBOL","","XCB_NO_SYMBOL fills in unused entries in xcb_keysym_t tables",N,N],[11,"clone","","",187,[[["self"]],["xcb_generic_reply_t"]]],[11,"clone","","",188,[[["self"]],["xcb_generic_event_t"]]],[11,"clone","","",189,[[["self"]],["xcb_ge_event_t"]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"clone","","",190,[[["self"]],["xcb_generic_error_t"]]],[11,"clone","","",191,[[["self"]],["xcb_void_cookie_t"]]],[0,"xproto","xcb::ffi","",N,N],[3,"xcb_char2b_t","xcb::ffi::xproto","",N,N],[12,"byte1","","",193,N],[12,"byte2","","",193,N],[3,"xcb_char2b_iterator_t","","",N,N],[12,"data","","",194,N],[12,"rem","","",194,N],[12,"index","","",194,N],[3,"xcb_window_iterator_t","","",N,N],[12,"data","","",195,N],[12,"rem","","",195,N],[12,"index","","",195,N],[3,"xcb_pixmap_iterator_t","","",N,N],[12,"data","","",196,N],[12,"rem","","",196,N],[12,"index","","",196,N],[3,"xcb_cursor_iterator_t","","",N,N],[12,"data","","",197,N],[12,"rem","","",197,N],[12,"index","","",197,N],[3,"xcb_font_iterator_t","","",N,N],[12,"data","","",198,N],[12,"rem","","",198,N],[12,"index","","",198,N],[3,"xcb_gcontext_iterator_t","","",N,N],[12,"data","","",199,N],[12,"rem","","",199,N],[12,"index","","",199,N],[3,"xcb_colormap_iterator_t","","",N,N],[12,"data","","",200,N],[12,"rem","","",200,N],[12,"index","","",200,N],[3,"xcb_atom_iterator_t","","",N,N],[12,"data","","",201,N],[12,"rem","","",201,N],[12,"index","","",201,N],[3,"xcb_drawable_iterator_t","","",N,N],[12,"data","","",202,N],[12,"rem","","",202,N],[12,"index","","",202,N],[3,"xcb_fontable_iterator_t","","",N,N],[12,"data","","",203,N],[12,"rem","","",203,N],[12,"index","","",203,N],[3,"xcb_visualid_iterator_t","","",N,N],[12,"data","","",204,N],[12,"rem","","",204,N],[12,"index","","",204,N],[3,"xcb_timestamp_iterator_t","","",N,N],[12,"data","","",205,N],[12,"rem","","",205,N],[12,"index","","",205,N],[3,"xcb_keysym_iterator_t","","",N,N],[12,"data","","",206,N],[12,"rem","","",206,N],[12,"index","","",206,N],[3,"xcb_keycode_iterator_t","","",N,N],[12,"data","","",207,N],[12,"rem","","",207,N],[12,"index","","",207,N],[3,"xcb_button_iterator_t","","",N,N],[12,"data","","",208,N],[12,"rem","","",208,N],[12,"index","","",208,N],[3,"xcb_point_t","","",N,N],[12,"x","","",209,N],[12,"y","","",209,N],[3,"xcb_point_iterator_t","","",N,N],[12,"data","","",210,N],[12,"rem","","",210,N],[12,"index","","",210,N],[3,"xcb_rectangle_t","","",N,N],[12,"x","","",211,N],[12,"y","","",211,N],[12,"width","","",211,N],[12,"height","","",211,N],[3,"xcb_rectangle_iterator_t","","",N,N],[12,"data","","",212,N],[12,"rem","","",212,N],[12,"index","","",212,N],[3,"xcb_arc_t","","",N,N],[12,"x","","",213,N],[12,"y","","",213,N],[12,"width","","",213,N],[12,"height","","",213,N],[12,"angle1","","",213,N],[12,"angle2","","",213,N],[3,"xcb_arc_iterator_t","","",N,N],[12,"data","","",214,N],[12,"rem","","",214,N],[12,"index","","",214,N],[3,"xcb_format_t","","",N,N],[12,"depth","","",215,N],[12,"bits_per_pixel","","",215,N],[12,"scanline_pad","","",215,N],[12,"pad0","","",215,N],[3,"xcb_format_iterator_t","","",N,N],[12,"data","","",216,N],[12,"rem","","",216,N],[12,"index","","",216,N],[3,"xcb_visualtype_t","","",N,N],[12,"visual_id","","",217,N],[12,"class","","",217,N],[12,"bits_per_rgb_value","","",217,N],[12,"colormap_entries","","",217,N],[12,"red_mask","","",217,N],[12,"green_mask","","",217,N],[12,"blue_mask","","",217,N],[12,"pad0","","",217,N],[3,"xcb_visualtype_iterator_t","","",N,N],[12,"data","","",218,N],[12,"rem","","",218,N],[12,"index","","",218,N],[3,"xcb_depth_t","","",N,N],[12,"depth","","",219,N],[12,"pad0","","",219,N],[12,"visuals_len","","",219,N],[12,"pad1","","",219,N],[3,"xcb_depth_iterator_t","","",N,N],[12,"data","","",220,N],[12,"rem","","",220,N],[12,"index","","",220,N],[3,"xcb_screen_t","","",N,N],[12,"root","","",221,N],[12,"default_colormap","","",221,N],[12,"white_pixel","","",221,N],[12,"black_pixel","","",221,N],[12,"current_input_masks","","",221,N],[12,"width_in_pixels","","",221,N],[12,"height_in_pixels","","",221,N],[12,"width_in_millimeters","","",221,N],[12,"height_in_millimeters","","",221,N],[12,"min_installed_maps","","",221,N],[12,"max_installed_maps","","",221,N],[12,"root_visual","","",221,N],[12,"backing_stores","","",221,N],[12,"save_unders","","",221,N],[12,"root_depth","","",221,N],[12,"allowed_depths_len","","",221,N],[3,"xcb_screen_iterator_t","","",N,N],[12,"data","","",222,N],[12,"rem","","",222,N],[12,"index","","",222,N],[3,"xcb_setup_request_t","","",N,N],[12,"byte_order","","",223,N],[12,"pad0","","",223,N],[12,"protocol_major_version","","",223,N],[12,"protocol_minor_version","","",223,N],[12,"authorization_protocol_name_len","","",223,N],[12,"authorization_protocol_data_len","","",223,N],[12,"pad1","","",223,N],[3,"xcb_setup_request_iterator_t","","",N,N],[12,"data","","",224,N],[12,"rem","","",224,N],[12,"index","","",224,N],[3,"xcb_setup_failed_t","","",N,N],[12,"status","","",225,N],[12,"reason_len","","",225,N],[12,"protocol_major_version","","",225,N],[12,"protocol_minor_version","","",225,N],[12,"length","","",225,N],[3,"xcb_setup_failed_iterator_t","","",N,N],[12,"data","","",226,N],[12,"rem","","",226,N],[12,"index","","",226,N],[3,"xcb_setup_authenticate_t","","",N,N],[12,"status","","",227,N],[12,"pad0","","",227,N],[12,"length","","",227,N],[3,"xcb_setup_authenticate_iterator_t","","",N,N],[12,"data","","",228,N],[12,"rem","","",228,N],[12,"index","","",228,N],[3,"xcb_setup_t","","",N,N],[12,"status","","",229,N],[12,"pad0","","",229,N],[12,"protocol_major_version","","",229,N],[12,"protocol_minor_version","","",229,N],[12,"length","","",229,N],[12,"release_number","","",229,N],[12,"resource_id_base","","",229,N],[12,"resource_id_mask","","",229,N],[12,"motion_buffer_size","","",229,N],[12,"vendor_len","","",229,N],[12,"maximum_request_length","","",229,N],[12,"roots_len","","",229,N],[12,"pixmap_formats_len","","",229,N],[12,"image_byte_order","","",229,N],[12,"bitmap_format_bit_order","","",229,N],[12,"bitmap_format_scanline_unit","","",229,N],[12,"bitmap_format_scanline_pad","","",229,N],[12,"min_keycode","","",229,N],[12,"max_keycode","","",229,N],[12,"pad1","","",229,N],[3,"xcb_setup_iterator_t","","",N,N],[12,"data","","",230,N],[12,"rem","","",230,N],[12,"index","","",230,N],[3,"xcb_key_press_event_t","","a key was pressed/released",N,N],[12,"response_type","","",231,N],[12,"detail","","The keycode (a number representing a physical key on the keyboard) of the key which was pressed.",231,N],[12,"sequence","","",231,N],[12,"time","","Time when the event was generated (in milliseconds).",231,N],[12,"root","","The root window of `child`.",231,N],[12,"event","","",231,N],[12,"child","","",231,N],[12,"root_x","","The X coordinate of the pointer relative to the `root` window at the time of the event.",231,N],[12,"root_y","","The Y coordinate of the pointer relative to the `root` window at the time of the event.",231,N],[12,"event_x","","If `same_screen` is true, this is the X coordinate relative to the `event` window's origin. Otherwise, `event_x` will be set to zero.",231,N],[12,"event_y","","If `same_screen` is true, this is the Y coordinate relative to the `event` window's origin. Otherwise, `event_y` will be set to zero.",231,N],[12,"state","","The logical state of the pointer buttons and modifier keys just prior to the event.",231,N],[12,"same_screen","","Whether the `event` window is on the same screen as the `root` window.",231,N],[12,"pad0","","",231,N],[3,"xcb_button_press_event_t","","a mouse button was pressed/released",N,N],[12,"response_type","","",232,N],[12,"detail","","The keycode (a number representing a physical key on the keyboard) of the key which was pressed.",232,N],[12,"sequence","","",232,N],[12,"time","","Time when the event was generated (in milliseconds).",232,N],[12,"root","","The root window of `child`.",232,N],[12,"event","","",232,N],[12,"child","","",232,N],[12,"root_x","","The X coordinate of the pointer relative to the `root` window at the time of the event.",232,N],[12,"root_y","","The Y coordinate of the pointer relative to the `root` window at the time of the event.",232,N],[12,"event_x","","If `same_screen` is true, this is the X coordinate relative to the `event` window's origin. Otherwise, `event_x` will be set to zero.",232,N],[12,"event_y","","If `same_screen` is true, this is the Y coordinate relative to the `event` window's origin. Otherwise, `event_y` will be set to zero.",232,N],[12,"state","","The logical state of the pointer buttons and modifier keys just prior to the event.",232,N],[12,"same_screen","","Whether the `event` window is on the same screen as the `root` window.",232,N],[12,"pad0","","",232,N],[3,"xcb_motion_notify_event_t","","a key was pressed",N,N],[12,"response_type","","",233,N],[12,"detail","","The keycode (a number representing a physical key on the keyboard) of the key which was pressed.",233,N],[12,"sequence","","",233,N],[12,"time","","Time when the event was generated (in milliseconds).",233,N],[12,"root","","The root window of `child`.",233,N],[12,"event","","",233,N],[12,"child","","",233,N],[12,"root_x","","The X coordinate of the pointer relative to the `root` window at the time of the event.",233,N],[12,"root_y","","The Y coordinate of the pointer relative to the `root` window at the time of the event.",233,N],[12,"event_x","","If `same_screen` is true, this is the X coordinate relative to the `event` window's origin. Otherwise, `event_x` will be set to zero.",233,N],[12,"event_y","","If `same_screen` is true, this is the Y coordinate relative to the `event` window's origin. Otherwise, `event_y` will be set to zero.",233,N],[12,"state","","The logical state of the pointer buttons and modifier keys just prior to the event.",233,N],[12,"same_screen","","Whether the `event` window is on the same screen as the `root` window.",233,N],[12,"pad0","","",233,N],[3,"xcb_enter_notify_event_t","","the pointer is in a different window",N,N],[12,"response_type","","",234,N],[12,"detail","","",234,N],[12,"sequence","","",234,N],[12,"time","","",234,N],[12,"root","","The root window for the final cursor position.",234,N],[12,"event","","The window on which the event was generated.",234,N],[12,"child","","If the `event` window has subwindows and the final pointer position is in one of them, then `child` is set to that subwindow, `XCB_WINDOW_NONE` otherwise.",234,N],[12,"root_x","","The pointer X coordinate relative to `root`'s origin at the time of the event.",234,N],[12,"root_y","","The pointer Y coordinate relative to `root`'s origin at the time of the event.",234,N],[12,"event_x","","If `event` is on the same screen as `root`, this is the pointer X coordinate relative to the event window's origin.",234,N],[12,"event_y","","If `event` is on the same screen as `root`, this is the pointer Y coordinate relative to the event window's origin.",234,N],[12,"state","","",234,N],[12,"mode","","",234,N],[12,"same_screen_focus","","",234,N],[3,"xcb_focus_in_event_t","","NOT YET DOCUMENTED",N,N],[12,"response_type","","",235,N],[12,"detail","","",235,N],[12,"sequence","","",235,N],[12,"event","","The window on which the focus event was generated. This is the window used by the X server to report the event.",235,N],[12,"mode","","",235,N],[12,"pad0","","",235,N],[3,"xcb_keymap_notify_event_t","","",N,N],[12,"response_type","","",236,N],[12,"keys","","",236,N],[3,"xcb_expose_event_t","","NOT YET DOCUMENTED",N,N],[12,"response_type","","",237,N],[12,"pad0","","",237,N],[12,"sequence","","",237,N],[12,"window","","The exposed (damaged) window.",237,N],[12,"x","","The X coordinate of the left-upper corner of the exposed rectangle, relative to the `window`'s origin.",237,N],[12,"y","","The Y coordinate of the left-upper corner of the exposed rectangle, relative to the `window`'s origin.",237,N],[12,"width","","The width of the exposed rectangle.",237,N],[12,"height","","The height of the exposed rectangle.",237,N],[12,"count","","The amount of `Expose` events following this one. Simple applications that do not want to optimize redisplay by distinguishing between subareas of its window can just ignore all Expose events with nonzero counts and perform full redisplays on events with zero counts.",237,N],[12,"pad1","","",237,N],[3,"xcb_graphics_exposure_event_t","","",N,N],[12,"response_type","","",238,N],[12,"pad0","","",238,N],[12,"sequence","","",238,N],[12,"drawable","","",238,N],[12,"x","","",238,N],[12,"y","","",238,N],[12,"width","","",238,N],[12,"height","","",238,N],[12,"minor_opcode","","",238,N],[12,"count","","",238,N],[12,"major_opcode","","",238,N],[12,"pad1","","",238,N],[3,"xcb_no_exposure_event_t","","",N,N],[12,"response_type","","",239,N],[12,"pad0","","",239,N],[12,"sequence","","",239,N],[12,"drawable","","",239,N],[12,"minor_opcode","","",239,N],[12,"major_opcode","","",239,N],[12,"pad1","","",239,N],[3,"xcb_visibility_notify_event_t","","",N,N],[12,"response_type","","",240,N],[12,"pad0","","",240,N],[12,"sequence","","",240,N],[12,"window","","",240,N],[12,"state","","",240,N],[12,"pad1","","",240,N],[3,"xcb_create_notify_event_t","","",N,N],[12,"response_type","","",241,N],[12,"pad0","","",241,N],[12,"sequence","","",241,N],[12,"parent","","",241,N],[12,"window","","",241,N],[12,"x","","",241,N],[12,"y","","",241,N],[12,"width","","",241,N],[12,"height","","",241,N],[12,"border_width","","",241,N],[12,"override_redirect","","",241,N],[12,"pad1","","",241,N],[3,"xcb_destroy_notify_event_t","","a window is destroyed",N,N],[12,"response_type","","",242,N],[12,"pad0","","",242,N],[12,"sequence","","",242,N],[12,"event","","The reconfigured window or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",242,N],[12,"window","","The window that is destroyed.",242,N],[3,"xcb_unmap_notify_event_t","","a window is unmapped",N,N],[12,"response_type","","",243,N],[12,"pad0","","",243,N],[12,"sequence","","",243,N],[12,"event","","The reconfigured window or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",243,N],[12,"window","","The window that was unmapped.",243,N],[12,"from_configure","","Set to 1 if the event was generated as a result of a resizing of the window's parent when `window` had a win_gravity of `UnmapGravity`.",243,N],[12,"pad1","","",243,N],[3,"xcb_map_notify_event_t","","a window was mapped",N,N],[12,"response_type","","",244,N],[12,"pad0","","",244,N],[12,"sequence","","",244,N],[12,"event","","The window which was mapped or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",244,N],[12,"window","","The window that was mapped.",244,N],[12,"override_redirect","","Window managers should ignore this window if `override_redirect` is 1.",244,N],[12,"pad1","","",244,N],[3,"xcb_map_request_event_t","","window wants to be mapped",N,N],[12,"response_type","","",245,N],[12,"pad0","","",245,N],[12,"sequence","","",245,N],[12,"parent","","The parent of `window`.",245,N],[12,"window","","The window to be mapped.",245,N],[3,"xcb_reparent_notify_event_t","","",N,N],[12,"response_type","","",246,N],[12,"pad0","","",246,N],[12,"sequence","","",246,N],[12,"event","","",246,N],[12,"window","","",246,N],[12,"parent","","",246,N],[12,"x","","",246,N],[12,"y","","",246,N],[12,"override_redirect","","",246,N],[12,"pad1","","",246,N],[3,"xcb_configure_notify_event_t","","NOT YET DOCUMENTED",N,N],[12,"response_type","","",247,N],[12,"pad0","","",247,N],[12,"sequence","","",247,N],[12,"event","","The reconfigured window or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",247,N],[12,"window","","The window whose size, position, border, and/or stacking order was changed.",247,N],[12,"above_sibling","","If `XCB_NONE`, the `window` is on the bottom of the stack with respect to sibling windows. However, if set to a sibling window, the `window` is placed on top of this sibling window.",247,N],[12,"x","","The X coordinate of the upper-left outside corner of `window`, relative to the parent window's origin.",247,N],[12,"y","","The Y coordinate of the upper-left outside corner of `window`, relative to the parent window's origin.",247,N],[12,"width","","The inside width of `window`, not including the border.",247,N],[12,"height","","The inside height of `window`, not including the border.",247,N],[12,"border_width","","The border width of `window`.",247,N],[12,"override_redirect","","Window managers should ignore this window if `override_redirect` is 1.",247,N],[12,"pad1","","",247,N],[3,"xcb_configure_request_event_t","","",N,N],[12,"response_type","","",248,N],[12,"stack_mode","","",248,N],[12,"sequence","","",248,N],[12,"parent","","",248,N],[12,"window","","",248,N],[12,"sibling","","",248,N],[12,"x","","",248,N],[12,"y","","",248,N],[12,"width","","",248,N],[12,"height","","",248,N],[12,"border_width","","",248,N],[12,"value_mask","","",248,N],[3,"xcb_gravity_notify_event_t","","",N,N],[12,"response_type","","",249,N],[12,"pad0","","",249,N],[12,"sequence","","",249,N],[12,"event","","",249,N],[12,"window","","",249,N],[12,"x","","",249,N],[12,"y","","",249,N],[3,"xcb_resize_request_event_t","","",N,N],[12,"response_type","","",250,N],[12,"pad0","","",250,N],[12,"sequence","","",250,N],[12,"window","","",250,N],[12,"width","","",250,N],[12,"height","","",250,N],[3,"xcb_circulate_notify_event_t","","NOT YET DOCUMENTED",N,N],[12,"response_type","","",251,N],[12,"pad0","","",251,N],[12,"sequence","","",251,N],[12,"event","","Either the restacked window or its parent, depending on whether `StructureNotify` or `SubstructureNotify` was selected.",251,N],[12,"window","","The restacked window.",251,N],[12,"pad1","","",251,N],[12,"place","","",251,N],[12,"pad2","","",251,N],[3,"xcb_property_notify_event_t","","a window property changed",N,N],[12,"response_type","","",252,N],[12,"pad0","","",252,N],[12,"sequence","","",252,N],[12,"window","","The window whose associated property was changed.",252,N],[12,"atom","","The property's atom, to indicate which property was changed.",252,N],[12,"time","","A timestamp of the server time when the property was changed.",252,N],[12,"state","","",252,N],[12,"pad1","","",252,N],[3,"xcb_selection_clear_event_t","","",N,N],[12,"response_type","","",253,N],[12,"pad0","","",253,N],[12,"sequence","","",253,N],[12,"time","","",253,N],[12,"owner","","",253,N],[12,"selection","","",253,N],[3,"xcb_selection_request_event_t","","",N,N],[12,"response_type","","",254,N],[12,"pad0","","",254,N],[12,"sequence","","",254,N],[12,"time","","",254,N],[12,"owner","","",254,N],[12,"requestor","","",254,N],[12,"selection","","",254,N],[12,"target","","",254,N],[12,"property","","",254,N],[3,"xcb_selection_notify_event_t","","",N,N],[12,"response_type","","",255,N],[12,"pad0","","",255,N],[12,"sequence","","",255,N],[12,"time","","",255,N],[12,"requestor","","",255,N],[12,"selection","","",255,N],[12,"target","","",255,N],[12,"property","","",255,N],[3,"xcb_colormap_notify_event_t","","the colormap for some window changed",N,N],[12,"response_type","","",256,N],[12,"pad0","","",256,N],[12,"sequence","","",256,N],[12,"window","","The window whose associated colormap is changed, installed or uninstalled.",256,N],[12,"colormap","","The colormap which is changed, installed or uninstalled. This is `XCB_NONE` when the colormap is changed by a call to `FreeColormap`.",256,N],[12,"new_","","",256,N],[12,"state","","",256,N],[12,"pad1","","",256,N],[3,"xcb_client_message_data_t","","",N,N],[12,"data","","",257,N],[3,"xcb_client_message_data_iterator_t","","",N,N],[12,"data","","",258,N],[12,"rem","","",258,N],[12,"index","","",258,N],[3,"xcb_client_message_event_t","","NOT YET DOCUMENTED",N,N],[12,"response_type","","",259,N],[12,"format","","Specifies how to interpret `data`. Can be either 8, 16 or 32.",259,N],[12,"sequence","","",259,N],[12,"window","","",259,N],[12,"type_","","An atom which indicates how the data should be interpreted by the receiving client.",259,N],[12,"data","","The data itself (20 bytes max).",259,N],[3,"xcb_mapping_notify_event_t","","keyboard mapping changed",N,N],[12,"response_type","","",260,N],[12,"pad0","","",260,N],[12,"sequence","","",260,N],[12,"request","","",260,N],[12,"first_keycode","","The first number in the range of the altered mapping.",260,N],[12,"count","","The number of keycodes altered.",260,N],[12,"pad1","","",260,N],[3,"xcb_ge_generic_event_t","","generic event (with length)",N,N],[12,"response_type","","",261,N],[12,"extension","","The major opcode of the extension creating this event",261,N],[12,"sequence","","",261,N],[12,"length","","The amount (in 4-byte units) of data beyond 32 bytes",261,N],[12,"event_type","","",261,N],[12,"pad0","","",261,N],[12,"full_sequence","","",261,N],[3,"xcb_request_error_t","","",N,N],[12,"response_type","","",262,N],[12,"error_code","","",262,N],[12,"sequence","","",262,N],[12,"bad_value","","",262,N],[12,"minor_opcode","","",262,N],[12,"major_opcode","","",262,N],[12,"pad0","","",262,N],[3,"xcb_value_error_t","","",N,N],[12,"response_type","","",263,N],[12,"error_code","","",263,N],[12,"sequence","","",263,N],[12,"bad_value","","",263,N],[12,"minor_opcode","","",263,N],[12,"major_opcode","","",263,N],[12,"pad0","","",263,N],[3,"xcb_create_window_request_t","","Creates a window",N,N],[12,"major_opcode","","",264,N],[12,"depth","","Specifies the new window's depth (TODO: what unit?).",264,N],[12,"length","","",264,N],[12,"wid","","The ID with which you will refer to the new window, created by `xcb_generate_id`.",264,N],[12,"parent","","The parent window of the new window.",264,N],[12,"x","","The X coordinate of the new window.",264,N],[12,"y","","The Y coordinate of the new window.",264,N],[12,"width","","The width of the new window.",264,N],[12,"height","","The height of the new window.",264,N],[12,"border_width","","TODO:",264,N],[12,"class","","",264,N],[12,"visual","","Specifies the id for the new window's visual.",264,N],[12,"value_mask","","",264,N],[3,"xcb_change_window_attributes_request_t","","change window attributes",N,N],[12,"major_opcode","","",265,N],[12,"pad0","","",265,N],[12,"length","","",265,N],[12,"window","","The window to change.",265,N],[12,"value_mask","","",265,N],[3,"xcb_get_window_attributes_request_t","","Gets window attributes",N,N],[12,"major_opcode","","",266,N],[12,"pad0","","",266,N],[12,"length","","",266,N],[12,"window","","The window to get the attributes from.",266,N],[3,"xcb_get_window_attributes_cookie_t","","",N,N],[3,"xcb_get_window_attributes_reply_t","","",N,N],[12,"response_type","","",267,N],[12,"backing_store","","",267,N],[12,"sequence","","",267,N],[12,"length","","",267,N],[12,"visual","","The associated visual structure of `window`.",267,N],[12,"class","","",267,N],[12,"bit_gravity","","",267,N],[12,"win_gravity","","",267,N],[12,"backing_planes","","Planes to be preserved if possible.",267,N],[12,"backing_pixel","","Value to be used when restoring planes.",267,N],[12,"save_under","","Boolean, should bits under be saved?",267,N],[12,"map_is_installed","","",267,N],[12,"map_state","","",267,N],[12,"override_redirect","","Window managers should ignore this window if `override_redirect` is 1.",267,N],[12,"colormap","","Color map to be associated with window.",267,N],[12,"all_event_masks","","Set of events all people have interest in.",267,N],[12,"your_event_mask","","My event mask.",267,N],[12,"do_not_propagate_mask","","Set of events that should not propagate.",267,N],[12,"pad0","","",267,N],[3,"xcb_destroy_window_request_t","","Destroys a window",N,N],[12,"major_opcode","","",268,N],[12,"pad0","","",268,N],[12,"length","","",268,N],[12,"window","","The window to destroy.",268,N],[3,"xcb_destroy_subwindows_request_t","","",N,N],[12,"major_opcode","","",269,N],[12,"pad0","","",269,N],[12,"length","","",269,N],[12,"window","","",269,N],[3,"xcb_change_save_set_request_t","","Changes a client's save set",N,N],[12,"major_opcode","","",270,N],[12,"mode","","Insert to add the specified window to the save set or Delete to delete it from the save set.",270,N],[12,"length","","",270,N],[12,"window","","The window to add or delete to/from your save set.",270,N],[3,"xcb_reparent_window_request_t","","Reparents a window",N,N],[12,"major_opcode","","",271,N],[12,"pad0","","",271,N],[12,"length","","",271,N],[12,"window","","The window to reparent.",271,N],[12,"parent","","The new parent of the window.",271,N],[12,"x","","The X position of the window within its new parent.",271,N],[12,"y","","The Y position of the window within its new parent.",271,N],[3,"xcb_map_window_request_t","","Makes a window visible",N,N],[12,"major_opcode","","",272,N],[12,"pad0","","",272,N],[12,"length","","",272,N],[12,"window","","The window to make visible.",272,N],[3,"xcb_map_subwindows_request_t","","",N,N],[12,"major_opcode","","",273,N],[12,"pad0","","",273,N],[12,"length","","",273,N],[12,"window","","",273,N],[3,"xcb_unmap_window_request_t","","Makes a window invisible",N,N],[12,"major_opcode","","",274,N],[12,"pad0","","",274,N],[12,"length","","",274,N],[12,"window","","The window to make invisible.",274,N],[3,"xcb_unmap_subwindows_request_t","","",N,N],[12,"major_opcode","","",275,N],[12,"pad0","","",275,N],[12,"length","","",275,N],[12,"window","","",275,N],[3,"xcb_configure_window_request_t","","Configures window attributes",N,N],[12,"major_opcode","","",276,N],[12,"pad0","","",276,N],[12,"length","","",276,N],[12,"window","","The window to configure.",276,N],[12,"value_mask","","Bitmask of attributes to change.",276,N],[12,"pad1","","",276,N],[3,"xcb_circulate_window_request_t","","Change window stacking order",N,N],[12,"major_opcode","","",277,N],[12,"direction","","",277,N],[12,"length","","",277,N],[12,"window","","The window to raise/lower (depending on `direction`).",277,N],[3,"xcb_get_geometry_request_t","","Get current window geometry",N,N],[12,"major_opcode","","",278,N],[12,"pad0","","",278,N],[12,"length","","",278,N],[12,"drawable","","The drawable (`Window` or `Pixmap`) of which the geometry will be received.",278,N],[3,"xcb_get_geometry_cookie_t","","",N,N],[3,"xcb_get_geometry_reply_t","","",N,N],[12,"response_type","","",279,N],[12,"depth","","The depth of the drawable (bits per pixel for the object).",279,N],[12,"sequence","","",279,N],[12,"length","","",279,N],[12,"root","","Root window of the screen containing `drawable`.",279,N],[12,"x","","The X coordinate of `drawable`. If `drawable` is a window, the coordinate specifies the upper-left outer corner relative to its parent's origin. If `drawable` is a pixmap, the X coordinate is always 0.",279,N],[12,"y","","The Y coordinate of `drawable`. If `drawable` is a window, the coordinate specifies the upper-left outer corner relative to its parent's origin. If `drawable` is a pixmap, the Y coordinate is always 0.",279,N],[12,"width","","The width of `drawable`.",279,N],[12,"height","","The height of `drawable`.",279,N],[12,"border_width","","The border width (in pixels).",279,N],[12,"pad0","","",279,N],[3,"xcb_query_tree_request_t","","query the window tree",N,N],[12,"major_opcode","","",280,N],[12,"pad0","","",280,N],[12,"length","","",280,N],[12,"window","","The `window` to query.",280,N],[3,"xcb_query_tree_cookie_t","","",N,N],[3,"xcb_query_tree_reply_t","","",N,N],[12,"response_type","","",281,N],[12,"pad0","","",281,N],[12,"sequence","","",281,N],[12,"length","","",281,N],[12,"root","","The root window of `window`.",281,N],[12,"parent","","The parent window of `window`.",281,N],[12,"children_len","","The number of child windows.",281,N],[12,"pad1","","",281,N],[3,"xcb_intern_atom_request_t","","Get atom identifier by name",N,N],[12,"major_opcode","","",282,N],[12,"only_if_exists","","Return a valid atom id only if the atom already exists.",282,N],[12,"length","","",282,N],[12,"name_len","","The length of the following `name`.",282,N],[12,"pad0","","",282,N],[3,"xcb_intern_atom_cookie_t","","",N,N],[3,"xcb_intern_atom_reply_t","","",N,N],[12,"response_type","","",283,N],[12,"pad0","","",283,N],[12,"sequence","","",283,N],[12,"length","","",283,N],[12,"atom","","",283,N],[3,"xcb_get_atom_name_request_t","","",N,N],[12,"major_opcode","","",284,N],[12,"pad0","","",284,N],[12,"length","","",284,N],[12,"atom","","",284,N],[3,"xcb_get_atom_name_cookie_t","","",N,N],[3,"xcb_get_atom_name_reply_t","","",N,N],[12,"response_type","","",285,N],[12,"pad0","","",285,N],[12,"sequence","","",285,N],[12,"length","","",285,N],[12,"name_len","","",285,N],[12,"pad1","","",285,N],[3,"xcb_change_property_request_t","","Changes a window property",N,N],[12,"major_opcode","","",286,N],[12,"mode","","",286,N],[12,"length","","",286,N],[12,"window","","The window whose property you want to change.",286,N],[12,"property","","The property you want to change (an atom).",286,N],[12,"type_","","The type of the property you want to change (an atom).",286,N],[12,"format","","Specifies whether the data should be viewed as a list of 8-bit, 16-bit or 32-bit quantities. Possible values are 8, 16 and 32. This information allows the X server to correctly perform byte-swap operations as necessary.",286,N],[12,"pad0","","",286,N],[12,"data_len","","Specifies the number of elements (see `format`).",286,N],[3,"xcb_delete_property_request_t","","",N,N],[12,"major_opcode","","",287,N],[12,"pad0","","",287,N],[12,"length","","",287,N],[12,"window","","",287,N],[12,"property","","",287,N],[3,"xcb_get_property_request_t","","Gets a window property",N,N],[12,"major_opcode","","",288,N],[12,"delete","","Whether the property should actually be deleted. For deleting a property, the specified `type` has to match the actual property type.",288,N],[12,"length","","",288,N],[12,"window","","The window whose property you want to get.",288,N],[12,"property","","The property you want to get (an atom).",288,N],[12,"type_","","The type of the property you want to get (an atom).",288,N],[12,"long_offset","","Specifies the offset (in 32-bit multiples) in the specified property where the data is to be retrieved.",288,N],[12,"long_length","","Specifies how many 32-bit multiples of data should be retrieved (e.g. if you set `long_length` to 4, you will receive 16 bytes of data).",288,N],[3,"xcb_get_property_cookie_t","","",N,N],[3,"xcb_get_property_reply_t","","",N,N],[12,"response_type","","",289,N],[12,"format","","Specifies whether the data should be viewed as a list of 8-bit, 16-bit, or 32-bit quantities. Possible values are 8, 16, and 32. This information allows the X server to correctly perform byte-swap operations as necessary.",289,N],[12,"sequence","","",289,N],[12,"length","","",289,N],[12,"type_","","The actual type of the property (an atom).",289,N],[12,"bytes_after","","The number of bytes remaining to be read in the property if a partial read was performed.",289,N],[12,"value_len","","The length of value. You should use the corresponding accessor instead of this field.",289,N],[12,"pad0","","",289,N],[3,"xcb_list_properties_request_t","","",N,N],[12,"major_opcode","","",290,N],[12,"pad0","","",290,N],[12,"length","","",290,N],[12,"window","","",290,N],[3,"xcb_list_properties_cookie_t","","",N,N],[3,"xcb_list_properties_reply_t","","",N,N],[12,"response_type","","",291,N],[12,"pad0","","",291,N],[12,"sequence","","",291,N],[12,"length","","",291,N],[12,"atoms_len","","",291,N],[12,"pad1","","",291,N],[3,"xcb_set_selection_owner_request_t","","Sets the owner of a selection",N,N],[12,"major_opcode","","",292,N],[12,"pad0","","",292,N],[12,"length","","",292,N],[12,"owner","","The new owner of the selection.",292,N],[12,"selection","","The selection.",292,N],[12,"time","","Timestamp to avoid race conditions when running X over the network.",292,N],[3,"xcb_get_selection_owner_request_t","","Gets the owner of a selection",N,N],[12,"major_opcode","","",293,N],[12,"pad0","","",293,N],[12,"length","","",293,N],[12,"selection","","The selection.",293,N],[3,"xcb_get_selection_owner_cookie_t","","",N,N],[3,"xcb_get_selection_owner_reply_t","","",N,N],[12,"response_type","","",294,N],[12,"pad0","","",294,N],[12,"sequence","","",294,N],[12,"length","","",294,N],[12,"owner","","The current selection owner window.",294,N],[3,"xcb_convert_selection_request_t","","",N,N],[12,"major_opcode","","",295,N],[12,"pad0","","",295,N],[12,"length","","",295,N],[12,"requestor","","",295,N],[12,"selection","","",295,N],[12,"target","","",295,N],[12,"property","","",295,N],[12,"time","","",295,N],[3,"xcb_send_event_request_t","","send an event",N,N],[12,"major_opcode","","",296,N],[12,"propagate","","If `propagate` is true and no clients have selected any event on `destination`, the destination is replaced with the closest ancestor of `destination` for which some client has selected a type in `event_mask` and for which no intervening window has that type in its do-not-propagate-mask. If no such window exists or if the window is an ancestor of the focus window and `InputFocus` was originally specified as the destination, the event is not sent to any clients. Otherwise, the event is reported to every client selecting on the final destination any of the types specified in `event_mask`.",296,N],[12,"length","","",296,N],[12,"destination","","The window to send this event to. Every client which selects any event within `event_mask` on `destination` will get the event.",296,N],[12,"event_mask","","Event_mask for determining which clients should receive the specified event. See `destination` and `propagate`.",296,N],[12,"event","","The event to send to the specified `destination`.",296,N],[3,"xcb_grab_pointer_request_t","","Grab the pointer",N,N],[12,"major_opcode","","",297,N],[12,"owner_events","","If 1, the `grab_window` will still get the pointer events. If 0, events are not reported to the `grab_window`.",297,N],[12,"length","","",297,N],[12,"grab_window","","Specifies the window on which the pointer should be grabbed.",297,N],[12,"event_mask","","Specifies which pointer events are reported to the client.",297,N],[12,"pointer_mode","","",297,N],[12,"keyboard_mode","","",297,N],[12,"confine_to","","Specifies the window to confine the pointer in (the user will not be able to move the pointer out of that window).",297,N],[12,"cursor","","Specifies the cursor that should be displayed or `XCB_NONE` to not change the cursor.",297,N],[12,"time","","The time argument allows you to avoid certain circumstances that come up if applications take a long time to respond or if there are long network delays. Consider a situation where you have two applications, both of which normally grab the pointer when clicked on. If both applications specify the timestamp from the event, the second application may wake up faster and successfully grab the pointer before the first application. The first application then will get an indication that the other application grabbed the pointer before its request was processed.",297,N],[3,"xcb_grab_pointer_cookie_t","","",N,N],[3,"xcb_grab_pointer_reply_t","","",N,N],[12,"response_type","","",298,N],[12,"status","","",298,N],[12,"sequence","","",298,N],[12,"length","","",298,N],[3,"xcb_ungrab_pointer_request_t","","release the pointer",N,N],[12,"major_opcode","","",299,N],[12,"pad0","","",299,N],[12,"length","","",299,N],[12,"time","","Timestamp to avoid race conditions when running X over the network.",299,N],[3,"xcb_grab_button_request_t","","Grab pointer button(s)",N,N],[12,"major_opcode","","",300,N],[12,"owner_events","","If 1, the `grab_window` will still get the pointer events. If 0, events are not reported to the `grab_window`.",300,N],[12,"length","","",300,N],[12,"grab_window","","Specifies the window on which the pointer should be grabbed.",300,N],[12,"event_mask","","Specifies which pointer events are reported to the client.",300,N],[12,"pointer_mode","","",300,N],[12,"keyboard_mode","","",300,N],[12,"confine_to","","Specifies the window to confine the pointer in (the user will not be able to move the pointer out of that window).",300,N],[12,"cursor","","Specifies the cursor that should be displayed or `XCB_NONE` to not change the cursor.",300,N],[12,"button","","",300,N],[12,"pad0","","",300,N],[12,"modifiers","","The modifiers to grab.",300,N],[3,"xcb_ungrab_button_request_t","","",N,N],[12,"major_opcode","","",301,N],[12,"button","","",301,N],[12,"length","","",301,N],[12,"grab_window","","",301,N],[12,"modifiers","","",301,N],[12,"pad0","","",301,N],[3,"xcb_change_active_pointer_grab_request_t","","",N,N],[12,"major_opcode","","",302,N],[12,"pad0","","",302,N],[12,"length","","",302,N],[12,"cursor","","",302,N],[12,"time","","",302,N],[12,"event_mask","","",302,N],[12,"pad1","","",302,N],[3,"xcb_grab_keyboard_request_t","","Grab the keyboard",N,N],[12,"major_opcode","","",303,N],[12,"owner_events","","If 1, the `grab_window` will still get the pointer events. If 0, events are not reported to the `grab_window`.",303,N],[12,"length","","",303,N],[12,"grab_window","","Specifies the window on which the pointer should be grabbed.",303,N],[12,"time","","Timestamp to avoid race conditions when running X over the network.",303,N],[12,"pointer_mode","","",303,N],[12,"keyboard_mode","","",303,N],[12,"pad0","","",303,N],[3,"xcb_grab_keyboard_cookie_t","","",N,N],[3,"xcb_grab_keyboard_reply_t","","",N,N],[12,"response_type","","",304,N],[12,"status","","",304,N],[12,"sequence","","",304,N],[12,"length","","",304,N],[3,"xcb_ungrab_keyboard_request_t","","",N,N],[12,"major_opcode","","",305,N],[12,"pad0","","",305,N],[12,"length","","",305,N],[12,"time","","",305,N],[3,"xcb_grab_key_request_t","","Grab keyboard key(s)",N,N],[12,"major_opcode","","",306,N],[12,"owner_events","","If 1, the `grab_window` will still get the pointer events. If 0, events are not reported to the `grab_window`.",306,N],[12,"length","","",306,N],[12,"grab_window","","Specifies the window on which the pointer should be grabbed.",306,N],[12,"modifiers","","The modifiers to grab.",306,N],[12,"key","","The keycode of the key to grab.",306,N],[12,"pointer_mode","","",306,N],[12,"keyboard_mode","","",306,N],[12,"pad0","","",306,N],[3,"xcb_ungrab_key_request_t","","release a key combination",N,N],[12,"major_opcode","","",307,N],[12,"key","","The keycode of the specified key combination.",307,N],[12,"length","","",307,N],[12,"grab_window","","The window on which the grabbed key combination will be released.",307,N],[12,"modifiers","","The modifiers of the specified key combination.",307,N],[12,"pad0","","",307,N],[3,"xcb_allow_events_request_t","","release queued events",N,N],[12,"major_opcode","","",308,N],[12,"mode","","",308,N],[12,"length","","",308,N],[12,"time","","Timestamp to avoid race conditions when running X over the network.",308,N],[3,"xcb_grab_server_request_t","","",N,N],[12,"major_opcode","","",309,N],[12,"pad0","","",309,N],[12,"length","","",309,N],[3,"xcb_ungrab_server_request_t","","",N,N],[12,"major_opcode","","",310,N],[12,"pad0","","",310,N],[12,"length","","",310,N],[3,"xcb_query_pointer_request_t","","get pointer coordinates",N,N],[12,"major_opcode","","",311,N],[12,"pad0","","",311,N],[12,"length","","",311,N],[12,"window","","A window to check if the pointer is on the same screen as `window` (see the `same_screen` field in the reply).",311,N],[3,"xcb_query_pointer_cookie_t","","",N,N],[3,"xcb_query_pointer_reply_t","","",N,N],[12,"response_type","","",312,N],[12,"same_screen","","If `same_screen` is False, then the pointer is not on the same screen as the argument window, `child` is None, and `win_x` and `win_y` are zero. If `same_screen` is True, then `win_x` and `win_y` are the pointer coordinates relative to the argument window's origin, and child is the child containing the pointer, if any.",312,N],[12,"sequence","","",312,N],[12,"length","","",312,N],[12,"root","","The root window the pointer is logically on.",312,N],[12,"child","","The child window containing the pointer, if any, if `same_screen` is true. If `same_screen` is false, `XCB_NONE` is returned.",312,N],[12,"root_x","","The pointer X position, relative to `root`.",312,N],[12,"root_y","","The pointer Y position, relative to `root`.",312,N],[12,"win_x","","The pointer X coordinate, relative to `child`, if `same_screen` is true. Zero otherwise.",312,N],[12,"win_y","","The pointer Y coordinate, relative to `child`, if `same_screen` is true. Zero otherwise.",312,N],[12,"mask","","The current logical state of the modifier keys and the buttons. Note that the logical state of a device (as seen by means of the protocol) may lag the physical state if device event processing is frozen.",312,N],[12,"pad0","","",312,N],[3,"xcb_timecoord_t","","",N,N],[12,"time","","",313,N],[12,"x","","",313,N],[12,"y","","",313,N],[3,"xcb_timecoord_iterator_t","","",N,N],[12,"data","","",314,N],[12,"rem","","",314,N],[12,"index","","",314,N],[3,"xcb_get_motion_events_request_t","","",N,N],[12,"major_opcode","","",315,N],[12,"pad0","","",315,N],[12,"length","","",315,N],[12,"window","","",315,N],[12,"start","","",315,N],[12,"stop","","",315,N],[3,"xcb_get_motion_events_cookie_t","","",N,N],[3,"xcb_get_motion_events_reply_t","","",N,N],[12,"response_type","","",316,N],[12,"pad0","","",316,N],[12,"sequence","","",316,N],[12,"length","","",316,N],[12,"events_len","","",316,N],[12,"pad1","","",316,N],[3,"xcb_translate_coordinates_request_t","","",N,N],[12,"major_opcode","","",317,N],[12,"pad0","","",317,N],[12,"length","","",317,N],[12,"src_window","","",317,N],[12,"dst_window","","",317,N],[12,"src_x","","",317,N],[12,"src_y","","",317,N],[3,"xcb_translate_coordinates_cookie_t","","",N,N],[3,"xcb_translate_coordinates_reply_t","","",N,N],[12,"response_type","","",318,N],[12,"same_screen","","",318,N],[12,"sequence","","",318,N],[12,"length","","",318,N],[12,"child","","",318,N],[12,"dst_x","","",318,N],[12,"dst_y","","",318,N],[3,"xcb_warp_pointer_request_t","","move mouse pointer",N,N],[12,"major_opcode","","",319,N],[12,"pad0","","",319,N],[12,"length","","",319,N],[12,"src_window","","If `src_window` is not `XCB_NONE` (TODO), the move will only take place if the pointer is inside `src_window` and within the rectangle specified by (`src_x`, `src_y`, `src_width`, `src_height`). The rectangle coordinates are relative to `src_window`.",319,N],[12,"dst_window","","If `dst_window` is not `XCB_NONE` (TODO), the pointer will be moved to the offsets (`dst_x`, `dst_y`) relative to `dst_window`. If `dst_window` is `XCB_NONE` (TODO), the pointer will be moved by the offsets (`dst_x`, `dst_y`) relative to the current position of the pointer.",319,N],[12,"src_x","","",319,N],[12,"src_y","","",319,N],[12,"src_width","","",319,N],[12,"src_height","","",319,N],[12,"dst_x","","",319,N],[12,"dst_y","","",319,N],[3,"xcb_set_input_focus_request_t","","Sets input focus",N,N],[12,"major_opcode","","",320,N],[12,"revert_to","","Specifies what happens when the `focus` window becomes unviewable (if `focus` is neither `XCB_NONE` nor `XCB_POINTER_ROOT`).",320,N],[12,"length","","",320,N],[12,"focus","","The window to focus. All keyboard events will be reported to this window. The window must be viewable (TODO), or a `xcb_match_error_t` occurs (TODO).",320,N],[12,"time","","Timestamp to avoid race conditions when running X over the network.",320,N],[3,"xcb_get_input_focus_request_t","","",N,N],[12,"major_opcode","","",321,N],[12,"pad0","","",321,N],[12,"length","","",321,N],[3,"xcb_get_input_focus_cookie_t","","",N,N],[3,"xcb_get_input_focus_reply_t","","",N,N],[12,"response_type","","",322,N],[12,"revert_to","","",322,N],[12,"sequence","","",322,N],[12,"length","","",322,N],[12,"focus","","",322,N],[3,"xcb_query_keymap_request_t","","",N,N],[12,"major_opcode","","",323,N],[12,"pad0","","",323,N],[12,"length","","",323,N],[3,"xcb_query_keymap_cookie_t","","",N,N],[3,"xcb_query_keymap_reply_t","","",N,N],[12,"response_type","","",324,N],[12,"pad0","","",324,N],[12,"sequence","","",324,N],[12,"length","","",324,N],[12,"keys","","",324,N],[3,"xcb_open_font_request_t","","opens a font",N,N],[12,"major_opcode","","",325,N],[12,"pad0","","",325,N],[12,"length","","",325,N],[12,"fid","","The ID with which you will refer to the font, created by `xcb_generate_id`.",325,N],[12,"name_len","","Length (in bytes) of `name`.",325,N],[12,"pad1","","",325,N],[3,"xcb_close_font_request_t","","",N,N],[12,"major_opcode","","",326,N],[12,"pad0","","",326,N],[12,"length","","",326,N],[12,"font","","",326,N],[3,"xcb_fontprop_t","","",N,N],[12,"name","","",327,N],[12,"value","","",327,N],[3,"xcb_fontprop_iterator_t","","",N,N],[12,"data","","",328,N],[12,"rem","","",328,N],[12,"index","","",328,N],[3,"xcb_charinfo_t","","",N,N],[12,"left_side_bearing","","",329,N],[12,"right_side_bearing","","",329,N],[12,"character_width","","",329,N],[12,"ascent","","",329,N],[12,"descent","","",329,N],[12,"attributes","","",329,N],[3,"xcb_charinfo_iterator_t","","",N,N],[12,"data","","",330,N],[12,"rem","","",330,N],[12,"index","","",330,N],[3,"xcb_query_font_request_t","","query font metrics",N,N],[12,"major_opcode","","",331,N],[12,"pad0","","",331,N],[12,"length","","",331,N],[12,"font","","The fontable (Font or Graphics Context) to query.",331,N],[3,"xcb_query_font_cookie_t","","",N,N],[3,"xcb_query_font_reply_t","","",N,N],[12,"response_type","","",332,N],[12,"pad0","","",332,N],[12,"sequence","","",332,N],[12,"length","","",332,N],[12,"min_bounds","","minimum bounds over all existing char",332,N],[12,"pad1","","",332,N],[12,"max_bounds","","maximum bounds over all existing char",332,N],[12,"pad2","","",332,N],[12,"min_char_or_byte2","","first character",332,N],[12,"max_char_or_byte2","","last character",332,N],[12,"default_char","","char to print for undefined character",332,N],[12,"properties_len","","how many properties there are",332,N],[12,"draw_direction","","",332,N],[12,"min_byte1","","",332,N],[12,"max_byte1","","",332,N],[12,"all_chars_exist","","flag if all characters have nonzero size",332,N],[12,"font_ascent","","baseline to top edge of raster",332,N],[12,"font_descent","","baseline to bottom edge of raster",332,N],[12,"char_infos_len","","",332,N],[3,"xcb_query_text_extents_request_t","","get text extents",N,N],[12,"major_opcode","","",333,N],[12,"odd_length","","",333,N],[12,"length","","",333,N],[12,"font","","The `font` to calculate text extents in. You can also pass a graphics context.",333,N],[3,"xcb_query_text_extents_cookie_t","","",N,N],[3,"xcb_query_text_extents_reply_t","","",N,N],[12,"response_type","","",334,N],[12,"draw_direction","","",334,N],[12,"sequence","","",334,N],[12,"length","","",334,N],[12,"font_ascent","","",334,N],[12,"font_descent","","",334,N],[12,"overall_ascent","","",334,N],[12,"overall_descent","","",334,N],[12,"overall_width","","",334,N],[12,"overall_left","","",334,N],[12,"overall_right","","",334,N],[3,"xcb_str_t","","",N,N],[12,"name_len","","",335,N],[3,"xcb_str_iterator_t","","",N,N],[12,"data","","",336,N],[12,"rem","","",336,N],[12,"index","","",336,N],[3,"xcb_list_fonts_request_t","","get matching font names",N,N],[12,"major_opcode","","",337,N],[12,"pad0","","",337,N],[12,"length","","",337,N],[12,"max_names","","The maximum number of fonts to be returned.",337,N],[12,"pattern_len","","The length (in bytes) of `pattern`.",337,N],[3,"xcb_list_fonts_cookie_t","","",N,N],[3,"xcb_list_fonts_reply_t","","",N,N],[12,"response_type","","",338,N],[12,"pad0","","",338,N],[12,"sequence","","",338,N],[12,"length","","",338,N],[12,"names_len","","The number of font names.",338,N],[12,"pad1","","",338,N],[3,"xcb_list_fonts_with_info_request_t","","get matching font names and information",N,N],[12,"major_opcode","","",339,N],[12,"pad0","","",339,N],[12,"length","","",339,N],[12,"max_names","","The maximum number of fonts to be returned.",339,N],[12,"pattern_len","","The length (in bytes) of `pattern`.",339,N],[3,"xcb_list_fonts_with_info_cookie_t","","",N,N],[3,"xcb_list_fonts_with_info_reply_t","","",N,N],[12,"response_type","","",340,N],[12,"name_len","","The number of matched font names.",340,N],[12,"sequence","","",340,N],[12,"length","","",340,N],[12,"min_bounds","","minimum bounds over all existing char",340,N],[12,"pad0","","",340,N],[12,"max_bounds","","maximum bounds over all existing char",340,N],[12,"pad1","","",340,N],[12,"min_char_or_byte2","","first character",340,N],[12,"max_char_or_byte2","","last character",340,N],[12,"default_char","","char to print for undefined character",340,N],[12,"properties_len","","how many properties there are",340,N],[12,"draw_direction","","",340,N],[12,"min_byte1","","",340,N],[12,"max_byte1","","",340,N],[12,"all_chars_exist","","flag if all characters have nonzero size",340,N],[12,"font_ascent","","baseline to top edge of raster",340,N],[12,"font_descent","","baseline to bottom edge of raster",340,N],[12,"replies_hint","","An indication of how many more fonts will be returned. This is only a hint and may be larger or smaller than the number of fonts actually returned. A zero value does not guarantee that no more fonts will be returned.",340,N],[3,"xcb_set_font_path_request_t","","",N,N],[12,"major_opcode","","",341,N],[12,"pad0","","",341,N],[12,"length","","",341,N],[12,"font_qty","","",341,N],[12,"pad1","","",341,N],[3,"xcb_get_font_path_request_t","","",N,N],[12,"major_opcode","","",342,N],[12,"pad0","","",342,N],[12,"length","","",342,N],[3,"xcb_get_font_path_cookie_t","","",N,N],[3,"xcb_get_font_path_reply_t","","",N,N],[12,"response_type","","",343,N],[12,"pad0","","",343,N],[12,"sequence","","",343,N],[12,"length","","",343,N],[12,"path_len","","",343,N],[12,"pad1","","",343,N],[3,"xcb_create_pixmap_request_t","","Creates a pixmap",N,N],[12,"major_opcode","","",344,N],[12,"depth","","TODO",344,N],[12,"length","","",344,N],[12,"pid","","The ID with which you will refer to the new pixmap, created by `xcb_generate_id`.",344,N],[12,"drawable","","Drawable to get the screen from.",344,N],[12,"width","","The width of the new pixmap.",344,N],[12,"height","","The height of the new pixmap.",344,N],[3,"xcb_free_pixmap_request_t","","Destroys a pixmap",N,N],[12,"major_opcode","","",345,N],[12,"pad0","","",345,N],[12,"length","","",345,N],[12,"pixmap","","The pixmap to destroy.",345,N],[3,"xcb_create_gc_request_t","","Creates a graphics context",N,N],[12,"major_opcode","","",346,N],[12,"pad0","","",346,N],[12,"length","","",346,N],[12,"cid","","The ID with which you will refer to the graphics context, created by `xcb_generate_id`.",346,N],[12,"drawable","","Drawable to get the root/depth from.",346,N],[12,"value_mask","","",346,N],[3,"xcb_change_gc_request_t","","change graphics context components",N,N],[12,"major_opcode","","",347,N],[12,"pad0","","",347,N],[12,"length","","",347,N],[12,"gc","","The graphics context to change.",347,N],[12,"value_mask","","",347,N],[3,"xcb_copy_gc_request_t","","",N,N],[12,"major_opcode","","",348,N],[12,"pad0","","",348,N],[12,"length","","",348,N],[12,"src_gc","","",348,N],[12,"dst_gc","","",348,N],[12,"value_mask","","",348,N],[3,"xcb_set_dashes_request_t","","",N,N],[12,"major_opcode","","",349,N],[12,"pad0","","",349,N],[12,"length","","",349,N],[12,"gc","","",349,N],[12,"dash_offset","","",349,N],[12,"dashes_len","","",349,N],[3,"xcb_set_clip_rectangles_request_t","","",N,N],[12,"major_opcode","","",350,N],[12,"ordering","","",350,N],[12,"length","","",350,N],[12,"gc","","",350,N],[12,"clip_x_origin","","",350,N],[12,"clip_y_origin","","",350,N],[3,"xcb_free_gc_request_t","","Destroys a graphics context",N,N],[12,"major_opcode","","",351,N],[12,"pad0","","",351,N],[12,"length","","",351,N],[12,"gc","","The graphics context to destroy.",351,N],[3,"xcb_clear_area_request_t","","",N,N],[12,"major_opcode","","",352,N],[12,"exposures","","",352,N],[12,"length","","",352,N],[12,"window","","",352,N],[12,"x","","",352,N],[12,"y","","",352,N],[12,"width","","",352,N],[12,"height","","",352,N],[3,"xcb_copy_area_request_t","","copy areas",N,N],[12,"major_opcode","","",353,N],[12,"pad0","","",353,N],[12,"length","","",353,N],[12,"src_drawable","","The source drawable (Window or Pixmap).",353,N],[12,"dst_drawable","","The destination drawable (Window or Pixmap).",353,N],[12,"gc","","The graphics context to use.",353,N],[12,"src_x","","The source X coordinate.",353,N],[12,"src_y","","The source Y coordinate.",353,N],[12,"dst_x","","The destination X coordinate.",353,N],[12,"dst_y","","The destination Y coordinate.",353,N],[12,"width","","The width of the area to copy (in pixels).",353,N],[12,"height","","The height of the area to copy (in pixels).",353,N],[3,"xcb_copy_plane_request_t","","",N,N],[12,"major_opcode","","",354,N],[12,"pad0","","",354,N],[12,"length","","",354,N],[12,"src_drawable","","",354,N],[12,"dst_drawable","","",354,N],[12,"gc","","",354,N],[12,"src_x","","",354,N],[12,"src_y","","",354,N],[12,"dst_x","","",354,N],[12,"dst_y","","",354,N],[12,"width","","",354,N],[12,"height","","",354,N],[12,"bit_plane","","",354,N],[3,"xcb_poly_point_request_t","","",N,N],[12,"major_opcode","","",355,N],[12,"coordinate_mode","","",355,N],[12,"length","","",355,N],[12,"drawable","","",355,N],[12,"gc","","",355,N],[3,"xcb_poly_line_request_t","","draw lines",N,N],[12,"major_opcode","","",356,N],[12,"coordinate_mode","","",356,N],[12,"length","","",356,N],[12,"drawable","","The drawable to draw the line(s) on.",356,N],[12,"gc","","The graphics context to use.",356,N],[3,"xcb_segment_t","","",N,N],[12,"x1","","",357,N],[12,"y1","","",357,N],[12,"x2","","",357,N],[12,"y2","","",357,N],[3,"xcb_segment_iterator_t","","",N,N],[12,"data","","",358,N],[12,"rem","","",358,N],[12,"index","","",358,N],[3,"xcb_poly_segment_request_t","","draw lines",N,N],[12,"major_opcode","","",359,N],[12,"pad0","","",359,N],[12,"length","","",359,N],[12,"drawable","","A drawable (Window or Pixmap) to draw on.",359,N],[12,"gc","","The graphics context to use.",359,N],[3,"xcb_poly_rectangle_request_t","","",N,N],[12,"major_opcode","","",360,N],[12,"pad0","","",360,N],[12,"length","","",360,N],[12,"drawable","","",360,N],[12,"gc","","",360,N],[3,"xcb_poly_arc_request_t","","",N,N],[12,"major_opcode","","",361,N],[12,"pad0","","",361,N],[12,"length","","",361,N],[12,"drawable","","",361,N],[12,"gc","","",361,N],[3,"xcb_fill_poly_request_t","","",N,N],[12,"major_opcode","","",362,N],[12,"pad0","","",362,N],[12,"length","","",362,N],[12,"drawable","","",362,N],[12,"gc","","",362,N],[12,"shape","","",362,N],[12,"coordinate_mode","","",362,N],[12,"pad1","","",362,N],[3,"xcb_poly_fill_rectangle_request_t","","Fills rectangles",N,N],[12,"major_opcode","","",363,N],[12,"pad0","","",363,N],[12,"length","","",363,N],[12,"drawable","","The drawable (Window or Pixmap) to draw on.",363,N],[12,"gc","","The graphics context to use.",363,N],[3,"xcb_poly_fill_arc_request_t","","",N,N],[12,"major_opcode","","",364,N],[12,"pad0","","",364,N],[12,"length","","",364,N],[12,"drawable","","",364,N],[12,"gc","","",364,N],[3,"xcb_put_image_request_t","","",N,N],[12,"major_opcode","","",365,N],[12,"format","","",365,N],[12,"length","","",365,N],[12,"drawable","","",365,N],[12,"gc","","",365,N],[12,"width","","",365,N],[12,"height","","",365,N],[12,"dst_x","","",365,N],[12,"dst_y","","",365,N],[12,"left_pad","","",365,N],[12,"depth","","",365,N],[12,"pad0","","",365,N],[3,"xcb_get_image_request_t","","",N,N],[12,"major_opcode","","",366,N],[12,"format","","",366,N],[12,"length","","",366,N],[12,"drawable","","",366,N],[12,"x","","",366,N],[12,"y","","",366,N],[12,"width","","",366,N],[12,"height","","",366,N],[12,"plane_mask","","",366,N],[3,"xcb_get_image_cookie_t","","",N,N],[3,"xcb_get_image_reply_t","","",N,N],[12,"response_type","","",367,N],[12,"depth","","",367,N],[12,"sequence","","",367,N],[12,"length","","",367,N],[12,"visual","","",367,N],[12,"pad0","","",367,N],[3,"xcb_poly_text_8_request_t","","",N,N],[12,"major_opcode","","",368,N],[12,"pad0","","",368,N],[12,"length","","",368,N],[12,"drawable","","",368,N],[12,"gc","","",368,N],[12,"x","","",368,N],[12,"y","","",368,N],[3,"xcb_poly_text_16_request_t","","",N,N],[12,"major_opcode","","",369,N],[12,"pad0","","",369,N],[12,"length","","",369,N],[12,"drawable","","",369,N],[12,"gc","","",369,N],[12,"x","","",369,N],[12,"y","","",369,N],[3,"xcb_image_text_8_request_t","","Draws text",N,N],[12,"major_opcode","","",370,N],[12,"string_len","","The length of the `string`. Note that this parameter limited by 255 due to using 8 bits!",370,N],[12,"length","","",370,N],[12,"drawable","","The drawable (Window or Pixmap) to draw text on.",370,N],[12,"gc","","The graphics context to use.",370,N],[12,"x","","The x coordinate of the first character, relative to the origin of `drawable`.",370,N],[12,"y","","The y coordinate of the first character, relative to the origin of `drawable`.",370,N],[3,"xcb_image_text_16_request_t","","Draws text",N,N],[12,"major_opcode","","",371,N],[12,"string_len","","The length of the `string` in characters. Note that this parameter limited by 255 due to using 8 bits!",371,N],[12,"length","","",371,N],[12,"drawable","","The drawable (Window or Pixmap) to draw text on.",371,N],[12,"gc","","The graphics context to use.",371,N],[12,"x","","The x coordinate of the first character, relative to the origin of `drawable`.",371,N],[12,"y","","The y coordinate of the first character, relative to the origin of `drawable`.",371,N],[3,"xcb_create_colormap_request_t","","",N,N],[12,"major_opcode","","",372,N],[12,"alloc","","",372,N],[12,"length","","",372,N],[12,"mid","","",372,N],[12,"window","","",372,N],[12,"visual","","",372,N],[3,"xcb_free_colormap_request_t","","",N,N],[12,"major_opcode","","",373,N],[12,"pad0","","",373,N],[12,"length","","",373,N],[12,"cmap","","",373,N],[3,"xcb_copy_colormap_and_free_request_t","","",N,N],[12,"major_opcode","","",374,N],[12,"pad0","","",374,N],[12,"length","","",374,N],[12,"mid","","",374,N],[12,"src_cmap","","",374,N],[3,"xcb_install_colormap_request_t","","",N,N],[12,"major_opcode","","",375,N],[12,"pad0","","",375,N],[12,"length","","",375,N],[12,"cmap","","",375,N],[3,"xcb_uninstall_colormap_request_t","","",N,N],[12,"major_opcode","","",376,N],[12,"pad0","","",376,N],[12,"length","","",376,N],[12,"cmap","","",376,N],[3,"xcb_list_installed_colormaps_request_t","","",N,N],[12,"major_opcode","","",377,N],[12,"pad0","","",377,N],[12,"length","","",377,N],[12,"window","","",377,N],[3,"xcb_list_installed_colormaps_cookie_t","","",N,N],[3,"xcb_list_installed_colormaps_reply_t","","",N,N],[12,"response_type","","",378,N],[12,"pad0","","",378,N],[12,"sequence","","",378,N],[12,"length","","",378,N],[12,"cmaps_len","","",378,N],[12,"pad1","","",378,N],[3,"xcb_alloc_color_request_t","","Allocate a color",N,N],[12,"major_opcode","","",379,N],[12,"pad0","","",379,N],[12,"length","","",379,N],[12,"cmap","","TODO",379,N],[12,"red","","The red value of your color.",379,N],[12,"green","","The green value of your color.",379,N],[12,"blue","","The blue value of your color.",379,N],[12,"pad1","","",379,N],[3,"xcb_alloc_color_cookie_t","","",N,N],[3,"xcb_alloc_color_reply_t","","",N,N],[12,"response_type","","",380,N],[12,"pad0","","",380,N],[12,"sequence","","",380,N],[12,"length","","",380,N],[12,"red","","",380,N],[12,"green","","",380,N],[12,"blue","","",380,N],[12,"pad1","","",380,N],[12,"pixel","","",380,N],[3,"xcb_alloc_named_color_request_t","","",N,N],[12,"major_opcode","","",381,N],[12,"pad0","","",381,N],[12,"length","","",381,N],[12,"cmap","","",381,N],[12,"name_len","","",381,N],[12,"pad1","","",381,N],[3,"xcb_alloc_named_color_cookie_t","","",N,N],[3,"xcb_alloc_named_color_reply_t","","",N,N],[12,"response_type","","",382,N],[12,"pad0","","",382,N],[12,"sequence","","",382,N],[12,"length","","",382,N],[12,"pixel","","",382,N],[12,"exact_red","","",382,N],[12,"exact_green","","",382,N],[12,"exact_blue","","",382,N],[12,"visual_red","","",382,N],[12,"visual_green","","",382,N],[12,"visual_blue","","",382,N],[3,"xcb_alloc_color_cells_request_t","","",N,N],[12,"major_opcode","","",383,N],[12,"contiguous","","",383,N],[12,"length","","",383,N],[12,"cmap","","",383,N],[12,"colors","","",383,N],[12,"planes","","",383,N],[3,"xcb_alloc_color_cells_cookie_t","","",N,N],[3,"xcb_alloc_color_cells_reply_t","","",N,N],[12,"response_type","","",384,N],[12,"pad0","","",384,N],[12,"sequence","","",384,N],[12,"length","","",384,N],[12,"pixels_len","","",384,N],[12,"masks_len","","",384,N],[12,"pad1","","",384,N],[3,"xcb_alloc_color_planes_request_t","","",N,N],[12,"major_opcode","","",385,N],[12,"contiguous","","",385,N],[12,"length","","",385,N],[12,"cmap","","",385,N],[12,"colors","","",385,N],[12,"reds","","",385,N],[12,"greens","","",385,N],[12,"blues","","",385,N],[3,"xcb_alloc_color_planes_cookie_t","","",N,N],[3,"xcb_alloc_color_planes_reply_t","","",N,N],[12,"response_type","","",386,N],[12,"pad0","","",386,N],[12,"sequence","","",386,N],[12,"length","","",386,N],[12,"pixels_len","","",386,N],[12,"pad1","","",386,N],[12,"red_mask","","",386,N],[12,"green_mask","","",386,N],[12,"blue_mask","","",386,N],[12,"pad2","","",386,N],[3,"xcb_free_colors_request_t","","",N,N],[12,"major_opcode","","",387,N],[12,"pad0","","",387,N],[12,"length","","",387,N],[12,"cmap","","",387,N],[12,"plane_mask","","",387,N],[3,"xcb_coloritem_t","","",N,N],[12,"pixel","","",388,N],[12,"red","","",388,N],[12,"green","","",388,N],[12,"blue","","",388,N],[12,"flags","","",388,N],[12,"pad0","","",388,N],[3,"xcb_coloritem_iterator_t","","",N,N],[12,"data","","",389,N],[12,"rem","","",389,N],[12,"index","","",389,N],[3,"xcb_store_colors_request_t","","",N,N],[12,"major_opcode","","",390,N],[12,"pad0","","",390,N],[12,"length","","",390,N],[12,"cmap","","",390,N],[3,"xcb_store_named_color_request_t","","",N,N],[12,"major_opcode","","",391,N],[12,"flags","","",391,N],[12,"length","","",391,N],[12,"cmap","","",391,N],[12,"pixel","","",391,N],[12,"name_len","","",391,N],[12,"pad0","","",391,N],[3,"xcb_rgb_t","","",N,N],[12,"red","","",392,N],[12,"green","","",392,N],[12,"blue","","",392,N],[12,"pad0","","",392,N],[3,"xcb_rgb_iterator_t","","",N,N],[12,"data","","",393,N],[12,"rem","","",393,N],[12,"index","","",393,N],[3,"xcb_query_colors_request_t","","",N,N],[12,"major_opcode","","",394,N],[12,"pad0","","",394,N],[12,"length","","",394,N],[12,"cmap","","",394,N],[3,"xcb_query_colors_cookie_t","","",N,N],[3,"xcb_query_colors_reply_t","","",N,N],[12,"response_type","","",395,N],[12,"pad0","","",395,N],[12,"sequence","","",395,N],[12,"length","","",395,N],[12,"colors_len","","",395,N],[12,"pad1","","",395,N],[3,"xcb_lookup_color_request_t","","",N,N],[12,"major_opcode","","",396,N],[12,"pad0","","",396,N],[12,"length","","",396,N],[12,"cmap","","",396,N],[12,"name_len","","",396,N],[12,"pad1","","",396,N],[3,"xcb_lookup_color_cookie_t","","",N,N],[3,"xcb_lookup_color_reply_t","","",N,N],[12,"response_type","","",397,N],[12,"pad0","","",397,N],[12,"sequence","","",397,N],[12,"length","","",397,N],[12,"exact_red","","",397,N],[12,"exact_green","","",397,N],[12,"exact_blue","","",397,N],[12,"visual_red","","",397,N],[12,"visual_green","","",397,N],[12,"visual_blue","","",397,N],[3,"xcb_create_cursor_request_t","","",N,N],[12,"major_opcode","","",398,N],[12,"pad0","","",398,N],[12,"length","","",398,N],[12,"cid","","",398,N],[12,"source","","",398,N],[12,"mask","","",398,N],[12,"fore_red","","",398,N],[12,"fore_green","","",398,N],[12,"fore_blue","","",398,N],[12,"back_red","","",398,N],[12,"back_green","","",398,N],[12,"back_blue","","",398,N],[12,"x","","",398,N],[12,"y","","",398,N],[3,"xcb_create_glyph_cursor_request_t","","create cursor",N,N],[12,"major_opcode","","",399,N],[12,"pad0","","",399,N],[12,"length","","",399,N],[12,"cid","","The ID with which you will refer to the cursor, created by `xcb_generate_id`.",399,N],[12,"source_font","","In which font to look for the cursor glyph.",399,N],[12,"mask_font","","In which font to look for the mask glyph.",399,N],[12,"source_char","","The glyph of `source_font` to use.",399,N],[12,"mask_char","","The glyph of `mask_font` to use as a mask: Pixels which are set to 1 define which source pixels are displayed. All pixels which are set to 0 are not displayed.",399,N],[12,"fore_red","","The red value of the foreground color.",399,N],[12,"fore_green","","The green value of the foreground color.",399,N],[12,"fore_blue","","The blue value of the foreground color.",399,N],[12,"back_red","","The red value of the background color.",399,N],[12,"back_green","","The green value of the background color.",399,N],[12,"back_blue","","The blue value of the background color.",399,N],[3,"xcb_free_cursor_request_t","","Deletes a cursor",N,N],[12,"major_opcode","","",400,N],[12,"pad0","","",400,N],[12,"length","","",400,N],[12,"cursor","","The cursor to destroy.",400,N],[3,"xcb_recolor_cursor_request_t","","",N,N],[12,"major_opcode","","",401,N],[12,"pad0","","",401,N],[12,"length","","",401,N],[12,"cursor","","",401,N],[12,"fore_red","","",401,N],[12,"fore_green","","",401,N],[12,"fore_blue","","",401,N],[12,"back_red","","",401,N],[12,"back_green","","",401,N],[12,"back_blue","","",401,N],[3,"xcb_query_best_size_request_t","","",N,N],[12,"major_opcode","","",402,N],[12,"class","","",402,N],[12,"length","","",402,N],[12,"drawable","","",402,N],[12,"width","","",402,N],[12,"height","","",402,N],[3,"xcb_query_best_size_cookie_t","","",N,N],[3,"xcb_query_best_size_reply_t","","",N,N],[12,"response_type","","",403,N],[12,"pad0","","",403,N],[12,"sequence","","",403,N],[12,"length","","",403,N],[12,"width","","",403,N],[12,"height","","",403,N],[3,"xcb_query_extension_request_t","","check if extension is present",N,N],[12,"major_opcode","","",404,N],[12,"pad0","","",404,N],[12,"length","","",404,N],[12,"name_len","","The length of `name` in bytes.",404,N],[12,"pad1","","",404,N],[3,"xcb_query_extension_cookie_t","","",N,N],[3,"xcb_query_extension_reply_t","","",N,N],[12,"response_type","","",405,N],[12,"pad0","","",405,N],[12,"sequence","","",405,N],[12,"length","","",405,N],[12,"present","","Whether the extension is present on this X11 server.",405,N],[12,"major_opcode","","The major opcode for requests.",405,N],[12,"first_event","","The first event code, if any.",405,N],[12,"first_error","","The first error code, if any.",405,N],[3,"xcb_list_extensions_request_t","","",N,N],[12,"major_opcode","","",406,N],[12,"pad0","","",406,N],[12,"length","","",406,N],[3,"xcb_list_extensions_cookie_t","","",N,N],[3,"xcb_list_extensions_reply_t","","",N,N],[12,"response_type","","",407,N],[12,"names_len","","",407,N],[12,"sequence","","",407,N],[12,"length","","",407,N],[12,"pad0","","",407,N],[3,"xcb_change_keyboard_mapping_request_t","","",N,N],[12,"major_opcode","","",408,N],[12,"keycode_count","","",408,N],[12,"length","","",408,N],[12,"first_keycode","","",408,N],[12,"keysyms_per_keycode","","",408,N],[12,"pad0","","",408,N],[3,"xcb_get_keyboard_mapping_request_t","","",N,N],[12,"major_opcode","","",409,N],[12,"pad0","","",409,N],[12,"length","","",409,N],[12,"first_keycode","","",409,N],[12,"count","","",409,N],[3,"xcb_get_keyboard_mapping_cookie_t","","",N,N],[3,"xcb_get_keyboard_mapping_reply_t","","",N,N],[12,"response_type","","",410,N],[12,"keysyms_per_keycode","","",410,N],[12,"sequence","","",410,N],[12,"length","","",410,N],[12,"pad0","","",410,N],[3,"xcb_change_keyboard_control_request_t","","",N,N],[12,"major_opcode","","",411,N],[12,"pad0","","",411,N],[12,"length","","",411,N],[12,"value_mask","","",411,N],[3,"xcb_get_keyboard_control_request_t","","",N,N],[12,"major_opcode","","",412,N],[12,"pad0","","",412,N],[12,"length","","",412,N],[3,"xcb_get_keyboard_control_cookie_t","","",N,N],[3,"xcb_get_keyboard_control_reply_t","","",N,N],[12,"response_type","","",413,N],[12,"global_auto_repeat","","",413,N],[12,"sequence","","",413,N],[12,"length","","",413,N],[12,"led_mask","","",413,N],[12,"key_click_percent","","",413,N],[12,"bell_percent","","",413,N],[12,"bell_pitch","","",413,N],[12,"bell_duration","","",413,N],[12,"pad0","","",413,N],[12,"auto_repeats","","",413,N],[3,"xcb_bell_request_t","","",N,N],[12,"major_opcode","","",414,N],[12,"percent","","",414,N],[12,"length","","",414,N],[3,"xcb_change_pointer_control_request_t","","",N,N],[12,"major_opcode","","",415,N],[12,"pad0","","",415,N],[12,"length","","",415,N],[12,"acceleration_numerator","","",415,N],[12,"acceleration_denominator","","",415,N],[12,"threshold","","",415,N],[12,"do_acceleration","","",415,N],[12,"do_threshold","","",415,N],[3,"xcb_get_pointer_control_request_t","","",N,N],[12,"major_opcode","","",416,N],[12,"pad0","","",416,N],[12,"length","","",416,N],[3,"xcb_get_pointer_control_cookie_t","","",N,N],[3,"xcb_get_pointer_control_reply_t","","",N,N],[12,"response_type","","",417,N],[12,"pad0","","",417,N],[12,"sequence","","",417,N],[12,"length","","",417,N],[12,"acceleration_numerator","","",417,N],[12,"acceleration_denominator","","",417,N],[12,"threshold","","",417,N],[12,"pad1","","",417,N],[3,"xcb_set_screen_saver_request_t","","",N,N],[12,"major_opcode","","",418,N],[12,"pad0","","",418,N],[12,"length","","",418,N],[12,"timeout","","",418,N],[12,"interval","","",418,N],[12,"prefer_blanking","","",418,N],[12,"allow_exposures","","",418,N],[3,"xcb_get_screen_saver_request_t","","",N,N],[12,"major_opcode","","",419,N],[12,"pad0","","",419,N],[12,"length","","",419,N],[3,"xcb_get_screen_saver_cookie_t","","",N,N],[3,"xcb_get_screen_saver_reply_t","","",N,N],[12,"response_type","","",420,N],[12,"pad0","","",420,N],[12,"sequence","","",420,N],[12,"length","","",420,N],[12,"timeout","","",420,N],[12,"interval","","",420,N],[12,"prefer_blanking","","",420,N],[12,"allow_exposures","","",420,N],[12,"pad1","","",420,N],[3,"xcb_change_hosts_request_t","","",N,N],[12,"major_opcode","","",421,N],[12,"mode","","",421,N],[12,"length","","",421,N],[12,"family","","",421,N],[12,"pad0","","",421,N],[12,"address_len","","",421,N],[3,"xcb_host_t","","",N,N],[12,"family","","",422,N],[12,"pad0","","",422,N],[12,"address_len","","",422,N],[3,"xcb_host_iterator_t","","",N,N],[12,"data","","",423,N],[12,"rem","","",423,N],[12,"index","","",423,N],[3,"xcb_list_hosts_request_t","","",N,N],[12,"major_opcode","","",424,N],[12,"pad0","","",424,N],[12,"length","","",424,N],[3,"xcb_list_hosts_cookie_t","","",N,N],[3,"xcb_list_hosts_reply_t","","",N,N],[12,"response_type","","",425,N],[12,"mode","","",425,N],[12,"sequence","","",425,N],[12,"length","","",425,N],[12,"hosts_len","","",425,N],[12,"pad0","","",425,N],[3,"xcb_set_access_control_request_t","","",N,N],[12,"major_opcode","","",426,N],[12,"mode","","",426,N],[12,"length","","",426,N],[3,"xcb_set_close_down_mode_request_t","","",N,N],[12,"major_opcode","","",427,N],[12,"mode","","",427,N],[12,"length","","",427,N],[3,"xcb_kill_client_request_t","","kills a client",N,N],[12,"major_opcode","","",428,N],[12,"pad0","","",428,N],[12,"length","","",428,N],[12,"resource","","Any resource belonging to the client (for example a Window), used to identify the client connection.",428,N],[3,"xcb_rotate_properties_request_t","","",N,N],[12,"major_opcode","","",429,N],[12,"pad0","","",429,N],[12,"length","","",429,N],[12,"window","","",429,N],[12,"atoms_len","","",429,N],[12,"delta","","",429,N],[3,"xcb_force_screen_saver_request_t","","",N,N],[12,"major_opcode","","",430,N],[12,"mode","","",430,N],[12,"length","","",430,N],[3,"xcb_set_pointer_mapping_request_t","","",N,N],[12,"major_opcode","","",431,N],[12,"map_len","","",431,N],[12,"length","","",431,N],[3,"xcb_set_pointer_mapping_cookie_t","","",N,N],[3,"xcb_set_pointer_mapping_reply_t","","",N,N],[12,"response_type","","",432,N],[12,"status","","",432,N],[12,"sequence","","",432,N],[12,"length","","",432,N],[3,"xcb_get_pointer_mapping_request_t","","",N,N],[12,"major_opcode","","",433,N],[12,"pad0","","",433,N],[12,"length","","",433,N],[3,"xcb_get_pointer_mapping_cookie_t","","",N,N],[3,"xcb_get_pointer_mapping_reply_t","","",N,N],[12,"response_type","","",434,N],[12,"map_len","","",434,N],[12,"sequence","","",434,N],[12,"length","","",434,N],[12,"pad0","","",434,N],[3,"xcb_set_modifier_mapping_request_t","","",N,N],[12,"major_opcode","","",435,N],[12,"keycodes_per_modifier","","",435,N],[12,"length","","",435,N],[3,"xcb_set_modifier_mapping_cookie_t","","",N,N],[3,"xcb_set_modifier_mapping_reply_t","","",N,N],[12,"response_type","","",436,N],[12,"status","","",436,N],[12,"sequence","","",436,N],[12,"length","","",436,N],[3,"xcb_get_modifier_mapping_request_t","","",N,N],[12,"major_opcode","","",437,N],[12,"pad0","","",437,N],[12,"length","","",437,N],[3,"xcb_get_modifier_mapping_cookie_t","","",N,N],[3,"xcb_get_modifier_mapping_reply_t","","",N,N],[12,"response_type","","",438,N],[12,"keycodes_per_modifier","","",438,N],[12,"sequence","","",438,N],[12,"length","","",438,N],[12,"pad0","","",438,N],[3,"xcb_no_operation_request_t","","",N,N],[12,"major_opcode","","",439,N],[12,"pad0","","",439,N],[12,"length","","",439,N],[5,"xcb_char2b_next","","",N,N],[5,"xcb_char2b_end","","",N,N],[5,"xcb_window_next","","",N,N],[5,"xcb_window_end","","",N,N],[5,"xcb_pixmap_next","","",N,N],[5,"xcb_pixmap_end","","",N,N],[5,"xcb_cursor_next","","",N,N],[5,"xcb_cursor_end","","",N,N],[5,"xcb_font_next","","",N,N],[5,"xcb_font_end","","",N,N],[5,"xcb_gcontext_next","","",N,N],[5,"xcb_gcontext_end","","",N,N],[5,"xcb_colormap_next","","",N,N],[5,"xcb_colormap_end","","",N,N],[5,"xcb_atom_next","","",N,N],[5,"xcb_atom_end","","",N,N],[5,"xcb_drawable_next","","",N,N],[5,"xcb_drawable_end","","",N,N],[5,"xcb_fontable_next","","",N,N],[5,"xcb_fontable_end","","",N,N],[5,"xcb_visualid_next","","",N,N],[5,"xcb_visualid_end","","",N,N],[5,"xcb_timestamp_next","","",N,N],[5,"xcb_timestamp_end","","",N,N],[5,"xcb_keysym_next","","",N,N],[5,"xcb_keysym_end","","",N,N],[5,"xcb_keycode_next","","",N,N],[5,"xcb_keycode_end","","",N,N],[5,"xcb_button_next","","",N,N],[5,"xcb_button_end","","",N,N],[5,"xcb_point_next","","",N,N],[5,"xcb_point_end","","",N,N],[5,"xcb_rectangle_next","","",N,N],[5,"xcb_rectangle_end","","",N,N],[5,"xcb_arc_next","","",N,N],[5,"xcb_arc_end","","",N,N],[5,"xcb_format_next","","",N,N],[5,"xcb_format_end","","",N,N],[5,"xcb_visualtype_next","","",N,N],[5,"xcb_visualtype_end","","",N,N],[5,"xcb_depth_visuals","","",N,N],[5,"xcb_depth_visuals_length","","",N,N],[5,"xcb_depth_visuals_iterator","","",N,N],[5,"xcb_depth_next","","",N,N],[5,"xcb_depth_end","","",N,N],[5,"xcb_screen_allowed_depths_length","","",N,N],[5,"xcb_screen_allowed_depths_iterator","","",N,N],[5,"xcb_screen_next","","",N,N],[5,"xcb_screen_end","","",N,N],[5,"xcb_setup_request_authorization_protocol_name","","",N,N],[5,"xcb_setup_request_authorization_protocol_name_length","","",N,N],[5,"xcb_setup_request_authorization_protocol_name_end","","",N,N],[5,"xcb_setup_request_authorization_protocol_data","","",N,N],[5,"xcb_setup_request_authorization_protocol_data_length","","",N,N],[5,"xcb_setup_request_authorization_protocol_data_end","","",N,N],[5,"xcb_setup_request_next","","",N,N],[5,"xcb_setup_request_end","","",N,N],[5,"xcb_setup_failed_reason","","",N,N],[5,"xcb_setup_failed_reason_length","","",N,N],[5,"xcb_setup_failed_reason_end","","",N,N],[5,"xcb_setup_failed_next","","",N,N],[5,"xcb_setup_failed_end","","",N,N],[5,"xcb_setup_authenticate_reason","","",N,N],[5,"xcb_setup_authenticate_reason_length","","",N,N],[5,"xcb_setup_authenticate_reason_end","","",N,N],[5,"xcb_setup_authenticate_next","","",N,N],[5,"xcb_setup_authenticate_end","","",N,N],[5,"xcb_setup_vendor","","",N,N],[5,"xcb_setup_vendor_length","","",N,N],[5,"xcb_setup_vendor_end","","",N,N],[5,"xcb_setup_pixmap_formats","","",N,N],[5,"xcb_setup_pixmap_formats_length","","",N,N],[5,"xcb_setup_pixmap_formats_iterator","","",N,N],[5,"xcb_setup_roots_length","","",N,N],[5,"xcb_setup_roots_iterator","","",N,N],[5,"xcb_setup_next","","",N,N],[5,"xcb_setup_end","","",N,N],[5,"xcb_client_message_data_next","","",N,N],[5,"xcb_client_message_data_end","","",N,N],[5,"xcb_create_window","","Creates a window",N,N],[5,"xcb_create_window_checked","","Creates a window",N,N],[5,"xcb_change_window_attributes","","change window attributes",N,N],[5,"xcb_change_window_attributes_checked","","change window attributes",N,N],[5,"xcb_get_window_attributes_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_window_attributes","","Gets window attributes",N,N],[5,"xcb_get_window_attributes_unchecked","","Gets window attributes",N,N],[5,"xcb_destroy_window","","Destroys a window",N,N],[5,"xcb_destroy_window_checked","","Destroys a window",N,N],[5,"xcb_destroy_subwindows","","",N,N],[5,"xcb_destroy_subwindows_checked","","",N,N],[5,"xcb_change_save_set","","Changes a client's save set",N,N],[5,"xcb_change_save_set_checked","","Changes a client's save set",N,N],[5,"xcb_reparent_window","","Reparents a window",N,N],[5,"xcb_reparent_window_checked","","Reparents a window",N,N],[5,"xcb_map_window","","Makes a window visible",N,N],[5,"xcb_map_window_checked","","Makes a window visible",N,N],[5,"xcb_map_subwindows","","",N,N],[5,"xcb_map_subwindows_checked","","",N,N],[5,"xcb_unmap_window","","Makes a window invisible",N,N],[5,"xcb_unmap_window_checked","","Makes a window invisible",N,N],[5,"xcb_unmap_subwindows","","",N,N],[5,"xcb_unmap_subwindows_checked","","",N,N],[5,"xcb_configure_window","","Configures window attributes",N,N],[5,"xcb_configure_window_checked","","Configures window attributes",N,N],[5,"xcb_circulate_window","","Change window stacking order",N,N],[5,"xcb_circulate_window_checked","","Change window stacking order",N,N],[5,"xcb_get_geometry_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_geometry","","Get current window geometry",N,N],[5,"xcb_get_geometry_unchecked","","Get current window geometry",N,N],[5,"xcb_query_tree_children","","",N,N],[5,"xcb_query_tree_children_length","","",N,N],[5,"xcb_query_tree_children_end","","",N,N],[5,"xcb_query_tree_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_query_tree","","query the window tree",N,N],[5,"xcb_query_tree_unchecked","","query the window tree",N,N],[5,"xcb_intern_atom_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_intern_atom","","Get atom identifier by name",N,N],[5,"xcb_intern_atom_unchecked","","Get atom identifier by name",N,N],[5,"xcb_get_atom_name_name","","",N,N],[5,"xcb_get_atom_name_name_length","","",N,N],[5,"xcb_get_atom_name_name_end","","",N,N],[5,"xcb_get_atom_name_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_atom_name","","",N,N],[5,"xcb_get_atom_name_unchecked","","",N,N],[5,"xcb_change_property","","Changes a window property",N,N],[5,"xcb_change_property_checked","","Changes a window property",N,N],[5,"xcb_delete_property","","",N,N],[5,"xcb_delete_property_checked","","",N,N],[5,"xcb_get_property_value","","",N,N],[5,"xcb_get_property_value_length","","",N,N],[5,"xcb_get_property_value_end","","",N,N],[5,"xcb_get_property_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_property","","Gets a window property",N,N],[5,"xcb_get_property_unchecked","","Gets a window property",N,N],[5,"xcb_list_properties_atoms","","",N,N],[5,"xcb_list_properties_atoms_length","","",N,N],[5,"xcb_list_properties_atoms_end","","",N,N],[5,"xcb_list_properties_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_list_properties","","",N,N],[5,"xcb_list_properties_unchecked","","",N,N],[5,"xcb_set_selection_owner","","Sets the owner of a selection",N,N],[5,"xcb_set_selection_owner_checked","","Sets the owner of a selection",N,N],[5,"xcb_get_selection_owner_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_selection_owner","","Gets the owner of a selection",N,N],[5,"xcb_get_selection_owner_unchecked","","Gets the owner of a selection",N,N],[5,"xcb_convert_selection","","",N,N],[5,"xcb_convert_selection_checked","","",N,N],[5,"xcb_send_event","","send an event",N,N],[5,"xcb_send_event_checked","","send an event",N,N],[5,"xcb_grab_pointer_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_grab_pointer","","Grab the pointer",N,N],[5,"xcb_grab_pointer_unchecked","","Grab the pointer",N,N],[5,"xcb_ungrab_pointer","","release the pointer",N,N],[5,"xcb_ungrab_pointer_checked","","release the pointer",N,N],[5,"xcb_grab_button","","Grab pointer button(s)",N,N],[5,"xcb_grab_button_checked","","Grab pointer button(s)",N,N],[5,"xcb_ungrab_button","","",N,N],[5,"xcb_ungrab_button_checked","","",N,N],[5,"xcb_change_active_pointer_grab","","",N,N],[5,"xcb_change_active_pointer_grab_checked","","",N,N],[5,"xcb_grab_keyboard_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_grab_keyboard","","Grab the keyboard",N,N],[5,"xcb_grab_keyboard_unchecked","","Grab the keyboard",N,N],[5,"xcb_ungrab_keyboard","","",N,N],[5,"xcb_ungrab_keyboard_checked","","",N,N],[5,"xcb_grab_key","","Grab keyboard key(s)",N,N],[5,"xcb_grab_key_checked","","Grab keyboard key(s)",N,N],[5,"xcb_ungrab_key","","release a key combination",N,N],[5,"xcb_ungrab_key_checked","","release a key combination",N,N],[5,"xcb_allow_events","","release queued events",N,N],[5,"xcb_allow_events_checked","","release queued events",N,N],[5,"xcb_grab_server","","",N,N],[5,"xcb_grab_server_checked","","",N,N],[5,"xcb_ungrab_server","","",N,N],[5,"xcb_ungrab_server_checked","","",N,N],[5,"xcb_query_pointer_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_query_pointer","","get pointer coordinates",N,N],[5,"xcb_query_pointer_unchecked","","get pointer coordinates",N,N],[5,"xcb_timecoord_next","","",N,N],[5,"xcb_timecoord_end","","",N,N],[5,"xcb_get_motion_events_events","","",N,N],[5,"xcb_get_motion_events_events_length","","",N,N],[5,"xcb_get_motion_events_events_iterator","","",N,N],[5,"xcb_get_motion_events_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_motion_events","","",N,N],[5,"xcb_get_motion_events_unchecked","","",N,N],[5,"xcb_translate_coordinates_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_translate_coordinates","","",N,N],[5,"xcb_translate_coordinates_unchecked","","",N,N],[5,"xcb_warp_pointer","","move mouse pointer",N,N],[5,"xcb_warp_pointer_checked","","move mouse pointer",N,N],[5,"xcb_set_input_focus","","Sets input focus",N,N],[5,"xcb_set_input_focus_checked","","Sets input focus",N,N],[5,"xcb_get_input_focus_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_input_focus","","",N,N],[5,"xcb_get_input_focus_unchecked","","",N,N],[5,"xcb_query_keymap_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_query_keymap","","",N,N],[5,"xcb_query_keymap_unchecked","","",N,N],[5,"xcb_open_font","","opens a font",N,N],[5,"xcb_open_font_checked","","opens a font",N,N],[5,"xcb_close_font","","",N,N],[5,"xcb_close_font_checked","","",N,N],[5,"xcb_fontprop_next","","",N,N],[5,"xcb_fontprop_end","","",N,N],[5,"xcb_charinfo_next","","",N,N],[5,"xcb_charinfo_end","","",N,N],[5,"xcb_query_font_properties","","",N,N],[5,"xcb_query_font_properties_length","","",N,N],[5,"xcb_query_font_properties_iterator","","",N,N],[5,"xcb_query_font_char_infos","","",N,N],[5,"xcb_query_font_char_infos_length","","",N,N],[5,"xcb_query_font_char_infos_iterator","","",N,N],[5,"xcb_query_font_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_query_font","","query font metrics",N,N],[5,"xcb_query_font_unchecked","","query font metrics",N,N],[5,"xcb_query_text_extents_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_query_text_extents","","get text extents",N,N],[5,"xcb_query_text_extents_unchecked","","get text extents",N,N],[5,"xcb_str_name","","",N,N],[5,"xcb_str_name_length","","",N,N],[5,"xcb_str_name_end","","",N,N],[5,"xcb_str_next","","",N,N],[5,"xcb_str_end","","",N,N],[5,"xcb_list_fonts_names_length","","",N,N],[5,"xcb_list_fonts_names_iterator","","",N,N],[5,"xcb_list_fonts_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_list_fonts","","get matching font names",N,N],[5,"xcb_list_fonts_unchecked","","get matching font names",N,N],[5,"xcb_list_fonts_with_info_properties","","",N,N],[5,"xcb_list_fonts_with_info_properties_length","","",N,N],[5,"xcb_list_fonts_with_info_properties_iterator","","",N,N],[5,"xcb_list_fonts_with_info_name","","",N,N],[5,"xcb_list_fonts_with_info_name_length","","",N,N],[5,"xcb_list_fonts_with_info_name_end","","",N,N],[5,"xcb_list_fonts_with_info_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_list_fonts_with_info","","get matching font names and information",N,N],[5,"xcb_list_fonts_with_info_unchecked","","get matching font names and information",N,N],[5,"xcb_set_font_path","","",N,N],[5,"xcb_set_font_path_checked","","",N,N],[5,"xcb_get_font_path_path_length","","",N,N],[5,"xcb_get_font_path_path_iterator","","",N,N],[5,"xcb_get_font_path_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_font_path","","",N,N],[5,"xcb_get_font_path_unchecked","","",N,N],[5,"xcb_create_pixmap","","Creates a pixmap",N,N],[5,"xcb_create_pixmap_checked","","Creates a pixmap",N,N],[5,"xcb_free_pixmap","","Destroys a pixmap",N,N],[5,"xcb_free_pixmap_checked","","Destroys a pixmap",N,N],[5,"xcb_create_gc","","Creates a graphics context",N,N],[5,"xcb_create_gc_checked","","Creates a graphics context",N,N],[5,"xcb_change_gc","","change graphics context components",N,N],[5,"xcb_change_gc_checked","","change graphics context components",N,N],[5,"xcb_copy_gc","","",N,N],[5,"xcb_copy_gc_checked","","",N,N],[5,"xcb_set_dashes","","",N,N],[5,"xcb_set_dashes_checked","","",N,N],[5,"xcb_set_clip_rectangles","","",N,N],[5,"xcb_set_clip_rectangles_checked","","",N,N],[5,"xcb_free_gc","","Destroys a graphics context",N,N],[5,"xcb_free_gc_checked","","Destroys a graphics context",N,N],[5,"xcb_clear_area","","",N,N],[5,"xcb_clear_area_checked","","",N,N],[5,"xcb_copy_area","","copy areas",N,N],[5,"xcb_copy_area_checked","","copy areas",N,N],[5,"xcb_copy_plane","","",N,N],[5,"xcb_copy_plane_checked","","",N,N],[5,"xcb_poly_point","","",N,N],[5,"xcb_poly_point_checked","","",N,N],[5,"xcb_poly_line","","draw lines",N,N],[5,"xcb_poly_line_checked","","draw lines",N,N],[5,"xcb_segment_next","","",N,N],[5,"xcb_segment_end","","",N,N],[5,"xcb_poly_segment","","draw lines",N,N],[5,"xcb_poly_segment_checked","","draw lines",N,N],[5,"xcb_poly_rectangle","","",N,N],[5,"xcb_poly_rectangle_checked","","",N,N],[5,"xcb_poly_arc","","",N,N],[5,"xcb_poly_arc_checked","","",N,N],[5,"xcb_fill_poly","","",N,N],[5,"xcb_fill_poly_checked","","",N,N],[5,"xcb_poly_fill_rectangle","","Fills rectangles",N,N],[5,"xcb_poly_fill_rectangle_checked","","Fills rectangles",N,N],[5,"xcb_poly_fill_arc","","",N,N],[5,"xcb_poly_fill_arc_checked","","",N,N],[5,"xcb_put_image","","",N,N],[5,"xcb_put_image_checked","","",N,N],[5,"xcb_get_image_data","","",N,N],[5,"xcb_get_image_data_length","","",N,N],[5,"xcb_get_image_data_end","","",N,N],[5,"xcb_get_image_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_image","","",N,N],[5,"xcb_get_image_unchecked","","",N,N],[5,"xcb_poly_text_8","","",N,N],[5,"xcb_poly_text_8_checked","","",N,N],[5,"xcb_poly_text_16","","",N,N],[5,"xcb_poly_text_16_checked","","",N,N],[5,"xcb_image_text_8","","Draws text",N,N],[5,"xcb_image_text_8_checked","","Draws text",N,N],[5,"xcb_image_text_16","","Draws text",N,N],[5,"xcb_image_text_16_checked","","Draws text",N,N],[5,"xcb_create_colormap","","",N,N],[5,"xcb_create_colormap_checked","","",N,N],[5,"xcb_free_colormap","","",N,N],[5,"xcb_free_colormap_checked","","",N,N],[5,"xcb_copy_colormap_and_free","","",N,N],[5,"xcb_copy_colormap_and_free_checked","","",N,N],[5,"xcb_install_colormap","","",N,N],[5,"xcb_install_colormap_checked","","",N,N],[5,"xcb_uninstall_colormap","","",N,N],[5,"xcb_uninstall_colormap_checked","","",N,N],[5,"xcb_list_installed_colormaps_cmaps","","",N,N],[5,"xcb_list_installed_colormaps_cmaps_length","","",N,N],[5,"xcb_list_installed_colormaps_cmaps_end","","",N,N],[5,"xcb_list_installed_colormaps_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_list_installed_colormaps","","",N,N],[5,"xcb_list_installed_colormaps_unchecked","","",N,N],[5,"xcb_alloc_color_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_alloc_color","","Allocate a color",N,N],[5,"xcb_alloc_color_unchecked","","Allocate a color",N,N],[5,"xcb_alloc_named_color_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_alloc_named_color","","",N,N],[5,"xcb_alloc_named_color_unchecked","","",N,N],[5,"xcb_alloc_color_cells_pixels","","",N,N],[5,"xcb_alloc_color_cells_pixels_length","","",N,N],[5,"xcb_alloc_color_cells_pixels_end","","",N,N],[5,"xcb_alloc_color_cells_masks","","",N,N],[5,"xcb_alloc_color_cells_masks_length","","",N,N],[5,"xcb_alloc_color_cells_masks_end","","",N,N],[5,"xcb_alloc_color_cells_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_alloc_color_cells","","",N,N],[5,"xcb_alloc_color_cells_unchecked","","",N,N],[5,"xcb_alloc_color_planes_pixels","","",N,N],[5,"xcb_alloc_color_planes_pixels_length","","",N,N],[5,"xcb_alloc_color_planes_pixels_end","","",N,N],[5,"xcb_alloc_color_planes_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_alloc_color_planes","","",N,N],[5,"xcb_alloc_color_planes_unchecked","","",N,N],[5,"xcb_free_colors","","",N,N],[5,"xcb_free_colors_checked","","",N,N],[5,"xcb_coloritem_next","","",N,N],[5,"xcb_coloritem_end","","",N,N],[5,"xcb_store_colors","","",N,N],[5,"xcb_store_colors_checked","","",N,N],[5,"xcb_store_named_color","","",N,N],[5,"xcb_store_named_color_checked","","",N,N],[5,"xcb_rgb_next","","",N,N],[5,"xcb_rgb_end","","",N,N],[5,"xcb_query_colors_colors","","",N,N],[5,"xcb_query_colors_colors_length","","",N,N],[5,"xcb_query_colors_colors_iterator","","",N,N],[5,"xcb_query_colors_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_query_colors","","",N,N],[5,"xcb_query_colors_unchecked","","",N,N],[5,"xcb_lookup_color_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_lookup_color","","",N,N],[5,"xcb_lookup_color_unchecked","","",N,N],[5,"xcb_create_cursor","","",N,N],[5,"xcb_create_cursor_checked","","",N,N],[5,"xcb_create_glyph_cursor","","create cursor",N,N],[5,"xcb_create_glyph_cursor_checked","","create cursor",N,N],[5,"xcb_free_cursor","","Deletes a cursor",N,N],[5,"xcb_free_cursor_checked","","Deletes a cursor",N,N],[5,"xcb_recolor_cursor","","",N,N],[5,"xcb_recolor_cursor_checked","","",N,N],[5,"xcb_query_best_size_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_query_best_size","","",N,N],[5,"xcb_query_best_size_unchecked","","",N,N],[5,"xcb_query_extension_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_query_extension","","check if extension is present",N,N],[5,"xcb_query_extension_unchecked","","check if extension is present",N,N],[5,"xcb_list_extensions_names_length","","",N,N],[5,"xcb_list_extensions_names_iterator","","",N,N],[5,"xcb_list_extensions_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_list_extensions","","",N,N],[5,"xcb_list_extensions_unchecked","","",N,N],[5,"xcb_change_keyboard_mapping","","",N,N],[5,"xcb_change_keyboard_mapping_checked","","",N,N],[5,"xcb_get_keyboard_mapping_keysyms","","",N,N],[5,"xcb_get_keyboard_mapping_keysyms_length","","",N,N],[5,"xcb_get_keyboard_mapping_keysyms_end","","",N,N],[5,"xcb_get_keyboard_mapping_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_keyboard_mapping","","",N,N],[5,"xcb_get_keyboard_mapping_unchecked","","",N,N],[5,"xcb_change_keyboard_control","","",N,N],[5,"xcb_change_keyboard_control_checked","","",N,N],[5,"xcb_get_keyboard_control_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_keyboard_control","","",N,N],[5,"xcb_get_keyboard_control_unchecked","","",N,N],[5,"xcb_bell","","",N,N],[5,"xcb_bell_checked","","",N,N],[5,"xcb_change_pointer_control","","",N,N],[5,"xcb_change_pointer_control_checked","","",N,N],[5,"xcb_get_pointer_control_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_pointer_control","","",N,N],[5,"xcb_get_pointer_control_unchecked","","",N,N],[5,"xcb_set_screen_saver","","",N,N],[5,"xcb_set_screen_saver_checked","","",N,N],[5,"xcb_get_screen_saver_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_screen_saver","","",N,N],[5,"xcb_get_screen_saver_unchecked","","",N,N],[5,"xcb_change_hosts","","",N,N],[5,"xcb_change_hosts_checked","","",N,N],[5,"xcb_host_address","","",N,N],[5,"xcb_host_address_length","","",N,N],[5,"xcb_host_address_end","","",N,N],[5,"xcb_host_next","","",N,N],[5,"xcb_host_end","","",N,N],[5,"xcb_list_hosts_hosts_length","","",N,N],[5,"xcb_list_hosts_hosts_iterator","","",N,N],[5,"xcb_list_hosts_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_list_hosts","","",N,N],[5,"xcb_list_hosts_unchecked","","",N,N],[5,"xcb_set_access_control","","",N,N],[5,"xcb_set_access_control_checked","","",N,N],[5,"xcb_set_close_down_mode","","",N,N],[5,"xcb_set_close_down_mode_checked","","",N,N],[5,"xcb_kill_client","","kills a client",N,N],[5,"xcb_kill_client_checked","","kills a client",N,N],[5,"xcb_rotate_properties","","",N,N],[5,"xcb_rotate_properties_checked","","",N,N],[5,"xcb_force_screen_saver","","",N,N],[5,"xcb_force_screen_saver_checked","","",N,N],[5,"xcb_set_pointer_mapping_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_set_pointer_mapping","","",N,N],[5,"xcb_set_pointer_mapping_unchecked","","",N,N],[5,"xcb_get_pointer_mapping_map","","",N,N],[5,"xcb_get_pointer_mapping_map_length","","",N,N],[5,"xcb_get_pointer_mapping_map_end","","",N,N],[5,"xcb_get_pointer_mapping_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_pointer_mapping","","",N,N],[5,"xcb_get_pointer_mapping_unchecked","","",N,N],[5,"xcb_set_modifier_mapping_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_set_modifier_mapping","","",N,N],[5,"xcb_set_modifier_mapping_unchecked","","",N,N],[5,"xcb_get_modifier_mapping_keycodes","","",N,N],[5,"xcb_get_modifier_mapping_keycodes_length","","",N,N],[5,"xcb_get_modifier_mapping_keycodes_end","","",N,N],[5,"xcb_get_modifier_mapping_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_get_modifier_mapping","","",N,N],[5,"xcb_get_modifier_mapping_unchecked","","",N,N],[5,"xcb_no_operation","","",N,N],[5,"xcb_no_operation_checked","","",N,N],[6,"xcb_window_t","","",N,N],[6,"xcb_pixmap_t","","",N,N],[6,"xcb_cursor_t","","",N,N],[6,"xcb_font_t","","",N,N],[6,"xcb_gcontext_t","","",N,N],[6,"xcb_colormap_t","","",N,N],[6,"xcb_atom_t","","",N,N],[6,"xcb_drawable_t","","",N,N],[6,"xcb_fontable_t","","",N,N],[6,"xcb_visualid_t","","",N,N],[6,"xcb_timestamp_t","","",N,N],[6,"xcb_keysym_t","","",N,N],[6,"xcb_keycode_t","","",N,N],[6,"xcb_button_t","","",N,N],[6,"xcb_visual_class_t","","",N,N],[6,"xcb_event_mask_t","","",N,N],[6,"xcb_backing_store_t","","",N,N],[6,"xcb_image_order_t","","",N,N],[6,"xcb_mod_mask_t","","",N,N],[6,"xcb_key_but_mask_t","","",N,N],[6,"xcb_window_enum_t","","",N,N],[6,"xcb_key_release_event_t","","",N,N],[6,"xcb_button_mask_t","","",N,N],[6,"xcb_button_release_event_t","","",N,N],[6,"xcb_motion_t","","",N,N],[6,"xcb_notify_detail_t","","",N,N],[6,"xcb_notify_mode_t","","",N,N],[6,"xcb_leave_notify_event_t","","",N,N],[6,"xcb_focus_out_event_t","","",N,N],[6,"xcb_visibility_t","","",N,N],[6,"xcb_place_t","","",N,N],[6,"xcb_circulate_request_event_t","","",N,N],[6,"xcb_property_t","","",N,N],[6,"xcb_time_t","","",N,N],[6,"xcb_atom_enum_t","","",N,N],[6,"xcb_colormap_state_t","","",N,N],[6,"xcb_colormap_enum_t","","",N,N],[6,"xcb_mapping_t","","",N,N],[6,"xcb_window_error_t","","",N,N],[6,"xcb_pixmap_error_t","","",N,N],[6,"xcb_atom_error_t","","",N,N],[6,"xcb_cursor_error_t","","",N,N],[6,"xcb_font_error_t","","",N,N],[6,"xcb_match_error_t","","",N,N],[6,"xcb_drawable_error_t","","",N,N],[6,"xcb_access_error_t","","",N,N],[6,"xcb_alloc_error_t","","",N,N],[6,"xcb_colormap_error_t","","",N,N],[6,"xcb_g_context_error_t","","",N,N],[6,"xcb_id_choice_error_t","","",N,N],[6,"xcb_name_error_t","","",N,N],[6,"xcb_length_error_t","","",N,N],[6,"xcb_implementation_error_t","","",N,N],[6,"xcb_window_class_t","","",N,N],[6,"xcb_cw_t","","",N,N],[6,"xcb_back_pixmap_t","","",N,N],[6,"xcb_gravity_t","","",N,N],[6,"xcb_map_state_t","","",N,N],[6,"xcb_set_mode_t","","",N,N],[6,"xcb_config_window_t","","",N,N],[6,"xcb_stack_mode_t","","",N,N],[6,"xcb_circulate_t","","",N,N],[6,"xcb_prop_mode_t","","",N,N],[6,"xcb_get_property_type_t","","",N,N],[6,"xcb_send_event_dest_t","","",N,N],[6,"xcb_grab_mode_t","","",N,N],[6,"xcb_grab_status_t","","",N,N],[6,"xcb_cursor_enum_t","","",N,N],[6,"xcb_button_index_t","","",N,N],[6,"xcb_grab_t","","",N,N],[6,"xcb_allow_t","","",N,N],[6,"xcb_input_focus_t","","",N,N],[6,"xcb_font_draw_t","","",N,N],[6,"xcb_gc_t","","",N,N],[6,"xcb_gx_t","","",N,N],[6,"xcb_line_style_t","","",N,N],[6,"xcb_cap_style_t","","",N,N],[6,"xcb_join_style_t","","",N,N],[6,"xcb_fill_style_t","","",N,N],[6,"xcb_fill_rule_t","","",N,N],[6,"xcb_subwindow_mode_t","","",N,N],[6,"xcb_arc_mode_t","","",N,N],[6,"xcb_clip_ordering_t","","",N,N],[6,"xcb_coord_mode_t","","",N,N],[6,"xcb_poly_shape_t","","",N,N],[6,"xcb_image_format_t","","",N,N],[6,"xcb_colormap_alloc_t","","",N,N],[6,"xcb_color_flag_t","","",N,N],[6,"xcb_pixmap_enum_t","","",N,N],[6,"xcb_font_enum_t","","",N,N],[6,"xcb_query_shape_of_t","","",N,N],[6,"xcb_kb_t","","",N,N],[6,"xcb_led_mode_t","","",N,N],[6,"xcb_auto_repeat_mode_t","","",N,N],[6,"xcb_blanking_t","","",N,N],[6,"xcb_exposures_t","","",N,N],[6,"xcb_host_mode_t","","",N,N],[6,"xcb_family_t","","",N,N],[6,"xcb_access_control_t","","",N,N],[6,"xcb_close_down_t","","",N,N],[6,"xcb_kill_t","","",N,N],[6,"xcb_screen_saver_t","","",N,N],[6,"xcb_mapping_status_t","","",N,N],[6,"xcb_map_index_t","","",N,N],[17,"XCB_VISUAL_CLASS_STATIC_GRAY","","",N,N],[17,"XCB_VISUAL_CLASS_GRAY_SCALE","","",N,N],[17,"XCB_VISUAL_CLASS_STATIC_COLOR","","",N,N],[17,"XCB_VISUAL_CLASS_PSEUDO_COLOR","","",N,N],[17,"XCB_VISUAL_CLASS_TRUE_COLOR","","",N,N],[17,"XCB_VISUAL_CLASS_DIRECT_COLOR","","",N,N],[17,"XCB_EVENT_MASK_NO_EVENT","","",N,N],[17,"XCB_EVENT_MASK_KEY_PRESS","","",N,N],[17,"XCB_EVENT_MASK_KEY_RELEASE","","",N,N],[17,"XCB_EVENT_MASK_BUTTON_PRESS","","",N,N],[17,"XCB_EVENT_MASK_BUTTON_RELEASE","","",N,N],[17,"XCB_EVENT_MASK_ENTER_WINDOW","","",N,N],[17,"XCB_EVENT_MASK_LEAVE_WINDOW","","",N,N],[17,"XCB_EVENT_MASK_POINTER_MOTION","","",N,N],[17,"XCB_EVENT_MASK_POINTER_MOTION_HINT","","",N,N],[17,"XCB_EVENT_MASK_BUTTON_1_MOTION","","",N,N],[17,"XCB_EVENT_MASK_BUTTON_2_MOTION","","",N,N],[17,"XCB_EVENT_MASK_BUTTON_3_MOTION","","",N,N],[17,"XCB_EVENT_MASK_BUTTON_4_MOTION","","",N,N],[17,"XCB_EVENT_MASK_BUTTON_5_MOTION","","",N,N],[17,"XCB_EVENT_MASK_BUTTON_MOTION","","",N,N],[17,"XCB_EVENT_MASK_KEYMAP_STATE","","",N,N],[17,"XCB_EVENT_MASK_EXPOSURE","","",N,N],[17,"XCB_EVENT_MASK_VISIBILITY_CHANGE","","",N,N],[17,"XCB_EVENT_MASK_STRUCTURE_NOTIFY","","",N,N],[17,"XCB_EVENT_MASK_RESIZE_REDIRECT","","",N,N],[17,"XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY","","",N,N],[17,"XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT","","",N,N],[17,"XCB_EVENT_MASK_FOCUS_CHANGE","","",N,N],[17,"XCB_EVENT_MASK_PROPERTY_CHANGE","","",N,N],[17,"XCB_EVENT_MASK_COLOR_MAP_CHANGE","","",N,N],[17,"XCB_EVENT_MASK_OWNER_GRAB_BUTTON","","",N,N],[17,"XCB_BACKING_STORE_NOT_USEFUL","","",N,N],[17,"XCB_BACKING_STORE_WHEN_MAPPED","","",N,N],[17,"XCB_BACKING_STORE_ALWAYS","","",N,N],[17,"XCB_IMAGE_ORDER_LSB_FIRST","","",N,N],[17,"XCB_IMAGE_ORDER_MSB_FIRST","","",N,N],[17,"XCB_MOD_MASK_SHIFT","","",N,N],[17,"XCB_MOD_MASK_LOCK","","",N,N],[17,"XCB_MOD_MASK_CONTROL","","",N,N],[17,"XCB_MOD_MASK_1","","",N,N],[17,"XCB_MOD_MASK_2","","",N,N],[17,"XCB_MOD_MASK_3","","",N,N],[17,"XCB_MOD_MASK_4","","",N,N],[17,"XCB_MOD_MASK_5","","",N,N],[17,"XCB_MOD_MASK_ANY","","",N,N],[17,"XCB_KEY_BUT_MASK_SHIFT","","",N,N],[17,"XCB_KEY_BUT_MASK_LOCK","","",N,N],[17,"XCB_KEY_BUT_MASK_CONTROL","","",N,N],[17,"XCB_KEY_BUT_MASK_MOD_1","","",N,N],[17,"XCB_KEY_BUT_MASK_MOD_2","","",N,N],[17,"XCB_KEY_BUT_MASK_MOD_3","","",N,N],[17,"XCB_KEY_BUT_MASK_MOD_4","","",N,N],[17,"XCB_KEY_BUT_MASK_MOD_5","","",N,N],[17,"XCB_KEY_BUT_MASK_BUTTON_1","","",N,N],[17,"XCB_KEY_BUT_MASK_BUTTON_2","","",N,N],[17,"XCB_KEY_BUT_MASK_BUTTON_3","","",N,N],[17,"XCB_KEY_BUT_MASK_BUTTON_4","","",N,N],[17,"XCB_KEY_BUT_MASK_BUTTON_5","","",N,N],[17,"XCB_WINDOW_NONE","","",N,N],[17,"XCB_KEY_PRESS","","",N,N],[17,"XCB_KEY_RELEASE","","",N,N],[17,"XCB_BUTTON_MASK_1","","",N,N],[17,"XCB_BUTTON_MASK_2","","",N,N],[17,"XCB_BUTTON_MASK_3","","",N,N],[17,"XCB_BUTTON_MASK_4","","",N,N],[17,"XCB_BUTTON_MASK_5","","",N,N],[17,"XCB_BUTTON_MASK_ANY","","",N,N],[17,"XCB_BUTTON_PRESS","","",N,N],[17,"XCB_BUTTON_RELEASE","","",N,N],[17,"XCB_MOTION_NORMAL","","",N,N],[17,"XCB_MOTION_HINT","","",N,N],[17,"XCB_MOTION_NOTIFY","","",N,N],[17,"XCB_NOTIFY_DETAIL_ANCESTOR","","",N,N],[17,"XCB_NOTIFY_DETAIL_VIRTUAL","","",N,N],[17,"XCB_NOTIFY_DETAIL_INFERIOR","","",N,N],[17,"XCB_NOTIFY_DETAIL_NONLINEAR","","",N,N],[17,"XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL","","",N,N],[17,"XCB_NOTIFY_DETAIL_POINTER","","",N,N],[17,"XCB_NOTIFY_DETAIL_POINTER_ROOT","","",N,N],[17,"XCB_NOTIFY_DETAIL_NONE","","",N,N],[17,"XCB_NOTIFY_MODE_NORMAL","","",N,N],[17,"XCB_NOTIFY_MODE_GRAB","","",N,N],[17,"XCB_NOTIFY_MODE_UNGRAB","","",N,N],[17,"XCB_NOTIFY_MODE_WHILE_GRABBED","","",N,N],[17,"XCB_ENTER_NOTIFY","","",N,N],[17,"XCB_LEAVE_NOTIFY","","",N,N],[17,"XCB_FOCUS_IN","","",N,N],[17,"XCB_FOCUS_OUT","","",N,N],[17,"XCB_KEYMAP_NOTIFY","","",N,N],[17,"XCB_EXPOSE","","",N,N],[17,"XCB_GRAPHICS_EXPOSURE","","",N,N],[17,"XCB_NO_EXPOSURE","","",N,N],[17,"XCB_VISIBILITY_UNOBSCURED","","",N,N],[17,"XCB_VISIBILITY_PARTIALLY_OBSCURED","","",N,N],[17,"XCB_VISIBILITY_FULLY_OBSCURED","","",N,N],[17,"XCB_VISIBILITY_NOTIFY","","",N,N],[17,"XCB_CREATE_NOTIFY","","",N,N],[17,"XCB_DESTROY_NOTIFY","","",N,N],[17,"XCB_UNMAP_NOTIFY","","",N,N],[17,"XCB_MAP_NOTIFY","","",N,N],[17,"XCB_MAP_REQUEST","","",N,N],[17,"XCB_REPARENT_NOTIFY","","",N,N],[17,"XCB_CONFIGURE_NOTIFY","","",N,N],[17,"XCB_CONFIGURE_REQUEST","","",N,N],[17,"XCB_GRAVITY_NOTIFY","","",N,N],[17,"XCB_RESIZE_REQUEST","","",N,N],[17,"XCB_PLACE_ON_TOP","","The window is now on top of all siblings.",N,N],[17,"XCB_PLACE_ON_BOTTOM","","The window is now below all siblings.",N,N],[17,"XCB_CIRCULATE_NOTIFY","","",N,N],[17,"XCB_CIRCULATE_REQUEST","","",N,N],[17,"XCB_PROPERTY_NEW_VALUE","","",N,N],[17,"XCB_PROPERTY_DELETE","","",N,N],[17,"XCB_PROPERTY_NOTIFY","","",N,N],[17,"XCB_SELECTION_CLEAR","","",N,N],[17,"XCB_TIME_CURRENT_TIME","","",N,N],[17,"XCB_ATOM_NONE","","",N,N],[17,"XCB_ATOM_ANY","","",N,N],[17,"XCB_ATOM_PRIMARY","","",N,N],[17,"XCB_ATOM_SECONDARY","","",N,N],[17,"XCB_ATOM_ARC","","",N,N],[17,"XCB_ATOM_ATOM","","",N,N],[17,"XCB_ATOM_BITMAP","","",N,N],[17,"XCB_ATOM_CARDINAL","","",N,N],[17,"XCB_ATOM_COLORMAP","","",N,N],[17,"XCB_ATOM_CURSOR","","",N,N],[17,"XCB_ATOM_CUT_BUFFER0","","",N,N],[17,"XCB_ATOM_CUT_BUFFER1","","",N,N],[17,"XCB_ATOM_CUT_BUFFER2","","",N,N],[17,"XCB_ATOM_CUT_BUFFER3","","",N,N],[17,"XCB_ATOM_CUT_BUFFER4","","",N,N],[17,"XCB_ATOM_CUT_BUFFER5","","",N,N],[17,"XCB_ATOM_CUT_BUFFER6","","",N,N],[17,"XCB_ATOM_CUT_BUFFER7","","",N,N],[17,"XCB_ATOM_DRAWABLE","","",N,N],[17,"XCB_ATOM_FONT","","",N,N],[17,"XCB_ATOM_INTEGER","","",N,N],[17,"XCB_ATOM_PIXMAP","","",N,N],[17,"XCB_ATOM_POINT","","",N,N],[17,"XCB_ATOM_RECTANGLE","","",N,N],[17,"XCB_ATOM_RESOURCE_MANAGER","","",N,N],[17,"XCB_ATOM_RGB_COLOR_MAP","","",N,N],[17,"XCB_ATOM_RGB_BEST_MAP","","",N,N],[17,"XCB_ATOM_RGB_BLUE_MAP","","",N,N],[17,"XCB_ATOM_RGB_DEFAULT_MAP","","",N,N],[17,"XCB_ATOM_RGB_GRAY_MAP","","",N,N],[17,"XCB_ATOM_RGB_GREEN_MAP","","",N,N],[17,"XCB_ATOM_RGB_RED_MAP","","",N,N],[17,"XCB_ATOM_STRING","","",N,N],[17,"XCB_ATOM_VISUALID","","",N,N],[17,"XCB_ATOM_WINDOW","","",N,N],[17,"XCB_ATOM_WM_COMMAND","","",N,N],[17,"XCB_ATOM_WM_HINTS","","",N,N],[17,"XCB_ATOM_WM_CLIENT_MACHINE","","",N,N],[17,"XCB_ATOM_WM_ICON_NAME","","",N,N],[17,"XCB_ATOM_WM_ICON_SIZE","","",N,N],[17,"XCB_ATOM_WM_NAME","","",N,N],[17,"XCB_ATOM_WM_NORMAL_HINTS","","",N,N],[17,"XCB_ATOM_WM_SIZE_HINTS","","",N,N],[17,"XCB_ATOM_WM_ZOOM_HINTS","","",N,N],[17,"XCB_ATOM_MIN_SPACE","","",N,N],[17,"XCB_ATOM_NORM_SPACE","","",N,N],[17,"XCB_ATOM_MAX_SPACE","","",N,N],[17,"XCB_ATOM_END_SPACE","","",N,N],[17,"XCB_ATOM_SUPERSCRIPT_X","","",N,N],[17,"XCB_ATOM_SUPERSCRIPT_Y","","",N,N],[17,"XCB_ATOM_SUBSCRIPT_X","","",N,N],[17,"XCB_ATOM_SUBSCRIPT_Y","","",N,N],[17,"XCB_ATOM_UNDERLINE_POSITION","","",N,N],[17,"XCB_ATOM_UNDERLINE_THICKNESS","","",N,N],[17,"XCB_ATOM_STRIKEOUT_ASCENT","","",N,N],[17,"XCB_ATOM_STRIKEOUT_DESCENT","","",N,N],[17,"XCB_ATOM_ITALIC_ANGLE","","",N,N],[17,"XCB_ATOM_X_HEIGHT","","",N,N],[17,"XCB_ATOM_QUAD_WIDTH","","",N,N],[17,"XCB_ATOM_WEIGHT","","",N,N],[17,"XCB_ATOM_POINT_SIZE","","",N,N],[17,"XCB_ATOM_RESOLUTION","","",N,N],[17,"XCB_ATOM_COPYRIGHT","","",N,N],[17,"XCB_ATOM_NOTICE","","",N,N],[17,"XCB_ATOM_FONT_NAME","","",N,N],[17,"XCB_ATOM_FAMILY_NAME","","",N,N],[17,"XCB_ATOM_FULL_NAME","","",N,N],[17,"XCB_ATOM_CAP_HEIGHT","","",N,N],[17,"XCB_ATOM_WM_CLASS","","",N,N],[17,"XCB_ATOM_WM_TRANSIENT_FOR","","",N,N],[17,"XCB_SELECTION_REQUEST","","",N,N],[17,"XCB_SELECTION_NOTIFY","","",N,N],[17,"XCB_COLORMAP_STATE_UNINSTALLED","","The colormap was uninstalled.",N,N],[17,"XCB_COLORMAP_STATE_INSTALLED","","The colormap was installed.",N,N],[17,"XCB_COLORMAP_NONE","","",N,N],[17,"XCB_COLORMAP_NOTIFY","","",N,N],[17,"XCB_CLIENT_MESSAGE","","",N,N],[17,"XCB_MAPPING_MODIFIER","","",N,N],[17,"XCB_MAPPING_KEYBOARD","","",N,N],[17,"XCB_MAPPING_POINTER","","",N,N],[17,"XCB_MAPPING_NOTIFY","","",N,N],[17,"XCB_GE_GENERIC","","",N,N],[17,"XCB_REQUEST","","",N,N],[17,"XCB_VALUE","","",N,N],[17,"XCB_WINDOW","","",N,N],[17,"XCB_PIXMAP","","",N,N],[17,"XCB_ATOM","","",N,N],[17,"XCB_CURSOR","","",N,N],[17,"XCB_FONT","","",N,N],[17,"XCB_MATCH","","",N,N],[17,"XCB_DRAWABLE","","",N,N],[17,"XCB_ACCESS","","",N,N],[17,"XCB_ALLOC","","",N,N],[17,"XCB_COLORMAP","","",N,N],[17,"XCB_G_CONTEXT","","",N,N],[17,"XCB_ID_CHOICE","","",N,N],[17,"XCB_NAME","","",N,N],[17,"XCB_LENGTH","","",N,N],[17,"XCB_IMPLEMENTATION","","",N,N],[17,"XCB_WINDOW_CLASS_COPY_FROM_PARENT","","",N,N],[17,"XCB_WINDOW_CLASS_INPUT_OUTPUT","","",N,N],[17,"XCB_WINDOW_CLASS_INPUT_ONLY","","",N,N],[17,"XCB_CW_BACK_PIXMAP","","Overrides the default background-pixmap. The background pixmap and window must have the same root and same depth. Any size pixmap can be used, although some sizes may be faster than others.",N,N],[17,"XCB_CW_BACK_PIXEL","","Overrides `BackPixmap`. A pixmap of undefined size filled with the specified background pixel is used for the background. Range-checking is not performed, the background pixel is truncated to the appropriate number of bits.",N,N],[17,"XCB_CW_BORDER_PIXMAP","","Overrides the default border-pixmap. The border pixmap and window must have the same root and the same depth. Any size pixmap can be used, although some sizes may be faster than others.",N,N],[17,"XCB_CW_BORDER_PIXEL","","Overrides `BorderPixmap`. A pixmap of undefined size filled with the specified border pixel is used for the border. Range checking is not performed on the border-pixel value, it is truncated to the appropriate number of bits.",N,N],[17,"XCB_CW_BIT_GRAVITY","","Defines which region of the window should be retained if the window is resized.",N,N],[17,"XCB_CW_WIN_GRAVITY","","Defines how the window should be repositioned if the parent is resized (see `ConfigureWindow`).",N,N],[17,"XCB_CW_BACKING_STORE","","A backing-store of `WhenMapped` advises the server that maintaining contents of obscured regions when the window is mapped would be beneficial. A backing-store of `Always` advises the server that maintaining contents even when the window is unmapped would be beneficial. In this case, the server may generate an exposure event when the window is created. A value of `NotUseful` advises the server that maintaining contents is unnecessary, although a server may still choose to maintain contents while the window is mapped. Note that if the server maintains contents, then the server should maintain complete contents not just the region within the parent boundaries, even if the window is larger than its parent. While the server maintains contents, exposure events will not normally be generated, but the server may stop maintaining contents at any time.",N,N],[17,"XCB_CW_BACKING_PLANES","","The backing-planes indicates (with bits set to 1) which bit planes of the window hold dynamic data that must be preserved in backing-stores and during save-unders.",N,N],[17,"XCB_CW_BACKING_PIXEL","","The backing-pixel specifies what value to use in planes not covered by backing-planes. The server is free to save only the specified bit planes in the backing-store or save-under and regenerate the remaining planes with the specified pixel value. Any bits beyond the specified depth of the window in these values are simply ignored.",N,N],[17,"XCB_CW_OVERRIDE_REDIRECT","","The override-redirect specifies whether map and configure requests on this window should override a SubstructureRedirect on the parent, typically to inform a window manager not to tamper with the window.",N,N],[17,"XCB_CW_SAVE_UNDER","","If 1, the server is advised that when this window is mapped, saving the contents of windows it obscures would be beneficial.",N,N],[17,"XCB_CW_EVENT_MASK","","The event-mask defines which events the client is interested in for this window (or for some event types, inferiors of the window).",N,N],[17,"XCB_CW_DONT_PROPAGATE","","The do-not-propagate-mask defines which events should not be propagated to ancestor windows when no client has the event type selected in this window.",N,N],[17,"XCB_CW_COLORMAP","","The colormap specifies the colormap that best reflects the true colors of the window. Servers capable of supporting multiple hardware colormaps may use this information, and window man- agers may use it for InstallColormap requests. The colormap must have the same visual type and root as the window (or a Match error results). If CopyFromParent is specified, the parent's colormap is copied (subsequent changes to the parent's colormap attribute do not affect the child). However, the window must have the same visual type as the parent (or a Match error results), and the parent must not have a colormap of None (or a Match error results). For an explanation of None, see FreeColormap request. The colormap is copied by sharing the colormap object between the child and the parent, not by making a complete copy of the colormap contents.",N,N],[17,"XCB_CW_CURSOR","","If a cursor is specified, it will be used whenever the pointer is in the window. If None is speci- fied, the parent's cursor will be used when the pointer is in the window, and any change in the parent's cursor will cause an immediate change in the displayed cursor.",N,N],[17,"XCB_BACK_PIXMAP_NONE","","",N,N],[17,"XCB_BACK_PIXMAP_PARENT_RELATIVE","","",N,N],[17,"XCB_GRAVITY_BIT_FORGET","","",N,N],[17,"XCB_GRAVITY_WIN_UNMAP","","",N,N],[17,"XCB_GRAVITY_NORTH_WEST","","",N,N],[17,"XCB_GRAVITY_NORTH","","",N,N],[17,"XCB_GRAVITY_NORTH_EAST","","",N,N],[17,"XCB_GRAVITY_WEST","","",N,N],[17,"XCB_GRAVITY_CENTER","","",N,N],[17,"XCB_GRAVITY_EAST","","",N,N],[17,"XCB_GRAVITY_SOUTH_WEST","","",N,N],[17,"XCB_GRAVITY_SOUTH","","",N,N],[17,"XCB_GRAVITY_SOUTH_EAST","","",N,N],[17,"XCB_GRAVITY_STATIC","","",N,N],[17,"XCB_CREATE_WINDOW","","",N,N],[17,"XCB_CHANGE_WINDOW_ATTRIBUTES","","",N,N],[17,"XCB_MAP_STATE_UNMAPPED","","",N,N],[17,"XCB_MAP_STATE_UNVIEWABLE","","",N,N],[17,"XCB_MAP_STATE_VIEWABLE","","",N,N],[17,"XCB_GET_WINDOW_ATTRIBUTES","","",N,N],[17,"XCB_DESTROY_WINDOW","","",N,N],[17,"XCB_DESTROY_SUBWINDOWS","","",N,N],[17,"XCB_SET_MODE_INSERT","","",N,N],[17,"XCB_SET_MODE_DELETE","","",N,N],[17,"XCB_CHANGE_SAVE_SET","","",N,N],[17,"XCB_REPARENT_WINDOW","","",N,N],[17,"XCB_MAP_WINDOW","","",N,N],[17,"XCB_MAP_SUBWINDOWS","","",N,N],[17,"XCB_UNMAP_WINDOW","","",N,N],[17,"XCB_UNMAP_SUBWINDOWS","","",N,N],[17,"XCB_CONFIG_WINDOW_X","","",N,N],[17,"XCB_CONFIG_WINDOW_Y","","",N,N],[17,"XCB_CONFIG_WINDOW_WIDTH","","",N,N],[17,"XCB_CONFIG_WINDOW_HEIGHT","","",N,N],[17,"XCB_CONFIG_WINDOW_BORDER_WIDTH","","",N,N],[17,"XCB_CONFIG_WINDOW_SIBLING","","",N,N],[17,"XCB_CONFIG_WINDOW_STACK_MODE","","",N,N],[17,"XCB_STACK_MODE_ABOVE","","",N,N],[17,"XCB_STACK_MODE_BELOW","","",N,N],[17,"XCB_STACK_MODE_TOP_IF","","",N,N],[17,"XCB_STACK_MODE_BOTTOM_IF","","",N,N],[17,"XCB_STACK_MODE_OPPOSITE","","",N,N],[17,"XCB_CONFIGURE_WINDOW","","",N,N],[17,"XCB_CIRCULATE_RAISE_LOWEST","","",N,N],[17,"XCB_CIRCULATE_LOWER_HIGHEST","","",N,N],[17,"XCB_CIRCULATE_WINDOW","","",N,N],[17,"XCB_GET_GEOMETRY","","",N,N],[17,"XCB_QUERY_TREE","","",N,N],[17,"XCB_INTERN_ATOM","","",N,N],[17,"XCB_GET_ATOM_NAME","","",N,N],[17,"XCB_PROP_MODE_REPLACE","","Discard the previous property value and store the new data.",N,N],[17,"XCB_PROP_MODE_PREPEND","","Insert the new data before the beginning of existing data. The `format` must match existing property value. If the property is undefined, it is treated as defined with the correct type and format with zero-length data.",N,N],[17,"XCB_PROP_MODE_APPEND","","Insert the new data after the beginning of existing data. The `format` must match existing property value. If the property is undefined, it is treated as defined with the correct type and format with zero-length data.",N,N],[17,"XCB_CHANGE_PROPERTY","","",N,N],[17,"XCB_DELETE_PROPERTY","","",N,N],[17,"XCB_GET_PROPERTY_TYPE_ANY","","",N,N],[17,"XCB_GET_PROPERTY","","",N,N],[17,"XCB_LIST_PROPERTIES","","",N,N],[17,"XCB_SET_SELECTION_OWNER","","",N,N],[17,"XCB_GET_SELECTION_OWNER","","",N,N],[17,"XCB_CONVERT_SELECTION","","",N,N],[17,"XCB_SEND_EVENT_DEST_POINTER_WINDOW","","",N,N],[17,"XCB_SEND_EVENT_DEST_ITEM_FOCUS","","",N,N],[17,"XCB_SEND_EVENT","","",N,N],[17,"XCB_GRAB_MODE_SYNC","","The state of the keyboard appears to freeze: No further keyboard events are generated by the server until the grabbing client issues a releasing `AllowEvents` request or until the keyboard grab is released.",N,N],[17,"XCB_GRAB_MODE_ASYNC","","Keyboard event processing continues normally.",N,N],[17,"XCB_GRAB_STATUS_SUCCESS","","",N,N],[17,"XCB_GRAB_STATUS_ALREADY_GRABBED","","",N,N],[17,"XCB_GRAB_STATUS_INVALID_TIME","","",N,N],[17,"XCB_GRAB_STATUS_NOT_VIEWABLE","","",N,N],[17,"XCB_GRAB_STATUS_FROZEN","","",N,N],[17,"XCB_CURSOR_NONE","","",N,N],[17,"XCB_GRAB_POINTER","","",N,N],[17,"XCB_UNGRAB_POINTER","","",N,N],[17,"XCB_BUTTON_INDEX_ANY","","Any of the following (or none):",N,N],[17,"XCB_BUTTON_INDEX_1","","The left mouse button.",N,N],[17,"XCB_BUTTON_INDEX_2","","The right mouse button.",N,N],[17,"XCB_BUTTON_INDEX_3","","The middle mouse button.",N,N],[17,"XCB_BUTTON_INDEX_4","","Scroll wheel. TODO: direction?",N,N],[17,"XCB_BUTTON_INDEX_5","","Scroll wheel. TODO: direction?",N,N],[17,"XCB_GRAB_BUTTON","","",N,N],[17,"XCB_UNGRAB_BUTTON","","",N,N],[17,"XCB_CHANGE_ACTIVE_POINTER_GRAB","","",N,N],[17,"XCB_GRAB_KEYBOARD","","",N,N],[17,"XCB_UNGRAB_KEYBOARD","","",N,N],[17,"XCB_GRAB_ANY","","",N,N],[17,"XCB_GRAB_KEY","","",N,N],[17,"XCB_UNGRAB_KEY","","",N,N],[17,"XCB_ALLOW_ASYNC_POINTER","","For AsyncPointer, if the pointer is frozen by the client, pointer event processing continues normally. If the pointer is frozen twice by the client on behalf of two separate grabs, AsyncPointer thaws for both. AsyncPointer has no effect if the pointer is not frozen by the client, but the pointer need not be grabbed by the client.",N,N],[17,"XCB_ALLOW_SYNC_POINTER","","For SyncPointer, if the pointer is frozen and actively grabbed by the client, pointer event processing continues normally until the next ButtonPress or ButtonRelease event is reported to the client, at which time the pointer again appears to freeze. However, if the reported event causes the pointer grab to be released, then the pointer does not freeze. SyncPointer has no effect if the pointer is not frozen by the client or if the pointer is not grabbed by the client.",N,N],[17,"XCB_ALLOW_REPLAY_POINTER","","For ReplayPointer, if the pointer is actively grabbed by the client and is frozen as the result of an event having been sent to the client (either from the activation of a GrabButton or from a previous AllowEvents with mode SyncPointer but not from a GrabPointer), then the pointer grab is released and that event is completely reprocessed, this time ignoring any passive grabs at or above (towards the root) the grab-window of the grab just released. The request has no effect if the pointer is not grabbed by the client or if the pointer is not frozen as the result of an event.",N,N],[17,"XCB_ALLOW_ASYNC_KEYBOARD","","For AsyncKeyboard, if the keyboard is frozen by the client, keyboard event processing continues normally. If the keyboard is frozen twice by the client on behalf of two separate grabs, AsyncKeyboard thaws for both. AsyncKeyboard has no effect if the keyboard is not frozen by the client, but the keyboard need not be grabbed by the client.",N,N],[17,"XCB_ALLOW_SYNC_KEYBOARD","","For SyncKeyboard, if the keyboard is frozen and actively grabbed by the client, keyboard event processing continues normally until the next KeyPress or KeyRelease event is reported to the client, at which time the keyboard again appears to freeze. However, if the reported event causes the keyboard grab to be released, then the keyboard does not freeze. SyncKeyboard has no effect if the keyboard is not frozen by the client or if the keyboard is not grabbed by the client.",N,N],[17,"XCB_ALLOW_REPLAY_KEYBOARD","","For ReplayKeyboard, if the keyboard is actively grabbed by the client and is frozen as the result of an event having been sent to the client (either from the activation of a GrabKey or from a previous AllowEvents with mode SyncKeyboard but not from a GrabKeyboard), then the keyboard grab is released and that event is completely reprocessed, this time ignoring any passive grabs at or above (towards the root) the grab-window of the grab just released. The request has no effect if the keyboard is not grabbed by the client or if the keyboard is not frozen as the result of an event.",N,N],[17,"XCB_ALLOW_ASYNC_BOTH","","For AsyncBoth, if the pointer and the keyboard are frozen by the client, event processing for both devices continues normally. If a device is frozen twice by the client on behalf of two separate grabs, AsyncBoth thaws for both. AsyncBoth has no effect unless both pointer and keyboard are frozen by the client.",N,N],[17,"XCB_ALLOW_SYNC_BOTH","","For SyncBoth, if both pointer and keyboard are frozen by the client, event processing (for both devices) continues normally until the next ButtonPress, ButtonRelease, KeyPress, or KeyRelease event is reported to the client for a grabbed device (button event for the pointer, key event for the keyboard), at which time the devices again appear to freeze. However, if the reported event causes the grab to be released, then the devices do not freeze (but if the other device is still grabbed, then a subsequent event for it will still cause both devices to freeze). SyncBoth has no effect unless both pointer and keyboard are frozen by the client. If the pointer or keyboard is frozen twice by the client on behalf of two separate grabs, SyncBoth thaws for both (but a subsequent freeze for SyncBoth will only freeze each device once).",N,N],[17,"XCB_ALLOW_EVENTS","","",N,N],[17,"XCB_GRAB_SERVER","","",N,N],[17,"XCB_UNGRAB_SERVER","","",N,N],[17,"XCB_QUERY_POINTER","","",N,N],[17,"XCB_GET_MOTION_EVENTS","","",N,N],[17,"XCB_TRANSLATE_COORDINATES","","",N,N],[17,"XCB_WARP_POINTER","","",N,N],[17,"XCB_INPUT_FOCUS_NONE","","The focus reverts to `XCB_NONE`, so no window will have the input focus.",N,N],[17,"XCB_INPUT_FOCUS_POINTER_ROOT","","The focus reverts to `XCB_POINTER_ROOT` respectively. When the focus reverts, FocusIn and FocusOut events are generated, but the last-focus-change time is not changed.",N,N],[17,"XCB_INPUT_FOCUS_PARENT","","The focus reverts to the parent (or closest viewable ancestor) and the new revert_to value is `XCB_INPUT_FOCUS_NONE`.",N,N],[17,"XCB_INPUT_FOCUS_FOLLOW_KEYBOARD","","NOT YET DOCUMENTED. Only relevant for the xinput extension.",N,N],[17,"XCB_SET_INPUT_FOCUS","","",N,N],[17,"XCB_GET_INPUT_FOCUS","","",N,N],[17,"XCB_QUERY_KEYMAP","","",N,N],[17,"XCB_OPEN_FONT","","",N,N],[17,"XCB_CLOSE_FONT","","",N,N],[17,"XCB_FONT_DRAW_LEFT_TO_RIGHT","","",N,N],[17,"XCB_FONT_DRAW_RIGHT_TO_LEFT","","",N,N],[17,"XCB_QUERY_FONT","","",N,N],[17,"XCB_QUERY_TEXT_EXTENTS","","",N,N],[17,"XCB_LIST_FONTS","","",N,N],[17,"XCB_LIST_FONTS_WITH_INFO","","",N,N],[17,"XCB_SET_FONT_PATH","","",N,N],[17,"XCB_GET_FONT_PATH","","",N,N],[17,"XCB_CREATE_PIXMAP","","",N,N],[17,"XCB_FREE_PIXMAP","","",N,N],[17,"XCB_GC_FUNCTION","","TODO: Refer to GX",N,N],[17,"XCB_GC_PLANE_MASK","","In graphics operations, given a source and destination pixel, the result is computed bitwise on corresponding bits of the pixels; that is, a Boolean operation is performed in each bit plane. The plane-mask restricts the operation to a subset of planes, so the result is:",N,N],[17,"XCB_GC_FOREGROUND","","Foreground colorpixel.",N,N],[17,"XCB_GC_BACKGROUND","","Background colorpixel.",N,N],[17,"XCB_GC_LINE_WIDTH","","The line-width is measured in pixels and can be greater than or equal to one, a wide line, or the special value zero, a thin line.",N,N],[17,"XCB_GC_LINE_STYLE","","The line-style defines which sections of a line are drawn: Solid                The full path of the line is drawn. DoubleDash           The full path of the line is drawn, but the even dashes are filled differently                      than the odd dashes (see fill-style), with Butt cap-style used where even and                      odd dashes meet. OnOffDash            Only the even dashes are drawn, and cap-style applies to all internal ends of                      the individual dashes (except NotLast is treated as Butt).",N,N],[17,"XCB_GC_CAP_STYLE","","The cap-style defines how the endpoints of a path are drawn: NotLast    The result is equivalent to Butt, except that for a line-width of zero the final            endpoint is not drawn. Butt       The result is square at the endpoint (perpendicular to the slope of the line)            with no projection beyond. Round      The result is a circular arc with its diameter equal to the line-width, centered            on the endpoint; it is equivalent to Butt for line-width zero. Projecting The result is square at the end, but the path continues beyond the endpoint for            a distance equal to half the line-width; it is equivalent to Butt for line-width            zero.",N,N],[17,"XCB_GC_JOIN_STYLE","","The join-style defines how corners are drawn for wide lines: Miter               The outer edges of the two lines extend to meet at an angle. However, if the                     angle is less than 11 degrees, a Bevel join-style is used instead. Round               The result is a circular arc with a diameter equal to the line-width, centered                     on the joinpoint. Bevel               The result is Butt endpoint styles, and then the triangular notch is filled.",N,N],[17,"XCB_GC_FILL_STYLE","","The fill-style defines the contents of the source for line, text, and fill requests. For all text and fill requests (for example, PolyText8, PolyText16, PolyFillRectangle, FillPoly, and PolyFillArc) as well as for line requests with line-style Solid, (for example, PolyLine, PolySegment, PolyRectangle, PolyArc) and for the even dashes for line requests with line-style OnOffDash or DoubleDash: Solid                     Foreground Tiled                     Tile OpaqueStippled            A tile with the same width and height as stipple but with background                           everywhere stipple has a zero and with foreground everywhere stipple                           has a one Stippled                  Foreground masked by stipple For the odd dashes for line requests with line-style DoubleDash: Solid                     Background Tiled                     Same as for even dashes OpaqueStippled            Same as for even dashes Stippled                  Background masked by stipple",N,N],[17,"XCB_GC_FILL_RULE","","",N,N],[17,"XCB_GC_TILE","","The tile/stipple represents an infinite two-dimensional plane with the tile/stipple replicated in all dimensions. When that plane is superimposed on the drawable for use in a graphics operation, the upper-left corner of some instance of the tile/stipple is at the coordinates within the drawable specified by the tile/stipple origin. The tile/stipple and clip origins are interpreted relative to the origin of whatever destination drawable is specified in a graphics request. The tile pixmap must have the same root and depth as the gcontext (or a Match error results). The stipple pixmap must have depth one and must have the same root as the gcontext (or a Match error results). For fill-style Stippled (but not fill-style OpaqueStippled), the stipple pattern is tiled in a single plane and acts as an additional clip mask to be ANDed with the clip-mask. Any size pixmap can be used for tiling or stippling, although some sizes may be faster to use than others.",N,N],[17,"XCB_GC_STIPPLE","","The tile/stipple represents an infinite two-dimensional plane with the tile/stipple replicated in all dimensions. When that plane is superimposed on the drawable for use in a graphics operation, the upper-left corner of some instance of the tile/stipple is at the coordinates within the drawable specified by the tile/stipple origin. The tile/stipple and clip origins are interpreted relative to the origin of whatever destination drawable is specified in a graphics request. The tile pixmap must have the same root and depth as the gcontext (or a Match error results). The stipple pixmap must have depth one and must have the same root as the gcontext (or a Match error results). For fill-style Stippled (but not fill-style OpaqueStippled), the stipple pattern is tiled in a single plane and acts as an additional clip mask to be ANDed with the clip-mask. Any size pixmap can be used for tiling or stippling, although some sizes may be faster to use than others.",N,N],[17,"XCB_GC_TILE_STIPPLE_ORIGIN_X","","TODO",N,N],[17,"XCB_GC_TILE_STIPPLE_ORIGIN_Y","","TODO",N,N],[17,"XCB_GC_FONT","","Which font to use for the `ImageText8` and `ImageText16` requests.",N,N],[17,"XCB_GC_SUBWINDOW_MODE","","For ClipByChildren, both source and destination windows are additionally clipped by all viewable InputOutput children. For IncludeInferiors, neither source nor destination window is clipped by inferiors. This will result in including subwindow contents in the source and drawing through subwindow boundaries of the destination. The use of IncludeInferiors with a source or destination window of one depth with mapped inferiors of differing depth is not illegal, but the semantics is undefined by the core protocol.",N,N],[17,"XCB_GC_GRAPHICS_EXPOSURES","","Whether ExposureEvents should be generated (1) or not (0).",N,N],[17,"XCB_GC_CLIP_ORIGIN_X","","TODO",N,N],[17,"XCB_GC_CLIP_ORIGIN_Y","","TODO",N,N],[17,"XCB_GC_CLIP_MASK","","The clip-mask restricts writes to the destination drawable. Only pixels where the clip-mask has bits set to 1 are drawn. Pixels are not drawn outside the area covered by the clip-mask or where the clip-mask has bits set to 0. The clip-mask affects all graphics requests, but it does not clip sources. The clip-mask origin is interpreted relative to the origin of whatever destination drawable is specified in a graphics request. If a pixmap is specified as the clip-mask, it must have depth 1 and have the same root as the gcontext (or a Match error results). If clip-mask is None, then pixels are always drawn, regardless of the clip origin. The clip-mask can also be set with the SetClipRectangles request.",N,N],[17,"XCB_GC_DASH_OFFSET","","TODO",N,N],[17,"XCB_GC_DASH_LIST","","TODO",N,N],[17,"XCB_GC_ARC_MODE","","TODO",N,N],[17,"XCB_GX_CLEAR","","",N,N],[17,"XCB_GX_AND","","",N,N],[17,"XCB_GX_AND_REVERSE","","",N,N],[17,"XCB_GX_COPY","","",N,N],[17,"XCB_GX_AND_INVERTED","","",N,N],[17,"XCB_GX_NOOP","","",N,N],[17,"XCB_GX_XOR","","",N,N],[17,"XCB_GX_OR","","",N,N],[17,"XCB_GX_NOR","","",N,N],[17,"XCB_GX_EQUIV","","",N,N],[17,"XCB_GX_INVERT","","",N,N],[17,"XCB_GX_OR_REVERSE","","",N,N],[17,"XCB_GX_COPY_INVERTED","","",N,N],[17,"XCB_GX_OR_INVERTED","","",N,N],[17,"XCB_GX_NAND","","",N,N],[17,"XCB_GX_SET","","",N,N],[17,"XCB_LINE_STYLE_SOLID","","",N,N],[17,"XCB_LINE_STYLE_ON_OFF_DASH","","",N,N],[17,"XCB_LINE_STYLE_DOUBLE_DASH","","",N,N],[17,"XCB_CAP_STYLE_NOT_LAST","","",N,N],[17,"XCB_CAP_STYLE_BUTT","","",N,N],[17,"XCB_CAP_STYLE_ROUND","","",N,N],[17,"XCB_CAP_STYLE_PROJECTING","","",N,N],[17,"XCB_JOIN_STYLE_MITER","","",N,N],[17,"XCB_JOIN_STYLE_ROUND","","",N,N],[17,"XCB_JOIN_STYLE_BEVEL","","",N,N],[17,"XCB_FILL_STYLE_SOLID","","",N,N],[17,"XCB_FILL_STYLE_TILED","","",N,N],[17,"XCB_FILL_STYLE_STIPPLED","","",N,N],[17,"XCB_FILL_STYLE_OPAQUE_STIPPLED","","",N,N],[17,"XCB_FILL_RULE_EVEN_ODD","","",N,N],[17,"XCB_FILL_RULE_WINDING","","",N,N],[17,"XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN","","",N,N],[17,"XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS","","",N,N],[17,"XCB_ARC_MODE_CHORD","","",N,N],[17,"XCB_ARC_MODE_PIE_SLICE","","",N,N],[17,"XCB_CREATE_GC","","",N,N],[17,"XCB_CHANGE_GC","","",N,N],[17,"XCB_COPY_GC","","",N,N],[17,"XCB_SET_DASHES","","",N,N],[17,"XCB_CLIP_ORDERING_UNSORTED","","",N,N],[17,"XCB_CLIP_ORDERING_Y_SORTED","","",N,N],[17,"XCB_CLIP_ORDERING_YX_SORTED","","",N,N],[17,"XCB_CLIP_ORDERING_YX_BANDED","","",N,N],[17,"XCB_SET_CLIP_RECTANGLES","","",N,N],[17,"XCB_FREE_GC","","",N,N],[17,"XCB_CLEAR_AREA","","",N,N],[17,"XCB_COPY_AREA","","",N,N],[17,"XCB_COPY_PLANE","","",N,N],[17,"XCB_COORD_MODE_ORIGIN","","Treats all coordinates as relative to the origin.",N,N],[17,"XCB_COORD_MODE_PREVIOUS","","Treats all coordinates after the first as relative to the previous coordinate.",N,N],[17,"XCB_POLY_POINT","","",N,N],[17,"XCB_POLY_LINE","","",N,N],[17,"XCB_POLY_SEGMENT","","",N,N],[17,"XCB_POLY_RECTANGLE","","",N,N],[17,"XCB_POLY_ARC","","",N,N],[17,"XCB_POLY_SHAPE_COMPLEX","","",N,N],[17,"XCB_POLY_SHAPE_NONCONVEX","","",N,N],[17,"XCB_POLY_SHAPE_CONVEX","","",N,N],[17,"XCB_FILL_POLY","","",N,N],[17,"XCB_POLY_FILL_RECTANGLE","","",N,N],[17,"XCB_POLY_FILL_ARC","","",N,N],[17,"XCB_IMAGE_FORMAT_XY_BITMAP","","",N,N],[17,"XCB_IMAGE_FORMAT_XY_PIXMAP","","",N,N],[17,"XCB_IMAGE_FORMAT_Z_PIXMAP","","",N,N],[17,"XCB_PUT_IMAGE","","",N,N],[17,"XCB_GET_IMAGE","","",N,N],[17,"XCB_POLY_TEXT_8","","",N,N],[17,"XCB_POLY_TEXT_16","","",N,N],[17,"XCB_IMAGE_TEXT_8","","",N,N],[17,"XCB_IMAGE_TEXT_16","","",N,N],[17,"XCB_COLORMAP_ALLOC_NONE","","",N,N],[17,"XCB_COLORMAP_ALLOC_ALL","","",N,N],[17,"XCB_CREATE_COLORMAP","","",N,N],[17,"XCB_FREE_COLORMAP","","",N,N],[17,"XCB_COPY_COLORMAP_AND_FREE","","",N,N],[17,"XCB_INSTALL_COLORMAP","","",N,N],[17,"XCB_UNINSTALL_COLORMAP","","",N,N],[17,"XCB_LIST_INSTALLED_COLORMAPS","","",N,N],[17,"XCB_ALLOC_COLOR","","",N,N],[17,"XCB_ALLOC_NAMED_COLOR","","",N,N],[17,"XCB_ALLOC_COLOR_CELLS","","",N,N],[17,"XCB_ALLOC_COLOR_PLANES","","",N,N],[17,"XCB_FREE_COLORS","","",N,N],[17,"XCB_COLOR_FLAG_RED","","",N,N],[17,"XCB_COLOR_FLAG_GREEN","","",N,N],[17,"XCB_COLOR_FLAG_BLUE","","",N,N],[17,"XCB_STORE_COLORS","","",N,N],[17,"XCB_STORE_NAMED_COLOR","","",N,N],[17,"XCB_QUERY_COLORS","","",N,N],[17,"XCB_LOOKUP_COLOR","","",N,N],[17,"XCB_PIXMAP_NONE","","",N,N],[17,"XCB_CREATE_CURSOR","","",N,N],[17,"XCB_FONT_NONE","","",N,N],[17,"XCB_CREATE_GLYPH_CURSOR","","",N,N],[17,"XCB_FREE_CURSOR","","",N,N],[17,"XCB_RECOLOR_CURSOR","","",N,N],[17,"XCB_QUERY_SHAPE_OF_LARGEST_CURSOR","","",N,N],[17,"XCB_QUERY_SHAPE_OF_FASTEST_TILE","","",N,N],[17,"XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE","","",N,N],[17,"XCB_QUERY_BEST_SIZE","","",N,N],[17,"XCB_QUERY_EXTENSION","","",N,N],[17,"XCB_LIST_EXTENSIONS","","",N,N],[17,"XCB_CHANGE_KEYBOARD_MAPPING","","",N,N],[17,"XCB_GET_KEYBOARD_MAPPING","","",N,N],[17,"XCB_KB_KEY_CLICK_PERCENT","","",N,N],[17,"XCB_KB_BELL_PERCENT","","",N,N],[17,"XCB_KB_BELL_PITCH","","",N,N],[17,"XCB_KB_BELL_DURATION","","",N,N],[17,"XCB_KB_LED","","",N,N],[17,"XCB_KB_LED_MODE","","",N,N],[17,"XCB_KB_KEY","","",N,N],[17,"XCB_KB_AUTO_REPEAT_MODE","","",N,N],[17,"XCB_LED_MODE_OFF","","",N,N],[17,"XCB_LED_MODE_ON","","",N,N],[17,"XCB_AUTO_REPEAT_MODE_OFF","","",N,N],[17,"XCB_AUTO_REPEAT_MODE_ON","","",N,N],[17,"XCB_AUTO_REPEAT_MODE_DEFAULT","","",N,N],[17,"XCB_CHANGE_KEYBOARD_CONTROL","","",N,N],[17,"XCB_GET_KEYBOARD_CONTROL","","",N,N],[17,"XCB_BELL","","",N,N],[17,"XCB_CHANGE_POINTER_CONTROL","","",N,N],[17,"XCB_GET_POINTER_CONTROL","","",N,N],[17,"XCB_BLANKING_NOT_PREFERRED","","",N,N],[17,"XCB_BLANKING_PREFERRED","","",N,N],[17,"XCB_BLANKING_DEFAULT","","",N,N],[17,"XCB_EXPOSURES_NOT_ALLOWED","","",N,N],[17,"XCB_EXPOSURES_ALLOWED","","",N,N],[17,"XCB_EXPOSURES_DEFAULT","","",N,N],[17,"XCB_SET_SCREEN_SAVER","","",N,N],[17,"XCB_GET_SCREEN_SAVER","","",N,N],[17,"XCB_HOST_MODE_INSERT","","",N,N],[17,"XCB_HOST_MODE_DELETE","","",N,N],[17,"XCB_FAMILY_INTERNET","","",N,N],[17,"XCB_FAMILY_DE_CNET","","",N,N],[17,"XCB_FAMILY_CHAOS","","",N,N],[17,"XCB_FAMILY_SERVER_INTERPRETED","","",N,N],[17,"XCB_FAMILY_INTERNET_6","","",N,N],[17,"XCB_CHANGE_HOSTS","","",N,N],[17,"XCB_LIST_HOSTS","","",N,N],[17,"XCB_ACCESS_CONTROL_DISABLE","","",N,N],[17,"XCB_ACCESS_CONTROL_ENABLE","","",N,N],[17,"XCB_SET_ACCESS_CONTROL","","",N,N],[17,"XCB_CLOSE_DOWN_DESTROY_ALL","","",N,N],[17,"XCB_CLOSE_DOWN_RETAIN_PERMANENT","","",N,N],[17,"XCB_CLOSE_DOWN_RETAIN_TEMPORARY","","",N,N],[17,"XCB_SET_CLOSE_DOWN_MODE","","",N,N],[17,"XCB_KILL_ALL_TEMPORARY","","",N,N],[17,"XCB_KILL_CLIENT","","",N,N],[17,"XCB_ROTATE_PROPERTIES","","",N,N],[17,"XCB_SCREEN_SAVER_RESET","","",N,N],[17,"XCB_SCREEN_SAVER_ACTIVE","","",N,N],[17,"XCB_FORCE_SCREEN_SAVER","","",N,N],[17,"XCB_MAPPING_STATUS_SUCCESS","","",N,N],[17,"XCB_MAPPING_STATUS_BUSY","","",N,N],[17,"XCB_MAPPING_STATUS_FAILURE","","",N,N],[17,"XCB_SET_POINTER_MAPPING","","",N,N],[17,"XCB_GET_POINTER_MAPPING","","",N,N],[17,"XCB_MAP_INDEX_SHIFT","","",N,N],[17,"XCB_MAP_INDEX_LOCK","","",N,N],[17,"XCB_MAP_INDEX_CONTROL","","",N,N],[17,"XCB_MAP_INDEX_1","","",N,N],[17,"XCB_MAP_INDEX_2","","",N,N],[17,"XCB_MAP_INDEX_3","","",N,N],[17,"XCB_MAP_INDEX_4","","",N,N],[17,"XCB_MAP_INDEX_5","","",N,N],[17,"XCB_SET_MODIFIER_MAPPING","","",N,N],[17,"XCB_GET_MODIFIER_MAPPING","","",N,N],[17,"XCB_NO_OPERATION","","",N,N],[11,"clone","","",193,[[["self"]],["xcb_char2b_t"]]],[11,"clone","","",209,[[["self"]],["xcb_point_t"]]],[11,"clone","","",211,[[["self"]],["xcb_rectangle_t"]]],[11,"clone","","",213,[[["self"]],["xcb_arc_t"]]],[11,"clone","","",215,[[["self"]],["xcb_format_t"]]],[11,"clone","","",217,[[["self"]],["xcb_visualtype_t"]]],[11,"clone","","",231,[[["self"]],["xcb_key_press_event_t"]]],[11,"clone","","",232,[[["self"]],["xcb_button_press_event_t"]]],[11,"clone","","",233,[[["self"]],["xcb_motion_notify_event_t"]]],[11,"clone","","",234,[[["self"]],["xcb_enter_notify_event_t"]]],[11,"clone","","",235,[[["self"]],["xcb_focus_in_event_t"]]],[11,"clone","","",236,[[["self"]],["xcb_keymap_notify_event_t"]]],[11,"clone","","",237,[[["self"]],["xcb_expose_event_t"]]],[11,"clone","","",238,[[["self"]],["xcb_graphics_exposure_event_t"]]],[11,"clone","","",239,[[["self"]],["xcb_no_exposure_event_t"]]],[11,"clone","","",240,[[["self"]],["xcb_visibility_notify_event_t"]]],[11,"clone","","",241,[[["self"]],["xcb_create_notify_event_t"]]],[11,"clone","","",242,[[["self"]],["xcb_destroy_notify_event_t"]]],[11,"clone","","",243,[[["self"]],["xcb_unmap_notify_event_t"]]],[11,"clone","","",244,[[["self"]],["xcb_map_notify_event_t"]]],[11,"clone","","",245,[[["self"]],["xcb_map_request_event_t"]]],[11,"clone","","",246,[[["self"]],["xcb_reparent_notify_event_t"]]],[11,"clone","","",247,[[["self"]],["xcb_configure_notify_event_t"]]],[11,"clone","","",248,[[["self"]],["xcb_configure_request_event_t"]]],[11,"clone","","",249,[[["self"]],["xcb_gravity_notify_event_t"]]],[11,"clone","","",250,[[["self"]],["xcb_resize_request_event_t"]]],[11,"clone","","",251,[[["self"]],["xcb_circulate_notify_event_t"]]],[11,"clone","","",252,[[["self"]],["xcb_property_notify_event_t"]]],[11,"clone","","",253,[[["self"]],["xcb_selection_clear_event_t"]]],[11,"clone","","",254,[[["self"]],["xcb_selection_request_event_t"]]],[11,"clone","","",255,[[["self"]],["xcb_selection_notify_event_t"]]],[11,"clone","","",256,[[["self"]],["xcb_colormap_notify_event_t"]]],[11,"clone","","",257,[[["self"]],["xcb_client_message_data_t"]]],[11,"clone","","",259,[[["self"]],["xcb_client_message_event_t"]]],[11,"clone","","",260,[[["self"]],["xcb_mapping_notify_event_t"]]],[11,"clone","","",261,[[["self"]],["xcb_ge_generic_event_t"]]],[11,"clone","","",262,[[["self"]],["xcb_request_error_t"]]],[11,"clone","","",263,[[["self"]],["xcb_value_error_t"]]],[11,"clone","","",266,[[["self"]],["xcb_get_window_attributes_request_t"]]],[11,"clone","","",440,[[["self"]],["xcb_get_window_attributes_cookie_t"]]],[11,"clone","","",267,[[["self"]],["xcb_get_window_attributes_reply_t"]]],[11,"clone","","",268,[[["self"]],["xcb_destroy_window_request_t"]]],[11,"clone","","",269,[[["self"]],["xcb_destroy_subwindows_request_t"]]],[11,"clone","","",270,[[["self"]],["xcb_change_save_set_request_t"]]],[11,"clone","","",271,[[["self"]],["xcb_reparent_window_request_t"]]],[11,"clone","","",272,[[["self"]],["xcb_map_window_request_t"]]],[11,"clone","","",273,[[["self"]],["xcb_map_subwindows_request_t"]]],[11,"clone","","",274,[[["self"]],["xcb_unmap_window_request_t"]]],[11,"clone","","",275,[[["self"]],["xcb_unmap_subwindows_request_t"]]],[11,"clone","","",277,[[["self"]],["xcb_circulate_window_request_t"]]],[11,"clone","","",278,[[["self"]],["xcb_get_geometry_request_t"]]],[11,"clone","","",441,[[["self"]],["xcb_get_geometry_cookie_t"]]],[11,"clone","","",279,[[["self"]],["xcb_get_geometry_reply_t"]]],[11,"clone","","",280,[[["self"]],["xcb_query_tree_request_t"]]],[11,"clone","","",442,[[["self"]],["xcb_query_tree_cookie_t"]]],[11,"clone","","",443,[[["self"]],["xcb_intern_atom_cookie_t"]]],[11,"clone","","",283,[[["self"]],["xcb_intern_atom_reply_t"]]],[11,"clone","","",284,[[["self"]],["xcb_get_atom_name_request_t"]]],[11,"clone","","",444,[[["self"]],["xcb_get_atom_name_cookie_t"]]],[11,"clone","","",287,[[["self"]],["xcb_delete_property_request_t"]]],[11,"clone","","",288,[[["self"]],["xcb_get_property_request_t"]]],[11,"clone","","",445,[[["self"]],["xcb_get_property_cookie_t"]]],[11,"clone","","",290,[[["self"]],["xcb_list_properties_request_t"]]],[11,"clone","","",446,[[["self"]],["xcb_list_properties_cookie_t"]]],[11,"clone","","",292,[[["self"]],["xcb_set_selection_owner_request_t"]]],[11,"clone","","",293,[[["self"]],["xcb_get_selection_owner_request_t"]]],[11,"clone","","",447,[[["self"]],["xcb_get_selection_owner_cookie_t"]]],[11,"clone","","",294,[[["self"]],["xcb_get_selection_owner_reply_t"]]],[11,"clone","","",295,[[["self"]],["xcb_convert_selection_request_t"]]],[11,"clone","","",296,[[["self"]],["xcb_send_event_request_t"]]],[11,"clone","","",297,[[["self"]],["xcb_grab_pointer_request_t"]]],[11,"clone","","",448,[[["self"]],["xcb_grab_pointer_cookie_t"]]],[11,"clone","","",298,[[["self"]],["xcb_grab_pointer_reply_t"]]],[11,"clone","","",299,[[["self"]],["xcb_ungrab_pointer_request_t"]]],[11,"clone","","",300,[[["self"]],["xcb_grab_button_request_t"]]],[11,"clone","","",301,[[["self"]],["xcb_ungrab_button_request_t"]]],[11,"clone","","",302,[[["self"]],["xcb_change_active_pointer_grab_request_t"]]],[11,"clone","","",303,[[["self"]],["xcb_grab_keyboard_request_t"]]],[11,"clone","","",449,[[["self"]],["xcb_grab_keyboard_cookie_t"]]],[11,"clone","","",304,[[["self"]],["xcb_grab_keyboard_reply_t"]]],[11,"clone","","",305,[[["self"]],["xcb_ungrab_keyboard_request_t"]]],[11,"clone","","",306,[[["self"]],["xcb_grab_key_request_t"]]],[11,"clone","","",307,[[["self"]],["xcb_ungrab_key_request_t"]]],[11,"clone","","",308,[[["self"]],["xcb_allow_events_request_t"]]],[11,"clone","","",309,[[["self"]],["xcb_grab_server_request_t"]]],[11,"clone","","",310,[[["self"]],["xcb_ungrab_server_request_t"]]],[11,"clone","","",311,[[["self"]],["xcb_query_pointer_request_t"]]],[11,"clone","","",450,[[["self"]],["xcb_query_pointer_cookie_t"]]],[11,"clone","","",312,[[["self"]],["xcb_query_pointer_reply_t"]]],[11,"clone","","",313,[[["self"]],["xcb_timecoord_t"]]],[11,"clone","","",315,[[["self"]],["xcb_get_motion_events_request_t"]]],[11,"clone","","",451,[[["self"]],["xcb_get_motion_events_cookie_t"]]],[11,"clone","","",317,[[["self"]],["xcb_translate_coordinates_request_t"]]],[11,"clone","","",452,[[["self"]],["xcb_translate_coordinates_cookie_t"]]],[11,"clone","","",318,[[["self"]],["xcb_translate_coordinates_reply_t"]]],[11,"clone","","",319,[[["self"]],["xcb_warp_pointer_request_t"]]],[11,"clone","","",320,[[["self"]],["xcb_set_input_focus_request_t"]]],[11,"clone","","",321,[[["self"]],["xcb_get_input_focus_request_t"]]],[11,"clone","","",453,[[["self"]],["xcb_get_input_focus_cookie_t"]]],[11,"clone","","",322,[[["self"]],["xcb_get_input_focus_reply_t"]]],[11,"clone","","",323,[[["self"]],["xcb_query_keymap_request_t"]]],[11,"clone","","",454,[[["self"]],["xcb_query_keymap_cookie_t"]]],[11,"clone","","",324,[[["self"]],["xcb_query_keymap_reply_t"]]],[11,"clone","","",326,[[["self"]],["xcb_close_font_request_t"]]],[11,"clone","","",327,[[["self"]],["xcb_fontprop_t"]]],[11,"clone","","",329,[[["self"]],["xcb_charinfo_t"]]],[11,"clone","","",331,[[["self"]],["xcb_query_font_request_t"]]],[11,"clone","","",455,[[["self"]],["xcb_query_font_cookie_t"]]],[11,"clone","","",456,[[["self"]],["xcb_query_text_extents_cookie_t"]]],[11,"clone","","",334,[[["self"]],["xcb_query_text_extents_reply_t"]]],[11,"clone","","",457,[[["self"]],["xcb_list_fonts_cookie_t"]]],[11,"clone","","",458,[[["self"]],["xcb_list_fonts_with_info_cookie_t"]]],[11,"clone","","",342,[[["self"]],["xcb_get_font_path_request_t"]]],[11,"clone","","",459,[[["self"]],["xcb_get_font_path_cookie_t"]]],[11,"clone","","",344,[[["self"]],["xcb_create_pixmap_request_t"]]],[11,"clone","","",345,[[["self"]],["xcb_free_pixmap_request_t"]]],[11,"clone","","",348,[[["self"]],["xcb_copy_gc_request_t"]]],[11,"clone","","",351,[[["self"]],["xcb_free_gc_request_t"]]],[11,"clone","","",352,[[["self"]],["xcb_clear_area_request_t"]]],[11,"clone","","",353,[[["self"]],["xcb_copy_area_request_t"]]],[11,"clone","","",354,[[["self"]],["xcb_copy_plane_request_t"]]],[11,"clone","","",357,[[["self"]],["xcb_segment_t"]]],[11,"clone","","",366,[[["self"]],["xcb_get_image_request_t"]]],[11,"clone","","",460,[[["self"]],["xcb_get_image_cookie_t"]]],[11,"clone","","",372,[[["self"]],["xcb_create_colormap_request_t"]]],[11,"clone","","",373,[[["self"]],["xcb_free_colormap_request_t"]]],[11,"clone","","",374,[[["self"]],["xcb_copy_colormap_and_free_request_t"]]],[11,"clone","","",375,[[["self"]],["xcb_install_colormap_request_t"]]],[11,"clone","","",376,[[["self"]],["xcb_uninstall_colormap_request_t"]]],[11,"clone","","",377,[[["self"]],["xcb_list_installed_colormaps_request_t"]]],[11,"clone","","",461,[[["self"]],["xcb_list_installed_colormaps_cookie_t"]]],[11,"clone","","",379,[[["self"]],["xcb_alloc_color_request_t"]]],[11,"clone","","",462,[[["self"]],["xcb_alloc_color_cookie_t"]]],[11,"clone","","",380,[[["self"]],["xcb_alloc_color_reply_t"]]],[11,"clone","","",463,[[["self"]],["xcb_alloc_named_color_cookie_t"]]],[11,"clone","","",382,[[["self"]],["xcb_alloc_named_color_reply_t"]]],[11,"clone","","",383,[[["self"]],["xcb_alloc_color_cells_request_t"]]],[11,"clone","","",464,[[["self"]],["xcb_alloc_color_cells_cookie_t"]]],[11,"clone","","",385,[[["self"]],["xcb_alloc_color_planes_request_t"]]],[11,"clone","","",465,[[["self"]],["xcb_alloc_color_planes_cookie_t"]]],[11,"clone","","",388,[[["self"]],["xcb_coloritem_t"]]],[11,"clone","","",392,[[["self"]],["xcb_rgb_t"]]],[11,"clone","","",466,[[["self"]],["xcb_query_colors_cookie_t"]]],[11,"clone","","",467,[[["self"]],["xcb_lookup_color_cookie_t"]]],[11,"clone","","",397,[[["self"]],["xcb_lookup_color_reply_t"]]],[11,"clone","","",398,[[["self"]],["xcb_create_cursor_request_t"]]],[11,"clone","","",399,[[["self"]],["xcb_create_glyph_cursor_request_t"]]],[11,"clone","","",400,[[["self"]],["xcb_free_cursor_request_t"]]],[11,"clone","","",401,[[["self"]],["xcb_recolor_cursor_request_t"]]],[11,"clone","","",402,[[["self"]],["xcb_query_best_size_request_t"]]],[11,"clone","","",468,[[["self"]],["xcb_query_best_size_cookie_t"]]],[11,"clone","","",403,[[["self"]],["xcb_query_best_size_reply_t"]]],[11,"clone","","",469,[[["self"]],["xcb_query_extension_cookie_t"]]],[11,"clone","","",405,[[["self"]],["xcb_query_extension_reply_t"]]],[11,"clone","","",406,[[["self"]],["xcb_list_extensions_request_t"]]],[11,"clone","","",470,[[["self"]],["xcb_list_extensions_cookie_t"]]],[11,"clone","","",409,[[["self"]],["xcb_get_keyboard_mapping_request_t"]]],[11,"clone","","",471,[[["self"]],["xcb_get_keyboard_mapping_cookie_t"]]],[11,"clone","","",412,[[["self"]],["xcb_get_keyboard_control_request_t"]]],[11,"clone","","",472,[[["self"]],["xcb_get_keyboard_control_cookie_t"]]],[11,"clone","","",413,[[["self"]],["xcb_get_keyboard_control_reply_t"]]],[11,"clone","","",414,[[["self"]],["xcb_bell_request_t"]]],[11,"clone","","",415,[[["self"]],["xcb_change_pointer_control_request_t"]]],[11,"clone","","",416,[[["self"]],["xcb_get_pointer_control_request_t"]]],[11,"clone","","",473,[[["self"]],["xcb_get_pointer_control_cookie_t"]]],[11,"clone","","",417,[[["self"]],["xcb_get_pointer_control_reply_t"]]],[11,"clone","","",418,[[["self"]],["xcb_set_screen_saver_request_t"]]],[11,"clone","","",419,[[["self"]],["xcb_get_screen_saver_request_t"]]],[11,"clone","","",474,[[["self"]],["xcb_get_screen_saver_cookie_t"]]],[11,"clone","","",420,[[["self"]],["xcb_get_screen_saver_reply_t"]]],[11,"clone","","",424,[[["self"]],["xcb_list_hosts_request_t"]]],[11,"clone","","",475,[[["self"]],["xcb_list_hosts_cookie_t"]]],[11,"clone","","",426,[[["self"]],["xcb_set_access_control_request_t"]]],[11,"clone","","",427,[[["self"]],["xcb_set_close_down_mode_request_t"]]],[11,"clone","","",428,[[["self"]],["xcb_kill_client_request_t"]]],[11,"clone","","",430,[[["self"]],["xcb_force_screen_saver_request_t"]]],[11,"clone","","",476,[[["self"]],["xcb_set_pointer_mapping_cookie_t"]]],[11,"clone","","",432,[[["self"]],["xcb_set_pointer_mapping_reply_t"]]],[11,"clone","","",433,[[["self"]],["xcb_get_pointer_mapping_request_t"]]],[11,"clone","","",477,[[["self"]],["xcb_get_pointer_mapping_cookie_t"]]],[11,"clone","","",478,[[["self"]],["xcb_set_modifier_mapping_cookie_t"]]],[11,"clone","","",436,[[["self"]],["xcb_set_modifier_mapping_reply_t"]]],[11,"clone","","",437,[[["self"]],["xcb_get_modifier_mapping_request_t"]]],[11,"clone","","",479,[[["self"]],["xcb_get_modifier_mapping_cookie_t"]]],[11,"clone","","",439,[[["self"]],["xcb_no_operation_request_t"]]],[0,"big_requests","xcb::ffi","",N,N],[3,"xcb_big_requests_enable_request_t","xcb::ffi::big_requests","",N,N],[12,"major_opcode","","",480,N],[12,"minor_opcode","","",480,N],[12,"length","","",480,N],[3,"xcb_big_requests_enable_cookie_t","","",N,N],[3,"xcb_big_requests_enable_reply_t","","",N,N],[12,"response_type","","",481,N],[12,"pad0","","",481,N],[12,"sequence","","",481,N],[12,"length","","",481,N],[12,"maximum_request_length","","",481,N],[7,"xcb_big_requests_id","","",N,N],[5,"xcb_big_requests_enable_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_big_requests_enable","","",N,N],[5,"xcb_big_requests_enable_unchecked","","",N,N],[17,"XCB_BIG_REQUESTS_MAJOR_VERSION","","",N,N],[17,"XCB_BIG_REQUESTS_MINOR_VERSION","","",N,N],[17,"XCB_BIG_REQUESTS_ENABLE","","",N,N],[11,"clone","","",480,[[["self"]],["xcb_big_requests_enable_request_t"]]],[11,"clone","","",482,[[["self"]],["xcb_big_requests_enable_cookie_t"]]],[11,"clone","","",481,[[["self"]],["xcb_big_requests_enable_reply_t"]]],[0,"xc_misc","xcb::ffi","",N,N],[3,"xcb_xc_misc_get_version_request_t","xcb::ffi::xc_misc","",N,N],[12,"major_opcode","","",483,N],[12,"minor_opcode","","",483,N],[12,"length","","",483,N],[12,"client_major_version","","",483,N],[12,"client_minor_version","","",483,N],[3,"xcb_xc_misc_get_version_cookie_t","","",N,N],[3,"xcb_xc_misc_get_version_reply_t","","",N,N],[12,"response_type","","",484,N],[12,"pad0","","",484,N],[12,"sequence","","",484,N],[12,"length","","",484,N],[12,"server_major_version","","",484,N],[12,"server_minor_version","","",484,N],[3,"xcb_xc_misc_get_xid_range_request_t","","",N,N],[12,"major_opcode","","",485,N],[12,"minor_opcode","","",485,N],[12,"length","","",485,N],[3,"xcb_xc_misc_get_xid_range_cookie_t","","",N,N],[3,"xcb_xc_misc_get_xid_range_reply_t","","",N,N],[12,"response_type","","",486,N],[12,"pad0","","",486,N],[12,"sequence","","",486,N],[12,"length","","",486,N],[12,"start_id","","",486,N],[12,"count","","",486,N],[3,"xcb_xc_misc_get_xid_list_request_t","","",N,N],[12,"major_opcode","","",487,N],[12,"minor_opcode","","",487,N],[12,"length","","",487,N],[12,"count","","",487,N],[3,"xcb_xc_misc_get_xid_list_cookie_t","","",N,N],[3,"xcb_xc_misc_get_xid_list_reply_t","","",N,N],[12,"response_type","","",488,N],[12,"pad0","","",488,N],[12,"sequence","","",488,N],[12,"length","","",488,N],[12,"ids_len","","",488,N],[12,"pad1","","",488,N],[7,"xcb_xc_misc_id","","",N,N],[5,"xcb_xc_misc_get_version_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_xc_misc_get_version","","",N,N],[5,"xcb_xc_misc_get_version_unchecked","","",N,N],[5,"xcb_xc_misc_get_xid_range_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_xc_misc_get_xid_range","","",N,N],[5,"xcb_xc_misc_get_xid_range_unchecked","","",N,N],[5,"xcb_xc_misc_get_xid_list_ids","","",N,N],[5,"xcb_xc_misc_get_xid_list_ids_length","","",N,N],[5,"xcb_xc_misc_get_xid_list_ids_end","","",N,N],[5,"xcb_xc_misc_get_xid_list_reply","","the returned value must be freed by the caller using libc::free().",N,N],[5,"xcb_xc_misc_get_xid_list","","",N,N],[5,"xcb_xc_misc_get_xid_list_unchecked","","",N,N],[17,"XCB_XC_MISC_MAJOR_VERSION","","",N,N],[17,"XCB_XC_MISC_MINOR_VERSION","","",N,N],[17,"XCB_XC_MISC_GET_VERSION","","",N,N],[17,"XCB_XC_MISC_GET_XID_RANGE","","",N,N],[17,"XCB_XC_MISC_GET_XID_LIST","","",N,N],[11,"clone","","",483,[[["self"]],["xcb_xc_misc_get_version_request_t"]]],[11,"clone","","",489,[[["self"]],["xcb_xc_misc_get_version_cookie_t"]]],[11,"clone","","",484,[[["self"]],["xcb_xc_misc_get_version_reply_t"]]],[11,"clone","","",485,[[["self"]],["xcb_xc_misc_get_xid_range_request_t"]]],[11,"clone","","",490,[[["self"]],["xcb_xc_misc_get_xid_range_cookie_t"]]],[11,"clone","","",486,[[["self"]],["xcb_xc_misc_get_xid_range_reply_t"]]],[11,"clone","","",487,[[["self"]],["xcb_xc_misc_get_xid_list_request_t"]]],[11,"clone","","",491,[[["self"]],["xcb_xc_misc_get_xid_list_cookie_t"]]]],"paths":[[3,"StructPtr"],[3,"Event"],[3,"Error"],[3,"Cookie"],[3,"Reply"],[4,"ConnError"],[8,"Zero"],[6,"VoidCookie"],[3,"Connection"],[3,"QueryExtensionData"],[3,"RequestError"],[3,"ValueError"],[3,"WindowError"],[3,"PixmapError"],[3,"AtomError"],[3,"CursorError"],[3,"FontError"],[3,"MatchError"],[3,"DrawableError"],[3,"AccessError"],[3,"AllocError"],[3,"ColormapError"],[3,"GContextError"],[3,"IdChoiceError"],[3,"NameError"],[3,"LengthError"],[3,"ImplementationError"],[3,"Char2b"],[3,"Point"],[3,"Rectangle"],[3,"Arc"],[3,"Format"],[3,"Visualtype"],[3,"Timecoord"],[3,"Fontprop"],[3,"Charinfo"],[3,"Segment"],[3,"Coloritem"],[3,"Rgb"],[6,"Char2bIterator"],[6,"PointIterator"],[6,"RectangleIterator"],[6,"ArcIterator"],[6,"FormatIterator"],[6,"VisualtypeIterator"],[6,"Depth"],[6,"DepthIterator"],[6,"Screen"],[6,"ScreenIterator"],[6,"SetupRequest"],[6,"SetupRequestIterator"],[6,"SetupFailed"],[6,"SetupFailedIterator"],[6,"SetupAuthenticate"],[6,"SetupAuthenticateIterator"],[6,"Setup"],[6,"SetupIterator"],[6,"KeyPressEvent"],[6,"ButtonPressEvent"],[6,"MotionNotifyEvent"],[6,"EnterNotifyEvent"],[6,"FocusInEvent"],[6,"KeymapNotifyEvent"],[6,"ExposeEvent"],[6,"GraphicsExposureEvent"],[6,"NoExposureEvent"],[6,"VisibilityNotifyEvent"],[6,"CreateNotifyEvent"],[6,"DestroyNotifyEvent"],[6,"UnmapNotifyEvent"],[6,"MapNotifyEvent"],[6,"MapRequestEvent"],[6,"ReparentNotifyEvent"],[6,"ConfigureNotifyEvent"],[6,"ConfigureRequestEvent"],[6,"GravityNotifyEvent"],[6,"ResizeRequestEvent"],[6,"CirculateNotifyEvent"],[6,"PropertyNotifyEvent"],[6,"SelectionClearEvent"],[6,"SelectionRequestEvent"],[6,"SelectionNotifyEvent"],[6,"ColormapNotifyEvent"],[6,"ClientMessageData"],[6,"ClientMessageDataIterator"],[6,"ClientMessageEvent"],[6,"MappingNotifyEvent"],[6,"GeGenericEvent"],[6,"GetWindowAttributesCookie"],[6,"GetWindowAttributesReply"],[6,"GetGeometryCookie"],[6,"GetGeometryReply"],[6,"QueryTreeCookie"],[6,"QueryTreeReply"],[6,"InternAtomCookie"],[6,"InternAtomReply"],[6,"GetAtomNameCookie"],[6,"GetAtomNameReply"],[6,"GetPropertyCookie"],[6,"GetPropertyReply"],[6,"ListPropertiesCookie"],[6,"ListPropertiesReply"],[6,"GetSelectionOwnerCookie"],[6,"GetSelectionOwnerReply"],[6,"GrabPointerCookie"],[6,"GrabPointerReply"],[6,"GrabKeyboardCookie"],[6,"GrabKeyboardReply"],[6,"QueryPointerCookie"],[6,"QueryPointerReply"],[6,"TimecoordIterator"],[6,"GetMotionEventsCookie"],[6,"GetMotionEventsReply"],[6,"TranslateCoordinatesCookie"],[6,"TranslateCoordinatesReply"],[6,"GetInputFocusCookie"],[6,"GetInputFocusReply"],[6,"QueryKeymapCookie"],[6,"QueryKeymapReply"],[6,"FontpropIterator"],[6,"CharinfoIterator"],[6,"QueryFontCookie"],[6,"QueryFontReply"],[6,"QueryTextExtentsCookie"],[6,"QueryTextExtentsReply"],[6,"Str"],[6,"StrIterator"],[6,"ListFontsCookie"],[6,"ListFontsReply"],[6,"ListFontsWithInfoCookie"],[6,"ListFontsWithInfoReply"],[6,"GetFontPathCookie"],[6,"GetFontPathReply"],[6,"SegmentIterator"],[6,"GetImageCookie"],[6,"GetImageReply"],[6,"ListInstalledColormapsCookie"],[6,"ListInstalledColormapsReply"],[6,"AllocColorCookie"],[6,"AllocColorReply"],[6,"AllocNamedColorCookie"],[6,"AllocNamedColorReply"],[6,"AllocColorCellsCookie"],[6,"AllocColorCellsReply"],[6,"AllocColorPlanesCookie"],[6,"AllocColorPlanesReply"],[6,"ColoritemIterator"],[6,"RgbIterator"],[6,"QueryColorsCookie"],[6,"QueryColorsReply"],[6,"LookupColorCookie"],[6,"LookupColorReply"],[6,"QueryBestSizeCookie"],[6,"QueryBestSizeReply"],[6,"QueryExtensionCookie"],[6,"QueryExtensionReply"],[6,"ListExtensionsCookie"],[6,"ListExtensionsReply"],[6,"GetKeyboardMappingCookie"],[6,"GetKeyboardMappingReply"],[6,"GetKeyboardControlCookie"],[6,"GetKeyboardControlReply"],[6,"GetPointerControlCookie"],[6,"GetPointerControlReply"],[6,"GetScreenSaverCookie"],[6,"GetScreenSaverReply"],[6,"Host"],[6,"HostIterator"],[6,"ListHostsCookie"],[6,"ListHostsReply"],[6,"SetPointerMappingCookie"],[6,"SetPointerMappingReply"],[6,"GetPointerMappingCookie"],[6,"GetPointerMappingReply"],[6,"SetModifierMappingCookie"],[6,"SetModifierMappingReply"],[6,"GetModifierMappingCookie"],[6,"GetModifierMappingReply"],[6,"EnableCookie"],[6,"EnableReply"],[6,"GetVersionCookie"],[6,"GetVersionReply"],[6,"GetXidRangeCookie"],[6,"GetXidRangeReply"],[6,"GetXidListCookie"],[6,"GetXidListReply"],[3,"xcb_generic_iterator_t"],[3,"xcb_generic_reply_t"],[3,"xcb_generic_event_t"],[3,"xcb_ge_event_t"],[3,"xcb_generic_error_t"],[3,"xcb_void_cookie_t"],[3,"xcb_auth_info_t"],[3,"xcb_char2b_t"],[3,"xcb_char2b_iterator_t"],[3,"xcb_window_iterator_t"],[3,"xcb_pixmap_iterator_t"],[3,"xcb_cursor_iterator_t"],[3,"xcb_font_iterator_t"],[3,"xcb_gcontext_iterator_t"],[3,"xcb_colormap_iterator_t"],[3,"xcb_atom_iterator_t"],[3,"xcb_drawable_iterator_t"],[3,"xcb_fontable_iterator_t"],[3,"xcb_visualid_iterator_t"],[3,"xcb_timestamp_iterator_t"],[3,"xcb_keysym_iterator_t"],[3,"xcb_keycode_iterator_t"],[3,"xcb_button_iterator_t"],[3,"xcb_point_t"],[3,"xcb_point_iterator_t"],[3,"xcb_rectangle_t"],[3,"xcb_rectangle_iterator_t"],[3,"xcb_arc_t"],[3,"xcb_arc_iterator_t"],[3,"xcb_format_t"],[3,"xcb_format_iterator_t"],[3,"xcb_visualtype_t"],[3,"xcb_visualtype_iterator_t"],[3,"xcb_depth_t"],[3,"xcb_depth_iterator_t"],[3,"xcb_screen_t"],[3,"xcb_screen_iterator_t"],[3,"xcb_setup_request_t"],[3,"xcb_setup_request_iterator_t"],[3,"xcb_setup_failed_t"],[3,"xcb_setup_failed_iterator_t"],[3,"xcb_setup_authenticate_t"],[3,"xcb_setup_authenticate_iterator_t"],[3,"xcb_setup_t"],[3,"xcb_setup_iterator_t"],[3,"xcb_key_press_event_t"],[3,"xcb_button_press_event_t"],[3,"xcb_motion_notify_event_t"],[3,"xcb_enter_notify_event_t"],[3,"xcb_focus_in_event_t"],[3,"xcb_keymap_notify_event_t"],[3,"xcb_expose_event_t"],[3,"xcb_graphics_exposure_event_t"],[3,"xcb_no_exposure_event_t"],[3,"xcb_visibility_notify_event_t"],[3,"xcb_create_notify_event_t"],[3,"xcb_destroy_notify_event_t"],[3,"xcb_unmap_notify_event_t"],[3,"xcb_map_notify_event_t"],[3,"xcb_map_request_event_t"],[3,"xcb_reparent_notify_event_t"],[3,"xcb_configure_notify_event_t"],[3,"xcb_configure_request_event_t"],[3,"xcb_gravity_notify_event_t"],[3,"xcb_resize_request_event_t"],[3,"xcb_circulate_notify_event_t"],[3,"xcb_property_notify_event_t"],[3,"xcb_selection_clear_event_t"],[3,"xcb_selection_request_event_t"],[3,"xcb_selection_notify_event_t"],[3,"xcb_colormap_notify_event_t"],[3,"xcb_client_message_data_t"],[3,"xcb_client_message_data_iterator_t"],[3,"xcb_client_message_event_t"],[3,"xcb_mapping_notify_event_t"],[3,"xcb_ge_generic_event_t"],[3,"xcb_request_error_t"],[3,"xcb_value_error_t"],[3,"xcb_create_window_request_t"],[3,"xcb_change_window_attributes_request_t"],[3,"xcb_get_window_attributes_request_t"],[3,"xcb_get_window_attributes_reply_t"],[3,"xcb_destroy_window_request_t"],[3,"xcb_destroy_subwindows_request_t"],[3,"xcb_change_save_set_request_t"],[3,"xcb_reparent_window_request_t"],[3,"xcb_map_window_request_t"],[3,"xcb_map_subwindows_request_t"],[3,"xcb_unmap_window_request_t"],[3,"xcb_unmap_subwindows_request_t"],[3,"xcb_configure_window_request_t"],[3,"xcb_circulate_window_request_t"],[3,"xcb_get_geometry_request_t"],[3,"xcb_get_geometry_reply_t"],[3,"xcb_query_tree_request_t"],[3,"xcb_query_tree_reply_t"],[3,"xcb_intern_atom_request_t"],[3,"xcb_intern_atom_reply_t"],[3,"xcb_get_atom_name_request_t"],[3,"xcb_get_atom_name_reply_t"],[3,"xcb_change_property_request_t"],[3,"xcb_delete_property_request_t"],[3,"xcb_get_property_request_t"],[3,"xcb_get_property_reply_t"],[3,"xcb_list_properties_request_t"],[3,"xcb_list_properties_reply_t"],[3,"xcb_set_selection_owner_request_t"],[3,"xcb_get_selection_owner_request_t"],[3,"xcb_get_selection_owner_reply_t"],[3,"xcb_convert_selection_request_t"],[3,"xcb_send_event_request_t"],[3,"xcb_grab_pointer_request_t"],[3,"xcb_grab_pointer_reply_t"],[3,"xcb_ungrab_pointer_request_t"],[3,"xcb_grab_button_request_t"],[3,"xcb_ungrab_button_request_t"],[3,"xcb_change_active_pointer_grab_request_t"],[3,"xcb_grab_keyboard_request_t"],[3,"xcb_grab_keyboard_reply_t"],[3,"xcb_ungrab_keyboard_request_t"],[3,"xcb_grab_key_request_t"],[3,"xcb_ungrab_key_request_t"],[3,"xcb_allow_events_request_t"],[3,"xcb_grab_server_request_t"],[3,"xcb_ungrab_server_request_t"],[3,"xcb_query_pointer_request_t"],[3,"xcb_query_pointer_reply_t"],[3,"xcb_timecoord_t"],[3,"xcb_timecoord_iterator_t"],[3,"xcb_get_motion_events_request_t"],[3,"xcb_get_motion_events_reply_t"],[3,"xcb_translate_coordinates_request_t"],[3,"xcb_translate_coordinates_reply_t"],[3,"xcb_warp_pointer_request_t"],[3,"xcb_set_input_focus_request_t"],[3,"xcb_get_input_focus_request_t"],[3,"xcb_get_input_focus_reply_t"],[3,"xcb_query_keymap_request_t"],[3,"xcb_query_keymap_reply_t"],[3,"xcb_open_font_request_t"],[3,"xcb_close_font_request_t"],[3,"xcb_fontprop_t"],[3,"xcb_fontprop_iterator_t"],[3,"xcb_charinfo_t"],[3,"xcb_charinfo_iterator_t"],[3,"xcb_query_font_request_t"],[3,"xcb_query_font_reply_t"],[3,"xcb_query_text_extents_request_t"],[3,"xcb_query_text_extents_reply_t"],[3,"xcb_str_t"],[3,"xcb_str_iterator_t"],[3,"xcb_list_fonts_request_t"],[3,"xcb_list_fonts_reply_t"],[3,"xcb_list_fonts_with_info_request_t"],[3,"xcb_list_fonts_with_info_reply_t"],[3,"xcb_set_font_path_request_t"],[3,"xcb_get_font_path_request_t"],[3,"xcb_get_font_path_reply_t"],[3,"xcb_create_pixmap_request_t"],[3,"xcb_free_pixmap_request_t"],[3,"xcb_create_gc_request_t"],[3,"xcb_change_gc_request_t"],[3,"xcb_copy_gc_request_t"],[3,"xcb_set_dashes_request_t"],[3,"xcb_set_clip_rectangles_request_t"],[3,"xcb_free_gc_request_t"],[3,"xcb_clear_area_request_t"],[3,"xcb_copy_area_request_t"],[3,"xcb_copy_plane_request_t"],[3,"xcb_poly_point_request_t"],[3,"xcb_poly_line_request_t"],[3,"xcb_segment_t"],[3,"xcb_segment_iterator_t"],[3,"xcb_poly_segment_request_t"],[3,"xcb_poly_rectangle_request_t"],[3,"xcb_poly_arc_request_t"],[3,"xcb_fill_poly_request_t"],[3,"xcb_poly_fill_rectangle_request_t"],[3,"xcb_poly_fill_arc_request_t"],[3,"xcb_put_image_request_t"],[3,"xcb_get_image_request_t"],[3,"xcb_get_image_reply_t"],[3,"xcb_poly_text_8_request_t"],[3,"xcb_poly_text_16_request_t"],[3,"xcb_image_text_8_request_t"],[3,"xcb_image_text_16_request_t"],[3,"xcb_create_colormap_request_t"],[3,"xcb_free_colormap_request_t"],[3,"xcb_copy_colormap_and_free_request_t"],[3,"xcb_install_colormap_request_t"],[3,"xcb_uninstall_colormap_request_t"],[3,"xcb_list_installed_colormaps_request_t"],[3,"xcb_list_installed_colormaps_reply_t"],[3,"xcb_alloc_color_request_t"],[3,"xcb_alloc_color_reply_t"],[3,"xcb_alloc_named_color_request_t"],[3,"xcb_alloc_named_color_reply_t"],[3,"xcb_alloc_color_cells_request_t"],[3,"xcb_alloc_color_cells_reply_t"],[3,"xcb_alloc_color_planes_request_t"],[3,"xcb_alloc_color_planes_reply_t"],[3,"xcb_free_colors_request_t"],[3,"xcb_coloritem_t"],[3,"xcb_coloritem_iterator_t"],[3,"xcb_store_colors_request_t"],[3,"xcb_store_named_color_request_t"],[3,"xcb_rgb_t"],[3,"xcb_rgb_iterator_t"],[3,"xcb_query_colors_request_t"],[3,"xcb_query_colors_reply_t"],[3,"xcb_lookup_color_request_t"],[3,"xcb_lookup_color_reply_t"],[3,"xcb_create_cursor_request_t"],[3,"xcb_create_glyph_cursor_request_t"],[3,"xcb_free_cursor_request_t"],[3,"xcb_recolor_cursor_request_t"],[3,"xcb_query_best_size_request_t"],[3,"xcb_query_best_size_reply_t"],[3,"xcb_query_extension_request_t"],[3,"xcb_query_extension_reply_t"],[3,"xcb_list_extensions_request_t"],[3,"xcb_list_extensions_reply_t"],[3,"xcb_change_keyboard_mapping_request_t"],[3,"xcb_get_keyboard_mapping_request_t"],[3,"xcb_get_keyboard_mapping_reply_t"],[3,"xcb_change_keyboard_control_request_t"],[3,"xcb_get_keyboard_control_request_t"],[3,"xcb_get_keyboard_control_reply_t"],[3,"xcb_bell_request_t"],[3,"xcb_change_pointer_control_request_t"],[3,"xcb_get_pointer_control_request_t"],[3,"xcb_get_pointer_control_reply_t"],[3,"xcb_set_screen_saver_request_t"],[3,"xcb_get_screen_saver_request_t"],[3,"xcb_get_screen_saver_reply_t"],[3,"xcb_change_hosts_request_t"],[3,"xcb_host_t"],[3,"xcb_host_iterator_t"],[3,"xcb_list_hosts_request_t"],[3,"xcb_list_hosts_reply_t"],[3,"xcb_set_access_control_request_t"],[3,"xcb_set_close_down_mode_request_t"],[3,"xcb_kill_client_request_t"],[3,"xcb_rotate_properties_request_t"],[3,"xcb_force_screen_saver_request_t"],[3,"xcb_set_pointer_mapping_request_t"],[3,"xcb_set_pointer_mapping_reply_t"],[3,"xcb_get_pointer_mapping_request_t"],[3,"xcb_get_pointer_mapping_reply_t"],[3,"xcb_set_modifier_mapping_request_t"],[3,"xcb_set_modifier_mapping_reply_t"],[3,"xcb_get_modifier_mapping_request_t"],[3,"xcb_get_modifier_mapping_reply_t"],[3,"xcb_no_operation_request_t"],[3,"xcb_get_window_attributes_cookie_t"],[3,"xcb_get_geometry_cookie_t"],[3,"xcb_query_tree_cookie_t"],[3,"xcb_intern_atom_cookie_t"],[3,"xcb_get_atom_name_cookie_t"],[3,"xcb_get_property_cookie_t"],[3,"xcb_list_properties_cookie_t"],[3,"xcb_get_selection_owner_cookie_t"],[3,"xcb_grab_pointer_cookie_t"],[3,"xcb_grab_keyboard_cookie_t"],[3,"xcb_query_pointer_cookie_t"],[3,"xcb_get_motion_events_cookie_t"],[3,"xcb_translate_coordinates_cookie_t"],[3,"xcb_get_input_focus_cookie_t"],[3,"xcb_query_keymap_cookie_t"],[3,"xcb_query_font_cookie_t"],[3,"xcb_query_text_extents_cookie_t"],[3,"xcb_list_fonts_cookie_t"],[3,"xcb_list_fonts_with_info_cookie_t"],[3,"xcb_get_font_path_cookie_t"],[3,"xcb_get_image_cookie_t"],[3,"xcb_list_installed_colormaps_cookie_t"],[3,"xcb_alloc_color_cookie_t"],[3,"xcb_alloc_named_color_cookie_t"],[3,"xcb_alloc_color_cells_cookie_t"],[3,"xcb_alloc_color_planes_cookie_t"],[3,"xcb_query_colors_cookie_t"],[3,"xcb_lookup_color_cookie_t"],[3,"xcb_query_best_size_cookie_t"],[3,"xcb_query_extension_cookie_t"],[3,"xcb_list_extensions_cookie_t"],[3,"xcb_get_keyboard_mapping_cookie_t"],[3,"xcb_get_keyboard_control_cookie_t"],[3,"xcb_get_pointer_control_cookie_t"],[3,"xcb_get_screen_saver_cookie_t"],[3,"xcb_list_hosts_cookie_t"],[3,"xcb_set_pointer_mapping_cookie_t"],[3,"xcb_get_pointer_mapping_cookie_t"],[3,"xcb_set_modifier_mapping_cookie_t"],[3,"xcb_get_modifier_mapping_cookie_t"],[3,"xcb_big_requests_enable_request_t"],[3,"xcb_big_requests_enable_reply_t"],[3,"xcb_big_requests_enable_cookie_t"],[3,"xcb_xc_misc_get_version_request_t"],[3,"xcb_xc_misc_get_version_reply_t"],[3,"xcb_xc_misc_get_xid_range_request_t"],[3,"xcb_xc_misc_get_xid_range_reply_t"],[3,"xcb_xc_misc_get_xid_list_request_t"],[3,"xcb_xc_misc_get_xid_list_reply_t"],[3,"xcb_xc_misc_get_version_cookie_t"],[3,"xcb_xc_misc_get_xid_range_cookie_t"],[3,"xcb_xc_misc_get_xid_list_cookie_t"]]};
searchIndex["xi_unicode"]={"doc":"Unicode utilities useful for text editing, including a line breaking iterator.","items":[[3,"LineBreakIterator","xi_unicode","An iterator which produces line breaks according to the UAX 14 line breaking algorithm. For each break, return a tuple consisting of the offset within the source string and a bool indicating whether it's a hard break.",N,N],[3,"LineBreakLeafIter","","A class (TODO, not right word) useful for computing line breaks in a rope or other non-contiguous string representation. This is a trickier problem than iterating in a string for a few reasons, the trickiest of which is that in the general case, line breaks require an indeterminate amount of look-behind.",N,N],[5,"linebreak_property","","",N,[[["char"]],["u8"]]],[5,"linebreak_property_str","","",N,N],[11,"clone","","",0,[[["self"]],["linebreakiterator"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"new","","Create a new iterator for the given string slice.",0,[[["str"]],["linebreakiterator"]]],[11,"clone","","",1,[[["self"]],["linebreakleafiter"]]],[11,"default","","",1,[[],["linebreakleafiter"]]],[11,"new","","Create a new line break iterator suitable for leaves in a rope. Precondition: ix references a codepoint in s (implies s is not empty).",1,[[["str"],["usize"]],["linebreakleafiter"]]],[11,"next","","Return break pos and whether it's a hard break. Note: hard break indication may go away, this may not be useful in actual application. If end of leaf is found, return leaf's len. This does not indicate a break, as that requires at least one more codepoint of context. If it is a break, then subsequent next call will return an offset of 0. EOT is always a break, so in the EOT case it's up to the caller to figure that out.",1,N]],"paths":[[3,"LineBreakIterator"],[3,"LineBreakLeafIter"]]};
initSearch(searchIndex);
