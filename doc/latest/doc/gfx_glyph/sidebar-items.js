initSidebarItems({"enum":[["BuiltInLineBreaker",""],["HorizontalAlign","Describes horizontal alignment preference for positioning & bounds."],["Layout","Built-in `GlyphPositioner` implementations."],["LayoutLeftover","Container for glyphs leftover/unable to fit in a layout and/or within render bounds"],["LineBreak","Indicator that a character is a line break, soft or hard. Includes the offset position."],["VerticalAlign","Describes vertical alignment preference for positioning & bounds. Currently a placeholder for future functionality."]],"fn":[["font","Returns a Font from font bytes info or an error reason."]],"struct":[["FontId","Id for a font, the default `FontId(0)` will always be present in a `GlyphBrush`"],["GlyphBrush","Object allowing glyph drawing, containing cache state. Manages glyph positioning cacheing, glyph draw caching & efficient GPU texture cache updating and re-sizing on demand."],["GlyphBrushBuilder","Builder for a `GlyphBrush`."],["GlyphCalculator","Cut down version of a `GlyphBrush` that can calculate pixel bounds, but is unable to actually render anything."],["GlyphCalculatorBuilder","Builder for a `GlyphCalculator`."],["GlyphCalculatorGuard","`GlyphCalculator` scoped cache lock."],["GlyphInfo","A specialised view on a `Section` for the purposes of calculating glyph positions. Used by a `GlyphPositioner`."],["GlyphedSectionText",""],["OwnedSectionText",""],["OwnedVariedSection",""],["RemainingNormCharIndices","`char_indices` style iterator for skipped normalized chars"],["Section","An object that contains all the info to render a section of text."],["SectionGlyphInfo",""],["SectionText",""],["VariedSection","An object that contains all the info to render a varied section of text. That is one including many parts with differing fonts/scales/colors bowing to a single layout."]],"trait":[["GlyphCruncher","Common glyph layout logic."],["GlyphPositioner","Logic to calculate glyph positioning based on `Font` and `GlyphInfo`"],["LineBreaker","Producer of a `LineBreak` iterator. Used to allow to the `Layout` to be line break aware in a generic way."]],"type":[["Font","Aliased type to allow lib usage without declaring underlying rusttype lib"],["Glyph","Aliased type to allow lib usage without declaring underlying rusttype lib"],["GlyphId","Aliased type to allow lib usage without declaring underlying rusttype lib"],["HMetrics","Aliased type to allow lib usage without declaring underlying rusttype lib"],["Point","Aliased type to allow lib usage without declaring underlying rusttype lib"],["PositionedGlyph","Aliased type to allow lib usage without declaring underlying rusttype lib"],["PositionedGlyphIter","An iterator over `PositionedGlyph`s from the `GlyphBrush`"],["Rect","Aliased type to allow lib usage without declaring underlying rusttype lib"],["Scale","Aliased type to allow lib usage without declaring underlying rusttype lib"],["ScaledGlyph","Aliased type to allow lib usage without declaring underlying rusttype lib"],["SharedBytes","Aliased type to allow lib usage without declaring underlying rusttype lib"],["VMetrics","Aliased type to allow lib usage without declaring underlying rusttype lib"]]});