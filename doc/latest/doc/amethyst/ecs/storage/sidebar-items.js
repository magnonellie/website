initSidebarItems({"enum":[["ImmutableParallelRestriction","Specifies that the `RestrictedStorage` can run in parallel immutably."],["MutableParallelRestriction","Specifies that the `RestrictedStorage` can run in parallel mutably."],["SequentialRestriction","Specifies that the `RestrictedStorage` cannot run in parallel."],["StorageEntry","Entry to a storage for convenient filling of components or removal based on whether the entity has a component."]],"struct":[["AntiStorage","An inverted storage type, only useful to iterate entities that do not have a particular component type."],["BTreeStorage","BTreeMap-based storage."],["MaskedStorage","The `UnprotectedStorage` together with the `BitSet` that knows about which elements are stored, and which are not."],["OccupiedEntry","An entry to a storage which has a component associated to the entity."],["RestrictedStorage","Similar to a `MaskedStorage` and a `Storage` combined, but restricts usage to only getting and modifying the components. That means nothing that would modify the inner bitset so the iteration cannot be invalidated. For example, no insertion or removal is allowed."],["TrackChannels","All three types of tracked modifications to components."],["VacantEntry","An entry to a storage which does not have a component associated to the entity."]],"trait":[["AnyStorage","A dynamic storage."],["DistinctStorage","This is a marker trait which requires you to uphold the following guarantee:"],["GenericReadStorage","Provides generic read access to both `ReadStorage` and `WriteStorage`"],["GenericWriteStorage","Provides generic write access to `WriteStorage`, both as a value and a mutable reference."],["TryDefault","Tries to create a default value, returns an `Err` with the name of the storage and/or component if there's no default."],["UnprotectedStorage","Used by the framework to quickly join components."]],"type":[["InsertResult","The status of an `insert()`ion into a storage. If the insertion was successful then the Ok value will contain the component that was replaced (if any)."]]});