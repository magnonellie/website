initSidebarItems({"enum":[["Error","Common error type."],["LogLevelFilter","An enum representing the available verbosity level filters of the logger."],["Trans","Types of state transitions."]],"fn":[["start_logger","Starts a basic logger outputting to stdout with color on supported platforms."]],"mod":[["ecs","SPECS Parallel ECS"],["prelude","Contains common types that can be glob-imported (`*`) for convenience."],["shred","Shared resource dispatcher"],["shrev","Event channel, pull based, that use a ringbuffer for internal storage, to make it possible to do immutable reads."]],"struct":[["Application","An Application is the root object of the game engine. It binds the OS event loop, state machines, timers and other core components in a central place."],["ApplicationBuilder","`ApplicationBuilder` is an interface that allows for creation of an `Application` using a custom set of configuration. This is the normal way an `Application` object is created."],["GameData","Default game data"],["GameDataBuilder","Builder for default game data"],["LoggerConfig","Logger configuration object."],["StateData","State data encapsulates the data sent to all state functions from the application main loop."],["StateMachine","A simple stack-based state machine (pushdown automaton)."]],"trait":[["DataInit","Initialise trait for game data"],["State","A trait which defines game states that can be used by the state machine."]],"type":[["Result","Engine result type."]]});